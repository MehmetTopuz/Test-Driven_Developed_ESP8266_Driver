
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014db4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003260  08014f94  08014f94  00024f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080181f4  080181f4  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  080181f4  080181f4  000281f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080181fc  080181fc  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080181fc  080181fc  000281fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08018208  08018208  00028208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08018214  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  20000334  08018548  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc8  08018548  00030bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047b98  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008fd5  00000000  00000000  00077efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b70  00000000  00000000  00080ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029c0  00000000  00000000  00083a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c3fb  00000000  00000000  00086408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020dcc  00000000  00000000  000b2803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100143  00000000  00000000  000d35cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d3712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d650  00000000  00000000  001d3768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001e0db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001e0ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000334 	.word	0x20000334
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014f7c 	.word	0x08014f7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000338 	.word	0x20000338
 800021c:	08014f7c 	.word	0x08014f7c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fe97 	bl	80018b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fbf4 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbc6 	bl	80013f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 facc 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fae3 	bl	800123a <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fdc5 	bl	8002874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003e8 	.word	0x200003e8

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd12 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f010 fc14 	bl	8011598 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f010 fb6c 	bl	8011598 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000354 	.word	0x20000354
 8000ef4:	20000bc8 	.word	0x20000bc8

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f010 ff43 	bl	8011dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fd0a 	bl	8003966 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000f60:	08018214 	.word	0x08018214
  ldr r2, =_sbss
 8000f64:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000f68:	20000bc8 	.word	0x20000bc8

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f939 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f944 	bl	8001256 <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f910 	bl	8001206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000bb4 	.word	0x20000bb4
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000bb4 	.word	0x20000bb4

08001050 <__NVIC_SetPriorityGrouping>:
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff40 	bl	8001098 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff90 	bl	8001144 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5f 	bl	80010f0 <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff33 	bl	80010b4 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa4 	bl	80011ac <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d005      	beq.n	8001292 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2204      	movs	r2, #4
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e037      	b.n	8001302 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 020e 	bic.w	r2, r2, #14
 80012a0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0201 	bic.w	r2, r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f003 021f 	and.w	r2, r3, #31
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012de:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00c      	beq.n	8001302 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001300:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d00d      	beq.n	8001354 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e047      	b.n	80013e4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 020e 	bic.w	r2, r2, #14
 8001362:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00c      	beq.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
    }
  }
  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013fe:	e15a      	b.n	80016b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 814c 	beq.w	80016b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d00b      	beq.n	8001438 <HAL_GPIO_Init+0x48>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800142c:	2b11      	cmp	r3, #17
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b12      	cmp	r3, #18
 8001436:	d130      	bne.n	800149a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146e:	2201      	movs	r2, #1
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	f003 0201 	and.w	r2, r3, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0xea>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	6939      	ldr	r1, [r7, #16]
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0203 	and.w	r2, r3, #3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80a6 	beq.w	80016b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_GPIO_Init+0x2e4>)
 8001566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001568:	4a5a      	ldr	r2, [pc, #360]	; (80016d4 <HAL_GPIO_Init+0x2e4>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6613      	str	r3, [r2, #96]	; 0x60
 8001570:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <HAL_GPIO_Init+0x2e4>)
 8001572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157c:	4a56      	ldr	r2, [pc, #344]	; (80016d8 <HAL_GPIO_Init+0x2e8>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015a6:	d01f      	beq.n	80015e8 <HAL_GPIO_Init+0x1f8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_GPIO_Init+0x2ec>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d019      	beq.n	80015e4 <HAL_GPIO_Init+0x1f4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <HAL_GPIO_Init+0x2f0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d013      	beq.n	80015e0 <HAL_GPIO_Init+0x1f0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x2f4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1ec>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x2f8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1e8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_GPIO_Init+0x2fc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1e4>
 80015d0:	2305      	movs	r3, #5
 80015d2:	e00a      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015d4:	2306      	movs	r3, #6
 80015d6:	e008      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015d8:	2304      	movs	r3, #4
 80015da:	e006      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015dc:	2303      	movs	r3, #3
 80015de:	e004      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015e8:	2300      	movs	r3, #0
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fa:	4937      	ldr	r1, [pc, #220]	; (80016d8 <HAL_GPIO_Init+0x2e8>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001608:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_GPIO_Init+0x300>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800162c:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <HAL_GPIO_Init+0x300>)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x300>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001656:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_GPIO_Init+0x300>)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_GPIO_Init+0x300>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_GPIO_Init+0x300>)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x300>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_GPIO_Init+0x300>)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f47f ae9d 	bne.w	8001400 <HAL_GPIO_Init+0x10>
  }
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000
 80016dc:	48000400 	.word	0x48000400
 80016e0:	48000800 	.word	0x48000800
 80016e4:	48000c00 	.word	0x48000c00
 80016e8:	48001000 	.word	0x48001000
 80016ec:	48001400 	.word	0x48001400
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001710:	e002      	b.n	8001718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f806 	bl	8001754 <HAL_GPIO_EXTI_Callback>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d141      	bne.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800177a:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001786:	d131      	bne.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001788:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800178e:	4a46      	ldr	r2, [pc, #280]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001794:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a0:	4a41      	ldr	r2, [pc, #260]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2232      	movs	r2, #50	; 0x32
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	4a3f      	ldr	r2, [pc, #252]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	3301      	adds	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017be:	e002      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c6:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d102      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f2      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d158      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e057      	b.n	800189c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017f2:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017fc:	e04d      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001804:	d141      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800180e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001812:	d131      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2232      	movs	r2, #50	; 0x32
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	0c9b      	lsrs	r3, r3, #18
 8001846:	3301      	adds	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184a:	e002      	b.n	8001852 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3b01      	subs	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d102      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f2      	bne.n	800184c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001872:	d112      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e011      	b.n	800189c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001888:	e007      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001898:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40007000 	.word	0x40007000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c2:	6093      	str	r3, [r2, #8]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40007000 	.word	0x40007000

080018d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e308      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d075      	beq.n	80019de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f2:	4ba3      	ldr	r3, [pc, #652]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fc:	4ba0      	ldr	r3, [pc, #640]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d102      	bne.n	8001912 <HAL_RCC_OscConfig+0x3e>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d002      	beq.n	8001918 <HAL_RCC_OscConfig+0x44>
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d10b      	bne.n	8001930 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	4b99      	ldr	r3, [pc, #612]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d05b      	beq.n	80019dc <HAL_RCC_OscConfig+0x108>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d157      	bne.n	80019dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e2e3      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d106      	bne.n	8001948 <HAL_RCC_OscConfig+0x74>
 800193a:	4b91      	ldr	r3, [pc, #580]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a90      	ldr	r2, [pc, #576]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e01d      	b.n	8001984 <HAL_RCC_OscConfig+0xb0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x98>
 8001952:	4b8b      	ldr	r3, [pc, #556]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a8a      	ldr	r2, [pc, #552]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a87      	ldr	r2, [pc, #540]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0xb0>
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a83      	ldr	r2, [pc, #524]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a80      	ldr	r2, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fb54 	bl	8001038 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fb50 	bl	8001038 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e2a8      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xc0>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fb40 	bl	8001038 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fb3c 	bl	8001038 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e294      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0xe8>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d075      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f4:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x136>
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_OscConfig+0x13c>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11f      	bne.n	8001a50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x154>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e267      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b55      	ldr	r3, [pc, #340]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	4952      	ldr	r1, [pc, #328]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a3c:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <HAL_RCC_OscConfig+0x2b0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff faad 	bl	8000fa0 <HAL_InitTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d043      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e253      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fae8 	bl	8001038 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fae4 	bl	8001038 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e23c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	061b      	lsls	r3, r3, #24
 8001a98:	4939      	ldr	r1, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	e01a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fac4 	bl	8001038 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fac0 	bl	8001038 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e218      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1e0>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03c      	beq.n	8001b5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d01c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff fa9d 	bl	8001038 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff fa99 	bl	8001038 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1f1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0ef      	beq.n	8001b02 <HAL_RCC_OscConfig+0x22e>
 8001b22:	e01b      	b.n	8001b5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff fa80 	bl	8001038 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fa7c 	bl	8001038 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1d4      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ef      	bne.n	8001b3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80ab 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2b4>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e005      	b.n	8001b8a <HAL_RCC_OscConfig+0x2b6>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	20000008 	.word	0x20000008
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4baf      	ldr	r3, [pc, #700]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	4aae      	ldr	r2, [pc, #696]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9a:	4bac      	ldr	r3, [pc, #688]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001baa:	4ba9      	ldr	r3, [pc, #676]	; (8001e50 <HAL_RCC_OscConfig+0x57c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb6:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <HAL_RCC_OscConfig+0x57c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4aa5      	ldr	r2, [pc, #660]	; (8001e50 <HAL_RCC_OscConfig+0x57c>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fa39 	bl	8001038 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff fa35 	bl	8001038 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e18d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bdc:	4b9c      	ldr	r3, [pc, #624]	; (8001e50 <HAL_RCC_OscConfig+0x57c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_RCC_OscConfig+0x32e>
 8001bf0:	4b96      	ldr	r3, [pc, #600]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	4a95      	ldr	r2, [pc, #596]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c00:	e024      	b.n	8001c4c <HAL_RCC_OscConfig+0x378>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d110      	bne.n	8001c2c <HAL_RCC_OscConfig+0x358>
 8001c0a:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	4a8e      	ldr	r2, [pc, #568]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1a:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	4a8a      	ldr	r2, [pc, #552]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x378>
 8001c2c:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a86      	ldr	r2, [pc, #536]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	4a82      	ldr	r2, [pc, #520]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d016      	beq.n	8001c82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f9f0 	bl	8001038 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f9ec 	bl	8001038 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e142      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ed      	beq.n	8001c5c <HAL_RCC_OscConfig+0x388>
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f9d9 	bl	8001038 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f9d5 	bl	8001038 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e12b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ed      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	4a64      	ldr	r2, [pc, #400]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d03c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cda:	4a5c      	ldr	r2, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f9a8 	bl	8001038 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cec:	f7ff f9a4 	bl	8001038 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0fc      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ef      	beq.n	8001cec <HAL_RCC_OscConfig+0x418>
 8001d0c:	e01b      	b.n	8001d46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d14:	4a4d      	ldr	r2, [pc, #308]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff f98b 	bl	8001038 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d26:	f7ff f987 	bl	8001038 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0df      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d38:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ef      	bne.n	8001d26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80d3 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d50:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	f000 808d 	beq.w	8001e78 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d15a      	bne.n	8001e1c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f961 	bl	8001038 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7ff f95d 	bl	8001038 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0b5      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_OscConfig+0x580>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6a11      	ldr	r1, [r2, #32]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001da8:	3a01      	subs	r2, #1
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001db2:	0212      	lsls	r2, r2, #8
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dba:	0852      	lsrs	r2, r2, #1
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	0552      	lsls	r2, r2, #21
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc6:	0852      	lsrs	r2, r2, #1
 8001dc8:	3a01      	subs	r2, #1
 8001dca:	0652      	lsls	r2, r2, #25
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dd2:	06d2      	lsls	r2, r2, #27
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	491d      	ldr	r1, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f920 	bl	8001038 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff f91c 	bl	8001038 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e074      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x528>
 8001e1a:	e06c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f8f8 	bl	8001038 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4a:	e00e      	b.n	8001e6a <HAL_RCC_OscConfig+0x596>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
 8001e54:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff f8ee 	bl	8001038 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e046      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_RCC_OscConfig+0x62c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x584>
 8001e76:	e03e      	b.n	8001ef6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e039      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_OscConfig+0x62c>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d12c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d123      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d11b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d113      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e11e      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b91      	ldr	r3, [pc, #580]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 020f 	bic.w	r2, r3, #15
 8001f32:	498c      	ldr	r1, [pc, #560]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e106      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d073      	beq.n	8002040 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d129      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	4b81      	ldr	r3, [pc, #516]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0f4      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f70:	f000 f99e 	bl	80022b0 <RCC_GetSysClockFreqFromPLLSource>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4a7c      	ldr	r2, [pc, #496]	; (800216c <HAL_RCC_ClockConfig+0x268>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d93f      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f7e:	4b7a      	ldr	r3, [pc, #488]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d033      	beq.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12f      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9e:	4b72      	ldr	r3, [pc, #456]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa6:	4a70      	ldr	r2, [pc, #448]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e024      	b.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0c6      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0be      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fdc:	f000 f8ce 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4a61      	ldr	r2, [pc, #388]	; (800216c <HAL_RCC_ClockConfig+0x268>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d909      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff2:	4a5d      	ldr	r2, [pc, #372]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4957      	ldr	r1, [pc, #348]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7ff f812 	bl	8001038 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff f80e 	bl	8001038 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e095      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a42      	ldr	r2, [pc, #264]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800205e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002062:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002078:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800207a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800207e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4936      	ldr	r1, [pc, #216]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
 8002092:	e008      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a32      	ldr	r2, [pc, #200]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 80020a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d21d      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 020f 	bic.w	r2, r3, #15
 80020bc:	4929      	ldr	r1, [pc, #164]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020c4:	f7fe ffb8 	bl	8001038 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7fe ffb4 	bl	8001038 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e03b      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1ed      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4917      	ldr	r1, [pc, #92]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490f      	ldr	r1, [pc, #60]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212e:	f000 f825 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8002132:	4602      	mov	r2, r0
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	490c      	ldr	r1, [pc, #48]	; (8002170 <HAL_RCC_ClockConfig+0x26c>)
 8002140:	5ccb      	ldrb	r3, [r1, r3]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x270>)
 800214c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ff24 	bl	8000fa0 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	04c4b400 	.word	0x04c4b400
 8002170:	08016fd8 	.word	0x08016fd8
 8002174:	20000004 	.word	0x20000004
 8002178:	20000008 	.word	0x20000008

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d102      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e047      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e03e      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d136      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3301      	adds	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	68d2      	ldr	r2, [r2, #12]
 80021dc:	0a12      	lsrs	r2, r2, #8
 80021de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
      break;
 80021e8:	e00c      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ea:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	0a12      	lsrs	r2, r2, #8
 80021f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
      break;
 8002202:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0e5b      	lsrs	r3, r3, #25
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e001      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002224:	693b      	ldr	r3, [r7, #16]
}
 8002226:	4618      	mov	r0, r3
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	00f42400 	.word	0x00f42400
 800223c:	016e3600 	.word	0x016e3600

08002240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000004 	.word	0x20000004

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4904      	ldr	r1, [pc, #16]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	08016fe8 	.word	0x08016fe8

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002288:	f7ff ffda 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0adb      	lsrs	r3, r3, #11
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4904      	ldr	r1, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08016fe8 	.word	0x08016fe8

080022b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3301      	adds	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d10c      	bne.n	80022ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022de:	68d2      	ldr	r2, [r2, #12]
 80022e0:	0a12      	lsrs	r2, r2, #8
 80022e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
    break;
 80022ec:	e00c      	b.n	8002308 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022f8:	68d2      	ldr	r2, [r2, #12]
 80022fa:	0a12      	lsrs	r2, r2, #8
 80022fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    break;
 8002306:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0e5b      	lsrs	r3, r3, #25
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	3301      	adds	r3, #1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002322:	687b      	ldr	r3, [r7, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40021000 	.word	0x40021000
 8002334:	016e3600 	.word	0x016e3600
 8002338:	00f42400 	.word	0x00f42400

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002344:	2300      	movs	r3, #0
 8002346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002348:	2300      	movs	r3, #0
 800234a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8098 	beq.w	800248a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a3f      	ldr	r2, [pc, #252]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a39      	ldr	r2, [pc, #228]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002392:	f7fe fe51 	bl	8001038 <HAL_GetTick>
 8002396:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002398:	e009      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7fe fe4d 	bl	8001038 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d902      	bls.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	74fb      	strb	r3, [r7, #19]
        break;
 80023ac:	e005      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ef      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d159      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01e      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d019      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	4a1b      	ldr	r2, [pc, #108]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fe0d 	bl	8001038 <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002420:	e00b      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fe09 	bl	8001038 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d902      	bls.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	74fb      	strb	r3, [r7, #19]
            break;
 8002438:	e006      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ec      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245c:	4903      	ldr	r1, [pc, #12]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002464:	e008      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	74bb      	strb	r3, [r7, #18]
 800246a:	e005      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002478:	7c7b      	ldrb	r3, [r7, #17]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4baf      	ldr	r3, [pc, #700]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	4aae      	ldr	r2, [pc, #696]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002496:	4ba9      	ldr	r3, [pc, #676]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f023 0203 	bic.w	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	49a5      	ldr	r1, [pc, #660]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b8:	4ba0      	ldr	r3, [pc, #640]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f023 020c 	bic.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	499d      	ldr	r1, [pc, #628]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024da:	4b98      	ldr	r3, [pc, #608]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4994      	ldr	r1, [pc, #592]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	498c      	ldr	r1, [pc, #560]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	4983      	ldr	r1, [pc, #524]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	497b      	ldr	r1, [pc, #492]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	4972      	ldr	r1, [pc, #456]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	496a      	ldr	r1, [pc, #424]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	4961      	ldr	r1, [pc, #388]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	4959      	ldr	r1, [pc, #356]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4950      	ldr	r1, [pc, #320]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4948      	ldr	r1, [pc, #288]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a42      	ldr	r2, [pc, #264]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002644:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	493a      	ldr	r1, [pc, #232]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	492c      	ldr	r1, [pc, #176]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269a:	d105      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a26      	ldr	r2, [pc, #152]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	491e      	ldr	r1, [pc, #120]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4910      	ldr	r1, [pc, #64]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002716:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4902      	ldr	r1, [pc, #8]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800273a:	e001      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800273c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002748:	d105      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	4917      	ldr	r1, [pc, #92]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d105      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800279c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	4909      	ldr	r1, [pc, #36]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b8:	d105      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e042      	b.n	800286c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe f9cb 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2224      	movs	r2, #36	; 0x24
 8002802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa80 	bl	8002d1c <UART_SetConfig>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e022      	b.n	800286c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fd3e 	bl	80032b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fdc5 	bl	80033f4 <UART_CheckIdleState>
 800286a:	4603      	mov	r3, r0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f640 030f 	movw	r3, #2063	; 0x80f
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d118      	bne.n	80028d6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d013      	beq.n	80028d6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 81fb 	beq.w	8002cc2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
      }
      return;
 80028d4:	e1f5      	b.n	8002cc2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80ef 	beq.w	8002abc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_UART_IRQHandler+0x23c>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4b72      	ldr	r3, [pc, #456]	; (8002ab4 <HAL_UART_IRQHandler+0x240>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80e4 	beq.w	8002abc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_UART_IRQHandler+0xac>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_UART_IRQHandler+0xd8>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2202      	movs	r2, #2
 800293a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d010      	beq.n	8002978 <HAL_UART_IRQHandler+0x104>
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2204      	movs	r2, #4
 8002966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d015      	beq.n	80029ae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <HAL_UART_IRQHandler+0x23c>)
 8002990:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2208      	movs	r2, #8
 800299c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a4:	f043 0208 	orr.w	r2, r3, #8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d011      	beq.n	80029dc <HAL_UART_IRQHandler+0x168>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00c      	beq.n	80029dc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 816f 	beq.w	8002cc6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d011      	beq.n	8002a16 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d004      	beq.n	8002a36 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d031      	beq.n	8002a9a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fda7 	bl	800358a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d123      	bne.n	8002a92 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a58:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d013      	beq.n	8002a8a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_UART_IRQHandler+0x244>)
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fc56 	bl	8001320 <HAL_DMA_Abort_IT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d017      	beq.n	8002aaa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a88:	e00f      	b.n	8002aaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f930 	bl	8002cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	e00b      	b.n	8002aaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f92c 	bl	8002cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	e007      	b.n	8002aaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f928 	bl	8002cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002aa8:	e10d      	b.n	8002cc6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aaa:	bf00      	nop
    return;
 8002aac:	e10b      	b.n	8002cc6 <HAL_UART_IRQHandler+0x452>
 8002aae:	bf00      	nop
 8002ab0:	10000001 	.word	0x10000001
 8002ab4:	04000120 	.word	0x04000120
 8002ab8:	080035ef 	.word	0x080035ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f040 80ab 	bne.w	8002c1c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a5 	beq.w	8002c1c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 809f 	beq.w	8002c1c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d155      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002afe:	893b      	ldrh	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80e2 	beq.w	8002cca <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b0c:	893a      	ldrh	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	f080 80db 	bcs.w	8002cca <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	893a      	ldrh	r2, [r7, #8]
 8002b18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12b      	bne.n	8002b84 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0210 	bic.w	r2, r2, #16
 8002b78:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fb75 	bl	800126e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f8b3 	bl	8002d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b9e:	e094      	b.n	8002cca <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002bc0:	897b      	ldrh	r3, [r7, #10]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8083 	beq.w	8002cce <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0210 	bic.w	r2, r2, #16
 8002c0e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c10:	897b      	ldrh	r3, [r7, #10]
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f875 	bl	8002d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c1a:	e058      	b.n	8002cce <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <HAL_UART_IRQHandler+0x3ce>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fd07 	bl	800364e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c40:	e048      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d012      	beq.n	8002c72 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d034      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
    }
    return;
 8002c70:	e02f      	b.n	8002cd2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_UART_IRQHandler+0x41a>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fcc7 	bl	800361a <UART_EndTransmit_IT>
    return;
 8002c8c:	e022      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_UART_IRQHandler+0x436>
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fce7 	bl	8003676 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ca8:	e014      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x460>
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0c      	bge.n	8002cd4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fcd1 	bl	8003662 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cc0:	e008      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
      return;
 8002cc2:	bf00      	nop
 8002cc4:	e006      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
    return;
 8002cc6:	bf00      	nop
 8002cc8:	e004      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
      return;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
      return;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
    return;
 8002cd2:	bf00      	nop
  }
}
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop

08002cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4bb1      	ldr	r3, [pc, #708]	; (800300c <UART_SetConfig+0x2f0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	69f9      	ldr	r1, [r7, #28]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4aa6      	ldr	r2, [pc, #664]	; (8003010 <UART_SetConfig+0x2f4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	69f9      	ldr	r1, [r7, #28]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f023 010f 	bic.w	r1, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a97      	ldr	r2, [pc, #604]	; (8003014 <UART_SetConfig+0x2f8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d120      	bne.n	8002dfe <UART_SetConfig+0xe2>
 8002dbc:	4b96      	ldr	r3, [pc, #600]	; (8003018 <UART_SetConfig+0x2fc>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d816      	bhi.n	8002df8 <UART_SetConfig+0xdc>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <UART_SetConfig+0xb4>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002ded 	.word	0x08002ded
 8002dd8:	08002de7 	.word	0x08002de7
 8002ddc:	08002df3 	.word	0x08002df3
 8002de0:	2301      	movs	r3, #1
 8002de2:	76fb      	strb	r3, [r7, #27]
 8002de4:	e0e7      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002de6:	2302      	movs	r3, #2
 8002de8:	76fb      	strb	r3, [r7, #27]
 8002dea:	e0e4      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002dec:	2304      	movs	r3, #4
 8002dee:	76fb      	strb	r3, [r7, #27]
 8002df0:	e0e1      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002df2:	2308      	movs	r3, #8
 8002df4:	76fb      	strb	r3, [r7, #27]
 8002df6:	e0de      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	76fb      	strb	r3, [r7, #27]
 8002dfc:	e0db      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a86      	ldr	r2, [pc, #536]	; (800301c <UART_SetConfig+0x300>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d132      	bne.n	8002e6e <UART_SetConfig+0x152>
 8002e08:	4b83      	ldr	r3, [pc, #524]	; (8003018 <UART_SetConfig+0x2fc>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d828      	bhi.n	8002e68 <UART_SetConfig+0x14c>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <UART_SetConfig+0x100>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002e69 	.word	0x08002e69
 8002e24:	08002e69 	.word	0x08002e69
 8002e28:	08002e69 	.word	0x08002e69
 8002e2c:	08002e5d 	.word	0x08002e5d
 8002e30:	08002e69 	.word	0x08002e69
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08002e69 	.word	0x08002e69
 8002e3c:	08002e57 	.word	0x08002e57
 8002e40:	08002e69 	.word	0x08002e69
 8002e44:	08002e69 	.word	0x08002e69
 8002e48:	08002e69 	.word	0x08002e69
 8002e4c:	08002e63 	.word	0x08002e63
 8002e50:	2300      	movs	r3, #0
 8002e52:	76fb      	strb	r3, [r7, #27]
 8002e54:	e0af      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	76fb      	strb	r3, [r7, #27]
 8002e5a:	e0ac      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	76fb      	strb	r3, [r7, #27]
 8002e60:	e0a9      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e62:	2308      	movs	r3, #8
 8002e64:	76fb      	strb	r3, [r7, #27]
 8002e66:	e0a6      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	76fb      	strb	r3, [r7, #27]
 8002e6c:	e0a3      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6b      	ldr	r2, [pc, #428]	; (8003020 <UART_SetConfig+0x304>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d120      	bne.n	8002eba <UART_SetConfig+0x19e>
 8002e78:	4b67      	ldr	r3, [pc, #412]	; (8003018 <UART_SetConfig+0x2fc>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e82:	2b30      	cmp	r3, #48	; 0x30
 8002e84:	d013      	beq.n	8002eae <UART_SetConfig+0x192>
 8002e86:	2b30      	cmp	r3, #48	; 0x30
 8002e88:	d814      	bhi.n	8002eb4 <UART_SetConfig+0x198>
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d009      	beq.n	8002ea2 <UART_SetConfig+0x186>
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d810      	bhi.n	8002eb4 <UART_SetConfig+0x198>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <UART_SetConfig+0x180>
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d006      	beq.n	8002ea8 <UART_SetConfig+0x18c>
 8002e9a:	e00b      	b.n	8002eb4 <UART_SetConfig+0x198>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	76fb      	strb	r3, [r7, #27]
 8002ea0:	e089      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	76fb      	strb	r3, [r7, #27]
 8002ea6:	e086      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	76fb      	strb	r3, [r7, #27]
 8002eac:	e083      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	76fb      	strb	r3, [r7, #27]
 8002eb2:	e080      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	76fb      	strb	r3, [r7, #27]
 8002eb8:	e07d      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a59      	ldr	r2, [pc, #356]	; (8003024 <UART_SetConfig+0x308>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d120      	bne.n	8002f06 <UART_SetConfig+0x1ea>
 8002ec4:	4b54      	ldr	r3, [pc, #336]	; (8003018 <UART_SetConfig+0x2fc>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ece:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed0:	d013      	beq.n	8002efa <UART_SetConfig+0x1de>
 8002ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed4:	d814      	bhi.n	8002f00 <UART_SetConfig+0x1e4>
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d009      	beq.n	8002eee <UART_SetConfig+0x1d2>
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d810      	bhi.n	8002f00 <UART_SetConfig+0x1e4>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <UART_SetConfig+0x1cc>
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d006      	beq.n	8002ef4 <UART_SetConfig+0x1d8>
 8002ee6:	e00b      	b.n	8002f00 <UART_SetConfig+0x1e4>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	76fb      	strb	r3, [r7, #27]
 8002eec:	e063      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	76fb      	strb	r3, [r7, #27]
 8002ef2:	e060      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	76fb      	strb	r3, [r7, #27]
 8002ef8:	e05d      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002efa:	2308      	movs	r3, #8
 8002efc:	76fb      	strb	r3, [r7, #27]
 8002efe:	e05a      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f00:	2310      	movs	r3, #16
 8002f02:	76fb      	strb	r3, [r7, #27]
 8002f04:	e057      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a47      	ldr	r2, [pc, #284]	; (8003028 <UART_SetConfig+0x30c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d125      	bne.n	8002f5c <UART_SetConfig+0x240>
 8002f10:	4b41      	ldr	r3, [pc, #260]	; (8003018 <UART_SetConfig+0x2fc>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1e:	d017      	beq.n	8002f50 <UART_SetConfig+0x234>
 8002f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f24:	d817      	bhi.n	8002f56 <UART_SetConfig+0x23a>
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2a:	d00b      	beq.n	8002f44 <UART_SetConfig+0x228>
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d811      	bhi.n	8002f56 <UART_SetConfig+0x23a>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <UART_SetConfig+0x222>
 8002f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3a:	d006      	beq.n	8002f4a <UART_SetConfig+0x22e>
 8002f3c:	e00b      	b.n	8002f56 <UART_SetConfig+0x23a>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	76fb      	strb	r3, [r7, #27]
 8002f42:	e038      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f44:	2302      	movs	r3, #2
 8002f46:	76fb      	strb	r3, [r7, #27]
 8002f48:	e035      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	76fb      	strb	r3, [r7, #27]
 8002f4e:	e032      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f50:	2308      	movs	r3, #8
 8002f52:	76fb      	strb	r3, [r7, #27]
 8002f54:	e02f      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f56:	2310      	movs	r3, #16
 8002f58:	76fb      	strb	r3, [r7, #27]
 8002f5a:	e02c      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <UART_SetConfig+0x2f4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d125      	bne.n	8002fb2 <UART_SetConfig+0x296>
 8002f66:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <UART_SetConfig+0x2fc>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f74:	d017      	beq.n	8002fa6 <UART_SetConfig+0x28a>
 8002f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f7a:	d817      	bhi.n	8002fac <UART_SetConfig+0x290>
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f80:	d00b      	beq.n	8002f9a <UART_SetConfig+0x27e>
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f86:	d811      	bhi.n	8002fac <UART_SetConfig+0x290>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <UART_SetConfig+0x278>
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d006      	beq.n	8002fa0 <UART_SetConfig+0x284>
 8002f92:	e00b      	b.n	8002fac <UART_SetConfig+0x290>
 8002f94:	2300      	movs	r3, #0
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e00d      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e00a      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	76fb      	strb	r3, [r7, #27]
 8002fa4:	e007      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	76fb      	strb	r3, [r7, #27]
 8002faa:	e004      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002fac:	2310      	movs	r3, #16
 8002fae:	76fb      	strb	r3, [r7, #27]
 8002fb0:	e001      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a15      	ldr	r2, [pc, #84]	; (8003010 <UART_SetConfig+0x2f4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 809f 	bne.w	8003100 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fc2:	7efb      	ldrb	r3, [r7, #27]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d837      	bhi.n	8003038 <UART_SetConfig+0x31c>
 8002fc8:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <UART_SetConfig+0x2b4>)
 8002fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fce:	bf00      	nop
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	08003039 	.word	0x08003039
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	08003039 	.word	0x08003039
 8002fe0:	08003003 	.word	0x08003003
 8002fe4:	08003039 	.word	0x08003039
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	08003039 	.word	0x08003039
 8002ff0:	08003031 	.word	0x08003031
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f7ff f930 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	6178      	str	r0, [r7, #20]
        break;
 8002ffa:	e022      	b.n	8003042 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <UART_SetConfig+0x310>)
 8002ffe:	617b      	str	r3, [r7, #20]
        break;
 8003000:	e01f      	b.n	8003042 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003002:	f7ff f8bb 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003006:	6178      	str	r0, [r7, #20]
        break;
 8003008:	e01b      	b.n	8003042 <UART_SetConfig+0x326>
 800300a:	bf00      	nop
 800300c:	cfff69f3 	.word	0xcfff69f3
 8003010:	40008000 	.word	0x40008000
 8003014:	40013800 	.word	0x40013800
 8003018:	40021000 	.word	0x40021000
 800301c:	40004400 	.word	0x40004400
 8003020:	40004800 	.word	0x40004800
 8003024:	40004c00 	.word	0x40004c00
 8003028:	40005000 	.word	0x40005000
 800302c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003034:	617b      	str	r3, [r7, #20]
        break;
 8003036:	e004      	b.n	8003042 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	76bb      	strb	r3, [r7, #26]
        break;
 8003040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 811b 	beq.w	8003280 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	4a96      	ldr	r2, [pc, #600]	; (80032a8 <UART_SetConfig+0x58c>)
 8003050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003054:	461a      	mov	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fbb3 f3f2 	udiv	r3, r3, r2
 800305c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d305      	bcc.n	800307a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	d902      	bls.n	8003080 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	76bb      	strb	r3, [r7, #26]
 800307e:	e0ff      	b.n	8003280 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	4618      	mov	r0, r3
 8003084:	f04f 0100 	mov.w	r1, #0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	4a86      	ldr	r2, [pc, #536]	; (80032a8 <UART_SetConfig+0x58c>)
 800308e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003092:	b29a      	uxth	r2, r3
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	f7fd fbdc 	bl	8000854 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	020b      	lsls	r3, r1, #8
 80030ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030b2:	0202      	lsls	r2, r0, #8
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6849      	ldr	r1, [r1, #4]
 80030b8:	0849      	lsrs	r1, r1, #1
 80030ba:	4608      	mov	r0, r1
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	1814      	adds	r4, r2, r0
 80030c2:	eb43 0501 	adc.w	r5, r3, r1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	4620      	mov	r0, r4
 80030d2:	4629      	mov	r1, r5
 80030d4:	f7fd fbbe 	bl	8000854 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e6:	d308      	bcc.n	80030fa <UART_SetConfig+0x3de>
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d204      	bcs.n	80030fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	e0c2      	b.n	8003280 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	76bb      	strb	r3, [r7, #26]
 80030fe:	e0bf      	b.n	8003280 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003108:	d165      	bne.n	80031d6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800310a:	7efb      	ldrb	r3, [r7, #27]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d828      	bhi.n	8003162 <UART_SetConfig+0x446>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <UART_SetConfig+0x3fc>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800313d 	.word	0x0800313d
 800311c:	08003145 	.word	0x08003145
 8003120:	0800314d 	.word	0x0800314d
 8003124:	08003163 	.word	0x08003163
 8003128:	08003153 	.word	0x08003153
 800312c:	08003163 	.word	0x08003163
 8003130:	08003163 	.word	0x08003163
 8003134:	08003163 	.word	0x08003163
 8003138:	0800315b 	.word	0x0800315b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7ff f88c 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8003140:	6178      	str	r0, [r7, #20]
        break;
 8003142:	e013      	b.n	800316c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003144:	f7ff f89e 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8003148:	6178      	str	r0, [r7, #20]
        break;
 800314a:	e00f      	b.n	800316c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800314c:	4b57      	ldr	r3, [pc, #348]	; (80032ac <UART_SetConfig+0x590>)
 800314e:	617b      	str	r3, [r7, #20]
        break;
 8003150:	e00c      	b.n	800316c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003152:	f7ff f813 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003156:	6178      	str	r0, [r7, #20]
        break;
 8003158:	e008      	b.n	800316c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315e:	617b      	str	r3, [r7, #20]
        break;
 8003160:	e004      	b.n	800316c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	76bb      	strb	r3, [r7, #26]
        break;
 800316a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8086 	beq.w	8003280 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <UART_SetConfig+0x58c>)
 800317a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800317e:	461a      	mov	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fbb3 f3f2 	udiv	r3, r3, r2
 8003186:	005a      	lsls	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	441a      	add	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	b29b      	uxth	r3, r3
 800319a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	d916      	bls.n	80031d0 <UART_SetConfig+0x4b4>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d212      	bcs.n	80031d0 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f023 030f 	bic.w	r3, r3, #15
 80031b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	b29a      	uxth	r2, r3
 80031c0:	89fb      	ldrh	r3, [r7, #14]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	89fa      	ldrh	r2, [r7, #14]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	e057      	b.n	8003280 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	76bb      	strb	r3, [r7, #26]
 80031d4:	e054      	b.n	8003280 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031d6:	7efb      	ldrb	r3, [r7, #27]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d828      	bhi.n	800322e <UART_SetConfig+0x512>
 80031dc:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x4c8>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003219 	.word	0x08003219
 80031f0:	0800322f 	.word	0x0800322f
 80031f4:	0800321f 	.word	0x0800321f
 80031f8:	0800322f 	.word	0x0800322f
 80031fc:	0800322f 	.word	0x0800322f
 8003200:	0800322f 	.word	0x0800322f
 8003204:	08003227 	.word	0x08003227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7ff f826 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 800320c:	6178      	str	r0, [r7, #20]
        break;
 800320e:	e013      	b.n	8003238 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7ff f838 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8003214:	6178      	str	r0, [r7, #20]
        break;
 8003216:	e00f      	b.n	8003238 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <UART_SetConfig+0x590>)
 800321a:	617b      	str	r3, [r7, #20]
        break;
 800321c:	e00c      	b.n	8003238 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321e:	f7fe ffad 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003222:	6178      	str	r0, [r7, #20]
        break;
 8003224:	e008      	b.n	8003238 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	617b      	str	r3, [r7, #20]
        break;
 800322c:	e004      	b.n	8003238 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	76bb      	strb	r3, [r7, #26]
        break;
 8003236:	bf00      	nop
    }

    if (pclk != 0U)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <UART_SetConfig+0x58c>)
 8003244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003248:	461a      	mov	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d908      	bls.n	800327c <UART_SetConfig+0x560>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d204      	bcs.n	800327c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	e001      	b.n	8003280 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800329c:	7ebb      	ldrb	r3, [r7, #26]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bdb0      	pop	{r4, r5, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	08016ff0 	.word	0x08016ff0
 80032ac:	00f42400 	.word	0x00f42400

080032b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ae:	d10a      	bne.n	80033c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003404:	f7fd fe18 	bl	8001038 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d10e      	bne.n	8003436 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f82f 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e025      	b.n	8003482 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d10e      	bne.n	8003462 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f819 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e00f      	b.n	8003482 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349a:	e062      	b.n	8003562 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d05e      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7fd fdc8 	bl	8001038 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <UART_WaitOnFlagUntilTimeout+0x30>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11d      	bne.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e045      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02e      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d126      	bne.n	8003562 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800352c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e00f      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	429a      	cmp	r2, r3
 800357e:	d08d      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035a0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0210 	bic.w	r2, r2, #16
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7ff fb6f 	bl	8002cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003630:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff fb4b 	bl	8002cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800369c:	2302      	movs	r3, #2
 800369e:	e027      	b.n	80036f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	; 0x24
 80036ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80036ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e02d      	b.n	8003770 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f84f 	bl	80037f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800378c:	2302      	movs	r3, #2
 800378e:	e02d      	b.n	80037ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f811 	bl	80037f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003800:	2b00      	cmp	r3, #0
 8003802:	d108      	bne.n	8003816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003814:	e031      	b.n	800387a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003816:	2308      	movs	r3, #8
 8003818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800381a:	2308      	movs	r3, #8
 800381c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	0e5b      	lsrs	r3, r3, #25
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	0f5b      	lsrs	r3, r3, #29
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800383e:	7bbb      	ldrb	r3, [r7, #14]
 8003840:	7b3a      	ldrb	r2, [r7, #12]
 8003842:	4911      	ldr	r1, [pc, #68]	; (8003888 <UARTEx_SetNbDataToProcess+0x94>)
 8003844:	5c8a      	ldrb	r2, [r1, r2]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800384a:	7b3a      	ldrb	r2, [r7, #12]
 800384c:	490f      	ldr	r1, [pc, #60]	; (800388c <UARTEx_SetNbDataToProcess+0x98>)
 800384e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003850:	fb93 f3f2 	sdiv	r3, r3, r2
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	7b7a      	ldrb	r2, [r7, #13]
 8003860:	4909      	ldr	r1, [pc, #36]	; (8003888 <UARTEx_SetNbDataToProcess+0x94>)
 8003862:	5c8a      	ldrb	r2, [r1, r2]
 8003864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003868:	7b7a      	ldrb	r2, [r7, #13]
 800386a:	4908      	ldr	r1, [pc, #32]	; (800388c <UARTEx_SetNbDataToProcess+0x98>)
 800386c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800386e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	08017008 	.word	0x08017008
 800388c:	08017010 	.word	0x08017010

08003890 <ringBuffer_init>:
#include "ring_buffer.h"
#include <stdlib.h>


RingBuffer* ringBuffer_init(uint32_t size)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003898:	2010      	movs	r0, #16
 800389a:	f00e fc3d 	bl	8012118 <malloc>
 800389e:	4603      	mov	r3, r0
 80038a0:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e017      	b.n	80038dc <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 80038be:	2101      	movs	r1, #1
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f00d fe61 	bl	8011588 <calloc>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e000      	b.n	80038dc <ringBuffer_init+0x4c>
		}

	return rBuf;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <ringBuffer_deInit>:

void ringBuffer_deInit(RingBuffer* buffer)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	4618      	mov	r0, r3
 8003900:	f00e fc12 	bl	8012128 <free>
		}
		free(buffer);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f00e fc0f 	bl	8012128 <free>
	}
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <ringBuffer_push>:

void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	3b01      	subs	r3, #1
 8003928:	429a      	cmp	r2, r3
 800392a:	d00c      	beq.n	8003946 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4413      	add	r3, r2
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003944:	e009      	b.n	800395a <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4413      	add	r3, r2
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800396a:	f7fd fb00 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800396e:	f000 f80b 	bl	8003988 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003972:	f000 f93f 	bl	8003bf4 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003976:	f000 f87f 	bl	8003a78 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 800397a:	f000 f8db 	bl	8003b34 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { };
  CommandLineTestRunner::RunAllTests(0, av_override);
 800397e:	4639      	mov	r1, r7
 8003980:	2000      	movs	r0, #0
 8003982:	f000 fd79 	bl	8004478 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 8003986:	e7fe      	b.n	8003986 <main+0x20>

08003988 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0a8      	sub	sp, #160	; 0xa0
 800398c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800398e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003992:	2238      	movs	r2, #56	; 0x38
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f00e fbdc 	bl	8012154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800399c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039ac:	463b      	mov	r3, r7
 80039ae:	2254      	movs	r2, #84	; 0x54
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f00e fbce 	bl	8012154 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7fd fed7 	bl	800176c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039be:	2302      	movs	r3, #2
 80039c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039c8:	2340      	movs	r3, #64	; 0x40
 80039ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039cc:	2302      	movs	r3, #2
 80039ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039d2:	2302      	movs	r3, #2
 80039d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80039d8:	2304      	movs	r3, #4
 80039da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80039de:	2355      	movs	r3, #85	; 0x55
 80039e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039e4:	2302      	movs	r3, #2
 80039e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039ea:	2302      	movs	r3, #2
 80039ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039f0:	2302      	movs	r3, #2
 80039f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd ff6a 	bl	80018d4 <HAL_RCC_OscConfig>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003a10:	f000 f960 	bl	8003cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a14:	230f      	movs	r3, #15
 8003a16:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a20:	2300      	movs	r3, #0
 8003a22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a24:	2300      	movs	r3, #0
 8003a26:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a2c:	2104      	movs	r1, #4
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fa68 	bl	8001f04 <HAL_RCC_ClockConfig>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003a44:	f000 f946 	bl	8003cd4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003a48:	2321      	movs	r3, #33	; 0x21
 8003a4a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a54:	463b      	mov	r3, r7
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fc70 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bf14      	ite	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2300      	moveq	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003a6c:	f000 f932 	bl	8003cd4 <Error_Handler>
  }
}
 8003a70:	bf00      	nop
 8003a72:	37a0      	adds	r7, #160	; 0xa0
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003a80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003a82:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a8a:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a9e:	220c      	movs	r2, #12
 8003aa0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aa8:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003aba:	481c      	ldr	r0, [pc, #112]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003abc:	f7fe fe8a 	bl	80027d4 <HAL_UART_Init>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003ad0:	f000 f900 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4815      	ldr	r0, [pc, #84]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ad8:	f7ff fe10 	bl	80036fc <HAL_UARTEx_SetTxFifoThreshold>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003aec:	f000 f8f2 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003af0:	2100      	movs	r1, #0
 8003af2:	480e      	ldr	r0, [pc, #56]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003af4:	f7ff fe40 	bl	8003778 <HAL_UARTEx_SetRxFifoThreshold>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003b08:	f000 f8e4 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003b0c:	4807      	ldr	r0, [pc, #28]	; (8003b2c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b0e:	f7ff fdbc 	bl	800368a <HAL_UARTEx_DisableFifoMode>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003b22:	f000 f8d7 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000358 	.word	0x20000358
 8003b30:	40008000 	.word	0x40008000

08003b34 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b38:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b46:	4b29      	ldr	r3, [pc, #164]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b5a:	220c      	movs	r2, #12
 8003b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b64:	4b21      	ldr	r3, [pc, #132]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b7c:	481b      	ldr	r0, [pc, #108]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b7e:	f7fe fe29 	bl	80027d4 <HAL_UART_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003b92:	f000 f89f 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b96:	2100      	movs	r1, #0
 8003b98:	4814      	ldr	r0, [pc, #80]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b9a:	f7ff fdaf 	bl	80036fc <HAL_UARTEx_SetTxFifoThreshold>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003bae:	f000 f891 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	480d      	ldr	r0, [pc, #52]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003bb6:	f7ff fddf 	bl	8003778 <HAL_UARTEx_SetRxFifoThreshold>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003bca:	f000 f883 	bl	8003cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003bce:	4807      	ldr	r0, [pc, #28]	; (8003bec <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003bd0:	f7ff fd5b 	bl	800368a <HAL_UARTEx_DisableFifoMode>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bf14      	ite	ne
 8003bda:	2301      	movne	r3, #1
 8003bdc:	2300      	moveq	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003be4:	f000 f876 	bl	8003cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200003e8 	.word	0x200003e8
 8003bf0:	40013800 	.word	0x40013800

08003bf4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfa:	f107 0314 	add.w	r3, r7, #20
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c16:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c22:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c28:	f043 0320 	orr.w	r3, r3, #32
 8003c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3a:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c58:	f043 0302 	orr.w	r3, r3, #2
 8003c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <_ZL12MX_GPIO_Initv+0xd4>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c72:	f7fd fd3f 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <_ZL12MX_GPIO_Initv+0xd8>)
 8003c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4811      	ldr	r0, [pc, #68]	; (8003cd0 <_ZL12MX_GPIO_Initv+0xdc>)
 8003c8c:	f7fd fbb0 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c90:	2320      	movs	r3, #32
 8003c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003caa:	f7fd fba1 	bl	80013f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	2028      	movs	r0, #40	; 0x28
 8003cb4:	f7fd faa7 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cb8:	2028      	movs	r0, #40	; 0x28
 8003cba:	f7fd fabe 	bl	800123a <HAL_NVIC_EnableIRQ>

}
 8003cbe:	bf00      	nop
 8003cc0:	3728      	adds	r7, #40	; 0x28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	10110000 	.word	0x10110000
 8003cd0:	48000800 	.word	0x48000800

08003cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd8:	b672      	cpsid	i
}
 8003cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cdc:	e7fe      	b.n	8003cdc <Error_Handler+0x8>

08003cde <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003ce6:	2032      	movs	r0, #50	; 0x32
 8003ce8:	f7ff fdd2 	bl	8003890 <ringBuffer_init>
 8003cec:	4602      	mov	r2, r0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	605a      	str	r2, [r3, #4]

	}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fdec 	bl	80038e4 <ringBuffer_deInit>
	}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f00a fa4e 	bl	800e1c0 <_ZN5UtestC1Ev>
 8003d24:	4a03      	ldr	r2, [pc, #12]	; (8003d34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08017284 	.word	0x08017284

08003d38 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f00a fa49 	bl	800e1e0 <_ZN5UtestD1Ev>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	08017284 	.word	0x08017284

08003d5c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ffe7 	bl	8003d38 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003d6a:	2108      	movs	r1, #8
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f002 f865 	bl	8005e3c <_ZdlPvj>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff ffbe 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003d98:	4a03      	ldr	r2, [pc, #12]	; (8003da8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	08017264 	.word	0x08017264

08003dac <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	2221      	movs	r2, #33	; 0x21
 8003db6:	4906      	ldr	r1, [pc, #24]	; (8003dd0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8003db8:	2008      	movs	r0, #8
 8003dba:	f002 f82b 	bl	8005e14 <_ZnwjPKci>
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f7ff ffdb 	bl	8003d7c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8003dc6:	4623      	mov	r3, r4
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd90      	pop	{r4, r7, pc}
 8003dd0:	08014f94 	.word	0x08014f94

08003dd4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f008 fe1e 	bl	800ca20 <_ZN10UtestShellC1Ev>
 8003de4:	4a03      	ldr	r2, [pc, #12]	; (8003df4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	080171b8 	.word	0x080171b8

08003df8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8003df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af04      	add	r7, sp, #16
 8003dfe:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8003e00:	f00a f9b4 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 8003e04:	4604      	mov	r4, r0
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	3338      	adds	r3, #56	; 0x38
 8003e0a:	681d      	ldr	r5, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	461e      	mov	r6, r3
 8003e14:	f00a f9ba 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	9302      	str	r3, [sp, #8]
 8003e1c:	2324      	movs	r3, #36	; 0x24
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8003e26:	4632      	mov	r2, r6
 8003e28:	2132      	movs	r1, #50	; 0x32
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8003e2e:	f00a f99d 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 8003e32:	4604      	mov	r4, r0
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	3320      	adds	r3, #32
 8003e38:	681d      	ldr	r5, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2de      	uxtb	r6, r3
 8003e4a:	f00a f99f 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	9303      	str	r3, [sp, #12]
 8003e52:	2325      	movs	r3, #37	; 0x25
 8003e54:	9302      	str	r3, [sp, #8]
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8003e60:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8003e62:	4631      	mov	r1, r6
 8003e64:	4620      	mov	r0, r4
 8003e66:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8003e68:	f00a f980 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	3338      	adds	r3, #56	; 0x38
 8003e72:	681d      	ldr	r5, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461e      	mov	r6, r3
 8003e7c:	f00a f986 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003e80:	4603      	mov	r3, r0
 8003e82:	9302      	str	r3, [sp, #8]
 8003e84:	2326      	movs	r3, #38	; 0x26
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8003e8e:	4632      	mov	r2, r6
 8003e90:	2100      	movs	r1, #0
 8003e92:	4620      	mov	r0, r4
 8003e94:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8003e96:	f00a f969 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	3338      	adds	r3, #56	; 0x38
 8003ea0:	681d      	ldr	r5, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	461e      	mov	r6, r3
 8003eaa:	f00a f96f 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	9302      	str	r3, [sp, #8]
 8003eb2:	2327      	movs	r3, #39	; 0x27
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	47a8      	blx	r5

}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ecc:	08014f94 	.word	0x08014f94
 8003ed0:	08014fa8 	.word	0x08014fa8
 8003ed4:	08014fd0 	.word	0x08014fd0
 8003ed8:	08014fe8 	.word	0x08014fe8
 8003edc:	08014ff0 	.word	0x08014ff0
 8003ee0:	08015018 	.word	0x08015018

08003ee4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ff0a 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003f00:	4a03      	ldr	r2, [pc, #12]	; (8003f10 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	08017198 	.word	0x08017198

08003f14 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	222b      	movs	r2, #43	; 0x2b
 8003f1e:	4906      	ldr	r1, [pc, #24]	; (8003f38 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8003f20:	2008      	movs	r0, #8
 8003f22:	f001 ff77 	bl	8005e14 <_ZnwjPKci>
 8003f26:	4604      	mov	r4, r0
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff ffdb 	bl	8003ee4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8003f2e:	4623      	mov	r3, r4
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd90      	pop	{r4, r7, pc}
 8003f38:	08014f94 	.word	0x08014f94

08003f3c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f008 fd6a 	bl	800ca20 <_ZN10UtestShellC1Ev>
 8003f4c:	4a03      	ldr	r2, [pc, #12]	; (8003f5c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	080170ec 	.word	0x080170ec

08003f60 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8003f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af04      	add	r7, sp, #16
 8003f66:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2145      	movs	r1, #69	; 0x45
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fccf 	bl	8003912 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8003f74:	f00a f8fa 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 8003f78:	4604      	mov	r4, r0
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	3338      	adds	r3, #56	; 0x38
 8003f7e:	681d      	ldr	r5, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	461e      	mov	r6, r3
 8003f8a:	f00a f8ff 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	9302      	str	r3, [sp, #8]
 8003f92:	232e      	movs	r3, #46	; 0x2e
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8003f9c:	4632      	mov	r2, r6
 8003f9e:	2145      	movs	r1, #69	; 0x45
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2110      	movs	r1, #16
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fcb1 	bl	8003912 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8003fb0:	f00a f8dc 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	3338      	adds	r3, #56	; 0x38
 8003fba:	681d      	ldr	r5, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461e      	mov	r6, r3
 8003fc8:	f00a f8e0 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	2331      	movs	r3, #49	; 0x31
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8003fda:	4632      	mov	r2, r6
 8003fdc:	2110      	movs	r1, #16
 8003fde:	4620      	mov	r0, r4
 8003fe0:	47a8      	blx	r5

}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fea:	bf00      	nop
 8003fec:	08014f94 	.word	0x08014f94
 8003ff0:	08015040 	.word	0x08015040
 8003ff4:	08015070 	.word	0x08015070

08003ff8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fe80 	bl	8003d14 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004014:	4a03      	ldr	r2, [pc, #12]	; (8004024 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	080170cc 	.word	0x080170cc

08004028 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	2235      	movs	r2, #53	; 0x35
 8004032:	4906      	ldr	r1, [pc, #24]	; (800404c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004034:	2008      	movs	r0, #8
 8004036:	f001 feed 	bl	8005e14 <_ZnwjPKci>
 800403a:	4604      	mov	r4, r0
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff ffdb 	bl	8003ff8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004042:	4623      	mov	r3, r4
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bd90      	pop	{r4, r7, pc}
 800404c:	08014f94 	.word	0x08014f94

08004050 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4618      	mov	r0, r3
 800405c:	f008 fce0 	bl	800ca20 <_ZN10UtestShellC1Ev>
 8004060:	4a03      	ldr	r2, [pc, #12]	; (8004070 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	08017020 	.word	0x08017020

08004074 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004076:	b089      	sub	sp, #36	; 0x24
 8004078:	af04      	add	r7, sp, #16
 800407a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	3b01      	subs	r3, #1
 8004092:	429a      	cmp	r2, r3
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	da0b      	bge.n	80040bc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	4611      	mov	r1, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fc2f 	bl	8003912 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3301      	adds	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e7e3      	b.n	8004084 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	21ff      	movs	r1, #255	; 0xff
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fc25 	bl	8003912 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80040c8:	f00a f850 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 80040cc:	4604      	mov	r4, r0
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	3338      	adds	r3, #56	; 0x38
 80040d2:	681d      	ldr	r5, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	461e      	mov	r6, r3
 80040de:	f00a f855 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040e2:	4603      	mov	r3, r0
 80040e4:	9302      	str	r3, [sp, #8]
 80040e6:	233d      	movs	r3, #61	; 0x3d
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	4b05      	ldr	r3, [pc, #20]	; (8004104 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80040f0:	4632      	mov	r2, r6
 80040f2:	21ff      	movs	r1, #255	; 0xff
 80040f4:	4620      	mov	r0, r4
 80040f6:	47a8      	blx	r5
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004100:	08014f94 	.word	0x08014f94
 8004104:	080150a0 	.word	0x080150a0

08004108 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	4a05      	ldr	r2, [pc, #20]	; (8004128 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4618      	mov	r0, r3
 800411a:	f008 fcd5 	bl	800cac8 <_ZN10UtestShellD1Ev>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	08017020 	.word	0x08017020

0800412c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ffe7 	bl	8004108 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 800413a:	211c      	movs	r1, #28
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f001 fe7d 	bl	8005e3c <_ZdlPvj>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	4a05      	ldr	r2, [pc, #20]	; (800416c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fdeb 	bl	8003d38 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	080170cc 	.word	0x080170cc

08004170 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ffe7 	bl	800414c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 800417e:	2108      	movs	r1, #8
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 fe5b 	bl	8005e3c <_ZdlPvj>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f008 fc91 	bl	800cac8 <_ZN10UtestShellD1Ev>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	080170ec 	.word	0x080170ec

080041b4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ffe7 	bl	8004190 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 80041c2:	211c      	movs	r1, #28
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f001 fe39 	bl	8005e3c <_ZdlPvj>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fda7 	bl	8003d38 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4618      	mov	r0, r3
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	08017198 	.word	0x08017198

080041f8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ffe7 	bl	80041d4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8004206:	2108      	movs	r1, #8
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f001 fe17 	bl	8005e3c <_ZdlPvj>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	4a05      	ldr	r2, [pc, #20]	; (8004238 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	f008 fc4d 	bl	800cac8 <_ZN10UtestShellD1Ev>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	080171b8 	.word	0x080171b8

0800423c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ffe7 	bl	8004218 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 800424a:	211c      	movs	r1, #28
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 fdf5 	bl	8005e3c <_ZdlPvj>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	4a05      	ldr	r2, [pc, #20]	; (800427c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fd63 	bl	8003d38 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	08017264 	.word	0x08017264

08004280 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ffe7 	bl	800425c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 800428e:	2108      	movs	r1, #8
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 fdd3 	bl	8005e3c <_ZdlPvj>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d12b      	bne.n	8004308 <_Z41__static_initialization_and_destruction_0ii+0x68>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d126      	bne.n	8004308 <_Z41__static_initialization_and_destruction_0ii+0x68>
TEST(RingBuffer_Test_Group, InitTest)
 80042ba:	4822      	ldr	r0, [pc, #136]	; (8004344 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80042bc:	f7ff fd8a 	bl	8003dd4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80042c0:	2321      	movs	r3, #33	; 0x21
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	4b20      	ldr	r3, [pc, #128]	; (8004348 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80042ca:	4a21      	ldr	r2, [pc, #132]	; (8004350 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80042cc:	491d      	ldr	r1, [pc, #116]	; (8004344 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80042ce:	4821      	ldr	r0, [pc, #132]	; (8004354 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80042d0:	f00a f9e4 	bl	800e69c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80042d4:	4820      	ldr	r0, [pc, #128]	; (8004358 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80042d6:	f7ff fe31 	bl	8003f3c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 80042da:	232b      	movs	r3, #43	; 0x2b
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4b1e      	ldr	r3, [pc, #120]	; (800435c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80042e4:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80042e6:	491c      	ldr	r1, [pc, #112]	; (8004358 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80042e8:	481d      	ldr	r0, [pc, #116]	; (8004360 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80042ea:	f00a f9d7 	bl	800e69c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80042ee:	481d      	ldr	r0, [pc, #116]	; (8004364 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80042f0:	f7ff feae 	bl	8004050 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 80042f4:	2335      	movs	r3, #53	; 0x35
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80042fe:	4a14      	ldr	r2, [pc, #80]	; (8004350 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004300:	4918      	ldr	r1, [pc, #96]	; (8004364 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004302:	481a      	ldr	r0, [pc, #104]	; (800436c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004304:	f00a f9ca 	bl	800e69c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d116      	bne.n	800433c <_Z41__static_initialization_and_destruction_0ii+0x9c>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004314:	4293      	cmp	r3, r2
 8004316:	d111      	bne.n	800433c <_Z41__static_initialization_and_destruction_0ii+0x9c>
 8004318:	4814      	ldr	r0, [pc, #80]	; (800436c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800431a:	f00a f9e9 	bl	800e6f0 <_ZN13TestInstallerD1Ev>
 800431e:	4811      	ldr	r0, [pc, #68]	; (8004364 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004320:	f7ff fef2 	bl	8004108 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8004324:	480e      	ldr	r0, [pc, #56]	; (8004360 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004326:	f00a f9e3 	bl	800e6f0 <_ZN13TestInstallerD1Ev>
 800432a:	480b      	ldr	r0, [pc, #44]	; (8004358 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800432c:	f7ff ff30 	bl	8004190 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8004330:	4808      	ldr	r0, [pc, #32]	; (8004354 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004332:	f00a f9dd 	bl	800e6f0 <_ZN13TestInstallerD1Ev>
 8004336:	4803      	ldr	r0, [pc, #12]	; (8004344 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004338:	f7ff ff6e 	bl	8004218 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000478 	.word	0x20000478
 8004348:	08014f94 	.word	0x08014f94
 800434c:	080150d0 	.word	0x080150d0
 8004350:	080150dc 	.word	0x080150dc
 8004354:	20000494 	.word	0x20000494
 8004358:	20000498 	.word	0x20000498
 800435c:	080150f4 	.word	0x080150f4
 8004360:	200004b4 	.word	0x200004b4
 8004364:	200004b8 	.word	0x200004b8
 8004368:	08015104 	.word	0x08015104
 800436c:	200004d4 	.word	0x200004d4

08004370 <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
 8004374:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004378:	2001      	movs	r0, #1
 800437a:	f7ff ff91 	bl	80042a0 <_Z41__static_initialization_and_destruction_0ii>
 800437e:	bd80      	pop	{r7, pc}

08004380 <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
 8004384:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004388:	2000      	movs	r0, #0
 800438a:	f7ff ff89 	bl	80042a0 <_Z41__static_initialization_and_destruction_0ii>
 800438e:	bd80      	pop	{r7, pc}

08004390 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
    }
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
    }
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
    }
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ffed 	bl	80043c0 <_ZNK10TestResult15getFailureCountEv>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <_ZNK10TestResult9isFailureEv+0x2a>
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ffcf 	bl	8004390 <_ZNK10TestResult11getRunCountEv>
 80043f2:	4604      	mov	r4, r0
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ffd7 	bl	80043a8 <_ZNK10TestResult15getIgnoredCountEv>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4423      	add	r3, r4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <_ZNK10TestResult9isFailureEv+0x2e>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <_ZNK10TestResult9isFailureEv+0x30>
 8004406:	2300      	movs	r3, #0
    }
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}

08004410 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    {
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4618      	mov	r0, r3
 800441c:	f005 fffe 	bl	800a41c <_ZN10TestOutputC1Ev>
 8004420:	4a03      	ldr	r2, [pc, #12]	; (8004430 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
    }
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	080177c4 	.word	0x080177c4

08004434 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
    {
 800443c:	4a05      	ldr	r2, [pc, #20]	; (8004454 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4618      	mov	r0, r3
 8004446:	f006 f807 	bl	800a458 <_ZN10TestOutputD1Ev>
    }
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	080177c4 	.word	0x080177c4

08004458 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
    }
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ffe7 	bl	8004434 <_ZN17ConsoleTestOutputD1Ev>
 8004466:	2110      	movs	r1, #16
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f001 fce7 	bl	8005e3c <_ZdlPvj>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8004478:	b5b0      	push	{r4, r5, r7, lr}
 800447a:	b098      	sub	sp, #96	; 0x60
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
    int result = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8004486:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff ffc0 	bl	8004410 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8004490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004494:	4935      	ldr	r1, [pc, #212]	; (800456c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8004496:	4618      	mov	r0, r3
 8004498:	f002 fba5 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800449c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80044a0:	f107 0318 	add.w	r3, r7, #24
 80044a4:	2200      	movs	r2, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 ff6a 	bl	8006380 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80044ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044b0:	4618      	mov	r0, r3
 80044b2:	f002 ff50 	bl	8007356 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80044b6:	f107 0318 	add.w	r3, r7, #24
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 ff2f 	bl	8006320 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80044c2:	f007 fd39 	bl	800bf38 <_ZN12TestRegistry18getCurrentRegistryEv>
 80044c6:	4603      	mov	r3, r0
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	3234      	adds	r2, #52	; 0x34
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	f107 0118 	add.w	r1, r7, #24
 80044d2:	4618      	mov	r0, r3
 80044d4:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80044d6:	f007 fd2f 	bl	800bf38 <_ZN12TestRegistry18getCurrentRegistryEv>
 80044da:	4603      	mov	r3, r0
 80044dc:	f107 0008 	add.w	r0, r7, #8
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	f000 f844 	bl	8004570 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80044e8:	f107 0308 	add.w	r3, r7, #8
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 f899 	bl	8004624 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 80044f2:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80044f4:	f107 0308 	add.w	r3, r7, #8
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 f863 	bl	80045c4 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80044fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10c      	bne.n	800451e <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8004504:	f107 0318 	add.w	r3, r7, #24
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f002 f83a 	bl	8006584 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8004510:	4602      	mov	r2, r0
 8004512:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f006 f83f 	bl	800a59c <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800451e:	f007 fd0b 	bl	800bf38 <_ZN12TestRegistry18getCurrentRegistryEv>
 8004522:	4604      	mov	r4, r0
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	3344      	adds	r3, #68	; 0x44
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800452e:	490f      	ldr	r1, [pc, #60]	; (800456c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8004530:	4618      	mov	r0, r3
 8004532:	f002 fb58 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8004536:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800453a:	4619      	mov	r1, r3
 800453c:	4620      	mov	r0, r4
 800453e:	47a8      	blx	r5
 8004540:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004544:	4618      	mov	r0, r3
 8004546:	f002 ff06 	bl	8007356 <_ZN12SimpleStringD1Ev>
    return result;
 800454a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800454c:	f107 0318 	add.w	r3, r7, #24
 8004550:	4618      	mov	r0, r3
 8004552:	f001 ff4d 	bl	80063f0 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8004556:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff ff6a 	bl	8004434 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8004560:	4623      	mov	r3, r4
}
 8004562:	4618      	mov	r0, r3
 8004564:	3760      	adds	r7, #96	; 0x60
 8004566:	46bd      	mov	sp, r7
 8004568:	bdb0      	pop	{r4, r5, r7, pc}
 800456a:	bf00      	nop
 800456c:	08015118 	.word	0x08015118

08004570 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8004596:	2241      	movs	r2, #65	; 0x41
 8004598:	4909      	ldr	r1, [pc, #36]	; (80045c0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800459a:	2038      	movs	r0, #56	; 0x38
 800459c:	f001 fc3a 	bl	8005e14 <_ZnwjPKci>
 80045a0:	4604      	mov	r4, r0
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4620      	mov	r0, r4
 80045a8:	f00a fa50 	bl	800ea4c <_ZN20CommandLineArgumentsC1EiPKPKc>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	609c      	str	r4, [r3, #8]
}
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}
 80045ba:	bf00      	nop
 80045bc:	080172a4 	.word	0x080172a4
 80045c0:	0801512c 	.word	0x0801512c

080045c4 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	4a0c      	ldr	r2, [pc, #48]	; (8004600 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	3204      	adds	r2, #4
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	4790      	blx	r2
    delete output_;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	3204      	adds	r2, #4
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	4790      	blx	r2
}
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	080172a4 	.word	0x080172a4

08004604 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
}
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ffd9 	bl	80045c4 <_ZN21CommandLineTestRunnerD1Ev>
 8004612:	2110      	movs	r1, #16
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 fc11 	bl	8005e3c <_ZdlPvj>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b08c      	sub	sp, #48	; 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 800462c:	2301      	movs	r3, #1
 800462e:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8004630:	f107 031c 	add.w	r3, r7, #28
 8004634:	4929      	ldr	r1, [pc, #164]	; (80046dc <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8004636:	4618      	mov	r0, r3
 8004638:	f002 fad5 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800463c:	f107 021c 	add.w	r2, r7, #28
 8004640:	f107 0308 	add.w	r3, r7, #8
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f007 f834 	bl	800b6b4 <_ZN16SetPointerPluginC1ERK12SimpleString>
 800464c:	f107 031c 	add.w	r3, r7, #28
 8004650:	4618      	mov	r0, r3
 8004652:	f002 fe80 	bl	8007356 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3334      	adds	r3, #52	; 0x34
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f107 0108 	add.w	r1, r7, #8
 8004668:	4610      	mov	r0, r2
 800466a:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	333c      	adds	r3, #60	; 0x3c
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4610      	mov	r0, r2
 800467c:	4798      	blx	r3
 800467e:	4603      	mov	r3, r0
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa3e 	bl	8004b04 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8ac 	bl	80047ec <_ZN21CommandLineTestRunner11runAllTestsEv>
 8004694:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68dd      	ldr	r5, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3344      	adds	r3, #68	; 0x44
 80046a2:	681c      	ldr	r4, [r3, #0]
 80046a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a8:	490c      	ldr	r1, [pc, #48]	; (80046dc <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80046aa:	4618      	mov	r0, r3
 80046ac:	f002 fa9b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80046b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b4:	4619      	mov	r1, r3
 80046b6:	4628      	mov	r0, r5
 80046b8:	47a0      	blx	r4
 80046ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046be:	4618      	mov	r0, r3
 80046c0:	f002 fe49 	bl	8007356 <_ZN12SimpleStringD1Ev>
    return testResult;
 80046c4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 faaa 	bl	8004c24 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80046d0:	4623      	mov	r3, r4
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3730      	adds	r7, #48	; 0x30
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bdb0      	pop	{r4, r5, r7, pc}
 80046da:	bf00      	nop
 80046dc:	08015150 	.word	0x08015150

080046e0 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68dd      	ldr	r5, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3330      	adds	r3, #48	; 0x30
 80046f4:	681c      	ldr	r4, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f00a fee6 	bl	800f4cc <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8004700:	4603      	mov	r3, r0
 8004702:	4619      	mov	r1, r3
 8004704:	4628      	mov	r0, r5
 8004706:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68dd      	ldr	r5, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	332c      	adds	r3, #44	; 0x2c
 8004714:	681c      	ldr	r4, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f00a fee2 	bl	800f4e4 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8004720:	4603      	mov	r3, r0
 8004722:	4619      	mov	r1, r3
 8004724:	4628      	mov	r0, r5
 8004726:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4618      	mov	r0, r3
 800472e:	f00a fe31 	bl	800f394 <_ZNK20CommandLineArguments9isVerboseEv>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3320      	adds	r3, #32
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2101      	movs	r1, #1
 8004748:	4610      	mov	r0, r2
 800474a:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4618      	mov	r0, r3
 8004752:	f00a fe2b 	bl	800f3ac <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3320      	adds	r3, #32
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2102      	movs	r1, #2
 800476c:	4610      	mov	r0, r2
 800476e:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4618      	mov	r0, r3
 8004776:	f00a fe25 	bl	800f3c4 <_ZNK20CommandLineArguments7isColorEv>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3324      	adds	r3, #36	; 0x24
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4610      	mov	r0, r2
 8004790:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f00a fe50 	bl	800f43c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3360      	adds	r3, #96	; 0x60
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4610      	mov	r0, r2
 80047b2:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f00a fe33 	bl	800f424 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f007 fc31 	bl	800c030 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f00a fe56 	bl	800f484 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80047de:	f009 fce1 	bl	800e1a4 <_ZN10UtestShell14setCrashOnFailEv>
}
 80047e2:	bf00      	nop
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080047ec <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80047ec:	b5b0      	push	{r4, r5, r7, lr}
 80047ee:	b094      	sub	sp, #80	; 0x50
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff73 	bl	80046e0 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f00a fe22 	bl	800f454 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8004810:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f00a fde0 	bl	800f3dc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d019      	beq.n	8004856 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f007 fdc7 	bl	800c3c0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3320      	adds	r3, #32
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f107 0108 	add.w	r1, r7, #8
 8004844:	4610      	mov	r0, r2
 8004846:	4798      	blx	r3
        return 0;
 8004848:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800484a:	f107 0308 	add.w	r3, r7, #8
 800484e:	4618      	mov	r0, r3
 8004850:	f007 fdee 	bl	800c430 <_ZN10TestResultD1Ev>
 8004854:	e0e1      	b.n	8004a1a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f00a fdca 	bl	800f3f4 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d019      	beq.n	800489a <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	f107 0308 	add.w	r3, r7, #8
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f007 fda5 	bl	800c3c0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3324      	adds	r3, #36	; 0x24
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f107 0108 	add.w	r1, r7, #8
 8004888:	4610      	mov	r0, r2
 800488a:	4798      	blx	r3
        return 0;
 800488c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800488e:	f107 0308 	add.w	r3, r7, #8
 8004892:	4618      	mov	r0, r3
 8004894:	f007 fdcc 	bl	800c430 <_ZN10TestResultD1Ev>
 8004898:	e0bf      	b.n	8004a1a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4618      	mov	r0, r3
 80048a0:	f00a fdb4 	bl	800f40c <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d019      	beq.n	80048de <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f007 fd83 	bl	800c3c0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3328      	adds	r3, #40	; 0x28
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f107 0108 	add.w	r1, r7, #8
 80048cc:	4610      	mov	r0, r2
 80048ce:	4798      	blx	r3
        return 0;
 80048d0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	4618      	mov	r0, r3
 80048d8:	f007 fdaa 	bl	800c430 <_ZN10TestResultD1Ev>
 80048dc:	e09d      	b.n	8004a1a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f00a fdc2 	bl	800f46c <_ZNK20CommandLineArguments11isReversingEv>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	331c      	adds	r3, #28
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3

    if (arguments_->isShuffling())
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4618      	mov	r0, r3
 8004906:	f00a fdc9 	bl	800f49c <_ZNK20CommandLineArguments11isShufflingEv>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d023      	beq.n	8004958 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	332c      	adds	r3, #44	; 0x2c
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4941      	ldr	r1, [pc, #260]	; (8004a24 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8004920:	4610      	mov	r0, r2
 8004922:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685d      	ldr	r5, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3334      	adds	r3, #52	; 0x34
 8004930:	681c      	ldr	r4, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4618      	mov	r0, r3
 8004938:	f00a fdbc 	bl	800f4b4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800493c:	4603      	mov	r3, r0
 800493e:	4619      	mov	r1, r3
 8004940:	4628      	mov	r0, r5
 8004942:	47a0      	blx	r4
        output_->print("\n");
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	332c      	adds	r3, #44	; 0x2c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4935      	ldr	r1, [pc, #212]	; (8004a28 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8004954:	4610      	mov	r0, r2
 8004956:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8004958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800495e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004960:	429a      	cmp	r2, r3
 8004962:	bf8c      	ite	hi
 8004964:	2301      	movhi	r3, #1
 8004966:	2300      	movls	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04e      	beq.n	8004a0c <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f00a fd92 	bl	800f49c <_ZNK20CommandLineArguments11isShufflingEv>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00f      	beq.n	800499e <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68dd      	ldr	r5, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3318      	adds	r3, #24
 800498a:	681c      	ldr	r4, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4618      	mov	r0, r3
 8004992:	f00a fd8f 	bl	800f4b4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8004996:	4603      	mov	r3, r0
 8004998:	4619      	mov	r1, r3
 800499a:	4628      	mov	r0, r5
 800499c:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6858      	ldr	r0, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3340      	adds	r3, #64	; 0x40
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80049b0:	4798      	blx	r3
        TestResult tr(*output_);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f007 fcff 	bl	800c3c0 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f107 0108 	add.w	r1, r7, #8
 80049d4:	4610      	mov	r0, r2
 80049d6:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fcef 	bl	80043c0 <_ZNK10TestResult15getFailureCountEv>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e6:	4413      	add	r3, r2
 80049e8:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80049ea:	f107 0308 	add.w	r3, r7, #8
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fcf2 	bl	80043d8 <_ZNK10TestResult9isFailureEv>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80049fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fc:	3301      	adds	r3, #1
 80049fe:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	4618      	mov	r0, r3
 8004a06:	f007 fd13 	bl	800c430 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8004a0a:	e7a5      	b.n	8004958 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8004a12:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8004a14:	e000      	b.n	8004a18 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8004a16:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004a18:	bf00      	nop
 8004a1a:	4623      	mov	r3, r4
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3750      	adds	r7, #80	; 0x50
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bdb0      	pop	{r4, r5, r7, pc}
 8004a24:	08015164 	.word	0x08015164
 8004a28:	08015190 	.word	0x08015190

08004a2c <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8004a34:	229d      	movs	r2, #157	; 0x9d
 8004a36:	4906      	ldr	r1, [pc, #24]	; (8004a50 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8004a38:	201c      	movs	r0, #28
 8004a3a:	f001 f9eb 	bl	8005e14 <_ZnwjPKci>
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4620      	mov	r0, r4
 8004a42:	f003 fb6d 	bl	8008120 <_ZN18TeamCityTestOutputC1Ev>
 8004a46:	4623      	mov	r3, r4
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd90      	pop	{r4, r7, pc}
 8004a50:	0801512c 	.word	0x0801512c

08004a54 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8004a5e:	22a2      	movs	r2, #162	; 0xa2
 8004a60:	490a      	ldr	r1, [pc, #40]	; (8004a8c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8004a62:	2014      	movs	r0, #20
 8004a64:	f001 f9d6 	bl	8005e14 <_ZnwjPKci>
 8004a68:	4604      	mov	r4, r0
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f000 f980 	bl	8004d70 <_ZN15JUnitTestOutputC1Ev>
 8004a70:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fbb2 	bl	80051e4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8004a80:	68fb      	ldr	r3, [r7, #12]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd90      	pop	{r4, r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	0801512c 	.word	0x0801512c

08004a90 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8004a98:	22ab      	movs	r2, #171	; 0xab
 8004a9a:	4906      	ldr	r1, [pc, #24]	; (8004ab4 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8004a9c:	2010      	movs	r0, #16
 8004a9e:	f001 f9b9 	bl	8005e14 <_ZnwjPKci>
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff fcb3 	bl	8004410 <_ZN17ConsoleTestOutputC1Ev>
 8004aaa:	4623      	mov	r3, r4
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd90      	pop	{r4, r7, pc}
 8004ab4:	0801512c 	.word	0x0801512c

08004ab8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8004ac4:	22b0      	movs	r2, #176	; 0xb0
 8004ac6:	490e      	ldr	r1, [pc, #56]	; (8004b00 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8004ac8:	2018      	movs	r0, #24
 8004aca:	f001 f9a3 	bl	8005e14 <_ZnwjPKci>
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f006 f99b 	bl	800ae0c <_ZN19CompositeTestOutputC1Ev>
 8004ad6:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	335c      	adds	r3, #92	; 0x5c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3360      	adds	r3, #96	; 0x60
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	6978      	ldr	r0, [r7, #20]
 8004af2:	4798      	blx	r3
  return composite;
 8004af4:	697b      	ldr	r3, [r7, #20]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd90      	pop	{r4, r7, pc}
 8004afe:	bf00      	nop
 8004b00:	0801512c 	.word	0x0801512c

08004b04 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8004b04:	b5b0      	push	{r4, r5, r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f00a f855 	bl	800ebc4 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f083 0301 	eor.w	r3, r3, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d029      	beq.n	8004b7a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3310      	adds	r3, #16
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	4798      	blx	r3
 8004b32:	4602      	mov	r2, r0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685d      	ldr	r5, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	332c      	adds	r3, #44	; 0x2c
 8004b44:	681c      	ldr	r4, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f00a fc16 	bl	800f37c <_ZNK20CommandLineArguments8needHelpEv>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f00a fc00 	bl	800f360 <_ZNK20CommandLineArguments4helpEv>
 8004b60:	4603      	mov	r3, r0
 8004b62:	e005      	b.n	8004b70 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f00a fbeb 	bl	800f344 <_ZNK20CommandLineArguments5usageEv>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4619      	mov	r1, r3
 8004b72:	4628      	mov	r0, r5
 8004b74:	47a0      	blx	r4
    return false;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e050      	b.n	8004c1c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f00b fa52 	bl	8010028 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02c      	beq.n	8004be4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	681c      	ldr	r4, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f00b fa6a 	bl	8010070 <_ZNK20CommandLineArguments14getPackageNameEv>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	47a0      	blx	r4
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f00a fbf0 	bl	800f394 <_ZNK20CommandLineArguments9isVerboseEv>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d02f      	beq.n	8004c1a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3314      	adds	r3, #20
 8004bc0:	681c      	ldr	r4, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685d      	ldr	r5, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3310      	adds	r3, #16
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	47a0      	blx	r4
 8004bdc:	4602      	mov	r2, r0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	e01a      	b.n	8004c1a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f00b fa2f 	bl	801004c <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	4798      	blx	r3
 8004c00:	4602      	mov	r2, r0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	e008      	b.n	8004c1a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3310      	adds	r3, #16
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
 8004c14:	4602      	mov	r2, r0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]
  return true;
 8004c1a:	2301      	movs	r3, #1
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bdb0      	pop	{r4, r5, r7, pc}

08004c24 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <_ZN16SetPointerPluginD1Ev+0x20>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f006 fbff 	bl	800b438 <_ZN10TestPluginD1Ev>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	080178d0 	.word	0x080178d0

08004c48 <_ZN16SetPointerPluginD0Ev>:
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff ffe7 	bl	8004c24 <_ZN16SetPointerPluginD1Ev>
 8004c56:	2114      	movs	r1, #20
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 f8ef 	bl	8005e3c <_ZdlPvj>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
    }
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4910      	ldr	r1, [pc, #64]	; (8004ccc <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 ffaa 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	741a      	strb	r2, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3314      	adds	r3, #20
 8004ca8:	4908      	ldr	r1, [pc, #32]	; (8004ccc <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8004caa:	4618      	mov	r0, r3
 8004cac:	f001 ff9b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	61da      	str	r2, [r3, #28]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	621a      	str	r2, [r3, #32]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	08015194 	.word	0x08015194

08004cd0 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	4907      	ldr	r1, [pc, #28]	; (8004d18 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f001 ff72 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	61da      	str	r2, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	621a      	str	r2, [r3, #32]
    {
    }
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	08015194 	.word	0x08015194

08004d1c <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3314      	adds	r3, #20
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f002 fb14 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ffc4 	bl	8004cd0 <_ZN20JUnitTestGroupResultC1Ev>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3328      	adds	r3, #40	; 0x28
 8004d4c:	4907      	ldr	r1, [pc, #28]	; (8004d6c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 ff49 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3330      	adds	r3, #48	; 0x30
 8004d58:	4904      	ldr	r1, [pc, #16]	; (8004d6c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 ff43 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	08015194 	.word	0x08015194

08004d70 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f005 fb4e 	bl	800a41c <_ZN10TestOutputC1Ev>
 8004d80:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	224d      	movs	r2, #77	; 0x4d
 8004d88:	4908      	ldr	r1, [pc, #32]	; (8004dac <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8004d8a:	2038      	movs	r0, #56	; 0x38
 8004d8c:	f001 f842 	bl	8005e14 <_ZnwjPKci>
 8004d90:	4604      	mov	r4, r0
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7ff ffd0 	bl	8004d38 <_ZN19JUnitTestOutputImplC1Ev>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	611c      	str	r4, [r3, #16]
{
}
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	080172c4 	.word	0x080172c4
 8004dac:	08015198 	.word	0x08015198

08004db0 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3330      	adds	r3, #48	; 0x30
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f002 faca 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3328      	adds	r3, #40	; 0x28
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f002 fac5 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff ffa4 	bl	8004d1c <_ZN20JUnitTestGroupResultD1Ev>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f838 	bl	8004e64 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691c      	ldr	r4, [r3, #16]
 8004df8:	2c00      	cmp	r4, #0
 8004dfa:	d006      	beq.n	8004e0a <_ZN15JUnitTestOutputD1Ev+0x2a>
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff ffd7 	bl	8004db0 <_ZN19JUnitTestOutputImplD1Ev>
 8004e02:	2138      	movs	r1, #56	; 0x38
 8004e04:	4620      	mov	r0, r4
 8004e06:	f001 f819 	bl	8005e3c <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f005 fb23 	bl	800a458 <_ZN10TestOutputD1Ev>
}
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}
 8004e1c:	080172c4 	.word	0x080172c4

08004e20 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
}
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7ff ffd9 	bl	8004de0 <_ZN15JUnitTestOutputD1Ev>
 8004e2e:	2114      	movs	r1, #20
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 f803 	bl	8005e3c <_ZdlPvj>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3314      	adds	r3, #20
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f002 fa82 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f002 fa7e 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f103 0414 	add.w	r4, r3, #20
 8004e84:	f107 0308 	add.w	r3, r7, #8
 8004e88:	491d      	ldr	r1, [pc, #116]	; (8004f00 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 feab 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8004e90:	f107 0308 	add.w	r3, r7, #8
 8004e94:	4619      	mov	r1, r3
 8004e96:	4620      	mov	r0, r4
 8004e98:	f001 ff11 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f002 fa58 	bl	8007356 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	617b      	str	r3, [r7, #20]
    while (cur) {
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d018      	beq.n	8004ee6 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d004      	beq.n	8004ecc <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	3204      	adds	r2, #4
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	4790      	blx	r2
        delete cur;
 8004ecc:	697c      	ldr	r4, [r7, #20]
 8004ece:	2c00      	cmp	r4, #0
 8004ed0:	d006      	beq.n	8004ee0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f7ff ffb4 	bl	8004e40 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8004ed8:	2128      	movs	r1, #40	; 0x28
 8004eda:	4620      	mov	r0, r4
 8004edc:	f000 ffae 	bl	8005e3c <_ZdlPvj>
        cur = tmp;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	617b      	str	r3, [r7, #20]
    while (cur) {
 8004ee4:	e7e3      	b.n	8004eae <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd90      	pop	{r4, r7, pc}
 8004efe:	bf00      	nop
 8004f00:	08015194 	.word	0x08015194

08004f04 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8004f2e:	b590      	push	{r4, r7, lr}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	6a1c      	ldr	r4, [r3, #32]
 8004f3e:	6838      	ldr	r0, [r7, #0]
 8004f40:	f007 fbde 	bl	800c700 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8004f44:	4603      	mov	r3, r0
 8004f46:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	6a1c      	ldr	r4, [r3, #32]
 8004f4e:	6838      	ldr	r0, [r7, #0]
 8004f50:	f7ff fe8a 	bl	8004c68 <_ZNK10TestResult13getCheckCountEv>
 8004f54:	4603      	mov	r3, r0
 8004f56:	6223      	str	r3, [r4, #32]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd90      	pop	{r4, r7, pc}

08004f60 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8004f76:	b590      	push	{r4, r7, lr}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691c      	ldr	r4, [r3, #16]
 8004f84:	6838      	ldr	r0, [r7, #0]
 8004f86:	f007 fbc7 	bl	800c718 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3364      	adds	r3, #100	; 0x64
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
    resetTestGroupResult();
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ff62 	bl	8004e64 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b089      	sub	sp, #36	; 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	3201      	adds	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f103 0414 	add.w	r4, r3, #20
 8004fc4:	f107 0308 	add.w	r3, r7, #8
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f007 ff07 	bl	800cdde <_ZNK10UtestShell8getGroupEv>
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f001 fe71 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8004fdc:	f107 0308 	add.w	r3, r7, #8
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f002 f9b8 	bl	8007356 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8004fe6:	4b3c      	ldr	r3, [pc, #240]	; (80050d8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4798      	blx	r3
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d110      	bne.n	8005020 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8004ffe:	2288      	movs	r2, #136	; 0x88
 8005000:	4936      	ldr	r1, [pc, #216]	; (80050dc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8005002:	2028      	movs	r0, #40	; 0x28
 8005004:	f000 ff06 	bl	8005e14 <_ZnwjPKci>
 8005008:	4604      	mov	r4, r0
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff fe38 	bl	8004c80 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8005014:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6912      	ldr	r2, [r2, #16]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	61d3      	str	r3, [r2, #28]
 800501e:	e013      	b.n	8005048 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8005020:	228b      	movs	r2, #139	; 0x8b
 8005022:	492e      	ldr	r1, [pc, #184]	; (80050dc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8005024:	2028      	movs	r0, #40	; 0x28
 8005026:	f000 fef5 	bl	8005e14 <_ZnwjPKci>
 800502a:	4604      	mov	r4, r0
 800502c:	4620      	mov	r0, r4
 800502e:	f7ff fe27 	bl	8004c80 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005046:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	461c      	mov	r4, r3
 8005050:	f107 0310 	add.w	r3, r7, #16
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f007 feb2 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 800505c:	f107 0310 	add.w	r3, r7, #16
 8005060:	4619      	mov	r1, r3
 8005062:	4620      	mov	r0, r4
 8005064:	f001 fe2b 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8005068:	f107 0310 	add.w	r3, r7, #16
 800506c:	4618      	mov	r0, r3
 800506e:	f002 f972 	bl	8007356 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f103 0414 	add.w	r4, r3, #20
 800507c:	f107 0318 	add.w	r3, r7, #24
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f007 ff5c 	bl	800cf40 <_ZNK10UtestShell7getFileEv>
 8005088:	f107 0318 	add.w	r3, r7, #24
 800508c:	4619      	mov	r1, r3
 800508e:	4620      	mov	r0, r4
 8005090:	f001 fe15 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8005094:	f107 0318 	add.w	r3, r7, #24
 8005098:	4618      	mov	r0, r3
 800509a:	f002 f95c 	bl	8007356 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	6a1c      	ldr	r4, [r3, #32]
 80050a4:	6838      	ldr	r0, [r7, #0]
 80050a6:	f007 ff5a 	bl	800cf5e <_ZNK10UtestShell13getLineNumberEv>
 80050aa:	4603      	mov	r3, r0
 80050ac:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3318      	adds	r3, #24
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6838      	ldr	r0, [r7, #0]
 80050b8:	4798      	blx	r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	f083 0301 	eor.w	r3, r3, #1
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	2201      	movs	r2, #1
 80050ce:	741a      	strb	r2, [r3, #16]
    }
}
 80050d0:	bf00      	nop
 80050d2:	3724      	adds	r7, #36	; 0x24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	200000a4 	.word	0x200000a4
 80050dc:	08015198 	.word	0x08015198

080050e0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 80050ec:	f107 0310 	add.w	r3, r7, #16
 80050f0:	4928      	ldr	r1, [pc, #160]	; (8005194 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 fd77 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	3328      	adds	r3, #40	; 0x28
 80050fe:	4618      	mov	r0, r3
 8005100:	f002 f918 	bl	8007334 <_ZNK12SimpleString7isEmptyEv>
 8005104:	4603      	mov	r3, r0
 8005106:	f083 0301 	eor.w	r3, r3, #1
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00f      	beq.n	8005130 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005118:	f107 0310 	add.w	r3, r7, #16
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f002 f996 	bl	8007450 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8005124:	f107 0310 	add.w	r3, r7, #16
 8005128:	491b      	ldr	r1, [pc, #108]	; (8005198 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800512a:	4618      	mov	r0, r3
 800512c:	f002 f9a2 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8005130:	f107 0310 	add.w	r3, r7, #16
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4618      	mov	r0, r3
 8005138:	f002 f98a 	bl	8007450 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3384      	adds	r3, #132	; 0x84
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f107 0018 	add.w	r0, r7, #24
 8005148:	f107 0210 	add.w	r2, r7, #16
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4798      	blx	r3
 8005150:	f107 0320 	add.w	r3, r7, #32
 8005154:	4911      	ldr	r1, [pc, #68]	; (800519c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8005156:	4618      	mov	r0, r3
 8005158:	f001 fd45 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f107 0220 	add.w	r2, r7, #32
 8005162:	f107 0118 	add.w	r1, r7, #24
 8005166:	4618      	mov	r0, r3
 8005168:	f002 f957 	bl	800741a <_ZNK12SimpleStringplERKS_>
 800516c:	f107 0320 	add.w	r3, r7, #32
 8005170:	4618      	mov	r0, r3
 8005172:	f002 f8f0 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8005176:	f107 0318 	add.w	r3, r7, #24
 800517a:	4618      	mov	r0, r3
 800517c:	f002 f8eb 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	4618      	mov	r0, r3
 8005186:	f002 f8e6 	bl	8007356 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800518a:	bf00      	nop
}
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	080151b4 	.word	0x080151b4
 8005198:	080151c0 	.word	0x080151c0
 800519c:	080151c4 	.word	0x080151c4

080051a0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f001 fd6d 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80051b4:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	225f      	movs	r2, #95	; 0x5f
 80051c6:	4619      	mov	r1, r3
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f001 fef2 	bl	8006fb2 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3301      	adds	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e7f0      	b.n	80051b8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 80051d6:	bf00      	nop
}
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	080151cc 	.word	0x080151cc

080051e4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	3328      	adds	r3, #40	; 0x28
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 fd5d 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
    }
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3368      	adds	r3, #104	; 0x68
 800521a:	681c      	ldr	r4, [r3, #0]
 800521c:	f107 0308 	add.w	r3, r7, #8
 8005220:	4908      	ldr	r1, [pc, #32]	; (8005244 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8005222:	4618      	mov	r0, r3
 8005224:	f001 fcdf 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8005228:	f107 0308 	add.w	r3, r7, #8
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	47a0      	blx	r4
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	4618      	mov	r0, r3
 8005238:	f002 f88d 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}
 8005244:	080151d8 	.word	0x080151d8

08005248 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8005248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524c:	b08a      	sub	sp, #40	; 0x28
 800524e:	af04      	add	r7, sp, #16
 8005250:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8005258:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800525e:	3314      	adds	r3, #20
 8005260:	4618      	mov	r0, r3
 8005262:	f002 f84b 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8005266:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800526e:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	4a23      	ldr	r2, [pc, #140]	; (8005304 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800527e:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	4b1f      	ldr	r3, [pc, #124]	; (8005304 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8005288:	fba3 1302 	umull	r1, r3, r3, r2
 800528c:	099b      	lsrs	r3, r3, #6
 800528e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4798      	blx	r3
 80052a0:	4603      	mov	r3, r0
 80052a2:	f107 0008 	add.w	r0, r7, #8
 80052a6:	9303      	str	r3, [sp, #12]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	9302      	str	r3, [sp, #8]
 80052ac:	9601      	str	r6, [sp, #4]
 80052ae:	9500      	str	r5, [sp, #0]
 80052b0:	4623      	mov	r3, r4
 80052b2:	4642      	mov	r2, r8
 80052b4:	4915      	ldr	r1, [pc, #84]	; (800530c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 80052b6:	f002 fcdb 	bl	8007c70 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3368      	adds	r3, #104	; 0x68
 80052c0:	681c      	ldr	r4, [r3, #0]
 80052c2:	f107 0308 	add.w	r3, r7, #8
 80052c6:	4618      	mov	r0, r3
 80052c8:	f002 f818 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80052cc:	4602      	mov	r2, r0
 80052ce:	f107 0310 	add.w	r3, r7, #16
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 fc86 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80052da:	f107 0310 	add.w	r3, r7, #16
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	47a0      	blx	r4
 80052e4:	f107 0310 	add.w	r3, r7, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f002 f834 	bl	8007356 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 80052ee:	f107 0308 	add.w	r3, r7, #8
 80052f2:	4618      	mov	r0, r3
 80052f4:	f002 f82f 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 80052f8:	bf00      	nop
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005302:	bf00      	nop
 8005304:	10624dd3 	.word	0x10624dd3
 8005308:	200000a8 	.word	0x200000a8
 800530c:	08015204 	.word	0x08015204

08005310 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3368      	adds	r3, #104	; 0x68
 800531e:	681c      	ldr	r4, [r3, #0]
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4912      	ldr	r1, [pc, #72]	; (8005370 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8005326:	4618      	mov	r0, r3
 8005328:	f001 fc5d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800532c:	f107 0308 	add.w	r3, r7, #8
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	47a0      	blx	r4
 8005336:	f107 0308 	add.w	r3, r7, #8
 800533a:	4618      	mov	r0, r3
 800533c:	f002 f80b 	bl	8007356 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3368      	adds	r3, #104	; 0x68
 8005346:	681c      	ldr	r4, [r3, #0]
 8005348:	f107 0310 	add.w	r3, r7, #16
 800534c:	4909      	ldr	r1, [pc, #36]	; (8005374 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800534e:	4618      	mov	r0, r3
 8005350:	f001 fc49 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8005354:	f107 0310 	add.w	r3, r7, #16
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	47a0      	blx	r4
 800535e:	f107 0310 	add.w	r3, r7, #16
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fff7 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd90      	pop	{r4, r7, pc}
 8005370:	08015274 	.word	0x08015274
 8005374:	08015284 	.word	0x08015284

08005378 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 ffb9 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800538a:	4603      	mov	r3, r0
 800538c:	4619      	mov	r1, r3
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f001 fc29 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8005394:	4a0e      	ldr	r2, [pc, #56]	; (80053d0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8005396:	490f      	ldr	r1, [pc, #60]	; (80053d4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f001 fe39 	bl	8007010 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800539e:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 80053a0:	490e      	ldr	r1, [pc, #56]	; (80053dc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f001 fe34 	bl	8007010 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80053a8:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80053aa:	490e      	ldr	r1, [pc, #56]	; (80053e4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f001 fe2f 	bl	8007010 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 80053b2:	4a0d      	ldr	r2, [pc, #52]	; (80053e8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 80053b4:	490d      	ldr	r1, [pc, #52]	; (80053ec <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f001 fe2a 	bl	8007010 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 80053bc:	4a0c      	ldr	r2, [pc, #48]	; (80053f0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 80053be:	490d      	ldr	r1, [pc, #52]	; (80053f4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f001 fe25 	bl	8007010 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 80053c6:	bf00      	nop
}
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	08015294 	.word	0x08015294
 80053d4:	0801529c 	.word	0x0801529c
 80053d8:	080152a0 	.word	0x080152a0
 80053dc:	080152a8 	.word	0x080152a8
 80053e0:	080152ac 	.word	0x080152ac
 80053e4:	080152b4 	.word	0x080152b4
 80053e8:	080152b8 	.word	0x080152b8
 80053ec:	080152c0 	.word	0x080152c0
 80053f0:	080152c4 	.word	0x080152c4
 80053f4:	080152d0 	.word	0x080152d0

080053f8 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 80053f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fc:	b096      	sub	sp, #88	; 0x58
 80053fe:	af08      	add	r7, sp, #32
 8005400:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800540a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80b2 	beq.w	8005576 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8005416:	3328      	adds	r3, #40	; 0x28
 8005418:	4618      	mov	r0, r3
 800541a:	f001 ff6f 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800541e:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	3328      	adds	r3, #40	; 0x28
 8005426:	4618      	mov	r0, r3
 8005428:	f001 ff84 	bl	8007334 <_ZNK12SimpleString7isEmptyEv>
 800542c:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8005432:	4c53      	ldr	r4, [pc, #332]	; (8005580 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8005434:	e000      	b.n	8005438 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8005436:	4c53      	ldr	r4, [pc, #332]	; (8005584 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800543c:	3314      	adds	r3, #20
 800543e:	4618      	mov	r0, r3
 8005440:	f001 ff5c 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8005444:	4605      	mov	r5, r0
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	4618      	mov	r0, r3
 800544a:	f001 ff57 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800544e:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8005450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800545c:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	4a49      	ldr	r2, [pc, #292]	; (8005588 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800546a:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	4b45      	ldr	r3, [pc, #276]	; (8005588 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8005472:	fba3 1302 	umull	r1, r3, r3, r2
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005486:	3314      	adds	r3, #20
 8005488:	4618      	mov	r0, r3
 800548a:	f001 ff37 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800548e:	4602      	mov	r2, r0
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f107 0014 	add.w	r0, r7, #20
 8005498:	9306      	str	r3, [sp, #24]
 800549a:	9205      	str	r2, [sp, #20]
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	9204      	str	r2, [sp, #16]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	9203      	str	r2, [sp, #12]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	9302      	str	r3, [sp, #8]
 80054a8:	9601      	str	r6, [sp, #4]
 80054aa:	9500      	str	r5, [sp, #0]
 80054ac:	4623      	mov	r3, r4
 80054ae:	4642      	mov	r2, r8
 80054b0:	4936      	ldr	r1, [pc, #216]	; (800558c <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80054b2:	f002 fbdd 	bl	8007c70 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3368      	adds	r3, #104	; 0x68
 80054bc:	681c      	ldr	r4, [r3, #0]
 80054be:	f107 0314 	add.w	r3, r7, #20
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 ff1a 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80054c8:	4602      	mov	r2, r0
 80054ca:	f107 031c 	add.w	r3, r7, #28
 80054ce:	4611      	mov	r1, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 fb88 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80054d6:	f107 031c 	add.w	r3, r7, #28
 80054da:	4619      	mov	r1, r3
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	47a0      	blx	r4
 80054e0:	f107 031c 	add.w	r3, r7, #28
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 ff36 	bl	8007356 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054f0:	6a12      	ldr	r2, [r2, #32]
 80054f2:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3388      	adds	r3, #136	; 0x88
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	4798      	blx	r3
 800550a:	e017      	b.n	800553c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	7c1b      	ldrb	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d013      	beq.n	800553c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3368      	adds	r3, #104	; 0x68
 800551a:	681c      	ldr	r4, [r3, #0]
 800551c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005520:	491b      	ldr	r1, [pc, #108]	; (8005590 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fb5f 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8005528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800552c:	4619      	mov	r1, r3
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	47a0      	blx	r4
 8005532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005536:	4618      	mov	r0, r3
 8005538:	f001 ff0d 	bl	8007356 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3368      	adds	r3, #104	; 0x68
 8005542:	681c      	ldr	r4, [r3, #0]
 8005544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005548:	4912      	ldr	r1, [pc, #72]	; (8005594 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800554a:	4618      	mov	r0, r3
 800554c:	f001 fb4b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8005550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005554:	4619      	mov	r1, r3
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	47a0      	blx	r4
 800555a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800555e:	4618      	mov	r0, r3
 8005560:	f001 fef9 	bl	8007356 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800556a:	f107 0314 	add.w	r3, r7, #20
 800556e:	4618      	mov	r0, r3
 8005570:	f001 fef1 	bl	8007356 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8005574:	e749      	b.n	800540a <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8005576:	bf00      	nop
 8005578:	3738      	adds	r7, #56	; 0x38
 800557a:	46bd      	mov	sp, r7
 800557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005580:	08015194 	.word	0x08015194
 8005584:	080152d4 	.word	0x080152d4
 8005588:	10624dd3 	.word	0x10624dd3
 800558c:	080152d8 	.word	0x080152d8
 8005590:	08015334 	.word	0x08015334
 8005594:	08015344 	.word	0x08015344

08005598 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8005598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559a:	b091      	sub	sp, #68	; 0x44
 800559c:	af02      	add	r7, sp, #8
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68d9      	ldr	r1, [r3, #12]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f107 0210 	add.w	r2, r7, #16
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80055b8:	f107 0310 	add.w	r3, r7, #16
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 fe9d 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80055c2:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3314      	adds	r3, #20
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4610      	mov	r0, r2
 80055d4:	4798      	blx	r3
 80055d6:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80055d8:	461e      	mov	r6, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3380      	adds	r3, #128	; 0x80
 80055e0:	681c      	ldr	r4, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68d9      	ldr	r1, [r3, #12]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3318      	adds	r3, #24
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f107 0220 	add.w	r2, r7, #32
 80055f4:	4610      	mov	r0, r2
 80055f6:	4798      	blx	r3
 80055f8:	f107 0318 	add.w	r3, r7, #24
 80055fc:	f107 0220 	add.w	r2, r7, #32
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4618      	mov	r0, r3
 8005604:	47a0      	blx	r4
 8005606:	f107 0318 	add.w	r3, r7, #24
 800560a:	4618      	mov	r0, r3
 800560c:	f001 fe76 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8005610:	4603      	mov	r3, r0
 8005612:	f107 0008 	add.w	r0, r7, #8
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	4633      	mov	r3, r6
 800561a:	462a      	mov	r2, r5
 800561c:	4924      	ldr	r1, [pc, #144]	; (80056b0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800561e:	f002 fb27 	bl	8007c70 <_Z16StringFromFormatPKcz>
 8005622:	f107 0318 	add.w	r3, r7, #24
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fe95 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800562c:	f107 0320 	add.w	r3, r7, #32
 8005630:	4618      	mov	r0, r3
 8005632:	f001 fe90 	bl	8007356 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8005636:	f107 0310 	add.w	r3, r7, #16
 800563a:	4618      	mov	r0, r3
 800563c:	f001 fe8b 	bl	8007356 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3368      	adds	r3, #104	; 0x68
 8005646:	681c      	ldr	r4, [r3, #0]
 8005648:	f107 0308 	add.w	r3, r7, #8
 800564c:	4618      	mov	r0, r3
 800564e:	f001 fe55 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8005652:	4602      	mov	r2, r0
 8005654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005658:	4611      	mov	r1, r2
 800565a:	4618      	mov	r0, r3
 800565c:	f001 fac3 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8005660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	47a0      	blx	r4
 800566a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800566e:	4618      	mov	r0, r3
 8005670:	f001 fe71 	bl	8007356 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3368      	adds	r3, #104	; 0x68
 800567a:	681c      	ldr	r4, [r3, #0]
 800567c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005680:	490c      	ldr	r1, [pc, #48]	; (80056b4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8005682:	4618      	mov	r0, r3
 8005684:	f001 faaf 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8005688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	47a0      	blx	r4
 8005692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005696:	4618      	mov	r0, r3
 8005698:	f001 fe5d 	bl	8007356 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800569c:	f107 0308 	add.w	r3, r7, #8
 80056a0:	4618      	mov	r0, r3
 80056a2:	f001 fe58 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 80056a6:	bf00      	nop
 80056a8:	373c      	adds	r7, #60	; 0x3c
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	08015354 	.word	0x08015354
 80056b4:	08015390 	.word	0x08015390

080056b8 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b08d      	sub	sp, #52	; 0x34
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3368      	adds	r3, #104	; 0x68
 80056c6:	681c      	ldr	r4, [r3, #0]
 80056c8:	f107 0308 	add.w	r3, r7, #8
 80056cc:	4933      	ldr	r1, [pc, #204]	; (800579c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 fa89 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80056d4:	f107 0308 	add.w	r3, r7, #8
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	47a0      	blx	r4
 80056de:	f107 0308 	add.w	r3, r7, #8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fe37 	bl	8007356 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3368      	adds	r3, #104	; 0x68
 80056ee:	681c      	ldr	r4, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3380      	adds	r3, #128	; 0x80
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6912      	ldr	r2, [r2, #16]
 80056fc:	3230      	adds	r2, #48	; 0x30
 80056fe:	f107 0010 	add.w	r0, r7, #16
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4798      	blx	r3
 8005706:	f107 0310 	add.w	r3, r7, #16
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	47a0      	blx	r4
 8005710:	f107 0310 	add.w	r3, r7, #16
 8005714:	4618      	mov	r0, r3
 8005716:	f001 fe1e 	bl	8007356 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3368      	adds	r3, #104	; 0x68
 8005720:	681c      	ldr	r4, [r3, #0]
 8005722:	f107 0318 	add.w	r3, r7, #24
 8005726:	491e      	ldr	r1, [pc, #120]	; (80057a0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8005728:	4618      	mov	r0, r3
 800572a:	f001 fa5c 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800572e:	f107 0318 	add.w	r3, r7, #24
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	47a0      	blx	r4
 8005738:	f107 0318 	add.w	r3, r7, #24
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fe0a 	bl	8007356 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3368      	adds	r3, #104	; 0x68
 8005748:	681c      	ldr	r4, [r3, #0]
 800574a:	f107 0320 	add.w	r3, r7, #32
 800574e:	4915      	ldr	r1, [pc, #84]	; (80057a4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8005750:	4618      	mov	r0, r3
 8005752:	f001 fa48 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8005756:	f107 0320 	add.w	r3, r7, #32
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	47a0      	blx	r4
 8005760:	f107 0320 	add.w	r3, r7, #32
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fdf6 	bl	8007356 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3368      	adds	r3, #104	; 0x68
 8005770:	681c      	ldr	r4, [r3, #0]
 8005772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005776:	490c      	ldr	r1, [pc, #48]	; (80057a8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8005778:	4618      	mov	r0, r3
 800577a:	f001 fa34 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800577e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	47a0      	blx	r4
 8005788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fde2 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8005792:	bf00      	nop
 8005794:	3734      	adds	r7, #52	; 0x34
 8005796:	46bd      	mov	sp, r7
 8005798:	bd90      	pop	{r4, r7, pc}
 800579a:	bf00      	nop
 800579c:	0801539c 	.word	0x0801539c
 80057a0:	080153ac 	.word	0x080153ac
 80057a4:	080153bc 	.word	0x080153bc
 80057a8:	080153d8 	.word	0x080153d8

080057ac <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3360      	adds	r3, #96	; 0x60
 80057ba:	681c      	ldr	r4, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	335c      	adds	r3, #92	; 0x5c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6912      	ldr	r2, [r2, #16]
 80057c8:	3214      	adds	r2, #20
 80057ca:	f107 0008 	add.w	r0, r7, #8
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4798      	blx	r3
 80057d2:	f107 0308 	add.w	r3, r7, #8
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	47a0      	blx	r4
 80057dc:	f107 0308 	add.w	r3, r7, #8
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 fdb8 	bl	8007356 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3370      	adds	r3, #112	; 0x70
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
    writeTestSuiteSummary();
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3374      	adds	r3, #116	; 0x74
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	4798      	blx	r3
    writeProperties();
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3378      	adds	r3, #120	; 0x78
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
    writeTestCases();
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	337c      	adds	r3, #124	; 0x7c
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
    writeFileEnding();
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	338c      	adds	r3, #140	; 0x8c
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
    closeFile();
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	336c      	adds	r3, #108	; 0x6c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bd90      	pop	{r4, r7, pc}

08005836 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	3330      	adds	r3, #48	; 0x30
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f001 fe08 	bl	8007474 <_ZN12SimpleStringpLEPKc>
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d113      	bne.n	80058ea <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	3201      	adds	r2, #1
 80058ca:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 80058cc:	f240 1233 	movw	r2, #307	; 0x133
 80058d0:	4908      	ldr	r1, [pc, #32]	; (80058f4 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 80058d2:	2034      	movs	r0, #52	; 0x34
 80058d4:	f000 fa9e 	bl	8005e14 <_ZnwjPKci>
 80058d8:	4604      	mov	r4, r0
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	4620      	mov	r0, r4
 80058de:	f002 ff4f 	bl	8008780 <_ZN11TestFailureC1ERKS_>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	60dc      	str	r4, [r3, #12]
    }
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd90      	pop	{r4, r7, pc}
 80058f2:	bf00      	nop
 80058f4:	08015198 	.word	0x08015198

080058f8 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 80058f8:	b5b0      	push	{r4, r5, r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8005904:	681d      	ldr	r5, [r3, #0]
 8005906:	6838      	ldr	r0, [r7, #0]
 8005908:	f001 fcf8 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800590c:	4602      	mov	r2, r0
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691c      	ldr	r4, [r3, #16]
 8005912:	4905      	ldr	r1, [pc, #20]	; (8005928 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8005914:	4610      	mov	r0, r2
 8005916:	47a8      	blx	r5
 8005918:	4603      	mov	r3, r0
 800591a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bdb0      	pop	{r4, r5, r7, pc}
 8005924:	200000b0 	.word	0x200000b0
 8005928:	080153e8 	.word	0x080153e8

0800592c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8005938:	681c      	ldr	r4, [r3, #0]
 800593a:	6838      	ldr	r0, [r7, #0]
 800593c:	f001 fcde 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8005940:	4602      	mov	r2, r0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	47a0      	blx	r4
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bd90      	pop	{r4, r7, pc}
 8005956:	bf00      	nop
 8005958:	200000b4 	.word	0x200000b4

0800595c <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6912      	ldr	r2, [r2, #16]
 800596c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800596e:	4610      	mov	r0, r2
 8005970:	4798      	blx	r3
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	200000b8 	.word	0x200000b8

08005980 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
        return false;
 800598e:	2300      	movs	r3, #0
    }
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
    {
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
    }
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	08017370 	.word	0x08017370

080059bc <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
    }
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ffe9 	bl	800599c <_ZN17MemoryLeakFailureD1Ev>
 80059ca:	2104      	movs	r1, #4
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fa35 	bl	8005e3c <_ZdlPvj>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	687c      	ldr	r4, [r7, #4]
 80059e6:	f000 fc71 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80059ea:	4603      	mov	r3, r0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f00b f972 	bl	8010cd6 <_ZN18MemoryLeakDetector8getMutexEv>
 80059f2:	4603      	mov	r3, r0
 80059f4:	4619      	mov	r1, r3
 80059f6:	4620      	mov	r0, r4
 80059f8:	f000 fe4a 	bl	8006690 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd90      	pop	{r4, r7, pc}

08005a06 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fe4f 	bl	80066b4 <_ZN15ScopedMutexLockD1Ev>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8005a2c:	f000 fc4e 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005a30:	4604      	mov	r4, r0
 8005a32:	f004 faf7 	bl	800a024 <_Z25getCurrentMallocAllocatorv>
 8005a36:	4601      	mov	r1, r0
 8005a38:	2301      	movs	r3, #1
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4620      	mov	r0, r4
 8005a46:	f00b fb89 	bl	801115c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8005a4a:	4603      	mov	r3, r0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd90      	pop	{r4, r7, pc}

08005a54 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8005a60:	f000 fc34 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005a64:	4603      	mov	r3, r0
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f00b f9e3 	bl	8010e34 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8005a6e:	f000 fc2d 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005a72:	4604      	mov	r4, r0
 8005a74:	f004 fad6 	bl	800a024 <_Z25getCurrentMallocAllocatorv>
 8005a78:	4601      	mov	r1, r0
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4620      	mov	r0, r4
 8005a88:	f00b fb9c 	bl	80111c4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd90      	pop	{r4, r7, pc}

08005a94 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8005a94:	b590      	push	{r4, r7, lr}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af04      	add	r7, sp, #16
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8005aa2:	f000 fc13 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	f004 fabc 	bl	800a024 <_Z25getCurrentMallocAllocatorv>
 8005aac:	4601      	mov	r1, r0
 8005aae:	2301      	movs	r3, #1
 8005ab0:	9302      	str	r3, [sp, #8]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f00b fbe4 	bl	801128c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8005ac4:	4603      	mov	r3, r0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd90      	pop	{r4, r7, pc}
	...

08005ad0 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <_ZL13normal_mallocjPKcj+0x20>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	4798      	blx	r3
 8005ae4:	4603      	mov	r3, r0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200000c4 	.word	0x200000c4

08005af4 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <_ZL14normal_reallocPvjPKcj+0x24>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	4798      	blx	r3
 8005b0c:	4603      	mov	r3, r0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	200000c8 	.word	0x200000c8

08005b1c <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <_ZL11normal_freePvPKcj+0x1c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	4798      	blx	r3
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200000cc 	.word	0x200000cc

08005b3c <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8005b3c:	b590      	push	{r4, r7, lr}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8005b44:	f107 0308 	add.w	r3, r7, #8
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff ff47 	bl	80059dc <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8005b4e:	f000 fbbd 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005b52:	4604      	mov	r4, r0
 8005b54:	f004 f9b6 	bl	8009ec4 <_Z22getCurrentNewAllocatorv>
 8005b58:	4601      	mov	r1, r0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f00b fa6a 	bl	8011038 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005b64:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005b66:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8005b68:	f107 0308 	add.w	r3, r7, #8
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ff4a 	bl	8005a06 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8005b72:	4623      	mov	r3, r4
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd90      	pop	{r4, r7, pc}

08005b7c <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8005b7c:	b590      	push	{r4, r7, lr}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8005b84:	f000 fba2 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005b88:	4604      	mov	r4, r0
 8005b8a:	f004 f99b 	bl	8009ec4 <_Z22getCurrentNewAllocatorv>
 8005b8e:	4601      	mov	r1, r0
 8005b90:	2300      	movs	r3, #0
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4620      	mov	r0, r4
 8005b96:	f00b fa4f 	bl	8011038 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005b9a:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd90      	pop	{r4, r7, pc}

08005ba6 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8005ba6:	b590      	push	{r4, r7, lr}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8005bae:	f000 fb8d 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	f004 f986 	bl	8009ec4 <_Z22getCurrentNewAllocatorv>
 8005bb8:	4601      	mov	r1, r0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f00b fa3a 	bl	8011038 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005bc4:	4603      	mov	r3, r0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd90      	pop	{r4, r7, pc}

08005bce <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8005bce:	b590      	push	{r4, r7, lr}
 8005bd0:	b089      	sub	sp, #36	; 0x24
 8005bd2:	af02      	add	r7, sp, #8
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8005bda:	f000 fb77 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005bde:	4604      	mov	r4, r0
 8005be0:	f004 f970 	bl	8009ec4 <_Z22getCurrentNewAllocatorv>
 8005be4:	4601      	mov	r1, r0
 8005be6:	2300      	movs	r3, #0
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f00b fab2 	bl	801115c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8005bf8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005bfa:	697b      	ldr	r3, [r7, #20]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd90      	pop	{r4, r7, pc}

08005c04 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8005c04:	b590      	push	{r4, r7, lr}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8005c0c:	f000 fb5e 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005c10:	4604      	mov	r4, r0
 8005c12:	f004 f9af 	bl	8009f74 <_Z27getCurrentNewArrayAllocatorv>
 8005c16:	4601      	mov	r1, r0
 8005c18:	2300      	movs	r3, #0
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f00b fa0b 	bl	8011038 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005c22:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005c24:	68fb      	ldr	r3, [r7, #12]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}

08005c2e <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8005c2e:	b590      	push	{r4, r7, lr}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8005c36:	f000 fb49 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	f004 f99a 	bl	8009f74 <_Z27getCurrentNewArrayAllocatorv>
 8005c40:	4601      	mov	r1, r0
 8005c42:	2300      	movs	r3, #0
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4620      	mov	r0, r4
 8005c48:	f00b f9f6 	bl	8011038 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005c4c:	4603      	mov	r3, r0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd90      	pop	{r4, r7, pc}

08005c56 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8005c56:	b590      	push	{r4, r7, lr}
 8005c58:	b089      	sub	sp, #36	; 0x24
 8005c5a:	af02      	add	r7, sp, #8
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8005c62:	f000 fb33 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005c66:	4604      	mov	r4, r0
 8005c68:	f004 f984 	bl	8009f74 <_Z27getCurrentNewArrayAllocatorv>
 8005c6c:	4601      	mov	r1, r0
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f00b fa6e 	bl	801115c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8005c80:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005c82:	697b      	ldr	r3, [r7, #20]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	371c      	adds	r7, #28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd90      	pop	{r4, r7, pc}

08005c8c <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8005c94:	f000 fb1a 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f00b f8c9 	bl	8010e34 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8005ca2:	f000 fb13 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	f004 f90c 	bl	8009ec4 <_Z22getCurrentNewAllocatorv>
 8005cac:	4601      	mov	r1, r0
 8005cae:	2300      	movs	r3, #0
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f00b fad0 	bl	8011258 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd90      	pop	{r4, r7, pc}

08005cc0 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8005cc8:	f000 fb00 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f00b f8af 	bl	8010e34 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8005cd6:	f000 faf9 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005cda:	4604      	mov	r4, r0
 8005cdc:	f004 f94a 	bl	8009f74 <_Z27getCurrentNewArrayAllocatorv>
 8005ce0:	4601      	mov	r1, r0
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f00b fab6 	bl	8011258 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd90      	pop	{r4, r7, pc}

08005cf4 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <_ZL19normal_operator_newj+0x1c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
 8005d04:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005d06:	68fb      	ldr	r3, [r7, #12]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200000c4 	.word	0x200000c4

08005d14 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8005d1c:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
 8005d24:	4603      	mov	r3, r0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200000c4 	.word	0x200000c4

08005d34 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	4798      	blx	r3
 8005d48:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005d4a:	697b      	ldr	r3, [r7, #20]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	200000c4 	.word	0x200000c4

08005d58 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <_ZL25normal_operator_new_arrayj+0x1c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	4798      	blx	r3
 8005d68:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	200000c4 	.word	0x200000c4

08005d78 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8005d80:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
 8005d88:	4603      	mov	r3, r0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	200000c4 	.word	0x200000c4

08005d98 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	4798      	blx	r3
 8005dac:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005dae:	697b      	ldr	r3, [r7, #20]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	200000c4 	.word	0x200000c4

08005dbc <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <_ZL22normal_operator_deletePv+0x18>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	200000cc 	.word	0x200000cc

08005dd8 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8005de0:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	200000cc 	.word	0x200000cc

08005df4 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8005dfc:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <_Znwj+0x1c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
 8005e04:	4603      	mov	r3, r0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000028 	.word	0x20000028

08005e14 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <_ZnwjPKci+0x24>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	4798      	blx	r3
 8005e2c:	4603      	mov	r3, r0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000030 	.word	0x20000030

08005e3c <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <_ZdlPvj+0x1c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000040 	.word	0x20000040

08005e5c <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <_ZnajPKci+0x24>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	4798      	blx	r3
 8005e74:	4603      	mov	r3, r0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	2000003c 	.word	0x2000003c

08005e84 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8005e8c:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <_ZdaPv+0x18>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000044 	.word	0x20000044

08005ea0 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8005eaa:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <_ZdaPvj+0x1c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
}
 8005eb2:	bf00      	nop
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000044 	.word	0x20000044

08005ec0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8005ec4:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8005ec6:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8005ec8:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8005eca:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8005ecc:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8005ece:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8005ed0:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8005ed2:	4a14      	ldr	r2, [pc, #80]	; (8005f24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8005ed4:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8005ed6:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8005ed8:	4a14      	ldr	r2, [pc, #80]	; (8005f2c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8005eda:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8005edc:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8005ede:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8005ee0:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8005ee4:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8005ee6:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8005eea:	4a16      	ldr	r2, [pc, #88]	; (8005f44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8005eec:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8005eee:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8005ef0:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8005ef2:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8005ef4:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8005ef6:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8005ef8:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8005efc:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8005efe:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8005f00:	4b17      	ldr	r3, [pc, #92]	; (8005f60 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8005f02:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8005f04:	601a      	str	r2, [r3, #0]

#endif
}
 8005f06:	bf00      	nop
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	20000028 	.word	0x20000028
 8005f14:	08005cf5 	.word	0x08005cf5
 8005f18:	2000002c 	.word	0x2000002c
 8005f1c:	08005d15 	.word	0x08005d15
 8005f20:	20000030 	.word	0x20000030
 8005f24:	08005d35 	.word	0x08005d35
 8005f28:	20000034 	.word	0x20000034
 8005f2c:	08005d59 	.word	0x08005d59
 8005f30:	20000038 	.word	0x20000038
 8005f34:	08005d79 	.word	0x08005d79
 8005f38:	2000003c 	.word	0x2000003c
 8005f3c:	08005d99 	.word	0x08005d99
 8005f40:	20000040 	.word	0x20000040
 8005f44:	08005dbd 	.word	0x08005dbd
 8005f48:	20000044 	.word	0x20000044
 8005f4c:	08005dd9 	.word	0x08005dd9
 8005f50:	20000010 	.word	0x20000010
 8005f54:	08005ad1 	.word	0x08005ad1
 8005f58:	20000018 	.word	0x20000018
 8005f5c:	08005af5 	.word	0x08005af5
 8005f60:	20000014 	.word	0x20000014
 8005f64:	08005b1d 	.word	0x08005b1d

08005f68 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8005f6c:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a07      	ldr	r2, [pc, #28]	; (8005f98 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d101      	bne.n	8005f84 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8005f84:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20000028 	.word	0x20000028
 8005f94:	08005b7d 	.word	0x08005b7d
 8005f98:	08005b3d 	.word	0x08005b3d

08005f9c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8005fa0:	4b1f      	ldr	r3, [pc, #124]	; (8006020 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	bfcc      	ite	gt
 8005fb2:	2301      	movgt	r3, #1
 8005fb4:	2300      	movle	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d12e      	bne.n	800601a <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a19      	ldr	r2, [pc, #100]	; (8006028 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8005fc2:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a19      	ldr	r2, [pc, #100]	; (8006030 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8005fca:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a19      	ldr	r2, [pc, #100]	; (8006038 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8005fd2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8005fd4:	4b19      	ldr	r3, [pc, #100]	; (800603c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a19      	ldr	r2, [pc, #100]	; (8006040 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8005fda:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a19      	ldr	r2, [pc, #100]	; (8006048 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8005fe2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8005fe4:	4b19      	ldr	r3, [pc, #100]	; (800604c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8005fea:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8005fec:	4b19      	ldr	r3, [pc, #100]	; (8006054 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a19      	ldr	r2, [pc, #100]	; (8006058 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8005ff2:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8005ffa:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8005ffc:	4b19      	ldr	r3, [pc, #100]	; (8006064 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a19      	ldr	r2, [pc, #100]	; (8006068 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8006002:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8006004:	4b19      	ldr	r3, [pc, #100]	; (800606c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a19      	ldr	r2, [pc, #100]	; (8006070 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800600a:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a19      	ldr	r2, [pc, #100]	; (8006078 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8006012:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8006014:	f7ff ff54 	bl	8005ec0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8006018:	e000      	b.n	800601c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800601a:	bf00      	nop
#endif
}
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	200004d8 	.word	0x200004d8
 8006024:	20000028 	.word	0x20000028
 8006028:	20000048 	.word	0x20000048
 800602c:	2000002c 	.word	0x2000002c
 8006030:	2000004c 	.word	0x2000004c
 8006034:	20000030 	.word	0x20000030
 8006038:	20000050 	.word	0x20000050
 800603c:	20000034 	.word	0x20000034
 8006040:	20000054 	.word	0x20000054
 8006044:	20000038 	.word	0x20000038
 8006048:	20000058 	.word	0x20000058
 800604c:	2000003c 	.word	0x2000003c
 8006050:	2000005c 	.word	0x2000005c
 8006054:	20000040 	.word	0x20000040
 8006058:	20000060 	.word	0x20000060
 800605c:	20000044 	.word	0x20000044
 8006060:	20000064 	.word	0x20000064
 8006064:	20000010 	.word	0x20000010
 8006068:	2000001c 	.word	0x2000001c
 800606c:	20000018 	.word	0x20000018
 8006070:	20000024 	.word	0x20000024
 8006074:	20000014 	.word	0x20000014
 8006078:	20000020 	.word	0x20000020

0800607c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8006080:	4b1f      	ldr	r3, [pc, #124]	; (8006100 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3b01      	subs	r3, #1
 8006086:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	4b1d      	ldr	r3, [pc, #116]	; (8006100 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfcc      	ite	gt
 8006092:	2301      	movgt	r3, #1
 8006094:	2300      	movle	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d12c      	bne.n	80060f6 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a19      	ldr	r2, [pc, #100]	; (8006108 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 80060a2:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 80060a4:	4b19      	ldr	r3, [pc, #100]	; (800610c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a19      	ldr	r2, [pc, #100]	; (8006110 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 80060aa:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 80060ac:	4b19      	ldr	r3, [pc, #100]	; (8006114 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 80060b2:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 80060b4:	4b19      	ldr	r3, [pc, #100]	; (800611c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 80060ba:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 80060bc:	4b19      	ldr	r3, [pc, #100]	; (8006124 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a19      	ldr	r2, [pc, #100]	; (8006128 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 80060c2:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 80060c4:	4b19      	ldr	r3, [pc, #100]	; (800612c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a19      	ldr	r2, [pc, #100]	; (8006130 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 80060ca:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 80060cc:	4b19      	ldr	r3, [pc, #100]	; (8006134 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a19      	ldr	r2, [pc, #100]	; (8006138 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 80060d2:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 80060d4:	4b19      	ldr	r3, [pc, #100]	; (800613c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a19      	ldr	r2, [pc, #100]	; (8006140 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 80060da:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 80060dc:	4b19      	ldr	r3, [pc, #100]	; (8006144 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a19      	ldr	r2, [pc, #100]	; (8006148 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 80060e2:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 80060e4:	4b19      	ldr	r3, [pc, #100]	; (800614c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a19      	ldr	r2, [pc, #100]	; (8006150 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 80060ea:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a19      	ldr	r2, [pc, #100]	; (8006158 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	e000      	b.n	80060f8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 80060f6:	bf00      	nop
#endif
}
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	200004d8 	.word	0x200004d8
 8006104:	20000048 	.word	0x20000048
 8006108:	20000028 	.word	0x20000028
 800610c:	2000004c 	.word	0x2000004c
 8006110:	2000002c 	.word	0x2000002c
 8006114:	20000050 	.word	0x20000050
 8006118:	20000030 	.word	0x20000030
 800611c:	20000054 	.word	0x20000054
 8006120:	20000034 	.word	0x20000034
 8006124:	20000058 	.word	0x20000058
 8006128:	20000038 	.word	0x20000038
 800612c:	2000005c 	.word	0x2000005c
 8006130:	2000003c 	.word	0x2000003c
 8006134:	20000060 	.word	0x20000060
 8006138:	20000040 	.word	0x20000040
 800613c:	20000064 	.word	0x20000064
 8006140:	20000044 	.word	0x20000044
 8006144:	2000001c 	.word	0x2000001c
 8006148:	20000010 	.word	0x20000010
 800614c:	20000024 	.word	0x20000024
 8006150:	20000018 	.word	0x20000018
 8006154:	20000020 	.word	0x20000020
 8006158:	20000014 	.word	0x20000014

0800615c <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
    {
 8006164:	4a05      	ldr	r2, [pc, #20]	; (800617c <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fc15 	bl	800599c <_ZN17MemoryLeakFailureD1Ev>
    }
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	0801735c 	.word	0x0801735c

08006180 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
    }
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ffe7 	bl	800615c <_ZN25MemoryLeakWarningReporterD1Ev>
 800618e:	2104      	movs	r1, #4
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff fe53 	bl	8005e3c <_ZdlPvj>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	4a04      	ldr	r2, [pc, #16]	; (80061bc <_ZN14TestTerminatorC1Ev+0x1c>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	08017bb4 	.word	0x08017bb4

080061c0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff ffe8 	bl	80061a0 <_ZN14TestTerminatorC1Ev>
 80061d0:	4a03      	ldr	r2, [pc, #12]	; (80061e0 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	08017b8c 	.word	0x08017b8c

080061e4 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 80061e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e6:	b099      	sub	sp, #100	; 0x64
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 80061ee:	f007 ffbd 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 80061f2:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 80061f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	339c      	adds	r3, #156	; 0x9c
 80061fa:	681c      	ldr	r4, [r3, #0]
 80061fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006200:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006202:	4618      	mov	r0, r3
 8006204:	f006 fddc 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 8006208:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800620c:	4618      	mov	r0, r3
 800620e:	f001 f875 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8006212:	4605      	mov	r5, r0
 8006214:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006216:	f006 fea2 	bl	800cf5e <_ZNK10UtestShell13getLineNumberEv>
 800621a:	4606      	mov	r6, r0
 800621c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fcdf 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8006228:	f107 000c 	add.w	r0, r7, #12
 800622c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	4633      	mov	r3, r6
 8006234:	462a      	mov	r2, r5
 8006236:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006238:	f002 ff2c 	bl	8009094 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800623c:	2300      	movs	r3, #0
 800623e:	653b      	str	r3, [r7, #80]	; 0x50
 8006240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff ffbb 	bl	80061c0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800624a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800624e:	f107 030c 	add.w	r3, r7, #12
 8006252:	4619      	mov	r1, r3
 8006254:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006256:	47a0      	blx	r4
 8006258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800625c:	4618      	mov	r0, r3
 800625e:	f008 f87f 	bl	800e360 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8006262:	f107 030c 	add.w	r3, r7, #12
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f9ac 	bl	80065c4 <_ZN11FailFailureD1Ev>
 800626c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006270:	4618      	mov	r0, r3
 8006272:	f001 f870 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8006276:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800627a:	4618      	mov	r0, r3
 800627c:	f001 f86b 	bl	8007356 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8006280:	bf00      	nop
 8006282:	375c      	adds	r7, #92	; 0x5c
 8006284:	46bd      	mov	sp, r7
 8006286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006288 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	4a04      	ldr	r2, [pc, #16]	; (80062a4 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	08017370 	.word	0x08017370

080062a8 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff ffe8 	bl	8006288 <_ZN17MemoryLeakFailureC1Ev>
 80062b8:	4a03      	ldr	r2, [pc, #12]	; (80062c8 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	0801735c 	.word	0x0801735c

080062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 80062cc:	b598      	push	{r3, r4, r7, lr}
 80062ce:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 80062d0:	4b11      	ldr	r3, [pc, #68]	; (8006318 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11b      	bne.n	8006310 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 80062d8:	f7ff fe60 	bl	8005f9c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 80062dc:	2004      	movs	r0, #4
 80062de:	f7ff fd89 	bl	8005df4 <_Znwj>
 80062e2:	4603      	mov	r3, r0
 80062e4:	461c      	mov	r4, r3
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7ff ffde 	bl	80062a8 <_ZN25MemoryLeakWarningReporterC1Ev>
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 80062ee:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 80062f0:	f241 1050 	movw	r0, #4432	; 0x1150
 80062f4:	f7ff fd7e 	bl	8005df4 <_Znwj>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461c      	mov	r4, r3
 80062fc:	4b07      	ldr	r3, [pc, #28]	; (800631c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4619      	mov	r1, r3
 8006302:	4620      	mov	r0, r4
 8006304:	f00a fc44 	bl	8010b90 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8006308:	4b03      	ldr	r3, [pc, #12]	; (8006318 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800630a:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800630c:	f7ff feb6 	bl	800607c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8006310:	4b01      	ldr	r3, [pc, #4]	; (8006318 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8006312:	681b      	ldr	r3, [r3, #0]
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd98      	pop	{r3, r4, r7, pc}
 8006318:	200004e0 	.word	0x200004e0
 800631c:	200004dc 	.word	0x200004dc

08006320 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	765a      	strb	r2, [r3, #25]
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
	...

08006340 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8006344:	f7ff fdbc 	bl	8005ec0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	3204      	adds	r2, #4
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	4790      	blx	r2
    delete globalReporter;
 800635a:	4b08      	ldr	r3, [pc, #32]	; (800637c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	3204      	adds	r2, #4
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	4790      	blx	r2
    globalDetector = NULLPTR;
 800636c:	4b02      	ldr	r3, [pc, #8]	; (8006378 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
}
 8006372:	bf00      	nop
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200004e0 	.word	0x200004e0
 800637c:	200004dc 	.word	0x200004dc

08006380 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	4618      	mov	r0, r3
 8006392:	f005 f815 	bl	800b3c0 <_ZN10TestPluginC1ERK12SimpleString>
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	761a      	strb	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	765a      	strb	r2, [r3, #25]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 80063ae:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 80063b6:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	615a      	str	r2, [r3, #20]
 80063c8:	e004      	b.n	80063d4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 80063ca:	f7ff ff7f 	bl	80062cc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80063ce:	4602      	mov	r2, r0
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	4618      	mov	r0, r3
 80063da:	f00a fc6f 	bl	8010cbc <_ZN18MemoryLeakDetector6enableEv>
}
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	08017384 	.word	0x08017384
 80063ec:	200004e4 	.word	0x200004e4

080063f0 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	4a09      	ldr	r2, [pc, #36]	; (8006420 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	7e5b      	ldrb	r3, [r3, #25]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8006406:	f7ff fd5b 	bl	8005ec0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800640a:	f7ff ff99 	bl	8006340 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4618      	mov	r0, r3
 8006412:	f005 f811 	bl	800b438 <_ZN10TestPluginD1Ev>
    }
}
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	08017384 	.word	0x08017384

08006424 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
}
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff ffdf 	bl	80063f0 <_ZN23MemoryLeakWarningPluginD1Ev>
 8006432:	2124      	movs	r1, #36	; 0x24
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fd01 	bl	8005e3c <_ZdlPvj>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	4618      	mov	r0, r3
 8006456:	f00a fc14 	bl	8010c82 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fd ffb0 	bl	80043c0 <_ZNK10TestResult15getFailureCountEv>
 8006460:	4602      	mov	r2, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b097      	sub	sp, #92	; 0x5c
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	4618      	mov	r0, r3
 8006482:	f00a fc0e 	bl	8010ca2 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	2103      	movs	r1, #3
 800648c:	4618      	mov	r0, r3
 800648e:	f00a ffab 	bl	80113e8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8006492:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	7e1b      	ldrb	r3, [r3, #24]
 8006498:	f083 0301 	eor.w	r3, r3, #1
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00e      	beq.n	80064c0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d009      	beq.n	80064c0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1c      	ldr	r4, [r3, #32]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fd ff85 	bl	80043c0 <_ZNK10TestResult15getFailureCountEv>
 80064b6:	4603      	mov	r3, r0
 80064b8:	429c      	cmp	r4, r3
 80064ba:	d101      	bne.n	80064c0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d04c      	beq.n	8006560 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 80064c6:	f7ff fd4f 	bl	8005f68 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d028      	beq.n	8006522 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	2103      	movs	r1, #3
 80064d6:	4618      	mov	r0, r3
 80064d8:	f00a ff4b 	bl	8011372 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80064dc:	4602      	mov	r2, r0
 80064de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064e2:	4611      	mov	r1, r2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fb7e 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80064ea:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80064ee:	f107 0310 	add.w	r3, r7, #16
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f002 f8c7 	bl	8008688 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 80064fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 ff29 	bl	8007356 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3334      	adds	r3, #52	; 0x34
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f107 0210 	add.w	r2, r7, #16
 8006510:	4611      	mov	r1, r2
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8006516:	f107 0310 	add.w	r3, r7, #16
 800651a:	4618      	mov	r0, r3
 800651c:	f002 f974 	bl	8008808 <_ZN11TestFailureD1Ev>
 8006520:	e01e      	b.n	8006560 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d01a      	beq.n	8006560 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3338      	adds	r3, #56	; 0x38
 8006530:	681c      	ldr	r4, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	461a      	mov	r2, r3
 8006538:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800653c:	4910      	ldr	r1, [pc, #64]	; (8006580 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fb96 	bl	8007c70 <_Z16StringFromFormatPKcz>
 8006544:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fed7 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800654e:	4603      	mov	r3, r0
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	47a0      	blx	r4
 8006556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fefb 	bl	8007356 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	4618      	mov	r0, r3
 8006566:	f00a ff19 	bl	801139c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	61da      	str	r2, [r3, #28]
}
 8006576:	bf00      	nop
 8006578:	375c      	adds	r7, #92	; 0x5c
 800657a:	46bd      	mov	sp, r7
 800657c:	bd90      	pop	{r4, r7, pc}
 800657e:	bf00      	nop
 8006580:	080153ec 	.word	0x080153ec

08006584 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	2102      	movs	r1, #2
 8006594:	4618      	mov	r0, r3
 8006596:	f00a ff27 	bl	80113e8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800659a:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d007      	beq.n	80065b4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	2102      	movs	r1, #2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f00a fee1 	bl	8011372 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80065b0:	4603      	mov	r3, r0
 80065b2:	e000      	b.n	80065b6 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 80065b4:	4b02      	ldr	r3, [pc, #8]	; (80065c0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	0801542c 	.word	0x0801542c

080065c4 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	4a05      	ldr	r2, [pc, #20]	; (80065e4 <_ZN11FailFailureD1Ev+0x20>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f002 f917 	bl	8008808 <_ZN11TestFailureD1Ev>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	080173cc 	.word	0x080173cc

080065e8 <_ZN11FailFailureD0Ev>:
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff ffe7 	bl	80065c4 <_ZN11FailFailureD1Ev>
 80065f6:	2134      	movs	r1, #52	; 0x34
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fc1f 	bl	8005e3c <_ZdlPvj>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <_ZN11SimpleMutexC1Ev+0x20>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4798      	blx	r3
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	601a      	str	r2, [r3, #0]
}
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200000e8 	.word	0x200000e8

0800662c <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <_ZN11SimpleMutexD1Ev+0x20>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6812      	ldr	r2, [r2, #0]
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
}
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200000f4 	.word	0x200000f4

08006650 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <_ZN11SimpleMutex4LockEv+0x1c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	200000ec 	.word	0x200000ec

08006670 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	200000f0 	.word	0x200000f0

08006690 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ffd3 	bl	8006650 <_ZN11SimpleMutex4LockEv>
}
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff ffd5 	bl	8006670 <_ZN11SimpleMutex6UnlockEv>
}
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 80066dc:	f003 fc6c 	bl	8009fb8 <_Z24defaultNewArrayAllocatorv>
 80066e0:	4603      	mov	r3, r0
 80066e2:	e001      	b.n	80066e8 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 80066e4:	4b01      	ldr	r3, [pc, #4]	; (80066ec <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	200004e8 	.word	0x200004e8

080066f0 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 80066fc:	f7ff ffe8 	bl	80066d0 <_ZN12SimpleString18getStringAllocatorEv>
 8006700:	6803      	ldr	r3, [r0, #0]
 8006702:	3308      	adds	r3, #8
 8006704:	681c      	ldr	r4, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	47a0      	blx	r4
 800670e:	4603      	mov	r3, r0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	bd90      	pop	{r4, r7, pc}

08006718 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b087      	sub	sp, #28
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 8006726:	f7ff ffd3 	bl	80066d0 <_ZN12SimpleString18getStringAllocatorEv>
 800672a:	6803      	ldr	r3, [r0, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	681c      	ldr	r4, [r3, #0]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	47a0      	blx	r4
}
 800673c:	bf00      	nop
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	bd90      	pop	{r4, r7, pc}

08006744 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800674c:	2284      	movs	r2, #132	; 0x84
 800674e:	4906      	ldr	r1, [pc, #24]	; (8006768 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8006750:	2001      	movs	r0, #1
 8006752:	f7ff ffcd 	bl	80066f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8006756:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
    return empty;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	08015430 	.word	0x08015430

0800676c <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f001 f809 	bl	8007790 <_ZN12SimpleString7isSpaceEc>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <_ZN12SimpleString4AtoUEPKc+0x20>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3301      	adds	r3, #1
 8006788:	607b      	str	r3, [r7, #4]
 800678a:	e7f3      	b.n	8006774 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ffe7 	bl	8007768 <_ZN12SimpleString7isDigitEc>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <_ZN12SimpleString4AtoUEPKc+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b2f      	cmp	r3, #47	; 0x2f
 80067a6:	d901      	bls.n	80067ac <_ZN12SimpleString4AtoUEPKc+0x40>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <_ZN12SimpleString4AtoUEPKc+0x42>
 80067ac:	2300      	movs	r3, #0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d010      	beq.n	80067d4 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	3b30      	subs	r3, #48	; 0x30
 80067ca:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3301      	adds	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	e7dd      	b.n	8006790 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 80067d4:	68fb      	ldr	r3, [r7, #12]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 ffd0 	bl	8007790 <_ZN12SimpleString7isSpaceEc>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <_ZN12SimpleString4AtoIEPKc+0x20>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3301      	adds	r3, #1
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	e7f3      	b.n	80067e6 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 8006804:	7afb      	ldrb	r3, [r7, #11]
 8006806:	2b2d      	cmp	r3, #45	; 0x2d
 8006808:	d002      	beq.n	8006810 <_ZN12SimpleString4AtoIEPKc+0x32>
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	2b2b      	cmp	r3, #43	; 0x2b
 800680e:	d102      	bne.n	8006816 <_ZN12SimpleString4AtoIEPKc+0x38>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3301      	adds	r3, #1
 8006814:	607b      	str	r3, [r7, #4]

    int  result = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 ffa2 	bl	8007768 <_ZN12SimpleString7isDigitEc>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00f      	beq.n	800684a <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	3b30      	subs	r3, #48	; 0x30
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3301      	adds	r3, #1
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	e7e7      	b.n	800681a <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	2b2d      	cmp	r3, #45	; 0x2d
 800684e:	d102      	bne.n	8006856 <_ZN12SimpleString4AtoIEPKc+0x78>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	425b      	negs	r3, r3
 8006854:	e000      	b.n	8006858 <_ZN12SimpleString4AtoIEPKc+0x7a>
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d106      	bne.n	800688c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3301      	adds	r3, #1
 8006882:	607b      	str	r3, [r7, #4]
       ++s2;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800688a:	e7ee      	b.n	800686a <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	1ad3      	subs	r3, r2, r3
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 80068ac:	f04f 33ff 	mov.w	r3, #4294967295
 80068b0:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bf14      	ite	ne
 80068c4:	2301      	movne	r3, #1
 80068c6:	2300      	moveq	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d000      	beq.n	80068d0 <_ZN12SimpleString6StrLenEPKc+0x2c>
 80068ce:	e7f0      	b.n	80068b2 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 80068d0:	68fb      	ldr	r3, [r7, #12]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d013      	beq.n	8006918 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00f      	beq.n	8006918 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	781a      	ldrb	r2, [r3, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d109      	bne.n	8006918 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3b01      	subs	r3, #1
 8006908:	607b      	str	r3, [r7, #4]
        ++s1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
        ++s2;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	3301      	adds	r3, #1
 8006914:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 8006916:	e7e8      	b.n	80068ea <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d006      	beq.n	800692c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	e000      	b.n	800692e <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800693a:	b480      	push	{r7}
 800693c:	b087      	sub	sp, #28
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
    char* result = s1;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	e01e      	b.n	8006998 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	781a      	ldrb	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3b01      	subs	r3, #1
 8006966:	607b      	str	r3, [r7, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	3301      	adds	r3, #1
 8006984:	60bb      	str	r3, [r7, #8]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8006994:	e7e5      	b.n	8006962 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 8006996:	697b      	ldr	r3, [r7, #20]
}
 8006998:	4618      	mov	r0, r3
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d101      	bne.n	80069ba <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	e01b      	b.n	80069f2 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 80069c2:	6838      	ldr	r0, [r7, #0]
 80069c4:	f7ff ff6e 	bl	80068a4 <_ZN12SimpleString6StrLenEPKc>
 80069c8:	4603      	mov	r3, r0
 80069ca:	461a      	mov	r2, r3
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff ff85 	bl	80068de <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bf0c      	ite	eq
 80069da:	2301      	moveq	r3, #1
 80069dc:	2300      	movne	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	e004      	b.n	80069f2 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3301      	adds	r3, #1
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	e7e4      	b.n	80069ba <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b082      	sub	sp, #8
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	4603      	mov	r3, r0
 8006a02:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fed9 	bl	80077be <_ZN12SimpleString7isUpperEc>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <_ZN12SimpleString7ToLowerEc+0x20>
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	3320      	adds	r3, #32
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e000      	b.n	8006a1c <_ZN12SimpleString7ToLowerEc+0x22>
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	613b      	str	r3, [r7, #16]

    while (n--)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	1e5a      	subs	r2, r3, #1
 8006a3c:	607a      	str	r2, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bf14      	ite	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	2300      	moveq	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d013      	beq.n	8006a74 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	781a      	ldrb	r2, [r3, #0]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d006      	beq.n	8006a66 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	e007      	b.n	8006a76 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	617b      	str	r3, [r7, #20]
            ++p2;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	613b      	str	r3, [r7, #16]
    while (n--)
 8006a72:	e7e1      	b.n	8006a38 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00d      	beq.n	8006ab0 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6859      	ldr	r1, [r3, #4]
 8006a9c:	23ee      	movs	r3, #238	; 0xee
 8006a9e:	4a06      	ldr	r2, [pc, #24]	; (8006ab8 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 8006aa0:	f7ff fe3a 	bl	8006718 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	605a      	str	r2, [r3, #4]
    }
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	08015430 	.word	0x08015430

08006abc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ffdd 	bl	8006a84 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fe37 	bl	8006744 <_ZNK12SimpleString14getEmptyStringEv>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f7ff ffc7 	bl	8006a84 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	68b8      	ldr	r0, [r7, #8]
 8006b04:	f000 fe12 	bl	800772c <_ZN12SimpleString15copyToNewBufferEPKcj>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff ffae 	bl	8006a84 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f240 1209 	movw	r2, #265	; 0x109
 8006b36:	4907      	ldr	r1, [pc, #28]	; (8006b54 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff fdd9 	bl	80066f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	08015430 	.word	0x08015430

08006b58 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ff8d 	bl	8006a84 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	601a      	str	r2, [r3, #0]
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 8006b7e:	b590      	push	{r4, r7, lr}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681c      	ldr	r4, [r3, #0]
 8006b8c:	6838      	ldr	r0, [r7, #0]
 8006b8e:	f000 fbc1 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8006b92:	4603      	mov	r3, r0
 8006b94:	3301      	adds	r3, #1
 8006b96:	461a      	mov	r2, r3
 8006b98:	4621      	mov	r1, r4
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff ffa2 	bl	8006ae4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd90      	pop	{r4, r7, pc}

08006ba8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 8006bb2:	6838      	ldr	r0, [r7, #0]
 8006bb4:	f7ff fe76 	bl	80068a4 <_ZN12SimpleString6StrLenEPKc>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	3301      	adds	r3, #1
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ff8f 	bl	8006ae4 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
    return buffer_;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff ff5a 	bl	8006abc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8006c08:	e003      	b.n	8006c12 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ffcb 	bl	8006ba8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 8006c34:	68b8      	ldr	r0, [r7, #8]
 8006c36:	f7ff fe35 	bl	80068a4 <_ZN12SimpleString6StrLenEPKc>
 8006c3a:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	3301      	adds	r3, #1
 8006c46:	4619      	mov	r1, r3
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff ff65 	bl	8006b18 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d20e      	bcs.n	8006c7e <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3301      	adds	r3, #1
 8006c64:	461a      	mov	r2, r3
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	69f8      	ldr	r0, [r7, #28]
 8006c6a:	f7ff fe66 	bl	800693a <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4413      	add	r3, r2
 8006c74:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	61bb      	str	r3, [r7, #24]
 8006c7c:	e7ec      	b.n	8006c58 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
}
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 8006ca4:	6838      	ldr	r0, [r7, #0]
 8006ca6:	f7ff ff92 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff ff7a 	bl	8006ba8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b082      	sub	sp, #8
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
    if (this != &other)
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d003      	beq.n	8006cd8 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ff53 	bl	8006b7e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 8006cd8:	687b      	ldr	r3, [r7, #4]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 8006ce2:	b590      	push	{r4, r7, lr}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff6e 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	6838      	ldr	r0, [r7, #0]
 8006cf6:	f7ff ff6a 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff fe50 	bl	80069a4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bf14      	ite	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	2300      	moveq	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd90      	pop	{r4, r7, pc}

08006d18 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 8006d18:	b590      	push	{r4, r7, lr}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fabb 	bl	80072a4 <_ZNK12SimpleString9lowerCaseEv>
 8006d2e:	f107 0310 	add.w	r3, r7, #16
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fab5 	bl	80072a4 <_ZNK12SimpleString9lowerCaseEv>
 8006d3a:	f107 0210 	add.w	r2, r7, #16
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff ffcc 	bl	8006ce2 <_ZNK12SimpleString8containsERKS_>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461c      	mov	r4, r3
 8006d4e:	bf00      	nop
 8006d50:	f107 0310 	add.w	r3, r7, #16
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fafe 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 faf9 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8006d64:	4623      	mov	r3, r4
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd90      	pop	{r4, r7, pc}

08006d6e <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 8006d6e:	b590      	push	{r4, r7, lr}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 8006d78:	6838      	ldr	r0, [r7, #0]
 8006d7a:	f000 facb 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <_ZNK12SimpleString10startsWithERKS_+0x24>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e022      	b.n	8006dd8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fabe 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2301      	moveq	r3, #1
 8006da0:	2300      	movne	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <_ZNK12SimpleString10startsWithERKS_+0x3e>
 8006da8:	2300      	movs	r3, #0
 8006daa:	e015      	b.n	8006dd8 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff ff0e 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006db2:	4604      	mov	r4, r0
 8006db4:	6838      	ldr	r0, [r7, #0]
 8006db6:	f7ff ff0a 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f7ff fdf0 	bl	80069a4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff ff01 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	429c      	cmp	r4, r3
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd90      	pop	{r4, r7, pc}

08006de0 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
    size_t length = size();
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa92 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8006df0:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 8006df2:	6838      	ldr	r0, [r7, #0]
 8006df4:	f000 fa8e 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8006df8:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <_ZNK12SimpleString8endsWithERKS_+0x24>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e020      	b.n	8006e46 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <_ZNK12SimpleString8endsWithERKS_+0x2e>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e01b      	b.n	8006e46 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d201      	bcs.n	8006e1a <_ZNK12SimpleString8endsWithERKS_+0x3a>
 8006e16:	2300      	movs	r3, #0
 8006e18:	e015      	b.n	8006e46 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff fed7 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006e20:	4601      	mov	r1, r0
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	18cc      	adds	r4, r1, r3
 8006e2a:	6838      	ldr	r0, [r7, #0]
 8006e2c:	f7ff fecf 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006e30:	4603      	mov	r3, r0
 8006e32:	4619      	mov	r1, r3
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff fd13 	bl	8006860 <_ZN12SimpleString6StrCmpEPKcS1_>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bf0c      	ite	eq
 8006e40:	2301      	moveq	r3, #1
 8006e42:	2300      	movne	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd90      	pop	{r4, r7, pc}

08006e4e <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b086      	sub	sp, #24
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff feb6 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006e62:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
    if (*str){
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d008      	beq.n	8006e82 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 8006e70:	6838      	ldr	r0, [r7, #0]
 8006e72:	f7ff feac 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f7ff fd92 	bl	80069a4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006e80:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d014      	beq.n	8006eb4 <_ZNK12SimpleString5countERKS_+0x66>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d011      	beq.n	8006eb4 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	613b      	str	r3, [r7, #16]
        str++;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3301      	adds	r3, #1
 8006e98:	613b      	str	r3, [r7, #16]
        num++;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 8006ea0:	6838      	ldr	r0, [r7, #0]
 8006ea2:	f7ff fe94 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f7ff fd7a 	bl	80069a4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006eb0:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 8006eb2:	e7e6      	b.n	8006e82 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 8006eb4:	697b      	ldr	r3, [r7, #20]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 8006ebe:	b590      	push	{r4, r7, lr}
 8006ec0:	b091      	sub	sp, #68	; 0x44
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff ffbe 	bl	8006e4e <_ZNK12SimpleString5countERKS_>
 8006ed2:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff ff82 	bl	8006de0 <_ZNK12SimpleString8endsWithERKS_>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e000      	b.n	8006ee8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 8006eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	4413      	add	r3, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f84e 	bl	8007f94 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff fe68 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006efe:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 8006f00:	2300      	movs	r3, #0
 8006f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d235      	bcs.n	8006f78 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 8006f10:	68b8      	ldr	r0, [r7, #8]
 8006f12:	f7ff fe5c 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006f16:	4603      	mov	r3, r0
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f1c:	f7ff fd42 	bl	80069a4 <_ZN12SimpleString6StrStrEPKcS1_>
 8006f20:	4603      	mov	r3, r0
 8006f22:	3301      	adds	r3, #1
 8006f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 8006f26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f8cd 	bl	80080c8 <_ZN22SimpleStringCollectionixEj>
 8006f2e:	4604      	mov	r4, r0
 8006f30:	f107 031c 	add.w	r3, r7, #28
 8006f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fe55 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8006f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	f107 0014 	add.w	r0, r7, #20
 8006f46:	f107 011c 	add.w	r1, r7, #28
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f000 fb0c 	bl	8007568 <_ZNK12SimpleString9subStringEjj>
 8006f50:	f107 0314 	add.w	r3, r7, #20
 8006f54:	4619      	mov	r1, r3
 8006f56:	4620      	mov	r0, r4
 8006f58:	f7ff feb1 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8006f5c:	f107 0314 	add.w	r3, r7, #20
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f9f8 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8006f66:	f107 031c 	add.w	r3, r7, #28
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f9f3 	bl	8007356 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 8006f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f72:	3301      	adds	r3, #1
 8006f74:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f76:	e7c5      	b.n	8006f04 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d015      	beq.n	8006faa <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 8006f7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 f8a1 	bl	80080c8 <_ZN22SimpleStringCollectionixEj>
 8006f86:	4604      	mov	r4, r0
 8006f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fe29 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8006f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f7ff fe8f 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8006fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 f9d6 	bl	8007356 <_ZN12SimpleStringD1Ev>
    }
}
 8006faa:	bf00      	nop
 8006fac:	3744      	adds	r7, #68	; 0x44
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd90      	pop	{r4, r7, pc}

08006fb2 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f9a6 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8006fc8:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d218      	bcs.n	8007008 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fdf9 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	78fa      	ldrb	r2, [r7, #3]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	bf0c      	ite	eq
 8006fea:	2301      	moveq	r3, #1
 8006fec:	2300      	movne	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <_ZN12SimpleString7replaceEcc+0x4e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	78ba      	ldrb	r2, [r7, #2]
 8006ffe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3301      	adds	r3, #1
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e7e2      	b.n	8006fce <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08e      	sub	sp, #56	; 0x38
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800701c:	f107 0310 	add.w	r3, r7, #16
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff fddf 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007028:	f107 0310 	add.w	r3, r7, #16
 800702c:	4619      	mov	r1, r3
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f7ff ff0d 	bl	8006e4e <_ZNK12SimpleString5countERKS_>
 8007034:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007036:	f107 0310 	add.w	r3, r7, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f98b 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d071      	beq.n	800712a <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f964 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800704c:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800704e:	68b8      	ldr	r0, [r7, #8]
 8007050:	f7ff fc28 	bl	80068a4 <_ZN12SimpleString6StrLenEPKc>
 8007054:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff fc24 	bl	80068a4 <_ZN12SimpleString6StrLenEPKc>
 800705c:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007062:	fb02 f203 	mul.w	r2, r2, r3
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	441a      	add	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800706e:	fb01 f303 	mul.w	r3, r1, r3
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	3301      	adds	r3, #1
 8007076:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d951      	bls.n	8007122 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800707e:	f240 129d 	movw	r2, #413	; 0x19d
 8007082:	492c      	ldr	r1, [pc, #176]	; (8007134 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 8007084:	69f8      	ldr	r0, [r7, #28]
 8007086:	f7ff fb33 	bl	80066f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800708a:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800708c:	2300      	movs	r3, #0
 800708e:	637b      	str	r3, [r7, #52]	; 0x34
 8007090:	2300      	movs	r3, #0
 8007092:	633b      	str	r3, [r7, #48]	; 0x30
 8007094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	429a      	cmp	r2, r3
 800709a:	d236      	bcs.n	800710a <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f7ff fd96 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 80070a2:	4602      	mov	r2, r0
 80070a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a6:	4413      	add	r3, r2
 80070a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff fc16 	bl	80068de <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d011      	beq.n	80070e6 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	18d0      	adds	r0, r2, r3
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	3301      	adds	r3, #1
 80070cc:	461a      	mov	r2, r3
 80070ce:	6879      	ldr	r1, [r7, #4]
 80070d0:	f7ff fc33 	bl	800693a <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 80070d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	4413      	add	r3, r2
 80070da:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 80070dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	4413      	add	r3, r2
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
 80070e4:	e7d6      	b.n	8007094 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff fd71 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	441a      	add	r2, r3
 80070f2:	69b9      	ldr	r1, [r7, #24]
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	440b      	add	r3, r1
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	701a      	strb	r2, [r3, #0]
                j++;
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	3301      	adds	r3, #1
 8007100:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007104:	3301      	adds	r3, #1
 8007106:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 8007108:	e7c4      	b.n	8007094 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	3b01      	subs	r3, #1
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	4413      	add	r3, r2
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	69b9      	ldr	r1, [r7, #24]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff fd1c 	bl	8006b58 <_ZN12SimpleString19setInternalBufferToEPcj>
 8007120:	e004      	b.n	800712c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff fcca 	bl	8006abc <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8007128:	e000      	b.n	800712c <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800712a:	bf00      	nop
}
 800712c:	3738      	adds	r7, #56	; 0x38
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	08015430 	.word	0x08015430

08007138 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b089      	sub	sp, #36	; 0x24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 8007142:	493b      	ldr	r1, [pc, #236]	; (8007230 <_ZNK12SimpleString9printableEv+0xf8>)
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff fd4e 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800714a:	6838      	ldr	r0, [r7, #0]
 800714c:	f000 f876 	bl	800723c <_ZNK12SimpleString16getPrintableSizeEv>
 8007150:	4603      	mov	r3, r0
 8007152:	3301      	adds	r3, #1
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fcde 	bl	8006b18 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800715c:	6838      	ldr	r0, [r7, #0]
 800715e:	f000 f8d9 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8007162:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8007168:	2300      	movs	r3, #0
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	429a      	cmp	r2, r3
 8007172:	d252      	bcs.n	800721a <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	4413      	add	r3, r2
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 8007180:	7cfb      	ldrb	r3, [r7, #19]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fb43 	bl	800780e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d012      	beq.n	80071b4 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	18d0      	adds	r0, r2, r3
 8007196:	7cfb      	ldrb	r3, [r7, #19]
 8007198:	3b07      	subs	r3, #7
 800719a:	b2db      	uxtb	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	4b25      	ldr	r3, [pc, #148]	; (8007234 <_ZNK12SimpleString9printableEv+0xfc>)
 80071a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a4:	2202      	movs	r2, #2
 80071a6:	4619      	mov	r1, r3
 80071a8:	f7ff fbc7 	bl	800693a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	3302      	adds	r3, #2
 80071b0:	61fb      	str	r3, [r7, #28]
 80071b2:	e02e      	b.n	8007212 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fb15 	bl	80077e6 <_ZN12SimpleString9isControlEc>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d01e      	beq.n	8007200 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 80071c2:	7cfa      	ldrb	r2, [r7, #19]
 80071c4:	f107 0308 	add.w	r3, r7, #8
 80071c8:	491b      	ldr	r1, [pc, #108]	; (8007238 <_ZNK12SimpleString9printableEv+0x100>)
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fd50 	bl	8007c70 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	18d4      	adds	r4, r2, r3
 80071d8:	f107 0308 	add.w	r3, r7, #8
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f88d 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2204      	movs	r2, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4620      	mov	r0, r4
 80071ea:	f7ff fba6 	bl	800693a <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	3304      	adds	r3, #4
 80071f2:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 f8ac 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80071fe:	e008      	b.n	8007212 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	4413      	add	r3, r2
 8007208:	7cfa      	ldrb	r2, [r7, #19]
 800720a:	701a      	strb	r2, [r3, #0]
            j++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	3301      	adds	r3, #1
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e7a8      	b.n	800716c <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	4413      	add	r3, r2
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]

    return result;
 8007226:	bf00      	nop
}
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	3724      	adds	r7, #36	; 0x24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd90      	pop	{r4, r7, pc}
 8007230:	080154f0 	.word	0x080154f0
 8007234:	20000068 	.word	0x20000068
 8007238:	080154f4 	.word	0x080154f4

0800723c <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f865 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800724a:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 8007250:	2300      	movs	r3, #0
 8007252:	613b      	str	r3, [r7, #16]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	429a      	cmp	r2, r3
 800725a:	d21e      	bcs.n	800729a <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4413      	add	r3, r2
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 8007268:	7afb      	ldrb	r3, [r7, #11]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 facf 	bl	800780e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	3301      	adds	r3, #1
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e009      	b.n	8007292 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800727e:	7afb      	ldrb	r3, [r7, #11]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fab0 	bl	80077e6 <_ZN12SimpleString9isControlEc>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	3303      	adds	r3, #3
 8007290:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	3301      	adds	r3, #1
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	e7dc      	b.n	8007254 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800729a:	697b      	ldr	r3, [r7, #20]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 80072a4:	b590      	push	{r4, r7, lr}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fcec 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f82c 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 80072bc:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d213      	bcs.n	80072f2 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fc7f 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 80072d0:	4602      	mov	r2, r0
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	7819      	ldrb	r1, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	18d4      	adds	r4, r2, r3
 80072e0:	4608      	mov	r0, r1
 80072e2:	f7ff fb8a 	bl	80069fa <_ZN12SimpleString7ToLowerEc>
 80072e6:	4603      	mov	r3, r0
 80072e8:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3301      	adds	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e7e7      	b.n	80072c2 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 80072f2:	bf00      	nop
}
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd90      	pop	{r4, r7, pc}

080072fc <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
    return getBuffer();
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff fc62 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 800730a:	4603      	mov	r3, r0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff fc56 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8007322:	4603      	mov	r3, r0
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fabd 	bl	80068a4 <_ZN12SimpleString6StrLenEPKc>
 800732a:	4603      	mov	r3, r0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff ffe9 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	bf0c      	ite	eq
 8007348:	2301      	moveq	r3, #1
 800734a:	2300      	movne	r3, #0
 800734c:	b2db      	uxtb	r3, r3
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff fb90 	bl	8006a84 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800736e:	b590      	push	{r4, r7, lr}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff ffbf 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800737e:	4604      	mov	r4, r0
 8007380:	6838      	ldr	r0, [r7, #0]
 8007382:	f7ff ffbb 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8007386:	4603      	mov	r3, r0
 8007388:	4619      	mov	r1, r3
 800738a:	4620      	mov	r0, r4
 800738c:	f7ff fa68 	bl	8006860 <_ZN12SimpleString6StrCmpEPKcS1_>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	bf0c      	ite	eq
 8007396:	2301      	moveq	r3, #1
 8007398:	2300      	movne	r3, #0
 800739a:	b2db      	uxtb	r3, r3
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}

080073a4 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 80073a4:	b590      	push	{r4, r7, lr}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 80073ae:	f107 0308 	add.w	r3, r7, #8
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff ff75 	bl	80072a4 <_ZNK12SimpleString9lowerCaseEv>
 80073ba:	f107 0310 	add.w	r3, r7, #16
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff ff6f 	bl	80072a4 <_ZNK12SimpleString9lowerCaseEv>
 80073c6:	f107 0210 	add.w	r2, r7, #16
 80073ca:	f107 0308 	add.w	r3, r7, #8
 80073ce:	4611      	mov	r1, r2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff ffcc 	bl	800736e <_ZeqRK12SimpleStringS1_>
 80073d6:	4603      	mov	r3, r0
 80073d8:	461c      	mov	r4, r3
 80073da:	f107 0310 	add.w	r3, r7, #16
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff ffb9 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80073e4:	f107 0308 	add.w	r3, r7, #8
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff ffb4 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80073ee:	4623      	mov	r3, r4
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd90      	pop	{r4, r7, pc}

080073f8 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
    return !(left == right);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff ffb2 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800740a:	4603      	mov	r3, r0
 800740c:	f083 0301 	eor.w	r3, r3, #1
 8007410:	b2db      	uxtb	r3, r3
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 8007426:	68b8      	ldr	r0, [r7, #8]
 8007428:	f7ff fbd1 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 800742c:	4603      	mov	r3, r0
 800742e:	4619      	mov	r1, r3
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff fbd8 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff fbc9 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 800743c:	4603      	mov	r3, r0
 800743e:	4619      	mov	r1, r3
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f817 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    return t;
 8007446:	bf00      	nop
}
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800745a:	6838      	ldr	r0, [r7, #0]
 800745c:	f7ff fbb7 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 8007460:	4603      	mov	r3, r0
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f805 	bl	8007474 <_ZN12SimpleStringpLEPKc>
 800746a:	4603      	mov	r3, r0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff ff48 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8007484:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 8007486:	6838      	ldr	r0, [r7, #0]
 8007488:	f7ff fa0c 	bl	80068a4 <_ZN12SimpleString6StrLenEPKc>
 800748c:	4603      	mov	r3, r0
 800748e:	3301      	adds	r3, #1
 8007490:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	4413      	add	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff fb97 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 80074a0:	4603      	mov	r3, r0
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 f941 	bl	800772c <_ZN12SimpleString15copyToNewBufferEPKcj>
 80074aa:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	4413      	add	r3, r2
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff fa3f 	bl	800693a <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fb49 	bl	8006b58 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 80074c6:	687b      	ldr	r3, [r7, #4]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 80074d0:	b590      	push	{r4, r7, lr}
 80074d2:	b08b      	sub	sp, #44	; 0x2c
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff ff18 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 80074e4:	4604      	mov	r4, r0
 80074e6:	68b8      	ldr	r0, [r7, #8]
 80074e8:	f7ff ff14 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 80074ec:	4603      	mov	r3, r0
 80074ee:	429c      	cmp	r4, r3
 80074f0:	bf8c      	ite	hi
 80074f2:	2301      	movhi	r3, #1
 80074f4:	2300      	movls	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	461a      	mov	r2, r3
 8007500:	68f9      	ldr	r1, [r7, #12]
 8007502:	68b8      	ldr	r0, [r7, #8]
 8007504:	f7ff ffe4 	bl	80074d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 8007508:	e02b      	b.n	8007562 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 8007512:	68b8      	ldr	r0, [r7, #8]
 8007514:	f7ff fefe 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8007518:	4604      	mov	r4, r0
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff fefa 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8007520:	4603      	mov	r3, r0
 8007522:	1ae2      	subs	r2, r4, r3
 8007524:	f107 0114 	add.w	r1, r7, #20
 8007528:	f107 0320 	add.w	r3, r7, #32
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff fb75 	bl	8006c1c <_ZN12SimpleStringC1EPKcj>
 8007532:	f107 0318 	add.w	r3, r7, #24
 8007536:	f107 0120 	add.w	r1, r7, #32
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff ff6c 	bl	800741a <_ZNK12SimpleStringplERKS_>
 8007542:	f107 0318 	add.w	r3, r7, #24
 8007546:	4619      	mov	r1, r3
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7ff fbb8 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 800754e:	f107 0318 	add.w	r3, r7, #24
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff feff 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007558:	f107 0320 	add.w	r3, r7, #32
 800755c:	4618      	mov	r0, r3
 800755e:	f7ff fefa 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8007562:	372c      	adds	r7, #44	; 0x2c
 8007564:	46bd      	mov	sp, r7
 8007566:	bd90      	pop	{r4, r7, pc}

08007568 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 8007576:	68b8      	ldr	r0, [r7, #8]
 8007578:	f7ff fecc 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800757c:	4603      	mov	r3, r0
 800757e:	3b01      	subs	r3, #1
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	429a      	cmp	r2, r3
 8007584:	bf8c      	ite	hi
 8007586:	2301      	movhi	r3, #1
 8007588:	2300      	movls	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <_ZNK12SimpleString9subStringEjj+0x32>
 8007590:	4919      	ldr	r1, [pc, #100]	; (80075f8 <_ZNK12SimpleString9subStringEjj+0x90>)
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7ff fb27 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007598:	e029      	b.n	80075ee <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800759a:	68b8      	ldr	r0, [r7, #8]
 800759c:	f7ff fb17 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 80075a0:	4602      	mov	r2, r0
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	441a      	add	r2, r3
 80075a6:	f107 0310 	add.w	r3, r7, #16
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fb1a 	bl	8006be6 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 80075b2:	f107 0310 	add.w	r3, r7, #16
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff feac 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 80075bc:	4602      	mov	r2, r0
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	4293      	cmp	r3, r2
 80075c2:	bf34      	ite	cc
 80075c4:	2301      	movcc	r3, #1
 80075c6:	2300      	movcs	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d004      	beq.n	80075d8 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	4413      	add	r3, r2
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]

    return newString;
 80075d8:	f107 0310 	add.w	r3, r7, #16
 80075dc:	4619      	mov	r1, r3
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fb55 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 80075e4:	f107 0310 	add.w	r3, r7, #16
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff feb4 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	080154f0 	.word	0x080154f0

080075fc <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f04f 33ff 	mov.w	r3, #4294967295
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	f7ff ffa9 	bl	8007568 <_ZNK12SimpleString9subStringEjj>
}
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff fad0 	bl	8006bce <_ZNK12SimpleString9getBufferEv>
 800762e:	4602      	mov	r2, r0
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	4413      	add	r3, r2
 8007634:	781b      	ldrb	r3, [r3, #0]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	461a      	mov	r2, r3
 800764e:	2100      	movs	r1, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f805 	bl	8007660 <_ZNK12SimpleString8findFromEjc>
 8007656:	4603      	mov	r3, r0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff fe50 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8007674:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	429a      	cmp	r2, r3
 8007680:	d213      	bcs.n	80076aa <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 8007682:	6979      	ldr	r1, [r7, #20]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff ffca 	bl	800761e <_ZNK12SimpleString2atEj>
 800768a:	4603      	mov	r3, r0
 800768c:	461a      	mov	r2, r3
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	4293      	cmp	r3, r2
 8007692:	bf0c      	ite	eq
 8007694:	2301      	moveq	r3, #1
 8007696:	2300      	movne	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <_ZNK12SimpleString8findFromEjc+0x42>
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	e005      	b.n	80076ae <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	3301      	adds	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e7e7      	b.n	800767a <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 80076aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4611      	mov	r1, r2
 80076c4:	461a      	mov	r2, r3
 80076c6:	460b      	mov	r3, r1
 80076c8:	71fb      	strb	r3, [r7, #7]
 80076ca:	4613      	mov	r3, r2
 80076cc:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	4619      	mov	r1, r3
 80076d2:	68b8      	ldr	r0, [r7, #8]
 80076d4:	f7ff ffb3 	bl	800763e <_ZNK12SimpleString4findEc>
 80076d8:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e0:	d104      	bne.n	80076ec <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 80076e2:	4911      	ldr	r1, [pc, #68]	; (8007728 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7ff fa7e 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80076ea:	e019      	b.n	8007720 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 80076ec:	79bb      	ldrb	r3, [r7, #6]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6979      	ldr	r1, [r7, #20]
 80076f2:	68b8      	ldr	r0, [r7, #8]
 80076f4:	f7ff ffb4 	bl	8007660 <_ZNK12SimpleString8findFromEjc>
 80076f8:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d106      	bne.n	8007710 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff ff77 	bl	80075fc <_ZNK12SimpleString9subStringEj>
 800770e:	e007      	b.n	8007720 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	f7ff ff24 	bl	8007568 <_ZNK12SimpleString9subStringEjj>
}
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	080154f0 	.word	0x080154f0

0800772c <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 8007736:	f240 2275 	movw	r2, #629	; 0x275
 800773a:	490a      	ldr	r1, [pc, #40]	; (8007764 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800773c:	6838      	ldr	r0, [r7, #0]
 800773e:	f7fe ffd7 	bl	80066f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007742:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff f8f6 	bl	800693a <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	3b01      	subs	r3, #1
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800775a:	68fb      	ldr	r3, [r7, #12]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	08015430 	.word	0x08015430

08007768 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	2b2f      	cmp	r3, #47	; 0x2f
 8007776:	d904      	bls.n	8007782 <_ZN12SimpleString7isDigitEc+0x1a>
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b39      	cmp	r3, #57	; 0x39
 800777c:	d801      	bhi.n	8007782 <_ZN12SimpleString7isDigitEc+0x1a>
 800777e:	2301      	movs	r3, #1
 8007780:	e000      	b.n	8007784 <_ZN12SimpleString7isDigitEc+0x1c>
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	2b20      	cmp	r3, #32
 800779e:	d005      	beq.n	80077ac <_ZN12SimpleString7isSpaceEc+0x1c>
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d904      	bls.n	80077b0 <_ZN12SimpleString7isSpaceEc+0x20>
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	2b0d      	cmp	r3, #13
 80077aa:	d801      	bhi.n	80077b0 <_ZN12SimpleString7isSpaceEc+0x20>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <_ZN12SimpleString7isSpaceEc+0x22>
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	4603      	mov	r3, r0
 80077c6:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d904      	bls.n	80077d8 <_ZN12SimpleString7isUpperEc+0x1a>
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	2b5a      	cmp	r3, #90	; 0x5a
 80077d2:	d801      	bhi.n	80077d8 <_ZN12SimpleString7isUpperEc+0x1a>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <_ZN12SimpleString7isUpperEc+0x1c>
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	4603      	mov	r3, r0
 80077ee:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b1f      	cmp	r3, #31
 80077f4:	d902      	bls.n	80077fc <_ZN12SimpleString9isControlEc+0x16>
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	2b7f      	cmp	r3, #127	; 0x7f
 80077fa:	d101      	bne.n	8007800 <_ZN12SimpleString9isControlEc+0x1a>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <_ZN12SimpleString9isControlEc+0x1c>
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	4603      	mov	r3, r0
 8007816:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	2b06      	cmp	r3, #6
 800781c:	d904      	bls.n	8007828 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	2b0d      	cmp	r3, #13
 8007822:	d801      	bhi.n	8007828 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <_Z10StringFromPKc>:
{
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
}

SimpleString StringFrom(const char *value)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff f9cf 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
}
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800785a:	2400      	movs	r4, #0
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00e      	beq.n	8007880 <_Z25PrintableStringFromOrNullPKc+0x30>
 8007862:	f107 0308 	add.w	r3, r7, #8
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff ffe4 	bl	8007836 <_Z10StringFromPKc>
 800786e:	2401      	movs	r4, #1
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f107 0208 	add.w	r2, r7, #8
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fc5d 	bl	8007138 <_ZNK12SimpleString9printableEv>
 800787e:	e004      	b.n	800788a <_Z25PrintableStringFromOrNullPKc+0x3a>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4908      	ldr	r1, [pc, #32]	; (80078a4 <_Z25PrintableStringFromOrNullPKc+0x54>)
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff ffd6 	bl	8007836 <_Z10StringFromPKc>
 800788a:	2c00      	cmp	r4, #0
 800788c:	d004      	beq.n	8007898 <_Z25PrintableStringFromOrNullPKc+0x48>
 800788e:	f107 0308 	add.w	r3, r7, #8
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff fd5f 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007898:	bf00      	nop
}
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd90      	pop	{r4, r7, pc}
 80078a2:	bf00      	nop
 80078a4:	08015510 	.word	0x08015510

080078a8 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	4904      	ldr	r1, [pc, #16]	; (80078c8 <_Z10StringFromi+0x20>)
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 f9d9 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	08015518 	.word	0x08015518

080078cc <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	4904      	ldr	r1, [pc, #16]	; (80078ec <_Z10StringFroml+0x20>)
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 f9c7 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	0801551c 	.word	0x0801551c

080078f0 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	4910      	ldr	r1, [pc, #64]	; (8007940 <_Z10StringFromPKv+0x50>)
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff f970 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007906:	f107 0310 	add.w	r3, r7, #16
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f000 f945 	bl	8007b9c <_Z13HexStringFromPKv>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f107 0210 	add.w	r2, r7, #16
 8007918:	f107 0108 	add.w	r1, r7, #8
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff fd7c 	bl	800741a <_ZNK12SimpleStringplERKS_>
 8007922:	f107 0310 	add.w	r3, r7, #16
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff fd15 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800792c:	f107 0308 	add.w	r3, r7, #8
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fd10 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007936:	bf00      	nop
}
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	08015520 	.word	0x08015520

08007944 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800794e:	f107 0308 	add.w	r3, r7, #8
 8007952:	4910      	ldr	r1, [pc, #64]	; (8007994 <_Z10StringFromPFvvE+0x50>)
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff f946 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800795a:	f107 0310 	add.w	r3, r7, #16
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 f92f 	bl	8007bc4 <_Z13HexStringFromPFvvE>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f107 0210 	add.w	r2, r7, #16
 800796c:	f107 0108 	add.w	r1, r7, #8
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff fd52 	bl	800741a <_ZNK12SimpleStringplERKS_>
 8007976:	f107 0310 	add.w	r3, r7, #16
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff fceb 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007980:	f107 0308 	add.w	r3, r7, #8
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fce6 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800798a:	bf00      	nop
}
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08015520 	.word	0x08015520

08007998 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	4904      	ldr	r1, [pc, #16]	; (80079b8 <_Z13HexStringFroml+0x20>)
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 f961 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	08015524 	.word	0x08015524

080079bc <_Z13HexStringFroma>:
{
    return StringFromFormat("%x", value);
}

SimpleString HexStringFrom(signed char value)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 80079c8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4912      	ldr	r1, [pc, #72]	; (8007a18 <_Z13HexStringFroma+0x5c>)
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f94d 	bl	8007c70 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 80079d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	da16      	bge.n	8007a0c <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff fc98 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 80079e4:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	1e9a      	subs	r2, r3, #2
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fe03 	bl	80075fc <_ZNK12SimpleString9subStringEj>
 80079f6:	f107 030c 	add.w	r3, r7, #12
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff f95e 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8007a02:	f107 030c 	add.w	r3, r7, #12
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fca5 	bl	8007356 <_ZN12SimpleStringD1Ev>
    }
    return result;
 8007a0c:	bf00      	nop
}
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	08015528 	.word	0x08015528

08007a1c <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	4904      	ldr	r1, [pc, #16]	; (8007a3c <_Z13HexStringFromm+0x20>)
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f91f 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08015524 	.word	0x08015524

08007a40 <_Z30BracketsFormattedHexStringFroml>:
{
    return BracketsFormattedHexString(HexStringFrom(value));
}

SimpleString BracketsFormattedHexStringFrom(long value)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 8007a4a:	f107 0308 	add.w	r3, r7, #8
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff ffa1 	bl	8007998 <_Z13HexStringFroml>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f107 0208 	add.w	r2, r7, #8
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f846 	bl	8007af0 <_Z26BracketsFormattedHexString12SimpleString>
 8007a64:	f107 0308 	add.w	r3, r7, #8
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fc74 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007a6e:	bf00      	nop
}
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff ffc7 	bl	8007a1c <_Z13HexStringFromm>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f107 0208 	add.w	r2, r7, #8
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f82a 	bl	8007af0 <_Z26BracketsFormattedHexString12SimpleString>
 8007a9c:	f107 0308 	add.w	r3, r7, #8
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fc58 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007aa6:	bf00      	nop
}
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 8007abc:	f107 0308 	add.w	r3, r7, #8
 8007ac0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff ff78 	bl	80079bc <_Z13HexStringFroma>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f107 0208 	add.w	r2, r7, #8
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 f80b 	bl	8007af0 <_Z26BracketsFormattedHexString12SimpleString>
 8007ada:	f107 0308 	add.w	r3, r7, #8
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff fc39 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007ae4:	bf00      	nop
}
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 8007afa:	f107 0310 	add.w	r3, r7, #16
 8007afe:	4917      	ldr	r1, [pc, #92]	; (8007b5c <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff f870 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	f107 0110 	add.w	r1, r7, #16
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff fc82 	bl	800741a <_ZNK12SimpleStringplERKS_>
 8007b16:	f107 0318 	add.w	r3, r7, #24
 8007b1a:	4911      	ldr	r1, [pc, #68]	; (8007b60 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff f862 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f107 0218 	add.w	r2, r7, #24
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fc74 	bl	800741a <_ZNK12SimpleStringplERKS_>
 8007b32:	f107 0318 	add.w	r3, r7, #24
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff fc0d 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007b3c:	f107 0308 	add.w	r3, r7, #8
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fc08 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007b46:	f107 0310 	add.w	r3, r7, #16
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fc03 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007b50:	bf00      	nop
}
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0801552c 	.word	0x0801552c
 8007b60:	08015530 	.word	0x08015530

08007b64 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8007b6c:	1d3b      	adds	r3, r7, #4
 8007b6e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8007b88:	1d3b      	adds	r3, r7, #4
 8007b8a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 8007ba6:	6838      	ldr	r0, [r7, #0]
 8007ba8:	f7ff ffdc 	bl	8007b64 <_ZL25convertPointerToLongValuePKv>
 8007bac:	4602      	mov	r2, r0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4903      	ldr	r1, [pc, #12]	; (8007bc0 <_Z13HexStringFromPKv+0x24>)
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f85c 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	08015524 	.word	0x08015524

08007bc4 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 8007bce:	6838      	ldr	r0, [r7, #0]
 8007bd0:	f7ff ffd6 	bl	8007b80 <_ZL33convertFunctionPointerToLongValuePFvvE>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4903      	ldr	r1, [pc, #12]	; (8007be8 <_Z13HexStringFromPFvvE+0x24>)
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f848 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	08015524 	.word	0x08015524

08007bec <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	ed87 0b00 	vstr	d0, [r7]
 8007bf8:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 8007bfa:	4b18      	ldr	r3, [pc, #96]	; (8007c5c <_Z10StringFromdi+0x70>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	ed97 0b00 	vldr	d0, [r7]
 8007c02:	4798      	blx	r3
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf14      	ite	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	2300      	moveq	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 8007c14:	4912      	ldr	r1, [pc, #72]	; (8007c60 <_Z10StringFromdi+0x74>)
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7fe ffe5 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007c1c:	e01a      	b.n	8007c54 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 8007c1e:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <_Z10StringFromdi+0x78>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	ed97 0b00 	vldr	d0, [r7]
 8007c26:	4798      	blx	r3
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 8007c38:	490b      	ldr	r1, [pc, #44]	; (8007c68 <_Z10StringFromdi+0x7c>)
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7fe ffd3 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007c40:	e008      	b.n	8007c54 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c48:	e9cd 2300 	strd	r2, r3, [sp]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	4907      	ldr	r1, [pc, #28]	; (8007c6c <_Z10StringFromdi+0x80>)
 8007c50:	f000 f80e 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	200000e0 	.word	0x200000e0
 8007c60:	08015564 	.word	0x08015564
 8007c64:	200000e4 	.word	0x200000e4
 8007c68:	08015578 	.word	0x08015578
 8007c6c:	08015588 	.word	0x08015588

08007c70 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 8007c70:	b40e      	push	{r1, r2, r3}
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b087      	sub	sp, #28
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 8007c7a:	4910      	ldr	r1, [pc, #64]	; (8007cbc <_Z16StringFromFormatPKcz+0x4c>)
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7fe ffb2 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 8007c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c86:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 8007c88:	f107 0310 	add.w	r3, r7, #16
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 f839 	bl	8007d08 <_Z17VStringFromFormatPKcSt9__va_list>
 8007c96:	f107 0310 	add.w	r3, r7, #16
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7ff f80e 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8007ca2:	f107 0310 	add.w	r3, r7, #16
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fb55 	bl	8007356 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 8007cac:	bf00      	nop
}
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cb8:	b003      	add	sp, #12
 8007cba:	4770      	bx	lr
 8007cbc:	080154f0 	.word	0x080154f0

08007cc0 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	4904      	ldr	r1, [pc, #16]	; (8007ce0 <_Z10StringFromj+0x20>)
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff ffcd 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	08015594 	.word	0x08015594

08007ce4 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	4904      	ldr	r1, [pc, #16]	; (8007d04 <_Z10StringFromm+0x20>)
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff ffbb 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	08015598 	.word	0x08015598

08007d08 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b0a7      	sub	sp, #156	; 0x9c
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 8007d18:	492e      	ldr	r1, [pc, #184]	; (8007dd4 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7fe ff63 	bl	8006be6 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 8007d20:	4b2d      	ldr	r3, [pc, #180]	; (8007dd8 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8007d22:	681c      	ldr	r4, [r3, #0]
 8007d24:	f107 0014 	add.w	r0, r7, #20
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	2164      	movs	r1, #100	; 0x64
 8007d2e:	47a0      	blx	r4
 8007d30:	4603      	mov	r3, r0
 8007d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 8007d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d3a:	2b63      	cmp	r3, #99	; 0x63
 8007d3c:	d813      	bhi.n	8007d66 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 8007d3e:	f107 0214 	add.w	r2, r7, #20
 8007d42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe ff4c 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007d4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7fe ffb2 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8007d5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff faf9 	bl	8007356 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 8007d64:	e031      	b.n	8007dca <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 8007d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 8007d70:	f240 32c3 	movw	r2, #963	; 0x3c3
 8007d74:	4919      	ldr	r1, [pc, #100]	; (8007ddc <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8007d76:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8007d7a:	f7fe fcb9 	bl	80066f0 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007d7e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 8007d82:	4b15      	ldr	r3, [pc, #84]	; (8007dd8 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8007d84:	681c      	ldr	r4, [r3, #0]
 8007d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d8e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007d92:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 8007d94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007d98:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe ff22 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8007da2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007da6:	4619      	mov	r1, r3
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f7fe ff88 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8007dae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff facf 	bl	8007356 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 8007db8:	f240 33c7 	movw	r3, #967	; 0x3c7
 8007dbc:	4a07      	ldr	r2, [pc, #28]	; (8007ddc <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8007dbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dc2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007dc6:	f7fe fca7 	bl	8006718 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 8007dca:	bf00      	nop
}
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	379c      	adds	r7, #156	; 0x9c
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd90      	pop	{r4, r7, pc}
 8007dd4:	080154f0 	.word	0x080154f0
 8007dd8:	200000ac 	.word	0x200000ac
 8007ddc:	08015430 	.word	0x08015430

08007de0 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08a      	sub	sp, #40	; 0x28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
    SimpleString result;
 8007dec:	491f      	ldr	r1, [pc, #124]	; (8007e6c <_Z16StringFromBinaryPKhj+0x8c>)
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7fe fef9 	bl	8006be6 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 8007df4:	2300      	movs	r3, #0
 8007df6:	627b      	str	r3, [r7, #36]	; 0x24
 8007df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d219      	bcs.n	8007e34 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	4413      	add	r3, r2
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f107 0314 	add.w	r3, r7, #20
 8007e0e:	4918      	ldr	r1, [pc, #96]	; (8007e70 <_Z16StringFromBinaryPKhj+0x90>)
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7ff ff2d 	bl	8007c70 <_Z16StringFromFormatPKcz>
 8007e16:	f107 0314 	add.w	r3, r7, #20
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff fb17 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8007e22:	f107 0314 	add.w	r3, r7, #20
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff fa95 	bl	8007356 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	3301      	adds	r3, #1
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
 8007e32:	e7e1      	b.n	8007df8 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff fa6d 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	f107 001c 	add.w	r0, r7, #28
 8007e42:	2200      	movs	r2, #0
 8007e44:	68f9      	ldr	r1, [r7, #12]
 8007e46:	f7ff fb8f 	bl	8007568 <_ZNK12SimpleString9subStringEjj>
 8007e4a:	f107 031c 	add.w	r3, r7, #28
 8007e4e:	4619      	mov	r1, r3
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7fe ff34 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8007e56:	f107 031c 	add.w	r3, r7, #28
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fa7b 	bl	8007356 <_ZN12SimpleStringD1Ev>

    return result;
 8007e60:	bf00      	nop
}
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	3728      	adds	r7, #40	; 0x28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	080154f0 	.word	0x080154f0
 8007e70:	0801559c 	.word	0x0801559c

08007e74 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d006      	beq.n	8007e94 <_Z22StringFromBinaryOrNullPKhj+0x20>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff ffa7 	bl	8007de0 <_Z16StringFromBinaryPKhj>
 8007e92:	e004      	b.n	8007e9e <_Z22StringFromBinaryOrNullPKhj+0x2a>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4904      	ldr	r1, [pc, #16]	; (8007ea8 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff fccc 	bl	8007836 <_Z10StringFromPKc>
}
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	08015510 	.word	0x08015510

08007eac <_Z20StringFromMaskedBitsmmj>:
{
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
}

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8007eba:	4925      	ldr	r1, [pc, #148]	; (8007f50 <_Z20StringFromMaskedBitsmmj+0xa4>)
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7fe fe92 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d802      	bhi.n	8007ece <_Z20StringFromMaskedBitsmmj+0x22>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	e000      	b.n	8007ed0 <_Z20StringFromMaskedBitsmmj+0x24>
 8007ece:	2320      	movs	r3, #32
 8007ed0:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61fb      	str	r3, [r7, #28]
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d22d      	bcs.n	8007f46 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <_Z20StringFromMaskedBitsmmj+0x56>
 8007efe:	4b15      	ldr	r3, [pc, #84]	; (8007f54 <_Z20StringFromMaskedBitsmmj+0xa8>)
 8007f00:	e000      	b.n	8007f04 <_Z20StringFromMaskedBitsmmj+0x58>
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <_Z20StringFromMaskedBitsmmj+0xac>)
 8007f04:	4619      	mov	r1, r3
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f7ff fab4 	bl	8007474 <_ZN12SimpleStringpLEPKc>
 8007f0c:	e003      	b.n	8007f16 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 8007f0e:	4913      	ldr	r1, [pc, #76]	; (8007f5c <_Z20StringFromMaskedBitsmmj+0xb0>)
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff faaf 	bl	8007474 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	2b07      	cmp	r3, #7
 8007f1e:	d108      	bne.n	8007f32 <_Z20StringFromMaskedBitsmmj+0x86>
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	69fa      	ldr	r2, [r7, #28]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d003      	beq.n	8007f32 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 8007f2a:	490d      	ldr	r1, [pc, #52]	; (8007f60 <_Z20StringFromMaskedBitsmmj+0xb4>)
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7ff faa1 	bl	8007474 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	005b      	lsls	r3, r3, #1
 8007f36:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	3301      	adds	r3, #1
 8007f42:	61fb      	str	r3, [r7, #28]
 8007f44:	e7cd      	b.n	8007ee2 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 8007f46:	bf00      	nop
}
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	080154f0 	.word	0x080154f0
 8007f54:	080155c8 	.word	0x080155c8
 8007f58:	080155cc 	.word	0x080155cc
 8007f5c:	080155d0 	.word	0x080155d0
 8007f60:	080155d4 	.word	0x080155d4

08007f64 <_ZN22SimpleStringCollectionC1Ev>:
    }

    return StringFromFormat("%u%s", number, suffix);
}

SimpleStringCollection::SimpleStringCollection()
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4907      	ldr	r1, [pc, #28]	; (8007f90 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fe37 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
    size_ = 0;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	60da      	str	r2, [r3, #12]
}
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	080154f0 	.word	0x080154f0

08007f94 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 8007f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01e      	beq.n	8007fe4 <_ZN22SimpleStringCollection8allocateEj+0x50>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3b04      	subs	r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	18d4      	adds	r4, r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	429c      	cmp	r4, r3
 8007fbc:	d004      	beq.n	8007fc8 <_ZN22SimpleStringCollection8allocateEj+0x34>
 8007fbe:	3c08      	subs	r4, #8
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f7ff f9c8 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8007fc6:	e7f6      	b.n	8007fb6 <_ZN22SimpleStringCollection8allocateEj+0x22>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f1a3 0208 	sub.w	r2, r3, #8
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3b04      	subs	r3, #4
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7fd ff5e 	bl	8005ea0 <_ZdaPvj>

    size_ = _size;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68dc      	ldr	r4, [r3, #12]
 8007fee:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8007ff2:	d202      	bcs.n	8007ffa <_ZN22SimpleStringCollection8allocateEj+0x66>
 8007ff4:	1c63      	adds	r3, r4, #1
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	e001      	b.n	8007ffe <_ZN22SimpleStringCollection8allocateEj+0x6a>
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffe:	f240 4227 	movw	r2, #1063	; 0x427
 8008002:	4910      	ldr	r1, [pc, #64]	; (8008044 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 8008004:	4618      	mov	r0, r3
 8008006:	f7fd ff29 	bl	8005e5c <_ZnajPKci>
 800800a:	4605      	mov	r5, r0
 800800c:	1d2b      	adds	r3, r5, #4
 800800e:	3b04      	subs	r3, #4
 8008010:	2208      	movs	r2, #8
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	1d2b      	adds	r3, r5, #4
 8008016:	601c      	str	r4, [r3, #0]
 8008018:	f105 0308 	add.w	r3, r5, #8
 800801c:	1e62      	subs	r2, r4, #1
 800801e:	4614      	mov	r4, r2
 8008020:	461e      	mov	r6, r3
 8008022:	2c00      	cmp	r4, #0
 8008024:	db06      	blt.n	8008034 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 8008026:	4908      	ldr	r1, [pc, #32]	; (8008048 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 8008028:	4630      	mov	r0, r6
 800802a:	f7fe fddc 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800802e:	3608      	adds	r6, #8
 8008030:	3c01      	subs	r4, #1
 8008032:	e7f6      	b.n	8008022 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 8008034:	f105 0208 	add.w	r2, r5, #8
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008044:	08015430 	.word	0x08015430
 8008048:	080154f0 	.word	0x080154f0

0800804c <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800804c:	b590      	push	{r4, r7, lr}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01e      	beq.n	800809a <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3b04      	subs	r3, #4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	18d4      	adds	r4, r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	429c      	cmp	r4, r3
 8008072:	d004      	beq.n	800807e <_ZN22SimpleStringCollectionD1Ev+0x32>
 8008074:	3c08      	subs	r4, #8
 8008076:	4620      	mov	r0, r4
 8008078:	f7ff f96d 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800807c:	e7f6      	b.n	800806c <_ZN22SimpleStringCollectionD1Ev+0x20>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f1a3 0208 	sub.w	r2, r3, #8
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3b04      	subs	r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3301      	adds	r3, #1
 8008090:	00db      	lsls	r3, r3, #3
 8008092:	4619      	mov	r1, r3
 8008094:	4610      	mov	r0, r2
 8008096:	f7fd ff03 	bl	8005ea0 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3304      	adds	r3, #4
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff f959 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd90      	pop	{r4, r7, pc}

080080ae <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
    return size_;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 80080c8:	b590      	push	{r4, r7, lr}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d315      	bcc.n	8008108 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1d1c      	adds	r4, r3, #4
 80080e0:	f107 0308 	add.w	r3, r7, #8
 80080e4:	490d      	ldr	r1, [pc, #52]	; (800811c <_ZN22SimpleStringCollectionixEj+0x54>)
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fd7d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80080ec:	f107 0308 	add.w	r3, r7, #8
 80080f0:	4619      	mov	r1, r3
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7fe fde3 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 80080f8:	f107 0308 	add.w	r3, r7, #8
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff f92a 	bl	8007356 <_ZN12SimpleStringD1Ev>
        return empty_;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3304      	adds	r3, #4
 8008106:	e004      	b.n	8008112 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	4413      	add	r3, r2
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	bd90      	pop	{r4, r7, pc}
 800811a:	bf00      	nop
 800811c:	080154f0 	.word	0x080154f0

08008120 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4618      	mov	r0, r3
 800812c:	f7fc f970 	bl	8004410 <_ZN17ConsoleTestOutputC1Ev>
 8008130:	4a08      	ldr	r2, [pc, #32]	; (8008154 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	611a      	str	r2, [r3, #16]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3314      	adds	r3, #20
 8008140:	4905      	ldr	r1, [pc, #20]	; (8008158 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fd4f 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
{
}
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	080173f8 	.word	0x080173f8
 8008158:	080155f0 	.word	0x080155f0

0800815c <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	4a08      	ldr	r2, [pc, #32]	; (8008188 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3314      	adds	r3, #20
 800816e:	4618      	mov	r0, r3
 8008170:	f7ff f8f1 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4618      	mov	r0, r3
 8008178:	f7fc f95c 	bl	8004434 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	080173f8 	.word	0x080173f8

0800818c <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
}
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff ffe1 	bl	800815c <_ZN18TeamCityTestOutputD1Ev>
 800819a:	211c      	movs	r1, #28
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fd fe4d 	bl	8005e3c <_ZdlPvj>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4618      	mov	r0, r3
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	332c      	adds	r3, #44	; 0x2c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	492b      	ldr	r1, [pc, #172]	; (8008270 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 80081c2:	4610      	mov	r0, r2
 80081c4:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 80081c6:	f107 0308 	add.w	r3, r7, #8
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f004 fdf7 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 80081d2:	f107 0308 	add.w	r3, r7, #8
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff f890 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80081dc:	4603      	mov	r3, r0
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f919 	bl	8008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80081e6:	f107 0308 	add.w	r3, r7, #8
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff f8b3 	bl	8007356 <_ZN12SimpleStringD1Ev>
    print("']\n");
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	332c      	adds	r3, #44	; 0x2c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	491e      	ldr	r1, [pc, #120]	; (8008274 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
    if (!test.willRun()) {
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3318      	adds	r3, #24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6838      	ldr	r0, [r7, #0]
 800820a:	4798      	blx	r3
 800820c:	4603      	mov	r3, r0
 800820e:	f083 0301 	eor.w	r3, r3, #1
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d024      	beq.n	8008262 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	332c      	adds	r3, #44	; 0x2c
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4915      	ldr	r1, [pc, #84]	; (8008278 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 8008224:	4610      	mov	r0, r2
 8008226:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 8008228:	f107 0310 	add.w	r3, r7, #16
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f004 fdc6 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 8008234:	f107 0310 	add.w	r3, r7, #16
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff f85f 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800823e:	4603      	mov	r3, r0
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f8e8 	bl	8008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008248:	f107 0310 	add.w	r3, r7, #16
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff f882 	bl	8007356 <_ZN12SimpleStringD1Ev>
        print("']\n");
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	332c      	adds	r3, #44	; 0x2c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4905      	ldr	r1, [pc, #20]	; (8008274 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800825e:	4610      	mov	r0, r2
 8008260:	4798      	blx	r3
    }
    currtest_ = &test;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	611a      	str	r2, [r3, #16]
}
 8008268:	bf00      	nop
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	080155f4 	.word	0x080155f4
 8008274:	08015614 	.word	0x08015614
 8008278:	08015618 	.word	0x08015618

0800827c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800827c:	b5b0      	push	{r4, r5, r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d03b      	beq.n	8008306 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	332c      	adds	r3, #44	; 0x2c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	491d      	ldr	r1, [pc, #116]	; (8008310 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800829a:	4610      	mov	r0, r2
 800829c:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	f107 0308 	add.w	r3, r7, #8
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f004 fd89 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 80082ae:	f107 0308 	add.w	r3, r7, #8
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff f822 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80082b8:	4603      	mov	r3, r0
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8ab 	bl	8008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80082c2:	f107 0308 	add.w	r3, r7, #8
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff f845 	bl	8007356 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	332c      	adds	r3, #44	; 0x2c
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	490f      	ldr	r1, [pc, #60]	; (8008314 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 80082dc:	687d      	ldr	r5, [r7, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3334      	adds	r3, #52	; 0x34
 80082e4:	681c      	ldr	r4, [r3, #0]
 80082e6:	6838      	ldr	r0, [r7, #0]
 80082e8:	f004 fa0a 	bl	800c700 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80082ec:	4603      	mov	r3, r0
 80082ee:	4619      	mov	r1, r3
 80082f0:	4628      	mov	r0, r5
 80082f2:	47a0      	blx	r4
    print("']\n");
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	332c      	adds	r3, #44	; 0x2c
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4906      	ldr	r1, [pc, #24]	; (8008318 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 8008300:	4610      	mov	r0, r2
 8008302:	4798      	blx	r3
 8008304:	e000      	b.n	8008308 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 8008306:	bf00      	nop
}
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bdb0      	pop	{r4, r5, r7, pc}
 800830e:	bf00      	nop
 8008310:	08015638 	.word	0x08015638
 8008314:	08015658 	.word	0x08015658
 8008318:	08015614 	.word	0x08015614

0800831c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f103 0414 	add.w	r4, r3, #20
 800832c:	f107 0308 	add.w	r3, r7, #8
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f004 fd53 	bl	800cdde <_ZNK10UtestShell8getGroupEv>
 8008338:	f107 0308 	add.w	r3, r7, #8
 800833c:	4619      	mov	r1, r3
 800833e:	4620      	mov	r0, r4
 8008340:	f7fe fcbd 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8008344:	f107 0308 	add.w	r3, r7, #8
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff f804 	bl	8007356 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	332c      	adds	r3, #44	; 0x2c
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	490c      	ldr	r1, [pc, #48]	; (800838c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800835a:	4610      	mov	r0, r2
 800835c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3314      	adds	r3, #20
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe ffca 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008368:	4603      	mov	r3, r0
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f853 	bl	8008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	332c      	adds	r3, #44	; 0x2c
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4904      	ldr	r1, [pc, #16]	; (8008390 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800837e:	4610      	mov	r0, r2
 8008380:	4798      	blx	r3
}
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	bd90      	pop	{r4, r7, pc}
 800838a:	bf00      	nop
 800838c:	08015668 	.word	0x08015668
 8008390:	08015614 	.word	0x08015614

08008394 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f103 0414 	add.w	r4, r3, #20
 80083a4:	f107 0308 	add.w	r3, r7, #8
 80083a8:	4918      	ldr	r1, [pc, #96]	; (800840c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fc1b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80083b0:	f107 0308 	add.w	r3, r7, #8
 80083b4:	4619      	mov	r1, r3
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7fe ffd9 	bl	800736e <_ZeqRK12SimpleStringS1_>
 80083bc:	4603      	mov	r3, r0
 80083be:	461c      	mov	r4, r3
 80083c0:	f107 0308 	add.w	r3, r7, #8
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe ffc6 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80083ca:	2c00      	cmp	r4, #0
 80083cc:	d11a      	bne.n	8008404 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	332c      	adds	r3, #44	; 0x2c
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	490d      	ldr	r1, [pc, #52]	; (8008410 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 80083da:	4610      	mov	r0, r2
 80083dc:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3314      	adds	r3, #20
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe ff8a 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80083e8:	4603      	mov	r3, r0
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f813 	bl	8008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	332c      	adds	r3, #44	; 0x2c
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4905      	ldr	r1, [pc, #20]	; (8008414 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 80083fe:	4610      	mov	r0, r2
 8008400:	4798      	blx	r3
 8008402:	e000      	b.n	8008406 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 8008404:	bf00      	nop
}
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	bd90      	pop	{r4, r7, pc}
 800840c:	080155f0 	.word	0x080155f0
 8008410:	0801568c 	.word	0x0801568c
 8008414:	08015614 	.word	0x08015614

08008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
    while (*s) {
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d03f      	beq.n	80084aa <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b27      	cmp	r3, #39	; 0x27
 8008430:	d00b      	beq.n	800844a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b7c      	cmp	r3, #124	; 0x7c
 8008438:	d007      	beq.n	800844a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b5b      	cmp	r3, #91	; 0x5b
 8008440:	d003      	beq.n	800844a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b5d      	cmp	r3, #93	; 0x5d
 8008448:	d107      	bne.n	800845a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800844a:	237c      	movs	r3, #124	; 0x7c
 800844c:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	73bb      	strb	r3, [r7, #14]
 8008458:	e01a      	b.n	8008490 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b0d      	cmp	r3, #13
 8008460:	d106      	bne.n	8008470 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 8008462:	237c      	movs	r3, #124	; 0x7c
 8008464:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8008466:	2372      	movs	r3, #114	; 0x72
 8008468:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	73bb      	strb	r3, [r7, #14]
 800846e:	e00f      	b.n	8008490 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b0a      	cmp	r3, #10
 8008476:	d106      	bne.n	8008486 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8008478:	237c      	movs	r3, #124	; 0x7c
 800847a:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800847c:	236e      	movs	r3, #110	; 0x6e
 800847e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	73bb      	strb	r3, [r7, #14]
 8008484:	e004      	b.n	8008490 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3328      	adds	r3, #40	; 0x28
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f107 010c 	add.w	r1, r7, #12
 800849e:	4610      	mov	r0, r2
 80084a0:	4798      	blx	r3
        s++;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	3301      	adds	r3, #1
 80084a6:	603b      	str	r3, [r7, #0]
    while (*s) {
 80084a8:	e7bb      	b.n	8008422 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 80084b4:	b5b0      	push	{r4, r5, r7, lr}
 80084b6:	b08a      	sub	sp, #40	; 0x28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	332c      	adds	r3, #44	; 0x2c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4968      	ldr	r1, [pc, #416]	; (800866c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 80084ca:	4610      	mov	r0, r2
 80084cc:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3310      	adds	r3, #16
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f107 0208 	add.w	r2, r7, #8
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	f107 0308 	add.w	r3, r7, #8
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe ff09 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80084ea:	4603      	mov	r3, r0
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff ff92 	bl	8008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80084f4:	f107 0308 	add.w	r3, r7, #8
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fe ff2c 	bl	8007356 <_ZN12SimpleStringD1Ev>
    print("' message='");
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	332c      	adds	r3, #44	; 0x2c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4959      	ldr	r1, [pc, #356]	; (8008670 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800850a:	4610      	mov	r0, r2
 800850c:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800850e:	6838      	ldr	r0, [r7, #0]
 8008510:	f000 fa15 	bl	800893e <_ZNK11TestFailure17isOutsideTestFileEv>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d105      	bne.n	8008526 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800851a:	6838      	ldr	r0, [r7, #0]
 800851c:	f000 fa21 	bl	8008962 <_ZNK11TestFailure18isInHelperFunctionEv>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d042      	beq.n	80085b6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	332c      	adds	r3, #44	; 0x2c
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	494e      	ldr	r1, [pc, #312]	; (8008674 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 8008540:	687d      	ldr	r5, [r7, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	332c      	adds	r3, #44	; 0x2c
 8008548:	681c      	ldr	r4, [r3, #0]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	331c      	adds	r3, #28
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f107 0210 	add.w	r2, r7, #16
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	f107 0310 	add.w	r3, r7, #16
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fecb 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008566:	4603      	mov	r3, r0
 8008568:	4619      	mov	r1, r3
 800856a:	4628      	mov	r0, r5
 800856c:	47a0      	blx	r4
 800856e:	f107 0310 	add.w	r3, r7, #16
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe feef 	bl	8007356 <_ZN12SimpleStringD1Ev>
        print(":");
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	332c      	adds	r3, #44	; 0x2c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	493d      	ldr	r1, [pc, #244]	; (8008678 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
        print(failure.getTestLineNumber());
 8008588:	687d      	ldr	r5, [r7, #4]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3334      	adds	r3, #52	; 0x34
 8008590:	681c      	ldr	r4, [r3, #0]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3320      	adds	r3, #32
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6838      	ldr	r0, [r7, #0]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	4619      	mov	r1, r3
 80085a2:	4628      	mov	r0, r5
 80085a4:	47a0      	blx	r4
        print("): ");
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	332c      	adds	r3, #44	; 0x2c
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4932      	ldr	r1, [pc, #200]	; (800867c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 80085b2:	4610      	mov	r0, r2
 80085b4:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3308      	adds	r3, #8
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f107 0218 	add.w	r2, r7, #24
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	f107 0318 	add.w	r3, r7, #24
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe fe95 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80085d2:	4603      	mov	r3, r0
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff ff1e 	bl	8008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80085dc:	f107 0318 	add.w	r3, r7, #24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe feb8 	bl	8007356 <_ZN12SimpleStringD1Ev>
    print(":");
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	332c      	adds	r3, #44	; 0x2c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4921      	ldr	r1, [pc, #132]	; (8008678 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 80085f2:	4610      	mov	r0, r2
 80085f4:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 80085f6:	687d      	ldr	r5, [r7, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3334      	adds	r3, #52	; 0x34
 80085fe:	681c      	ldr	r4, [r3, #0]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6838      	ldr	r0, [r7, #0]
 800860a:	4798      	blx	r3
 800860c:	4603      	mov	r3, r0
 800860e:	4619      	mov	r1, r3
 8008610:	4628      	mov	r0, r5
 8008612:	47a0      	blx	r4

    print("' details='");
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	332c      	adds	r3, #44	; 0x2c
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4918      	ldr	r1, [pc, #96]	; (8008680 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 8008620:	4610      	mov	r0, r2
 8008622:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3318      	adds	r3, #24
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f107 0220 	add.w	r2, r7, #32
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	4610      	mov	r0, r2
 8008634:	4798      	blx	r3
 8008636:	f107 0320 	add.w	r3, r7, #32
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fe5e 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008640:	4603      	mov	r3, r0
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fee7 	bl	8008418 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800864a:	f107 0320 	add.w	r3, r7, #32
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fe81 	bl	8007356 <_ZN12SimpleStringD1Ev>
    print("']\n");
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	332c      	adds	r3, #44	; 0x2c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4909      	ldr	r1, [pc, #36]	; (8008684 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
}
 8008664:	bf00      	nop
 8008666:	3728      	adds	r7, #40	; 0x28
 8008668:	46bd      	mov	sp, r7
 800866a:	bdb0      	pop	{r4, r5, r7, pc}
 800866c:	080156b0 	.word	0x080156b0
 8008670:	080156d0 	.word	0x080156d0
 8008674:	080156dc 	.word	0x080156dc
 8008678:	080156ec 	.word	0x080156ec
 800867c:	080156f0 	.word	0x080156f0
 8008680:	080156f4 	.word	0x080156f4
 8008684:	08015614 	.word	0x08015614

08008688 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 8008694:	4a1a      	ldr	r2, [pc, #104]	; (8008700 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3314      	adds	r3, #20
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	3204      	adds	r2, #4
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	330c      	adds	r3, #12
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f004 fb84 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3314      	adds	r3, #20
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f004 fc3e 	bl	800cf40 <_ZNK10UtestShell7getFileEv>
 80086c4:	68b8      	ldr	r0, [r7, #8]
 80086c6:	f004 fc4a 	bl	800cf5e <_ZNK10UtestShell13getLineNumberEv>
 80086ca:	4602      	mov	r2, r0
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	61da      	str	r2, [r3, #28]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3320      	adds	r3, #32
 80086d4:	68b9      	ldr	r1, [r7, #8]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f004 fc32 	bl	800cf40 <_ZNK10UtestShell7getFileEv>
 80086dc:	68b8      	ldr	r0, [r7, #8]
 80086de:	f004 fc3e 	bl	800cf5e <_ZNK10UtestShell13getLineNumberEv>
 80086e2:	4602      	mov	r2, r0
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	629a      	str	r2, [r3, #40]	; 0x28
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	332c      	adds	r3, #44	; 0x2c
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe facd 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
{
}
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	080176c4 	.word	0x080176c4

08008704 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 8008712:	4a19      	ldr	r2, [pc, #100]	; (8008778 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3314      	adds	r3, #20
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	3204      	adds	r2, #4
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	4610      	mov	r0, r2
 8008728:	4798      	blx	r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	330c      	adds	r3, #12
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	4618      	mov	r0, r3
 8008732:	f004 fb45 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3314      	adds	r3, #20
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fa52 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	61da      	str	r2, [r3, #28]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3320      	adds	r3, #32
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	4618      	mov	r0, r3
 8008750:	f004 fbf6 	bl	800cf40 <_ZNK10UtestShell7getFileEv>
 8008754:	68b8      	ldr	r0, [r7, #8]
 8008756:	f004 fc02 	bl	800cf5e <_ZNK10UtestShell13getLineNumberEv>
 800875a:	4602      	mov	r2, r0
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	629a      	str	r2, [r3, #40]	; 0x28
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	332c      	adds	r3, #44	; 0x2c
 8008764:	4905      	ldr	r1, [pc, #20]	; (800877c <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fa3d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
{
}
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	080176c4 	.word	0x080176c4
 800877c:	08015700 	.word	0x08015700

08008780 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800878a:	4a1e      	ldr	r2, [pc, #120]	; (8008804 <_ZN11TestFailureC1ERKS_+0x84>)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	3304      	adds	r3, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fe fa77 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f103 020c 	add.w	r2, r3, #12
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	4619      	mov	r1, r3
 80087ac:	4610      	mov	r0, r2
 80087ae:	f7fe fa6e 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f103 0214 	add.w	r2, r3, #20
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	3314      	adds	r3, #20
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	f7fe fa65 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	61da      	str	r2, [r3, #28]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f103 0220 	add.w	r2, r3, #32
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	3320      	adds	r3, #32
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7fe fa58 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	629a      	str	r2, [r3, #40]	; 0x28
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	332c      	adds	r3, #44	; 0x2c
 80087f0:	4619      	mov	r1, r3
 80087f2:	4610      	mov	r0, r2
 80087f4:	f7fe fa4b 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
{
}
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	080176c4 	.word	0x080176c4

08008808 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	4a10      	ldr	r2, [pc, #64]	; (8008854 <_ZN11TestFailureD1Ev+0x4c>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	332c      	adds	r3, #44	; 0x2c
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe fd9b 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3320      	adds	r3, #32
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fd96 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3314      	adds	r3, #20
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fd91 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	330c      	adds	r3, #12
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe fd8c 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3304      	adds	r3, #4
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fd87 	bl	8007356 <_ZN12SimpleStringD1Ev>
{
}
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	080176c4 	.word	0x080176c4

08008858 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
}
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff ffd1 	bl	8008808 <_ZN11TestFailureD1Ev>
 8008866:	2134      	movs	r1, #52	; 0x34
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7fd fae7 	bl	8005e3c <_ZdlPvj>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
    return fileName_;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	3314      	adds	r3, #20
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7fe fa00 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
}
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
    return testFileName_;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	3320      	adds	r3, #32
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fe f9f1 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
}
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
    return testName_;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7fe f9e2 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
}
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	330c      	adds	r3, #12
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fe f9d3 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
}
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	69db      	ldr	r3, [r3, #28]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8008914:	4618      	mov	r0, r3
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
    return message_;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	332c      	adds	r3, #44	; 0x2c
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7fe f9ac 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
}
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f103 0220 	add.w	r2, r3, #32
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3314      	adds	r3, #20
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f7fe fd50 	bl	80073f8 <_ZneRK12SimpleStringS1_>
 8008958:	4603      	mov	r3, r0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69da      	ldr	r2, [r3, #28]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	429a      	cmp	r2, r3
 8008974:	bf34      	ite	cc
 8008976:	2301      	movcc	r3, #1
 8008978:	2300      	movcs	r3, #0
 800897a:	b2db      	uxtb	r3, r3
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 8008988:	b590      	push	{r4, r7, lr}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7fe fcb0 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800899c:	4604      	mov	r4, r0
 800899e:	6838      	ldr	r0, [r7, #0]
 80089a0:	f7fe fcac 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 80089a4:	4603      	mov	r3, r0
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	4622      	mov	r2, r4
 80089aa:	4903      	ldr	r1, [pc, #12]	; (80089b8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 80089ac:	f7ff f960 	bl	8007c70 <_Z16StringFromFormatPKcz>
}
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd90      	pop	{r4, r7, pc}
 80089b8:	0801570c 	.word	0x0801570c

080089bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b097      	sub	sp, #92	; 0x5c
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 80089ca:	494c      	ldr	r1, [pc, #304]	; (8008afc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7fe f90a 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 80089d2:	2314      	movs	r3, #20
 80089d4:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 80089d6:	230a      	movs	r3, #10
 80089d8:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 80089da:	f107 0320 	add.w	r3, r7, #32
 80089de:	220a      	movs	r2, #10
 80089e0:	4947      	ldr	r1, [pc, #284]	; (8008b00 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe f91a 	bl	8006c1c <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80089e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089ec:	f107 0120 	add.w	r1, r7, #32
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fd11 	bl	800741a <_ZNK12SimpleStringplERKS_>
 80089f8:	f107 0318 	add.w	r3, r7, #24
 80089fc:	f107 0220 	add.w	r2, r7, #32
 8008a00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fe fd08 	bl	800741a <_ZNK12SimpleStringplERKS_>
 8008a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe fca1 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8008a14:	f107 0310 	add.w	r3, r7, #16
 8008a18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a1a:	493a      	ldr	r1, [pc, #232]	; (8008b04 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff f927 	bl	8007c70 <_Z16StringFromFormatPKcz>

    result += "\n";
 8008a22:	4939      	ldr	r1, [pc, #228]	; (8008b08 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f7fe fd25 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 8008a2a:	f107 0310 	add.w	r3, r7, #16
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fc64 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008a34:	4604      	mov	r4, r0
 8008a36:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8008a3a:	f107 0118 	add.w	r1, r7, #24
 8008a3e:	2314      	movs	r3, #20
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	f7fe fd91 	bl	8007568 <_ZNK12SimpleString9subStringEjj>
 8008a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fc56 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008a56:	4622      	mov	r2, r4
 8008a58:	492c      	ldr	r1, [pc, #176]	; (8008b0c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 8008a5a:	f7ff f909 	bl	8007c70 <_Z16StringFromFormatPKcz>
 8008a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a62:	4619      	mov	r1, r3
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7fe fcf3 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8008a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fc71 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8008a74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fe fc6c 	bl	8007356 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 8008a7e:	f107 0310 	add.w	r3, r7, #16
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fc46 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f103 020a 	add.w	r2, r3, #10
 8008a8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a92:	491b      	ldr	r1, [pc, #108]	; (8008b00 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe f8c1 	bl	8006c1c <_ZN12SimpleStringC1EPKcj>
 8008a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fc2c 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008aaa:	4919      	ldr	r1, [pc, #100]	; (8008b10 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff f8df 	bl	8007c70 <_Z16StringFromFormatPKcz>
 8008ab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7fe fcc9 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8008abe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fc47 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8008ac8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe fc42 	bl	8007356 <_ZN12SimpleStringD1Ev>
    return result;
 8008ad2:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8008ad4:	f107 0310 	add.w	r3, r7, #16
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fc3c 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8008ade:	f107 0318 	add.w	r3, r7, #24
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fc37 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8008ae8:	f107 0320 	add.w	r3, r7, #32
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fc32 	bl	8007356 <_ZN12SimpleStringD1Ev>
    return result;
 8008af2:	bf00      	nop
}
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	375c      	adds	r7, #92	; 0x5c
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd90      	pop	{r4, r7, pc}
 8008afc:	0801572c 	.word	0x0801572c
 8008b00:	08015730 	.word	0x08015730
 8008b04:	08015734 	.word	0x08015734
 8008b08:	0801575c 	.word	0x0801575c
 8008b0c:	08015760 	.word	0x08015760
 8008b10:	08015768 	.word	0x08015768

08008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 8008b14:	b590      	push	{r4, r7, lr}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 8008b20:	491a      	ldr	r1, [pc, #104]	; (8008b8c <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f7fe f85f 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fe fc03 	bl	8007334 <_ZNK12SimpleString7isEmptyEv>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f083 0301 	eor.w	r3, r3, #1
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d022      	beq.n	8008b80 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 8008b3a:	f107 0310 	add.w	r3, r7, #16
 8008b3e:	4914      	ldr	r1, [pc, #80]	; (8008b90 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe f850 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8008b46:	f107 0310 	add.w	r3, r7, #16
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fe f90e 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f083 0301 	eor.w	r3, r3, #1
 8008b58:	b2dc      	uxtb	r4, r3
 8008b5a:	f107 0310 	add.w	r3, r7, #16
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fbf9 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8008b64:	2c00      	cmp	r4, #0
 8008b66:	d003      	beq.n	8008b70 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 8008b68:	490a      	ldr	r1, [pc, #40]	; (8008b94 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7fe fc82 	bl	8007474 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7fe fc6c 	bl	8007450 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 8008b78:	4907      	ldr	r1, [pc, #28]	; (8008b98 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7fe fc7a 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 8008b80:	bf00      	nop
}
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd90      	pop	{r4, r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	0801572c 	.word	0x0801572c
 8008b90:	08015770 	.word	0x08015770
 8008b94:	0801577c 	.word	0x0801577c
 8008b98:	08015788 	.word	0x08015788

08008b9c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8008b9c:	b590      	push	{r4, r7, lr}
 8008b9e:	b089      	sub	sp, #36	; 0x24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	68b9      	ldr	r1, [r7, #8]
 8008bb2:	f7ff fda7 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008bb6:	4a19      	ldr	r2, [pc, #100]	; (8008c1c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	f107 0310 	add.w	r3, r7, #16
 8008bc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff ffa2 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7fe f871 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8008bdc:	f107 0310 	add.w	r3, r7, #16
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fe fbb8 	bl	8007356 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008bec:	68f9      	ldr	r1, [r7, #12]
 8008bee:	f107 0018 	add.w	r0, r7, #24
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf6:	f7ff fec7 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008bfa:	f107 0318 	add.w	r3, r7, #24
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4620      	mov	r0, r4
 8008c02:	f7fe fc25 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8008c06:	f107 0318 	add.w	r3, r7, #24
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fba3 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4618      	mov	r0, r3
 8008c14:	3724      	adds	r7, #36	; 0x24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd90      	pop	{r4, r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	08017698 	.word	0x08017698

08008c20 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 8008c20:	b5b0      	push	{r4, r5, r7, lr}
 8008c22:	b094      	sub	sp, #80	; 0x50
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6278      	str	r0, [r7, #36]	; 0x24
 8008c28:	6239      	str	r1, [r7, #32]
 8008c2a:	61fa      	str	r2, [r7, #28]
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	ed87 0b04 	vstr	d0, [r7, #16]
 8008c32:	ed87 1b02 	vstr	d1, [r7, #8]
 8008c36:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 8008c3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	6a39      	ldr	r1, [r7, #32]
 8008c42:	f7ff fd5f 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008c46:	4a4a      	ldr	r2, [pc, #296]	; (8008d70 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff ff5a 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c64:	4619      	mov	r1, r3
 8008c66:	4620      	mov	r0, r4
 8008c68:	f7fe f829 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8008c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fb70 	bl	8007356 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008c7c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8008c7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c82:	2107      	movs	r1, #7
 8008c84:	ed97 0b04 	vldr	d0, [r7, #16]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe ffaf 	bl	8007bec <_Z10StringFromdi>
 8008c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c92:	2107      	movs	r1, #7
 8008c94:	ed97 0b02 	vldr	d0, [r7, #8]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe ffa7 	bl	8007bec <_Z10StringFromdi>
 8008c9e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008ca2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ca6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008caa:	4629      	mov	r1, r5
 8008cac:	f7ff fe6c 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f7fe fbca 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8008cbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe fb48 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8008cc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fb43 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8008cd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe fb3e 	bl	8007356 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	332c      	adds	r3, #44	; 0x2c
 8008cde:	4925      	ldr	r1, [pc, #148]	; (8008d74 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fbc7 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008cec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008cf0:	2107      	movs	r1, #7
 8008cf2:	ed97 0b00 	vldr	d0, [r7]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe ff78 	bl	8007bec <_Z10StringFromdi>
 8008cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d00:	4619      	mov	r1, r3
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7fe fba4 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8008d08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fb22 	bl	8007356 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	332c      	adds	r3, #44	; 0x2c
 8008d16:	4918      	ldr	r1, [pc, #96]	; (8008d78 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7fe fbab 	bl	8007474 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 8008d1e:	4b17      	ldr	r3, [pc, #92]	; (8008d7c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	ed97 0b04 	vldr	d0, [r7, #16]
 8008d26:	4798      	blx	r3
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10f      	bne.n	8008d4e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8008d2e:	4b13      	ldr	r3, [pc, #76]	; (8008d7c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	ed97 0b02 	vldr	d0, [r7, #8]
 8008d36:	4798      	blx	r3
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d107      	bne.n	8008d4e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	ed97 0b00 	vldr	d0, [r7]
 8008d46:	4798      	blx	r3
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e000      	b.n	8008d54 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8008d52:	2300      	movs	r3, #0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d005      	beq.n	8008d64 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	332c      	adds	r3, #44	; 0x2c
 8008d5c:	4908      	ldr	r1, [pc, #32]	; (8008d80 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fb88 	bl	8007474 <_ZN12SimpleStringpLEPKc>
}
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	4618      	mov	r0, r3
 8008d68:	3750      	adds	r7, #80	; 0x50
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	0801766c 	.word	0x0801766c
 8008d74:	0801578c 	.word	0x0801578c
 8008d78:	080157a4 	.word	0x080157a4
 8008d7c:	200000e0 	.word	0x200000e0
 8008d80:	080157a8 	.word	0x080157a8

08008d84 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8008d84:	b590      	push	{r4, r7, lr}
 8008d86:	b093      	sub	sp, #76	; 0x4c
 8008d88:	af02      	add	r7, sp, #8
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	f7ff fcb3 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008d9e:	4a4f      	ldr	r2, [pc, #316]	; (8008edc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008daa:	68f9      	ldr	r1, [r7, #12]
 8008dac:	f107 0320 	add.w	r3, r7, #32
 8008db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff feae 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008db8:	f107 0320 	add.w	r3, r7, #32
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f7fd ff7d 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8008dc4:	f107 0320 	add.w	r3, r7, #32
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe fac4 	bl	8007356 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8008dce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008dd0:	f7fe fa94 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	f107 0318 	add.w	r3, r7, #24
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe fd37 	bl	8007850 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8008de2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008de4:	f7fe fa8a 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008de8:	4602      	mov	r2, r0
 8008dea:	f107 0310 	add.w	r3, r7, #16
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fd2d 	bl	8007850 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008dfc:	68f9      	ldr	r1, [r7, #12]
 8008dfe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008e02:	f107 0310 	add.w	r3, r7, #16
 8008e06:	f107 0218 	add.w	r2, r7, #24
 8008e0a:	f7ff fdbd 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e12:	4619      	mov	r1, r3
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7fe fb1b 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8008e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fa99 	bl	8007356 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008e2c:	f7fe fbf7 	bl	800761e <_ZNK12SimpleString2atEj>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461c      	mov	r4, r3
 8008e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e38:	f7fe fbf1 	bl	800761e <_ZNK12SimpleString2atEj>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	429c      	cmp	r4, r3
 8008e40:	bf0c      	ite	eq
 8008e42:	2301      	moveq	r3, #1
 8008e44:	2300      	movne	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4e:	3301      	adds	r3, #1
 8008e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e52:	e7e9      	b.n	8008e28 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8008e54:	2300      	movs	r3, #0
 8008e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e58:	f107 0310 	add.w	r3, r7, #16
 8008e5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fbdd 	bl	800761e <_ZNK12SimpleString2atEj>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461c      	mov	r4, r3
 8008e68:	f107 0318 	add.w	r3, r7, #24
 8008e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fbd5 	bl	800761e <_ZNK12SimpleString2atEj>
 8008e74:	4603      	mov	r3, r0
 8008e76:	429c      	cmp	r4, r3
 8008e78:	bf0c      	ite	eq
 8008e7a:	2301      	moveq	r3, #1
 8008e7c:	2300      	movne	r3, #0
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	3301      	adds	r3, #1
 8008e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e8a:	e7e5      	b.n	8008e58 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008e98:	f107 0210 	add.w	r2, r7, #16
 8008e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	f7ff fd8b 	bl	80089bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8008ea6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4620      	mov	r0, r4
 8008eae:	f7fe facf 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8008eb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fa4d 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8008ebc:	f107 0310 	add.w	r3, r7, #16
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fa48 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8008ec6:	f107 0318 	add.w	r3, r7, #24
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fa43 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3744      	adds	r7, #68	; 0x44
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd90      	pop	{r4, r7, pc}
 8008eda:	bf00      	nop
 8008edc:	08017640 	.word	0x08017640

08008ee0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	f7ff fc05 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008efa:	4a1a      	ldr	r2, [pc, #104]	; (8008f64 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008f06:	68f9      	ldr	r1, [r7, #12]
 8008f08:	f107 0310 	add.w	r3, r7, #16
 8008f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fe00 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008f14:	f107 0310 	add.w	r3, r7, #16
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7fd fecf 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8008f20:	f107 0310 	add.w	r3, r7, #16
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7fe fa16 	bl	8007356 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	332c      	adds	r3, #44	; 0x2c
 8008f2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fa8d 	bl	8007450 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	332c      	adds	r3, #44	; 0x2c
 8008f3a:	490b      	ldr	r1, [pc, #44]	; (8008f68 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fe fa99 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	332c      	adds	r3, #44	; 0x2c
 8008f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fa81 	bl	8007450 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	332c      	adds	r3, #44	; 0x2c
 8008f52:	4906      	ldr	r1, [pc, #24]	; (8008f6c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe fa8d 	bl	8007474 <_ZN12SimpleStringpLEPKc>
}
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd90      	pop	{r4, r7, pc}
 8008f64:	08017614 	.word	0x08017614
 8008f68:	080157cc 	.word	0x080157cc
 8008f6c:	080157d0 	.word	0x080157d0

08008f70 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8008f70:	b5b0      	push	{r4, r5, r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	f7ff fbbd 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008f8a:	4a1c      	ldr	r2, [pc, #112]	; (8008ffc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	f107 0310 	add.w	r3, r7, #16
 8008f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff fdb8 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008fa4:	f107 0310 	add.w	r3, r7, #16
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7fd fe87 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8008fb0:	f107 0310 	add.w	r3, r7, #16
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe f9ce 	bl	8007356 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008fc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008fc2:	f7fe f99b 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fca:	f7fe f997 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	f107 0018 	add.w	r0, r7, #24
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	490a      	ldr	r1, [pc, #40]	; (8009000 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8008fd8:	f7fe fe4a 	bl	8007c70 <_Z16StringFromFormatPKcz>
 8008fdc:	f107 0318 	add.w	r3, r7, #24
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f7fe fa34 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8008fe8:	f107 0318 	add.w	r3, r7, #24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe f9b2 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3720      	adds	r7, #32
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8008ffc:	080175e8 	.word	0x080175e8
 8009000:	080157dc 	.word	0x080157dc

08009004 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	68b9      	ldr	r1, [r7, #8]
 800901a:	f7ff fb73 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800901e:	4a1a      	ldr	r2, [pc, #104]	; (8009088 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fd6e 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009038:	f107 0310 	add.w	r3, r7, #16
 800903c:	4619      	mov	r1, r3
 800903e:	4620      	mov	r0, r4
 8009040:	f7fd fe3d 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8009044:	f107 0310 	add.w	r3, r7, #16
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe f984 	bl	8007356 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	332c      	adds	r3, #44	; 0x2c
 8009052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe f9fb 	bl	8007450 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	332c      	adds	r3, #44	; 0x2c
 800905e:	490b      	ldr	r1, [pc, #44]	; (800908c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe fa07 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	332c      	adds	r3, #44	; 0x2c
 800906a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe f9ef 	bl	8007450 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	332c      	adds	r3, #44	; 0x2c
 8009076:	4906      	ldr	r1, [pc, #24]	; (8009090 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009078:	4618      	mov	r0, r3
 800907a:	f7fe f9fb 	bl	8007474 <_ZN12SimpleStringpLEPKc>
}
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4618      	mov	r0, r3
 8009082:	371c      	adds	r7, #28
 8009084:	46bd      	mov	sp, r7
 8009086:	bd90      	pop	{r4, r7, pc}
 8009088:	080175bc 	.word	0x080175bc
 800908c:	080157cc 	.word	0x080157cc
 8009090:	080157d0 	.word	0x080157d0

08009094 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	f7ff fb2b 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80090ae:	4a07      	ldr	r2, [pc, #28]	; (80090cc <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	332c      	adds	r3, #44	; 0x2c
 80090b8:	69b9      	ldr	r1, [r7, #24]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fd fdff 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
}
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	080173cc 	.word	0x080173cc

080090d0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 80090d0:	b590      	push	{r4, r7, lr}
 80090d2:	b09d      	sub	sp, #116	; 0x74
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	68b9      	ldr	r1, [r7, #8]
 80090e6:	f7ff fb0d 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80090ea:	4a5d      	ldr	r2, [pc, #372]	; (8009260 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff fd07 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800910a:	4619      	mov	r1, r3
 800910c:	4620      	mov	r0, r4
 800910e:	f7fd fdd6 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8009112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe f91d 	bl	8007356 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800911c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009120:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fbd1 	bl	80078cc <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800912a:	f107 0320 	add.w	r3, r7, #32
 800912e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fbca 	bl	80078cc <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8009138:	f107 0120 	add.w	r1, r7, #32
 800913c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009140:	2220      	movs	r2, #32
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe f9c4 	bl	80074d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009148:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800914c:	4945      	ldr	r1, [pc, #276]	; (8009264 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800914e:	4618      	mov	r0, r3
 8009150:	f7fd fd49 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8009154:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009158:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800915c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe f95a 	bl	800741a <_ZNK12SimpleStringplERKS_>
 8009166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800916a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fc66 	bl	8007a40 <_Z30BracketsFormattedHexStringFroml>
 8009174:	f107 0318 	add.w	r3, r7, #24
 8009178:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800917c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009180:	4618      	mov	r0, r3
 8009182:	f7fe f94a 	bl	800741a <_ZNK12SimpleStringplERKS_>
 8009186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe f8e3 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8009190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe f8de 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800919a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe f8d9 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80091a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80091a8:	492e      	ldr	r1, [pc, #184]	; (8009264 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd fd1b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80091b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80091b8:	f107 0120 	add.w	r1, r7, #32
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe f92c 	bl	800741a <_ZNK12SimpleStringplERKS_>
 80091c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80091c6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe fc38 	bl	8007a40 <_Z30BracketsFormattedHexStringFroml>
 80091d0:	f107 0310 	add.w	r3, r7, #16
 80091d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80091d8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe f91c 	bl	800741a <_ZNK12SimpleStringplERKS_>
 80091e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe f8b5 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80091ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe f8b0 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80091f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe f8ab 	bl	8007356 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009206:	68f9      	ldr	r1, [r7, #12]
 8009208:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800920c:	f107 0318 	add.w	r3, r7, #24
 8009210:	f107 0210 	add.w	r2, r7, #16
 8009214:	f7ff fbb8 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009218:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800921c:	4619      	mov	r1, r3
 800921e:	4620      	mov	r0, r4
 8009220:	f7fe f916 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8009224:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe f894 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800922e:	f107 0310 	add.w	r3, r7, #16
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe f88f 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009238:	f107 0318 	add.w	r3, r7, #24
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe f88a 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8009242:	f107 0320 	add.w	r3, r7, #32
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f885 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800924c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009250:	4618      	mov	r0, r3
 8009252:	f7fe f880 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	4618      	mov	r0, r3
 800925a:	3774      	adds	r7, #116	; 0x74
 800925c:	46bd      	mov	sp, r7
 800925e:	bd90      	pop	{r4, r7, pc}
 8009260:	08017590 	.word	0x08017590
 8009264:	08015730 	.word	0x08015730

08009268 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b09d      	sub	sp, #116	; 0x74
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	f7ff fa41 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009282:	4a5d      	ldr	r2, [pc, #372]	; (80093f8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009294:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fc3b 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800929e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092a2:	4619      	mov	r1, r3
 80092a4:	4620      	mov	r0, r4
 80092a6:	f7fd fd0a 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 80092aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fe f851 	bl	8007356 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 80092b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092b8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fe fd11 	bl	8007ce4 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 80092c2:	f107 0320 	add.w	r3, r7, #32
 80092c6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe fd0a 	bl	8007ce4 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 80092d0:	f107 0120 	add.w	r1, r7, #32
 80092d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092d8:	2220      	movs	r2, #32
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fe f8f8 	bl	80074d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80092e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80092e4:	4945      	ldr	r1, [pc, #276]	; (80093fc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fd fc7d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80092ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80092f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80092f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe f88e 	bl	800741a <_ZNK12SimpleStringplERKS_>
 80092fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009302:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fbb6 	bl	8007a78 <_Z30BracketsFormattedHexStringFromm>
 800930c:	f107 0318 	add.w	r3, r7, #24
 8009310:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009314:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe f87e 	bl	800741a <_ZNK12SimpleStringplERKS_>
 800931e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe f817 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8009328:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe f812 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8009332:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe f80d 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800933c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009340:	492e      	ldr	r1, [pc, #184]	; (80093fc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8009342:	4618      	mov	r0, r3
 8009344:	f7fd fc4f 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8009348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800934c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009350:	f107 0120 	add.w	r1, r7, #32
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe f860 	bl	800741a <_ZNK12SimpleStringplERKS_>
 800935a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800935e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fb88 	bl	8007a78 <_Z30BracketsFormattedHexStringFromm>
 8009368:	f107 0310 	add.w	r3, r7, #16
 800936c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009370:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe f850 	bl	800741a <_ZNK12SimpleStringplERKS_>
 800937a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800937e:	4618      	mov	r0, r3
 8009380:	f7fd ffe9 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8009384:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009388:	4618      	mov	r0, r3
 800938a:	f7fd ffe4 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800938e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009392:	4618      	mov	r0, r3
 8009394:	f7fd ffdf 	bl	8007356 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800939e:	68f9      	ldr	r1, [r7, #12]
 80093a0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	f107 0210 	add.w	r2, r7, #16
 80093ac:	f7ff faec 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80093b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80093b4:	4619      	mov	r1, r3
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7fe f84a 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 80093bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fd ffc8 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80093c6:	f107 0310 	add.w	r3, r7, #16
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fd ffc3 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80093d0:	f107 0318 	add.w	r3, r7, #24
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fd ffbe 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 80093da:	f107 0320 	add.w	r3, r7, #32
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fd ffb9 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 80093e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fd ffb4 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4618      	mov	r0, r3
 80093f2:	3774      	adds	r7, #116	; 0x74
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd90      	pop	{r4, r7, pc}
 80093f8:	08017564 	.word	0x08017564
 80093fc:	08015730 	.word	0x08015730

08009400 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 8009400:	b590      	push	{r4, r7, lr}
 8009402:	b09d      	sub	sp, #116	; 0x74
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	f7ff f975 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800941a:	4a5f      	ldr	r2, [pc, #380]	; (8009598 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009426:	68f9      	ldr	r1, [r7, #12]
 8009428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800942c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff fb6f 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800943a:	4619      	mov	r1, r3
 800943c:	4620      	mov	r0, r4
 800943e:	f7fd fc3e 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8009442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd ff85 	bl	8007356 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800944c:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8009450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009454:	4611      	mov	r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fa26 	bl	80078a8 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800945c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8009460:	f107 0320 	add.w	r3, r7, #32
 8009464:	4611      	mov	r1, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fa1e 	bl	80078a8 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800946c:	f107 0120 	add.w	r1, r7, #32
 8009470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009474:	2220      	movs	r2, #32
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe f82a 	bl	80074d0 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800947c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009480:	4946      	ldr	r1, [pc, #280]	; (800959c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8009482:	4618      	mov	r0, r3
 8009484:	f7fd fbaf 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8009488:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800948c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009490:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009494:	4618      	mov	r0, r3
 8009496:	f7fd ffc0 	bl	800741a <_ZNK12SimpleStringplERKS_>
 800949a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800949e:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 80094a2:	4611      	mov	r1, r2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe fb03 	bl	8007ab0 <_Z30BracketsFormattedHexStringFroma>
 80094aa:	f107 0318 	add.w	r3, r7, #24
 80094ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fd ffaf 	bl	800741a <_ZNK12SimpleStringplERKS_>
 80094bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fd ff48 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80094c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fd ff43 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80094d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fd ff3e 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80094da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80094de:	492f      	ldr	r1, [pc, #188]	; (800959c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fd fb80 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 80094e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80094ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80094ee:	f107 0120 	add.w	r1, r7, #32
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd ff91 	bl	800741a <_ZNK12SimpleStringplERKS_>
 80094f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80094fc:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8009500:	4611      	mov	r1, r2
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fad4 	bl	8007ab0 <_Z30BracketsFormattedHexStringFroma>
 8009508:	f107 0310 	add.w	r3, r7, #16
 800950c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009510:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009514:	4618      	mov	r0, r3
 8009516:	f7fd ff80 	bl	800741a <_ZNK12SimpleStringplERKS_>
 800951a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800951e:	4618      	mov	r0, r3
 8009520:	f7fd ff19 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8009524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009528:	4618      	mov	r0, r3
 800952a:	f7fd ff14 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800952e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009532:	4618      	mov	r0, r3
 8009534:	f7fd ff0f 	bl	8007356 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800953e:	68f9      	ldr	r1, [r7, #12]
 8009540:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8009544:	f107 0318 	add.w	r3, r7, #24
 8009548:	f107 0210 	add.w	r2, r7, #16
 800954c:	f7ff fa1c 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009554:	4619      	mov	r1, r3
 8009556:	4620      	mov	r0, r4
 8009558:	f7fd ff7a 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800955c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009560:	4618      	mov	r0, r3
 8009562:	f7fd fef8 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009566:	f107 0310 	add.w	r3, r7, #16
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd fef3 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009570:	f107 0318 	add.w	r3, r7, #24
 8009574:	4618      	mov	r0, r3
 8009576:	f7fd feee 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800957a:	f107 0320 	add.w	r3, r7, #32
 800957e:	4618      	mov	r0, r3
 8009580:	f7fd fee9 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 8009584:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd fee4 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4618      	mov	r0, r3
 8009592:	3774      	adds	r7, #116	; 0x74
 8009594:	46bd      	mov	sp, r7
 8009596:	bd90      	pop	{r4, r7, pc}
 8009598:	08017538 	.word	0x08017538
 800959c:	08015730 	.word	0x08015730

080095a0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 80095a0:	b590      	push	{r4, r7, lr}
 80095a2:	b093      	sub	sp, #76	; 0x4c
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	f7ff f8a5 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80095ba:	4a4a      	ldr	r2, [pc, #296]	; (80096e4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80095c6:	68f9      	ldr	r1, [r7, #12]
 80095c8:	f107 0320 	add.w	r3, r7, #32
 80095cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff faa0 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80095d4:	f107 0320 	add.w	r3, r7, #32
 80095d8:	4619      	mov	r1, r3
 80095da:	4620      	mov	r0, r4
 80095dc:	f7fd fb6f 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 80095e0:	f107 0320 	add.w	r3, r7, #32
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fd feb6 	bl	8007356 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80095ea:	f107 0318 	add.w	r3, r7, #24
 80095ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe f92d 	bl	8007850 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80095f6:	f107 0310 	add.w	r3, r7, #16
 80095fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe f927 	bl	8007850 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009608:	68f9      	ldr	r1, [r7, #12]
 800960a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800960e:	f107 0310 	add.w	r3, r7, #16
 8009612:	f107 0218 	add.w	r2, r7, #24
 8009616:	f7ff f9b7 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800961a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800961e:	4619      	mov	r1, r3
 8009620:	4620      	mov	r0, r4
 8009622:	f7fd ff15 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8009626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800962a:	4618      	mov	r0, r3
 800962c:	f7fd fe93 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8009630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009632:	2b00      	cmp	r3, #0
 8009634:	d046      	beq.n	80096c4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8009636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009638:	2b00      	cmp	r3, #0
 800963a:	d043      	beq.n	80096c4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800963c:	2300      	movs	r3, #0
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009640:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009644:	4413      	add	r3, r2
 8009646:	781a      	ldrb	r2, [r3, #0]
 8009648:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800964a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964c:	440b      	add	r3, r1
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d103      	bne.n	800965c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8009654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009656:	3301      	adds	r3, #1
 8009658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800965a:	e7f1      	b.n	8009640 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800965c:	2300      	movs	r3, #0
 800965e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009660:	f107 0310 	add.w	r3, r7, #16
 8009664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009666:	4618      	mov	r0, r3
 8009668:	f7fd ffd9 	bl	800761e <_ZNK12SimpleString2atEj>
 800966c:	4603      	mov	r3, r0
 800966e:	461c      	mov	r4, r3
 8009670:	f107 0318 	add.w	r3, r7, #24
 8009674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009676:	4618      	mov	r0, r3
 8009678:	f7fd ffd1 	bl	800761e <_ZNK12SimpleString2atEj>
 800967c:	4603      	mov	r3, r0
 800967e:	429c      	cmp	r4, r3
 8009680:	bf0c      	ite	eq
 8009682:	2301      	moveq	r3, #1
 8009684:	2300      	movne	r3, #0
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	d003      	beq.n	8009694 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968e:	3301      	adds	r3, #1
 8009690:	63bb      	str	r3, [r7, #56]	; 0x38
 8009692:	e7e5      	b.n	8009660 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800969a:	68f9      	ldr	r1, [r7, #12]
 800969c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80096a0:	f107 0210 	add.w	r2, r7, #16
 80096a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	f7ff f987 	bl	80089bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 80096ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096b2:	4619      	mov	r1, r3
 80096b4:	4620      	mov	r0, r4
 80096b6:	f7fd fecb 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 80096ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fd fe49 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80096c4:	f107 0310 	add.w	r3, r7, #16
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fd fe44 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80096ce:	f107 0318 	add.w	r3, r7, #24
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fd fe3f 	bl	8007356 <_ZN12SimpleStringD1Ev>
    }
}
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4618      	mov	r0, r3
 80096dc:	3744      	adds	r7, #68	; 0x44
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd90      	pop	{r4, r7, pc}
 80096e2:	bf00      	nop
 80096e4:	0801750c 	.word	0x0801750c

080096e8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 80096e8:	b590      	push	{r4, r7, lr}
 80096ea:	b093      	sub	sp, #76	; 0x4c
 80096ec:	af02      	add	r7, sp, #8
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	f7ff f801 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009702:	4a55      	ldr	r2, [pc, #340]	; (8009858 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	f107 0320 	add.w	r3, r7, #32
 8009714:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff f9fc 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800971c:	f107 0320 	add.w	r3, r7, #32
 8009720:	4619      	mov	r1, r3
 8009722:	4620      	mov	r0, r4
 8009724:	f7fd facb 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8009728:	f107 0320 	add.w	r3, r7, #32
 800972c:	4618      	mov	r0, r3
 800972e:	f7fd fe12 	bl	8007356 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8009732:	f107 0318 	add.w	r3, r7, #24
 8009736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe f889 	bl	8007850 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800973e:	f107 0310 	add.w	r3, r7, #16
 8009742:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009744:	4618      	mov	r0, r3
 8009746:	f7fe f883 	bl	8007850 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009750:	68f9      	ldr	r1, [r7, #12]
 8009752:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009756:	f107 0310 	add.w	r3, r7, #16
 800975a:	f107 0218 	add.w	r2, r7, #24
 800975e:	f7ff f913 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009766:	4619      	mov	r1, r3
 8009768:	4620      	mov	r0, r4
 800976a:	f7fd fe71 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800976e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009772:	4618      	mov	r0, r3
 8009774:	f7fd fdef 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8009778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800977a:	2b00      	cmp	r3, #0
 800977c:	d05c      	beq.n	8009838 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800977e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009780:	2b00      	cmp	r3, #0
 8009782:	d059      	beq.n	8009838 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 8009784:	2300      	movs	r3, #0
 8009786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978c:	4413      	add	r3, r2
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	4618      	mov	r0, r3
 8009792:	f7fd f932 	bl	80069fa <_ZN12SimpleString7ToLowerEc>
 8009796:	4603      	mov	r3, r0
 8009798:	461c      	mov	r4, r3
 800979a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800979c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979e:	4413      	add	r3, r2
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fd f929 	bl	80069fa <_ZN12SimpleString7ToLowerEc>
 80097a8:	4603      	mov	r3, r0
 80097aa:	429c      	cmp	r4, r3
 80097ac:	bf0c      	ite	eq
 80097ae:	2301      	moveq	r3, #1
 80097b0:	2300      	movne	r3, #0
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 80097b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ba:	3301      	adds	r3, #1
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097be:	e7e3      	b.n	8009788 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 80097c4:	f107 0310 	add.w	r3, r7, #16
 80097c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fd ff27 	bl	800761e <_ZNK12SimpleString2atEj>
 80097d0:	4603      	mov	r3, r0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fd f911 	bl	80069fa <_ZN12SimpleString7ToLowerEc>
 80097d8:	4603      	mov	r3, r0
 80097da:	461c      	mov	r4, r3
 80097dc:	f107 0318 	add.w	r3, r7, #24
 80097e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fd ff1b 	bl	800761e <_ZNK12SimpleString2atEj>
 80097e8:	4603      	mov	r3, r0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fd f905 	bl	80069fa <_ZN12SimpleString7ToLowerEc>
 80097f0:	4603      	mov	r3, r0
 80097f2:	429c      	cmp	r4, r3
 80097f4:	bf0c      	ite	eq
 80097f6:	2301      	moveq	r3, #1
 80097f8:	2300      	movne	r3, #0
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d003      	beq.n	8009808 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	3301      	adds	r3, #1
 8009804:	63bb      	str	r3, [r7, #56]	; 0x38
 8009806:	e7dd      	b.n	80097c4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800980e:	68f9      	ldr	r1, [r7, #12]
 8009810:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009814:	f107 0210 	add.w	r2, r7, #16
 8009818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	f7ff f8cd 	bl	80089bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8009822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009826:	4619      	mov	r1, r3
 8009828:	4620      	mov	r0, r4
 800982a:	f7fd fe11 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800982e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009832:	4618      	mov	r0, r3
 8009834:	f7fd fd8f 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8009838:	f107 0310 	add.w	r3, r7, #16
 800983c:	4618      	mov	r0, r3
 800983e:	f7fd fd8a 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8009842:	f107 0318 	add.w	r3, r7, #24
 8009846:	4618      	mov	r0, r3
 8009848:	f7fd fd85 	bl	8007356 <_ZN12SimpleStringD1Ev>
    }
}
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4618      	mov	r0, r3
 8009850:	3744      	adds	r7, #68	; 0x44
 8009852:	46bd      	mov	sp, r7
 8009854:	bd90      	pop	{r4, r7, pc}
 8009856:	bf00      	nop
 8009858:	080174e0 	.word	0x080174e0

0800985c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800985c:	b5b0      	push	{r4, r5, r7, lr}
 800985e:	b092      	sub	sp, #72	; 0x48
 8009860:	af02      	add	r7, sp, #8
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	68b9      	ldr	r1, [r7, #8]
 8009872:	f7fe ff47 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009876:	4a40      	ldr	r2, [pc, #256]	; (8009978 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009882:	68f9      	ldr	r1, [r7, #12]
 8009884:	f107 031c 	add.w	r3, r7, #28
 8009888:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff f942 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009890:	f107 031c 	add.w	r3, r7, #28
 8009894:	4619      	mov	r1, r3
 8009896:	4620      	mov	r0, r4
 8009898:	f7fd fa11 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 800989c:	f107 031c 	add.w	r3, r7, #28
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fd fd58 	bl	8007356 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 80098a6:	f107 0314 	add.w	r3, r7, #20
 80098aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fae0 	bl	8007e74 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80098ba:	68fd      	ldr	r5, [r7, #12]
 80098bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe fad5 	bl	8007e74 <_Z22StringFromBinaryOrNullPKhj>
 80098ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80098ce:	f107 0314 	add.w	r3, r7, #20
 80098d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7ff f856 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80098dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098e0:	4619      	mov	r1, r3
 80098e2:	4620      	mov	r0, r4
 80098e4:	f7fd fdb4 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 80098e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fd fd32 	bl	8007356 <_ZN12SimpleStringD1Ev>
 80098f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fd fd2d 	bl	8007356 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 80098fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d02f      	beq.n	8009962 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 8009902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009904:	2b00      	cmp	r3, #0
 8009906:	d02c      	beq.n	8009962 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8009908:	2300      	movs	r3, #0
 800990a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800990c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800990e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009910:	4413      	add	r3, r2
 8009912:	781a      	ldrb	r2, [r3, #0]
 8009914:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009918:	440b      	add	r3, r1
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	429a      	cmp	r2, r3
 800991e:	d103      	bne.n	8009928 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 8009920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009922:	3301      	adds	r3, #1
 8009924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009926:	e7f1      	b.n	800990c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009932:	4613      	mov	r3, r2
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4413      	add	r3, r2
 8009938:	1c5d      	adds	r5, r3, #1
 800993a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800993e:	f107 0214 	add.w	r2, r7, #20
 8009942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	462b      	mov	r3, r5
 8009948:	f7ff f838 	bl	80089bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800994c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009950:	4619      	mov	r1, r3
 8009952:	4620      	mov	r0, r4
 8009954:	f7fd fd7c 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8009958:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800995c:	4618      	mov	r0, r3
 800995e:	f7fd fcfa 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8009962:	f107 0314 	add.w	r3, r7, #20
 8009966:	4618      	mov	r0, r3
 8009968:	f7fd fcf5 	bl	8007356 <_ZN12SimpleStringD1Ev>
	}
}
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4618      	mov	r0, r3
 8009970:	3740      	adds	r7, #64	; 0x40
 8009972:	46bd      	mov	sp, r7
 8009974:	bdb0      	pop	{r4, r5, r7, pc}
 8009976:	bf00      	nop
 8009978:	080174b4 	.word	0x080174b4

0800997c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800997c:	b5b0      	push	{r4, r5, r7, lr}
 800997e:	b08c      	sub	sp, #48	; 0x30
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	f7fe feb7 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009996:	4a26      	ldr	r2, [pc, #152]	; (8009a30 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80099a2:	68f9      	ldr	r1, [r7, #12]
 80099a4:	f107 0310 	add.w	r3, r7, #16
 80099a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff f8b2 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80099b0:	f107 0310 	add.w	r3, r7, #16
 80099b4:	4619      	mov	r1, r3
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7fd f981 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 80099bc:	f107 0310 	add.w	r3, r7, #16
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fd fcc8 	bl	8007356 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80099cc:	68fd      	ldr	r5, [r7, #12]
 80099ce:	f107 0020 	add.w	r0, r7, #32
 80099d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099d8:	f7fe fa68 	bl	8007eac <_Z20StringFromMaskedBitsmmj>
 80099dc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80099e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099e6:	f7fe fa61 	bl	8007eac <_Z20StringFromMaskedBitsmmj>
 80099ea:	f107 0018 	add.w	r0, r7, #24
 80099ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099f2:	f107 0220 	add.w	r2, r7, #32
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7fe ffc6 	bl	8008988 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80099fc:	f107 0318 	add.w	r3, r7, #24
 8009a00:	4619      	mov	r1, r3
 8009a02:	4620      	mov	r0, r4
 8009a04:	f7fd fd24 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8009a08:	f107 0318 	add.w	r3, r7, #24
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fd fca2 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8009a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fd fc9d 	bl	8007356 <_ZN12SimpleStringD1Ev>
 8009a1c:	f107 0320 	add.w	r3, r7, #32
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fd fc98 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3730      	adds	r7, #48	; 0x30
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8009a30:	08017488 	.word	0x08017488

08009a34 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b089      	sub	sp, #36	; 0x24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	f7fe fe5b 	bl	8008704 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009a4e:	4a1a      	ldr	r2, [pc, #104]	; (8009ab8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009a5a:	68f9      	ldr	r1, [r7, #12]
 8009a5c:	f107 0310 	add.w	r3, r7, #16
 8009a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff f856 	bl	8008b14 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009a68:	f107 0310 	add.w	r3, r7, #16
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7fd f925 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 8009a74:	f107 0310 	add.w	r3, r7, #16
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fd fc6c 	bl	8007356 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a86:	f7fd fc39 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	f107 0318 	add.w	r3, r7, #24
 8009a90:	490a      	ldr	r1, [pc, #40]	; (8009abc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe f8ec 	bl	8007c70 <_Z16StringFromFormatPKcz>
 8009a98:	f107 0318 	add.w	r3, r7, #24
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f7fd fcd6 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 8009aa4:	f107 0318 	add.w	r3, r7, #24
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fd fc54 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3724      	adds	r7, #36	; 0x24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd90      	pop	{r4, r7, pc}
 8009ab8:	0801745c 	.word	0x0801745c
 8009abc:	08015800 	.word	0x08015800

08009ac0 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	4a05      	ldr	r2, [pc, #20]	; (8009ae0 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe fe99 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	0801745c 	.word	0x0801745c

08009ae4 <_ZN25FeatureUnsupportedFailureD0Ev>:
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff ffe7 	bl	8009ac0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8009af2:	2134      	movs	r1, #52	; 0x34
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7fc f9a1 	bl	8005e3c <_ZdlPvj>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	4a05      	ldr	r2, [pc, #20]	; (8009b24 <_ZN16BitsEqualFailureD1Ev+0x20>)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fe77 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	08017488 	.word	0x08017488

08009b28 <_ZN16BitsEqualFailureD0Ev>:
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7ff ffe7 	bl	8009b04 <_ZN16BitsEqualFailureD1Ev>
 8009b36:	2134      	movs	r1, #52	; 0x34
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7fc f97f 	bl	8005e3c <_ZdlPvj>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe fe55 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	080174b4 	.word	0x080174b4

08009b6c <_ZN18BinaryEqualFailureD0Ev>:
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff ffe7 	bl	8009b48 <_ZN18BinaryEqualFailureD1Ev>
 8009b7a:	2134      	movs	r1, #52	; 0x34
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7fc f95d 	bl	8005e3c <_ZdlPvj>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	4a05      	ldr	r2, [pc, #20]	; (8009bac <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fe33 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	080174e0 	.word	0x080174e0

08009bb0 <_ZN24StringEqualNoCaseFailureD0Ev>:
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ffe7 	bl	8009b8c <_ZN24StringEqualNoCaseFailureD1Ev>
 8009bbe:	2134      	movs	r1, #52	; 0x34
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fc f93b 	bl	8005e3c <_ZdlPvj>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	4a05      	ldr	r2, [pc, #20]	; (8009bf0 <_ZN18StringEqualFailureD1Ev+0x20>)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fe11 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	0801750c 	.word	0x0801750c

08009bf4 <_ZN18StringEqualFailureD0Ev>:
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff ffe7 	bl	8009bd0 <_ZN18StringEqualFailureD1Ev>
 8009c02:	2134      	movs	r1, #52	; 0x34
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7fc f919 	bl	8005e3c <_ZdlPvj>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	4a05      	ldr	r2, [pc, #20]	; (8009c34 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7fe fdef 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	08017538 	.word	0x08017538

08009c38 <_ZN23SignedBytesEqualFailureD0Ev>:
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff ffe7 	bl	8009c14 <_ZN23SignedBytesEqualFailureD1Ev>
 8009c46:	2134      	movs	r1, #52	; 0x34
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fc f8f7 	bl	8005e3c <_ZdlPvj>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	4a05      	ldr	r2, [pc, #20]	; (8009c78 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe fdcd 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	08017564 	.word	0x08017564

08009c7c <_ZN25UnsignedLongsEqualFailureD0Ev>:
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ffe7 	bl	8009c58 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8009c8a:	2134      	movs	r1, #52	; 0x34
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7fc f8d5 	bl	8005e3c <_ZdlPvj>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	4a05      	ldr	r2, [pc, #20]	; (8009cbc <_ZN17LongsEqualFailureD1Ev+0x20>)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fdab 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	08017590 	.word	0x08017590

08009cc0 <_ZN17LongsEqualFailureD0Ev>:
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff ffe7 	bl	8009c9c <_ZN17LongsEqualFailureD1Ev>
 8009cce:	2134      	movs	r1, #52	; 0x34
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7fc f8b3 	bl	8005e3c <_ZdlPvj>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	4a05      	ldr	r2, [pc, #20]	; (8009d00 <_ZN12CheckFailureD1Ev+0x20>)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe fd89 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	080175bc 	.word	0x080175bc

08009d04 <_ZN12CheckFailureD0Ev>:
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff ffe7 	bl	8009ce0 <_ZN12CheckFailureD1Ev>
 8009d12:	2134      	movs	r1, #52	; 0x34
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7fc f891 	bl	8005e3c <_ZdlPvj>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	4a05      	ldr	r2, [pc, #20]	; (8009d44 <_ZN15ContainsFailureD1Ev+0x20>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe fd67 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	080175e8 	.word	0x080175e8

08009d48 <_ZN15ContainsFailureD0Ev>:
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff ffe7 	bl	8009d24 <_ZN15ContainsFailureD1Ev>
 8009d56:	2134      	movs	r1, #52	; 0x34
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7fc f86f 	bl	8005e3c <_ZdlPvj>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4618      	mov	r0, r3
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	4a05      	ldr	r2, [pc, #20]	; (8009d88 <_ZN17ComparisonFailureD1Ev+0x20>)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fd45 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	08017614 	.word	0x08017614

08009d8c <_ZN17ComparisonFailureD0Ev>:
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff ffe7 	bl	8009d68 <_ZN17ComparisonFailureD1Ev>
 8009d9a:	2134      	movs	r1, #52	; 0x34
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7fc f84d 	bl	8005e3c <_ZdlPvj>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	4a05      	ldr	r2, [pc, #20]	; (8009dcc <_ZN17CheckEqualFailureD1Ev+0x20>)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fe fd23 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	08017640 	.word	0x08017640

08009dd0 <_ZN17CheckEqualFailureD0Ev>:
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff ffe7 	bl	8009dac <_ZN17CheckEqualFailureD1Ev>
 8009dde:	2134      	movs	r1, #52	; 0x34
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7fc f82b 	bl	8005e3c <_ZdlPvj>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	4a05      	ldr	r2, [pc, #20]	; (8009e10 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe fd01 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	0801766c 	.word	0x0801766c

08009e14 <_ZN19DoublesEqualFailureD0Ev>:
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff ffe7 	bl	8009df0 <_ZN19DoublesEqualFailureD1Ev>
 8009e22:	2134      	movs	r1, #52	; 0x34
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7fc f809 	bl	8005e3c <_ZdlPvj>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	4a05      	ldr	r2, [pc, #20]	; (8009e54 <_ZN13EqualsFailureD1Ev+0x20>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fcdf 	bl	8008808 <_ZN11TestFailureD1Ev>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	08017698 	.word	0x08017698

08009e58 <_ZN13EqualsFailureD0Ev>:
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff ffe7 	bl	8009e34 <_ZN13EqualsFailureD1Ev>
 8009e66:	2134      	movs	r1, #52	; 0x34
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7fb ffe7 	bl	8005e3c <_ZdlPvj>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 8009e78:	b5b0      	push	{r4, r5, r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af02      	add	r7, sp, #8
 8009e7e:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8009e80:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <_ZL13checkedMallocj+0x40>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	4798      	blx	r3
 8009e88:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10e      	bne.n	8009eae <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8009e90:	f004 f96c 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 8009e94:	4604      	mov	r4, r0
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	3368      	adds	r3, #104	; 0x68
 8009e9a:	681d      	ldr	r5, [r3, #0]
 8009e9c:	f004 f976 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	2325      	movs	r3, #37	; 0x25
 8009ea6:	4a05      	ldr	r2, [pc, #20]	; (8009ebc <_ZL13checkedMallocj+0x44>)
 8009ea8:	4905      	ldr	r1, [pc, #20]	; (8009ec0 <_ZL13checkedMallocj+0x48>)
 8009eaa:	4620      	mov	r0, r4
 8009eac:	47a8      	blx	r5
    return mem;
 8009eae:	68fb      	ldr	r3, [r7, #12]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8009eb8:	200000c4 	.word	0x200000c4
 8009ebc:	08015874 	.word	0x08015874
 8009ec0:	08015894 	.word	0x08015894

08009ec4 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 8009ec8:	4b04      	ldr	r3, [pc, #16]	; (8009edc <_Z22getCurrentNewAllocatorv+0x18>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <_Z22getCurrentNewAllocatorv+0x10>
 8009ed0:	f000 f806 	bl	8009ee0 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8009ed4:	4b01      	ldr	r3, [pc, #4]	; (8009edc <_Z22getCurrentNewAllocatorv+0x18>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	200004ec 	.word	0x200004ec

08009ee0 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8009ee4:	f000 f810 	bl	8009f08 <_Z19defaultNewAllocatorv>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	4a02      	ldr	r2, [pc, #8]	; (8009ef4 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 8009eec:	6013      	str	r3, [r2, #0]
}
 8009eee:	bf00      	nop
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	200004ec 	.word	0x200004ec

08009ef8 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__tcf_0+0xc>)
 8009efe:	f000 f909 	bl	800a114 <_ZN19TestMemoryAllocatorD1Ev>
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	200004f8 	.word	0x200004f8

08009f08 <_Z19defaultNewAllocatorv>:
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8009f0c:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <_Z19defaultNewAllocatorv+0x54>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	f3bf 8f5b 	dmb	ish
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	bf0c      	ite	eq
 8009f1e:	2301      	moveq	r3, #1
 8009f20:	2300      	movne	r3, #0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d016      	beq.n	8009f56 <_Z19defaultNewAllocatorv+0x4e>
 8009f28:	480c      	ldr	r0, [pc, #48]	; (8009f5c <_Z19defaultNewAllocatorv+0x54>)
 8009f2a:	f007 faf3 	bl	8011514 <__cxa_guard_acquire>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	bf14      	ite	ne
 8009f34:	2301      	movne	r3, #1
 8009f36:	2300      	moveq	r3, #0
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00b      	beq.n	8009f56 <_Z19defaultNewAllocatorv+0x4e>
 8009f3e:	4b08      	ldr	r3, [pc, #32]	; (8009f60 <_Z19defaultNewAllocatorv+0x58>)
 8009f40:	4a08      	ldr	r2, [pc, #32]	; (8009f64 <_Z19defaultNewAllocatorv+0x5c>)
 8009f42:	4909      	ldr	r1, [pc, #36]	; (8009f68 <_Z19defaultNewAllocatorv+0x60>)
 8009f44:	4809      	ldr	r0, [pc, #36]	; (8009f6c <_Z19defaultNewAllocatorv+0x64>)
 8009f46:	f000 f8c5 	bl	800a0d4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8009f4a:	4804      	ldr	r0, [pc, #16]	; (8009f5c <_Z19defaultNewAllocatorv+0x54>)
 8009f4c:	f007 faee 	bl	801152c <__cxa_guard_release>
 8009f50:	4807      	ldr	r0, [pc, #28]	; (8009f70 <_Z19defaultNewAllocatorv+0x68>)
 8009f52:	f007 fb12 	bl	801157a <atexit>
    return &allocator;
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <_Z19defaultNewAllocatorv+0x64>)
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	2000050c 	.word	0x2000050c
 8009f60:	080158b4 	.word	0x080158b4
 8009f64:	080158bc 	.word	0x080158bc
 8009f68:	080158c0 	.word	0x080158c0
 8009f6c:	200004f8 	.word	0x200004f8
 8009f70:	08009ef9 	.word	0x08009ef9

08009f74 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 8009f78:	4b04      	ldr	r3, [pc, #16]	; (8009f8c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <_Z27getCurrentNewArrayAllocatorv+0x10>
 8009f80:	f000 f806 	bl	8009f90 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8009f84:	4b01      	ldr	r3, [pc, #4]	; (8009f8c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8009f86:	681b      	ldr	r3, [r3, #0]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	200004f0 	.word	0x200004f0

08009f90 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8009f94:	f000 f810 	bl	8009fb8 <_Z24defaultNewArrayAllocatorv>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	4a02      	ldr	r2, [pc, #8]	; (8009fa4 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8009f9c:	6013      	str	r3, [r2, #0]
}
 8009f9e:	bf00      	nop
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	200004f0 	.word	0x200004f0

08009fa8 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	4801      	ldr	r0, [pc, #4]	; (8009fb4 <__tcf_1+0xc>)
 8009fae:	f000 f8b1 	bl	800a114 <_ZN19TestMemoryAllocatorD1Ev>
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20000510 	.word	0x20000510

08009fb8 <_Z24defaultNewArrayAllocatorv>:
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8009fbc:	4b13      	ldr	r3, [pc, #76]	; (800a00c <_Z24defaultNewArrayAllocatorv+0x54>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	f3bf 8f5b 	dmb	ish
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	bf0c      	ite	eq
 8009fce:	2301      	moveq	r3, #1
 8009fd0:	2300      	movne	r3, #0
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d016      	beq.n	800a006 <_Z24defaultNewArrayAllocatorv+0x4e>
 8009fd8:	480c      	ldr	r0, [pc, #48]	; (800a00c <_Z24defaultNewArrayAllocatorv+0x54>)
 8009fda:	f007 fa9b 	bl	8011514 <__cxa_guard_acquire>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bf14      	ite	ne
 8009fe4:	2301      	movne	r3, #1
 8009fe6:	2300      	moveq	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00b      	beq.n	800a006 <_Z24defaultNewArrayAllocatorv+0x4e>
 8009fee:	4b08      	ldr	r3, [pc, #32]	; (800a010 <_Z24defaultNewArrayAllocatorv+0x58>)
 8009ff0:	4a08      	ldr	r2, [pc, #32]	; (800a014 <_Z24defaultNewArrayAllocatorv+0x5c>)
 8009ff2:	4909      	ldr	r1, [pc, #36]	; (800a018 <_Z24defaultNewArrayAllocatorv+0x60>)
 8009ff4:	4809      	ldr	r0, [pc, #36]	; (800a01c <_Z24defaultNewArrayAllocatorv+0x64>)
 8009ff6:	f000 f86d 	bl	800a0d4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8009ffa:	4804      	ldr	r0, [pc, #16]	; (800a00c <_Z24defaultNewArrayAllocatorv+0x54>)
 8009ffc:	f007 fa96 	bl	801152c <__cxa_guard_release>
 800a000:	4807      	ldr	r0, [pc, #28]	; (800a020 <_Z24defaultNewArrayAllocatorv+0x68>)
 800a002:	f007 faba 	bl	801157a <atexit>
    return &allocator;
 800a006:	4b05      	ldr	r3, [pc, #20]	; (800a01c <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800a008:	4618      	mov	r0, r3
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	20000524 	.word	0x20000524
 800a010:	080158d8 	.word	0x080158d8
 800a014:	080158e4 	.word	0x080158e4
 800a018:	080158ec 	.word	0x080158ec
 800a01c:	20000510 	.word	0x20000510
 800a020:	08009fa9 	.word	0x08009fa9

0800a024 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800a028:	4b04      	ldr	r3, [pc, #16]	; (800a03c <_Z25getCurrentMallocAllocatorv+0x18>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <_Z25getCurrentMallocAllocatorv+0x10>
 800a030:	f000 f806 	bl	800a040 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800a034:	4b01      	ldr	r3, [pc, #4]	; (800a03c <_Z25getCurrentMallocAllocatorv+0x18>)
 800a036:	681b      	ldr	r3, [r3, #0]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	200004f4 	.word	0x200004f4

0800a040 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800a044:	f000 f810 	bl	800a068 <_Z22defaultMallocAllocatorv>
 800a048:	4603      	mov	r3, r0
 800a04a:	4a02      	ldr	r2, [pc, #8]	; (800a054 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800a04c:	6013      	str	r3, [r2, #0]
}
 800a04e:	bf00      	nop
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	200004f4 	.word	0x200004f4

0800a058 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800a058:	b580      	push	{r7, lr}
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	4801      	ldr	r0, [pc, #4]	; (800a064 <__tcf_2+0xc>)
 800a05e:	f000 f859 	bl	800a114 <_ZN19TestMemoryAllocatorD1Ev>
 800a062:	bd80      	pop	{r7, pc}
 800a064:	20000528 	.word	0x20000528

0800a068 <_Z22defaultMallocAllocatorv>:
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800a06c:	4b13      	ldr	r3, [pc, #76]	; (800a0bc <_Z22defaultMallocAllocatorv+0x54>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	f3bf 8f5b 	dmb	ish
 800a074:	b2db      	uxtb	r3, r3
 800a076:	f003 0301 	and.w	r3, r3, #1
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bf0c      	ite	eq
 800a07e:	2301      	moveq	r3, #1
 800a080:	2300      	movne	r3, #0
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d016      	beq.n	800a0b6 <_Z22defaultMallocAllocatorv+0x4e>
 800a088:	480c      	ldr	r0, [pc, #48]	; (800a0bc <_Z22defaultMallocAllocatorv+0x54>)
 800a08a:	f007 fa43 	bl	8011514 <__cxa_guard_acquire>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	bf14      	ite	ne
 800a094:	2301      	movne	r3, #1
 800a096:	2300      	moveq	r3, #0
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <_Z22defaultMallocAllocatorv+0x4e>
 800a09e:	4b08      	ldr	r3, [pc, #32]	; (800a0c0 <_Z22defaultMallocAllocatorv+0x58>)
 800a0a0:	4a08      	ldr	r2, [pc, #32]	; (800a0c4 <_Z22defaultMallocAllocatorv+0x5c>)
 800a0a2:	4909      	ldr	r1, [pc, #36]	; (800a0c8 <_Z22defaultMallocAllocatorv+0x60>)
 800a0a4:	4809      	ldr	r0, [pc, #36]	; (800a0cc <_Z22defaultMallocAllocatorv+0x64>)
 800a0a6:	f000 f815 	bl	800a0d4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800a0aa:	4804      	ldr	r0, [pc, #16]	; (800a0bc <_Z22defaultMallocAllocatorv+0x54>)
 800a0ac:	f007 fa3e 	bl	801152c <__cxa_guard_release>
 800a0b0:	4807      	ldr	r0, [pc, #28]	; (800a0d0 <_Z22defaultMallocAllocatorv+0x68>)
 800a0b2:	f007 fa62 	bl	801157a <atexit>
    return &allocator;
 800a0b6:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <_Z22defaultMallocAllocatorv+0x64>)
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	2000053c 	.word	0x2000053c
 800a0c0:	08015908 	.word	0x08015908
 800a0c4:	08015910 	.word	0x08015910
 800a0c8:	08015918 	.word	0x08015918
 800a0cc:	20000528 	.word	0x20000528
 800a0d0:	0800a059 	.word	0x0800a059

0800a0d4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800a0e2:	4a0b      	ldr	r2, [pc, #44]	; (800a110 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	605a      	str	r2, [r3, #4]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	609a      	str	r2, [r3, #8]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	60da      	str	r2, [r3, #12]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	741a      	strb	r2, [r3, #16]
{
}
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	08017724 	.word	0x08017724

0800a114 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	4a06      	ldr	r2, [pc, #24]	; (800a138 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	741a      	strb	r2, [r3, #16]
}
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4618      	mov	r0, r3
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	08017724 	.word	0x08017724

0800a13c <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
}
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7ff ffe5 	bl	800a114 <_ZN19TestMemoryAllocatorD1Ev>
 800a14a:	2114      	movs	r1, #20
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7fb fe75 	bl	8005e3c <_ZdlPvj>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7c1b      	ldrb	r3, [r3, #16]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800a174:	b590      	push	{r4, r7, lr}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3310      	adds	r3, #16
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	4798      	blx	r3
 800a18a:	4604      	mov	r4, r0
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3310      	adds	r3, #16
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6838      	ldr	r0, [r7, #0]
 800a196:	4798      	blx	r3
 800a198:	4603      	mov	r3, r0
 800a19a:	4619      	mov	r1, r3
 800a19c:	4620      	mov	r0, r4
 800a19e:	f7fc fb5f 	bl	8006860 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	bf0c      	ite	eq
 800a1a8:	2301      	moveq	r3, #1
 800a1aa:	2300      	movne	r3, #0
 800a1ac:	b2db      	uxtb	r3, r3
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd90      	pop	{r4, r7, pc}
	...

0800a1b8 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800a1b8:	b590      	push	{r4, r7, lr}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	681c      	ldr	r4, [r3, #0]
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4a04      	ldr	r2, [pc, #16]	; (800a1e0 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	47a0      	blx	r4
 800a1d4:	4603      	mov	r3, r0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd90      	pop	{r4, r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	08015934 	.word	0x08015934

0800a1e4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af02      	add	r7, sp, #8
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	330c      	adds	r3, #12
 800a1f4:	681c      	ldr	r4, [r3, #0]
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	4b04      	ldr	r3, [pc, #16]	; (800a20c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	47a0      	blx	r4
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd90      	pop	{r4, r7, pc}
 800a20c:	08015934 	.word	0x08015934

0800a210 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800a21e:	68b8      	ldr	r0, [r7, #8]
 800a220:	f7ff fe2a 	bl	8009e78 <_ZL13checkedMallocj>
 800a224:	4603      	mov	r3, r0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
	...

0800a230 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800a23e:	4b04      	ldr	r3, [pc, #16]	; (800a250 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68b8      	ldr	r0, [r7, #8]
 800a244:	4798      	blx	r3
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	200000cc 	.word	0x200000cc

0800a254 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
    return name_;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
    return free_name_;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
}
 800a290:	4618      	mov	r0, r3
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
    return this;
 800a2a4:	687b      	ldr	r3, [r7, #4]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
	...

0800a2b4 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	4a05      	ldr	r2, [pc, #20]	; (800a2d4 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7ff ff25 	bl	800a114 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	080176f0 	.word	0x080176f0

0800a2d8 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
}
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff ffe7 	bl	800a2b4 <_ZN20NullUnknownAllocatorD1Ev>
 800a2e6:	2114      	movs	r1, #20
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fb fda7 	bl	8005e3c <_ZdlPvj>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	603b      	str	r3, [r7, #0]
}
 800a322:	bf00      	nop
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
	...

0800a330 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	4b06      	ldr	r3, [pc, #24]	; (800a354 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800a33c:	4a05      	ldr	r2, [pc, #20]	; (800a354 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800a33e:	4906      	ldr	r1, [pc, #24]	; (800a358 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800a340:	f7ff fec8 	bl	800a0d4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800a344:	4a05      	ldr	r2, [pc, #20]	; (800a35c <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	601a      	str	r2, [r3, #0]
{
}
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	08015968 	.word	0x08015968
 800a358:	08015970 	.word	0x08015970
 800a35c:	080176f0 	.word	0x080176f0

0800a360 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800a360:	b580      	push	{r7, lr}
 800a362:	af00      	add	r7, sp, #0
 800a364:	4801      	ldr	r0, [pc, #4]	; (800a36c <__tcf_3+0xc>)
 800a366:	f7ff ffa5 	bl	800a2b4 <_ZN20NullUnknownAllocatorD1Ev>
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20000540 	.word	0x20000540

0800a370 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800a374:	4b12      	ldr	r3, [pc, #72]	; (800a3c0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f3bf 8f5b 	dmb	ish
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	bf0c      	ite	eq
 800a386:	2301      	moveq	r3, #1
 800a388:	2300      	movne	r3, #0
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d013      	beq.n	800a3b8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800a390:	480b      	ldr	r0, [pc, #44]	; (800a3c0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800a392:	f007 f8bf 	bl	8011514 <__cxa_guard_acquire>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bf14      	ite	ne
 800a39c:	2301      	movne	r3, #1
 800a39e:	2300      	moveq	r3, #0
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d008      	beq.n	800a3b8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800a3a6:	4807      	ldr	r0, [pc, #28]	; (800a3c4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800a3a8:	f7ff ffc2 	bl	800a330 <_ZN20NullUnknownAllocatorC1Ev>
 800a3ac:	4804      	ldr	r0, [pc, #16]	; (800a3c0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800a3ae:	f007 f8bd 	bl	801152c <__cxa_guard_release>
 800a3b2:	4805      	ldr	r0, [pc, #20]	; (800a3c8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800a3b4:	f007 f8e1 	bl	801157a <atexit>
    return &allocator;
 800a3b8:	4b02      	ldr	r3, [pc, #8]	; (800a3c4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000554 	.word	0x20000554
 800a3c4:	20000540 	.word	0x20000540
 800a3c8:	0800a361 	.word	0x0800a361

0800a3cc <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
        return testCount_;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689b      	ldr	r3, [r3, #8]
    }
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	699b      	ldr	r3, [r3, #24]
    }
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800a400:	4b05      	ldr	r3, [pc, #20]	; (800a418 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b02      	cmp	r3, #2
 800a406:	d103      	bne.n	800a410 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800a408:	f004 fa38 	bl	800e87c <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800a40c:	4603      	mov	r3, r0
 800a40e:	e001      	b.n	800a414 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800a410:	4b01      	ldr	r3, [pc, #4]	; (800a418 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800a412:	781b      	ldrb	r3, [r3, #0]
}
 800a414:	4618      	mov	r0, r3
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20000084 	.word	0x20000084

0800a41c <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800a424:	4a0a      	ldr	r2, [pc, #40]	; (800a450 <_ZN10TestOutputC1Ev+0x34>)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	605a      	str	r2, [r3, #4]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	721a      	strb	r2, [r3, #8]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	725a      	strb	r2, [r3, #9]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a05      	ldr	r2, [pc, #20]	; (800a454 <_ZN10TestOutputC1Ev+0x38>)
 800a440:	60da      	str	r2, [r3, #12]
{
}
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	08017828 	.word	0x08017828
 800a454:	08015d70 	.word	0x08015d70

0800a458 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	4a04      	ldr	r2, [pc, #16]	; (800a474 <_ZN10TestOutputD1Ev+0x1c>)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	601a      	str	r2, [r3, #0]
{
}
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	08017828 	.word	0x08017828

0800a478 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	78fa      	ldrb	r2, [r7, #3]
 800a488:	721a      	strb	r2, [r3, #8]
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
    color_ = true;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	725a      	strb	r2, [r3, #9]
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3328      	adds	r3, #40	; 0x28
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	4798      	blx	r3
}
 800a4c8:	bf00      	nop
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800a4d0:	b590      	push	{r4, r7, lr}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	332c      	adds	r3, #44	; 0x2c
 800a4e0:	681c      	ldr	r4, [r3, #0]
 800a4e2:	f107 0308 	add.w	r3, r7, #8
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fd f9ef 	bl	80078cc <_Z10StringFroml>
 800a4ee:	f107 0308 	add.w	r3, r7, #8
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fc ff02 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	47a0      	blx	r4
 800a500:	f107 0308 	add.w	r3, r7, #8
 800a504:	4618      	mov	r0, r3
 800a506:	f7fc ff26 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800a50a:	bf00      	nop
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd90      	pop	{r4, r7, pc}

0800a512 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800a512:	b590      	push	{r4, r7, lr}
 800a514:	b085      	sub	sp, #20
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	332c      	adds	r3, #44	; 0x2c
 800a522:	681c      	ldr	r4, [r3, #0]
 800a524:	f107 0308 	add.w	r3, r7, #8
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fd fbc8 	bl	8007cc0 <_Z10StringFromj>
 800a530:	f107 0308 	add.w	r3, r7, #8
 800a534:	4618      	mov	r0, r3
 800a536:	f7fc fee1 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800a53a:	4603      	mov	r3, r0
 800a53c:	4619      	mov	r1, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	47a0      	blx	r4
 800a542:	f107 0308 	add.w	r3, r7, #8
 800a546:	4618      	mov	r0, r3
 800a548:	f7fc ff05 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800a54c:	bf00      	nop
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	bd90      	pop	{r4, r7, pc}

0800a554 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800a554:	b590      	push	{r4, r7, lr}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	332c      	adds	r3, #44	; 0x2c
 800a566:	681c      	ldr	r4, [r3, #0]
 800a568:	f107 0310 	add.w	r3, r7, #16
 800a56c:	2106      	movs	r1, #6
 800a56e:	ed97 0b00 	vldr	d0, [r7]
 800a572:	4618      	mov	r0, r3
 800a574:	f7fd fb3a 	bl	8007bec <_Z10StringFromdi>
 800a578:	f107 0310 	add.w	r3, r7, #16
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fc febd 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800a582:	4603      	mov	r3, r0
 800a584:	4619      	mov	r1, r3
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	47a0      	blx	r4
 800a58a:	f107 0310 	add.w	r3, r7, #16
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fc fee1 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800a594:	bf00      	nop
 800a596:	371c      	adds	r7, #28
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd90      	pop	{r4, r7, pc}

0800a59c <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
    p.print(s);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	332c      	adds	r3, #44	; 0x2c
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	4798      	blx	r3
    return p;
 800a5b4:	687b      	ldr	r3, [r7, #4]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800a5c0:	b590      	push	{r4, r7, lr}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7a1b      	ldrb	r3, [r3, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d01a      	beq.n	800a608 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	332c      	adds	r3, #44	; 0x2c
 800a5d8:	681c      	ldr	r4, [r3, #0]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3314      	adds	r3, #20
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f107 0208 	add.w	r2, r7, #8
 800a5e6:	6839      	ldr	r1, [r7, #0]
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	4798      	blx	r3
 800a5ec:	f107 0308 	add.w	r3, r7, #8
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fc fe83 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	47a0      	blx	r4
 800a5fe:	f107 0308 	add.w	r3, r7, #8
 800a602:	4618      	mov	r0, r3
 800a604:	f7fc fea7 	bl	8007356 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3318      	adds	r3, #24
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6838      	ldr	r0, [r7, #0]
 800a612:	4798      	blx	r3
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d007      	beq.n	800a62a <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3344      	adds	r3, #68	; 0x44
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4907      	ldr	r1, [pc, #28]	; (800a640 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800a628:	e006      	b.n	800a638 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3344      	adds	r3, #68	; 0x44
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4904      	ldr	r1, [pc, #16]	; (800a644 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	4798      	blx	r3
}
 800a638:	bf00      	nop
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd90      	pop	{r4, r7, pc}
 800a640:	08015d70 	.word	0x08015d70
 800a644:	08015d74 	.word	0x08015d74

0800a648 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800a648:	b590      	push	{r4, r7, lr}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	7a1b      	ldrb	r3, [r3, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d019      	beq.n	800a68e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	332c      	adds	r3, #44	; 0x2c
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4910      	ldr	r1, [pc, #64]	; (800a6a4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3334      	adds	r3, #52	; 0x34
 800a66e:	681c      	ldr	r4, [r3, #0]
 800a670:	6838      	ldr	r0, [r7, #0]
 800a672:	f002 f845 	bl	800c700 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800a676:	4603      	mov	r3, r0
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	47a0      	blx	r4
        print(" ms\n");
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	332c      	adds	r3, #44	; 0x2c
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4908      	ldr	r1, [pc, #32]	; (800a6a8 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800a68c:	e005      	b.n	800a69a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3358      	adds	r3, #88	; 0x58
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
}
 800a69a:	bf00      	nop
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd90      	pop	{r4, r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	08015d78 	.word	0x08015d78
 800a6a8:	08015d7c 	.word	0x08015d7c

0800a6ac <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	332c      	adds	r3, #44	; 0x2c
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	68d2      	ldr	r2, [r2, #12]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	605a      	str	r2, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800a6d6:	fb83 1302 	smull	r1, r3, r3, r2
 800a6da:	1119      	asrs	r1, r3, #4
 800a6dc:	17d3      	asrs	r3, r2, #31
 800a6de:	1acb      	subs	r3, r1, r3
 800a6e0:	2132      	movs	r1, #50	; 0x32
 800a6e2:	fb01 f303 	mul.w	r3, r1, r3
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	bf0c      	ite	eq
 800a6ec:	2301      	moveq	r3, #1
 800a6ee:	2300      	movne	r3, #0
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d006      	beq.n	800a704 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	332c      	adds	r3, #44	; 0x2c
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4904      	ldr	r1, [pc, #16]	; (800a710 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	4798      	blx	r3
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	51eb851f 	.word	0x51eb851f
 800a710:	08015d84 	.word	0x08015d84

0800a714 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	60da      	str	r2, [r3, #12]
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
}
 800a74e:	bf00      	nop
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	6039      	str	r1, [r7, #0]
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800a770:	b590      	push	{r4, r7, lr}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
    print("\n");
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	332c      	adds	r3, #44	; 0x2c
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	496f      	ldr	r1, [pc, #444]	; (800a940 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800a788:	6838      	ldr	r0, [r7, #0]
 800a78a:	f7f9 fe25 	bl	80043d8 <_ZNK10TestResult9isFailureEv>
 800a78e:	4603      	mov	r3, r0
 800a790:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800a792:	6838      	ldr	r0, [r7, #0]
 800a794:	f7f9 fe14 	bl	80043c0 <_ZNK10TestResult15getFailureCountEv>
 800a798:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d02b      	beq.n	800a7f8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7a5b      	ldrb	r3, [r3, #9]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d006      	beq.n	800a7b6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	332c      	adds	r3, #44	; 0x2c
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4964      	ldr	r1, [pc, #400]	; (800a944 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	4798      	blx	r3
        }
        print("Errors (");
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	332c      	adds	r3, #44	; 0x2c
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4962      	ldr	r1, [pc, #392]	; (800a948 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	4798      	blx	r3
        if (failureCount > 0) {
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00e      	beq.n	800a7e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	3334      	adds	r3, #52	; 0x34
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68b9      	ldr	r1, [r7, #8]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	4798      	blx	r3
            print(" failures, ");
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	332c      	adds	r3, #44	; 0x2c
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	495a      	ldr	r1, [pc, #360]	; (800a94c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	4798      	blx	r3
 800a7e6:	e019      	b.n	800a81c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	332c      	adds	r3, #44	; 0x2c
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4957      	ldr	r1, [pc, #348]	; (800a950 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	4798      	blx	r3
 800a7f6:	e011      	b.n	800a81c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7a5b      	ldrb	r3, [r3, #9]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d006      	beq.n	800a80e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	332c      	adds	r3, #44	; 0x2c
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4952      	ldr	r1, [pc, #328]	; (800a954 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	4798      	blx	r3
        }
        print("OK (");
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	332c      	adds	r3, #44	; 0x2c
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4950      	ldr	r1, [pc, #320]	; (800a958 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	4798      	blx	r3
    }
    print(result.getTestCount());
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3334      	adds	r3, #52	; 0x34
 800a822:	681c      	ldr	r4, [r3, #0]
 800a824:	6838      	ldr	r0, [r7, #0]
 800a826:	f7ff fdd1 	bl	800a3cc <_ZNK10TestResult12getTestCountEv>
 800a82a:	4603      	mov	r3, r0
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	47a0      	blx	r4
    print(" tests, ");
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	332c      	adds	r3, #44	; 0x2c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4948      	ldr	r1, [pc, #288]	; (800a95c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	4798      	blx	r3
    print(result.getRunCount());
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	3334      	adds	r3, #52	; 0x34
 800a846:	681c      	ldr	r4, [r3, #0]
 800a848:	6838      	ldr	r0, [r7, #0]
 800a84a:	f7f9 fda1 	bl	8004390 <_ZNK10TestResult11getRunCountEv>
 800a84e:	4603      	mov	r3, r0
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	47a0      	blx	r4
    print(" ran, ");
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	332c      	adds	r3, #44	; 0x2c
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4940      	ldr	r1, [pc, #256]	; (800a960 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	4798      	blx	r3
    print(result.getCheckCount());
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3334      	adds	r3, #52	; 0x34
 800a86a:	681c      	ldr	r4, [r3, #0]
 800a86c:	6838      	ldr	r0, [r7, #0]
 800a86e:	f7fa f9fb 	bl	8004c68 <_ZNK10TestResult13getCheckCountEv>
 800a872:	4603      	mov	r3, r0
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	47a0      	blx	r4
    print(" checks, ");
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	332c      	adds	r3, #44	; 0x2c
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4938      	ldr	r1, [pc, #224]	; (800a964 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	4798      	blx	r3
    print(result.getIgnoredCount());
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	3334      	adds	r3, #52	; 0x34
 800a88e:	681c      	ldr	r4, [r3, #0]
 800a890:	6838      	ldr	r0, [r7, #0]
 800a892:	f7f9 fd89 	bl	80043a8 <_ZNK10TestResult15getIgnoredCountEv>
 800a896:	4603      	mov	r3, r0
 800a898:	4619      	mov	r1, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	47a0      	blx	r4
    print(" ignored, ");
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	332c      	adds	r3, #44	; 0x2c
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4930      	ldr	r1, [pc, #192]	; (800a968 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3334      	adds	r3, #52	; 0x34
 800a8b2:	681c      	ldr	r4, [r3, #0]
 800a8b4:	6838      	ldr	r0, [r7, #0]
 800a8b6:	f7ff fd95 	bl	800a3e4 <_ZNK10TestResult19getFilteredOutCountEv>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	47a0      	blx	r4
    print(" filtered out, ");
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	332c      	adds	r3, #44	; 0x2c
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4928      	ldr	r1, [pc, #160]	; (800a96c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3334      	adds	r3, #52	; 0x34
 800a8d6:	681c      	ldr	r4, [r3, #0]
 800a8d8:	6838      	ldr	r0, [r7, #0]
 800a8da:	f001 ff05 	bl	800c6e8 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	47a0      	blx	r4
    print(" ms)");
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	332c      	adds	r3, #44	; 0x2c
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4920      	ldr	r1, [pc, #128]	; (800a970 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	4798      	blx	r3
    if (color_) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7a5b      	ldrb	r3, [r3, #9]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d006      	beq.n	800a90a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	332c      	adds	r3, #44	; 0x2c
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	491b      	ldr	r1, [pc, #108]	; (800a974 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d009      	beq.n	800a924 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d106      	bne.n	800a924 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	332c      	adds	r3, #44	; 0x2c
 800a91c:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800a91e:	4916      	ldr	r1, [pc, #88]	; (800a978 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	4798      	blx	r3
    }
    print("\n\n");
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	332c      	adds	r3, #44	; 0x2c
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4913      	ldr	r1, [pc, #76]	; (800a97c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	4798      	blx	r3

    dotCount_ = 0;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	605a      	str	r2, [r3, #4]
}
 800a938:	bf00      	nop
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd90      	pop	{r4, r7, pc}
 800a940:	08015d84 	.word	0x08015d84
 800a944:	08015d88 	.word	0x08015d88
 800a948:	08015d90 	.word	0x08015d90
 800a94c:	08015d9c 	.word	0x08015d9c
 800a950:	08015da8 	.word	0x08015da8
 800a954:	08015db8 	.word	0x08015db8
 800a958:	08015dc0 	.word	0x08015dc0
 800a95c:	08015dc8 	.word	0x08015dc8
 800a960:	08015dd4 	.word	0x08015dd4
 800a964:	08015ddc 	.word	0x08015ddc
 800a968:	08015de8 	.word	0x08015de8
 800a96c:	08015df4 	.word	0x08015df4
 800a970:	08015e04 	.word	0x08015e04
 800a974:	08015e0c 	.word	0x08015e0c
 800a978:	08015e10 	.word	0x08015e10
 800a97c:	08015eb4 	.word	0x08015eb4

0800a980 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d922      	bls.n	800a9d8 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	332c      	adds	r3, #44	; 0x2c
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4911      	ldr	r1, [pc, #68]	; (800a9e0 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	4798      	blx	r3
        print(number);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3334      	adds	r3, #52	; 0x34
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68b9      	ldr	r1, [r7, #8]
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	4798      	blx	r3
        print(" of ");
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	332c      	adds	r3, #44	; 0x2c
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	490b      	ldr	r1, [pc, #44]	; (800a9e4 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	4798      	blx	r3
        print(total);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3334      	adds	r3, #52	; 0x34
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6879      	ldr	r1, [r7, #4]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	4798      	blx	r3
        print("\n");
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	332c      	adds	r3, #44	; 0x2c
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4905      	ldr	r1, [pc, #20]	; (800a9e8 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	4798      	blx	r3
    }
}
 800a9d8:	bf00      	nop
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	08015eb8 	.word	0x08015eb8
 800a9e4:	08015ec4 	.word	0x08015ec4
 800a9e8:	08015d84 	.word	0x08015d84

0800a9ec <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800a9f6:	6838      	ldr	r0, [r7, #0]
 800a9f8:	f7fd ffa1 	bl	800893e <_ZNK11TestFailure17isOutsideTestFileEv>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d105      	bne.n	800aa0e <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800aa02:	6838      	ldr	r0, [r7, #0]
 800aa04:	f7fd ffad 	bl	8008962 <_ZNK11TestFailure18isInHelperFunctionEv>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800aa12:	2300      	movs	r3, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f81d 	bl	800aa5a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800aa20:	e003      	b.n	800aa2a <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f86b 	bl	800ab00 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3318      	adds	r3, #24
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f107 0208 	add.w	r2, r7, #8
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	4610      	mov	r0, r2
 800aa3a:	4798      	blx	r3
 800aa3c:	f107 0308 	add.w	r3, r7, #8
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f8b2 	bl	800abac <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800aa48:	f107 0308 	add.w	r3, r7, #8
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fc fc82 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800aa52:	bf00      	nop
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b088      	sub	sp, #32
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	331c      	adds	r3, #28
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f107 0208 	add.w	r2, r7, #8
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	4610      	mov	r0, r2
 800aa74:	4798      	blx	r3
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3320      	adds	r3, #32
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6838      	ldr	r0, [r7, #0]
 800aa80:	4798      	blx	r3
 800aa82:	4602      	mov	r2, r0
 800aa84:	f107 0308 	add.w	r3, r7, #8
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f8be 	bl	800ac0c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800aa90:	f107 0308 	add.w	r3, r7, #8
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fc fc5e 	bl	8007356 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	330c      	adds	r3, #12
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f107 0210 	add.w	r2, r7, #16
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4798      	blx	r3
 800aaac:	f107 0310 	add.w	r3, r7, #16
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f85c 	bl	800ab70 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800aab8:	f107 0310 	add.w	r3, r7, #16
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fc fc4a 	bl	8007356 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3308      	adds	r3, #8
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f107 0218 	add.w	r2, r7, #24
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3314      	adds	r3, #20
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6838      	ldr	r0, [r7, #0]
 800aade:	4798      	blx	r3
 800aae0:	4602      	mov	r2, r0
 800aae2:	f107 0318 	add.w	r3, r7, #24
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f88f 	bl	800ac0c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800aaee:	f107 0318 	add.w	r3, r7, #24
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fc fc2f 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800aaf8:	bf00      	nop
 800aafa:	3720      	adds	r7, #32
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3308      	adds	r3, #8
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f107 0208 	add.w	r2, r7, #8
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	4610      	mov	r0, r2
 800ab1a:	4798      	blx	r3
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3314      	adds	r3, #20
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	6838      	ldr	r0, [r7, #0]
 800ab26:	4798      	blx	r3
 800ab28:	4602      	mov	r2, r0
 800ab2a:	f107 0308 	add.w	r3, r7, #8
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f86b 	bl	800ac0c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ab36:	f107 0308 	add.w	r3, r7, #8
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fc fc0b 	bl	8007356 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	330c      	adds	r3, #12
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f107 0210 	add.w	r2, r7, #16
 800ab4c:	6839      	ldr	r1, [r7, #0]
 800ab4e:	4610      	mov	r0, r2
 800ab50:	4798      	blx	r3
 800ab52:	f107 0310 	add.w	r3, r7, #16
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f809 	bl	800ab70 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800ab5e:	f107 0310 	add.w	r3, r7, #16
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fc fbf7 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800ab68:	bf00      	nop
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800ab70:	b590      	push	{r4, r7, lr}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	332c      	adds	r3, #44	; 0x2c
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4909      	ldr	r1, [pc, #36]	; (800aba8 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	4798      	blx	r3
    print(testName.asCharString());
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	332c      	adds	r3, #44	; 0x2c
 800ab8e:	681c      	ldr	r4, [r3, #0]
 800ab90:	6838      	ldr	r0, [r7, #0]
 800ab92:	f7fc fbb3 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800ab96:	4603      	mov	r3, r0
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	47a0      	blx	r4
}
 800ab9e:	bf00      	nop
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd90      	pop	{r4, r7, pc}
 800aba6:	bf00      	nop
 800aba8:	08015ecc 	.word	0x08015ecc

0800abac <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
    print("\n");
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	332c      	adds	r3, #44	; 0x2c
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4910      	ldr	r1, [pc, #64]	; (800ac00 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3
    print("\t");
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	332c      	adds	r3, #44	; 0x2c
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	490d      	ldr	r1, [pc, #52]	; (800ac04 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	4798      	blx	r3
    print(reason.asCharString());
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	332c      	adds	r3, #44	; 0x2c
 800abd8:	681c      	ldr	r4, [r3, #0]
 800abda:	6838      	ldr	r0, [r7, #0]
 800abdc:	f7fc fb8e 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800abe0:	4603      	mov	r3, r0
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	47a0      	blx	r4
    print("\n\n");
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	332c      	adds	r3, #44	; 0x2c
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4905      	ldr	r1, [pc, #20]	; (800ac08 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3
}
 800abf6:	bf00      	nop
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd90      	pop	{r4, r7, pc}
 800abfe:	bf00      	nop
 800ac00:	08015d84 	.word	0x08015d84
 800ac04:	08015edc 	.word	0x08015edc
 800ac08:	08015eb4 	.word	0x08015eb4

0800ac0c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800ac0c:	b590      	push	{r4, r7, lr}
 800ac0e:	b089      	sub	sp, #36	; 0x24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800ac18:	f7ff fbf0 	bl	800a3fc <_ZN10TestOutput21getWorkingEnvironmentEv>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	bf0c      	ite	eq
 800ac22:	2301      	moveq	r3, #1
 800ac24:	2300      	movne	r3, #0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d015      	beq.n	800ac58 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3354      	adds	r3, #84	; 0x54
 800ac32:	681c      	ldr	r4, [r3, #0]
 800ac34:	f107 0310 	add.w	r3, r7, #16
 800ac38:	68b9      	ldr	r1, [r7, #8]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fc f827 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
 800ac40:	f107 0310 	add.w	r3, r7, #16
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	4619      	mov	r1, r3
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	47a0      	blx	r4
 800ac4c:	f107 0310 	add.w	r3, r7, #16
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fc fb80 	bl	8007356 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800ac56:	e014      	b.n	800ac82 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3350      	adds	r3, #80	; 0x50
 800ac5e:	681c      	ldr	r4, [r3, #0]
 800ac60:	f107 0318 	add.w	r3, r7, #24
 800ac64:	68b9      	ldr	r1, [r7, #8]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fc f811 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
 800ac6c:	f107 0318 	add.w	r3, r7, #24
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	4619      	mov	r1, r3
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	47a0      	blx	r4
 800ac78:	f107 0318 	add.w	r3, r7, #24
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fc fb6a 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800ac82:	bf00      	nop
 800ac84:	3724      	adds	r7, #36	; 0x24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd90      	pop	{r4, r7, pc}
	...

0800ac8c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800ac8c:	b590      	push	{r4, r7, lr}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
    print("\n");
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	332c      	adds	r3, #44	; 0x2c
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4916      	ldr	r1, [pc, #88]	; (800acfc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	4798      	blx	r3
    print(file.asCharString());
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	332c      	adds	r3, #44	; 0x2c
 800acac:	681c      	ldr	r4, [r3, #0]
 800acae:	68b8      	ldr	r0, [r7, #8]
 800acb0:	f7fc fb24 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800acb4:	4603      	mov	r3, r0
 800acb6:	4619      	mov	r1, r3
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	47a0      	blx	r4
    print(":");
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	332c      	adds	r3, #44	; 0x2c
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	490e      	ldr	r1, [pc, #56]	; (800ad00 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	4798      	blx	r3
    print(lineNumber);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3334      	adds	r3, #52	; 0x34
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	4798      	blx	r3
    print(":");
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	332c      	adds	r3, #44	; 0x2c
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4907      	ldr	r1, [pc, #28]	; (800ad00 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	4798      	blx	r3
    print(" error:");
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	332c      	adds	r3, #44	; 0x2c
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4905      	ldr	r1, [pc, #20]	; (800ad04 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	4798      	blx	r3
}
 800acf4:	bf00      	nop
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd90      	pop	{r4, r7, pc}
 800acfc:	08015d84 	.word	0x08015d84
 800ad00:	08015ee0 	.word	0x08015ee0
 800ad04:	08015ee4 	.word	0x08015ee4

0800ad08 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800ad08:	b590      	push	{r4, r7, lr}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
    print("\n");
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	332c      	adds	r3, #44	; 0x2c
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4916      	ldr	r1, [pc, #88]	; (800ad78 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	4798      	blx	r3
    print(file.asCharString());
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	332c      	adds	r3, #44	; 0x2c
 800ad28:	681c      	ldr	r4, [r3, #0]
 800ad2a:	68b8      	ldr	r0, [r7, #8]
 800ad2c:	f7fc fae6 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800ad30:	4603      	mov	r3, r0
 800ad32:	4619      	mov	r1, r3
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	47a0      	blx	r4
    print("(");
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	332c      	adds	r3, #44	; 0x2c
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	490e      	ldr	r1, [pc, #56]	; (800ad7c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	4798      	blx	r3
    print(lineNumber);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3334      	adds	r3, #52	; 0x34
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	4798      	blx	r3
    print("):");
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	332c      	adds	r3, #44	; 0x2c
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4908      	ldr	r1, [pc, #32]	; (800ad80 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	4798      	blx	r3
    print(" error:");
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	332c      	adds	r3, #44	; 0x2c
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4906      	ldr	r1, [pc, #24]	; (800ad84 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	4798      	blx	r3
}
 800ad70:	bf00      	nop
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd90      	pop	{r4, r7, pc}
 800ad78:	08015d84 	.word	0x08015d84
 800ad7c:	08015eec 	.word	0x08015eec
 800ad80:	08015ef0 	.word	0x08015ef0
 800ad84:	08015ee4 	.word	0x08015ee4

0800ad88 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	7a1b      	ldrb	r3, [r3, #8]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d106      	bne.n	800ada8 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3328      	adds	r3, #40	; 0x28
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	4798      	blx	r3
}
 800ada8:	bf00      	nop
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
    while (*s) {
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d009      	beq.n	800add6 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800adc2:	4b0a      	ldr	r3, [pc, #40]	; (800adec <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	7812      	ldrb	r2, [r2, #0]
 800adca:	4610      	mov	r0, r2
 800adcc:	4798      	blx	r3
        s++;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	3301      	adds	r3, #1
 800add2:	603b      	str	r3, [r7, #0]
    while (*s) {
 800add4:	e7f1      	b.n	800adba <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	334c      	adds	r3, #76	; 0x4c
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	4798      	blx	r3
}
 800ade2:	bf00      	nop
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	200000bc 	.word	0x200000bc

0800adf0 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800adf8:	4b03      	ldr	r3, [pc, #12]	; (800ae08 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4798      	blx	r3
}
 800adfe:	bf00      	nop
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	200000c0 	.word	0x200000c0

0800ae0c <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff fb00 	bl	800a41c <_ZN10TestOutputC1Ev>
 800ae1c:	4a06      	ldr	r2, [pc, #24]	; (800ae38 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	611a      	str	r2, [r3, #16]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	615a      	str	r2, [r3, #20]
{
}
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	08017758 	.word	0x08017758

0800ae3c <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	4a0e      	ldr	r2, [pc, #56]	; (800ae80 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d004      	beq.n	800ae5c <_ZN19CompositeTestOutputD1Ev+0x20>
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	3204      	adds	r2, #4
 800ae56:	6812      	ldr	r2, [r2, #0]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	4790      	blx	r2
  delete outputTwo_;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <_ZN19CompositeTestOutputD1Ev+0x32>
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	3204      	adds	r2, #4
 800ae68:	6812      	ldr	r2, [r2, #0]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff faf1 	bl	800a458 <_ZN10TestOutputD1Ev>
}
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	08017758 	.word	0x08017758

0800ae84 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
}
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7ff ffd5 	bl	800ae3c <_ZN19CompositeTestOutputD1Ev>
 800ae92:	2118      	movs	r1, #24
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7fa ffd1 	bl	8005e3c <_ZdlPvj>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d004      	beq.n	800aec0 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	3204      	adds	r2, #4
 800aeba:	6812      	ldr	r2, [r2, #0]
 800aebc:	4618      	mov	r0, r3
 800aebe:	4790      	blx	r2
  outputOne_ = output;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	611a      	str	r2, [r3, #16]
}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b082      	sub	sp, #8
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d004      	beq.n	800aeea <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	3204      	adds	r2, #4
 800aee4:	6812      	ldr	r2, [r2, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	4790      	blx	r2
  outputTwo_ = output;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	615a      	str	r2, [r3, #20]
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d008      	beq.n	800af1a <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	691a      	ldr	r2, [r3, #16]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3308      	adds	r3, #8
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4610      	mov	r0, r2
 800af18:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d008      	beq.n	800af34 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	695a      	ldr	r2, [r3, #20]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3308      	adds	r3, #8
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4610      	mov	r0, r2
 800af32:	4798      	blx	r3
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d009      	beq.n	800af62 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691a      	ldr	r2, [r3, #16]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	330c      	adds	r3, #12
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	4610      	mov	r0, r2
 800af60:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d009      	beq.n	800af7e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	695a      	ldr	r2, [r3, #20]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	330c      	adds	r3, #12
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	4610      	mov	r0, r2
 800af7c:	4798      	blx	r3
}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b082      	sub	sp, #8
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d009      	beq.n	800afac <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3310      	adds	r3, #16
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d009      	beq.n	800afc8 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	695a      	ldr	r2, [r3, #20]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3310      	adds	r3, #16
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	4610      	mov	r0, r2
 800afc6:	4798      	blx	r3
}
 800afc8:	bf00      	nop
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d009      	beq.n	800aff6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691a      	ldr	r2, [r3, #16]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3314      	adds	r3, #20
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	4610      	mov	r0, r2
 800aff4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d009      	beq.n	800b012 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	695a      	ldr	r2, [r3, #20]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3314      	adds	r3, #20
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	4610      	mov	r0, r2
 800b010:	4798      	blx	r3
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b082      	sub	sp, #8
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d009      	beq.n	800b040 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	691a      	ldr	r2, [r3, #16]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3318      	adds	r3, #24
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	4610      	mov	r0, r2
 800b03e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d009      	beq.n	800b05c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	695a      	ldr	r2, [r3, #20]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3318      	adds	r3, #24
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	4610      	mov	r0, r2
 800b05a:	4798      	blx	r3
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d009      	beq.n	800b08a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	691a      	ldr	r2, [r3, #16]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	331c      	adds	r3, #28
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	4610      	mov	r0, r2
 800b088:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d009      	beq.n	800b0a6 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	695a      	ldr	r2, [r3, #20]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	331c      	adds	r3, #28
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	4798      	blx	r3
}
 800b0a6:	bf00      	nop
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d009      	beq.n	800b0d6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	691a      	ldr	r2, [r3, #16]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3320      	adds	r3, #32
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	78f9      	ldrb	r1, [r7, #3]
 800b0d2:	4610      	mov	r0, r2
 800b0d4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d009      	beq.n	800b0f2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	695a      	ldr	r2, [r3, #20]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3320      	adds	r3, #32
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	78f9      	ldrb	r1, [r7, #3]
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	4798      	blx	r3
}
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d008      	beq.n	800b11c <_ZN19CompositeTestOutput5colorEv+0x22>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	691a      	ldr	r2, [r3, #16]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3324      	adds	r3, #36	; 0x24
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4610      	mov	r0, r2
 800b11a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d008      	beq.n	800b136 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	695a      	ldr	r2, [r3, #20]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3324      	adds	r3, #36	; 0x24
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4610      	mov	r0, r2
 800b134:	4798      	blx	r3
}
 800b136:	bf00      	nop
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b082      	sub	sp, #8
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d009      	beq.n	800b164 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	691a      	ldr	r2, [r3, #16]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3328      	adds	r3, #40	; 0x28
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	4610      	mov	r0, r2
 800b162:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	695b      	ldr	r3, [r3, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d009      	beq.n	800b180 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	695a      	ldr	r2, [r3, #20]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	695b      	ldr	r3, [r3, #20]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3328      	adds	r3, #40	; 0x28
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	4610      	mov	r0, r2
 800b17e:	4798      	blx	r3
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d009      	beq.n	800b1ae <_ZN19CompositeTestOutput5printEPKc+0x26>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	691a      	ldr	r2, [r3, #16]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	332c      	adds	r3, #44	; 0x2c
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	4610      	mov	r0, r2
 800b1ac:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d009      	beq.n	800b1ca <_ZN19CompositeTestOutput5printEPKc+0x42>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	695a      	ldr	r2, [r3, #20]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	332c      	adds	r3, #44	; 0x2c
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	4798      	blx	r3
}
 800b1ca:	bf00      	nop
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d009      	beq.n	800b1f8 <_ZN19CompositeTestOutput5printEl+0x26>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	691a      	ldr	r2, [r3, #16]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3330      	adds	r3, #48	; 0x30
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d009      	beq.n	800b214 <_ZN19CompositeTestOutput5printEl+0x42>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	695a      	ldr	r2, [r3, #20]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3330      	adds	r3, #48	; 0x30
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	4610      	mov	r0, r2
 800b212:	4798      	blx	r3
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d009      	beq.n	800b242 <_ZN19CompositeTestOutput5printEj+0x26>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	691a      	ldr	r2, [r3, #16]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3334      	adds	r3, #52	; 0x34
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	4610      	mov	r0, r2
 800b240:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d009      	beq.n	800b25e <_ZN19CompositeTestOutput5printEj+0x42>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	695a      	ldr	r2, [r3, #20]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3334      	adds	r3, #52	; 0x34
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	4610      	mov	r0, r2
 800b25c:	4798      	blx	r3
}
 800b25e:	bf00      	nop
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	691a      	ldr	r2, [r3, #16]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3338      	adds	r3, #56	; 0x38
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	ed97 0b00 	vldr	d0, [r7]
 800b28c:	4610      	mov	r0, r2
 800b28e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00a      	beq.n	800b2ae <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	695a      	ldr	r2, [r3, #20]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3338      	adds	r3, #56	; 0x38
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	ed97 0b00 	vldr	d0, [r7]
 800b2aa:	4610      	mov	r0, r2
 800b2ac:	4798      	blx	r3
}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b082      	sub	sp, #8
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d009      	beq.n	800b2dc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	691a      	ldr	r2, [r3, #16]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	333c      	adds	r3, #60	; 0x3c
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	4610      	mov	r0, r2
 800b2da:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d009      	beq.n	800b2f8 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	695a      	ldr	r2, [r3, #20]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	695b      	ldr	r3, [r3, #20]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	333c      	adds	r3, #60	; 0x3c
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4798      	blx	r3
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d009      	beq.n	800b326 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691a      	ldr	r2, [r3, #16]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3344      	adds	r3, #68	; 0x44
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	4610      	mov	r0, r2
 800b324:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d009      	beq.n	800b342 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	695a      	ldr	r2, [r3, #20]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3344      	adds	r3, #68	; 0x44
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	4610      	mov	r0, r2
 800b340:	4798      	blx	r3
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d008      	beq.n	800b36c <_ZN19CompositeTestOutput5flushEv+0x22>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	691a      	ldr	r2, [r3, #16]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	334c      	adds	r3, #76	; 0x4c
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d008      	beq.n	800b386 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	695a      	ldr	r2, [r3, #20]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	695b      	ldr	r3, [r3, #20]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	334c      	adds	r3, #76	; 0x4c
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4610      	mov	r0, r2
 800b384:	4798      	blx	r3
}
 800b386:	bf00      	nop
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800b38e:	b480      	push	{r7}
 800b390:	b085      	sub	sp, #20
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
    }
 800b39a:	bf00      	nop
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	60b9      	str	r1, [r7, #8]
 800b3b0:	607a      	str	r2, [r7, #4]
    }
 800b3b2:	bf00      	nop
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800b3ca:	4a0b      	ldr	r2, [pc, #44]	; (800b3f8 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	f000 f9ce 	bl	800b770 <_ZN14NullTestPlugin8instanceEv>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	605a      	str	r2, [r3, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3308      	adds	r3, #8
 800b3de:	6839      	ldr	r1, [r7, #0]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fb fc54 	bl	8006c8e <_ZN12SimpleStringC1ERKS_>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	741a      	strb	r2, [r3, #16]
{
}
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	08017914 	.word	0x08017914

0800b3fc <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800b406:	4a0a      	ldr	r2, [pc, #40]	; (800b430 <_ZN10TestPluginC1EPS_+0x34>)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	605a      	str	r2, [r3, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3308      	adds	r3, #8
 800b416:	4907      	ldr	r1, [pc, #28]	; (800b434 <_ZN10TestPluginC1EPS_+0x38>)
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fb fbe4 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	741a      	strb	r2, [r3, #16]
{
}
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	08017914 	.word	0x08017914
 800b434:	08015ef4 	.word	0x08015ef4

0800b438 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	4a06      	ldr	r2, [pc, #24]	; (800b45c <_ZN10TestPluginD1Ev+0x24>)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3308      	adds	r3, #8
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fb ff83 	bl	8007356 <_ZN12SimpleStringD1Ev>
{
}
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	08017914 	.word	0x08017914

0800b460 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
}
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff ffe5 	bl	800b438 <_ZN10TestPluginD1Ev>
 800b46e:	2114      	movs	r1, #20
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7fa fce3 	bl	8005e3c <_ZdlPvj>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	605a      	str	r2, [r3, #4]
    return this;
 800b490:	687b      	ldr	r3, [r7, #4]
}
 800b492:	4618      	mov	r0, r3
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b084      	sub	sp, #16
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	7c1b      	ldrb	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d007      	beq.n	800b4c2 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	68b9      	ldr	r1, [r7, #8]
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6858      	ldr	r0, [r3, #4]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3314      	adds	r3, #20
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	68b9      	ldr	r1, [r7, #8]
 800b4d4:	4798      	blx	r3
}
 800b4d6:	bf00      	nop
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b084      	sub	sp, #16
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6858      	ldr	r0, [r3, #4]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3318      	adds	r3, #24
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	68b9      	ldr	r1, [r7, #8]
 800b4fc:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	7c1b      	ldrb	r3, [r3, #16]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d007      	beq.n	800b516 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	330c      	adds	r3, #12
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	68b9      	ldr	r1, [r7, #8]
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	4798      	blx	r3
}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800b51e:	b590      	push	{r4, r7, lr}
 800b520:	b085      	sub	sp, #20
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	607a      	str	r2, [r7, #4]
 800b52a:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	331c      	adds	r3, #28
 800b532:	681c      	ldr	r4, [r3, #0]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	68b9      	ldr	r1, [r7, #8]
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	47a0      	blx	r4
 800b53e:	4603      	mov	r3, r0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	bd90      	pop	{r4, r7, pc}

0800b548 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3310      	adds	r3, #16
 800b55c:	681c      	ldr	r4, [r3, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	68b9      	ldr	r1, [r7, #8]
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	47a0      	blx	r4
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800b56e:	2301      	movs	r3, #1
 800b570:	e011      	b.n	800b596 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00c      	beq.n	800b594 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6858      	ldr	r0, [r3, #4]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	331c      	adds	r3, #28
 800b586:	681c      	ldr	r4, [r3, #0]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	68b9      	ldr	r1, [r7, #8]
 800b58e:	47a0      	blx	r4
 800b590:	4603      	mov	r3, r0
 800b592:	e000      	b.n	800b596 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd90      	pop	{r4, r7, pc}

0800b59e <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b083      	sub	sp, #12
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
    return name_;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	3308      	adds	r3, #8
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b082      	sub	sp, #8
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6838      	ldr	r0, [r7, #0]
 800b5c8:	f7fb fed1 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	e00d      	b.n	800b5f2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d007      	beq.n	800b5ee <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff ffe6 	bl	800b5b6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	e001      	b.n	800b5f2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	685b      	ldr	r3, [r3, #4]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b083      	sub	sp, #12
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
    return next_;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
}
 800b606:	4618      	mov	r0, r3
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00e      	beq.n	800b646 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7ff ffb6 	bl	800b59e <_ZN10TestPlugin7getNameEv>
 800b632:	4603      	mov	r3, r0
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f7fb fe99 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800b642:	2301      	movs	r3, #1
 800b644:	e000      	b.n	800b648 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800b646:	2300      	movs	r3, #0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d007      	beq.n	800b65c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800b65c:	68fb      	ldr	r3, [r7, #12]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	741a      	strb	r2, [r3, #16]
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	741a      	strb	r2, [r3, #16]
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800b69a:	b480      	push	{r7}
 800b69c:	b083      	sub	sp, #12
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
    return enabled_;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	7c1b      	ldrb	r3, [r3, #16]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7ff fe7c 	bl	800b3c0 <_ZN10TestPluginC1ERK12SimpleString>
 800b6c8:	4a05      	ldr	r2, [pc, #20]	; (800b6e0 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800b6ce:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	601a      	str	r2, [r3, #0]
}
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	080178d0 	.word	0x080178d0
 800b6e4:	20000558 	.word	0x20000558

0800b6e8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	db0d      	blt.n	800b71e <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800b702:	4a0c      	ldr	r2, [pc, #48]	; (800b734 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b70a:	490a      	ldr	r1, [pc, #40]	; (800b734 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	440b      	add	r3, r1
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	3b01      	subs	r3, #1
 800b71a:	617b      	str	r3, [r7, #20]
 800b71c:	e7ee      	b.n	800b6fc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800b71e:	4b04      	ldr	r3, [pc, #16]	; (800b730 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
}
 800b724:	bf00      	nop
 800b726:	371c      	adds	r7, #28
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	20000558 	.word	0x20000558
 800b734:	2000055c 	.word	0x2000055c

0800b738 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2100      	movs	r1, #0
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff fe59 	bl	800b3fc <_ZN10TestPluginC1EPS_>
 800b74a:	4a04      	ldr	r2, [pc, #16]	; (800b75c <_ZN14NullTestPluginC1Ev+0x24>)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	601a      	str	r2, [r3, #0]
{
}
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4618      	mov	r0, r3
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	0801788c 	.word	0x0801788c

0800b760 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__tcf_0+0xc>)
 800b766:	f000 f849 	bl	800b7fc <_ZN14NullTestPluginD1Ev>
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	2000065c 	.word	0x2000065c

0800b770 <_ZN14NullTestPlugin8instanceEv>:
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800b774:	4b12      	ldr	r3, [pc, #72]	; (800b7c0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	f3bf 8f5b 	dmb	ish
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	f003 0301 	and.w	r3, r3, #1
 800b782:	2b00      	cmp	r3, #0
 800b784:	bf0c      	ite	eq
 800b786:	2301      	moveq	r3, #1
 800b788:	2300      	movne	r3, #0
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d013      	beq.n	800b7b8 <_ZN14NullTestPlugin8instanceEv+0x48>
 800b790:	480b      	ldr	r0, [pc, #44]	; (800b7c0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800b792:	f005 febf 	bl	8011514 <__cxa_guard_acquire>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	bf14      	ite	ne
 800b79c:	2301      	movne	r3, #1
 800b79e:	2300      	moveq	r3, #0
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d008      	beq.n	800b7b8 <_ZN14NullTestPlugin8instanceEv+0x48>
 800b7a6:	4807      	ldr	r0, [pc, #28]	; (800b7c4 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800b7a8:	f7ff ffc6 	bl	800b738 <_ZN14NullTestPluginC1Ev>
 800b7ac:	4804      	ldr	r0, [pc, #16]	; (800b7c0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800b7ae:	f005 febd 	bl	801152c <__cxa_guard_release>
 800b7b2:	4805      	ldr	r0, [pc, #20]	; (800b7c8 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800b7b4:	f005 fee1 	bl	801157a <atexit>
    return &_instance;
 800b7b8:	4b02      	ldr	r3, [pc, #8]	; (800b7c4 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20000670 	.word	0x20000670
 800b7c4:	2000065c 	.word	0x2000065c
 800b7c8:	0800b761 	.word	0x0800b761

0800b7cc <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
}
 800b7d8:	bf00      	nop
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
}
 800b7f0:	bf00      	nop
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	4a05      	ldr	r2, [pc, #20]	; (800b81c <_ZN14NullTestPluginD1Ev+0x20>)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fe13 	bl	800b438 <_ZN10TestPluginD1Ev>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4618      	mov	r0, r3
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	0801788c 	.word	0x0801788c

0800b820 <_ZN14NullTestPluginD0Ev>:
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff ffe7 	bl	800b7fc <_ZN14NullTestPluginD1Ev>
 800b82e:	2114      	movs	r1, #20
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7fa fb03 	bl	8005e3c <_ZdlPvj>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800b848:	4a0f      	ldr	r2, [pc, #60]	; (800b888 <_ZN12TestRegistryC1Ev+0x48>)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	605a      	str	r2, [r3, #4]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	609a      	str	r2, [r3, #8]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	60da      	str	r2, [r3, #12]
 800b860:	f7ff ff86 	bl	800b770 <_ZN14NullTestPlugin8instanceEv>
 800b864:	4602      	mov	r2, r0
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	611a      	str	r2, [r3, #16]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	751a      	strb	r2, [r3, #20]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	619a      	str	r2, [r3, #24]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	771a      	strb	r2, [r3, #28]
{
}
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4618      	mov	r0, r3
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	08017958 	.word	0x08017958

0800b88c <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	4a04      	ldr	r2, [pc, #16]	; (800b8a8 <_ZN12TestRegistryD1Ev+0x1c>)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	601a      	str	r2, [r3, #0]
{
}
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4618      	mov	r0, r3
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	08017958 	.word	0x08017958

0800b8ac <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
}
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff ffe9 	bl	800b88c <_ZN12TestRegistryD1Ev>
 800b8ba:	2120      	movs	r1, #32
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7fa fabd 	bl	8005e3c <_ZdlPvj>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3308      	adds	r3, #8
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	6852      	ldr	r2, [r2, #4]
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	6838      	ldr	r0, [r7, #0]
 800b8e6:	4798      	blx	r3
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	605a      	str	r2, [r3, #4]
}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800b900:	2301      	movs	r3, #1
 800b902:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3308      	adds	r3, #8
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6838      	ldr	r0, [r7, #0]
 800b90e:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	60bb      	str	r3, [r7, #8]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d05c      	beq.n	800b9d6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	7d1b      	ldrb	r3, [r3, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3380      	adds	r3, #128	; 0x80
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68b8      	ldr	r0, [r7, #8]
 800b92e:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	7f1b      	ldrb	r3, [r3, #28]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3384      	adds	r3, #132	; 0x84
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68b8      	ldr	r0, [r7, #8]
 800b942:	4798      	blx	r3

        if (groupStart) {
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d008      	beq.n	800b95c <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3310      	adds	r3, #16
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68b9      	ldr	r1, [r7, #8]
 800b954:	6838      	ldr	r0, [r7, #0]
 800b956:	4798      	blx	r3
            groupStart = false;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	3320      	adds	r3, #32
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	6838      	ldr	r0, [r7, #0]
 800b966:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 fb79 	bl	800c064 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d016      	beq.n	800b9a6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3318      	adds	r3, #24
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	6838      	ldr	r0, [r7, #0]
 800b984:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3390      	adds	r3, #144	; 0x90
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	6911      	ldr	r1, [r2, #16]
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	68b8      	ldr	r0, [r7, #8]
 800b996:	4798      	blx	r3
            result.currentTestEnded(test);
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	331c      	adds	r3, #28
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68b9      	ldr	r1, [r7, #8]
 800b9a2:	6838      	ldr	r0, [r7, #0]
 800b9a4:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800b9a6:	68b9      	ldr	r1, [r7, #8]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fa5b 	bl	800be64 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d008      	beq.n	800b9c6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3314      	adds	r3, #20
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68b9      	ldr	r1, [r7, #8]
 800b9c2:	6838      	ldr	r0, [r7, #0]
 800b9c4:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	330c      	adds	r3, #12
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68b8      	ldr	r0, [r7, #8]
 800b9d0:	4798      	blx	r3
 800b9d2:	60b8      	str	r0, [r7, #8]
 800b9d4:	e79f      	b.n	800b916 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	330c      	adds	r3, #12
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6838      	ldr	r0, [r7, #0]
 800b9e0:	4798      	blx	r3
    currentRepetition_++;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	619a      	str	r2, [r3, #24]
}
 800b9ec:	bf00      	nop
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800b9f4:	b590      	push	{r4, r7, lr}
 800b9f6:	b08f      	sub	sp, #60	; 0x3c
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800b9fe:	f107 0314 	add.w	r3, r7, #20
 800ba02:	4953      	ldr	r1, [pc, #332]	; (800bb50 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fb f8ee 	bl	8006be6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d04d      	beq.n	800bab2 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800ba16:	f107 030c 	add.w	r3, r7, #12
 800ba1a:	494d      	ldr	r1, [pc, #308]	; (800bb50 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fb f8e2 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800ba22:	f107 030c 	add.w	r3, r7, #12
 800ba26:	494b      	ldr	r1, [pc, #300]	; (800bb54 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fb fd23 	bl	8007474 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800ba2e:	f107 031c 	add.w	r3, r7, #28
 800ba32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba34:	4618      	mov	r0, r3
 800ba36:	f001 f9d2 	bl	800cdde <_ZNK10UtestShell8getGroupEv>
 800ba3a:	f107 021c 	add.w	r2, r7, #28
 800ba3e:	f107 030c 	add.w	r3, r7, #12
 800ba42:	4611      	mov	r1, r2
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fb fd03 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800ba4a:	f107 031c 	add.w	r3, r7, #28
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fb fc81 	bl	8007356 <_ZN12SimpleStringD1Ev>
        gname += "#";
 800ba54:	f107 030c 	add.w	r3, r7, #12
 800ba58:	493e      	ldr	r1, [pc, #248]	; (800bb54 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fb fd0a 	bl	8007474 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800ba60:	f107 020c 	add.w	r2, r7, #12
 800ba64:	f107 0314 	add.w	r3, r7, #20
 800ba68:	4611      	mov	r1, r2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fb f939 	bl	8006ce2 <_ZNK12SimpleString8containsERKS_>
 800ba70:	4603      	mov	r3, r0
 800ba72:	f083 0301 	eor.w	r3, r3, #1
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00d      	beq.n	800ba98 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800ba7c:	f107 020c 	add.w	r2, r7, #12
 800ba80:	f107 0314 	add.w	r3, r7, #20
 800ba84:	4611      	mov	r1, r2
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fb fce2 	bl	8007450 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800ba8c:	f107 0314 	add.w	r3, r7, #20
 800ba90:	4931      	ldr	r1, [pc, #196]	; (800bb58 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fb fcee 	bl	8007474 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800ba98:	f107 030c 	add.w	r3, r7, #12
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fb fc5a 	bl	8007356 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800baa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	330c      	adds	r3, #12
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800baac:	4798      	blx	r3
 800baae:	6378      	str	r0, [r7, #52]	; 0x34
 800bab0:	e7ae      	b.n	800ba10 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800bab2:	f107 0314 	add.w	r3, r7, #20
 800bab6:	4a26      	ldr	r2, [pc, #152]	; (800bb50 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800bab8:	4926      	ldr	r1, [pc, #152]	; (800bb54 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800baba:	4618      	mov	r0, r3
 800babc:	f7fb faa8 	bl	8007010 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800bac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bac4:	4924      	ldr	r1, [pc, #144]	; (800bb58 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fb f88d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800bacc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bad0:	f107 0314 	add.w	r3, r7, #20
 800bad4:	4611      	mov	r1, r2
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fb f982 	bl	8006de0 <_ZNK12SimpleString8endsWithERKS_>
 800badc:	4603      	mov	r3, r0
 800bade:	461c      	mov	r4, r3
 800bae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fb fc36 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800baea:	2c00      	cmp	r4, #0
 800baec:	d01a      	beq.n	800bb24 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800baee:	f107 0314 	add.w	r3, r7, #20
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fb fc0e 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800baf8:	4603      	mov	r3, r0
 800bafa:	3b01      	subs	r3, #1
 800bafc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800bb00:	f107 0114 	add.w	r1, r7, #20
 800bb04:	2200      	movs	r2, #0
 800bb06:	f7fb fd2f 	bl	8007568 <_ZNK12SimpleString9subStringEjj>
 800bb0a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bb0e:	f107 0314 	add.w	r3, r7, #20
 800bb12:	4611      	mov	r1, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fb f8d2 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 800bb1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fb fc19 	bl	8007356 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3338      	adds	r3, #56	; 0x38
 800bb2a:	681c      	ldr	r4, [r3, #0]
 800bb2c:	f107 0314 	add.w	r3, r7, #20
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7fb fbe3 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800bb36:	4603      	mov	r3, r0
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6838      	ldr	r0, [r7, #0]
 800bb3c:	47a0      	blx	r4
    SimpleString groupList;
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fb fc07 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800bb48:	bf00      	nop
 800bb4a:	373c      	adds	r7, #60	; 0x3c
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd90      	pop	{r4, r7, pc}
 800bb50:	08015f44 	.word	0x08015f44
 800bb54:	08015f48 	.word	0x08015f48
 800bb58:	08015f4c 	.word	0x08015f4c

0800bb5c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800bb5c:	b590      	push	{r4, r7, lr}
 800bb5e:	b091      	sub	sp, #68	; 0x44
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800bb66:	f107 0314 	add.w	r3, r7, #20
 800bb6a:	4964      	ldr	r1, [pc, #400]	; (800bcfc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fb f83a 	bl	8006be6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d06e      	beq.n	800bc5c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fa6e 	bl	800c064 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d05e      	beq.n	800bc4c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800bb8e:	f107 030c 	add.w	r3, r7, #12
 800bb92:	495a      	ldr	r1, [pc, #360]	; (800bcfc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fb f826 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800bb9a:	f107 030c 	add.w	r3, r7, #12
 800bb9e:	4958      	ldr	r1, [pc, #352]	; (800bd00 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fb fc67 	bl	8007474 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800bba6:	f107 031c 	add.w	r3, r7, #28
 800bbaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 f916 	bl	800cdde <_ZNK10UtestShell8getGroupEv>
 800bbb2:	f107 021c 	add.w	r2, r7, #28
 800bbb6:	f107 030c 	add.w	r3, r7, #12
 800bbba:	4611      	mov	r1, r2
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fb fc47 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800bbc2:	f107 031c 	add.w	r3, r7, #28
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fb fbc5 	bl	8007356 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800bbcc:	f107 030c 	add.w	r3, r7, #12
 800bbd0:	494c      	ldr	r1, [pc, #304]	; (800bd04 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fb fc4e 	bl	8007474 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800bbd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f001 f8ee 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 800bbe4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bbe8:	f107 030c 	add.w	r3, r7, #12
 800bbec:	4611      	mov	r1, r2
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fb fc2e 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800bbf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7fb fbac 	bl	8007356 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800bbfe:	f107 030c 	add.w	r3, r7, #12
 800bc02:	493f      	ldr	r1, [pc, #252]	; (800bd00 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fb fc35 	bl	8007474 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800bc0a:	f107 020c 	add.w	r2, r7, #12
 800bc0e:	f107 0314 	add.w	r3, r7, #20
 800bc12:	4611      	mov	r1, r2
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fb f864 	bl	8006ce2 <_ZNK12SimpleString8containsERKS_>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	f083 0301 	eor.w	r3, r3, #1
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00d      	beq.n	800bc42 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800bc26:	f107 020c 	add.w	r2, r7, #12
 800bc2a:	f107 0314 	add.w	r3, r7, #20
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fb fc0d 	bl	8007450 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800bc36:	f107 0314 	add.w	r3, r7, #20
 800bc3a:	4933      	ldr	r1, [pc, #204]	; (800bd08 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fb fc19 	bl	8007474 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800bc42:	f107 030c 	add.w	r3, r7, #12
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fb fb85 	bl	8007356 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	330c      	adds	r3, #12
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc56:	4798      	blx	r3
 800bc58:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bc5a:	e78d      	b.n	800bb78 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800bc5c:	f107 0314 	add.w	r3, r7, #20
 800bc60:	4a26      	ldr	r2, [pc, #152]	; (800bcfc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800bc62:	4927      	ldr	r1, [pc, #156]	; (800bd00 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7fb f9d3 	bl	8007010 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800bc6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc6e:	4926      	ldr	r1, [pc, #152]	; (800bd08 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fa ffb8 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800bc76:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bc7a:	f107 0314 	add.w	r3, r7, #20
 800bc7e:	4611      	mov	r1, r2
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fb f8ad 	bl	8006de0 <_ZNK12SimpleString8endsWithERKS_>
 800bc86:	4603      	mov	r3, r0
 800bc88:	461c      	mov	r4, r3
 800bc8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fb fb61 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800bc94:	2c00      	cmp	r4, #0
 800bc96:	d01a      	beq.n	800bcce <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800bc98:	f107 0314 	add.w	r3, r7, #20
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fb fb39 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800bca2:	4603      	mov	r3, r0
 800bca4:	3b01      	subs	r3, #1
 800bca6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800bcaa:	f107 0114 	add.w	r1, r7, #20
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f7fb fc5a 	bl	8007568 <_ZNK12SimpleString9subStringEjj>
 800bcb4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800bcb8:	f107 0314 	add.w	r3, r7, #20
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fa fffd 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 800bcc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fb fb44 	bl	8007356 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3338      	adds	r3, #56	; 0x38
 800bcd4:	681c      	ldr	r4, [r3, #0]
 800bcd6:	f107 0314 	add.w	r3, r7, #20
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fb fb0e 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800bce0:	4603      	mov	r3, r0
 800bce2:	4619      	mov	r1, r3
 800bce4:	6838      	ldr	r0, [r7, #0]
 800bce6:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800bce8:	f107 0314 	add.w	r3, r7, #20
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fb fb32 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800bcf2:	bf00      	nop
 800bcf4:	3744      	adds	r7, #68	; 0x44
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd90      	pop	{r4, r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	08015f44 	.word	0x08015f44
 800bd00:	08015f48 	.word	0x08015f48
 800bd04:	08015f50 	.word	0x08015f50
 800bd08:	08015f4c 	.word	0x08015f4c

0800bd0c <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800bd0c:	b590      	push	{r4, r7, lr}
 800bd0e:	b091      	sub	sp, #68	; 0x44
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800bd16:	f107 0314 	add.w	r3, r7, #20
 800bd1a:	494f      	ldr	r1, [pc, #316]	; (800be58 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fa ff62 	bl	8006be6 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d07d      	beq.n	800be2a <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800bd2e:	f107 030c 	add.w	r3, r7, #12
 800bd32:	4949      	ldr	r1, [pc, #292]	; (800be58 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fa ff56 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800bd3a:	f107 031c 	add.w	r3, r7, #28
 800bd3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd40:	4618      	mov	r0, r3
 800bd42:	f001 f84c 	bl	800cdde <_ZNK10UtestShell8getGroupEv>
 800bd46:	f107 021c 	add.w	r2, r7, #28
 800bd4a:	f107 030c 	add.w	r3, r7, #12
 800bd4e:	4611      	mov	r1, r2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7fb fb7d 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800bd56:	f107 031c 	add.w	r3, r7, #28
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fb fafb 	bl	8007356 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800bd60:	f107 030c 	add.w	r3, r7, #12
 800bd64:	493d      	ldr	r1, [pc, #244]	; (800be5c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fb fb84 	bl	8007474 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800bd6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd72:	4618      	mov	r0, r3
 800bd74:	f001 f824 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 800bd78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bd7c:	f107 030c 	add.w	r3, r7, #12
 800bd80:	4611      	mov	r1, r2
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fb fb64 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800bd88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fb fae2 	bl	8007356 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800bd92:	f107 030c 	add.w	r3, r7, #12
 800bd96:	4931      	ldr	r1, [pc, #196]	; (800be5c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fb fb6b 	bl	8007474 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800bd9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bda2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bda4:	4618      	mov	r0, r3
 800bda6:	f001 f8cb 	bl	800cf40 <_ZNK10UtestShell7getFileEv>
 800bdaa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bdae:	f107 030c 	add.w	r3, r7, #12
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fb fb4b 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800bdba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fb fac9 	bl	8007356 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800bdc4:	f107 030c 	add.w	r3, r7, #12
 800bdc8:	4924      	ldr	r1, [pc, #144]	; (800be5c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fb fb52 	bl	8007474 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800bdd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bdd2:	f001 f8c4 	bl	800cf5e <_ZNK10UtestShell13getLineNumberEv>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	461a      	mov	r2, r3
 800bdda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bdde:	4920      	ldr	r1, [pc, #128]	; (800be60 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fb ff45 	bl	8007c70 <_Z16StringFromFormatPKcz>
 800bde6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800bdea:	f107 030c 	add.w	r3, r7, #12
 800bdee:	4611      	mov	r1, r2
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7fb fb2d 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800bdf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fb faab 	bl	8007356 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800be00:	f107 020c 	add.w	r2, r7, #12
 800be04:	f107 0314 	add.w	r3, r7, #20
 800be08:	4611      	mov	r1, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fb fb20 	bl	8007450 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800be10:	f107 030c 	add.w	r3, r7, #12
 800be14:	4618      	mov	r0, r3
 800be16:	f7fb fa9e 	bl	8007356 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800be1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	330c      	adds	r3, #12
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800be24:	4798      	blx	r3
 800be26:	63f8      	str	r0, [r7, #60]	; 0x3c
 800be28:	e77e      	b.n	800bd28 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3338      	adds	r3, #56	; 0x38
 800be30:	681c      	ldr	r4, [r3, #0]
 800be32:	f107 0314 	add.w	r3, r7, #20
 800be36:	4618      	mov	r0, r3
 800be38:	f7fb fa60 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800be3c:	4603      	mov	r3, r0
 800be3e:	4619      	mov	r1, r3
 800be40:	6838      	ldr	r0, [r7, #0]
 800be42:	47a0      	blx	r4
    SimpleString testLocations;
 800be44:	f107 0314 	add.w	r3, r7, #20
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fb fa84 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800be4e:	bf00      	nop
 800be50:	3744      	adds	r7, #68	; 0x44
 800be52:	46bd      	mov	sp, r7
 800be54:	bd90      	pop	{r4, r7, pc}
 800be56:	bf00      	nop
 800be58:	08015f44 	.word	0x08015f44
 800be5c:	08015f50 	.word	0x08015f50
 800be60:	08015f54 	.word	0x08015f54

0800be64 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800be64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800be6e:	2400      	movs	r4, #0
 800be70:	2500      	movs	r5, #0
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d028      	beq.n	800beca <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	330c      	adds	r3, #12
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6838      	ldr	r0, [r7, #0]
 800be82:	4798      	blx	r3
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d01f      	beq.n	800beca <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800be8a:	f107 0308 	add.w	r3, r7, #8
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	4618      	mov	r0, r3
 800be92:	f000 ffa4 	bl	800cdde <_ZNK10UtestShell8getGroupEv>
 800be96:	2401      	movs	r4, #1
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	330c      	adds	r3, #12
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6838      	ldr	r0, [r7, #0]
 800bea2:	4798      	blx	r3
 800bea4:	4602      	mov	r2, r0
 800bea6:	f107 0310 	add.w	r3, r7, #16
 800beaa:	4611      	mov	r1, r2
 800beac:	4618      	mov	r0, r3
 800beae:	f000 ff96 	bl	800cdde <_ZNK10UtestShell8getGroupEv>
 800beb2:	2501      	movs	r5, #1
 800beb4:	f107 0210 	add.w	r2, r7, #16
 800beb8:	f107 0308 	add.w	r3, r7, #8
 800bebc:	4611      	mov	r1, r2
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fb fa9a 	bl	80073f8 <_ZneRK12SimpleStringS1_>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800beca:	2601      	movs	r6, #1
 800becc:	e000      	b.n	800bed0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800bece:	2600      	movs	r6, #0
 800bed0:	2d00      	cmp	r5, #0
 800bed2:	d004      	beq.n	800bede <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800bed4:	f107 0310 	add.w	r3, r7, #16
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fb fa3c 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800bede:	2c00      	cmp	r4, #0
 800bee0:	d004      	beq.n	800beec <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800bee2:	f107 0308 	add.w	r3, r7, #8
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fb fa35 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800beec:	4633      	mov	r3, r6
}
 800beee:	4618      	mov	r0, r3
 800bef0:	371c      	adds	r7, #28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bef6 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b082      	sub	sp, #8
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <_ZN12TestRegistry10countTestsEv+0x26>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685a      	ldr	r2, [r3, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3310      	adds	r3, #16
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4610      	mov	r0, r2
 800bf16:	4798      	blx	r3
 800bf18:	4603      	mov	r3, r0
 800bf1a:	e000      	b.n	800bf1e <_ZN12TestRegistry10countTestsEv+0x28>
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
	...

0800bf28 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	4801      	ldr	r0, [pc, #4]	; (800bf34 <__tcf_0+0xc>)
 800bf2e:	f7ff fcad 	bl	800b88c <_ZN12TestRegistryD1Ev>
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20000678 	.word	0x20000678

0800bf38 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800bf3c:	4b15      	ldr	r3, [pc, #84]	; (800bf94 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	f3bf 8f5b 	dmb	ish
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	bf0c      	ite	eq
 800bf4e:	2301      	moveq	r3, #1
 800bf50:	2300      	movne	r3, #0
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d013      	beq.n	800bf80 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800bf58:	480e      	ldr	r0, [pc, #56]	; (800bf94 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800bf5a:	f005 fadb 	bl	8011514 <__cxa_guard_acquire>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	bf14      	ite	ne
 800bf64:	2301      	movne	r3, #1
 800bf66:	2300      	moveq	r3, #0
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d008      	beq.n	800bf80 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800bf6e:	480a      	ldr	r0, [pc, #40]	; (800bf98 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800bf70:	f7ff fc66 	bl	800b840 <_ZN12TestRegistryC1Ev>
 800bf74:	4807      	ldr	r0, [pc, #28]	; (800bf94 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800bf76:	f005 fad9 	bl	801152c <__cxa_guard_release>
 800bf7a:	4808      	ldr	r0, [pc, #32]	; (800bf9c <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800bf7c:	f005 fafd 	bl	801157a <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800bf80:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800bf88:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	e000      	b.n	800bf90 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800bf8e:	4b02      	ldr	r3, [pc, #8]	; (800bf98 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	20000698 	.word	0x20000698
 800bf98:	20000678 	.word	0x20000678
 800bf9c:	0800bf29 	.word	0x0800bf29
 800bfa0:	20000674 	.word	0x20000674

0800bfa4 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800bfae:	4a04      	ldr	r2, [pc, #16]	; (800bfc0 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	6013      	str	r3, [r2, #0]
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	20000674 	.word	0x20000674

0800bfc4 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00a      	beq.n	800bfea <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	330c      	adds	r3, #12
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	4798      	blx	r3
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	e000      	b.n	800bfec <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800bfea:	2300      	movs	r3, #0
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	6053      	str	r3, [r2, #4]

}
 800bff0:	bf00      	nop
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	609a      	str	r2, [r3, #8]
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	60da      	str	r2, [r3, #12]
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	771a      	strb	r2, [r3, #28]
}
 800c03e:	bf00      	nop
 800c040:	370c      	adds	r7, #12
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800c04a:	b480      	push	{r7}
 800c04c:	b083      	sub	sp, #12
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	751a      	strb	r2, [r3, #20]
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	68d9      	ldr	r1, [r3, #12]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	461a      	mov	r2, r3
 800c07a:	68b8      	ldr	r0, [r7, #8]
 800c07c:	f000 ffaa 	bl	800cfd4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800c086:	2301      	movs	r3, #1
 800c088:	e006      	b.n	800c098 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	332c      	adds	r3, #44	; 0x2c
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	4798      	blx	r3
        return false;
 800c096:	2300      	movs	r3, #0
    }
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800c0a8:	f7ff fb62 	bl	800b770 <_ZN14NullTestPlugin8instanceEv>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	611a      	str	r2, [r3, #16]
}
 800c0b2:	bf00      	nop
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3324      	adds	r3, #36	; 0x24
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	6912      	ldr	r2, [r2, #16]
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	6838      	ldr	r0, [r7, #0]
 800c0d4:	4798      	blx	r3
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	611a      	str	r2, [r3, #16]
}
 800c0dc:	bf00      	nop
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	691b      	ldr	r3, [r3, #16]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff fa52 	bl	800b5b6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800c112:	4603      	mov	r3, r0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	691a      	ldr	r2, [r3, #16]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3328      	adds	r3, #40	; 0x28
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	4610      	mov	r0, r2
 800c138:	4798      	blx	r3
 800c13a:	4602      	mov	r2, r0
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	429a      	cmp	r2, r3
 800c142:	bf0c      	ite	eq
 800c144:	2301      	moveq	r3, #1
 800c146:	2300      	movne	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	691a      	ldr	r2, [r3, #16]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	332c      	adds	r3, #44	; 0x2c
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4610      	mov	r0, r2
 800c15e:	4798      	blx	r3
 800c160:	4602      	mov	r2, r0
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff fa17 	bl	800b59e <_ZN10TestPlugin7getNameEv>
 800c170:	4603      	mov	r3, r0
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	4618      	mov	r0, r3
 800c176:	f7fb f8fa 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00b      	beq.n	800c198 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	332c      	adds	r3, #44	; 0x2c
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4610      	mov	r0, r2
 800c190:	4798      	blx	r3
 800c192:	4602      	mov	r2, r0
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	691a      	ldr	r2, [r3, #16]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3328      	adds	r3, #40	; 0x28
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	4798      	blx	r3
}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
    int count = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	60bb      	str	r3, [r7, #8]
 800c1c6:	f7ff fad3 	bl	800b770 <_ZN14NullTestPlugin8instanceEv>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	bf14      	ite	ne
 800c1d2:	2301      	movne	r3, #1
 800c1d4:	2300      	moveq	r3, #0
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00a      	beq.n	800c1f2 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	332c      	adds	r3, #44	; 0x2c
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	68b8      	ldr	r0, [r7, #8]
 800c1ec:	4798      	blx	r3
 800c1ee:	60b8      	str	r0, [r7, #8]
 800c1f0:	e7e9      	b.n	800c1c6 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
    return tests_;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	685b      	ldr	r3, [r3, #4]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	334c      	adds	r3, #76	; 0x4c
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	4798      	blx	r3
 800c22a:	4602      	mov	r2, r0
 800c22c:	f107 0308 	add.w	r3, r7, #8
 800c230:	4611      	mov	r1, r2
 800c232:	4618      	mov	r0, r3
 800c234:	f002 f8e6 	bl	800e404 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800c238:	f107 0308 	add.w	r3, r7, #8
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	4618      	mov	r0, r3
 800c240:	f002 f96e 	bl	800e520 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800c244:	f107 0308 	add.w	r3, r7, #8
 800c248:	4618      	mov	r0, r3
 800c24a:	f002 fa01 	bl	800e650 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800c24e:	4602      	mov	r2, r0
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800c254:	f107 0308 	add.w	r3, r7, #8
 800c258:	4618      	mov	r0, r3
 800c25a:	f002 f927 	bl	800e4ac <_ZN22UtestShellPointerArrayD1Ev>
}
 800c25e:	bf00      	nop
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b084      	sub	sp, #16
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	334c      	adds	r3, #76	; 0x4c
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	4798      	blx	r3
 800c27a:	4602      	mov	r2, r0
 800c27c:	f107 0308 	add.w	r3, r7, #8
 800c280:	4611      	mov	r1, r2
 800c282:	4618      	mov	r0, r3
 800c284:	f002 f8be 	bl	800e404 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800c288:	f107 0308 	add.w	r3, r7, #8
 800c28c:	4618      	mov	r0, r3
 800c28e:	f002 f983 	bl	800e598 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800c292:	f107 0308 	add.w	r3, r7, #8
 800c296:	4618      	mov	r0, r3
 800c298:	f002 f9da 	bl	800e650 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800c2a2:	f107 0308 	add.w	r3, r7, #8
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f002 f900 	bl	800e4ac <_ZN22UtestShellPointerArrayD1Ev>
}
 800c2ac:	bf00      	nop
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00b      	beq.n	800c2e2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	330c      	adds	r3, #12
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	4798      	blx	r3
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d001      	beq.n	800c2e2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e000      	b.n	800c2e4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d007      	beq.n	800c2f8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	330c      	adds	r3, #12
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	4798      	blx	r3
 800c2f4:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800c2f6:	e7e5      	b.n	800c2c4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800c302:	b590      	push	{r4, r7, lr}
 800c304:	b087      	sub	sp, #28
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	617b      	str	r3, [r7, #20]
    while (current) {
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01e      	beq.n	800c356 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800c318:	f107 030c 	add.w	r3, r7, #12
 800c31c:	6979      	ldr	r1, [r7, #20]
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 fd4e 	bl	800cdc0 <_ZNK10UtestShell7getNameEv>
 800c324:	f107 030c 	add.w	r3, r7, #12
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fb f81f 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800c330:	4603      	mov	r3, r0
 800c332:	461c      	mov	r4, r3
 800c334:	f107 030c 	add.w	r3, r7, #12
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fb f80c 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800c33e:	2c00      	cmp	r4, #0
 800c340:	d001      	beq.n	800c346 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	e008      	b.n	800c358 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	330c      	adds	r3, #12
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6978      	ldr	r0, [r7, #20]
 800c350:	4798      	blx	r3
 800c352:	6178      	str	r0, [r7, #20]
    while (current) {
 800c354:	e7dd      	b.n	800c312 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	371c      	adds	r7, #28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd90      	pop	{r4, r7, pc}

0800c360 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800c360:	b590      	push	{r4, r7, lr}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	617b      	str	r3, [r7, #20]
    while (current) {
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d01e      	beq.n	800c3b4 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800c376:	f107 030c 	add.w	r3, r7, #12
 800c37a:	6979      	ldr	r1, [r7, #20]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 fd2e 	bl	800cdde <_ZNK10UtestShell8getGroupEv>
 800c382:	f107 030c 	add.w	r3, r7, #12
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fa fff0 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800c38e:	4603      	mov	r3, r0
 800c390:	461c      	mov	r4, r3
 800c392:	f107 030c 	add.w	r3, r7, #12
 800c396:	4618      	mov	r0, r3
 800c398:	f7fa ffdd 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800c39c:	2c00      	cmp	r4, #0
 800c39e:	d001      	beq.n	800c3a4 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	e008      	b.n	800c3b6 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	330c      	adds	r3, #12
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6978      	ldr	r0, [r7, #20]
 800c3ae:	4798      	blx	r3
 800c3b0:	6178      	str	r0, [r7, #20]
    while (current) {
 800c3b2:	e7dd      	b.n	800c370 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	371c      	adds	r7, #28
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd90      	pop	{r4, r7, pc}
	...

0800c3c0 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800c3ca:	4a18      	ldr	r2, [pc, #96]	; (800c42c <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	605a      	str	r2, [r3, #4]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	609a      	str	r2, [r3, #8]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	60da      	str	r2, [r3, #12]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	611a      	str	r2, [r3, #16]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	615a      	str	r2, [r3, #20]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	619a      	str	r2, [r3, #24]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	61da      	str	r2, [r3, #28]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	621a      	str	r2, [r3, #32]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	625a      	str	r2, [r3, #36]	; 0x24
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	629a      	str	r2, [r3, #40]	; 0x28
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	62da      	str	r2, [r3, #44]	; 0x2c
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	631a      	str	r2, [r3, #48]	; 0x30
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	080179c4 	.word	0x080179c4

0800c430 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	4a04      	ldr	r2, [pc, #16]	; (800c44c <_ZN10TestResultD1Ev+0x1c>)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	601a      	str	r2, [r3, #0]
{
}
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	080179c4 	.word	0x080179c4

0800c450 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
}
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7ff ffe9 	bl	800c430 <_ZN10TestResultD1Ev>
 800c45e:	2138      	movs	r1, #56	; 0x38
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7f9 fceb 	bl	8005e3c <_ZdlPvj>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3318      	adds	r3, #24
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	4610      	mov	r0, r2
 800c48c:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800c48e:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4798      	blx	r3
 800c494:	4603      	mov	r3, r0
 800c496:	461a      	mov	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	200000a4 	.word	0x200000a4

0800c4a8 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800c4b2:	4b0c      	ldr	r3, [pc, #48]	; (800c4e4 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4798      	blx	r3
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	1ad2      	subs	r2, r2, r3
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	685a      	ldr	r2, [r3, #4]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	331c      	adds	r3, #28
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6879      	ldr	r1, [r7, #4]
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	4798      	blx	r3
}
 800c4da:	bf00      	nop
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	200000a4 	.word	0x200000a4

0800c4e8 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	3310      	adds	r3, #16
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	4610      	mov	r0, r2
 800c504:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800c506:	4b05      	ldr	r3, [pc, #20]	; (800c51c <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4798      	blx	r3
 800c50c:	4603      	mov	r3, r0
 800c50e:	461a      	mov	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	200000a4 	.word	0x200000a4

0800c520 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	332c      	adds	r3, #44	; 0x2c
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	4610      	mov	r0, r2
 800c53c:	4798      	blx	r3
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b082      	sub	sp, #8
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3348      	adds	r3, #72	; 0x48
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	6839      	ldr	r1, [r7, #0]
 800c560:	4610      	mov	r0, r2
 800c562:	4798      	blx	r3
}
 800c564:	bf00      	nop
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800c576:	4b0c      	ldr	r3, [pc, #48]	; (800c5a8 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4798      	blx	r3
 800c57c:	4603      	mov	r3, r0
 800c57e:	461a      	mov	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c584:	1ad2      	subs	r2, r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3314      	adds	r3, #20
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	6879      	ldr	r1, [r7, #4]
 800c59a:	4610      	mov	r0, r2
 800c59c:	4798      	blx	r3

}
 800c59e:	bf00      	nop
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	200000a4 	.word	0x200000a4

0800c5ac <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	333c      	adds	r3, #60	; 0x3c
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6839      	ldr	r1, [r7, #0]
 800c5c6:	4610      	mov	r0, r2
 800c5c8:	4798      	blx	r3
    failureCount_++;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	695b      	ldr	r3, [r3, #20]
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	615a      	str	r2, [r3, #20]
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
    testCount_++;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	1c5a      	adds	r2, r3, #1
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	609a      	str	r2, [r3, #8]
}
 800c5ee:	bf00      	nop
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr

0800c5fa <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b083      	sub	sp, #12
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
    runCount_++;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	1c5a      	adds	r2, r3, #1
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	60da      	str	r2, [r3, #12]
}
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	611a      	str	r2, [r3, #16]
}
 800c62a:	bf00      	nop
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800c636:	b480      	push	{r7}
 800c638:	b083      	sub	sp, #12
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	619a      	str	r2, [r3, #24]
}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	69db      	ldr	r3, [r3, #28]
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	61da      	str	r2, [r3, #28]
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
	...

0800c674 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800c67c:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <_ZN10TestResult12testsStartedEv+0x30>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4798      	blx	r3
 800c682:	4603      	mov	r3, r0
 800c684:	461a      	mov	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3308      	adds	r3, #8
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4610      	mov	r0, r2
 800c69a:	4798      	blx	r3
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	200000a4 	.word	0x200000a4

0800c6a8 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800c6b0:	4b0c      	ldr	r3, [pc, #48]	; (800c6e4 <_ZN10TestResult10testsEndedEv+0x3c>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4798      	blx	r3
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	1ad2      	subs	r2, r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	330c      	adds	r3, #12
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	4610      	mov	r0, r2
 800c6d8:	4798      	blx	r3
}
 800c6da:	bf00      	nop
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	200000a4 	.word	0x200000a4

0800c6e8 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6a1b      	ldr	r3, [r3, #32]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800c730:	b590      	push	{r4, r7, lr}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	ed87 0b04 	vstr	d0, [r7, #16]
 800c73a:	ed87 1b02 	vstr	d1, [r7, #8]
 800c73e:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800c742:	4b2c      	ldr	r3, [pc, #176]	; (800c7f4 <_Z13doubles_equalddd+0xc4>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	ed97 0b04 	vldr	d0, [r7, #16]
 800c74a:	4798      	blx	r3
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10f      	bne.n	800c772 <_Z13doubles_equalddd+0x42>
 800c752:	4b28      	ldr	r3, [pc, #160]	; (800c7f4 <_Z13doubles_equalddd+0xc4>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	ed97 0b02 	vldr	d0, [r7, #8]
 800c75a:	4798      	blx	r3
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d107      	bne.n	800c772 <_Z13doubles_equalddd+0x42>
 800c762:	4b24      	ldr	r3, [pc, #144]	; (800c7f4 <_Z13doubles_equalddd+0xc4>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	ed97 0b00 	vldr	d0, [r7]
 800c76a:	4798      	blx	r3
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <_Z13doubles_equalddd+0x46>
 800c772:	2301      	movs	r3, #1
 800c774:	e000      	b.n	800c778 <_Z13doubles_equalddd+0x48>
 800c776:	2300      	movs	r3, #0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <_Z13doubles_equalddd+0x50>
        return false;
 800c77c:	2300      	movs	r3, #0
 800c77e:	e035      	b.n	800c7ec <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800c780:	4b1d      	ldr	r3, [pc, #116]	; (800c7f8 <_Z13doubles_equalddd+0xc8>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	ed97 0b04 	vldr	d0, [r7, #16]
 800c788:	4798      	blx	r3
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d009      	beq.n	800c7a4 <_Z13doubles_equalddd+0x74>
 800c790:	4b19      	ldr	r3, [pc, #100]	; (800c7f8 <_Z13doubles_equalddd+0xc8>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	ed97 0b02 	vldr	d0, [r7, #8]
 800c798:	4798      	blx	r3
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <_Z13doubles_equalddd+0x74>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e000      	b.n	800c7a6 <_Z13doubles_equalddd+0x76>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e01e      	b.n	800c7ec <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800c7ae:	4b13      	ldr	r3, [pc, #76]	; (800c7fc <_Z13doubles_equalddd+0xcc>)
 800c7b0:	681c      	ldr	r4, [r3, #0]
 800c7b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7ba:	f7f3 fda5 	bl	8000308 <__aeabi_dsub>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	ec43 2b17 	vmov	d7, r2, r3
 800c7c6:	eeb0 0a47 	vmov.f32	s0, s14
 800c7ca:	eef0 0a67 	vmov.f32	s1, s15
 800c7ce:	47a0      	blx	r4
 800c7d0:	ec53 2b10 	vmov	r2, r3, d0
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7dc:	f7f3 ffc0 	bl	8000760 <__aeabi_dcmpge>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d101      	bne.n	800c7ea <_Z13doubles_equalddd+0xba>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	461c      	mov	r4, r3
 800c7ea:	b2e3      	uxtb	r3, r4
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	371c      	adds	r7, #28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd90      	pop	{r4, r7, pc}
 800c7f4:	200000e0 	.word	0x200000e0
 800c7f8:	200000e4 	.word	0x200000e4
 800c7fc:	200000d4 	.word	0x200000d4

0800c800 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	332c      	adds	r3, #44	; 0x2c
    }
 800c80c:	4618      	mov	r0, r3
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
    {
 800c820:	4a0a      	ldr	r2, [pc, #40]	; (800c84c <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	332c      	adds	r3, #44	; 0x2c
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7ff fe00 	bl	800c430 <_ZN10TestResultD1Ev>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	331c      	adds	r3, #28
 800c834:	4618      	mov	r0, r3
 800c836:	f7f7 fdfd 	bl	8004434 <_ZN17ConsoleTestOutputD1Ev>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f000 f943 	bl	800cac8 <_ZN10UtestShellD1Ev>
    }
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4618      	mov	r0, r3
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	08017a0c 	.word	0x08017a0c

0800c850 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
    }
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff ffdd 	bl	800c818 <_ZN22OutsideTestRunnerUTestD1Ev>
 800c85e:	2164      	movs	r1, #100	; 0x64
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7f9 faeb 	bl	8005e3c <_ZdlPvj>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4618      	mov	r0, r3
 800c86a:	3708      	adds	r7, #8
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af02      	add	r7, sp, #8
 800c876:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	2300      	movs	r3, #0
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800c880:	4a0d      	ldr	r2, [pc, #52]	; (800c8b8 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800c882:	490e      	ldr	r1, [pc, #56]	; (800c8bc <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800c884:	f000 f8f8 	bl	800ca78 <_ZN10UtestShellC1EPKcS1_S1_j>
 800c888:	4a0d      	ldr	r2, [pc, #52]	; (800c8c0 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	331c      	adds	r3, #28
 800c892:	4618      	mov	r0, r3
 800c894:	f7f7 fdbc 	bl	8004410 <_ZN17ConsoleTestOutputC1Ev>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	331c      	adds	r3, #28
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	f7ff fd8b 	bl	800c3c0 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3708      	adds	r7, #8
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	08015f58 	.word	0x08015f58
 800c8b8:	08015f68 	.word	0x08015f68
 800c8bc:	08015fa8 	.word	0x08015fa8
 800c8c0:	08017a0c 	.word	0x08017a0c

0800c8c4 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	4801      	ldr	r0, [pc, #4]	; (800c8d0 <__tcf_0+0xc>)
 800c8ca:	f7ff ffa5 	bl	800c818 <_ZN22OutsideTestRunnerUTestD1Ev>
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	2000069c 	.word	0x2000069c

0800c8d4 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800c8d8:	4b12      	ldr	r3, [pc, #72]	; (800c924 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	f3bf 8f5b 	dmb	ish
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	f003 0301 	and.w	r3, r3, #1
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	bf0c      	ite	eq
 800c8ea:	2301      	moveq	r3, #1
 800c8ec:	2300      	movne	r3, #0
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d013      	beq.n	800c91c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800c8f4:	480b      	ldr	r0, [pc, #44]	; (800c924 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c8f6:	f004 fe0d 	bl	8011514 <__cxa_guard_acquire>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	bf14      	ite	ne
 800c900:	2301      	movne	r3, #1
 800c902:	2300      	moveq	r3, #0
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b00      	cmp	r3, #0
 800c908:	d008      	beq.n	800c91c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800c90a:	4807      	ldr	r0, [pc, #28]	; (800c928 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800c90c:	f7ff ffb0 	bl	800c870 <_ZN22OutsideTestRunnerUTestC1Ev>
 800c910:	4804      	ldr	r0, [pc, #16]	; (800c924 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c912:	f004 fe0b 	bl	801152c <__cxa_guard_release>
 800c916:	4805      	ldr	r0, [pc, #20]	; (800c92c <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800c918:	f004 fe2f 	bl	801157a <atexit>
    return instance_;
 800c91c:	4b02      	ldr	r3, [pc, #8]	; (800c928 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800c91e:	4618      	mov	r0, r3
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20000700 	.word	0x20000700
 800c928:	2000069c 	.word	0x2000069c
 800c92c:	0800c8c5 	.word	0x0800c8c5

0800c930 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	330c      	adds	r3, #12
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	4798      	blx	r3
    }
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3314      	adds	r3, #20
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	4798      	blx	r3
    }
 800c960:	bf00      	nop
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3310      	adds	r3, #16
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	4798      	blx	r3
    }
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	605a      	str	r2, [r3, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	683a      	ldr	r2, [r7, #0]
 800c9a2:	609a      	str	r2, [r3, #8]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b086      	sub	sp, #24
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3394      	adds	r3, #148	; 0x94
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	68f9      	ldr	r1, [r7, #12]
 800c9dc:	6938      	ldr	r0, [r7, #16]
 800c9de:	4798      	blx	r3
    }
 800c9e0:	bf00      	nop
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800ca06:	4b05      	ldr	r3, [pc, #20]	; (800ca1c <helperDoRunOneTestSeperateProcess+0x34>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	68f9      	ldr	r1, [r7, #12]
 800ca0e:	6938      	ldr	r0, [r7, #16]
 800ca10:	4798      	blx	r3
    }
 800ca12:	bf00      	nop
 800ca14:	3718      	adds	r7, #24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20000098 	.word	0x20000098

0800ca20 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800ca28:	4a0f      	ldr	r2, [pc, #60]	; (800ca68 <_ZN10UtestShellC1Ev+0x48>)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a0e      	ldr	r2, [pc, #56]	; (800ca6c <_ZN10UtestShellC1Ev+0x4c>)
 800ca32:	605a      	str	r2, [r3, #4]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a0e      	ldr	r2, [pc, #56]	; (800ca70 <_ZN10UtestShellC1Ev+0x50>)
 800ca38:	609a      	str	r2, [r3, #8]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a0d      	ldr	r2, [pc, #52]	; (800ca74 <_ZN10UtestShellC1Ev+0x54>)
 800ca3e:	60da      	str	r2, [r3, #12]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	611a      	str	r2, [r3, #16]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	615a      	str	r2, [r3, #20]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	761a      	strb	r2, [r3, #24]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	765a      	strb	r2, [r3, #25]
{
}
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	08017acc 	.word	0x08017acc
 800ca6c:	08015ff4 	.word	0x08015ff4
 800ca70:	08016008 	.word	0x08016008
 800ca74:	08016018 	.word	0x08016018

0800ca78 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
 800ca84:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800ca86:	4a0f      	ldr	r2, [pc, #60]	; (800cac4 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	605a      	str	r2, [r3, #4]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	609a      	str	r2, [r3, #8]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	60da      	str	r2, [r3, #12]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	611a      	str	r2, [r3, #16]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	615a      	str	r2, [r3, #20]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	761a      	strb	r2, [r3, #24]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	765a      	strb	r2, [r3, #25]
{
}
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4618      	mov	r0, r3
 800caba:	3714      	adds	r7, #20
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	08017acc 	.word	0x08017acc

0800cac8 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	4a04      	ldr	r2, [pc, #16]	; (800cae4 <_ZN10UtestShellD1Ev+0x1c>)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	601a      	str	r2, [r3, #0]
{
}
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	08017acc 	.word	0x08017acc

0800cae8 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
}
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7ff ffe9 	bl	800cac8 <_ZN10UtestShellD1Ev>
 800caf6:	211c      	movs	r1, #28
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7f9 f99f 	bl	8005e3c <_ZdlPvj>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4618      	mov	r0, r3
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3310      	adds	r3, #16
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	4798      	blx	r3
}
 800cb1e:	bf00      	nop
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800cb2c:	4b02      	ldr	r3, [pc, #8]	; (800cb38 <_ZN10UtestShell5crashEv+0x10>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4798      	blx	r3
}
 800cb32:	bf00      	nop
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20000094 	.word	0x20000094

0800cb3c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b088      	sub	sp, #32
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3324      	adds	r3, #36	; 0x24
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800cb5a:	f107 0014 	add.w	r0, r7, #20
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	68f9      	ldr	r1, [r7, #12]
 800cb64:	f7ff ff0e 	bl	800c984 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	337c      	adds	r3, #124	; 0x7c
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	4798      	blx	r3
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d007      	beq.n	800cb8a <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800cb7a:	4b09      	ldr	r3, [pc, #36]	; (800cba0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f107 0214 	add.w	r2, r7, #20
 800cb82:	4611      	mov	r1, r2
 800cb84:	4807      	ldr	r0, [pc, #28]	; (800cba4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800cb86:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800cb88:	e006      	b.n	800cb98 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800cb8a:	4b05      	ldr	r3, [pc, #20]	; (800cba0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f107 0214 	add.w	r2, r7, #20
 800cb92:	4611      	mov	r1, r2
 800cb94:	4804      	ldr	r0, [pc, #16]	; (800cba8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800cb96:	4798      	blx	r3
}
 800cb98:	bf00      	nop
 800cb9a:	3720      	adds	r7, #32
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	200000a0 	.word	0x200000a0
 800cba4:	0800c9e9 	.word	0x0800c9e9
 800cba8:	0800c9b3 	.word	0x0800c9b3

0800cbac <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800cbac:	b590      	push	{r4, r7, lr}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
    return new Utest();
 800cbb4:	22d3      	movs	r2, #211	; 0xd3
 800cbb6:	4906      	ldr	r1, [pc, #24]	; (800cbd0 <_ZN10UtestShell10createTestEv+0x24>)
 800cbb8:	2004      	movs	r0, #4
 800cbba:	f7f9 f92b 	bl	8005e14 <_ZnwjPKci>
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f001 fafd 	bl	800e1c0 <_ZN5UtestC1Ev>
 800cbc6:	4623      	mov	r3, r4
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd90      	pop	{r4, r7, pc}
 800cbd0:	08016028 	.word	0x08016028

0800cbd4 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
    delete test;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d004      	beq.n	800cbee <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	3204      	adds	r2, #4
 800cbe8:	6812      	ldr	r2, [r2, #0]
 800cbea:	4618      	mov	r0, r3
 800cbec:	4790      	blx	r2
}
 800cbee:	bf00      	nop
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
	...

0800cbf8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b088      	sub	sp, #32
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	333c      	adds	r3, #60	; 0x3c
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4940      	ldr	r1, [pc, #256]	; (800cd10 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	3314      	adds	r3, #20
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	68f9      	ldr	r1, [r7, #12]
 800cc1e:	68b8      	ldr	r0, [r7, #8]
 800cc20:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	333c      	adds	r3, #60	; 0x3c
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	493a      	ldr	r1, [pc, #232]	; (800cd14 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800cc30:	f001 fa9c 	bl	800e16c <_ZN10UtestShell10getCurrentEv>
 800cc34:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f001 fa7e 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800cc3c:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f001 fa59 	bl	800e0f8 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800cc46:	68f9      	ldr	r1, [r7, #12]
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f001 fa65 	bl	800e118 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	333c      	adds	r3, #60	; 0x3c
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4930      	ldr	r1, [pc, #192]	; (800cd18 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	4798      	blx	r3
    Utest* testToRun = createTest();
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	3388      	adds	r3, #136	; 0x88
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	4798      	blx	r3
 800cc68:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	333c      	adds	r3, #60	; 0x3c
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	492a      	ldr	r1, [pc, #168]	; (800cd1c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	333c      	adds	r3, #60	; 0x3c
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4927      	ldr	r1, [pc, #156]	; (800cd20 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	4798      	blx	r3
    testToRun->run();
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	3308      	adds	r3, #8
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	6978      	ldr	r0, [r7, #20]
 800cc90:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	333c      	adds	r3, #60	; 0x3c
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4922      	ldr	r1, [pc, #136]	; (800cd24 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800cca0:	69f9      	ldr	r1, [r7, #28]
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f001 fa38 	bl	800e118 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800cca8:	69b9      	ldr	r1, [r7, #24]
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f001 fa24 	bl	800e0f8 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	333c      	adds	r3, #60	; 0x3c
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	491b      	ldr	r1, [pc, #108]	; (800cd28 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	4798      	blx	r3
    destroyTest(testToRun);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	338c      	adds	r3, #140	; 0x8c
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6979      	ldr	r1, [r7, #20]
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	333c      	adds	r3, #60	; 0x3c
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4915      	ldr	r1, [pc, #84]	; (800cd2c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	333c      	adds	r3, #60	; 0x3c
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4913      	ldr	r1, [pc, #76]	; (800cd30 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3318      	adds	r3, #24
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	68f9      	ldr	r1, [r7, #12]
 800ccf4:	68b8      	ldr	r0, [r7, #8]
 800ccf6:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	333c      	adds	r3, #60	; 0x3c
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	490c      	ldr	r1, [pc, #48]	; (800cd34 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	4798      	blx	r3
}
 800cd06:	bf00      	nop
 800cd08:	3720      	adds	r7, #32
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	0801603c 	.word	0x0801603c
 800cd14:	08016060 	.word	0x08016060
 800cd18:	08016080 	.word	0x08016080
 800cd1c:	0801609c 	.word	0x0801609c
 800cd20:	080160b8 	.word	0x080160b8
 800cd24:	080160d4 	.word	0x080160d4
 800cd28:	080160ec 	.word	0x080160ec
 800cd2c:	08016108 	.word	0x08016108
 800cd30:	08016124 	.word	0x08016124
 800cd34:	08016148 	.word	0x08016148

0800cd38 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
    return next_;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	695b      	ldr	r3, [r3, #20]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
    next_ = test;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	615a      	str	r2, [r3, #20]
    return this;
 800cd60:	687b      	ldr	r3, [r7, #4]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00b      	beq.n	800cd96 <_ZN10UtestShell10countTestsEv+0x28>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	695a      	ldr	r2, [r3, #20]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3310      	adds	r3, #16
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	4798      	blx	r3
 800cd90:	4603      	mov	r3, r0
 800cd92:	3301      	adds	r3, #1
 800cd94:	e000      	b.n	800cd98 <_ZN10UtestShell10countTestsEv+0x2a>
 800cd96:	2301      	movs	r3, #1
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
    return "TEST";
 800cdaa:	4904      	ldr	r1, [pc, #16]	; (800cdbc <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7f9 ff1a 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
}
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	0801616c 	.word	0x0801616c

0800cdc0 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7f9 ff08 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
}
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b082      	sub	sp, #8
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	4619      	mov	r1, r3
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7f9 fef9 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
}
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	33a0      	adds	r3, #160	; 0xa0
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	4610      	mov	r0, r2
 800ce14:	4798      	blx	r3
    formattedName += "(";
 800ce16:	490e      	ldr	r1, [pc, #56]	; (800ce50 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7fa fb2b 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7fa fb25 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 800ce2a:	490a      	ldr	r1, [pc, #40]	; (800ce54 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f7fa fb21 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7fa fb1b 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 800ce3e:	4906      	ldr	r1, [pc, #24]	; (800ce58 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7fa fb17 	bl	8007474 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 800ce46:	bf00      	nop
}
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	08016174 	.word	0x08016174
 800ce54:	08016178 	.word	0x08016178
 800ce58:	0801617c 	.word	0x0801617c

0800ce5c <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7e5b      	ldrb	r3, [r3, #25]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <_ZNK10UtestShell7willRunEv>:
{
    getTestResult()->countCheck();
}

bool UtestShell::willRun() const
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
    return true;
 800ce7c:	2301      	movs	r3, #1
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	370c      	adds	r7, #12
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr

0800ce8a <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 800ce8a:	b480      	push	{r7}
 800ce8c:	b083      	sub	sp, #12
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7e1b      	ldrb	r3, [r3, #24]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	370c      	adds	r7, #12
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr

0800cea2 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 800cea2:	b480      	push	{r7}
 800cea4:	b083      	sub	sp, #12
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2201      	movs	r2, #1
 800ceae:	761a      	strb	r2, [r3, #24]
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]

}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	60da      	str	r2, [r3, #12]
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	683a      	ldr	r2, [r7, #0]
 800cefa:	611a      	str	r2, [r3, #16]
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	605a      	str	r2, [r3, #4]
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
    name_ = testName;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	609a      	str	r2, [r3, #8]
}
 800cf34:	bf00      	nop
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7f9 fe48 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
}
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b083      	sub	sp, #12
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	691b      	ldr	r3, [r3, #16]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 800cf76:	b590      	push	{r4, r7, lr}
 800cf78:	b087      	sub	sp, #28
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	60f8      	str	r0, [r7, #12]
 800cf7e:	60b9      	str	r1, [r7, #8]
 800cf80:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	e01f      	b.n	800cfcc <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d01b      	beq.n	800cfca <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 800cf92:	f107 0310 	add.w	r3, r7, #16
 800cf96:	68b9      	ldr	r1, [r7, #8]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7f9 fe24 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800cf9e:	f107 0310 	add.w	r3, r7, #16
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f004 fa88 	bl	80114ba <_ZNK10TestFilter5matchERK12SimpleString>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	461c      	mov	r4, r3
 800cfae:	f107 0310 	add.w	r3, r7, #16
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fa f9cf 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800cfb8:	2c00      	cmp	r4, #0
 800cfba:	d001      	beq.n	800cfc0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e005      	b.n	800cfcc <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f004 fa54 	bl	801146e <_ZNK10TestFilter7getNextEv>
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	e7e0      	b.n	800cf8c <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	371c      	adds	r7, #28
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd90      	pop	{r4, r7, pc}

0800cfd4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff ffc4 	bl	800cf76 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00b      	beq.n	800d00c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	4619      	mov	r1, r3
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f7ff ffba 	bl	800cf76 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800d008:	2301      	movs	r3, #1
 800d00a:	e000      	b.n	800d00e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 800d016:	b590      	push	{r4, r7, lr}
 800d018:	b083      	sub	sp, #12
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	339c      	adds	r3, #156	; 0x9c
 800d026:	681c      	ldr	r4, [r3, #0]
 800d028:	f001 f8b0 	bl	800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d02c:	4603      	mov	r3, r0
 800d02e:	461a      	mov	r2, r3
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 800d036:	bf00      	nop
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd90      	pop	{r4, r7, pc}

0800d03e <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af00      	add	r7, sp, #0
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	60b9      	str	r1, [r7, #8]
 800d048:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2201      	movs	r2, #1
 800d04e:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f001 f871 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d056:	4603      	mov	r3, r0
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	3234      	adds	r2, #52	; 0x34
 800d05c:	6812      	ldr	r2, [r2, #0]
 800d05e:	68b9      	ldr	r1, [r7, #8]
 800d060:	4618      	mov	r0, r3
 800d062:	4790      	blx	r2
    terminator.exitCurrentTest();
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b082      	sub	sp, #8
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
 800d07e:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6838      	ldr	r0, [r7, #0]
 800d088:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800d08a:	bf00      	nop
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d092:	b590      	push	{r4, r7, lr}
 800d094:	b09d      	sub	sp, #116	; 0x74
 800d096:	af04      	add	r7, sp, #16
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	607a      	str	r2, [r7, #4]
 800d09c:	603b      	str	r3, [r7, #0]
 800d09e:	460b      	mov	r3, r1
 800d0a0:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f001 f848 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	3228      	adds	r2, #40	; 0x28
 800d0ae:	6812      	ldr	r2, [r2, #0]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	4790      	blx	r2
    if (!condition)
 800d0b4:	7afb      	ldrb	r3, [r7, #11]
 800d0b6:	f083 0301 	eor.w	r3, r3, #1
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d03f      	beq.n	800d140 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	339c      	adds	r3, #156	; 0x9c
 800d0c6:	681c      	ldr	r4, [r3, #0]
 800d0c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0cc:	6879      	ldr	r1, [r7, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7f9 fd89 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d0d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f9 fd83 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d0e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d0e4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7f9 fd7d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d0ec:	f107 0014 	add.w	r0, r7, #20
 800d0f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d0f4:	9302      	str	r3, [sp, #8]
 800d0f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d0fa:	9301      	str	r3, [sp, #4]
 800d0fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d104:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d106:	68f9      	ldr	r1, [r7, #12]
 800d108:	f7fb ff7c 	bl	8009004 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d10c:	f107 0314 	add.w	r3, r7, #20
 800d110:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d112:	4619      	mov	r1, r3
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	47a0      	blx	r4
 800d118:	f107 0314 	add.w	r3, r7, #20
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fc fddf 	bl	8009ce0 <_ZN12CheckFailureD1Ev>
 800d122:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d126:	4618      	mov	r0, r3
 800d128:	f7fa f915 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d12c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d130:	4618      	mov	r0, r3
 800d132:	f7fa f910 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fa f90b 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800d140:	bf00      	nop
 800d142:	3764      	adds	r7, #100	; 0x64
 800d144:	46bd      	mov	sp, r7
 800d146:	bd90      	pop	{r4, r7, pc}

0800d148 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d148:	b590      	push	{r4, r7, lr}
 800d14a:	b097      	sub	sp, #92	; 0x5c
 800d14c:	af02      	add	r7, sp, #8
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
 800d154:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f000 ffee 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d15c:	4603      	mov	r3, r0
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	3228      	adds	r2, #40	; 0x28
 800d162:	6812      	ldr	r2, [r2, #0]
 800d164:	4618      	mov	r0, r3
 800d166:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	339c      	adds	r3, #156	; 0x9c
 800d16e:	681c      	ldr	r4, [r3, #0]
 800d170:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d174:	68b9      	ldr	r1, [r7, #8]
 800d176:	4618      	mov	r0, r3
 800d178:	f7f9 fd35 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d17c:	f107 0014 	add.w	r0, r7, #20
 800d180:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	68f9      	ldr	r1, [r7, #12]
 800d18c:	f7fb ff82 	bl	8009094 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800d190:	f107 0314 	add.w	r3, r7, #20
 800d194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d196:	4619      	mov	r1, r3
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	47a0      	blx	r4
 800d19c:	f107 0314 	add.w	r3, r7, #20
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7f9 fa0f 	bl	80065c4 <_ZN11FailFailureD1Ev>
 800d1a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fa f8d3 	bl	8007356 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 800d1b0:	bf00      	nop
 800d1b2:	3754      	adds	r7, #84	; 0x54
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd90      	pop	{r4, r7, pc}

0800d1b8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d1b8:	b590      	push	{r4, r7, lr}
 800d1ba:	b0a7      	sub	sp, #156	; 0x9c
 800d1bc:	af04      	add	r7, sp, #16
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f000 ffb6 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	3228      	adds	r2, #40	; 0x28
 800d1d2:	6812      	ldr	r2, [r2, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d102      	bne.n	800d1e4 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d068      	beq.n	800d2b6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d002      	beq.n	800d1f0 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d12a      	bne.n	800d246 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	339c      	adds	r3, #156	; 0x9c
 800d1f6:	681c      	ldr	r4, [r3, #0]
 800d1f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d1fc:	6839      	ldr	r1, [r7, #0]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7f9 fcf1 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d204:	f107 0010 	add.w	r0, r7, #16
 800d208:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d20c:	9302      	str	r3, [sp, #8]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d21a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d21e:	68f9      	ldr	r1, [r7, #12]
 800d220:	f7fc f9be 	bl	80095a0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d224:	f107 0310 	add.w	r3, r7, #16
 800d228:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d22c:	4619      	mov	r1, r3
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	47a0      	blx	r4
 800d232:	f107 0310 	add.w	r3, r7, #16
 800d236:	4618      	mov	r0, r3
 800d238:	f7fc fcca 	bl	8009bd0 <_ZN18StringEqualFailureD1Ev>
 800d23c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d240:	4618      	mov	r0, r3
 800d242:	f7fa f888 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	68b8      	ldr	r0, [r7, #8]
 800d24a:	f7f9 fb09 	bl	8006860 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	bf14      	ite	ne
 800d254:	2301      	movne	r3, #1
 800d256:	2300      	moveq	r3, #0
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d02c      	beq.n	800d2b8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	339c      	adds	r3, #156	; 0x9c
 800d264:	681c      	ldr	r4, [r3, #0]
 800d266:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7f9 fcba 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d272:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800d276:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d27a:	9302      	str	r3, [sp, #8]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d288:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d28c:	68f9      	ldr	r1, [r7, #12]
 800d28e:	f7fc f987 	bl	80095a0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d292:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d296:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d29a:	4619      	mov	r1, r3
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	47a0      	blx	r4
 800d2a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fc fc93 	bl	8009bd0 <_ZN18StringEqualFailureD1Ev>
 800d2aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fa f851 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d2b4:	e000      	b.n	800d2b8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d2b6:	bf00      	nop
}
 800d2b8:	378c      	adds	r7, #140	; 0x8c
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd90      	pop	{r4, r7, pc}

0800d2be <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d2be:	b590      	push	{r4, r7, lr}
 800d2c0:	b0a7      	sub	sp, #156	; 0x9c
 800d2c2:	af04      	add	r7, sp, #16
 800d2c4:	60f8      	str	r0, [r7, #12]
 800d2c6:	60b9      	str	r1, [r7, #8]
 800d2c8:	607a      	str	r2, [r7, #4]
 800d2ca:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f000 ff33 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	3228      	adds	r2, #40	; 0x28
 800d2d8:	6812      	ldr	r2, [r2, #0]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d102      	bne.n	800d2ea <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d06b      	beq.n	800d3c2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d12b      	bne.n	800d34e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	339c      	adds	r3, #156	; 0x9c
 800d2fc:	681c      	ldr	r4, [r3, #0]
 800d2fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d302:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d306:	4618      	mov	r0, r3
 800d308:	f7f9 fc6d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d30c:	f107 0010 	add.w	r0, r7, #16
 800d310:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d314:	9302      	str	r3, [sp, #8]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	9301      	str	r3, [sp, #4]
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d322:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d326:	68f9      	ldr	r1, [r7, #12]
 800d328:	f7fc f93a 	bl	80095a0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d32c:	f107 0310 	add.w	r3, r7, #16
 800d330:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d334:	4619      	mov	r1, r3
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	47a0      	blx	r4
 800d33a:	f107 0310 	add.w	r3, r7, #16
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fc fc46 	bl	8009bd0 <_ZN18StringEqualFailureD1Ev>
 800d344:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fa f804 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	68b8      	ldr	r0, [r7, #8]
 800d354:	f7f9 fac3 	bl	80068de <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	bf14      	ite	ne
 800d35e:	2301      	movne	r3, #1
 800d360:	2300      	moveq	r3, #0
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b00      	cmp	r3, #0
 800d366:	d02d      	beq.n	800d3c4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	339c      	adds	r3, #156	; 0x9c
 800d36e:	681c      	ldr	r4, [r3, #0]
 800d370:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d374:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d378:	4618      	mov	r0, r3
 800d37a:	f7f9 fc34 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d37e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800d382:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d386:	9302      	str	r3, [sp, #8]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d394:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d398:	68f9      	ldr	r1, [r7, #12]
 800d39a:	f7fc f901 	bl	80095a0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d39e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d3a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	47a0      	blx	r4
 800d3ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fc fc0d 	bl	8009bd0 <_ZN18StringEqualFailureD1Ev>
 800d3b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f9 ffcb 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d3c0:	e000      	b.n	800d3c4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d3c2:	bf00      	nop
}
 800d3c4:	378c      	adds	r7, #140	; 0x8c
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd90      	pop	{r4, r7, pc}

0800d3ca <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800d3ca:	b590      	push	{r4, r7, lr}
 800d3cc:	b0ab      	sub	sp, #172	; 0xac
 800d3ce:	af04      	add	r7, sp, #16
 800d3d0:	60f8      	str	r0, [r7, #12]
 800d3d2:	60b9      	str	r1, [r7, #8]
 800d3d4:	607a      	str	r2, [r7, #4]
 800d3d6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f000 fead 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	3228      	adds	r2, #40	; 0x28
 800d3e4:	6812      	ldr	r2, [r2, #0]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d07c      	beq.n	800d4f0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d128      	bne.n	800d454 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3398      	adds	r3, #152	; 0x98
 800d408:	681c      	ldr	r4, [r3, #0]
 800d40a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	4618      	mov	r0, r3
 800d412:	f7f9 fbe8 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d416:	f107 0010 	add.w	r0, r7, #16
 800d41a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d41e:	9302      	str	r3, [sp, #8]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	9301      	str	r3, [sp, #4]
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d42c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d430:	68f9      	ldr	r1, [r7, #12]
 800d432:	f7fc f959 	bl	80096e8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d436:	f107 0310 	add.w	r3, r7, #16
 800d43a:	4619      	mov	r1, r3
 800d43c:	68f8      	ldr	r0, [r7, #12]
 800d43e:	47a0      	blx	r4
 800d440:	f107 0310 	add.w	r3, r7, #16
 800d444:	4618      	mov	r0, r3
 800d446:	f7fc fba1 	bl	8009b8c <_ZN24StringEqualNoCaseFailureD1Ev>
 800d44a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f9 ff81 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 800d454:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7f9 fbc3 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d460:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	4618      	mov	r0, r3
 800d468:	f7f9 fbbd 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d46c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800d470:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d474:	4611      	mov	r1, r2
 800d476:	4618      	mov	r0, r3
 800d478:	f7f9 ff94 	bl	80073a4 <_ZNK12SimpleString12equalsNoCaseERKS_>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f083 0301 	eor.w	r3, r3, #1
 800d482:	b2dc      	uxtb	r4, r3
 800d484:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d488:	4618      	mov	r0, r3
 800d48a:	f7f9 ff64 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d48e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d492:	4618      	mov	r0, r3
 800d494:	f7f9 ff5f 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d498:	2c00      	cmp	r4, #0
 800d49a:	d02a      	beq.n	800d4f2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	3398      	adds	r3, #152	; 0x98
 800d4a2:	681c      	ldr	r4, [r3, #0]
 800d4a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7f9 fb9b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d4b0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800d4b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d4b8:	9302      	str	r3, [sp, #8]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d4ca:	68f9      	ldr	r1, [r7, #12]
 800d4cc:	f7fc f90c 	bl	80096e8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d4d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	47a0      	blx	r4
 800d4da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fc fb54 	bl	8009b8c <_ZN24StringEqualNoCaseFailureD1Ev>
 800d4e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f9 ff34 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d4ee:	e000      	b.n	800d4f2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d4f0:	bf00      	nop
}
 800d4f2:	379c      	adds	r7, #156	; 0x9c
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd90      	pop	{r4, r7, pc}

0800d4f8 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800d4f8:	b590      	push	{r4, r7, lr}
 800d4fa:	b0b3      	sub	sp, #204	; 0xcc
 800d4fc:	af04      	add	r7, sp, #16
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	607a      	str	r2, [r7, #4]
 800d504:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 fe16 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d50c:	4603      	mov	r3, r0
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	3228      	adds	r2, #40	; 0x28
 800d512:	6812      	ldr	r2, [r2, #0]
 800d514:	4618      	mov	r0, r3
 800d516:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d103      	bne.n	800d526 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 80ad 	beq.w	800d680 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d140      	bne.n	800d5b4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3398      	adds	r3, #152	; 0x98
 800d538:	681c      	ldr	r4, [r3, #0]
 800d53a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d53e:	68b9      	ldr	r1, [r7, #8]
 800d540:	4618      	mov	r0, r3
 800d542:	f7f9 fb50 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d546:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d54a:	6879      	ldr	r1, [r7, #4]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7f9 fb4a 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d552:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	4618      	mov	r0, r3
 800d55a:	f7f9 fb44 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d55e:	f107 0010 	add.w	r0, r7, #16
 800d562:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d566:	9302      	str	r3, [sp, #8]
 800d568:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d56c:	9301      	str	r3, [sp, #4]
 800d56e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d578:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d57c:	68f9      	ldr	r1, [r7, #12]
 800d57e:	f7fb fcf7 	bl	8008f70 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d582:	f107 0310 	add.w	r3, r7, #16
 800d586:	4619      	mov	r1, r3
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	47a0      	blx	r4
 800d58c:	f107 0310 	add.w	r3, r7, #16
 800d590:	4618      	mov	r0, r3
 800d592:	f7fc fbc7 	bl	8009d24 <_ZN15ContainsFailureD1Ev>
 800d596:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7f9 fedb 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d5a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7f9 fed6 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d5aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7f9 fed1 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 800d5b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7f9 fb13 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d5c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d5c4:	68b9      	ldr	r1, [r7, #8]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f9 fb0d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d5cc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d5d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d5d4:	4611      	mov	r1, r2
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7f9 fb83 	bl	8006ce2 <_ZNK12SimpleString8containsERKS_>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	f083 0301 	eor.w	r3, r3, #1
 800d5e2:	b2dc      	uxtb	r4, r3
 800d5e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7f9 feb4 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d5ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f9 feaf 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d5f8:	2c00      	cmp	r4, #0
 800d5fa:	d042      	beq.n	800d682 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3398      	adds	r3, #152	; 0x98
 800d602:	681c      	ldr	r4, [r3, #0]
 800d604:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d608:	68b9      	ldr	r1, [r7, #8]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7f9 faeb 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d610:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	4618      	mov	r0, r3
 800d618:	f7f9 fae5 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d61c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d620:	6839      	ldr	r1, [r7, #0]
 800d622:	4618      	mov	r0, r3
 800d624:	f7f9 fadf 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d628:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800d62c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d630:	9302      	str	r3, [sp, #8]
 800d632:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d636:	9301      	str	r3, [sp, #4]
 800d638:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d646:	68f9      	ldr	r1, [r7, #12]
 800d648:	f7fb fc92 	bl	8008f70 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d64c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d650:	4619      	mov	r1, r3
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	47a0      	blx	r4
 800d656:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fc fb62 	bl	8009d24 <_ZN15ContainsFailureD1Ev>
 800d660:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d664:	4618      	mov	r0, r3
 800d666:	f7f9 fe76 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d66a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d66e:	4618      	mov	r0, r3
 800d670:	f7f9 fe71 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d674:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d678:	4618      	mov	r0, r3
 800d67a:	f7f9 fe6c 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d67e:	e000      	b.n	800d682 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d680:	bf00      	nop
}
 800d682:	37bc      	adds	r7, #188	; 0xbc
 800d684:	46bd      	mov	sp, r7
 800d686:	bd90      	pop	{r4, r7, pc}

0800d688 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b0b3      	sub	sp, #204	; 0xcc
 800d68c:	af04      	add	r7, sp, #16
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
 800d694:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 fd4e 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d69c:	4603      	mov	r3, r0
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	3228      	adds	r2, #40	; 0x28
 800d6a2:	6812      	ldr	r2, [r2, #0]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d103      	bne.n	800d6b6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 80ad 	beq.w	800d810 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d140      	bne.n	800d744 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3398      	adds	r3, #152	; 0x98
 800d6c8:	681c      	ldr	r4, [r3, #0]
 800d6ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d6ce:	68b9      	ldr	r1, [r7, #8]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7f9 fa88 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d6d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d6da:	6879      	ldr	r1, [r7, #4]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7f9 fa82 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d6e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7f9 fa7c 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d6ee:	f107 0010 	add.w	r0, r7, #16
 800d6f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d6f6:	9302      	str	r3, [sp, #8]
 800d6f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d708:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d70c:	68f9      	ldr	r1, [r7, #12]
 800d70e:	f7fb fc2f 	bl	8008f70 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d712:	f107 0310 	add.w	r3, r7, #16
 800d716:	4619      	mov	r1, r3
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	47a0      	blx	r4
 800d71c:	f107 0310 	add.w	r3, r7, #16
 800d720:	4618      	mov	r0, r3
 800d722:	f7fc faff 	bl	8009d24 <_ZN15ContainsFailureD1Ev>
 800d726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7f9 fe13 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d730:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d734:	4618      	mov	r0, r3
 800d736:	f7f9 fe0e 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d73a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d73e:	4618      	mov	r0, r3
 800d740:	f7f9 fe09 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 800d744:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d748:	6879      	ldr	r1, [r7, #4]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7f9 fa4b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d750:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d754:	68b9      	ldr	r1, [r7, #8]
 800d756:	4618      	mov	r0, r3
 800d758:	f7f9 fa45 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d75c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d760:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d764:	4611      	mov	r1, r2
 800d766:	4618      	mov	r0, r3
 800d768:	f7f9 fad6 	bl	8006d18 <_ZNK12SimpleString14containsNoCaseERKS_>
 800d76c:	4603      	mov	r3, r0
 800d76e:	f083 0301 	eor.w	r3, r3, #1
 800d772:	b2dc      	uxtb	r4, r3
 800d774:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d778:	4618      	mov	r0, r3
 800d77a:	f7f9 fdec 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d77e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d782:	4618      	mov	r0, r3
 800d784:	f7f9 fde7 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d788:	2c00      	cmp	r4, #0
 800d78a:	d042      	beq.n	800d812 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	3398      	adds	r3, #152	; 0x98
 800d792:	681c      	ldr	r4, [r3, #0]
 800d794:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d798:	68b9      	ldr	r1, [r7, #8]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7f9 fa23 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d7a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d7a4:	6879      	ldr	r1, [r7, #4]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f9 fa1d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d7ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7f9 fa17 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d7b8:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800d7bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d7c0:	9302      	str	r3, [sp, #8]
 800d7c2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d7c6:	9301      	str	r3, [sp, #4]
 800d7c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d7d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d7d6:	68f9      	ldr	r1, [r7, #12]
 800d7d8:	f7fb fbca 	bl	8008f70 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d7dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	47a0      	blx	r4
 800d7e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fc fa9a 	bl	8009d24 <_ZN15ContainsFailureD1Ev>
 800d7f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7f9 fdae 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d7fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7f9 fda9 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d804:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800d808:	4618      	mov	r0, r3
 800d80a:	f7f9 fda4 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d80e:	e000      	b.n	800d812 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d810:	bf00      	nop
}
 800d812:	37bc      	adds	r7, #188	; 0xbc
 800d814:	46bd      	mov	sp, r7
 800d816:	bd90      	pop	{r4, r7, pc}

0800d818 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d818:	b590      	push	{r4, r7, lr}
 800d81a:	b099      	sub	sp, #100	; 0x64
 800d81c:	af04      	add	r7, sp, #16
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 fc86 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d82c:	4603      	mov	r3, r0
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	3228      	adds	r2, #40	; 0x28
 800d832:	6812      	ldr	r2, [r2, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	4790      	blx	r2
    if (expected != actual)
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d027      	beq.n	800d890 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	339c      	adds	r3, #156	; 0x9c
 800d846:	681c      	ldr	r4, [r3, #0]
 800d848:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d84c:	6839      	ldr	r1, [r7, #0]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f9 f9c9 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d854:	f107 0014 	add.w	r0, r7, #20
 800d858:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d85c:	9302      	str	r3, [sp, #8]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	9301      	str	r3, [sp, #4]
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d86a:	68f9      	ldr	r1, [r7, #12]
 800d86c:	f7fb fc30 	bl	80090d0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 800d870:	f107 0314 	add.w	r3, r7, #20
 800d874:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d876:	4619      	mov	r1, r3
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	47a0      	blx	r4
 800d87c:	f107 0314 	add.w	r3, r7, #20
 800d880:	4618      	mov	r0, r3
 800d882:	f7fc fa0b 	bl	8009c9c <_ZN17LongsEqualFailureD1Ev>
 800d886:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7f9 fd63 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800d890:	bf00      	nop
 800d892:	3754      	adds	r7, #84	; 0x54
 800d894:	46bd      	mov	sp, r7
 800d896:	bd90      	pop	{r4, r7, pc}

0800d898 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d898:	b590      	push	{r4, r7, lr}
 800d89a:	b099      	sub	sp, #100	; 0x64
 800d89c:	af04      	add	r7, sp, #16
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 fc46 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	3228      	adds	r2, #40	; 0x28
 800d8b2:	6812      	ldr	r2, [r2, #0]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	4790      	blx	r2
    if (expected != actual)
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d027      	beq.n	800d910 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	339c      	adds	r3, #156	; 0x9c
 800d8c6:	681c      	ldr	r4, [r3, #0]
 800d8c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7f9 f989 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d8d4:	f107 0014 	add.w	r0, r7, #20
 800d8d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d8dc:	9302      	str	r3, [sp, #8]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8ea:	68f9      	ldr	r1, [r7, #12]
 800d8ec:	f7fb fcbc 	bl	8009268 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 800d8f0:	f107 0314 	add.w	r3, r7, #20
 800d8f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	47a0      	blx	r4
 800d8fc:	f107 0314 	add.w	r3, r7, #20
 800d900:	4618      	mov	r0, r3
 800d902:	f7fc f9a9 	bl	8009c58 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800d906:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f9 fd23 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800d910:	bf00      	nop
 800d912:	3754      	adds	r7, #84	; 0x54
 800d914:	46bd      	mov	sp, r7
 800d916:	bd90      	pop	{r4, r7, pc}

0800d918 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d918:	b082      	sub	sp, #8
 800d91a:	b590      	push	{r4, r7, lr}
 800d91c:	b099      	sub	sp, #100	; 0x64
 800d91e:	af02      	add	r7, sp, #8
 800d920:	60f8      	str	r0, [r7, #12]
 800d922:	1d38      	adds	r0, r7, #4
 800d924:	e880 0006 	stmia.w	r0, {r1, r2}
 800d928:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f000 fc04 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d930:	4603      	mov	r3, r0
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	3228      	adds	r2, #40	; 0x28
 800d936:	6812      	ldr	r2, [r2, #0]
 800d938:	4618      	mov	r0, r3
 800d93a:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	339c      	adds	r3, #156	; 0x9c
 800d942:	681c      	ldr	r4, [r3, #0]
 800d944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d948:	4919      	ldr	r1, [pc, #100]	; (800d9b0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7f9 f94b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d950:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d954:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d956:	4618      	mov	r0, r3
 800d958:	f7f9 f945 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d95c:	f107 0014 	add.w	r0, r7, #20
 800d960:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d964:	9301      	str	r3, [sp, #4]
 800d966:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d96e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d970:	68f9      	ldr	r1, [r7, #12]
 800d972:	f7fc f85f 	bl	8009a34 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800d976:	f107 0314 	add.w	r3, r7, #20
 800d97a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d97e:	4619      	mov	r1, r3
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	47a0      	blx	r4
 800d984:	f107 0314 	add.w	r3, r7, #20
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fc f899 	bl	8009ac0 <_ZN25FeatureUnsupportedFailureD1Ev>
 800d98e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d992:	4618      	mov	r0, r3
 800d994:	f7f9 fcdf 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800d998:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7f9 fcda 	bl	8007356 <_ZN12SimpleStringD1Ev>
#endif
}
 800d9a2:	bf00      	nop
 800d9a4:	375c      	adds	r7, #92	; 0x5c
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d9ac:	b002      	add	sp, #8
 800d9ae:	4770      	bx	lr
 800d9b0:	08016180 	.word	0x08016180

0800d9b4 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d9b4:	b082      	sub	sp, #8
 800d9b6:	b590      	push	{r4, r7, lr}
 800d9b8:	b099      	sub	sp, #100	; 0x64
 800d9ba:	af02      	add	r7, sp, #8
 800d9bc:	60f8      	str	r0, [r7, #12]
 800d9be:	1d38      	adds	r0, r7, #4
 800d9c0:	e880 0006 	stmia.w	r0, {r1, r2}
 800d9c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f000 fbb6 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	3228      	adds	r2, #40	; 0x28
 800d9d2:	6812      	ldr	r2, [r2, #0]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	339c      	adds	r3, #156	; 0x9c
 800d9de:	681c      	ldr	r4, [r3, #0]
 800d9e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d9e4:	4919      	ldr	r1, [pc, #100]	; (800da4c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7f9 f8fd 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d9ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d9f0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7f9 f8f7 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800d9f8:	f107 0014 	add.w	r0, r7, #20
 800d9fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800da00:	9301      	str	r3, [sp, #4]
 800da02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800da0c:	68f9      	ldr	r1, [r7, #12]
 800da0e:	f7fc f811 	bl	8009a34 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800da12:	f107 0314 	add.w	r3, r7, #20
 800da16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da1a:	4619      	mov	r1, r3
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	47a0      	blx	r4
 800da20:	f107 0314 	add.w	r3, r7, #20
 800da24:	4618      	mov	r0, r3
 800da26:	f7fc f84b 	bl	8009ac0 <_ZN25FeatureUnsupportedFailureD1Ev>
 800da2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800da2e:	4618      	mov	r0, r3
 800da30:	f7f9 fc91 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800da34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da38:	4618      	mov	r0, r3
 800da3a:	f7f9 fc8c 	bl	8007356 <_ZN12SimpleStringD1Ev>
#endif
}
 800da3e:	bf00      	nop
 800da40:	375c      	adds	r7, #92	; 0x5c
 800da42:	46bd      	mov	sp, r7
 800da44:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800da48:	b002      	add	sp, #8
 800da4a:	4770      	bx	lr
 800da4c:	08016180 	.word	0x08016180

0800da50 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800da50:	b590      	push	{r4, r7, lr}
 800da52:	b099      	sub	sp, #100	; 0x64
 800da54:	af04      	add	r7, sp, #16
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	607b      	str	r3, [r7, #4]
 800da5a:	460b      	mov	r3, r1
 800da5c:	72fb      	strb	r3, [r7, #11]
 800da5e:	4613      	mov	r3, r2
 800da60:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f000 fb68 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800da68:	4603      	mov	r3, r0
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	3228      	adds	r2, #40	; 0x28
 800da6e:	6812      	ldr	r2, [r2, #0]
 800da70:	4618      	mov	r0, r3
 800da72:	4790      	blx	r2
    if (expected != actual)
 800da74:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800da78:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d029      	beq.n	800dad4 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	339c      	adds	r3, #156	; 0x9c
 800da86:	681c      	ldr	r4, [r3, #0]
 800da88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da8c:	6879      	ldr	r1, [r7, #4]
 800da8e:	4618      	mov	r0, r3
 800da90:	f7f9 f8a9 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800da94:	f107 0014 	add.w	r0, r7, #20
 800da98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da9c:	9302      	str	r3, [sp, #8]
 800da9e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800daa2:	9301      	str	r3, [sp, #4]
 800daa4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800daae:	68f9      	ldr	r1, [r7, #12]
 800dab0:	f7fb fca6 	bl	8009400 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 800dab4:	f107 0314 	add.w	r3, r7, #20
 800dab8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800daba:	4619      	mov	r1, r3
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	47a0      	blx	r4
 800dac0:	f107 0314 	add.w	r3, r7, #20
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fc f8a5 	bl	8009c14 <_ZN23SignedBytesEqualFailureD1Ev>
 800daca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dace:	4618      	mov	r0, r3
 800dad0:	f7f9 fc41 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800dad4:	bf00      	nop
 800dad6:	3754      	adds	r7, #84	; 0x54
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd90      	pop	{r4, r7, pc}

0800dadc <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800dadc:	b590      	push	{r4, r7, lr}
 800dade:	b09d      	sub	sp, #116	; 0x74
 800dae0:	af04      	add	r7, sp, #16
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
 800dae8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f000 fb24 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800daf0:	4603      	mov	r3, r0
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	3228      	adds	r2, #40	; 0x28
 800daf6:	6812      	ldr	r2, [r2, #0]
 800daf8:	4618      	mov	r0, r3
 800dafa:	4790      	blx	r2
    if (expected != actual)
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	429a      	cmp	r2, r3
 800db02:	d03f      	beq.n	800db84 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	339c      	adds	r3, #156	; 0x9c
 800db0a:	681c      	ldr	r4, [r3, #0]
 800db0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db10:	68b9      	ldr	r1, [r7, #8]
 800db12:	4618      	mov	r0, r3
 800db14:	f7f9 feec 	bl	80078f0 <_Z10StringFromPKv>
 800db18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800db1c:	6879      	ldr	r1, [r7, #4]
 800db1e:	4618      	mov	r0, r3
 800db20:	f7f9 fee6 	bl	80078f0 <_Z10StringFromPKv>
 800db24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7f9 f85b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800db30:	f107 0014 	add.w	r0, r7, #20
 800db34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db38:	9302      	str	r3, [sp, #8]
 800db3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800db3e:	9301      	str	r3, [sp, #4]
 800db40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800db4a:	68f9      	ldr	r1, [r7, #12]
 800db4c:	f7fb f826 	bl	8008b9c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800db50:	f107 0314 	add.w	r3, r7, #20
 800db54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800db56:	4619      	mov	r1, r3
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	47a0      	blx	r4
 800db5c:	f107 0314 	add.w	r3, r7, #20
 800db60:	4618      	mov	r0, r3
 800db62:	f7fc f967 	bl	8009e34 <_ZN13EqualsFailureD1Ev>
 800db66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7f9 fbf3 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800db70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800db74:	4618      	mov	r0, r3
 800db76:	f7f9 fbee 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800db7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800db7e:	4618      	mov	r0, r3
 800db80:	f7f9 fbe9 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800db84:	bf00      	nop
 800db86:	3764      	adds	r7, #100	; 0x64
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd90      	pop	{r4, r7, pc}

0800db8c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800db8c:	b590      	push	{r4, r7, lr}
 800db8e:	b09d      	sub	sp, #116	; 0x74
 800db90:	af04      	add	r7, sp, #16
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f000 facc 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800dba0:	4603      	mov	r3, r0
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	3228      	adds	r2, #40	; 0x28
 800dba6:	6812      	ldr	r2, [r2, #0]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	4790      	blx	r2
    if (expected != actual)
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d03f      	beq.n	800dc34 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	339c      	adds	r3, #156	; 0x9c
 800dbba:	681c      	ldr	r4, [r3, #0]
 800dbbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dbc0:	68b9      	ldr	r1, [r7, #8]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7f9 febe 	bl	8007944 <_Z10StringFromPFvvE>
 800dbc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dbcc:	6879      	ldr	r1, [r7, #4]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7f9 feb8 	bl	8007944 <_Z10StringFromPFvvE>
 800dbd4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dbd8:	6839      	ldr	r1, [r7, #0]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7f9 f803 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800dbe0:	f107 0014 	add.w	r0, r7, #20
 800dbe4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dbe8:	9302      	str	r3, [sp, #8]
 800dbea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbf8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dbfa:	68f9      	ldr	r1, [r7, #12]
 800dbfc:	f7fa ffce 	bl	8008b9c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800dc00:	f107 0314 	add.w	r3, r7, #20
 800dc04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc06:	4619      	mov	r1, r3
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	47a0      	blx	r4
 800dc0c:	f107 0314 	add.w	r3, r7, #20
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fc f90f 	bl	8009e34 <_ZN13EqualsFailureD1Ev>
 800dc16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7f9 fb9b 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800dc20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7f9 fb96 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800dc2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7f9 fb91 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800dc34:	bf00      	nop
 800dc36:	3764      	adds	r7, #100	; 0x64
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd90      	pop	{r4, r7, pc}

0800dc3c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800dc3c:	b590      	push	{r4, r7, lr}
 800dc3e:	b09d      	sub	sp, #116	; 0x74
 800dc40:	af02      	add	r7, sp, #8
 800dc42:	6278      	str	r0, [r7, #36]	; 0x24
 800dc44:	ed87 0b06 	vstr	d0, [r7, #24]
 800dc48:	ed87 1b04 	vstr	d1, [r7, #16]
 800dc4c:	ed87 2b02 	vstr	d2, [r7, #8]
 800dc50:	6239      	str	r1, [r7, #32]
 800dc52:	607a      	str	r2, [r7, #4]
 800dc54:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800dc56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc58:	f000 fa6e 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	3228      	adds	r2, #40	; 0x28
 800dc62:	6812      	ldr	r2, [r2, #0]
 800dc64:	4618      	mov	r0, r3
 800dc66:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 800dc68:	ed97 2b02 	vldr	d2, [r7, #8]
 800dc6c:	ed97 1b04 	vldr	d1, [r7, #16]
 800dc70:	ed97 0b06 	vldr	d0, [r7, #24]
 800dc74:	f7fe fd5c 	bl	800c730 <_Z13doubles_equalddd>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	f083 0301 	eor.w	r3, r3, #1
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d029      	beq.n	800dcd8 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 800dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	339c      	adds	r3, #156	; 0x9c
 800dc8a:	681c      	ldr	r4, [r3, #0]
 800dc8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dc90:	6a39      	ldr	r1, [r7, #32]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7f8 ffa7 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800dc98:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800dc9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	ed97 2b02 	vldr	d2, [r7, #8]
 800dca6:	ed97 1b04 	vldr	d1, [r7, #16]
 800dcaa:	ed97 0b06 	vldr	d0, [r7, #24]
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dcb4:	f7fa ffb4 	bl	8008c20 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 800dcb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcc2:	47a0      	blx	r4
 800dcc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fc f891 	bl	8009df0 <_ZN19DoublesEqualFailureD1Ev>
 800dcce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7f9 fb3f 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800dcd8:	bf00      	nop
 800dcda:	376c      	adds	r7, #108	; 0x6c
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd90      	pop	{r4, r7, pc}

0800dce0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b0a7      	sub	sp, #156	; 0x9c
 800dce4:	af04      	add	r7, sp, #16
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f000 fa22 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	3228      	adds	r2, #40	; 0x28
 800dcfa:	6812      	ldr	r2, [r2, #0]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	4790      	blx	r2
	if (length == 0) return;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d075      	beq.n	800ddf2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d102      	bne.n	800dd12 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d071      	beq.n	800ddf6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d12d      	bne.n	800dd7a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	339c      	adds	r3, #156	; 0x9c
 800dd24:	681c      	ldr	r4, [r3, #0]
 800dd26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd2a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7f8 ff59 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800dd34:	f107 0010 	add.w	r0, r7, #16
 800dd38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd3c:	9303      	str	r3, [sp, #12]
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	9302      	str	r3, [sp, #8]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	9300      	str	r3, [sp, #0]
 800dd4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd4e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dd52:	68f9      	ldr	r1, [r7, #12]
 800dd54:	f7fb fd82 	bl	800985c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800dd58:	f107 0310 	add.w	r3, r7, #16
 800dd5c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800dd60:	4619      	mov	r1, r3
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	47a0      	blx	r4
 800dd66:	f107 0310 	add.w	r3, r7, #16
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fb feec 	bl	8009b48 <_ZN18BinaryEqualFailureD1Ev>
 800dd70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7f9 faee 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 800dd7a:	683a      	ldr	r2, [r7, #0]
 800dd7c:	6879      	ldr	r1, [r7, #4]
 800dd7e:	68b8      	ldr	r0, [r7, #8]
 800dd80:	f7f8 fe50 	bl	8006a24 <_ZN12SimpleString6MemCmpEPKvS1_j>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	bf14      	ite	ne
 800dd8a:	2301      	movne	r3, #1
 800dd8c:	2300      	moveq	r3, #0
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d031      	beq.n	800ddf8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	339c      	adds	r3, #156	; 0x9c
 800dd9a:	681c      	ldr	r4, [r3, #0]
 800dd9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dda0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7f8 ff1e 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ddaa:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800ddae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ddb2:	9303      	str	r3, [sp, #12]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	9302      	str	r3, [sp, #8]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	9301      	str	r3, [sp, #4]
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ddc4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ddc8:	68f9      	ldr	r1, [r7, #12]
 800ddca:	f7fb fd47 	bl	800985c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800ddce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ddd2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	47a0      	blx	r4
 800dddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fb feb1 	bl	8009b48 <_ZN18BinaryEqualFailureD1Ev>
 800dde6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f9 fab3 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ddf0:	e002      	b.n	800ddf8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 800ddf2:	bf00      	nop
 800ddf4:	e000      	b.n	800ddf8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800ddf6:	bf00      	nop
}
 800ddf8:	378c      	adds	r7, #140	; 0x8c
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd90      	pop	{r4, r7, pc}

0800ddfe <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800ddfe:	b590      	push	{r4, r7, lr}
 800de00:	b09b      	sub	sp, #108	; 0x6c
 800de02:	af06      	add	r7, sp, #24
 800de04:	60f8      	str	r0, [r7, #12]
 800de06:	60b9      	str	r1, [r7, #8]
 800de08:	607a      	str	r2, [r7, #4]
 800de0a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f000 f993 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800de12:	4603      	mov	r3, r0
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	3228      	adds	r2, #40	; 0x28
 800de18:	6812      	ldr	r2, [r2, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	405a      	eors	r2, r3
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	4013      	ands	r3, r2
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d02b      	beq.n	800de84 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	339c      	adds	r3, #156	; 0x9c
 800de32:	681c      	ldr	r4, [r3, #0]
 800de34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7f8 fed3 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800de40:	f107 0014 	add.w	r0, r7, #20
 800de44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de48:	9304      	str	r3, [sp, #16]
 800de4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800de5e:	68f9      	ldr	r1, [r7, #12]
 800de60:	f7fb fd8c 	bl	800997c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 800de64:	f107 0314 	add.w	r3, r7, #20
 800de68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800de6a:	4619      	mov	r1, r3
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	47a0      	blx	r4
 800de70:	f107 0314 	add.w	r3, r7, #20
 800de74:	4618      	mov	r0, r3
 800de76:	f7fb fe45 	bl	8009b04 <_ZN16BitsEqualFailureD1Ev>
 800de7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de7e:	4618      	mov	r0, r3
 800de80:	f7f9 fa69 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800de84:	bf00      	nop
 800de86:	3754      	adds	r7, #84	; 0x54
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd90      	pop	{r4, r7, pc}

0800de8c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 800de8c:	b590      	push	{r4, r7, lr}
 800de8e:	b09d      	sub	sp, #116	; 0x74
 800de90:	af04      	add	r7, sp, #16
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	460b      	mov	r3, r1
 800de9a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f000 f94b 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800dea2:	4603      	mov	r3, r0
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	3228      	adds	r2, #40	; 0x28
 800dea8:	6812      	ldr	r2, [r2, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	4790      	blx	r2
    if (failed)
 800deae:	7afb      	ldrb	r3, [r7, #11]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d03f      	beq.n	800df34 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	339c      	adds	r3, #156	; 0x9c
 800deba:	681c      	ldr	r4, [r3, #0]
 800debc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7f8 fe8f 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800dec8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7f8 fe89 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ded4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ded8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800deda:	4618      	mov	r0, r3
 800dedc:	f7f8 fe83 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800dee0:	f107 0014 	add.w	r0, r7, #20
 800dee4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dee8:	9302      	str	r3, [sp, #8]
 800deea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800deee:	9301      	str	r3, [sp, #4]
 800def0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800def8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800defa:	68f9      	ldr	r1, [r7, #12]
 800defc:	f7fa ff42 	bl	8008d84 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800df00:	f107 0314 	add.w	r3, r7, #20
 800df04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800df06:	4619      	mov	r1, r3
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	47a0      	blx	r4
 800df0c:	f107 0314 	add.w	r3, r7, #20
 800df10:	4618      	mov	r0, r3
 800df12:	f7fb ff4b 	bl	8009dac <_ZN17CheckEqualFailureD1Ev>
 800df16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7f9 fa1b 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800df20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800df24:	4618      	mov	r0, r3
 800df26:	f7f9 fa16 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800df2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df2e:	4618      	mov	r0, r3
 800df30:	f7f9 fa11 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800df34:	bf00      	nop
 800df36:	3764      	adds	r7, #100	; 0x64
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd90      	pop	{r4, r7, pc}

0800df3c <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 800df3c:	b590      	push	{r4, r7, lr}
 800df3e:	b09d      	sub	sp, #116	; 0x74
 800df40:	af04      	add	r7, sp, #16
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	607a      	str	r2, [r7, #4]
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	460b      	mov	r3, r1
 800df4a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f000 f8f3 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800df52:	4603      	mov	r3, r0
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	3228      	adds	r2, #40	; 0x28
 800df58:	6812      	ldr	r2, [r2, #0]
 800df5a:	4618      	mov	r0, r3
 800df5c:	4790      	blx	r2
    if (!comparison)
 800df5e:	7afb      	ldrb	r3, [r7, #11]
 800df60:	f083 0301 	eor.w	r3, r3, #1
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	d03f      	beq.n	800dfea <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	339c      	adds	r3, #156	; 0x9c
 800df70:	681c      	ldr	r4, [r3, #0]
 800df72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df76:	6879      	ldr	r1, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7f8 fe34 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800df7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	4618      	mov	r0, r3
 800df86:	f7f8 fe2e 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800df8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800df8e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800df90:	4618      	mov	r0, r3
 800df92:	f7f8 fe28 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800df96:	f107 0014 	add.w	r0, r7, #20
 800df9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800df9e:	9302      	str	r3, [sp, #8]
 800dfa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dfb0:	68f9      	ldr	r1, [r7, #12]
 800dfb2:	f7fa ff95 	bl	8008ee0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800dfb6:	f107 0314 	add.w	r3, r7, #20
 800dfba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	47a0      	blx	r4
 800dfc2:	f107 0314 	add.w	r3, r7, #20
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fb fece 	bl	8009d68 <_ZN17ComparisonFailureD1Ev>
 800dfcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7f9 f9c0 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800dfd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7f9 f9bb 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800dfe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7f9 f9b6 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800dfea:	bf00      	nop
 800dfec:	3764      	adds	r7, #100	; 0x64
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd90      	pop	{r4, r7, pc}
	...

0800dff4 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 800dff4:	b5b0      	push	{r4, r5, r7, lr}
 800dff6:	b088      	sub	sp, #32
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 800e002:	f107 0310 	add.w	r3, r7, #16
 800e006:	4924      	ldr	r1, [pc, #144]	; (800e098 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 800e008:	4618      	mov	r0, r3
 800e00a:	f7f8 fdec 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 800e00e:	f107 0310 	add.w	r3, r7, #16
 800e012:	6879      	ldr	r1, [r7, #4]
 800e014:	4618      	mov	r0, r3
 800e016:	f7f9 fa2d 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 800e01a:	f107 0310 	add.w	r3, r7, #16
 800e01e:	491f      	ldr	r1, [pc, #124]	; (800e09c <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 800e020:	4618      	mov	r0, r3
 800e022:	f7f9 fa27 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 800e026:	f107 0318 	add.w	r3, r7, #24
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7f9 fe47 	bl	8007cc0 <_Z10StringFromj>
 800e032:	f107 0218 	add.w	r2, r7, #24
 800e036:	f107 0310 	add.w	r3, r7, #16
 800e03a:	4611      	mov	r1, r2
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7f9 fa07 	bl	8007450 <_ZN12SimpleStringpLERKS_>
 800e042:	f107 0318 	add.w	r3, r7, #24
 800e046:	4618      	mov	r0, r3
 800e048:	f7f9 f985 	bl	8007356 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 800e04c:	f107 0310 	add.w	r3, r7, #16
 800e050:	4913      	ldr	r1, [pc, #76]	; (800e0a0 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 800e052:	4618      	mov	r0, r3
 800e054:	f7f9 fa0e 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 800e058:	f107 0310 	add.w	r3, r7, #16
 800e05c:	68b9      	ldr	r1, [r7, #8]
 800e05e:	4618      	mov	r0, r3
 800e060:	f7f9 fa08 	bl	8007474 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f000 f867 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800e06a:	4604      	mov	r4, r0
 800e06c:	6823      	ldr	r3, [r4, #0]
 800e06e:	3338      	adds	r3, #56	; 0x38
 800e070:	681d      	ldr	r5, [r3, #0]
 800e072:	f107 0310 	add.w	r3, r7, #16
 800e076:	4618      	mov	r0, r3
 800e078:	f7f9 f940 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800e07c:	4603      	mov	r3, r0
 800e07e:	4619      	mov	r1, r3
 800e080:	4620      	mov	r0, r4
 800e082:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 800e084:	f107 0310 	add.w	r3, r7, #16
 800e088:	4618      	mov	r0, r3
 800e08a:	f7f9 f964 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800e08e:	bf00      	nop
 800e090:	3720      	adds	r7, #32
 800e092:	46bd      	mov	sp, r7
 800e094:	bdb0      	pop	{r4, r5, r7, pc}
 800e096:	bf00      	nop
 800e098:	08016198 	.word	0x08016198
 800e09c:	0801619c 	.word	0x0801619c
 800e0a0:	080161a0 	.word	0x080161a0

0800e0a4 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 800e0a4:	b590      	push	{r4, r7, lr}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	607a      	str	r2, [r7, #4]
 800e0b0:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	3370      	adds	r3, #112	; 0x70
 800e0b8:	681c      	ldr	r4, [r3, #0]
 800e0ba:	68b8      	ldr	r0, [r7, #8]
 800e0bc:	f7f9 f91e 	bl	80072fc <_ZNK12SimpleString12asCharStringEv>
 800e0c0:	4601      	mov	r1, r0
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	47a0      	blx	r4
}
 800e0ca:	bf00      	nop
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}

0800e0d2 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b082      	sub	sp, #8
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f82b 	bl	800e138 <_ZN10UtestShell13getTestResultEv>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	323c      	adds	r2, #60	; 0x3c
 800e0e8:	6812      	ldr	r2, [r2, #0]
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	4790      	blx	r2
}
 800e0f0:	bf00      	nop
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 800e102:	4a04      	ldr	r2, [pc, #16]	; (800e114 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	6013      	str	r3, [r2, #0]
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	20000704 	.word	0x20000704

0800e118 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 800e122:	4a04      	ldr	r2, [pc, #16]	; (800e134 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	6013      	str	r3, [r2, #0]
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr
 800e134:	20000708 	.word	0x20000708

0800e138 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 800e140:	4b09      	ldr	r3, [pc, #36]	; (800e168 <_ZN10UtestShell13getTestResultEv+0x30>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d109      	bne.n	800e15c <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 800e148:	f7fe fbc4 	bl	800c8d4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800e14c:	4603      	mov	r3, r0
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	32a4      	adds	r2, #164	; 0xa4
 800e152:	6812      	ldr	r2, [r2, #0]
 800e154:	4618      	mov	r0, r3
 800e156:	4790      	blx	r2
 800e158:	4603      	mov	r3, r0
 800e15a:	e001      	b.n	800e160 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 800e15c:	4b02      	ldr	r3, [pc, #8]	; (800e168 <_ZN10UtestShell13getTestResultEv+0x30>)
 800e15e:	681b      	ldr	r3, [r3, #0]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	20000704 	.word	0x20000704

0800e16c <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 800e170:	4b05      	ldr	r3, [pc, #20]	; (800e188 <_ZN10UtestShell10getCurrentEv+0x1c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d103      	bne.n	800e180 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 800e178:	f7fe fbac 	bl	800c8d4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800e17c:	4603      	mov	r3, r0
 800e17e:	e001      	b.n	800e184 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 800e180:	4b01      	ldr	r3, [pc, #4]	; (800e188 <_ZN10UtestShell10getCurrentEv+0x1c>)
 800e182:	681b      	ldr	r3, [r3, #0]
}
 800e184:	4618      	mov	r0, r3
 800e186:	bd80      	pop	{r7, pc}
 800e188:	20000708 	.word	0x20000708

0800e18c <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 800e18c:	b480      	push	{r7}
 800e18e:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 800e190:	4b03      	ldr	r3, [pc, #12]	; (800e1a0 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 800e192:	681b      	ldr	r3, [r3, #0]
}
 800e194:	4618      	mov	r0, r3
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	20000090 	.word	0x20000090

0800e1a4 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 800e1a8:	4b03      	ldr	r3, [pc, #12]	; (800e1b8 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 800e1aa:	4a04      	ldr	r2, [pc, #16]	; (800e1bc <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 800e1ac:	601a      	str	r2, [r3, #0]
}
 800e1ae:	bf00      	nop
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	20000090 	.word	0x20000090
 800e1bc:	2000008c 	.word	0x2000008c

0800e1c0 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	4a04      	ldr	r2, [pc, #16]	; (800e1dc <_ZN5UtestC1Ev+0x1c>)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	601a      	str	r2, [r3, #0]
{
}
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr
 800e1dc:	08017bc8 	.word	0x08017bc8

0800e1e0 <_ZN5UtestD1Ev>:

Utest::~Utest()
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	4a04      	ldr	r2, [pc, #16]	; (800e1fc <_ZN5UtestD1Ev+0x1c>)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	601a      	str	r2, [r3, #0]
{
}
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr
 800e1fc:	08017bc8 	.word	0x08017bc8

0800e200 <_ZN5UtestD0Ev>:
Utest::~Utest()
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
}
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f7ff ffe9 	bl	800e1e0 <_ZN5UtestD1Ev>
 800e20e:	2104      	movs	r1, #4
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7f7 fe13 	bl	8005e3c <_ZdlPvj>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4618      	mov	r0, r3
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 800e228:	4b0d      	ldr	r3, [pc, #52]	; (800e260 <_ZN5Utest3runEv+0x40>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6879      	ldr	r1, [r7, #4]
 800e22e:	480d      	ldr	r0, [pc, #52]	; (800e264 <_ZN5Utest3runEv+0x44>)
 800e230:	4798      	blx	r3
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	bf14      	ite	ne
 800e238:	2301      	movne	r3, #1
 800e23a:	2300      	moveq	r3, #0
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d004      	beq.n	800e24c <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 800e242:	4b07      	ldr	r3, [pc, #28]	; (800e260 <_ZN5Utest3runEv+0x40>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	4807      	ldr	r0, [pc, #28]	; (800e268 <_ZN5Utest3runEv+0x48>)
 800e24a:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 800e24c:	4b04      	ldr	r3, [pc, #16]	; (800e260 <_ZN5Utest3runEv+0x40>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	6879      	ldr	r1, [r7, #4]
 800e252:	4806      	ldr	r0, [pc, #24]	; (800e26c <_ZN5Utest3runEv+0x4c>)
 800e254:	4798      	blx	r3
}
 800e256:	bf00      	nop
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	200000a0 	.word	0x200000a0
 800e264:	0800c931 	.word	0x0800c931
 800e268:	0800c94d 	.word	0x0800c94d
 800e26c:	0800c969 	.word	0x0800c969

0800e270 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
}
 800e278:	bf00      	nop
 800e27a:	370c      	adds	r7, #12
 800e27c:	46bd      	mov	sp, r7
 800e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e282:	4770      	bx	lr

0800e284 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
}
 800e28c:	bf00      	nop
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
}
 800e2a0:	bf00      	nop
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	4a04      	ldr	r2, [pc, #16]	; (800e2c8 <_ZN14TestTerminatorD1Ev+0x1c>)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	601a      	str	r2, [r3, #0]
{
}
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr
 800e2c8:	08017bb4 	.word	0x08017bb4

0800e2cc <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	f107 030c 	add.w	r3, r7, #12
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7f7 ff6f 	bl	80061c0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800e2e2:	f107 030c 	add.w	r3, r7, #12
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f000 f82c 	bl	800e344 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 800e2ec:	f107 030c 	add.w	r3, r7, #12
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f000 f835 	bl	800e360 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 800e2f6:	bf00      	nop
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
	...

0800e300 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	4a05      	ldr	r2, [pc, #20]	; (800e320 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	601a      	str	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff ffcb 	bl	800e2ac <_ZN14TestTerminatorD1Ev>
{
}
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4618      	mov	r0, r3
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	08017ba0 	.word	0x08017ba0

0800e324 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
}
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7ff ffe7 	bl	800e300 <_ZN20NormalTestTerminatorD1Ev>
 800e332:	2104      	movs	r1, #4
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7f7 fd81 	bl	8005e3c <_ZdlPvj>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4618      	mov	r0, r3
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 800e34c:	4b03      	ldr	r3, [pc, #12]	; (800e35c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800e352:	bf00      	nop
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	2000009c 	.word	0x2000009c

0800e360 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	4a05      	ldr	r2, [pc, #20]	; (800e380 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	601a      	str	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff ff9b 	bl	800e2ac <_ZN14TestTerminatorD1Ev>
{
}
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4618      	mov	r0, r3
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	08017b8c 	.word	0x08017b8c

0800e384 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
}
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7ff ffe7 	bl	800e360 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800e392:	2104      	movs	r1, #4
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7f7 fd51 	bl	8005e3c <_ZdlPvj>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 800e3ac:	f7fe fbbc 	bl	800cb28 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7ff ff8a 	bl	800e2cc <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	4a05      	ldr	r2, [pc, #20]	; (800e3e0 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7ff ff95 	bl	800e300 <_ZN20NormalTestTerminatorD1Ev>
{
}
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	08017b78 	.word	0x08017b78

0800e3e4 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
}
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff ffe7 	bl	800e3c0 <_ZN22CrashingTestTerminatorD1Ev>
 800e3f2:	2104      	movs	r1, #4
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f7f7 fd21 	bl	8005e3c <_ZdlPvj>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	601a      	str	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d007      	beq.n	800e430 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	3310      	adds	r3, #16
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6838      	ldr	r0, [r7, #0]
 800e42a:	4798      	blx	r3
 800e42c:	4603      	mov	r3, r0
 800e42e:	e000      	b.n	800e432 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 800e430:	2300      	movs	r3, #0
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d02d      	beq.n	800e49a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800e446:	4293      	cmp	r3, r2
 800e448:	d201      	bcs.n	800e44e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	e001      	b.n	800e452 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 800e44e:	f04f 33ff 	mov.w	r3, #4294967295
 800e452:	f240 3237 	movw	r2, #823	; 0x337
 800e456:	4914      	ldr	r1, [pc, #80]	; (800e4a8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 800e458:	4618      	mov	r0, r3
 800e45a:	f7f7 fcff 	bl	8005e5c <_ZnajPKci>
 800e45e:	4602      	mov	r2, r0
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800e468:	2300      	movs	r3, #0
 800e46a:	60bb      	str	r3, [r7, #8]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	429a      	cmp	r2, r3
 800e474:	d212      	bcs.n	800e49c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	4413      	add	r3, r2
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	330c      	adds	r3, #12
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	4798      	blx	r3
 800e490:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	3301      	adds	r3, #1
 800e496:	60bb      	str	r3, [r7, #8]
 800e498:	e7e8      	b.n	800e46c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 800e49a:	bf00      	nop
    }
}
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	08016028 	.word	0x08016028

0800e4ac <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d004      	beq.n	800e4c6 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7f7 fcdf 	bl	8005e84 <_ZdaPv>
}
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3708      	adds	r7, #8
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	4413      	add	r3, r2
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	4413      	add	r3, r2
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	697a      	ldr	r2, [r7, #20]
 800e504:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	601a      	str	r2, [r3, #0]
}
 800e514:	bf00      	nop
 800e516:	371c      	adds	r7, #28
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr

0800e520 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d028      	beq.n	800e584 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 800e532:	4b17      	ldr	r3, [pc, #92]	; (800e590 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	6838      	ldr	r0, [r7, #0]
 800e538:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	3b01      	subs	r3, #1
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d019      	beq.n	800e57c <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d01b      	beq.n	800e588 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 800e550:	4b10      	ldr	r3, [pc, #64]	; (800e594 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4798      	blx	r3
 800e556:	4603      	mov	r3, r0
 800e558:	461a      	mov	r2, r3
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	3301      	adds	r3, #1
 800e55e:	fbb2 f1f3 	udiv	r1, r2, r3
 800e562:	fb03 f301 	mul.w	r3, r3, r1
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	68f9      	ldr	r1, [r7, #12]
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff ffae 	bl	800e4d0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3b01      	subs	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
 800e57a:	e7e2      	b.n	800e542 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 f834 	bl	800e5ea <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800e582:	e002      	b.n	800e58a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 800e584:	bf00      	nop
 800e586:	e000      	b.n	800e58a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 800e588:	bf00      	nop
}
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	200000d8 	.word	0x200000d8
 800e594:	200000dc 	.word	0x200000dc

0800e598 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d01c      	beq.n	800e5e2 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	085b      	lsrs	r3, r3, #1
 800e5ae:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	697a      	ldr	r2, [r7, #20]
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d20e      	bcs.n	800e5da <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	6979      	ldr	r1, [r7, #20]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff ff7f 	bl	800e4d0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	617b      	str	r3, [r7, #20]
 800e5d8:	e7ec      	b.n	800e5b4 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f805 	bl	800e5ea <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800e5e0:	e000      	b.n	800e5e4 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 800e5e2:	bf00      	nop
}
 800e5e4:	3718      	adds	r7, #24
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b084      	sub	sp, #16
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	60bb      	str	r3, [r7, #8]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	68ba      	ldr	r2, [r7, #8]
 800e600:	429a      	cmp	r2, r3
 800e602:	d221      	bcs.n	800e648 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6859      	ldr	r1, [r3, #4]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	1acb      	subs	r3, r1, r3
 800e610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e614:	3b01      	subs	r3, #1
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4413      	add	r3, r2
 800e61a:	6818      	ldr	r0, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6859      	ldr	r1, [r3, #4]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	1acb      	subs	r3, r1, r3
 800e628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e62c:	3b01      	subs	r3, #1
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4413      	add	r3, r2
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	3308      	adds	r3, #8
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68f9      	ldr	r1, [r7, #12]
 800e63c:	4798      	blx	r3
 800e63e:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	3301      	adds	r3, #1
 800e644:	60bb      	str	r3, [r7, #8]
 800e646:	e7d8      	b.n	800e5fa <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 800e648:	bf00      	nop
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
    return get(0);
 800e658:	2100      	movs	r1, #0
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 f805 	bl	800e66a <_ZNK22UtestShellPointerArray3getEj>
 800e660:	4603      	mov	r3, r0
}
 800e662:	4618      	mov	r0, r3
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	683a      	ldr	r2, [r7, #0]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d301      	bcc.n	800e682 <_ZNK22UtestShellPointerArray3getEj+0x18>
 800e67e:	2300      	movs	r3, #0
 800e680:	e005      	b.n	800e68e <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	681b      	ldr	r3, [r3, #0]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
	...

0800e69c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
 800e6a8:	603b      	str	r3, [r7, #0]
 800e6aa:	4a10      	ldr	r2, [pc, #64]	; (800e6ec <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 800e6b0:	6879      	ldr	r1, [r7, #4]
 800e6b2:	68b8      	ldr	r0, [r7, #8]
 800e6b4:	f7fe fc28 	bl	800cf08 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 800e6b8:	6839      	ldr	r1, [r7, #0]
 800e6ba:	68b8      	ldr	r0, [r7, #8]
 800e6bc:	f7fe fc32 	bl	800cf24 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 800e6c0:	69b9      	ldr	r1, [r7, #24]
 800e6c2:	68b8      	ldr	r0, [r7, #8]
 800e6c4:	f7fe fc04 	bl	800ced0 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 800e6c8:	69f9      	ldr	r1, [r7, #28]
 800e6ca:	68b8      	ldr	r0, [r7, #8]
 800e6cc:	f7fe fc0e 	bl	800ceec <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 800e6d0:	f7fd fc32 	bl	800bf38 <_ZN12TestRegistry18getCurrentRegistryEv>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	3208      	adds	r2, #8
 800e6da:	6812      	ldr	r2, [r2, #0]
 800e6dc:	68b9      	ldr	r1, [r7, #8]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	4790      	blx	r2
}
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	08017abc 	.word	0x08017abc

0800e6f0 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	4a04      	ldr	r2, [pc, #16]	; (800e70c <_ZN13TestInstallerD1Ev+0x1c>)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	601a      	str	r2, [r3, #0]
{
}
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4618      	mov	r0, r3
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr
 800e70c:	08017abc 	.word	0x08017abc

0800e710 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
}
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7ff ffe9 	bl	800e6f0 <_ZN13TestInstallerD1Ev>
 800e71e:	2104      	movs	r1, #4
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7f7 fb8b 	bl	8005e3c <_ZdlPvj>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4618      	mov	r0, r3
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d10a      	bne.n	800e756 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e746:	4293      	cmp	r3, r2
 800e748:	d105      	bne.n	800e756 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800e74a:	4805      	ldr	r0, [pc, #20]	; (800e760 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800e74c:	f7ff fe38 	bl	800e3c0 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 800e750:	4804      	ldr	r0, [pc, #16]	; (800e764 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800e752:	f7ff fdd5 	bl	800e300 <_ZN20NormalTestTerminatorD1Ev>
}
 800e756:	bf00      	nop
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	2000008c 	.word	0x2000008c
 800e764:	20000088 	.word	0x20000088

0800e768 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 800e768:	b580      	push	{r7, lr}
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e770:	2001      	movs	r0, #1
 800e772:	f7ff ffdd 	bl	800e730 <_Z41__static_initialization_and_destruction_0ii>
 800e776:	bd80      	pop	{r7, pc}

0800e778 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 800e778:	b580      	push	{r7, lr}
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e780:	2000      	movs	r0, #0
 800e782:	f7ff ffd5 	bl	800e730 <_Z41__static_initialization_and_destruction_0ii>
 800e786:	bd80      	pop	{r7, pc}

0800e788 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 800e788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	ed87 0b00 	vstr	d0, [r7]
 800e792:	683c      	ldr	r4, [r7, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800e79a:	2301      	movs	r3, #1
 800e79c:	461e      	mov	r6, r3
 800e79e:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a2:	4b10      	ldr	r3, [pc, #64]	; (800e7e4 <_ZSt5isinfd+0x5c>)
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	f7f1 ffee 	bl	8000788 <__aeabi_dcmpun>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10b      	bne.n	800e7ca <_ZSt5isinfd+0x42>
 800e7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b6:	4b0b      	ldr	r3, [pc, #44]	; (800e7e4 <_ZSt5isinfd+0x5c>)
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	4629      	mov	r1, r5
 800e7bc:	f7f1 ffc6 	bl	800074c <__aeabi_dcmple>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d101      	bne.n	800e7ca <_ZSt5isinfd+0x42>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	461e      	mov	r6, r3
 800e7ca:	b2f3      	uxtb	r3, r6
 800e7cc:	f083 0301 	eor.w	r3, r3, #1
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	bf14      	ite	ne
 800e7d6:	2301      	movne	r3, #1
 800e7d8:	2300      	moveq	r3, #0
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	4618      	mov	r0, r3
 800e7de:	370c      	adds	r7, #12
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e4:	7fefffff 	.word	0x7fefffff

0800e7e8 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 800e7e8:	b590      	push	{r4, r7, lr}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	ed87 0b00 	vstr	d0, [r7]
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	461c      	mov	r4, r3
 800e7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e7fe:	f7f1 ffc3 	bl	8000788 <__aeabi_dcmpun>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d101      	bne.n	800e80c <_ZSt5isnand+0x24>
 800e808:	2300      	movs	r3, #0
 800e80a:	461c      	mov	r4, r3
 800e80c:	b2e3      	uxtb	r3, r4
 800e80e:	2b00      	cmp	r3, #0
 800e810:	bf14      	ite	ne
 800e812:	2301      	movne	r3, #1
 800e814:	2300      	moveq	r3, #0
 800e816:	b2db      	uxtb	r3, r3
 800e818:	4618      	mov	r0, r3
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd90      	pop	{r4, r7, pc}

0800e820 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 800e820:	b590      	push	{r4, r7, lr}
 800e822:	b095      	sub	sp, #84	; 0x54
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	3334      	adds	r3, #52	; 0x34
 800e832:	681c      	ldr	r4, [r3, #0]
 800e834:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e838:	490f      	ldr	r1, [pc, #60]	; (800e878 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7f8 f9d3 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800e840:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e844:	f107 0314 	add.w	r3, r7, #20
 800e848:	68f9      	ldr	r1, [r7, #12]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7f9 ff1c 	bl	8008688 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800e850:	f107 0314 	add.w	r3, r7, #20
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	47a0      	blx	r4
 800e85a:	f107 0314 	add.w	r3, r7, #20
 800e85e:	4618      	mov	r0, r3
 800e860:	f7f9 ffd2 	bl	8008808 <_ZN11TestFailureD1Ev>
 800e864:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e868:	4618      	mov	r0, r3
 800e86a:	f7f8 fd74 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800e86e:	bf00      	nop
 800e870:	3754      	adds	r7, #84	; 0x54
 800e872:	46bd      	mov	sp, r7
 800e874:	bd90      	pop	{r4, r7, pc}
 800e876:	bf00      	nop
 800e878:	080161b0 	.word	0x080161b0

0800e87c <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 800e87c:	b480      	push	{r7}
 800e87e:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 800e880:	2301      	movs	r3, #1
}
 800e882:	4618      	mov	r0, r3
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 800e896:	4b13      	ldr	r3, [pc, #76]	; (800e8e4 <PlatformSpecificSetJmpImplementation+0x58>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	225c      	movs	r2, #92	; 0x5c
 800e89c:	fb02 f303 	mul.w	r3, r2, r3
 800e8a0:	4a11      	ldr	r2, [pc, #68]	; (800e8e8 <PlatformSpecificSetJmpImplementation+0x5c>)
 800e8a2:	4413      	add	r3, r2
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7f1 fcbb 	bl	8000220 <setjmp>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	bf0c      	ite	eq
 800e8b0:	2301      	moveq	r3, #1
 800e8b2:	2300      	movne	r3, #0
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d00e      	beq.n	800e8d8 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 800e8ba:	4b0a      	ldr	r3, [pc, #40]	; (800e8e4 <PlatformSpecificSetJmpImplementation+0x58>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	4a08      	ldr	r2, [pc, #32]	; (800e8e4 <PlatformSpecificSetJmpImplementation+0x58>)
 800e8c2:	6013      	str	r3, [r2, #0]
        function(data);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6838      	ldr	r0, [r7, #0]
 800e8c8:	4798      	blx	r3
        jmp_buf_index--;
 800e8ca:	4b06      	ldr	r3, [pc, #24]	; (800e8e4 <PlatformSpecificSetJmpImplementation+0x58>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	4a04      	ldr	r2, [pc, #16]	; (800e8e4 <PlatformSpecificSetJmpImplementation+0x58>)
 800e8d2:	6013      	str	r3, [r2, #0]
        return 1;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e000      	b.n	800e8da <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 800e8d8:	2300      	movs	r3, #0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20000aa4 	.word	0x20000aa4
 800e8e8:	2000070c 	.word	0x2000070c

0800e8ec <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 800e8f0:	4b07      	ldr	r3, [pc, #28]	; (800e910 <PlatformSpecificLongJmpImplementation+0x24>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	4a06      	ldr	r2, [pc, #24]	; (800e910 <PlatformSpecificLongJmpImplementation+0x24>)
 800e8f8:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 800e8fa:	4b05      	ldr	r3, [pc, #20]	; (800e910 <PlatformSpecificLongJmpImplementation+0x24>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	225c      	movs	r2, #92	; 0x5c
 800e900:	fb02 f303 	mul.w	r3, r2, r3
 800e904:	4a03      	ldr	r2, [pc, #12]	; (800e914 <PlatformSpecificLongJmpImplementation+0x28>)
 800e906:	4413      	add	r3, r2
 800e908:	2101      	movs	r1, #1
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7f1 fc8e 	bl	800022c <longjmp>
 800e910:	20000aa4 	.word	0x20000aa4
 800e914:	2000070c 	.word	0x2000070c

0800e918 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 800e918:	b480      	push	{r7}
 800e91a:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 800e91c:	2300      	movs	r3, #0
#endif
}
 800e91e:	4618      	mov	r0, r3
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 800e92e:	2000      	movs	r0, #0
 800e930:	f004 fbee 	bl	8013110 <time>
 800e934:	4602      	mov	r2, r0
 800e936:	460b      	mov	r3, r1
 800e938:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 800e93c:	463b      	mov	r3, r7
 800e93e:	4618      	mov	r0, r3
 800e940:	f003 fa6c 	bl	8011e1c <localtime>
 800e944:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	4a04      	ldr	r2, [pc, #16]	; (800e95c <TimeStringImplementation+0x34>)
 800e94a:	2150      	movs	r1, #80	; 0x50
 800e94c:	4804      	ldr	r0, [pc, #16]	; (800e960 <TimeStringImplementation+0x38>)
 800e94e:	f004 fb4d 	bl	8012fec <strftime>
    return dateTime;
 800e952:	4b03      	ldr	r3, [pc, #12]	; (800e960 <TimeStringImplementation+0x38>)
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	080161ec 	.word	0x080161ec
 800e960:	20000aa8 	.word	0x20000aa8

0800e964 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f003 f889 	bl	8011a88 <fopen>
 800e976:	4603      	mov	r3, r0
#endif
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3708      	adds	r7, #8
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 800e98a:	6839      	ldr	r1, [r7, #0]
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f003 f8e9 	bl	8011b64 <fputs>
}
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b082      	sub	sp, #8
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f002 fe6a 	bl	801167c <fclose>
}
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	af00      	add	r7, sp, #0
  fflush(stdout);
 800e9b4:	4b03      	ldr	r3, [pc, #12]	; (800e9c4 <PlatformSpecificFlushImplementation+0x14>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f002 ff28 	bl	8011810 <fflush>
}
 800e9c0:	bf00      	nop
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	20000100 	.word	0x20000100

0800e9c8 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 800e9d2:	ed97 0b00 	vldr	d0, [r7]
 800e9d6:	f7ff ff07 	bl	800e7e8 <_ZSt5isnand>
 800e9da:	4603      	mov	r3, r0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 800e9ee:	ed97 0b00 	vldr	d0, [r7]
 800e9f2:	f7ff fec9 	bl	800e788 <_ZSt5isinfd>
 800e9f6:	4603      	mov	r3, r0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 800ea00:	b480      	push	{r7}
 800ea02:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 800ea04:	2300      	movs	r3, #0
#endif

}
 800ea06:	4618      	mov	r0, r3
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
}
 800ea2c:	bf00      	nop
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
}
 800ea40:	bf00      	nop
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 800ea58:	4a25      	ldr	r2, [pc, #148]	; (800eaf0 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	601a      	str	r2, [r3, #0]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	605a      	str	r2, [r3, #4]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	609a      	str	r2, [r3, #8]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	731a      	strb	r2, [r3, #12]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2200      	movs	r2, #0
 800ea74:	735a      	strb	r2, [r3, #13]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	739a      	strb	r2, [r3, #14]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	73da      	strb	r2, [r3, #15]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2200      	movs	r2, #0
 800ea86:	741a      	strb	r2, [r3, #16]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	745a      	strb	r2, [r3, #17]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2200      	movs	r2, #0
 800ea92:	749a      	strb	r2, [r3, #18]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2200      	movs	r2, #0
 800ea98:	74da      	strb	r2, [r3, #19]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	751a      	strb	r2, [r3, #20]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	755a      	strb	r2, [r3, #21]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	759a      	strb	r2, [r3, #22]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	75da      	strb	r2, [r3, #23]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	761a      	strb	r2, [r3, #24]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2201      	movs	r2, #1
 800eabc:	61da      	str	r2, [r3, #28]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2200      	movs	r2, #0
 800eac2:	621a      	str	r2, [r3, #32]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2200      	movs	r2, #0
 800eac8:	625a      	str	r2, [r3, #36]	; 0x24
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	629a      	str	r2, [r3, #40]	; 0x28
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	3330      	adds	r3, #48	; 0x30
 800eadc:	4905      	ldr	r1, [pc, #20]	; (800eaf4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 800eade:	4618      	mov	r0, r3
 800eae0:	f7f8 f881 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
{
}
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	4618      	mov	r0, r3
 800eae8:	3710      	adds	r7, #16
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	08017be8 	.word	0x08017be8
 800eaf4:	08016200 	.word	0x08016200

0800eaf8 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7f8 fc27 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
	...

0800eb14 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 800eb14:	b590      	push	{r4, r7, lr}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	4a20      	ldr	r2, [pc, #128]	; (800eba0 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d015      	beq.n	800eb56 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2e:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb34:	4618      	mov	r0, r3
 800eb36:	f002 fc9a 	bl	801146e <_ZNK10TestFilter7getNextEv>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 800eb40:	68fc      	ldr	r4, [r7, #12]
 800eb42:	2c00      	cmp	r4, #0
 800eb44:	d0ed      	beq.n	800eb22 <_ZN20CommandLineArgumentsD1Ev+0xe>
 800eb46:	4620      	mov	r0, r4
 800eb48:	f7ff ffd6 	bl	800eaf8 <_ZN10TestFilterD1Ev>
 800eb4c:	2110      	movs	r1, #16
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f7f7 f974 	bl	8005e3c <_ZdlPvj>
    while(groupFilters_) {
 800eb54:	e7e5      	b.n	800eb22 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d015      	beq.n	800eb8a <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb62:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f002 fc80 	bl	801146e <_ZNK10TestFilter7getNextEv>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 800eb74:	68bc      	ldr	r4, [r7, #8]
 800eb76:	2c00      	cmp	r4, #0
 800eb78:	d0ed      	beq.n	800eb56 <_ZN20CommandLineArgumentsD1Ev+0x42>
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f7ff ffbc 	bl	800eaf8 <_ZN10TestFilterD1Ev>
 800eb80:	2110      	movs	r1, #16
 800eb82:	4620      	mov	r0, r4
 800eb84:	f7f7 f95a 	bl	8005e3c <_ZdlPvj>
    while(nameFilters_) {
 800eb88:	e7e5      	b.n	800eb56 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	3330      	adds	r3, #48	; 0x30
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7f8 fbe1 	bl	8007356 <_ZN12SimpleStringD1Ev>
    }
}
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4618      	mov	r0, r3
 800eb98:	3714      	adds	r7, #20
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd90      	pop	{r4, r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	08017be8 	.word	0x08017be8

0800eba4 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
}
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7ff ffb1 	bl	800eb14 <_ZN20CommandLineArgumentsD1Ev>
 800ebb2:	2138      	movs	r1, #56	; 0x38
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7f7 f941 	bl	8005e3c <_ZdlPvj>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 800ebc4:	b5b0      	push	{r4, r5, r7, lr}
 800ebc6:	b0be      	sub	sp, #248	; 0xf8
 800ebc8:	af02      	add	r7, sp, #8
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
 800ebce:	2400      	movs	r4, #0
    bool correctParameters = true;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	613b      	str	r3, [r7, #16]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	685a      	ldr	r2, [r3, #4]
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	f340 83a4 	ble.w	800f32e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	689a      	ldr	r2, [r3, #8]
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	009b      	lsls	r3, r3, #2
 800ebee:	4413      	add	r3, r2
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	f107 0308 	add.w	r3, r7, #8
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7f7 fff4 	bl	8006be6 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 800ebfe:	f107 0314 	add.w	r3, r7, #20
 800ec02:	49c8      	ldr	r1, [pc, #800]	; (800ef24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7f7 ffee 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ec0a:	f107 0214 	add.w	r2, r7, #20
 800ec0e:	f107 0308 	add.w	r3, r7, #8
 800ec12:	4611      	mov	r1, r2
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7f8 fbaa 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	461d      	mov	r5, r3
 800ec1e:	f107 0314 	add.w	r3, r7, #20
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7f8 fb97 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ec28:	2d00      	cmp	r5, #0
 800ec2a:	d006      	beq.n	800ec3a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 800ec32:	2300      	movs	r3, #0
 800ec34:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800ec38:	e366      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 800ec3a:	f107 031c 	add.w	r3, r7, #28
 800ec3e:	49ba      	ldr	r1, [pc, #744]	; (800ef28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7f7 ffd0 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ec46:	f107 021c 	add.w	r2, r7, #28
 800ec4a:	f107 0308 	add.w	r3, r7, #8
 800ec4e:	4611      	mov	r1, r2
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7f8 fb8c 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ec56:	4603      	mov	r3, r0
 800ec58:	461d      	mov	r5, r3
 800ec5a:	f107 031c 	add.w	r3, r7, #28
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7f8 fb79 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ec64:	2d00      	cmp	r5, #0
 800ec66:	d003      	beq.n	800ec70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	735a      	strb	r2, [r3, #13]
 800ec6e:	e34b      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 800ec70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec74:	49ad      	ldr	r1, [pc, #692]	; (800ef2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7f7 ffb5 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ec7c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ec80:	f107 0308 	add.w	r3, r7, #8
 800ec84:	4611      	mov	r1, r2
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7f8 fb71 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	461d      	mov	r5, r3
 800ec90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7f8 fb5e 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ec9a:	2d00      	cmp	r5, #0
 800ec9c:	d003      	beq.n	800eca6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2201      	movs	r2, #1
 800eca2:	739a      	strb	r2, [r3, #14]
 800eca4:	e330      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 800eca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecaa:	49a1      	ldr	r1, [pc, #644]	; (800ef30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7f7 ff9a 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ecb2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ecb6:	f107 0308 	add.w	r3, r7, #8
 800ecba:	4611      	mov	r1, r2
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7f8 fb56 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	461d      	mov	r5, r3
 800ecc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7f8 fb43 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ecd0:	2d00      	cmp	r5, #0
 800ecd2:	d003      	beq.n	800ecdc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	73da      	strb	r2, [r3, #15]
 800ecda:	e315      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 800ecdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ece0:	4994      	ldr	r1, [pc, #592]	; (800ef34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7f7 ff7f 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ece8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ecec:	f107 0308 	add.w	r3, r7, #8
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7f8 fb3b 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	461d      	mov	r5, r3
 800ecfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7f8 fb28 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ed06:	2d00      	cmp	r5, #0
 800ed08:	d003      	beq.n	800ed12 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	741a      	strb	r2, [r3, #16]
 800ed10:	e2fa      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 800ed12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ed16:	4988      	ldr	r1, [pc, #544]	; (800ef38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7f7 ff64 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ed1e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ed22:	f107 0308 	add.w	r3, r7, #8
 800ed26:	4611      	mov	r1, r2
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7f8 fb20 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	461d      	mov	r5, r3
 800ed32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7f8 fb0d 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ed3c:	2d00      	cmp	r5, #0
 800ed3e:	d003      	beq.n	800ed48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	755a      	strb	r2, [r3, #21]
 800ed46:	e2df      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 800ed48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ed4c:	497b      	ldr	r1, [pc, #492]	; (800ef3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7f7 ff49 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ed54:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ed58:	f107 0308 	add.w	r3, r7, #8
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f8 fb05 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ed64:	4603      	mov	r3, r0
 800ed66:	461d      	mov	r5, r3
 800ed68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7f8 faf2 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ed72:	2d00      	cmp	r5, #0
 800ed74:	d003      	beq.n	800ed7e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	745a      	strb	r2, [r3, #17]
 800ed7c:	e2c4      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 800ed7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed82:	496f      	ldr	r1, [pc, #444]	; (800ef40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f7 ff2e 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ed8a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ed8e:	f107 0308 	add.w	r3, r7, #8
 800ed92:	4611      	mov	r1, r2
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7f8 faea 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	461d      	mov	r5, r3
 800ed9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7f8 fad7 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	d003      	beq.n	800edb4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	749a      	strb	r2, [r3, #18]
 800edb2:	e2a9      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 800edb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800edb8:	4962      	ldr	r1, [pc, #392]	; (800ef44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 800edba:	4618      	mov	r0, r3
 800edbc:	f7f7 ff13 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800edc0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800edc4:	f107 0308 	add.w	r3, r7, #8
 800edc8:	4611      	mov	r1, r2
 800edca:	4618      	mov	r0, r3
 800edcc:	f7f8 facf 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800edd0:	4603      	mov	r3, r0
 800edd2:	461d      	mov	r5, r3
 800edd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800edd8:	4618      	mov	r0, r3
 800edda:	f7f8 fabc 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800edde:	2d00      	cmp	r5, #0
 800ede0:	d003      	beq.n	800edea <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2201      	movs	r2, #1
 800ede6:	74da      	strb	r2, [r3, #19]
 800ede8:	e28e      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 800edea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800edee:	4956      	ldr	r1, [pc, #344]	; (800ef48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7f7 fef8 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800edf6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800edfa:	f107 0308 	add.w	r3, r7, #8
 800edfe:	4611      	mov	r1, r2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7f8 fab4 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ee06:	4603      	mov	r3, r0
 800ee08:	461d      	mov	r5, r3
 800ee0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7f8 faa1 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ee14:	2d00      	cmp	r5, #0
 800ee16:	d003      	beq.n	800ee20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	751a      	strb	r2, [r3, #20]
 800ee1e:	e273      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 800ee20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ee24:	4949      	ldr	r1, [pc, #292]	; (800ef4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7f7 fedd 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ee2c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ee30:	f107 0308 	add.w	r3, r7, #8
 800ee34:	4611      	mov	r1, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7f8 fa99 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	461d      	mov	r5, r3
 800ee40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7f8 fa86 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ee4a:	2d00      	cmp	r5, #0
 800ee4c:	d003      	beq.n	800ee56 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2201      	movs	r2, #1
 800ee52:	759a      	strb	r2, [r3, #22]
 800ee54:	e258      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 800ee56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ee5a:	493d      	ldr	r1, [pc, #244]	; (800ef50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7f7 fec2 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ee62:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ee66:	f107 0308 	add.w	r3, r7, #8
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7f7 ff7e 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800ee72:	4603      	mov	r3, r0
 800ee74:	461d      	mov	r5, r3
 800ee76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7f8 fa6b 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ee80:	2d00      	cmp	r5, #0
 800ee82:	d009      	beq.n	800ee98 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6859      	ldr	r1, [r3, #4]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	689a      	ldr	r2, [r3, #8]
 800ee8c:	f107 0310 	add.w	r3, r7, #16
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fb33 	bl	800f4fc <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 800ee96:	e237      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 800ee98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ee9c:	492d      	ldr	r1, [pc, #180]	; (800ef54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7f7 fea1 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800eea4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800eea8:	f107 0308 	add.w	r3, r7, #8
 800eeac:	4611      	mov	r1, r2
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f7 ff5d 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	461d      	mov	r5, r3
 800eeb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7f8 fa4a 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800eec2:	2d00      	cmp	r5, #0
 800eec4:	d009      	beq.n	800eeda <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6859      	ldr	r1, [r3, #4]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	f107 0310 	add.w	r3, r7, #16
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fc40 	bl	800f758 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 800eed8:	e216      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 800eeda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eede:	491e      	ldr	r1, [pc, #120]	; (800ef58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7f7 fe80 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800eee6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800eeea:	f107 0308 	add.w	r3, r7, #8
 800eeee:	4611      	mov	r1, r2
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7f7 ff3c 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800eef6:	4603      	mov	r3, r0
 800eef8:	461d      	mov	r5, r3
 800eefa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7f8 fa29 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ef04:	2d00      	cmp	r5, #0
 800ef06:	d029      	beq.n	800ef5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6859      	ldr	r1, [r3, #4]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689a      	ldr	r2, [r3, #8]
 800ef10:	f107 0310 	add.w	r3, r7, #16
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fc61 	bl	800f7dc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800ef20:	e1f2      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800ef22:	bf00      	nop
 800ef24:	08016204 	.word	0x08016204
 800ef28:	08016208 	.word	0x08016208
 800ef2c:	0801620c 	.word	0x0801620c
 800ef30:	08016210 	.word	0x08016210
 800ef34:	08016214 	.word	0x08016214
 800ef38:	08016218 	.word	0x08016218
 800ef3c:	0801621c 	.word	0x0801621c
 800ef40:	08016220 	.word	0x08016220
 800ef44:	08016224 	.word	0x08016224
 800ef48:	08016228 	.word	0x08016228
 800ef4c:	0801622c 	.word	0x0801622c
 800ef50:	08016230 	.word	0x08016230
 800ef54:	08016234 	.word	0x08016234
 800ef58:	08016238 	.word	0x08016238
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 800ef5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ef60:	49b9      	ldr	r1, [pc, #740]	; (800f248 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7f7 fe3f 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ef68:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800ef6c:	f107 0308 	add.w	r3, r7, #8
 800ef70:	4611      	mov	r1, r2
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7f7 fefb 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	461d      	mov	r5, r3
 800ef7c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f8 f9e8 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ef86:	2d00      	cmp	r5, #0
 800ef88:	d009      	beq.n	800ef9e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6859      	ldr	r1, [r3, #4]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	689a      	ldr	r2, [r3, #8]
 800ef92:	f107 0310 	add.w	r3, r7, #16
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 fccc 	bl	800f934 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 800ef9c:	e1b4      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 800ef9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800efa2:	49aa      	ldr	r1, [pc, #680]	; (800f24c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7f7 fe1e 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800efaa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800efae:	f107 0308 	add.w	r3, r7, #8
 800efb2:	4611      	mov	r1, r2
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7f7 feda 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800efba:	4603      	mov	r3, r0
 800efbc:	461d      	mov	r5, r3
 800efbe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7f8 f9c7 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800efc8:	2d00      	cmp	r5, #0
 800efca:	d009      	beq.n	800efe0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6859      	ldr	r1, [r3, #4]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	689a      	ldr	r2, [r3, #8]
 800efd4:	f107 0310 	add.w	r3, r7, #16
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fcf1 	bl	800f9c0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 800efde:	e193      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 800efe0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800efe4:	499a      	ldr	r1, [pc, #616]	; (800f250 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f7 fdfd 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800efec:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800eff0:	f107 0308 	add.w	r3, r7, #8
 800eff4:	4611      	mov	r1, r2
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7f7 feb9 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800effc:	4603      	mov	r3, r0
 800effe:	461d      	mov	r5, r3
 800f000:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f004:	4618      	mov	r0, r3
 800f006:	f7f8 f9a6 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f00a:	2d00      	cmp	r5, #0
 800f00c:	d009      	beq.n	800f022 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6859      	ldr	r1, [r3, #4]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	689a      	ldr	r2, [r3, #8]
 800f016:	f107 0310 	add.w	r3, r7, #16
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 fd16 	bl	800fa4c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 800f020:	e172      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 800f022:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f026:	498b      	ldr	r1, [pc, #556]	; (800f254 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 800f028:	4618      	mov	r0, r3
 800f02a:	f7f7 fddc 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f02e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800f032:	f107 0308 	add.w	r3, r7, #8
 800f036:	4611      	mov	r1, r2
 800f038:	4618      	mov	r0, r3
 800f03a:	f7f7 fe98 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f03e:	4603      	mov	r3, r0
 800f040:	461d      	mov	r5, r3
 800f042:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f046:	4618      	mov	r0, r3
 800f048:	f7f8 f985 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f04c:	2d00      	cmp	r5, #0
 800f04e:	d009      	beq.n	800f064 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6859      	ldr	r1, [r3, #4]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	689a      	ldr	r2, [r3, #8]
 800f058:	f107 0310 	add.w	r3, r7, #16
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 fd3d 	bl	800fadc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 800f062:	e151      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 800f064:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f068:	497b      	ldr	r1, [pc, #492]	; (800f258 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7f7 fdbb 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f070:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800f074:	f107 0308 	add.w	r3, r7, #8
 800f078:	4611      	mov	r1, r2
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7f7 fe77 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f080:	4603      	mov	r3, r0
 800f082:	461d      	mov	r5, r3
 800f084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f088:	4618      	mov	r0, r3
 800f08a:	f7f8 f964 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f08e:	2d00      	cmp	r5, #0
 800f090:	d009      	beq.n	800f0a6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6859      	ldr	r1, [r3, #4]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	689a      	ldr	r2, [r3, #8]
 800f09a:	f107 0310 	add.w	r3, r7, #16
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 fd5e 	bl	800fb60 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 800f0a4:	e130      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 800f0a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f0aa:	496c      	ldr	r1, [pc, #432]	; (800f25c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7f7 fd9a 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f0b2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800f0b6:	f107 0308 	add.w	r3, r7, #8
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7f7 fe56 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461d      	mov	r5, r3
 800f0c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f8 f943 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f0d0:	2d00      	cmp	r5, #0
 800f0d2:	d009      	beq.n	800f0e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6859      	ldr	r1, [r3, #4]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	689a      	ldr	r2, [r3, #8]
 800f0dc:	f107 0310 	add.w	r3, r7, #16
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 fd83 	bl	800fbec <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 800f0e6:	e10f      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 800f0e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f0ec:	495c      	ldr	r1, [pc, #368]	; (800f260 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7f7 fd79 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f0f4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800f0f8:	f107 0308 	add.w	r3, r7, #8
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7f7 fe35 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f104:	4603      	mov	r3, r0
 800f106:	461d      	mov	r5, r3
 800f108:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7f8 f922 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f112:	2d00      	cmp	r5, #0
 800f114:	d009      	beq.n	800f12a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6859      	ldr	r1, [r3, #4]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	689a      	ldr	r2, [r3, #8]
 800f11e:	f107 0310 	add.w	r3, r7, #16
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 fda8 	bl	800fc78 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 800f128:	e0ee      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 800f12a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f12e:	494d      	ldr	r1, [pc, #308]	; (800f264 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 800f130:	4618      	mov	r0, r3
 800f132:	f7f7 fd58 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f136:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800f13a:	f107 0308 	add.w	r3, r7, #8
 800f13e:	4611      	mov	r1, r2
 800f140:	4618      	mov	r0, r3
 800f142:	f7f7 fe14 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f146:	4603      	mov	r3, r0
 800f148:	461d      	mov	r5, r3
 800f14a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f14e:	4618      	mov	r0, r3
 800f150:	f7f8 f901 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f154:	2d00      	cmp	r5, #0
 800f156:	d00c      	beq.n	800f172 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6859      	ldr	r1, [r3, #4]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	689a      	ldr	r2, [r3, #8]
 800f160:	f107 0310 	add.w	r3, r7, #16
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fa29 	bl	800f5bc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 800f16a:	4603      	mov	r3, r0
 800f16c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f170:	e0ca      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 800f172:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f176:	493c      	ldr	r1, [pc, #240]	; (800f268 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800f178:	4618      	mov	r0, r3
 800f17a:	f7f7 fd34 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f17e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800f182:	f107 0308 	add.w	r3, r7, #8
 800f186:	4611      	mov	r1, r2
 800f188:	4618      	mov	r0, r3
 800f18a:	f7f7 fdf0 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f18e:	4603      	mov	r3, r0
 800f190:	461d      	mov	r5, r3
 800f192:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f196:	4618      	mov	r0, r3
 800f198:	f7f8 f8dd 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f19c:	2d00      	cmp	r5, #0
 800f19e:	d00b      	beq.n	800f1b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6859      	ldr	r1, [r3, #4]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689a      	ldr	r2, [r3, #8]
 800f1a8:	f107 0310 	add.w	r3, r7, #16
 800f1ac:	482e      	ldr	r0, [pc, #184]	; (800f268 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800f1ae:	9000      	str	r0, [sp, #0]
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 fda9 	bl	800fd08 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800f1b6:	e0a7      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 800f1b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f1bc:	492b      	ldr	r1, [pc, #172]	; (800f26c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7f7 fd11 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f1c4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800f1c8:	f107 0308 	add.w	r3, r7, #8
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7f7 fdcd 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	461d      	mov	r5, r3
 800f1d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7f8 f8ba 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f1e2:	2d00      	cmp	r5, #0
 800f1e4:	d00b      	beq.n	800f1fe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6859      	ldr	r1, [r3, #4]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	689a      	ldr	r2, [r3, #8]
 800f1ee:	f107 0310 	add.w	r3, r7, #16
 800f1f2:	481e      	ldr	r0, [pc, #120]	; (800f26c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800f1f4:	9000      	str	r0, [sp, #0]
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fd86 	bl	800fd08 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800f1fc:	e084      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 800f1fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f202:	491b      	ldr	r1, [pc, #108]	; (800f270 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 800f204:	4618      	mov	r0, r3
 800f206:	f7f7 fcee 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f20a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800f20e:	f107 0308 	add.w	r3, r7, #8
 800f212:	4611      	mov	r1, r2
 800f214:	4618      	mov	r0, r3
 800f216:	f7f7 fdaa 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f21a:	4603      	mov	r3, r0
 800f21c:	461d      	mov	r5, r3
 800f21e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f222:	4618      	mov	r0, r3
 800f224:	f7f8 f897 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f228:	2d00      	cmp	r5, #0
 800f22a:	d023      	beq.n	800f274 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6859      	ldr	r1, [r3, #4]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	689a      	ldr	r2, [r3, #8]
 800f234:	f107 0310 	add.w	r3, r7, #16
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fe3b 	bl	800feb4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 800f23e:	4603      	mov	r3, r0
 800f240:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f244:	e060      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800f246:	bf00      	nop
 800f248:	0801623c 	.word	0x0801623c
 800f24c:	08016240 	.word	0x08016240
 800f250:	08016244 	.word	0x08016244
 800f254:	0801624c 	.word	0x0801624c
 800f258:	08016250 	.word	0x08016250
 800f25c:	08016254 	.word	0x08016254
 800f260:	08016258 	.word	0x08016258
 800f264:	08016260 	.word	0x08016260
 800f268:	08016264 	.word	0x08016264
 800f26c:	0801626c 	.word	0x0801626c
 800f270:	0801627c 	.word	0x0801627c
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 800f274:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800f278:	4930      	ldr	r1, [pc, #192]	; (800f33c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7f7 fcb3 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f280:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800f284:	f107 0308 	add.w	r3, r7, #8
 800f288:	4611      	mov	r1, r2
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7f7 fd6f 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f290:	4603      	mov	r3, r0
 800f292:	461d      	mov	r5, r3
 800f294:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800f298:	4618      	mov	r0, r3
 800f29a:	f7f8 f85c 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f29e:	2d00      	cmp	r5, #0
 800f2a0:	d00e      	beq.n	800f2c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	331c      	adds	r3, #28
 800f2a8:	681d      	ldr	r5, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6859      	ldr	r1, [r3, #4]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	689a      	ldr	r2, [r3, #8]
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	6838      	ldr	r0, [r7, #0]
 800f2b6:	47a8      	blx	r5
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f2be:	e023      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 800f2c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f2c4:	491e      	ldr	r1, [pc, #120]	; (800f340 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7f7 fc8d 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f2cc:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800f2d0:	f107 0308 	add.w	r3, r7, #8
 800f2d4:	4611      	mov	r1, r2
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7f7 fd49 	bl	8006d6e <_ZNK12SimpleString10startsWithERKS_>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	461d      	mov	r5, r3
 800f2e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7f8 f836 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f2ea:	2d00      	cmp	r5, #0
 800f2ec:	d009      	beq.n	800f302 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6859      	ldr	r1, [r3, #4]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	689a      	ldr	r2, [r3, #8]
 800f2f6:	f107 0310 	add.w	r3, r7, #16
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 fd98 	bl	800fe30 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 800f300:	e002      	b.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 800f302:	2300      	movs	r3, #0
 800f304:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 800f308:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d102      	bne.n	800f316 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 800f310:	2400      	movs	r4, #0
 800f312:	2500      	movs	r5, #0
 800f314:	e000      	b.n	800f318 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 800f316:	2501      	movs	r5, #1
 800f318:	f107 0308 	add.w	r3, r7, #8
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7f8 f81a 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f322:	2d01      	cmp	r5, #1
 800f324:	d104      	bne.n	800f330 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	3301      	adds	r3, #1
 800f32a:	613b      	str	r3, [r7, #16]
 800f32c:	e455      	b.n	800ebda <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 800f32e:	2401      	movs	r4, #1
 800f330:	4623      	mov	r3, r4
}
 800f332:	4618      	mov	r0, r3
 800f334:	37f0      	adds	r7, #240	; 0xf0
 800f336:	46bd      	mov	sp, r7
 800f338:	bdb0      	pop	{r4, r5, r7, pc}
 800f33a:	bf00      	nop
 800f33c:	08016214 	.word	0x08016214
 800f340:	08016280 	.word	0x08016280

0800f344 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 800f34c:	4b03      	ldr	r3, [pc, #12]	; (800f35c <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 800f34e:	4618      	mov	r0, r3
 800f350:	370c      	adds	r7, #12
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	08016284 	.word	0x08016284

0800f360 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 800f360:	b480      	push	{r7}
 800f362:	b083      	sub	sp, #12
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 800f368:	4b03      	ldr	r3, [pc, #12]	; (800f378 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	370c      	adds	r7, #12
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	080163b4 	.word	0x080163b4

0800f37c <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 800f37c:	b480      	push	{r7}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
    return needHelp_;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	7b1b      	ldrb	r3, [r3, #12]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
    return verbose_;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	7b5b      	ldrb	r3, [r3, #13]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	7b9b      	ldrb	r3, [r3, #14]
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
    return color_;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	7bdb      	ldrb	r3, [r3, #15]
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7c5b      	ldrb	r3, [r3, #17]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	370c      	adds	r7, #12
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr

0800f3f4 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	7c9b      	ldrb	r3, [r3, #18]
}
 800f400:	4618      	mov	r0, r3
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	7cdb      	ldrb	r3, [r3, #19]
}
 800f418:	4618      	mov	r0, r3
 800f41a:	370c      	adds	r7, #12
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	7d1b      	ldrb	r3, [r3, #20]
}
 800f430:	4618      	mov	r0, r3
 800f432:	370c      	adds	r7, #12
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 800f43c:	b480      	push	{r7}
 800f43e:	b083      	sub	sp, #12
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	7c1b      	ldrb	r3, [r3, #16]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
    return repeat_;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	69db      	ldr	r3, [r3, #28]
}
 800f460:	4618      	mov	r0, r3
 800f462:	370c      	adds	r7, #12
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
    return reversing_;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	7d5b      	ldrb	r3, [r3, #21]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	7d9b      	ldrb	r3, [r3, #22]
}
 800f490:	4618      	mov	r0, r3
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
    return shuffling_;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	7ddb      	ldrb	r3, [r3, #23]
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6a1b      	ldr	r3, [r3, #32]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b086      	sub	sp, #24
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2200      	movs	r2, #0
 800f50e:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	4413      	add	r3, r2
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	f107 0310 	add.w	r3, r7, #16
 800f520:	4611      	mov	r1, r2
 800f522:	4618      	mov	r0, r3
 800f524:	f7f7 fb5f 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 800f528:	f107 0310 	add.w	r3, r7, #16
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f7 fef1 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800f532:	4603      	mov	r3, r0
 800f534:	2b02      	cmp	r3, #2
 800f536:	bf8c      	ite	hi
 800f538:	2301      	movhi	r3, #1
 800f53a:	2300      	movls	r3, #0
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d00e      	beq.n	800f560 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	4413      	add	r3, r2
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	3302      	adds	r3, #2
 800f550:	4618      	mov	r0, r3
 800f552:	f7f7 f944 	bl	80067de <_ZN12SimpleString4AtoIEPKc>
 800f556:	4603      	mov	r3, r0
 800f558:	461a      	mov	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	61da      	str	r2, [r3, #28]
 800f55e:	e01c      	b.n	800f59a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	3301      	adds	r3, #1
 800f566:	68ba      	ldr	r2, [r7, #8]
 800f568:	429a      	cmp	r2, r3
 800f56a:	dd16      	ble.n	800f59a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	3301      	adds	r3, #1
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	4413      	add	r3, r2
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7f7 f92f 	bl	80067de <_ZN12SimpleString4AtoIEPKc>
 800f580:	4603      	mov	r3, r0
 800f582:	461a      	mov	r2, r3
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	69db      	ldr	r3, [r3, #28]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d004      	beq.n	800f59a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	1c5a      	adds	r2, r3, #1
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	69db      	ldr	r3, [r3, #28]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d102      	bne.n	800f5a8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2202      	movs	r2, #2
 800f5a6:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 800f5a8:	f107 0310 	add.w	r3, r7, #16
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7f7 fed2 	bl	8007356 <_ZN12SimpleStringD1Ev>

}
 800f5b2:	bf00      	nop
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
	...

0800f5bc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 800f5bc:	b590      	push	{r4, r7, lr}
 800f5be:	b089      	sub	sp, #36	; 0x24
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
 800f5c8:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 800f5d0:	4b34      	ldr	r3, [pc, #208]	; (800f6a4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4798      	blx	r3
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	461a      	mov	r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	6a1b      	ldr	r3, [r3, #32]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d104      	bne.n	800f5f0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6a1b      	ldr	r3, [r3, #32]
 800f5ea:	1c5a      	adds	r2, r3, #1
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	f107 0314 	add.w	r3, r7, #20
 800f600:	4611      	mov	r1, r2
 800f602:	4618      	mov	r0, r3
 800f604:	f7f7 faef 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 800f608:	f107 0314 	add.w	r3, r7, #20
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7f7 fe81 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800f612:	4603      	mov	r3, r0
 800f614:	2b02      	cmp	r3, #2
 800f616:	bf8c      	ite	hi
 800f618:	2301      	movhi	r3, #1
 800f61a:	2300      	movls	r3, #0
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d010      	beq.n	800f644 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2201      	movs	r2, #1
 800f626:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	4413      	add	r3, r2
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	3302      	adds	r3, #2
 800f636:	4618      	mov	r0, r3
 800f638:	f7f7 f898 	bl	800676c <_ZN12SimpleString4AtoUEPKc>
 800f63c:	4602      	mov	r2, r0
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	621a      	str	r2, [r3, #32]
 800f642:	e01e      	b.n	800f682 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	3301      	adds	r3, #1
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	dd18      	ble.n	800f682 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	3301      	adds	r3, #1
 800f656:	009b      	lsls	r3, r3, #2
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	4413      	add	r3, r2
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f7 f884 	bl	800676c <_ZN12SimpleString4AtoUEPKc>
 800f664:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00a      	beq.n	800f682 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2201      	movs	r2, #1
 800f670:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	69fa      	ldr	r2, [r7, #28]
 800f676:	621a      	str	r2, [r3, #32]
            i++;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	1c5a      	adds	r2, r3, #1
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6a1b      	ldr	r3, [r3, #32]
 800f686:	2b00      	cmp	r3, #0
 800f688:	bf14      	ite	ne
 800f68a:	2301      	movne	r3, #1
 800f68c:	2300      	moveq	r3, #0
 800f68e:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 800f690:	f107 0314 	add.w	r3, r7, #20
 800f694:	4618      	mov	r0, r3
 800f696:	f7f7 fe5e 	bl	8007356 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 800f69a:	4623      	mov	r3, r4
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3724      	adds	r7, #36	; 0x24
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd90      	pop	{r4, r7, pc}
 800f6a4:	200000a4 	.word	0x200000a4

0800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b088      	sub	sp, #32
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
 800f6b4:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 800f6b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6b8:	f7f7 fe2c 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800f6bc:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 800f6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	009b      	lsls	r3, r3, #2
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	f107 0314 	add.w	r3, r7, #20
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7f7 fa88 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 800f6d6:	f107 0314 	add.w	r3, r7, #20
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7f7 fe1a 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	bf34      	ite	cc
 800f6e8:	2301      	movcc	r3, #1
 800f6ea:	2300      	movcs	r3, #0
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00c      	beq.n	800f70c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 800f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	4413      	add	r3, r2
 800f702:	4619      	mov	r1, r3
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f7f7 fa6e 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f70a:	e019      	b.n	800f740 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 800f70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	3301      	adds	r3, #1
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	429a      	cmp	r2, r3
 800f716:	dd0f      	ble.n	800f738 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 800f718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f720:	601a      	str	r2, [r3, #0]
 800f722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	683a      	ldr	r2, [r7, #0]
 800f72a:	4413      	add	r3, r2
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4619      	mov	r1, r3
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f7f7 fa58 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f736:	e003      	b.n	800f740 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 800f738:	4906      	ldr	r1, [pc, #24]	; (800f754 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f7f7 fa53 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 800f740:	f107 0314 	add.w	r3, r7, #20
 800f744:	4618      	mov	r0, r3
 800f746:	f7f7 fe06 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	3720      	adds	r7, #32
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	08016200 	.word	0x08016200

0800f758 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 800f758:	b5b0      	push	{r4, r5, r7, lr}
 800f75a:	b08c      	sub	sp, #48	; 0x30
 800f75c:	af02      	add	r7, sp, #8
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
 800f764:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 800f766:	f107 031c 	add.w	r3, r7, #28
 800f76a:	491a      	ldr	r1, [pc, #104]	; (800f7d4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7f7 fa3a 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f772:	f107 0014 	add.w	r0, r7, #20
 800f776:	f107 031c 	add.w	r3, r7, #28
 800f77a:	9301      	str	r3, [sp, #4]
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68ba      	ldr	r2, [r7, #8]
 800f784:	68f9      	ldr	r1, [r7, #12]
 800f786:	f7ff ff8f 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f78a:	f107 0514 	add.w	r5, r7, #20
 800f78e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f792:	4911      	ldr	r1, [pc, #68]	; (800f7d8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 800f794:	2010      	movs	r0, #16
 800f796:	f7f6 fb3d 	bl	8005e14 <_ZnwjPKci>
 800f79a:	4604      	mov	r4, r0
 800f79c:	4629      	mov	r1, r5
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f001 fe36 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800f7a4:	627c      	str	r4, [r7, #36]	; 0x24
 800f7a6:	f107 0314 	add.w	r3, r7, #20
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7f7 fdd3 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f7b0:	f107 031c 	add.w	r3, r7, #28
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7f7 fdce 	bl	8007356 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7c2:	f001 fe45 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f7cc:	bf00      	nop
 800f7ce:	3728      	adds	r7, #40	; 0x28
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bdb0      	pop	{r4, r5, r7, pc}
 800f7d4:	08016234 	.word	0x08016234
 800f7d8:	08016bc8 	.word	0x08016bc8

0800f7dc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 800f7dc:	b5b0      	push	{r4, r5, r7, lr}
 800f7de:	b092      	sub	sp, #72	; 0x48
 800f7e0:	af02      	add	r7, sp, #8
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 800f7ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ee:	494e      	ldr	r1, [pc, #312]	; (800f928 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7f7 f9f8 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f7f6:	f107 0020 	add.w	r0, r7, #32
 800f7fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	68f9      	ldr	r1, [r7, #12]
 800f80a:	f7ff ff4d 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f80e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f812:	4618      	mov	r0, r3
 800f814:	f7f7 fd9f 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 800f818:	f107 0310 	add.w	r3, r7, #16
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7f8 fba1 	bl	8007f64 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 800f822:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f826:	4941      	ldr	r1, [pc, #260]	; (800f92c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 800f828:	4618      	mov	r0, r3
 800f82a:	f7f7 f9dc 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f82e:	f107 0210 	add.w	r2, r7, #16
 800f832:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f836:	f107 0320 	add.w	r3, r7, #32
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7f7 fb3f 	bl	8006ebe <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 800f840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f844:	4618      	mov	r0, r3
 800f846:	f7f7 fd86 	bl	8007356 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 800f84a:	f107 0310 	add.w	r3, r7, #16
 800f84e:	4618      	mov	r0, r3
 800f850:	f7f8 fc2d 	bl	80080ae <_ZNK22SimpleStringCollection4sizeEv>
 800f854:	4603      	mov	r3, r0
 800f856:	2b02      	cmp	r3, #2
 800f858:	bf14      	ite	ne
 800f85a:	2301      	movne	r3, #1
 800f85c:	2300      	moveq	r3, #0
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	d001      	beq.n	800f868 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 800f864:	2400      	movs	r4, #0
 800f866:	e04f      	b.n	800f908 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 800f868:	f107 0310 	add.w	r3, r7, #16
 800f86c:	2100      	movs	r1, #0
 800f86e:	4618      	mov	r0, r3
 800f870:	f7f8 fc2a 	bl	80080c8 <_ZN22SimpleStringCollectionixEj>
 800f874:	4604      	mov	r4, r0
 800f876:	f107 0310 	add.w	r3, r7, #16
 800f87a:	2100      	movs	r1, #0
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7f8 fc23 	bl	80080c8 <_ZN22SimpleStringCollectionixEj>
 800f882:	4603      	mov	r3, r0
 800f884:	4618      	mov	r0, r3
 800f886:	f7f7 fd45 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800f88a:	4603      	mov	r3, r0
 800f88c:	3b01      	subs	r3, #1
 800f88e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f892:	2200      	movs	r2, #0
 800f894:	4621      	mov	r1, r4
 800f896:	f7f7 fe67 	bl	8007568 <_ZNK12SimpleString9subStringEjj>
 800f89a:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800f89e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 800f8a2:	4923      	ldr	r1, [pc, #140]	; (800f930 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 800f8a4:	2010      	movs	r0, #16
 800f8a6:	f7f6 fab5 	bl	8005e14 <_ZnwjPKci>
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f001 fdae 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f001 fdc8 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	625a      	str	r2, [r3, #36]	; 0x24
 800f8c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7f7 fd43 	bl	8007356 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 800f8d0:	f107 0310 	add.w	r3, r7, #16
 800f8d4:	2101      	movs	r1, #1
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7f8 fbf6 	bl	80080c8 <_ZN22SimpleStringCollectionixEj>
 800f8dc:	4605      	mov	r5, r0
 800f8de:	f240 121f 	movw	r2, #287	; 0x11f
 800f8e2:	4913      	ldr	r1, [pc, #76]	; (800f930 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 800f8e4:	2010      	movs	r0, #16
 800f8e6:	f7f6 fa95 	bl	8005e14 <_ZnwjPKci>
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f001 fd8e 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f001 fda8 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800f900:	4602      	mov	r2, r0
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 800f906:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 800f908:	f107 0310 	add.w	r3, r7, #16
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7f8 fb9d 	bl	800804c <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 800f912:	f107 0320 	add.w	r3, r7, #32
 800f916:	4618      	mov	r0, r3
 800f918:	f7f7 fd1d 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f91c:	4623      	mov	r3, r4
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3740      	adds	r7, #64	; 0x40
 800f922:	46bd      	mov	sp, r7
 800f924:	bdb0      	pop	{r4, r5, r7, pc}
 800f926:	bf00      	nop
 800f928:	08016238 	.word	0x08016238
 800f92c:	08016be8 	.word	0x08016be8
 800f930:	08016bc8 	.word	0x08016bc8

0800f934 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 800f934:	b5b0      	push	{r4, r5, r7, lr}
 800f936:	b08c      	sub	sp, #48	; 0x30
 800f938:	af02      	add	r7, sp, #8
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
 800f940:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 800f942:	f107 031c 	add.w	r3, r7, #28
 800f946:	491c      	ldr	r1, [pc, #112]	; (800f9b8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 800f948:	4618      	mov	r0, r3
 800f94a:	f7f7 f94c 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f94e:	f107 0014 	add.w	r0, r7, #20
 800f952:	f107 031c 	add.w	r3, r7, #28
 800f956:	9301      	str	r3, [sp, #4]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	9300      	str	r3, [sp, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	68ba      	ldr	r2, [r7, #8]
 800f960:	68f9      	ldr	r1, [r7, #12]
 800f962:	f7ff fea1 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f966:	f107 0514 	add.w	r5, r7, #20
 800f96a:	f240 1225 	movw	r2, #293	; 0x125
 800f96e:	4913      	ldr	r1, [pc, #76]	; (800f9bc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 800f970:	2010      	movs	r0, #16
 800f972:	f7f6 fa4f 	bl	8005e14 <_ZnwjPKci>
 800f976:	4604      	mov	r4, r0
 800f978:	4629      	mov	r1, r5
 800f97a:	4620      	mov	r0, r4
 800f97c:	f001 fd48 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800f980:	627c      	str	r4, [r7, #36]	; 0x24
 800f982:	f107 0314 	add.w	r3, r7, #20
 800f986:	4618      	mov	r0, r3
 800f988:	f7f7 fce5 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800f98c:	f107 031c 	add.w	r3, r7, #28
 800f990:	4618      	mov	r0, r3
 800f992:	f7f7 fce0 	bl	8007356 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 800f996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f998:	f001 fd75 	bl	8011486 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9a4:	f001 fd54 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f9ae:	bf00      	nop
 800f9b0:	3728      	adds	r7, #40	; 0x28
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bdb0      	pop	{r4, r5, r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	0801623c 	.word	0x0801623c
 800f9bc:	08016bc8 	.word	0x08016bc8

0800f9c0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 800f9c0:	b5b0      	push	{r4, r5, r7, lr}
 800f9c2:	b08c      	sub	sp, #48	; 0x30
 800f9c4:	af02      	add	r7, sp, #8
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	607a      	str	r2, [r7, #4]
 800f9cc:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 800f9ce:	f107 031c 	add.w	r3, r7, #28
 800f9d2:	491c      	ldr	r1, [pc, #112]	; (800fa44 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7f7 f906 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800f9da:	f107 0014 	add.w	r0, r7, #20
 800f9de:	f107 031c 	add.w	r3, r7, #28
 800f9e2:	9301      	str	r3, [sp, #4]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	68ba      	ldr	r2, [r7, #8]
 800f9ec:	68f9      	ldr	r1, [r7, #12]
 800f9ee:	f7ff fe5b 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f9f2:	f107 0514 	add.w	r5, r7, #20
 800f9f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f9fa:	4913      	ldr	r1, [pc, #76]	; (800fa48 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 800f9fc:	2010      	movs	r0, #16
 800f9fe:	f7f6 fa09 	bl	8005e14 <_ZnwjPKci>
 800fa02:	4604      	mov	r4, r0
 800fa04:	4629      	mov	r1, r5
 800fa06:	4620      	mov	r0, r4
 800fa08:	f001 fd02 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800fa0c:	627c      	str	r4, [r7, #36]	; 0x24
 800fa0e:	f107 0314 	add.w	r3, r7, #20
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7f7 fc9f 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800fa18:	f107 031c 	add.w	r3, r7, #28
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7f7 fc9a 	bl	8007356 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 800fa22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa24:	f001 fd3c 	bl	80114a0 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa30:	f001 fd0e 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800fa34:	4602      	mov	r2, r0
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fa3a:	bf00      	nop
 800fa3c:	3728      	adds	r7, #40	; 0x28
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bdb0      	pop	{r4, r5, r7, pc}
 800fa42:	bf00      	nop
 800fa44:	08016240 	.word	0x08016240
 800fa48:	08016bc8 	.word	0x08016bc8

0800fa4c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 800fa4c:	b5b0      	push	{r4, r5, r7, lr}
 800fa4e:	b08c      	sub	sp, #48	; 0x30
 800fa50:	af02      	add	r7, sp, #8
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	607a      	str	r2, [r7, #4]
 800fa58:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 800fa5a:	f107 031c 	add.w	r3, r7, #28
 800fa5e:	491d      	ldr	r1, [pc, #116]	; (800fad4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7f7 f8c0 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800fa66:	f107 0014 	add.w	r0, r7, #20
 800fa6a:	f107 031c 	add.w	r3, r7, #28
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	68f9      	ldr	r1, [r7, #12]
 800fa7a:	f7ff fe15 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fa7e:	f107 0514 	add.w	r5, r7, #20
 800fa82:	f240 1233 	movw	r2, #307	; 0x133
 800fa86:	4914      	ldr	r1, [pc, #80]	; (800fad8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 800fa88:	2010      	movs	r0, #16
 800fa8a:	f7f6 f9c3 	bl	8005e14 <_ZnwjPKci>
 800fa8e:	4604      	mov	r4, r0
 800fa90:	4629      	mov	r1, r5
 800fa92:	4620      	mov	r0, r4
 800fa94:	f001 fcbc 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800fa98:	627c      	str	r4, [r7, #36]	; 0x24
 800fa9a:	f107 0314 	add.w	r3, r7, #20
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7f7 fc59 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800faa4:	f107 031c 	add.w	r3, r7, #28
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7f7 fc54 	bl	8007356 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 800faae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fab0:	f001 fce9 	bl	8011486 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 800fab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fab6:	f001 fcf3 	bl	80114a0 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fabe:	4619      	mov	r1, r3
 800fac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fac2:	f001 fcc5 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800fac6:	4602      	mov	r2, r0
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	625a      	str	r2, [r3, #36]	; 0x24
}
 800facc:	bf00      	nop
 800face:	3728      	adds	r7, #40	; 0x28
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bdb0      	pop	{r4, r5, r7, pc}
 800fad4:	08016244 	.word	0x08016244
 800fad8:	08016bc8 	.word	0x08016bc8

0800fadc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 800fadc:	b5b0      	push	{r4, r5, r7, lr}
 800fade:	b08c      	sub	sp, #48	; 0x30
 800fae0:	af02      	add	r7, sp, #8
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 800faea:	f107 031c 	add.w	r3, r7, #28
 800faee:	491a      	ldr	r1, [pc, #104]	; (800fb58 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7f7 f878 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800faf6:	f107 0014 	add.w	r0, r7, #20
 800fafa:	f107 031c 	add.w	r3, r7, #28
 800fafe:	9301      	str	r3, [sp, #4]
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	68f9      	ldr	r1, [r7, #12]
 800fb0a:	f7ff fdcd 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fb0e:	f107 0514 	add.w	r5, r7, #20
 800fb12:	f240 123b 	movw	r2, #315	; 0x13b
 800fb16:	4911      	ldr	r1, [pc, #68]	; (800fb5c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 800fb18:	2010      	movs	r0, #16
 800fb1a:	f7f6 f97b 	bl	8005e14 <_ZnwjPKci>
 800fb1e:	4604      	mov	r4, r0
 800fb20:	4629      	mov	r1, r5
 800fb22:	4620      	mov	r0, r4
 800fb24:	f001 fc74 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800fb28:	627c      	str	r4, [r7, #36]	; 0x24
 800fb2a:	f107 0314 	add.w	r3, r7, #20
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7f7 fc11 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800fb34:	f107 031c 	add.w	r3, r7, #28
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7f7 fc0c 	bl	8007356 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb42:	4619      	mov	r1, r3
 800fb44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb46:	f001 fc83 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fb50:	bf00      	nop
 800fb52:	3728      	adds	r7, #40	; 0x28
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bdb0      	pop	{r4, r5, r7, pc}
 800fb58:	0801624c 	.word	0x0801624c
 800fb5c:	08016bc8 	.word	0x08016bc8

0800fb60 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 800fb60:	b5b0      	push	{r4, r5, r7, lr}
 800fb62:	b08c      	sub	sp, #48	; 0x30
 800fb64:	af02      	add	r7, sp, #8
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
 800fb6c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 800fb6e:	f107 031c 	add.w	r3, r7, #28
 800fb72:	491c      	ldr	r1, [pc, #112]	; (800fbe4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7f7 f836 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800fb7a:	f107 0014 	add.w	r0, r7, #20
 800fb7e:	f107 031c 	add.w	r3, r7, #28
 800fb82:	9301      	str	r3, [sp, #4]
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68ba      	ldr	r2, [r7, #8]
 800fb8c:	68f9      	ldr	r1, [r7, #12]
 800fb8e:	f7ff fd8b 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fb92:	f107 0514 	add.w	r5, r7, #20
 800fb96:	f240 1241 	movw	r2, #321	; 0x141
 800fb9a:	4913      	ldr	r1, [pc, #76]	; (800fbe8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 800fb9c:	2010      	movs	r0, #16
 800fb9e:	f7f6 f939 	bl	8005e14 <_ZnwjPKci>
 800fba2:	4604      	mov	r4, r0
 800fba4:	4629      	mov	r1, r5
 800fba6:	4620      	mov	r0, r4
 800fba8:	f001 fc32 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800fbac:	627c      	str	r4, [r7, #36]	; 0x24
 800fbae:	f107 0314 	add.w	r3, r7, #20
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7f7 fbcf 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800fbb8:	f107 031c 	add.w	r3, r7, #28
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7f7 fbca 	bl	8007356 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 800fbc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbc4:	f001 fc5f 	bl	8011486 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbcc:	4619      	mov	r1, r3
 800fbce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbd0:	f001 fc3e 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fbda:	bf00      	nop
 800fbdc:	3728      	adds	r7, #40	; 0x28
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bdb0      	pop	{r4, r5, r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	08016250 	.word	0x08016250
 800fbe8:	08016bc8 	.word	0x08016bc8

0800fbec <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 800fbec:	b5b0      	push	{r4, r5, r7, lr}
 800fbee:	b08c      	sub	sp, #48	; 0x30
 800fbf0:	af02      	add	r7, sp, #8
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 800fbfa:	f107 031c 	add.w	r3, r7, #28
 800fbfe:	491c      	ldr	r1, [pc, #112]	; (800fc70 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7f6 fff0 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800fc06:	f107 0014 	add.w	r0, r7, #20
 800fc0a:	f107 031c 	add.w	r3, r7, #28
 800fc0e:	9301      	str	r3, [sp, #4]
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	9300      	str	r3, [sp, #0]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	68f9      	ldr	r1, [r7, #12]
 800fc1a:	f7ff fd45 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fc1e:	f107 0514 	add.w	r5, r7, #20
 800fc22:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800fc26:	4913      	ldr	r1, [pc, #76]	; (800fc74 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 800fc28:	2010      	movs	r0, #16
 800fc2a:	f7f6 f8f3 	bl	8005e14 <_ZnwjPKci>
 800fc2e:	4604      	mov	r4, r0
 800fc30:	4629      	mov	r1, r5
 800fc32:	4620      	mov	r0, r4
 800fc34:	f001 fbec 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800fc38:	627c      	str	r4, [r7, #36]	; 0x24
 800fc3a:	f107 0314 	add.w	r3, r7, #20
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7f7 fb89 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800fc44:	f107 031c 	add.w	r3, r7, #28
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7f7 fb84 	bl	8007356 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 800fc4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc50:	f001 fc26 	bl	80114a0 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc58:	4619      	mov	r1, r3
 800fc5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc5c:	f001 fbf8 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800fc60:	4602      	mov	r2, r0
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fc66:	bf00      	nop
 800fc68:	3728      	adds	r7, #40	; 0x28
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc6e:	bf00      	nop
 800fc70:	08016254 	.word	0x08016254
 800fc74:	08016bc8 	.word	0x08016bc8

0800fc78 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 800fc78:	b5b0      	push	{r4, r5, r7, lr}
 800fc7a:	b08c      	sub	sp, #48	; 0x30
 800fc7c:	af02      	add	r7, sp, #8
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
 800fc84:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 800fc86:	f107 031c 	add.w	r3, r7, #28
 800fc8a:	491d      	ldr	r1, [pc, #116]	; (800fd00 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7f6 ffaa 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800fc92:	f107 0014 	add.w	r0, r7, #20
 800fc96:	f107 031c 	add.w	r3, r7, #28
 800fc9a:	9301      	str	r3, [sp, #4]
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	9300      	str	r3, [sp, #0]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	68f9      	ldr	r1, [r7, #12]
 800fca6:	f7ff fcff 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fcaa:	f107 0514 	add.w	r5, r7, #20
 800fcae:	f240 124f 	movw	r2, #335	; 0x14f
 800fcb2:	4914      	ldr	r1, [pc, #80]	; (800fd04 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 800fcb4:	2010      	movs	r0, #16
 800fcb6:	f7f6 f8ad 	bl	8005e14 <_ZnwjPKci>
 800fcba:	4604      	mov	r4, r0
 800fcbc:	4629      	mov	r1, r5
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f001 fba6 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800fcc4:	627c      	str	r4, [r7, #36]	; 0x24
 800fcc6:	f107 0314 	add.w	r3, r7, #20
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7f7 fb43 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800fcd0:	f107 031c 	add.w	r3, r7, #28
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7f7 fb3e 	bl	8007356 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 800fcda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcdc:	f001 fbe0 	bl	80114a0 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 800fce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fce2:	f001 fbd0 	bl	8011486 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcea:	4619      	mov	r1, r3
 800fcec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcee:	f001 fbaf 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fcf8:	bf00      	nop
 800fcfa:	3728      	adds	r7, #40	; 0x28
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bdb0      	pop	{r4, r5, r7, pc}
 800fd00:	08016258 	.word	0x08016258
 800fd04:	08016bc8 	.word	0x08016bc8

0800fd08 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 800fd08:	b5b0      	push	{r4, r5, r7, lr}
 800fd0a:	b092      	sub	sp, #72	; 0x48
 800fd0c:	af02      	add	r7, sp, #8
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	607a      	str	r2, [r7, #4]
 800fd14:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 800fd16:	f107 0320 	add.w	r3, r7, #32
 800fd1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7f6 ff62 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800fd22:	f107 0018 	add.w	r0, r7, #24
 800fd26:	f107 0320 	add.w	r3, r7, #32
 800fd2a:	9301      	str	r3, [sp, #4]
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	68ba      	ldr	r2, [r7, #8]
 800fd34:	68f9      	ldr	r1, [r7, #12]
 800fd36:	f7ff fcb7 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fd3a:	f107 0320 	add.w	r3, r7, #32
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f7f7 fb09 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 800fd44:	f107 0010 	add.w	r0, r7, #16
 800fd48:	f107 0118 	add.w	r1, r7, #24
 800fd4c:	2329      	movs	r3, #41	; 0x29
 800fd4e:	222c      	movs	r2, #44	; 0x2c
 800fd50:	f7f7 fcb2 	bl	80076b8 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 800fd54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd58:	f107 0110 	add.w	r1, r7, #16
 800fd5c:	2202      	movs	r2, #2
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7f7 fc4c 	bl	80075fc <_ZNK12SimpleString9subStringEj>
 800fd64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd68:	f107 0310 	add.w	r3, r7, #16
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7f6 ffa5 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
 800fd74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7f7 faec 	bl	8007356 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 800fd7e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 800fd82:	492a      	ldr	r1, [pc, #168]	; (800fe2c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 800fd84:	2010      	movs	r0, #16
 800fd86:	f7f6 f845 	bl	8005e14 <_ZnwjPKci>
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	f107 0310 	add.w	r3, r7, #16
 800fd90:	4619      	mov	r1, r3
 800fd92:	4620      	mov	r0, r4
 800fd94:	f001 fb3c 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800fd98:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 800fd9a:	f107 0318 	add.w	r3, r7, #24
 800fd9e:	2100      	movs	r1, #0
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7f7 fc3c 	bl	800761e <_ZNK12SimpleString2atEj>
 800fda6:	4603      	mov	r3, r0
 800fda8:	461a      	mov	r2, r3
 800fdaa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800fdae:	f107 0118 	add.w	r1, r7, #24
 800fdb2:	232c      	movs	r3, #44	; 0x2c
 800fdb4:	f7f7 fc80 	bl	80076b8 <_ZNK12SimpleString17subStringFromTillEcc>
 800fdb8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800fdbc:	f240 125b 	movw	r2, #347	; 0x15b
 800fdc0:	491a      	ldr	r1, [pc, #104]	; (800fe2c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 800fdc2:	2010      	movs	r0, #16
 800fdc4:	f7f6 f826 	bl	8005e14 <_ZnwjPKci>
 800fdc8:	4604      	mov	r4, r0
 800fdca:	4629      	mov	r1, r5
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f001 fb1f 	bl	8011410 <_ZN10TestFilterC1ERK12SimpleString>
 800fdd2:	63bc      	str	r4, [r7, #56]	; 0x38
 800fdd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7f7 fabc 	bl	8007356 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 800fdde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fde0:	f001 fb51 	bl	8011486 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 800fde4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fde6:	f001 fb4e 	bl	8011486 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdee:	4619      	mov	r1, r3
 800fdf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdf2:	f001 fb2d 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe00:	4619      	mov	r1, r3
 800fe02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fe04:	f001 fb24 	bl	8011450 <_ZN10TestFilter3addEPS_>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 800fe0e:	f107 0310 	add.w	r3, r7, #16
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7f7 fa9f 	bl	8007356 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 800fe18:	f107 0318 	add.w	r3, r7, #24
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7f7 fa9a 	bl	8007356 <_ZN12SimpleStringD1Ev>
}
 800fe22:	bf00      	nop
 800fe24:	3740      	adds	r7, #64	; 0x40
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bdb0      	pop	{r4, r5, r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	08016bc8 	.word	0x08016bc8

0800fe30 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 800fe30:	b590      	push	{r4, r7, lr}
 800fe32:	b08b      	sub	sp, #44	; 0x2c
 800fe34:	af02      	add	r7, sp, #8
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 800fe3e:	f107 0318 	add.w	r3, r7, #24
 800fe42:	491b      	ldr	r1, [pc, #108]	; (800feb0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7f6 fece 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800fe4a:	f107 0010 	add.w	r0, r7, #16
 800fe4e:	f107 0318 	add.w	r3, r7, #24
 800fe52:	9301      	str	r3, [sp, #4]
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	9300      	str	r3, [sp, #0]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	68ba      	ldr	r2, [r7, #8]
 800fe5c:	68f9      	ldr	r1, [r7, #12]
 800fe5e:	f7ff fc23 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fe62:	f107 0318 	add.w	r3, r7, #24
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7f7 fa75 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 800fe6c:	f107 0310 	add.w	r3, r7, #16
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7f7 fa4f 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800fe76:	4603      	mov	r3, r0
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	bf0c      	ite	eq
 800fe7c:	2301      	moveq	r3, #1
 800fe7e:	2300      	movne	r3, #0
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d001      	beq.n	800fe8a <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 800fe86:	2400      	movs	r4, #0
 800fe88:	e008      	b.n	800fe9c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	3330      	adds	r3, #48	; 0x30
 800fe8e:	f107 0210 	add.w	r2, r7, #16
 800fe92:	4611      	mov	r1, r2
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7f6 ff12 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 800fe9a:	2401      	movs	r4, #1
 800fe9c:	f107 0310 	add.w	r3, r7, #16
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7f7 fa58 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800fea6:	2c01      	cmp	r4, #1
}
 800fea8:	3724      	adds	r7, #36	; 0x24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd90      	pop	{r4, r7, pc}
 800feae:	bf00      	nop
 800feb0:	08016280 	.word	0x08016280

0800feb4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 800feb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feb6:	b093      	sub	sp, #76	; 0x4c
 800feb8:	af02      	add	r7, sp, #8
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	607a      	str	r2, [r7, #4]
 800fec0:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 800fec2:	f107 0318 	add.w	r3, r7, #24
 800fec6:	4953      	ldr	r1, [pc, #332]	; (8010014 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 800fec8:	4618      	mov	r0, r3
 800feca:	f7f6 fe8c 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800fece:	f107 0010 	add.w	r0, r7, #16
 800fed2:	f107 0318 	add.w	r3, r7, #24
 800fed6:	9301      	str	r3, [sp, #4]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	68ba      	ldr	r2, [r7, #8]
 800fee0:	68f9      	ldr	r1, [r7, #12]
 800fee2:	f7ff fbe1 	bl	800f6a8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fee6:	f107 0318 	add.w	r3, r7, #24
 800feea:	4618      	mov	r0, r3
 800feec:	f7f7 fa33 	bl	8007356 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 800fef0:	f107 0310 	add.w	r3, r7, #16
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7f7 fa0d 	bl	8007314 <_ZNK12SimpleString4sizeEv>
 800fefa:	4603      	mov	r3, r0
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	bf0c      	ite	eq
 800ff00:	2301      	moveq	r3, #1
 800ff02:	2300      	movne	r3, #0
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d001      	beq.n	800ff0e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 800ff0a:	2400      	movs	r4, #0
 800ff0c:	e078      	b.n	8010000 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 800ff0e:	2500      	movs	r5, #0
 800ff10:	f107 0320 	add.w	r3, r7, #32
 800ff14:	4940      	ldr	r1, [pc, #256]	; (8010018 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7f6 fe65 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ff1c:	2601      	movs	r6, #1
 800ff1e:	f107 0220 	add.w	r2, r7, #32
 800ff22:	f107 0310 	add.w	r3, r7, #16
 800ff26:	4611      	mov	r1, r2
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7f7 fa20 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d111      	bne.n	800ff58 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 800ff34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff38:	4938      	ldr	r1, [pc, #224]	; (801001c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7f6 fe53 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ff40:	2501      	movs	r5, #1
 800ff42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ff46:	f107 0310 	add.w	r3, r7, #16
 800ff4a:	4611      	mov	r1, r2
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7f7 fa0e 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d001      	beq.n	800ff5c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 800ff58:	2401      	movs	r4, #1
 800ff5a:	e000      	b.n	800ff5e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 800ff5c:	2400      	movs	r4, #0
 800ff5e:	2d00      	cmp	r5, #0
 800ff60:	d004      	beq.n	800ff6c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 800ff62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7f7 f9f5 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ff6c:	2e00      	cmp	r6, #0
 800ff6e:	d004      	beq.n	800ff7a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 800ff70:	f107 0320 	add.w	r3, r7, #32
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7f7 f9ee 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ff7a:	2c00      	cmp	r4, #0
 800ff7c:	d005      	beq.n	800ff8a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2200      	movs	r2, #0
 800ff82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800ff86:	2401      	movs	r4, #1
 800ff88:	e03a      	b.n	8010000 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 800ff8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff8e:	4924      	ldr	r1, [pc, #144]	; (8010020 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7f6 fe28 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ff96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ff9a:	f107 0310 	add.w	r3, r7, #16
 800ff9e:	4611      	mov	r1, r2
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7f7 f9e4 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	461c      	mov	r4, r3
 800ffaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7f7 f9d1 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ffb4:	2c00      	cmp	r4, #0
 800ffb6:	d005      	beq.n	800ffc4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800ffc0:	2401      	movs	r4, #1
 800ffc2:	e01d      	b.n	8010000 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 800ffc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffc8:	4916      	ldr	r1, [pc, #88]	; (8010024 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7f6 fe0b 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 800ffd0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ffd4:	f107 0310 	add.w	r3, r7, #16
 800ffd8:	4611      	mov	r1, r2
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7f7 f9c7 	bl	800736e <_ZeqRK12SimpleStringS1_>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	461c      	mov	r4, r3
 800ffe4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7f7 f9b4 	bl	8007356 <_ZN12SimpleStringD1Ev>
 800ffee:	2c00      	cmp	r4, #0
 800fff0:	d005      	beq.n	800fffe <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2202      	movs	r2, #2
 800fff6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800fffa:	2401      	movs	r4, #1
 800fffc:	e000      	b.n	8010000 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 800fffe:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8010000:	f107 0310 	add.w	r3, r7, #16
 8010004:	4618      	mov	r0, r3
 8010006:	f7f7 f9a6 	bl	8007356 <_ZN12SimpleStringD1Ev>
 801000a:	4623      	mov	r3, r4
}
 801000c:	4618      	mov	r0, r3
 801000e:	3744      	adds	r7, #68	; 0x44
 8010010:	46bd      	mov	sp, r7
 8010012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010014:	0801627c 	.word	0x0801627c
 8010018:	08016bec 	.word	0x08016bec
 801001c:	08016bf4 	.word	0x08016bf4
 8010020:	08016bfc 	.word	0x08016bfc
 8010024:	08016c04 	.word	0x08016c04

08010028 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010036:	2b01      	cmp	r3, #1
 8010038:	bf0c      	ite	eq
 801003a:	2301      	moveq	r3, #1
 801003c:	2300      	movne	r3, #0
 801003e:	b2db      	uxtb	r3, r3
}
 8010040:	4618      	mov	r0, r3
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801005a:	2b02      	cmp	r3, #2
 801005c:	bf0c      	ite	eq
 801005e:	2301      	moveq	r3, #1
 8010060:	2300      	movne	r3, #0
 8010062:	b2db      	uxtb	r3, r3
}
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    return packageName_;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	3330      	adds	r3, #48	; 0x30
}
 801007c:	4618      	mov	r0, r3
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	601a      	str	r2, [r3, #0]
    {}
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100b2:	2200      	movs	r2, #0
 80100b4:	601a      	str	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100bc:	3304      	adds	r3, #4
 80100be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80100c2:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2200      	movs	r2, #0
 80100c8:	701a      	strb	r2, [r3, #0]
}
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	4618      	mov	r0, r3
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80100e6:	2200      	movs	r2, #0
 80100e8:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	701a      	strb	r2, [r3, #0]
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 80100fc:	b40e      	push	{r1, r2, r3}
 80100fe:	b590      	push	{r4, r7, lr}
 8010100:	b086      	sub	sp, #24
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801010c:	3304      	adds	r3, #4
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d032      	beq.n	8010188 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8010122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010126:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8010128:	4b1b      	ldr	r3, [pc, #108]	; (8010198 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 801012a:	681c      	ldr	r4, [r3, #0]
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	18d0      	adds	r0, r2, r3
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	1c59      	adds	r1, r3, #1
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010140:	47a0      	blx	r4
 8010142:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	2b00      	cmp	r3, #0
 8010148:	dd09      	ble.n	801015e <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	441a      	add	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801015c:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801016c:	3304      	adds	r3, #4
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	429a      	cmp	r2, r3
 8010172:	d90a      	bls.n	801018a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801017a:	3304      	adds	r3, #4
 801017c:	681a      	ldr	r2, [r3, #0]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010184:	601a      	str	r2, [r3, #0]
 8010186:	e000      	b.n	801018a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8010188:	bf00      	nop
    va_end(arguments);
}
 801018a:	3718      	adds	r7, #24
 801018c:	46bd      	mov	sp, r7
 801018e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8010192:	b003      	add	sp, #12
 8010194:	4770      	bx	lr
 8010196:	bf00      	nop
 8010198:	200000ac 	.word	0x200000ac

0801019c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b08c      	sub	sp, #48	; 0x30
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80101ac:	2310      	movs	r3, #16
 80101ae:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 80101b0:	2300      	movs	r3, #0
 80101b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 80101b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d273      	bcs.n	80102a4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 80101bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101be:	493b      	ldr	r1, [pc, #236]	; (80102ac <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 80101c0:	68f8      	ldr	r0, [r7, #12]
 80101c2:	f7ff ff9b 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80101ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d0:	2b10      	cmp	r3, #16
 80101d2:	d901      	bls.n	80101d8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80101d4:	2310      	movs	r3, #16
 80101d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	f1c3 0310 	rsb	r3, r3, #16
 80101de:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80101e0:	2300      	movs	r3, #0
 80101e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80101e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d215      	bcs.n	8010218 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 80101ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f0:	4413      	add	r3, r2
 80101f2:	69fa      	ldr	r2, [r7, #28]
 80101f4:	4413      	add	r3, r2
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	461a      	mov	r2, r3
 80101fa:	492d      	ldr	r1, [pc, #180]	; (80102b0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f7ff ff7d 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8010202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010204:	2b07      	cmp	r3, #7
 8010206:	d103      	bne.n	8010210 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8010208:	492a      	ldr	r1, [pc, #168]	; (80102b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f7ff ff76 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8010210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010212:	3301      	adds	r3, #1
 8010214:	62bb      	str	r3, [r7, #40]	; 0x28
 8010216:	e7e5      	b.n	80101e4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8010218:	2300      	movs	r3, #0
 801021a:	62bb      	str	r3, [r7, #40]	; 0x28
 801021c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801021e:	697b      	ldr	r3, [r7, #20]
 8010220:	429a      	cmp	r2, r3
 8010222:	d207      	bcs.n	8010234 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8010224:	4924      	ldr	r1, [pc, #144]	; (80102b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	f7ff ff68 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 801022c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022e:	3301      	adds	r3, #1
 8010230:	62bb      	str	r3, [r7, #40]	; 0x28
 8010232:	e7f3      	b.n	801021c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	2b08      	cmp	r3, #8
 8010238:	d903      	bls.n	8010242 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801023a:	491e      	ldr	r1, [pc, #120]	; (80102b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f7ff ff5d 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8010242:	491e      	ldr	r1, [pc, #120]	; (80102bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8010244:	68f8      	ldr	r0, [r7, #12]
 8010246:	f7ff ff59 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801024a:	2300      	movs	r3, #0
 801024c:	62bb      	str	r3, [r7, #40]	; 0x28
 801024e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010252:	429a      	cmp	r2, r3
 8010254:	d21d      	bcs.n	8010292 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8010256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	4413      	add	r3, r2
 801025c:	69fa      	ldr	r2, [r7, #28]
 801025e:	4413      	add	r3, r2
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8010266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801026a:	2b1f      	cmp	r3, #31
 801026c:	d903      	bls.n	8010276 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 801026e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010272:	2b7e      	cmp	r3, #126	; 0x7e
 8010274:	d902      	bls.n	801027c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8010276:	232e      	movs	r3, #46	; 0x2e
 8010278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 801027c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010280:	461a      	mov	r2, r3
 8010282:	490f      	ldr	r1, [pc, #60]	; (80102c0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8010284:	68f8      	ldr	r0, [r7, #12]
 8010286:	f7ff ff39 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801028a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028c:	3301      	adds	r3, #1
 801028e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010290:	e7dd      	b.n	801024e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8010292:	490c      	ldr	r1, [pc, #48]	; (80102c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f7ff ff31 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 801029a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801029c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029e:	4413      	add	r3, r2
 80102a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80102a2:	e787      	b.n	80101b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80102a4:	bf00      	nop
 80102a6:	3730      	adds	r7, #48	; 0x30
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}
 80102ac:	08016c1c 	.word	0x08016c1c
 80102b0:	08016c28 	.word	0x08016c28
 80102b4:	08016c30 	.word	0x08016c30
 80102b8:	08016c34 	.word	0x08016c34
 80102bc:	08016c38 	.word	0x08016c38
 80102c0:	08016c3c 	.word	0x08016c3c
 80102c4:	08016c40 	.word	0x08016c40

080102c8 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
    return buffer_;
 80102d0:	687b      	ldr	r3, [r7, #4]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80102de:	b480      	push	{r7}
 80102e0:	b083      	sub	sp, #12
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102ee:	3304      	adds	r3, #4
 80102f0:	683a      	ldr	r2, [r7, #0]
 80102f2:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102fa:	3304      	adds	r3, #4
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010302:	d306      	bcc.n	8010312 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801030a:	3304      	adds	r3, #4
 801030c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010310:	601a      	str	r2, [r3, #0]
}
 8010312:	bf00      	nop
 8010314:	370c      	adds	r7, #12
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 801031e:	b480      	push	{r7}
 8010320:	b083      	sub	sp, #12
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801032c:	3304      	adds	r3, #4
 801032e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010332:	601a      	str	r2, [r3, #0]
}
 8010334:	bf00      	nop
 8010336:	370c      	adds	r7, #12
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr

08010340 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8010340:	b480      	push	{r7}
 8010342:	b083      	sub	sp, #12
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010356:	3304      	adds	r3, #4
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	429a      	cmp	r2, r3
 801035c:	bf2c      	ite	cs
 801035e:	2301      	movcs	r3, #1
 8010360:	2300      	movcc	r3, #0
 8010362:	b2db      	uxtb	r3, r3
}
 8010364:	4618      	mov	r0, r3
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	601a      	str	r2, [r3, #0]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2200      	movs	r2, #0
 8010382:	711a      	strb	r2, [r3, #4]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	3308      	adds	r3, #8
 8010388:	4618      	mov	r0, r3
 801038a:	f7ff fe8b 	bl	80100a4 <_ZN18SimpleStringBufferC1Ev>
{
}
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	4618      	mov	r0, r3
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8010398:	b5b0      	push	{r4, r5, r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af02      	add	r7, sp, #8
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f103 0408 	add.w	r4, r3, #8
 80103ac:	687d      	ldr	r5, [r7, #4]
 80103ae:	6a3b      	ldr	r3, [r7, #32]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3314      	adds	r3, #20
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	6a38      	ldr	r0, [r7, #32]
 80103b8:	4798      	blx	r3
 80103ba:	4603      	mov	r3, r0
 80103bc:	9301      	str	r3, [sp, #4]
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	9300      	str	r3, [sp, #0]
 80103c2:	462b      	mov	r3, r5
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	4904      	ldr	r1, [pc, #16]	; (80103d8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7ff fe97 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
}
 80103ce:	bf00      	nop
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bdb0      	pop	{r4, r5, r7, pc}
 80103d6:	bf00      	nop
 80103d8:	08016c44 	.word	0x08016c44

080103dc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80103dc:	b5b0      	push	{r4, r5, r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af02      	add	r7, sp, #8
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	607a      	str	r2, [r7, #4]
 80103e8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f103 0408 	add.w	r4, r3, #8
 80103f0:	687d      	ldr	r5, [r7, #4]
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3318      	adds	r3, #24
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	6838      	ldr	r0, [r7, #0]
 80103fc:	4798      	blx	r3
 80103fe:	4603      	mov	r3, r0
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	462b      	mov	r3, r5
 8010404:	68ba      	ldr	r2, [r7, #8]
 8010406:	4904      	ldr	r1, [pc, #16]	; (8010418 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8010408:	4620      	mov	r0, r4
 801040a:	f7ff fe77 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
}
 801040e:	bf00      	nop
 8010410:	3710      	adds	r7, #16
 8010412:	46bd      	mov	sp, r7
 8010414:	bdb0      	pop	{r4, r5, r7, pc}
 8010416:	bf00      	nop
 8010418:	08016c7c 	.word	0x08016c7c

0801041c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b082      	sub	sp, #8
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	3308      	adds	r3, #8
 8010428:	4903      	ldr	r1, [pc, #12]	; (8010438 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801042a:	4618      	mov	r0, r3
 801042c:	f7ff fe66 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010430:	bf00      	nop
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	08016cac 	.word	0x08016cac

0801043c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8010450:	2367      	movs	r3, #103	; 0x67
 8010452:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f203 1311 	addw	r3, r3, #273	; 0x111
 801045a:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f103 0208 	add.w	r2, r3, #8
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010468:	4619      	mov	r1, r3
 801046a:	4610      	mov	r0, r2
 801046c:	f7ff ff37 	bl	80102de <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8010470:	bf00      	nop
 8010472:	3710      	adds	r7, #16
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8010478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801047a:	b089      	sub	sp, #36	; 0x24
 801047c:	af04      	add	r7, sp, #16
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d102      	bne.n	8010490 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801048a:	68f8      	ldr	r0, [r7, #12]
 801048c:	f000 f882 	bl	8010594 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	1c5a      	adds	r2, r3, #1
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f103 0508 	add.w	r5, r3, #8
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80104b2:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	695a      	ldr	r2, [r3, #20]
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	695b      	ldr	r3, [r3, #20]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	3314      	adds	r3, #20
 80104c0:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80104c2:	4610      	mov	r0, r2
 80104c4:	4798      	blx	r3
 80104c6:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80104cc:	9303      	str	r3, [sp, #12]
 80104ce:	9202      	str	r2, [sp, #8]
 80104d0:	683a      	ldr	r2, [r7, #0]
 80104d2:	9201      	str	r2, [sp, #4]
 80104d4:	9400      	str	r4, [sp, #0]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4632      	mov	r2, r6
 80104da:	4915      	ldr	r1, [pc, #84]	; (8010530 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80104dc:	4628      	mov	r0, r5
 80104de:	f7ff fe0d 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f103 0008 	add.w	r0, r3, #8
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	6899      	ldr	r1, [r3, #8]
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	461a      	mov	r2, r3
 80104f2:	f7ff fe53 	bl	801019c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	695a      	ldr	r2, [r3, #20]
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	3314      	adds	r3, #20
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4610      	mov	r0, r2
 8010506:	4798      	blx	r3
 8010508:	4603      	mov	r3, r0
 801050a:	490a      	ldr	r1, [pc, #40]	; (8010534 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 801050c:	4618      	mov	r0, r3
 801050e:	f7f6 f9a7 	bl	8006860 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	bf0c      	ite	eq
 8010518:	2301      	moveq	r3, #1
 801051a:	2300      	movne	r3, #0
 801051c:	b2db      	uxtb	r3, r3
 801051e:	2b00      	cmp	r3, #0
 8010520:	d002      	beq.n	8010528 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	2201      	movs	r2, #1
 8010526:	711a      	strb	r2, [r3, #4]
}
 8010528:	bf00      	nop
 801052a:	3714      	adds	r7, #20
 801052c:	46bd      	mov	sp, r7
 801052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010530:	08016ccc 	.word	0x08016ccc
 8010534:	08016d2c 	.word	0x08016d2c

08010538 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d103      	bne.n	8010550 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f7ff ff67 	bl	801041c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801054e:	e01e      	b.n	801058e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	3308      	adds	r3, #8
 8010554:	4618      	mov	r0, r3
 8010556:	f7ff fef3 	bl	8010340 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 801055a:	4603      	mov	r3, r0
 801055c:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	3308      	adds	r3, #8
 8010562:	4618      	mov	r0, r3
 8010564:	f7ff fedb 	bl	801031e <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8010568:	7bfb      	ldrb	r3, [r7, #15]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d002      	beq.n	8010574 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f000 f820 	bl	80105b4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4619      	mov	r1, r3
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f82a 	bl	80105d4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	791b      	ldrb	r3, [r3, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f839 	bl	8010600 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	3308      	adds	r3, #8
 80105a0:	4903      	ldr	r1, [pc, #12]	; (80105b0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7ff fdaa 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
}
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	08016d34 	.word	0x08016d34

080105b4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	3308      	adds	r3, #8
 80105c0:	4903      	ldr	r1, [pc, #12]	; (80105d0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7ff fd9a 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	08016d4c 	.word	0x08016d4c

080105d4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f103 0008 	add.w	r0, r3, #8
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	4a04      	ldr	r2, [pc, #16]	; (80105f8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80105e8:	4904      	ldr	r1, [pc, #16]	; (80105fc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80105ea:	f7ff fd87 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
}
 80105ee:	bf00      	nop
 80105f0:	3708      	adds	r7, #8
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	08016d94 	.word	0x08016d94
 80105fc:	08016dac 	.word	0x08016dac

08010600 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	3308      	adds	r3, #8
 801060c:	4903      	ldr	r1, [pc, #12]	; (801061c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 801060e:	4618      	mov	r0, r3
 8010610:	f7ff fd74 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010614:	bf00      	nop
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	08016db4 	.word	0x08016db4

08010620 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b08a      	sub	sp, #40	; 0x28
 8010624:	af06      	add	r7, sp, #24
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
 801062c:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801062e:	f7f9 fe9f 	bl	800a370 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8010632:	4602      	mov	r2, r0
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	9305      	str	r3, [sp, #20]
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	9304      	str	r3, [sp, #16]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	9303      	str	r3, [sp, #12]
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	9302      	str	r3, [sp, #8]
 8010644:	9201      	str	r2, [sp, #4]
 8010646:	2300      	movs	r3, #0
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	2300      	movs	r3, #0
 801064c:	4a04      	ldr	r2, [pc, #16]	; (8010660 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801064e:	4905      	ldr	r1, [pc, #20]	; (8010664 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f000 f855 	bl	8010700 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8010656:	bf00      	nop
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	08016c10 	.word	0x08016c10
 8010664:	08016ec8 	.word	0x08016ec8

08010668 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010668:	b590      	push	{r4, r7, lr}
 801066a:	b08b      	sub	sp, #44	; 0x2c
 801066c:	af06      	add	r7, sp, #24
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	68d8      	ldr	r0, [r3, #12]
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	691c      	ldr	r4, [r3, #16]
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	68ba      	ldr	r2, [r7, #8]
 8010684:	6952      	ldr	r2, [r2, #20]
 8010686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010688:	9105      	str	r1, [sp, #20]
 801068a:	6a39      	ldr	r1, [r7, #32]
 801068c:	9104      	str	r1, [sp, #16]
 801068e:	6839      	ldr	r1, [r7, #0]
 8010690:	9103      	str	r1, [sp, #12]
 8010692:	6879      	ldr	r1, [r7, #4]
 8010694:	9102      	str	r1, [sp, #8]
 8010696:	9201      	str	r2, [sp, #4]
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	4623      	mov	r3, r4
 801069c:	4602      	mov	r2, r0
 801069e:	4904      	ldr	r1, [pc, #16]	; (80106b0 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f000 f82d 	bl	8010700 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80106a6:	bf00      	nop
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd90      	pop	{r4, r7, pc}
 80106ae:	bf00      	nop
 80106b0:	08016eec 	.word	0x08016eec

080106b4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80106b4:	b590      	push	{r4, r7, lr}
 80106b6:	b08b      	sub	sp, #44	; 0x2c
 80106b8:	af06      	add	r7, sp, #24
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
 80106c0:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	68d8      	ldr	r0, [r3, #12]
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	691c      	ldr	r4, [r3, #16]
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	6952      	ldr	r2, [r2, #20]
 80106d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106d4:	9105      	str	r1, [sp, #20]
 80106d6:	6a39      	ldr	r1, [r7, #32]
 80106d8:	9104      	str	r1, [sp, #16]
 80106da:	6839      	ldr	r1, [r7, #0]
 80106dc:	9103      	str	r1, [sp, #12]
 80106de:	6879      	ldr	r1, [r7, #4]
 80106e0:	9102      	str	r1, [sp, #8]
 80106e2:	9201      	str	r2, [sp, #4]
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	4623      	mov	r3, r4
 80106e8:	4602      	mov	r2, r0
 80106ea:	4904      	ldr	r1, [pc, #16]	; (80106fc <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f000 f807 	bl	8010700 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80106f2:	bf00      	nop
 80106f4:	3714      	adds	r7, #20
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd90      	pop	{r4, r7, pc}
 80106fa:	bf00      	nop
 80106fc:	08016f14 	.word	0x08016f14

08010700 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010700:	b590      	push	{r4, r7, lr}
 8010702:	b087      	sub	sp, #28
 8010704:	af02      	add	r7, sp, #8
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
 801070c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	3308      	adds	r3, #8
 8010712:	68ba      	ldr	r2, [r7, #8]
 8010714:	4910      	ldr	r1, [pc, #64]	; (8010758 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8010716:	4618      	mov	r0, r3
 8010718:	f7ff fcf0 	bl	80100fc <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 801071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	6a3b      	ldr	r3, [r7, #32]
 8010722:	683a      	ldr	r2, [r7, #0]
 8010724:	6879      	ldr	r1, [r7, #4]
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f7ff fe36 	bl	8010398 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 801072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f7ff fe52 	bl	80103dc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8010738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3308      	adds	r3, #8
 801073e:	681c      	ldr	r4, [r3, #0]
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f000 f80b 	bl	801075c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8010746:	4603      	mov	r3, r0
 8010748:	4619      	mov	r1, r3
 801074a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801074c:	47a0      	blx	r4
}
 801074e:	bf00      	nop
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	bd90      	pop	{r4, r7, pc}
 8010756:	bf00      	nop
 8010758:	08016f40 	.word	0x08016f40

0801075c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	3308      	adds	r3, #8
 8010768:	4618      	mov	r0, r3
 801076a:	f7ff fdad 	bl	80102c8 <_ZN18SimpleStringBuffer8toStringEv>
 801076e:	4603      	mov	r3, r0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	3308      	adds	r3, #8
 8010784:	4618      	mov	r0, r3
 8010786:	f7ff fca7 	bl	80100d8 <_ZN18SimpleStringBuffer5clearEv>
}
 801078a:	bf00      	nop
 801078c:	3708      	adds	r7, #8
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8010792:	b480      	push	{r7}
 8010794:	b085      	sub	sp, #20
 8010796:	af00      	add	r7, sp, #0
 8010798:	60f8      	str	r0, [r7, #12]
 801079a:	60b9      	str	r1, [r7, #8]
 801079c:	607a      	str	r2, [r7, #4]
 801079e:	603b      	str	r3, [r7, #0]
    number_ = number;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	687a      	ldr	r2, [r7, #4]
 80107a4:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	609a      	str	r2, [r3, #8]
    size_ = size;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	683a      	ldr	r2, [r7, #0]
 80107b0:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	69ba      	ldr	r2, [r7, #24]
 80107b6:	615a      	str	r2, [r3, #20]
    period_ = period;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	7f3a      	ldrb	r2, [r7, #28]
 80107bc:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80107c4:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ca:	60da      	str	r2, [r3, #12]
    line_ = line;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107d0:	611a      	str	r2, [r3, #16]
}
 80107d2:	bf00      	nop
 80107d4:	3714      	adds	r7, #20
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80107de:	b480      	push	{r7}
 80107e0:	b085      	sub	sp, #20
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	60f8      	str	r0, [r7, #12]
 80107e6:	60b9      	str	r1, [r7, #8]
 80107e8:	4613      	mov	r3, r2
 80107ea:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80107ec:	79fb      	ldrb	r3, [r7, #7]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00b      	beq.n	801080a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	7e1b      	ldrb	r3, [r3, #24]
 80107f6:	79fa      	ldrb	r2, [r7, #7]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d006      	beq.n	801080a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	7e1b      	ldrb	r3, [r3, #24]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d004      	beq.n	801080e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8010804:	79fb      	ldrb	r3, [r7, #7]
 8010806:	2b02      	cmp	r3, #2
 8010808:	d101      	bne.n	801080e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801080a:	2301      	movs	r3, #1
 801080c:	e000      	b.n	8010810 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 801080e:	2300      	movs	r3, #0
}
 8010810:	4618      	mov	r0, r3
 8010812:	3714      	adds	r7, #20
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	61da      	str	r2, [r3, #28]
    head_ = node;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	683a      	ldr	r2, [r7, #0]
 8010832:	601a      	str	r2, [r3, #0]
}
 8010834:	bf00      	nop
 8010836:	370c      	adds	r7, #12
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8010840:	b480      	push	{r7}
 8010842:	b085      	sub	sp, #20
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8010850:	2300      	movs	r3, #0
 8010852:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d019      	beq.n	801088e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	689b      	ldr	r3, [r3, #8]
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	429a      	cmp	r2, r3
 8010862:	d10e      	bne.n	8010882 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d005      	beq.n	8010876 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	69da      	ldr	r2, [r3, #28]
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	61da      	str	r2, [r3, #28]
                return cur;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	e00c      	b.n	8010890 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	69da      	ldr	r2, [r3, #28]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	601a      	str	r2, [r3, #0]
                return cur;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	e006      	b.n	8010890 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	69db      	ldr	r3, [r3, #28]
 801088a:	60fb      	str	r3, [r7, #12]
    while (cur) {
 801088c:	e7e2      	b.n	8010854 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3714      	adds	r7, #20
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d00a      	beq.n	80108c8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	689b      	ldr	r3, [r3, #8]
 80108b6:	683a      	ldr	r2, [r7, #0]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d101      	bne.n	80108c0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	e004      	b.n	80108ca <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	69db      	ldr	r3, [r3, #28]
 80108c4:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80108c6:	e7f1      	b.n	80108ac <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3714      	adds	r7, #20
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr

080108d6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b086      	sub	sp, #24
 80108da:	af00      	add	r7, sp, #0
 80108dc:	60f8      	str	r0, [r7, #12]
 80108de:	60b9      	str	r1, [r7, #8]
 80108e0:	4613      	mov	r3, r2
 80108e2:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	617b      	str	r3, [r7, #20]
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00e      	beq.n	801090c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80108ee:	79fb      	ldrb	r3, [r7, #7]
 80108f0:	461a      	mov	r2, r3
 80108f2:	6979      	ldr	r1, [r7, #20]
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f7ff ff72 	bl	80107de <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d001      	beq.n	8010904 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	e004      	b.n	801090e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	69db      	ldr	r3, [r3, #28]
 8010908:	617b      	str	r3, [r7, #20]
 801090a:	e7ed      	b.n	80108e8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3718      	adds	r7, #24
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8010916:	b580      	push	{r7, lr}
 8010918:	b082      	sub	sp, #8
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
 801091e:	460b      	mov	r3, r1
 8010920:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	78fa      	ldrb	r2, [r7, #3]
 8010928:	4619      	mov	r1, r3
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7ff ffd3 	bl	80108d6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010930:	4603      	mov	r3, r0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b084      	sub	sp, #16
 801093e:	af00      	add	r7, sp, #0
 8010940:	60f8      	str	r0, [r7, #12]
 8010942:	60b9      	str	r1, [r7, #8]
 8010944:	4613      	mov	r3, r2
 8010946:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	69db      	ldr	r3, [r3, #28]
 801094c:	79fa      	ldrb	r2, [r7, #7]
 801094e:	4619      	mov	r1, r3
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f7ff ffc0 	bl	80108d6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010956:	4603      	mov	r3, r0
}
 8010958:	4618      	mov	r0, r3
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	460b      	mov	r3, r1
 801096a:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801096c:	2300      	movs	r3, #0
 801096e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	60bb      	str	r3, [r7, #8]
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d00f      	beq.n	801099c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 801097c:	78fb      	ldrb	r3, [r7, #3]
 801097e:	461a      	mov	r2, r3
 8010980:	68b9      	ldr	r1, [r7, #8]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7ff ff2b 	bl	80107de <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d002      	beq.n	8010994 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	3301      	adds	r3, #1
 8010992:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	69db      	ldr	r3, [r3, #28]
 8010998:	60bb      	str	r3, [r7, #8]
 801099a:	e7ec      	b.n	8010976 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 801099c:	68fb      	ldr	r3, [r7, #12]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
	...

080109a8 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80109b2:	6839      	ldr	r1, [r7, #0]
 80109b4:	4b09      	ldr	r3, [pc, #36]	; (80109dc <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80109b6:	fba3 2301 	umull	r2, r3, r3, r1
 80109ba:	1aca      	subs	r2, r1, r3
 80109bc:	0852      	lsrs	r2, r2, #1
 80109be:	4413      	add	r3, r2
 80109c0:	099a      	lsrs	r2, r3, #6
 80109c2:	4613      	mov	r3, r2
 80109c4:	00db      	lsls	r3, r3, #3
 80109c6:	4413      	add	r3, r2
 80109c8:	00db      	lsls	r3, r3, #3
 80109ca:	4413      	add	r3, r2
 80109cc:	1aca      	subs	r2, r1, r3
 80109ce:	4613      	mov	r3, r2
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr
 80109dc:	c0e07039 	.word	0xc0e07039

080109e0 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	4619      	mov	r1, r3
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7ff ffd9 	bl	80109a8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80109f6:	4603      	mov	r3, r0
 80109f8:	009b      	lsls	r3, r3, #2
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	4413      	add	r3, r2
 80109fe:	6839      	ldr	r1, [r7, #0]
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7ff ff0b 	bl	801081c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8010a06:	bf00      	nop
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b082      	sub	sp, #8
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8010a18:	6839      	ldr	r1, [r7, #0]
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7ff ffc4 	bl	80109a8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8010a20:	4603      	mov	r3, r0
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	4413      	add	r3, r2
 8010a28:	6839      	ldr	r1, [r7, #0]
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f7ff ff08 	bl	8010840 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8010a30:	4603      	mov	r3, r0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}

08010a3a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b082      	sub	sp, #8
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
 8010a42:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8010a44:	6839      	ldr	r1, [r7, #0]
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f7ff ffae 	bl	80109a8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	009b      	lsls	r3, r3, #2
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	4413      	add	r3, r2
 8010a54:	6839      	ldr	r1, [r7, #0]
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff ff20 	bl	801089c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8010a5c:	4603      	mov	r3, r0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b084      	sub	sp, #16
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
 8010a6e:	460b      	mov	r3, r1
 8010a70:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8010a72:	2300      	movs	r3, #0
 8010a74:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8010a76:	2300      	movs	r3, #0
 8010a78:	60bb      	str	r3, [r7, #8]
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	2b48      	cmp	r3, #72	; 0x48
 8010a7e:	dc10      	bgt.n	8010aa2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	4413      	add	r3, r2
 8010a88:	78fa      	ldrb	r2, [r7, #3]
 8010a8a:	4611      	mov	r1, r2
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7ff ff67 	bl	8010960 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8010a92:	4602      	mov	r2, r0
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	4413      	add	r3, r2
 8010a98:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	60bb      	str	r3, [r7, #8]
 8010aa0:	e7eb      	b.n	8010a7a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3710      	adds	r7, #16
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8010ab8:	2300      	movs	r3, #0
 8010aba:	60fb      	str	r3, [r7, #12]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	2b48      	cmp	r3, #72	; 0x48
 8010ac0:	dc12      	bgt.n	8010ae8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	009b      	lsls	r3, r3, #2
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	4413      	add	r3, r2
 8010aca:	78fa      	ldrb	r2, [r7, #3]
 8010acc:	4611      	mov	r1, r2
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7ff ff21 	bl	8010916 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8010ad4:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d001      	beq.n	8010ae0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	e004      	b.n	8010aea <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	60fb      	str	r3, [r7, #12]
 8010ae6:	e7e9      	b.n	8010abc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b086      	sub	sp, #24
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	60f8      	str	r0, [r7, #12]
 8010afa:	60b9      	str	r1, [r7, #8]
 8010afc:	4613      	mov	r3, r2
 8010afe:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	689b      	ldr	r3, [r3, #8]
 8010b04:	4619      	mov	r1, r3
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f7ff ff4e 	bl	80109a8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8010b0c:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	4413      	add	r3, r2
 8010b16:	79fa      	ldrb	r2, [r7, #7]
 8010b18:	68b9      	ldr	r1, [r7, #8]
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7ff ff0d 	bl	801093a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010b20:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	e019      	b.n	8010b60 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	617b      	str	r3, [r7, #20]
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	2b48      	cmp	r3, #72	; 0x48
 8010b36:	d812      	bhi.n	8010b5e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	4413      	add	r3, r2
 8010b40:	79fa      	ldrb	r2, [r7, #7]
 8010b42:	4611      	mov	r1, r2
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff fee6 	bl	8010916 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8010b4a:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d001      	beq.n	8010b56 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	e004      	b.n	8010b60 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	617b      	str	r3, [r7, #20]
 8010b5c:	e7e9      	b.n	8010b32 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8010b5e:	2300      	movs	r3, #0
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3718      	adds	r7, #24
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8010b68:	b5b0      	push	{r4, r5, r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2448      	movs	r4, #72	; 0x48
 8010b74:	461d      	mov	r5, r3
 8010b76:	2c00      	cmp	r4, #0
 8010b78:	db05      	blt.n	8010b86 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	f7ff fa84 	bl	8010088 <_ZN22MemoryLeakDetectorListC1Ev>
 8010b80:	3504      	adds	r5, #4
 8010b82:	3c01      	subs	r4, #1
 8010b84:	e7f7      	b.n	8010b76 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3708      	adds	r7, #8
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bdb0      	pop	{r4, r5, r7, pc}

08010b90 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8010b90:	b590      	push	{r4, r7, lr}
 8010b92:	b083      	sub	sp, #12
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
 8010b9a:	4a1d      	ldr	r2, [pc, #116]	; (8010c10 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	601a      	str	r2, [r3, #0]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	330c      	adds	r3, #12
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff fbe3 	bl	8010370 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010bb0:	331c      	adds	r3, #28
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7ff ffd8 	bl	8010b68 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010bc8:	3304      	adds	r3, #4
 8010bca:	2201      	movs	r2, #1
 8010bcc:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2201      	movs	r2, #1
 8010bd2:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010bda:	3308      	adds	r3, #8
 8010bdc:	2200      	movs	r2, #0
 8010bde:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	683a      	ldr	r2, [r7, #0]
 8010be4:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8010be6:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8010bea:	490a      	ldr	r1, [pc, #40]	; (8010c14 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8010bec:	2004      	movs	r0, #4
 8010bee:	f7f5 f911 	bl	8005e14 <_ZnwjPKci>
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	f7f5 fd07 	bl	8006608 <_ZN11SimpleMutexC1Ev>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010c00:	330c      	adds	r3, #12
 8010c02:	601c      	str	r4, [r3, #0]
}
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4618      	mov	r0, r3
 8010c08:	370c      	adds	r7, #12
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd90      	pop	{r4, r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	08017bfc 	.word	0x08017bfc
 8010c14:	08016f44 	.word	0x08016f44

08010c18 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8010c18:	b590      	push	{r4, r7, lr}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	4a0e      	ldr	r2, [pc, #56]	; (8010c5c <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010c2c:	330c      	adds	r3, #12
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00d      	beq.n	8010c50 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010c3a:	330c      	adds	r3, #12
 8010c3c:	681c      	ldr	r4, [r3, #0]
 8010c3e:	2c00      	cmp	r4, #0
 8010c40:	d006      	beq.n	8010c50 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8010c42:	4620      	mov	r0, r4
 8010c44:	f7f5 fcf2 	bl	800662c <_ZN11SimpleMutexD1Ev>
 8010c48:	2104      	movs	r1, #4
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f7f5 f8f6 	bl	8005e3c <_ZdlPvj>
    }
}
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	4618      	mov	r0, r3
 8010c54:	370c      	adds	r7, #12
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd90      	pop	{r4, r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	08017bfc 	.word	0x08017bfc

08010c60 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
}
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7ff ffd5 	bl	8010c18 <_ZN18MemoryLeakDetectorD1Ev>
 8010c6e:	f241 1150 	movw	r1, #4432	; 0x1150
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7f5 f8e2 	bl	8005e3c <_ZdlPvj>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b082      	sub	sp, #8
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	330c      	adds	r3, #12
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7ff fd72 	bl	8010778 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2203      	movs	r2, #3
 8010c98:	721a      	strb	r2, [r3, #8]
}
 8010c9a:	bf00      	nop
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8010ca2:	b480      	push	{r7}
 8010ca4:	b083      	sub	sp, #12
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2202      	movs	r2, #2
 8010cae:	721a      	strb	r2, [r3, #8]
}
 8010cb0:	bf00      	nop
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2202      	movs	r2, #2
 8010cc8:	721a      	strb	r2, [r3, #8]
}
 8010cca:	bf00      	nop
 8010ccc:	370c      	adds	r7, #12
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr

08010cd6 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8010cd6:	b480      	push	{r7}
 8010cd8:	b083      	sub	sp, #12
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
    return mutex_;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010ce4:	330c      	adds	r3, #12
 8010ce6:	681b      	ldr	r3, [r3, #0]
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f023 0303 	bic.w	r3, r3, #3
 8010d02:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr

08010d10 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	3303      	adds	r3, #3
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7ff ffe8 	bl	8010cf4 <_ZL31calculateVoidPointerAlignedSizej>
 8010d24:	4603      	mov	r3, r0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b084      	sub	sp, #16
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	60f8      	str	r0, [r7, #12]
 8010d36:	60b9      	str	r1, [r7, #8]
 8010d38:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8010d3a:	6879      	ldr	r1, [r7, #4]
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f7ff ffe7 	bl	8010d10 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8010d42:	4602      	mov	r2, r0
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	4413      	add	r3, r2
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3710      	adds	r7, #16
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b08a      	sub	sp, #40	; 0x28
 8010d54:	af06      	add	r7, sp, #24
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
 8010d5c:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010d64:	3304      	adds	r3, #4
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	1c51      	adds	r1, r2, #1
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010d70:	3304      	adds	r3, #4
 8010d72:	6019      	str	r1, [r3, #0]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	7a19      	ldrb	r1, [r3, #8]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010d7e:	3308      	adds	r3, #8
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	6a38      	ldr	r0, [r7, #32]
 8010d84:	9004      	str	r0, [sp, #16]
 8010d86:	69f8      	ldr	r0, [r7, #28]
 8010d88:	9003      	str	r0, [sp, #12]
 8010d8a:	9302      	str	r3, [sp, #8]
 8010d8c:	9101      	str	r1, [sp, #4]
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	9300      	str	r3, [sp, #0]
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	6879      	ldr	r1, [r7, #4]
 8010d96:	68b8      	ldr	r0, [r7, #8]
 8010d98:	f7ff fcfb 	bl	8010792 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	689a      	ldr	r2, [r3, #8]
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4413      	add	r3, r2
 8010da6:	4619      	mov	r1, r3
 8010da8:	68f8      	ldr	r0, [r7, #12]
 8010daa:	f000 f861 	bl	8010e70 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010db4:	331c      	adds	r3, #28
 8010db6:	68b9      	ldr	r1, [r7, #8]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7ff fe11 	bl	80109e0 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8010dbe:	bf00      	nop
 8010dc0:	3710      	adds	r7, #16
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b08a      	sub	sp, #40	; 0x28
 8010dca:	af04      	add	r7, sp, #16
 8010dcc:	60f8      	str	r0, [r7, #12]
 8010dce:	60b9      	str	r1, [r7, #8]
 8010dd0:	607a      	str	r2, [r7, #4]
 8010dd2:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8010dd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010dd8:	9302      	str	r3, [sp, #8]
 8010dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ddc:	9301      	str	r3, [sp, #4]
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	9300      	str	r3, [sp, #0]
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	68b9      	ldr	r1, [r7, #8]
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f000 f96f 	bl	80110cc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8010dee:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d101      	bne.n	8010dfa <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8010df6:	2300      	movs	r3, #0
 8010df8:	e017      	b.n	8010e2a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8010dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010dfe:	9300      	str	r3, [sp, #0]
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	68b9      	ldr	r1, [r7, #8]
 8010e06:	68f8      	ldr	r0, [r7, #12]
 8010e08:	f000 f98a 	bl	8011120 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8010e0c:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e10:	9302      	str	r3, [sp, #8]
 8010e12:	6a3b      	ldr	r3, [r7, #32]
 8010e14:	9301      	str	r3, [sp, #4]
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	9300      	str	r3, [sp, #0]
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	697a      	ldr	r2, [r7, #20]
 8010e1e:	6939      	ldr	r1, [r7, #16]
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f7ff ff95 	bl	8010d50 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	689b      	ldr	r3, [r3, #8]
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3718      	adds	r7, #24
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
	...

08010e34 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010e44:	331c      	adds	r3, #28
 8010e46:	6839      	ldr	r1, [r7, #0]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7ff fdf6 	bl	8010a3a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8010e4e:	60f8      	str	r0, [r7, #12]
  if (node)
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d006      	beq.n	8010e64 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8010e56:	4b05      	ldr	r3, [pc, #20]	; (8010e6c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	68fa      	ldr	r2, [r7, #12]
 8010e5c:	6812      	ldr	r2, [r2, #0]
 8010e5e:	21cd      	movs	r1, #205	; 0xcd
 8010e60:	6838      	ldr	r0, [r7, #0]
 8010e62:	4798      	blx	r3
#endif
}
 8010e64:	bf00      	nop
 8010e66:	3710      	adds	r7, #16
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	200000d0 	.word	0x200000d0

08010e70 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b085      	sub	sp, #20
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	60fb      	str	r3, [r7, #12]
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b02      	cmp	r3, #2
 8010e82:	d812      	bhi.n	8010eaa <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8010e84:	68f9      	ldr	r1, [r7, #12]
 8010e86:	4b0c      	ldr	r3, [pc, #48]	; (8010eb8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8010e88:	fba3 2301 	umull	r2, r3, r3, r1
 8010e8c:	085a      	lsrs	r2, r3, #1
 8010e8e:	4613      	mov	r3, r2
 8010e90:	005b      	lsls	r3, r3, #1
 8010e92:	4413      	add	r3, r2
 8010e94:	1aca      	subs	r2, r1, r3
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	440b      	add	r3, r1
 8010e9c:	4907      	ldr	r1, [pc, #28]	; (8010ebc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8010e9e:	5c8a      	ldrb	r2, [r1, r2]
 8010ea0:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	60fb      	str	r3, [r7, #12]
 8010ea8:	e7e9      	b.n	8010e7e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8010eaa:	bf00      	nop
 8010eac:	3714      	adds	r7, #20
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop
 8010eb8:	aaaaaaab 	.word	0xaaaaaaab
 8010ebc:	08017bf0 	.word	0x08017bf0

08010ec0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b085      	sub	sp, #20
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8010eca:	2300      	movs	r3, #0
 8010ecc:	60fb      	str	r3, [r7, #12]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	2b02      	cmp	r3, #2
 8010ed2:	d816      	bhi.n	8010f02 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8010ed4:	683a      	ldr	r2, [r7, #0]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	4413      	add	r3, r2
 8010eda:	7818      	ldrb	r0, [r3, #0]
 8010edc:	68f9      	ldr	r1, [r7, #12]
 8010ede:	4b0c      	ldr	r3, [pc, #48]	; (8010f10 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8010ee0:	fba3 2301 	umull	r2, r3, r3, r1
 8010ee4:	085a      	lsrs	r2, r3, #1
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	005b      	lsls	r3, r3, #1
 8010eea:	4413      	add	r3, r2
 8010eec:	1aca      	subs	r2, r1, r3
 8010eee:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8010ef0:	5c9b      	ldrb	r3, [r3, r2]
 8010ef2:	4298      	cmp	r0, r3
 8010ef4:	d001      	beq.n	8010efa <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	e004      	b.n	8010f04 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	3301      	adds	r3, #1
 8010efe:	60fb      	str	r3, [r7, #12]
 8010f00:	e7e5      	b.n	8010ece <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8010f02:	2301      	movs	r3, #1
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3714      	adds	r7, #20
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr
 8010f10:	aaaaaaab 	.word	0xaaaaaaab
 8010f14:	08017bf0 	.word	0x08017bf0

08010f18 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	60b9      	str	r1, [r7, #8]
 8010f22:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d101      	bne.n	8010f30 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e013      	b.n	8010f58 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	f083 0301 	eor.w	r3, r3, #1
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8010f42:	2301      	movs	r3, #1
 8010f44:	e008      	b.n	8010f58 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	331c      	adds	r3, #28
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	68b9      	ldr	r1, [r7, #8]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	4798      	blx	r3
 8010f54:	4603      	mov	r3, r0
 8010f56:	bf00      	nop
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3710      	adds	r7, #16
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8010f60:	b590      	push	{r4, r7, lr}
 8010f62:	b087      	sub	sp, #28
 8010f64:	af02      	add	r7, sp, #8
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
 8010f6c:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	695a      	ldr	r2, [r3, #20]
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	695b      	ldr	r3, [r3, #20]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	3328      	adds	r3, #40	; 0x28
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4610      	mov	r0, r2
 8010f7e:	4798      	blx	r3
 8010f80:	4604      	mov	r4, r0
 8010f82:	6a3b      	ldr	r3, [r7, #32]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	3328      	adds	r3, #40	; 0x28
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	6a38      	ldr	r0, [r7, #32]
 8010f8c:	4798      	blx	r3
 8010f8e:	4603      	mov	r3, r0
 8010f90:	461a      	mov	r2, r3
 8010f92:	4621      	mov	r1, r4
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f7ff ffbf 	bl	8010f18 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	f083 0301 	eor.w	r3, r3, #1
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d014      	beq.n	8010fd0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	f103 040c 	add.w	r4, r3, #12
 8010fac:	6a3b      	ldr	r3, [r7, #32]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	3328      	adds	r3, #40	; 0x28
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	6a38      	ldr	r0, [r7, #32]
 8010fb6:	4798      	blx	r3
 8010fb8:	4602      	mov	r2, r0
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	9301      	str	r3, [sp, #4]
 8010fc0:	9200      	str	r2, [sp, #0]
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	68b9      	ldr	r1, [r7, #8]
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f7ff fb4d 	bl	8010668 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8010fce:	e02e      	b.n	801102e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	689a      	ldr	r2, [r3, #8]
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	4413      	add	r3, r2
 8010fda:	4619      	mov	r1, r3
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f7ff ff6f 	bl	8010ec0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	f083 0301 	eor.w	r3, r3, #1
 8010fe8:	b2db      	uxtb	r3, r3
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d014      	beq.n	8011018 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f103 040c 	add.w	r4, r3, #12
 8010ff4:	6a3b      	ldr	r3, [r7, #32]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	3328      	adds	r3, #40	; 0x28
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	6a38      	ldr	r0, [r7, #32]
 8010ffe:	4798      	blx	r3
 8011000:	4602      	mov	r2, r0
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	9200      	str	r2, [sp, #0]
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	68b9      	ldr	r1, [r7, #8]
 8011010:	4620      	mov	r0, r4
 8011012:	f7ff fb4f 	bl	80106b4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8011016:	e00a      	b.n	801102e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8011018:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801101c:	2b00      	cmp	r3, #0
 801101e:	d006      	beq.n	801102e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	3324      	adds	r3, #36	; 0x24
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	68b9      	ldr	r1, [r7, #8]
 801102a:	6a38      	ldr	r0, [r7, #32]
 801102c:	4798      	blx	r3
}
 801102e:	bf00      	nop
 8011030:	3714      	adds	r7, #20
 8011032:	46bd      	mov	sp, r7
 8011034:	bd90      	pop	{r4, r7, pc}
	...

08011038 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af02      	add	r7, sp, #8
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
 8011044:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8011046:	4b08      	ldr	r3, [pc, #32]	; (8011068 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	78fb      	ldrb	r3, [r7, #3]
 801104c:	9301      	str	r3, [sp, #4]
 801104e:	2300      	movs	r3, #0
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	4613      	mov	r3, r2
 8011054:	687a      	ldr	r2, [r7, #4]
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f000 f87f 	bl	801115c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 801105e:	4603      	mov	r3, r0
}
 8011060:	4618      	mov	r0, r3
 8011062:	3710      	adds	r7, #16
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	200000f8 	.word	0x200000f8

0801106c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801106c:	b590      	push	{r4, r7, lr}
 801106e:	b085      	sub	sp, #20
 8011070:	af00      	add	r7, sp, #0
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	60b9      	str	r1, [r7, #8]
 8011076:	607a      	str	r2, [r7, #4]
 8011078:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 801107a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801107e:	2b00      	cmp	r3, #0
 8011080:	d00e      	beq.n	80110a0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	3308      	adds	r3, #8
 8011088:	681c      	ldr	r4, [r3, #0]
 801108a:	6879      	ldr	r1, [r7, #4]
 801108c:	68f8      	ldr	r0, [r7, #12]
 801108e:	f7ff fe3f 	bl	8010d10 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011092:	4601      	mov	r1, r0
 8011094:	6a3b      	ldr	r3, [r7, #32]
 8011096:	683a      	ldr	r2, [r7, #0]
 8011098:	68b8      	ldr	r0, [r7, #8]
 801109a:	47a0      	blx	r4
 801109c:	4603      	mov	r3, r0
 801109e:	e010      	b.n	80110c2 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	3308      	adds	r3, #8
 80110a6:	681c      	ldr	r4, [r3, #0]
 80110a8:	6879      	ldr	r1, [r7, #4]
 80110aa:	68f8      	ldr	r0, [r7, #12]
 80110ac:	f7ff fe30 	bl	8010d10 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80110b0:	4603      	mov	r3, r0
 80110b2:	f103 0120 	add.w	r1, r3, #32
 80110b6:	6a3b      	ldr	r3, [r7, #32]
 80110b8:	683a      	ldr	r2, [r7, #0]
 80110ba:	68b8      	ldr	r0, [r7, #8]
 80110bc:	47a0      	blx	r4
 80110be:	4603      	mov	r3, r0
 80110c0:	bf00      	nop
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd90      	pop	{r4, r7, pc}
	...

080110cc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80110cc:	b590      	push	{r4, r7, lr}
 80110ce:	b085      	sub	sp, #20
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
 80110d8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80110da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00b      	beq.n	80110fa <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80110e2:	4b0e      	ldr	r3, [pc, #56]	; (801111c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80110e4:	681c      	ldr	r4, [r3, #0]
 80110e6:	6839      	ldr	r1, [r7, #0]
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f7ff fe11 	bl	8010d10 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80110ee:	4603      	mov	r3, r0
 80110f0:	4619      	mov	r1, r3
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	47a0      	blx	r4
 80110f6:	4603      	mov	r3, r0
 80110f8:	e00c      	b.n	8011114 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 80110fa:	4b08      	ldr	r3, [pc, #32]	; (801111c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80110fc:	681c      	ldr	r4, [r3, #0]
 80110fe:	6839      	ldr	r1, [r7, #0]
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	f7ff fe05 	bl	8010d10 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011106:	4603      	mov	r3, r0
 8011108:	3320      	adds	r3, #32
 801110a:	4619      	mov	r1, r3
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	47a0      	blx	r4
 8011110:	4603      	mov	r3, r0
 8011112:	bf00      	nop
}
 8011114:	4618      	mov	r0, r3
 8011116:	3714      	adds	r7, #20
 8011118:	46bd      	mov	sp, r7
 801111a:	bd90      	pop	{r4, r7, pc}
 801111c:	200000c8 	.word	0x200000c8

08011120 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	607a      	str	r2, [r7, #4]
 801112c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 801112e:	7e3b      	ldrb	r3, [r7, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d008      	beq.n	8011146 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	3320      	adds	r3, #32
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2120      	movs	r1, #32
 801113e:	68b8      	ldr	r0, [r7, #8]
 8011140:	4798      	blx	r3
 8011142:	4603      	mov	r3, r0
 8011144:	e006      	b.n	8011154 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	6839      	ldr	r1, [r7, #0]
 801114a:	68f8      	ldr	r0, [r7, #12]
 801114c:	f7ff fdef 	bl	8010d2e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8011150:	4603      	mov	r3, r0
 8011152:	bf00      	nop
}
 8011154:	4618      	mov	r0, r3
 8011156:	3710      	adds	r7, #16
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b08a      	sub	sp, #40	; 0x28
 8011160:	af04      	add	r7, sp, #16
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
 8011168:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 801116a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801116e:	9301      	str	r3, [sp, #4]
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	9300      	str	r3, [sp, #0]
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	687a      	ldr	r2, [r7, #4]
 8011178:	68b9      	ldr	r1, [r7, #8]
 801117a:	68f8      	ldr	r0, [r7, #12]
 801117c:	f7ff ff76 	bl	801106c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8011180:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d101      	bne.n	801118c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8011188:	2300      	movs	r3, #0
 801118a:	e017      	b.n	80111bc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 801118c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011190:	9300      	str	r3, [sp, #0]
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	68b9      	ldr	r1, [r7, #8]
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f7ff ffc1 	bl	8011120 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 801119e:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	9302      	str	r3, [sp, #8]
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	9301      	str	r3, [sp, #4]
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	697a      	ldr	r2, [r7, #20]
 80111b0:	6939      	ldr	r1, [r7, #16]
 80111b2:	68f8      	ldr	r0, [r7, #12]
 80111b4:	f7ff fdcc 	bl	8010d50 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	689b      	ldr	r3, [r3, #8]
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3718      	adds	r7, #24
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}

080111c4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80111c4:	b590      	push	{r4, r7, lr}
 80111c6:	b089      	sub	sp, #36	; 0x24
 80111c8:	af02      	add	r7, sp, #8
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	607a      	str	r2, [r7, #4]
 80111d0:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d03a      	beq.n	801124e <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111de:	331c      	adds	r3, #28
 80111e0:	6879      	ldr	r1, [r7, #4]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff fc13 	bl	8010a0e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80111e8:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10b      	bne.n	8011208 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f103 000c 	add.w	r0, r3, #12
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	9300      	str	r3, [sp, #0]
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011200:	6839      	ldr	r1, [r7, #0]
 8011202:	f7ff fa0d 	bl	8010620 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8011206:	e023      	b.n	8011250 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8011208:	68b8      	ldr	r0, [r7, #8]
 801120a:	f7f8 ffa7 	bl	800a15c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 801120e:	4603      	mov	r3, r0
 8011210:	f083 0301 	eor.w	r3, r3, #1
 8011214:	b2db      	uxtb	r3, r3
 8011216:	2b00      	cmp	r3, #0
 8011218:	d01a      	beq.n	8011250 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8011220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011224:	9301      	str	r3, [sp, #4]
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122c:	683a      	ldr	r2, [r7, #0]
 801122e:	6979      	ldr	r1, [r7, #20]
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f7ff fe95 	bl	8010f60 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	330c      	adds	r3, #12
 801123c:	681c      	ldr	r4, [r3, #0]
 801123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011240:	9300      	str	r3, [sp, #0]
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	693a      	ldr	r2, [r7, #16]
 8011246:	6879      	ldr	r1, [r7, #4]
 8011248:	68b8      	ldr	r0, [r7, #8]
 801124a:	47a0      	blx	r4
 801124c:	e000      	b.n	8011250 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 801124e:	bf00      	nop
    }
}
 8011250:	371c      	adds	r7, #28
 8011252:	46bd      	mov	sp, r7
 8011254:	bd90      	pop	{r4, r7, pc}
	...

08011258 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b086      	sub	sp, #24
 801125c:	af02      	add	r7, sp, #8
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8011266:	4b08      	ldr	r3, [pc, #32]	; (8011288 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	78fb      	ldrb	r3, [r7, #3]
 801126c:	9301      	str	r3, [sp, #4]
 801126e:	2300      	movs	r3, #0
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	4613      	mov	r3, r2
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	68b9      	ldr	r1, [r7, #8]
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	f7ff ffa3 	bl	80111c4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 801127e:	bf00      	nop
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	200000f8 	.word	0x200000f8

0801128c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b08a      	sub	sp, #40	; 0x28
 8011290:	af04      	add	r7, sp, #16
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	607a      	str	r2, [r7, #4]
 8011298:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d023      	beq.n	80112e8 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112a6:	331c      	adds	r3, #28
 80112a8:	6879      	ldr	r1, [r7, #4]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff fbaf 	bl	8010a0e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80112b0:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d10c      	bne.n	80112d2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f103 000c 	add.w	r0, r3, #12
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	9300      	str	r3, [sp, #0]
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112c8:	6a39      	ldr	r1, [r7, #32]
 80112ca:	f7ff f9a9 	bl	8010620 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80112ce:	2300      	movs	r3, #0
 80112d0:	e019      	b.n	8011306 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80112d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80112d6:	9301      	str	r3, [sp, #4]
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	9300      	str	r3, [sp, #0]
 80112dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112de:	6a3a      	ldr	r2, [r7, #32]
 80112e0:	6979      	ldr	r1, [r7, #20]
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f7ff fe3c 	bl	8010f60 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80112e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80112ec:	9302      	str	r3, [sp, #8]
 80112ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f0:	9301      	str	r3, [sp, #4]
 80112f2:	6a3b      	ldr	r3, [r7, #32]
 80112f4:	9300      	str	r3, [sp, #0]
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	68b9      	ldr	r1, [r7, #8]
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f7ff fd62 	bl	8010dc6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8011302:	4603      	mov	r3, r0
 8011304:	bf00      	nop
}
 8011306:	4618      	mov	r0, r3
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b084      	sub	sp, #16
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
 8011316:	460b      	mov	r3, r1
 8011318:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011320:	331c      	adds	r3, #28
 8011322:	78fa      	ldrb	r2, [r7, #3]
 8011324:	4611      	mov	r1, r2
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff fbc0 	bl	8010aac <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 801132c:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	330c      	adds	r3, #12
 8011332:	4618      	mov	r0, r3
 8011334:	f7ff f882 	bl	801043c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d010      	beq.n	8011360 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	330c      	adds	r3, #12
 8011342:	68f9      	ldr	r1, [r7, #12]
 8011344:	4618      	mov	r0, r3
 8011346:	f7ff f897 	bl	8010478 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011350:	331c      	adds	r3, #28
 8011352:	78fa      	ldrb	r2, [r7, #3]
 8011354:	68f9      	ldr	r1, [r7, #12]
 8011356:	4618      	mov	r0, r3
 8011358:	f7ff fbcb 	bl	8010af2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801135c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801135e:	e7eb      	b.n	8011338 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	330c      	adds	r3, #12
 8011364:	4618      	mov	r0, r3
 8011366:	f7ff f8e7 	bl	8010538 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801136a:	bf00      	nop
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}

08011372 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8011372:	b580      	push	{r7, lr}
 8011374:	b082      	sub	sp, #8
 8011376:	af00      	add	r7, sp, #0
 8011378:	6078      	str	r0, [r7, #4]
 801137a:	460b      	mov	r3, r1
 801137c:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 801137e:	78fb      	ldrb	r3, [r7, #3]
 8011380:	4619      	mov	r1, r3
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f7ff ffc3 	bl	801130e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	330c      	adds	r3, #12
 801138c:	4618      	mov	r0, r3
 801138e:	f7ff f9e5 	bl	801075c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8011392:	4603      	mov	r3, r0
}
 8011394:	4618      	mov	r0, r3
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113aa:	331c      	adds	r3, #28
 80113ac:	2103      	movs	r1, #3
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7ff fb7c 	bl	8010aac <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80113b4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d011      	beq.n	80113e0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	7e1b      	ldrb	r3, [r3, #24]
 80113c0:	2b03      	cmp	r3, #3
 80113c2:	d102      	bne.n	80113ca <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2202      	movs	r2, #2
 80113c8:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113d0:	331c      	adds	r3, #28
 80113d2:	2203      	movs	r2, #3
 80113d4:	68f9      	ldr	r1, [r7, #12]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7ff fb8b 	bl	8010af2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80113dc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80113de:	e7ea      	b.n	80113b6 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80113e0:	bf00      	nop
 80113e2:	3710      	adds	r7, #16
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	460b      	mov	r3, r1
 80113f2:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80113fa:	331c      	adds	r3, #28
 80113fc:	78fa      	ldrb	r2, [r7, #3]
 80113fe:	4611      	mov	r1, r2
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff fb30 	bl	8010a66 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8011406:	4603      	mov	r3, r0
}
 8011408:	4618      	mov	r0, r3
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6039      	str	r1, [r7, #0]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	490b      	ldr	r1, [pc, #44]	; (801144c <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801141e:	4618      	mov	r0, r3
 8011420:	f7f5 fbe1 	bl	8006be6 <_ZN12SimpleStringC1EPKc>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	721a      	strb	r2, [r3, #8]
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2200      	movs	r2, #0
 801142e:	725a      	strb	r2, [r3, #9]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2200      	movs	r2, #0
 8011434:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6839      	ldr	r1, [r7, #0]
 801143a:	4618      	mov	r0, r3
 801143c:	f7f5 fc3f 	bl	8006cbe <_ZN12SimpleStringaSERKS_>
}
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	4618      	mov	r0, r3
 8011444:	3708      	adds	r7, #8
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	08016f64 	.word	0x08016f64

08011450 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	683a      	ldr	r2, [r7, #0]
 801145e:	60da      	str	r2, [r3, #12]
    return this;
 8011460:	687b      	ldr	r3, [r7, #4]
}
 8011462:	4618      	mov	r0, r3
 8011464:	370c      	adds	r7, #12
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr

0801146e <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801146e:	b480      	push	{r7}
 8011470:	b083      	sub	sp, #12
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
    return next_;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	68db      	ldr	r3, [r3, #12]
}
 801147a:	4618      	mov	r0, r3
 801147c:	370c      	adds	r7, #12
 801147e:	46bd      	mov	sp, r7
 8011480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011484:	4770      	bx	lr

08011486 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8011486:	b480      	push	{r7}
 8011488:	b083      	sub	sp, #12
 801148a:	af00      	add	r7, sp, #0
 801148c:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2201      	movs	r2, #1
 8011492:	721a      	strb	r2, [r3, #8]
}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2201      	movs	r2, #1
 80114ac:	725a      	strb	r2, [r3, #9]
}
 80114ae:	bf00      	nop
 80114b0:	370c      	adds	r7, #12
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b084      	sub	sp, #16
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
 80114c2:	6039      	str	r1, [r7, #0]
    bool matches = false;
 80114c4:	2300      	movs	r3, #0
 80114c6:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	7a1b      	ldrb	r3, [r3, #8]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d007      	beq.n	80114e0 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	4619      	mov	r1, r3
 80114d4:	6838      	ldr	r0, [r7, #0]
 80114d6:	f7f5 ff4a 	bl	800736e <_ZeqRK12SimpleStringS1_>
 80114da:	4603      	mov	r3, r0
 80114dc:	73fb      	strb	r3, [r7, #15]
 80114de:	e006      	b.n	80114ee <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	4619      	mov	r1, r3
 80114e4:	6838      	ldr	r0, [r7, #0]
 80114e6:	f7f5 fbfc 	bl	8006ce2 <_ZNK12SimpleString8containsERKS_>
 80114ea:	4603      	mov	r3, r0
 80114ec:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	7a5b      	ldrb	r3, [r3, #9]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d004      	beq.n	8011500 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 80114f6:	7bfb      	ldrb	r3, [r7, #15]
 80114f8:	f083 0301 	eor.w	r3, r3, #1
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	e005      	b.n	801150c <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8011500:	7bfb      	ldrb	r3, [r7, #15]
 8011502:	2b00      	cmp	r3, #0
 8011504:	bf14      	ite	ne
 8011506:	2301      	movne	r3, #1
 8011508:	2300      	moveq	r3, #0
 801150a:	b2db      	uxtb	r3, r3
}
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <__cxa_guard_acquire>:
 8011514:	6803      	ldr	r3, [r0, #0]
 8011516:	07db      	lsls	r3, r3, #31
 8011518:	d406      	bmi.n	8011528 <__cxa_guard_acquire+0x14>
 801151a:	7843      	ldrb	r3, [r0, #1]
 801151c:	b103      	cbz	r3, 8011520 <__cxa_guard_acquire+0xc>
 801151e:	deff      	udf	#255	; 0xff
 8011520:	2301      	movs	r3, #1
 8011522:	7043      	strb	r3, [r0, #1]
 8011524:	4618      	mov	r0, r3
 8011526:	4770      	bx	lr
 8011528:	2000      	movs	r0, #0
 801152a:	4770      	bx	lr

0801152c <__cxa_guard_release>:
 801152c:	2301      	movs	r3, #1
 801152e:	6003      	str	r3, [r0, #0]
 8011530:	4770      	bx	lr

08011532 <__cxa_pure_virtual>:
 8011532:	b508      	push	{r3, lr}
 8011534:	f000 f80c 	bl	8011550 <_ZSt9terminatev>

08011538 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011538:	b508      	push	{r3, lr}
 801153a:	4780      	blx	r0
 801153c:	f000 f816 	bl	801156c <abort>

08011540 <_ZSt13get_terminatev>:
 8011540:	4b02      	ldr	r3, [pc, #8]	; (801154c <_ZSt13get_terminatev+0xc>)
 8011542:	6818      	ldr	r0, [r3, #0]
 8011544:	f3bf 8f5b 	dmb	ish
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop
 801154c:	200000fc 	.word	0x200000fc

08011550 <_ZSt9terminatev>:
 8011550:	b508      	push	{r3, lr}
 8011552:	f7ff fff5 	bl	8011540 <_ZSt13get_terminatev>
 8011556:	f7ff ffef 	bl	8011538 <_ZN10__cxxabiv111__terminateEPFvvE>

0801155a <fabs>:
 801155a:	ec51 0b10 	vmov	r0, r1, d0
 801155e:	ee10 2a10 	vmov	r2, s0
 8011562:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011566:	ec43 2b10 	vmov	d0, r2, r3
 801156a:	4770      	bx	lr

0801156c <abort>:
 801156c:	b508      	push	{r3, lr}
 801156e:	2006      	movs	r0, #6
 8011570:	f000 ff88 	bl	8012484 <raise>
 8011574:	2001      	movs	r0, #1
 8011576:	f7ef fc04 	bl	8000d82 <_exit>

0801157a <atexit>:
 801157a:	2300      	movs	r3, #0
 801157c:	4601      	mov	r1, r0
 801157e:	461a      	mov	r2, r3
 8011580:	4618      	mov	r0, r3
 8011582:	f002 b921 	b.w	80137c8 <__register_exitproc>
	...

08011588 <calloc>:
 8011588:	4b02      	ldr	r3, [pc, #8]	; (8011594 <calloc+0xc>)
 801158a:	460a      	mov	r2, r1
 801158c:	4601      	mov	r1, r0
 801158e:	6818      	ldr	r0, [r3, #0]
 8011590:	f000 bde8 	b.w	8012164 <_calloc_r>
 8011594:	20000100 	.word	0x20000100

08011598 <__errno>:
 8011598:	4b01      	ldr	r3, [pc, #4]	; (80115a0 <__errno+0x8>)
 801159a:	6818      	ldr	r0, [r3, #0]
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	20000100 	.word	0x20000100

080115a4 <_fclose_r>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	4605      	mov	r5, r0
 80115a8:	460c      	mov	r4, r1
 80115aa:	b911      	cbnz	r1, 80115b2 <_fclose_r+0xe>
 80115ac:	2600      	movs	r6, #0
 80115ae:	4630      	mov	r0, r6
 80115b0:	bd70      	pop	{r4, r5, r6, pc}
 80115b2:	b118      	cbz	r0, 80115bc <_fclose_r+0x18>
 80115b4:	6983      	ldr	r3, [r0, #24]
 80115b6:	b90b      	cbnz	r3, 80115bc <_fclose_r+0x18>
 80115b8:	f000 f994 	bl	80118e4 <__sinit>
 80115bc:	4b2c      	ldr	r3, [pc, #176]	; (8011670 <_fclose_r+0xcc>)
 80115be:	429c      	cmp	r4, r3
 80115c0:	d114      	bne.n	80115ec <_fclose_r+0x48>
 80115c2:	686c      	ldr	r4, [r5, #4]
 80115c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115c6:	07d8      	lsls	r0, r3, #31
 80115c8:	d405      	bmi.n	80115d6 <_fclose_r+0x32>
 80115ca:	89a3      	ldrh	r3, [r4, #12]
 80115cc:	0599      	lsls	r1, r3, #22
 80115ce:	d402      	bmi.n	80115d6 <_fclose_r+0x32>
 80115d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115d2:	f000 fd3a 	bl	801204a <__retarget_lock_acquire_recursive>
 80115d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115da:	b98b      	cbnz	r3, 8011600 <_fclose_r+0x5c>
 80115dc:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80115de:	f016 0601 	ands.w	r6, r6, #1
 80115e2:	d1e3      	bne.n	80115ac <_fclose_r+0x8>
 80115e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115e6:	f000 fd32 	bl	801204e <__retarget_lock_release_recursive>
 80115ea:	e7e0      	b.n	80115ae <_fclose_r+0xa>
 80115ec:	4b21      	ldr	r3, [pc, #132]	; (8011674 <_fclose_r+0xd0>)
 80115ee:	429c      	cmp	r4, r3
 80115f0:	d101      	bne.n	80115f6 <_fclose_r+0x52>
 80115f2:	68ac      	ldr	r4, [r5, #8]
 80115f4:	e7e6      	b.n	80115c4 <_fclose_r+0x20>
 80115f6:	4b20      	ldr	r3, [pc, #128]	; (8011678 <_fclose_r+0xd4>)
 80115f8:	429c      	cmp	r4, r3
 80115fa:	bf08      	it	eq
 80115fc:	68ec      	ldreq	r4, [r5, #12]
 80115fe:	e7e1      	b.n	80115c4 <_fclose_r+0x20>
 8011600:	4621      	mov	r1, r4
 8011602:	4628      	mov	r0, r5
 8011604:	f000 f842 	bl	801168c <__sflush_r>
 8011608:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801160a:	4606      	mov	r6, r0
 801160c:	b133      	cbz	r3, 801161c <_fclose_r+0x78>
 801160e:	6a21      	ldr	r1, [r4, #32]
 8011610:	4628      	mov	r0, r5
 8011612:	4798      	blx	r3
 8011614:	2800      	cmp	r0, #0
 8011616:	bfb8      	it	lt
 8011618:	f04f 36ff 	movlt.w	r6, #4294967295
 801161c:	89a3      	ldrh	r3, [r4, #12]
 801161e:	061a      	lsls	r2, r3, #24
 8011620:	d503      	bpl.n	801162a <_fclose_r+0x86>
 8011622:	6921      	ldr	r1, [r4, #16]
 8011624:	4628      	mov	r0, r5
 8011626:	f000 fdad 	bl	8012184 <_free_r>
 801162a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801162c:	b141      	cbz	r1, 8011640 <_fclose_r+0x9c>
 801162e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011632:	4299      	cmp	r1, r3
 8011634:	d002      	beq.n	801163c <_fclose_r+0x98>
 8011636:	4628      	mov	r0, r5
 8011638:	f000 fda4 	bl	8012184 <_free_r>
 801163c:	2300      	movs	r3, #0
 801163e:	6363      	str	r3, [r4, #52]	; 0x34
 8011640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011642:	b121      	cbz	r1, 801164e <_fclose_r+0xaa>
 8011644:	4628      	mov	r0, r5
 8011646:	f000 fd9d 	bl	8012184 <_free_r>
 801164a:	2300      	movs	r3, #0
 801164c:	64a3      	str	r3, [r4, #72]	; 0x48
 801164e:	f000 f931 	bl	80118b4 <__sfp_lock_acquire>
 8011652:	2300      	movs	r3, #0
 8011654:	81a3      	strh	r3, [r4, #12]
 8011656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011658:	07db      	lsls	r3, r3, #31
 801165a:	d402      	bmi.n	8011662 <_fclose_r+0xbe>
 801165c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801165e:	f000 fcf6 	bl	801204e <__retarget_lock_release_recursive>
 8011662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011664:	f000 fcef 	bl	8012046 <__retarget_lock_close_recursive>
 8011668:	f000 f92a 	bl	80118c0 <__sfp_lock_release>
 801166c:	e79f      	b.n	80115ae <_fclose_r+0xa>
 801166e:	bf00      	nop
 8011670:	08017c24 	.word	0x08017c24
 8011674:	08017c44 	.word	0x08017c44
 8011678:	08017c04 	.word	0x08017c04

0801167c <fclose>:
 801167c:	4b02      	ldr	r3, [pc, #8]	; (8011688 <fclose+0xc>)
 801167e:	4601      	mov	r1, r0
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	f7ff bf8f 	b.w	80115a4 <_fclose_r>
 8011686:	bf00      	nop
 8011688:	20000100 	.word	0x20000100

0801168c <__sflush_r>:
 801168c:	898a      	ldrh	r2, [r1, #12]
 801168e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011692:	4605      	mov	r5, r0
 8011694:	0710      	lsls	r0, r2, #28
 8011696:	460c      	mov	r4, r1
 8011698:	d458      	bmi.n	801174c <__sflush_r+0xc0>
 801169a:	684b      	ldr	r3, [r1, #4]
 801169c:	2b00      	cmp	r3, #0
 801169e:	dc05      	bgt.n	80116ac <__sflush_r+0x20>
 80116a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	dc02      	bgt.n	80116ac <__sflush_r+0x20>
 80116a6:	2000      	movs	r0, #0
 80116a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116ae:	2e00      	cmp	r6, #0
 80116b0:	d0f9      	beq.n	80116a6 <__sflush_r+0x1a>
 80116b2:	2300      	movs	r3, #0
 80116b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80116b8:	682f      	ldr	r7, [r5, #0]
 80116ba:	602b      	str	r3, [r5, #0]
 80116bc:	d032      	beq.n	8011724 <__sflush_r+0x98>
 80116be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116c0:	89a3      	ldrh	r3, [r4, #12]
 80116c2:	075a      	lsls	r2, r3, #29
 80116c4:	d505      	bpl.n	80116d2 <__sflush_r+0x46>
 80116c6:	6863      	ldr	r3, [r4, #4]
 80116c8:	1ac0      	subs	r0, r0, r3
 80116ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116cc:	b10b      	cbz	r3, 80116d2 <__sflush_r+0x46>
 80116ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116d0:	1ac0      	subs	r0, r0, r3
 80116d2:	2300      	movs	r3, #0
 80116d4:	4602      	mov	r2, r0
 80116d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116d8:	6a21      	ldr	r1, [r4, #32]
 80116da:	4628      	mov	r0, r5
 80116dc:	47b0      	blx	r6
 80116de:	1c43      	adds	r3, r0, #1
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	d106      	bne.n	80116f2 <__sflush_r+0x66>
 80116e4:	6829      	ldr	r1, [r5, #0]
 80116e6:	291d      	cmp	r1, #29
 80116e8:	d82c      	bhi.n	8011744 <__sflush_r+0xb8>
 80116ea:	4a2a      	ldr	r2, [pc, #168]	; (8011794 <__sflush_r+0x108>)
 80116ec:	40ca      	lsrs	r2, r1
 80116ee:	07d6      	lsls	r6, r2, #31
 80116f0:	d528      	bpl.n	8011744 <__sflush_r+0xb8>
 80116f2:	2200      	movs	r2, #0
 80116f4:	6062      	str	r2, [r4, #4]
 80116f6:	04d9      	lsls	r1, r3, #19
 80116f8:	6922      	ldr	r2, [r4, #16]
 80116fa:	6022      	str	r2, [r4, #0]
 80116fc:	d504      	bpl.n	8011708 <__sflush_r+0x7c>
 80116fe:	1c42      	adds	r2, r0, #1
 8011700:	d101      	bne.n	8011706 <__sflush_r+0x7a>
 8011702:	682b      	ldr	r3, [r5, #0]
 8011704:	b903      	cbnz	r3, 8011708 <__sflush_r+0x7c>
 8011706:	6560      	str	r0, [r4, #84]	; 0x54
 8011708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801170a:	602f      	str	r7, [r5, #0]
 801170c:	2900      	cmp	r1, #0
 801170e:	d0ca      	beq.n	80116a6 <__sflush_r+0x1a>
 8011710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011714:	4299      	cmp	r1, r3
 8011716:	d002      	beq.n	801171e <__sflush_r+0x92>
 8011718:	4628      	mov	r0, r5
 801171a:	f000 fd33 	bl	8012184 <_free_r>
 801171e:	2000      	movs	r0, #0
 8011720:	6360      	str	r0, [r4, #52]	; 0x34
 8011722:	e7c1      	b.n	80116a8 <__sflush_r+0x1c>
 8011724:	6a21      	ldr	r1, [r4, #32]
 8011726:	2301      	movs	r3, #1
 8011728:	4628      	mov	r0, r5
 801172a:	47b0      	blx	r6
 801172c:	1c41      	adds	r1, r0, #1
 801172e:	d1c7      	bne.n	80116c0 <__sflush_r+0x34>
 8011730:	682b      	ldr	r3, [r5, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d0c4      	beq.n	80116c0 <__sflush_r+0x34>
 8011736:	2b1d      	cmp	r3, #29
 8011738:	d001      	beq.n	801173e <__sflush_r+0xb2>
 801173a:	2b16      	cmp	r3, #22
 801173c:	d101      	bne.n	8011742 <__sflush_r+0xb6>
 801173e:	602f      	str	r7, [r5, #0]
 8011740:	e7b1      	b.n	80116a6 <__sflush_r+0x1a>
 8011742:	89a3      	ldrh	r3, [r4, #12]
 8011744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011748:	81a3      	strh	r3, [r4, #12]
 801174a:	e7ad      	b.n	80116a8 <__sflush_r+0x1c>
 801174c:	690f      	ldr	r7, [r1, #16]
 801174e:	2f00      	cmp	r7, #0
 8011750:	d0a9      	beq.n	80116a6 <__sflush_r+0x1a>
 8011752:	0793      	lsls	r3, r2, #30
 8011754:	680e      	ldr	r6, [r1, #0]
 8011756:	bf08      	it	eq
 8011758:	694b      	ldreq	r3, [r1, #20]
 801175a:	600f      	str	r7, [r1, #0]
 801175c:	bf18      	it	ne
 801175e:	2300      	movne	r3, #0
 8011760:	eba6 0807 	sub.w	r8, r6, r7
 8011764:	608b      	str	r3, [r1, #8]
 8011766:	f1b8 0f00 	cmp.w	r8, #0
 801176a:	dd9c      	ble.n	80116a6 <__sflush_r+0x1a>
 801176c:	6a21      	ldr	r1, [r4, #32]
 801176e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011770:	4643      	mov	r3, r8
 8011772:	463a      	mov	r2, r7
 8011774:	4628      	mov	r0, r5
 8011776:	47b0      	blx	r6
 8011778:	2800      	cmp	r0, #0
 801177a:	dc06      	bgt.n	801178a <__sflush_r+0xfe>
 801177c:	89a3      	ldrh	r3, [r4, #12]
 801177e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011782:	81a3      	strh	r3, [r4, #12]
 8011784:	f04f 30ff 	mov.w	r0, #4294967295
 8011788:	e78e      	b.n	80116a8 <__sflush_r+0x1c>
 801178a:	4407      	add	r7, r0
 801178c:	eba8 0800 	sub.w	r8, r8, r0
 8011790:	e7e9      	b.n	8011766 <__sflush_r+0xda>
 8011792:	bf00      	nop
 8011794:	20400001 	.word	0x20400001

08011798 <_fflush_r>:
 8011798:	b538      	push	{r3, r4, r5, lr}
 801179a:	690b      	ldr	r3, [r1, #16]
 801179c:	4605      	mov	r5, r0
 801179e:	460c      	mov	r4, r1
 80117a0:	b913      	cbnz	r3, 80117a8 <_fflush_r+0x10>
 80117a2:	2500      	movs	r5, #0
 80117a4:	4628      	mov	r0, r5
 80117a6:	bd38      	pop	{r3, r4, r5, pc}
 80117a8:	b118      	cbz	r0, 80117b2 <_fflush_r+0x1a>
 80117aa:	6983      	ldr	r3, [r0, #24]
 80117ac:	b90b      	cbnz	r3, 80117b2 <_fflush_r+0x1a>
 80117ae:	f000 f899 	bl	80118e4 <__sinit>
 80117b2:	4b14      	ldr	r3, [pc, #80]	; (8011804 <_fflush_r+0x6c>)
 80117b4:	429c      	cmp	r4, r3
 80117b6:	d11b      	bne.n	80117f0 <_fflush_r+0x58>
 80117b8:	686c      	ldr	r4, [r5, #4]
 80117ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d0ef      	beq.n	80117a2 <_fflush_r+0xa>
 80117c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80117c4:	07d0      	lsls	r0, r2, #31
 80117c6:	d404      	bmi.n	80117d2 <_fflush_r+0x3a>
 80117c8:	0599      	lsls	r1, r3, #22
 80117ca:	d402      	bmi.n	80117d2 <_fflush_r+0x3a>
 80117cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117ce:	f000 fc3c 	bl	801204a <__retarget_lock_acquire_recursive>
 80117d2:	4628      	mov	r0, r5
 80117d4:	4621      	mov	r1, r4
 80117d6:	f7ff ff59 	bl	801168c <__sflush_r>
 80117da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80117dc:	07da      	lsls	r2, r3, #31
 80117de:	4605      	mov	r5, r0
 80117e0:	d4e0      	bmi.n	80117a4 <_fflush_r+0xc>
 80117e2:	89a3      	ldrh	r3, [r4, #12]
 80117e4:	059b      	lsls	r3, r3, #22
 80117e6:	d4dd      	bmi.n	80117a4 <_fflush_r+0xc>
 80117e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80117ea:	f000 fc30 	bl	801204e <__retarget_lock_release_recursive>
 80117ee:	e7d9      	b.n	80117a4 <_fflush_r+0xc>
 80117f0:	4b05      	ldr	r3, [pc, #20]	; (8011808 <_fflush_r+0x70>)
 80117f2:	429c      	cmp	r4, r3
 80117f4:	d101      	bne.n	80117fa <_fflush_r+0x62>
 80117f6:	68ac      	ldr	r4, [r5, #8]
 80117f8:	e7df      	b.n	80117ba <_fflush_r+0x22>
 80117fa:	4b04      	ldr	r3, [pc, #16]	; (801180c <_fflush_r+0x74>)
 80117fc:	429c      	cmp	r4, r3
 80117fe:	bf08      	it	eq
 8011800:	68ec      	ldreq	r4, [r5, #12]
 8011802:	e7da      	b.n	80117ba <_fflush_r+0x22>
 8011804:	08017c24 	.word	0x08017c24
 8011808:	08017c44 	.word	0x08017c44
 801180c:	08017c04 	.word	0x08017c04

08011810 <fflush>:
 8011810:	4601      	mov	r1, r0
 8011812:	b920      	cbnz	r0, 801181e <fflush+0xe>
 8011814:	4b04      	ldr	r3, [pc, #16]	; (8011828 <fflush+0x18>)
 8011816:	4905      	ldr	r1, [pc, #20]	; (801182c <fflush+0x1c>)
 8011818:	6818      	ldr	r0, [r3, #0]
 801181a:	f000 babb 	b.w	8011d94 <_fwalk_reent>
 801181e:	4b04      	ldr	r3, [pc, #16]	; (8011830 <fflush+0x20>)
 8011820:	6818      	ldr	r0, [r3, #0]
 8011822:	f7ff bfb9 	b.w	8011798 <_fflush_r>
 8011826:	bf00      	nop
 8011828:	08017c64 	.word	0x08017c64
 801182c:	08011799 	.word	0x08011799
 8011830:	20000100 	.word	0x20000100

08011834 <std>:
 8011834:	2300      	movs	r3, #0
 8011836:	b510      	push	{r4, lr}
 8011838:	4604      	mov	r4, r0
 801183a:	e9c0 3300 	strd	r3, r3, [r0]
 801183e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011842:	6083      	str	r3, [r0, #8]
 8011844:	8181      	strh	r1, [r0, #12]
 8011846:	6643      	str	r3, [r0, #100]	; 0x64
 8011848:	81c2      	strh	r2, [r0, #14]
 801184a:	6183      	str	r3, [r0, #24]
 801184c:	4619      	mov	r1, r3
 801184e:	2208      	movs	r2, #8
 8011850:	305c      	adds	r0, #92	; 0x5c
 8011852:	f000 fc7f 	bl	8012154 <memset>
 8011856:	4b05      	ldr	r3, [pc, #20]	; (801186c <std+0x38>)
 8011858:	6263      	str	r3, [r4, #36]	; 0x24
 801185a:	4b05      	ldr	r3, [pc, #20]	; (8011870 <std+0x3c>)
 801185c:	62a3      	str	r3, [r4, #40]	; 0x28
 801185e:	4b05      	ldr	r3, [pc, #20]	; (8011874 <std+0x40>)
 8011860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011862:	4b05      	ldr	r3, [pc, #20]	; (8011878 <std+0x44>)
 8011864:	6224      	str	r4, [r4, #32]
 8011866:	6323      	str	r3, [r4, #48]	; 0x30
 8011868:	bd10      	pop	{r4, pc}
 801186a:	bf00      	nop
 801186c:	080124bd 	.word	0x080124bd
 8011870:	080124e3 	.word	0x080124e3
 8011874:	0801251b 	.word	0x0801251b
 8011878:	0801253f 	.word	0x0801253f

0801187c <_cleanup_r>:
 801187c:	4901      	ldr	r1, [pc, #4]	; (8011884 <_cleanup_r+0x8>)
 801187e:	f000 ba89 	b.w	8011d94 <_fwalk_reent>
 8011882:	bf00      	nop
 8011884:	08011799 	.word	0x08011799

08011888 <__sfmoreglue>:
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	1e4a      	subs	r2, r1, #1
 801188c:	2568      	movs	r5, #104	; 0x68
 801188e:	4355      	muls	r5, r2
 8011890:	460e      	mov	r6, r1
 8011892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011896:	f000 fcc5 	bl	8012224 <_malloc_r>
 801189a:	4604      	mov	r4, r0
 801189c:	b140      	cbz	r0, 80118b0 <__sfmoreglue+0x28>
 801189e:	2100      	movs	r1, #0
 80118a0:	e9c0 1600 	strd	r1, r6, [r0]
 80118a4:	300c      	adds	r0, #12
 80118a6:	60a0      	str	r0, [r4, #8]
 80118a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80118ac:	f000 fc52 	bl	8012154 <memset>
 80118b0:	4620      	mov	r0, r4
 80118b2:	bd70      	pop	{r4, r5, r6, pc}

080118b4 <__sfp_lock_acquire>:
 80118b4:	4801      	ldr	r0, [pc, #4]	; (80118bc <__sfp_lock_acquire+0x8>)
 80118b6:	f000 bbc8 	b.w	801204a <__retarget_lock_acquire_recursive>
 80118ba:	bf00      	nop
 80118bc:	20000bc0 	.word	0x20000bc0

080118c0 <__sfp_lock_release>:
 80118c0:	4801      	ldr	r0, [pc, #4]	; (80118c8 <__sfp_lock_release+0x8>)
 80118c2:	f000 bbc4 	b.w	801204e <__retarget_lock_release_recursive>
 80118c6:	bf00      	nop
 80118c8:	20000bc0 	.word	0x20000bc0

080118cc <__sinit_lock_acquire>:
 80118cc:	4801      	ldr	r0, [pc, #4]	; (80118d4 <__sinit_lock_acquire+0x8>)
 80118ce:	f000 bbbc 	b.w	801204a <__retarget_lock_acquire_recursive>
 80118d2:	bf00      	nop
 80118d4:	20000bbb 	.word	0x20000bbb

080118d8 <__sinit_lock_release>:
 80118d8:	4801      	ldr	r0, [pc, #4]	; (80118e0 <__sinit_lock_release+0x8>)
 80118da:	f000 bbb8 	b.w	801204e <__retarget_lock_release_recursive>
 80118de:	bf00      	nop
 80118e0:	20000bbb 	.word	0x20000bbb

080118e4 <__sinit>:
 80118e4:	b510      	push	{r4, lr}
 80118e6:	4604      	mov	r4, r0
 80118e8:	f7ff fff0 	bl	80118cc <__sinit_lock_acquire>
 80118ec:	69a3      	ldr	r3, [r4, #24]
 80118ee:	b11b      	cbz	r3, 80118f8 <__sinit+0x14>
 80118f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118f4:	f7ff bff0 	b.w	80118d8 <__sinit_lock_release>
 80118f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80118fc:	6523      	str	r3, [r4, #80]	; 0x50
 80118fe:	4b13      	ldr	r3, [pc, #76]	; (801194c <__sinit+0x68>)
 8011900:	4a13      	ldr	r2, [pc, #76]	; (8011950 <__sinit+0x6c>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	62a2      	str	r2, [r4, #40]	; 0x28
 8011906:	42a3      	cmp	r3, r4
 8011908:	bf04      	itt	eq
 801190a:	2301      	moveq	r3, #1
 801190c:	61a3      	streq	r3, [r4, #24]
 801190e:	4620      	mov	r0, r4
 8011910:	f000 f820 	bl	8011954 <__sfp>
 8011914:	6060      	str	r0, [r4, #4]
 8011916:	4620      	mov	r0, r4
 8011918:	f000 f81c 	bl	8011954 <__sfp>
 801191c:	60a0      	str	r0, [r4, #8]
 801191e:	4620      	mov	r0, r4
 8011920:	f000 f818 	bl	8011954 <__sfp>
 8011924:	2200      	movs	r2, #0
 8011926:	60e0      	str	r0, [r4, #12]
 8011928:	2104      	movs	r1, #4
 801192a:	6860      	ldr	r0, [r4, #4]
 801192c:	f7ff ff82 	bl	8011834 <std>
 8011930:	68a0      	ldr	r0, [r4, #8]
 8011932:	2201      	movs	r2, #1
 8011934:	2109      	movs	r1, #9
 8011936:	f7ff ff7d 	bl	8011834 <std>
 801193a:	68e0      	ldr	r0, [r4, #12]
 801193c:	2202      	movs	r2, #2
 801193e:	2112      	movs	r1, #18
 8011940:	f7ff ff78 	bl	8011834 <std>
 8011944:	2301      	movs	r3, #1
 8011946:	61a3      	str	r3, [r4, #24]
 8011948:	e7d2      	b.n	80118f0 <__sinit+0xc>
 801194a:	bf00      	nop
 801194c:	08017c64 	.word	0x08017c64
 8011950:	0801187d 	.word	0x0801187d

08011954 <__sfp>:
 8011954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011956:	4607      	mov	r7, r0
 8011958:	f7ff ffac 	bl	80118b4 <__sfp_lock_acquire>
 801195c:	4b1e      	ldr	r3, [pc, #120]	; (80119d8 <__sfp+0x84>)
 801195e:	681e      	ldr	r6, [r3, #0]
 8011960:	69b3      	ldr	r3, [r6, #24]
 8011962:	b913      	cbnz	r3, 801196a <__sfp+0x16>
 8011964:	4630      	mov	r0, r6
 8011966:	f7ff ffbd 	bl	80118e4 <__sinit>
 801196a:	3648      	adds	r6, #72	; 0x48
 801196c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011970:	3b01      	subs	r3, #1
 8011972:	d503      	bpl.n	801197c <__sfp+0x28>
 8011974:	6833      	ldr	r3, [r6, #0]
 8011976:	b30b      	cbz	r3, 80119bc <__sfp+0x68>
 8011978:	6836      	ldr	r6, [r6, #0]
 801197a:	e7f7      	b.n	801196c <__sfp+0x18>
 801197c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011980:	b9d5      	cbnz	r5, 80119b8 <__sfp+0x64>
 8011982:	4b16      	ldr	r3, [pc, #88]	; (80119dc <__sfp+0x88>)
 8011984:	60e3      	str	r3, [r4, #12]
 8011986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801198a:	6665      	str	r5, [r4, #100]	; 0x64
 801198c:	f000 fb5a 	bl	8012044 <__retarget_lock_init_recursive>
 8011990:	f7ff ff96 	bl	80118c0 <__sfp_lock_release>
 8011994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801199c:	6025      	str	r5, [r4, #0]
 801199e:	61a5      	str	r5, [r4, #24]
 80119a0:	2208      	movs	r2, #8
 80119a2:	4629      	mov	r1, r5
 80119a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80119a8:	f000 fbd4 	bl	8012154 <memset>
 80119ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80119b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80119b4:	4620      	mov	r0, r4
 80119b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119b8:	3468      	adds	r4, #104	; 0x68
 80119ba:	e7d9      	b.n	8011970 <__sfp+0x1c>
 80119bc:	2104      	movs	r1, #4
 80119be:	4638      	mov	r0, r7
 80119c0:	f7ff ff62 	bl	8011888 <__sfmoreglue>
 80119c4:	4604      	mov	r4, r0
 80119c6:	6030      	str	r0, [r6, #0]
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d1d5      	bne.n	8011978 <__sfp+0x24>
 80119cc:	f7ff ff78 	bl	80118c0 <__sfp_lock_release>
 80119d0:	230c      	movs	r3, #12
 80119d2:	603b      	str	r3, [r7, #0]
 80119d4:	e7ee      	b.n	80119b4 <__sfp+0x60>
 80119d6:	bf00      	nop
 80119d8:	08017c64 	.word	0x08017c64
 80119dc:	ffff0001 	.word	0xffff0001

080119e0 <_fopen_r>:
 80119e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119e2:	460f      	mov	r7, r1
 80119e4:	4611      	mov	r1, r2
 80119e6:	aa01      	add	r2, sp, #4
 80119e8:	4605      	mov	r5, r0
 80119ea:	f001 ff81 	bl	80138f0 <__sflags>
 80119ee:	4606      	mov	r6, r0
 80119f0:	b918      	cbnz	r0, 80119fa <_fopen_r+0x1a>
 80119f2:	2400      	movs	r4, #0
 80119f4:	4620      	mov	r0, r4
 80119f6:	b003      	add	sp, #12
 80119f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119fa:	4628      	mov	r0, r5
 80119fc:	f7ff ffaa 	bl	8011954 <__sfp>
 8011a00:	4604      	mov	r4, r0
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d0f5      	beq.n	80119f2 <_fopen_r+0x12>
 8011a06:	4639      	mov	r1, r7
 8011a08:	9a01      	ldr	r2, [sp, #4]
 8011a0a:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8011a0e:	4628      	mov	r0, r5
 8011a10:	f000 fc62 	bl	80122d8 <_open_r>
 8011a14:	1e07      	subs	r7, r0, #0
 8011a16:	da09      	bge.n	8011a2c <_fopen_r+0x4c>
 8011a18:	2500      	movs	r5, #0
 8011a1a:	f7ff ff4b 	bl	80118b4 <__sfp_lock_acquire>
 8011a1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a20:	81a5      	strh	r5, [r4, #12]
 8011a22:	f000 fb10 	bl	8012046 <__retarget_lock_close_recursive>
 8011a26:	f7ff ff4b 	bl	80118c0 <__sfp_lock_release>
 8011a2a:	e7e2      	b.n	80119f2 <_fopen_r+0x12>
 8011a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a2e:	07db      	lsls	r3, r3, #31
 8011a30:	d405      	bmi.n	8011a3e <_fopen_r+0x5e>
 8011a32:	89a3      	ldrh	r3, [r4, #12]
 8011a34:	0598      	lsls	r0, r3, #22
 8011a36:	d402      	bmi.n	8011a3e <_fopen_r+0x5e>
 8011a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a3a:	f000 fb06 	bl	801204a <__retarget_lock_acquire_recursive>
 8011a3e:	4b0e      	ldr	r3, [pc, #56]	; (8011a78 <_fopen_r+0x98>)
 8011a40:	6263      	str	r3, [r4, #36]	; 0x24
 8011a42:	4b0e      	ldr	r3, [pc, #56]	; (8011a7c <_fopen_r+0x9c>)
 8011a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a46:	4b0e      	ldr	r3, [pc, #56]	; (8011a80 <_fopen_r+0xa0>)
 8011a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a4a:	05f1      	lsls	r1, r6, #23
 8011a4c:	4b0d      	ldr	r3, [pc, #52]	; (8011a84 <_fopen_r+0xa4>)
 8011a4e:	81e7      	strh	r7, [r4, #14]
 8011a50:	81a6      	strh	r6, [r4, #12]
 8011a52:	6224      	str	r4, [r4, #32]
 8011a54:	6323      	str	r3, [r4, #48]	; 0x30
 8011a56:	d505      	bpl.n	8011a64 <_fopen_r+0x84>
 8011a58:	2302      	movs	r3, #2
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	4621      	mov	r1, r4
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f000 f888 	bl	8011b74 <_fseek_r>
 8011a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a66:	07da      	lsls	r2, r3, #31
 8011a68:	d4c4      	bmi.n	80119f4 <_fopen_r+0x14>
 8011a6a:	89a3      	ldrh	r3, [r4, #12]
 8011a6c:	059b      	lsls	r3, r3, #22
 8011a6e:	d4c1      	bmi.n	80119f4 <_fopen_r+0x14>
 8011a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a72:	f000 faec 	bl	801204e <__retarget_lock_release_recursive>
 8011a76:	e7bd      	b.n	80119f4 <_fopen_r+0x14>
 8011a78:	080124bd 	.word	0x080124bd
 8011a7c:	080124e3 	.word	0x080124e3
 8011a80:	0801251b 	.word	0x0801251b
 8011a84:	0801253f 	.word	0x0801253f

08011a88 <fopen>:
 8011a88:	4b02      	ldr	r3, [pc, #8]	; (8011a94 <fopen+0xc>)
 8011a8a:	460a      	mov	r2, r1
 8011a8c:	4601      	mov	r1, r0
 8011a8e:	6818      	ldr	r0, [r3, #0]
 8011a90:	f7ff bfa6 	b.w	80119e0 <_fopen_r>
 8011a94:	20000100 	.word	0x20000100

08011a98 <_fputs_r>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	460e      	mov	r6, r1
 8011a9c:	4614      	mov	r4, r2
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	b118      	cbz	r0, 8011aaa <_fputs_r+0x12>
 8011aa2:	6983      	ldr	r3, [r0, #24]
 8011aa4:	b90b      	cbnz	r3, 8011aaa <_fputs_r+0x12>
 8011aa6:	f7ff ff1d 	bl	80118e4 <__sinit>
 8011aaa:	4b2b      	ldr	r3, [pc, #172]	; (8011b58 <_fputs_r+0xc0>)
 8011aac:	429c      	cmp	r4, r3
 8011aae:	d11e      	bne.n	8011aee <_fputs_r+0x56>
 8011ab0:	686c      	ldr	r4, [r5, #4]
 8011ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ab4:	07da      	lsls	r2, r3, #31
 8011ab6:	d405      	bmi.n	8011ac4 <_fputs_r+0x2c>
 8011ab8:	89a3      	ldrh	r3, [r4, #12]
 8011aba:	059b      	lsls	r3, r3, #22
 8011abc:	d402      	bmi.n	8011ac4 <_fputs_r+0x2c>
 8011abe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ac0:	f000 fac3 	bl	801204a <__retarget_lock_acquire_recursive>
 8011ac4:	89a3      	ldrh	r3, [r4, #12]
 8011ac6:	0718      	lsls	r0, r3, #28
 8011ac8:	d51b      	bpl.n	8011b02 <_fputs_r+0x6a>
 8011aca:	6923      	ldr	r3, [r4, #16]
 8011acc:	b1cb      	cbz	r3, 8011b02 <_fputs_r+0x6a>
 8011ace:	3e01      	subs	r6, #1
 8011ad0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011ad4:	bb39      	cbnz	r1, 8011b26 <_fputs_r+0x8e>
 8011ad6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8011ad8:	f015 0501 	ands.w	r5, r5, #1
 8011adc:	d139      	bne.n	8011b52 <_fputs_r+0xba>
 8011ade:	89a3      	ldrh	r3, [r4, #12]
 8011ae0:	0599      	lsls	r1, r3, #22
 8011ae2:	d402      	bmi.n	8011aea <_fputs_r+0x52>
 8011ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ae6:	f000 fab2 	bl	801204e <__retarget_lock_release_recursive>
 8011aea:	4628      	mov	r0, r5
 8011aec:	bd70      	pop	{r4, r5, r6, pc}
 8011aee:	4b1b      	ldr	r3, [pc, #108]	; (8011b5c <_fputs_r+0xc4>)
 8011af0:	429c      	cmp	r4, r3
 8011af2:	d101      	bne.n	8011af8 <_fputs_r+0x60>
 8011af4:	68ac      	ldr	r4, [r5, #8]
 8011af6:	e7dc      	b.n	8011ab2 <_fputs_r+0x1a>
 8011af8:	4b19      	ldr	r3, [pc, #100]	; (8011b60 <_fputs_r+0xc8>)
 8011afa:	429c      	cmp	r4, r3
 8011afc:	bf08      	it	eq
 8011afe:	68ec      	ldreq	r4, [r5, #12]
 8011b00:	e7d7      	b.n	8011ab2 <_fputs_r+0x1a>
 8011b02:	4621      	mov	r1, r4
 8011b04:	4628      	mov	r0, r5
 8011b06:	f001 fdf1 	bl	80136ec <__swsetup_r>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	d0df      	beq.n	8011ace <_fputs_r+0x36>
 8011b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b10:	07da      	lsls	r2, r3, #31
 8011b12:	d405      	bmi.n	8011b20 <_fputs_r+0x88>
 8011b14:	89a3      	ldrh	r3, [r4, #12]
 8011b16:	059b      	lsls	r3, r3, #22
 8011b18:	d402      	bmi.n	8011b20 <_fputs_r+0x88>
 8011b1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b1c:	f000 fa97 	bl	801204e <__retarget_lock_release_recursive>
 8011b20:	f04f 35ff 	mov.w	r5, #4294967295
 8011b24:	e7e1      	b.n	8011aea <_fputs_r+0x52>
 8011b26:	68a3      	ldr	r3, [r4, #8]
 8011b28:	3b01      	subs	r3, #1
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	60a3      	str	r3, [r4, #8]
 8011b2e:	da04      	bge.n	8011b3a <_fputs_r+0xa2>
 8011b30:	69a2      	ldr	r2, [r4, #24]
 8011b32:	4293      	cmp	r3, r2
 8011b34:	db06      	blt.n	8011b44 <_fputs_r+0xac>
 8011b36:	290a      	cmp	r1, #10
 8011b38:	d004      	beq.n	8011b44 <_fputs_r+0xac>
 8011b3a:	6823      	ldr	r3, [r4, #0]
 8011b3c:	1c5a      	adds	r2, r3, #1
 8011b3e:	6022      	str	r2, [r4, #0]
 8011b40:	7019      	strb	r1, [r3, #0]
 8011b42:	e7c5      	b.n	8011ad0 <_fputs_r+0x38>
 8011b44:	4622      	mov	r2, r4
 8011b46:	4628      	mov	r0, r5
 8011b48:	f001 fd6c 	bl	8013624 <__swbuf_r>
 8011b4c:	3001      	adds	r0, #1
 8011b4e:	d1bf      	bne.n	8011ad0 <_fputs_r+0x38>
 8011b50:	e7dd      	b.n	8011b0e <_fputs_r+0x76>
 8011b52:	460d      	mov	r5, r1
 8011b54:	e7c9      	b.n	8011aea <_fputs_r+0x52>
 8011b56:	bf00      	nop
 8011b58:	08017c24 	.word	0x08017c24
 8011b5c:	08017c44 	.word	0x08017c44
 8011b60:	08017c04 	.word	0x08017c04

08011b64 <fputs>:
 8011b64:	4b02      	ldr	r3, [pc, #8]	; (8011b70 <fputs+0xc>)
 8011b66:	460a      	mov	r2, r1
 8011b68:	4601      	mov	r1, r0
 8011b6a:	6818      	ldr	r0, [r3, #0]
 8011b6c:	f7ff bf94 	b.w	8011a98 <_fputs_r>
 8011b70:	20000100 	.word	0x20000100

08011b74 <_fseek_r>:
 8011b74:	f000 b800 	b.w	8011b78 <_fseeko_r>

08011b78 <_fseeko_r>:
 8011b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b7c:	460c      	mov	r4, r1
 8011b7e:	4617      	mov	r7, r2
 8011b80:	461e      	mov	r6, r3
 8011b82:	4605      	mov	r5, r0
 8011b84:	b118      	cbz	r0, 8011b8e <_fseeko_r+0x16>
 8011b86:	6983      	ldr	r3, [r0, #24]
 8011b88:	b90b      	cbnz	r3, 8011b8e <_fseeko_r+0x16>
 8011b8a:	f7ff feab 	bl	80118e4 <__sinit>
 8011b8e:	4b44      	ldr	r3, [pc, #272]	; (8011ca0 <_fseeko_r+0x128>)
 8011b90:	429c      	cmp	r4, r3
 8011b92:	d122      	bne.n	8011bda <_fseeko_r+0x62>
 8011b94:	686c      	ldr	r4, [r5, #4]
 8011b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b98:	07d9      	lsls	r1, r3, #31
 8011b9a:	d405      	bmi.n	8011ba8 <_fseeko_r+0x30>
 8011b9c:	89a3      	ldrh	r3, [r4, #12]
 8011b9e:	059a      	lsls	r2, r3, #22
 8011ba0:	d402      	bmi.n	8011ba8 <_fseeko_r+0x30>
 8011ba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ba4:	f000 fa51 	bl	801204a <__retarget_lock_acquire_recursive>
 8011ba8:	89a3      	ldrh	r3, [r4, #12]
 8011baa:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8011bae:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8011bb2:	d103      	bne.n	8011bbc <_fseeko_r+0x44>
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f7ff fdee 	bl	8011798 <_fflush_r>
 8011bbc:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8011bc0:	f1b8 0f00 	cmp.w	r8, #0
 8011bc4:	d113      	bne.n	8011bee <_fseeko_r+0x76>
 8011bc6:	231d      	movs	r3, #29
 8011bc8:	602b      	str	r3, [r5, #0]
 8011bca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bcc:	07d9      	lsls	r1, r3, #31
 8011bce:	d55d      	bpl.n	8011c8c <_fseeko_r+0x114>
 8011bd0:	f04f 36ff 	mov.w	r6, #4294967295
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bda:	4b32      	ldr	r3, [pc, #200]	; (8011ca4 <_fseeko_r+0x12c>)
 8011bdc:	429c      	cmp	r4, r3
 8011bde:	d101      	bne.n	8011be4 <_fseeko_r+0x6c>
 8011be0:	68ac      	ldr	r4, [r5, #8]
 8011be2:	e7d8      	b.n	8011b96 <_fseeko_r+0x1e>
 8011be4:	4b30      	ldr	r3, [pc, #192]	; (8011ca8 <_fseeko_r+0x130>)
 8011be6:	429c      	cmp	r4, r3
 8011be8:	bf08      	it	eq
 8011bea:	68ec      	ldreq	r4, [r5, #12]
 8011bec:	e7d3      	b.n	8011b96 <_fseeko_r+0x1e>
 8011bee:	2e01      	cmp	r6, #1
 8011bf0:	d036      	beq.n	8011c60 <_fseeko_r+0xe8>
 8011bf2:	f036 0302 	bics.w	r3, r6, #2
 8011bf6:	d147      	bne.n	8011c88 <_fseeko_r+0x110>
 8011bf8:	6923      	ldr	r3, [r4, #16]
 8011bfa:	b91b      	cbnz	r3, 8011c04 <_fseeko_r+0x8c>
 8011bfc:	4621      	mov	r1, r4
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f000 fa4a 	bl	8012098 <__smakebuf_r>
 8011c04:	4621      	mov	r1, r4
 8011c06:	4628      	mov	r0, r5
 8011c08:	f7ff fdc6 	bl	8011798 <_fflush_r>
 8011c0c:	2800      	cmp	r0, #0
 8011c0e:	d1dc      	bne.n	8011bca <_fseeko_r+0x52>
 8011c10:	6a21      	ldr	r1, [r4, #32]
 8011c12:	4633      	mov	r3, r6
 8011c14:	463a      	mov	r2, r7
 8011c16:	4628      	mov	r0, r5
 8011c18:	47c0      	blx	r8
 8011c1a:	3001      	adds	r0, #1
 8011c1c:	d0d5      	beq.n	8011bca <_fseeko_r+0x52>
 8011c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c20:	b141      	cbz	r1, 8011c34 <_fseeko_r+0xbc>
 8011c22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c26:	4299      	cmp	r1, r3
 8011c28:	d002      	beq.n	8011c30 <_fseeko_r+0xb8>
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f000 faaa 	bl	8012184 <_free_r>
 8011c30:	2300      	movs	r3, #0
 8011c32:	6363      	str	r3, [r4, #52]	; 0x34
 8011c34:	6923      	ldr	r3, [r4, #16]
 8011c36:	6023      	str	r3, [r4, #0]
 8011c38:	89a3      	ldrh	r3, [r4, #12]
 8011c3a:	2500      	movs	r5, #0
 8011c3c:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8011c40:	6065      	str	r5, [r4, #4]
 8011c42:	81a3      	strh	r3, [r4, #12]
 8011c44:	2208      	movs	r2, #8
 8011c46:	4629      	mov	r1, r5
 8011c48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c4c:	f000 fa82 	bl	8012154 <memset>
 8011c50:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8011c52:	f016 0601 	ands.w	r6, r6, #1
 8011c56:	d120      	bne.n	8011c9a <_fseeko_r+0x122>
 8011c58:	89a3      	ldrh	r3, [r4, #12]
 8011c5a:	059b      	lsls	r3, r3, #22
 8011c5c:	d4ba      	bmi.n	8011bd4 <_fseeko_r+0x5c>
 8011c5e:	e00c      	b.n	8011c7a <_fseeko_r+0x102>
 8011c60:	4621      	mov	r1, r4
 8011c62:	4628      	mov	r0, r5
 8011c64:	f000 f822 	bl	8011cac <_ftello_r>
 8011c68:	1c43      	adds	r3, r0, #1
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	d109      	bne.n	8011c82 <_fseeko_r+0x10a>
 8011c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c70:	07dd      	lsls	r5, r3, #31
 8011c72:	d4ad      	bmi.n	8011bd0 <_fseeko_r+0x58>
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	0598      	lsls	r0, r3, #22
 8011c78:	d4aa      	bmi.n	8011bd0 <_fseeko_r+0x58>
 8011c7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c7c:	f000 f9e7 	bl	801204e <__retarget_lock_release_recursive>
 8011c80:	e7a8      	b.n	8011bd4 <_fseeko_r+0x5c>
 8011c82:	4407      	add	r7, r0
 8011c84:	2600      	movs	r6, #0
 8011c86:	e7b7      	b.n	8011bf8 <_fseeko_r+0x80>
 8011c88:	2316      	movs	r3, #22
 8011c8a:	e79d      	b.n	8011bc8 <_fseeko_r+0x50>
 8011c8c:	89a3      	ldrh	r3, [r4, #12]
 8011c8e:	059a      	lsls	r2, r3, #22
 8011c90:	d49e      	bmi.n	8011bd0 <_fseeko_r+0x58>
 8011c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c94:	f000 f9db 	bl	801204e <__retarget_lock_release_recursive>
 8011c98:	e79a      	b.n	8011bd0 <_fseeko_r+0x58>
 8011c9a:	462e      	mov	r6, r5
 8011c9c:	e79a      	b.n	8011bd4 <_fseeko_r+0x5c>
 8011c9e:	bf00      	nop
 8011ca0:	08017c24 	.word	0x08017c24
 8011ca4:	08017c44 	.word	0x08017c44
 8011ca8:	08017c04 	.word	0x08017c04

08011cac <_ftello_r>:
 8011cac:	b570      	push	{r4, r5, r6, lr}
 8011cae:	460c      	mov	r4, r1
 8011cb0:	4605      	mov	r5, r0
 8011cb2:	b118      	cbz	r0, 8011cbc <_ftello_r+0x10>
 8011cb4:	6983      	ldr	r3, [r0, #24]
 8011cb6:	b90b      	cbnz	r3, 8011cbc <_ftello_r+0x10>
 8011cb8:	f7ff fe14 	bl	80118e4 <__sinit>
 8011cbc:	4b32      	ldr	r3, [pc, #200]	; (8011d88 <_ftello_r+0xdc>)
 8011cbe:	429c      	cmp	r4, r3
 8011cc0:	d114      	bne.n	8011cec <_ftello_r+0x40>
 8011cc2:	686c      	ldr	r4, [r5, #4]
 8011cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cc6:	07da      	lsls	r2, r3, #31
 8011cc8:	d405      	bmi.n	8011cd6 <_ftello_r+0x2a>
 8011cca:	89a3      	ldrh	r3, [r4, #12]
 8011ccc:	059b      	lsls	r3, r3, #22
 8011cce:	d402      	bmi.n	8011cd6 <_ftello_r+0x2a>
 8011cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cd2:	f000 f9ba 	bl	801204a <__retarget_lock_acquire_recursive>
 8011cd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011cd8:	b9ce      	cbnz	r6, 8011d0e <_ftello_r+0x62>
 8011cda:	231d      	movs	r3, #29
 8011cdc:	602b      	str	r3, [r5, #0]
 8011cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ce0:	07de      	lsls	r6, r3, #31
 8011ce2:	d50d      	bpl.n	8011d00 <_ftello_r+0x54>
 8011ce4:	f04f 35ff 	mov.w	r5, #4294967295
 8011ce8:	4628      	mov	r0, r5
 8011cea:	bd70      	pop	{r4, r5, r6, pc}
 8011cec:	4b27      	ldr	r3, [pc, #156]	; (8011d8c <_ftello_r+0xe0>)
 8011cee:	429c      	cmp	r4, r3
 8011cf0:	d101      	bne.n	8011cf6 <_ftello_r+0x4a>
 8011cf2:	68ac      	ldr	r4, [r5, #8]
 8011cf4:	e7e6      	b.n	8011cc4 <_ftello_r+0x18>
 8011cf6:	4b26      	ldr	r3, [pc, #152]	; (8011d90 <_ftello_r+0xe4>)
 8011cf8:	429c      	cmp	r4, r3
 8011cfa:	bf08      	it	eq
 8011cfc:	68ec      	ldreq	r4, [r5, #12]
 8011cfe:	e7e1      	b.n	8011cc4 <_ftello_r+0x18>
 8011d00:	89a3      	ldrh	r3, [r4, #12]
 8011d02:	059d      	lsls	r5, r3, #22
 8011d04:	d4ee      	bmi.n	8011ce4 <_ftello_r+0x38>
 8011d06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d08:	f000 f9a1 	bl	801204e <__retarget_lock_release_recursive>
 8011d0c:	e7ea      	b.n	8011ce4 <_ftello_r+0x38>
 8011d0e:	89a2      	ldrh	r2, [r4, #12]
 8011d10:	f002 030c 	and.w	r3, r2, #12
 8011d14:	2b08      	cmp	r3, #8
 8011d16:	d119      	bne.n	8011d4c <_ftello_r+0xa0>
 8011d18:	6823      	ldr	r3, [r4, #0]
 8011d1a:	b1bb      	cbz	r3, 8011d4c <_ftello_r+0xa0>
 8011d1c:	6921      	ldr	r1, [r4, #16]
 8011d1e:	1a5b      	subs	r3, r3, r1
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	dd13      	ble.n	8011d4c <_ftello_r+0xa0>
 8011d24:	05d0      	lsls	r0, r2, #23
 8011d26:	d511      	bpl.n	8011d4c <_ftello_r+0xa0>
 8011d28:	2302      	movs	r3, #2
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	6a21      	ldr	r1, [r4, #32]
 8011d2e:	4628      	mov	r0, r5
 8011d30:	47b0      	blx	r6
 8011d32:	1c41      	adds	r1, r0, #1
 8011d34:	4605      	mov	r5, r0
 8011d36:	d10d      	bne.n	8011d54 <_ftello_r+0xa8>
 8011d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d3a:	07da      	lsls	r2, r3, #31
 8011d3c:	d4d2      	bmi.n	8011ce4 <_ftello_r+0x38>
 8011d3e:	89a3      	ldrh	r3, [r4, #12]
 8011d40:	059b      	lsls	r3, r3, #22
 8011d42:	d4cf      	bmi.n	8011ce4 <_ftello_r+0x38>
 8011d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d46:	f000 f982 	bl	801204e <__retarget_lock_release_recursive>
 8011d4a:	e7cd      	b.n	8011ce8 <_ftello_r+0x3c>
 8011d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d50:	d00f      	beq.n	8011d72 <_ftello_r+0xc6>
 8011d52:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8011d54:	89a2      	ldrh	r2, [r4, #12]
 8011d56:	0756      	lsls	r6, r2, #29
 8011d58:	d50d      	bpl.n	8011d76 <_ftello_r+0xca>
 8011d5a:	6863      	ldr	r3, [r4, #4]
 8011d5c:	1aed      	subs	r5, r5, r3
 8011d5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d60:	b10b      	cbz	r3, 8011d66 <_ftello_r+0xba>
 8011d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d64:	1aed      	subs	r5, r5, r3
 8011d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d68:	07d9      	lsls	r1, r3, #31
 8011d6a:	d4bd      	bmi.n	8011ce8 <_ftello_r+0x3c>
 8011d6c:	0593      	lsls	r3, r2, #22
 8011d6e:	d4bb      	bmi.n	8011ce8 <_ftello_r+0x3c>
 8011d70:	e7e8      	b.n	8011d44 <_ftello_r+0x98>
 8011d72:	2301      	movs	r3, #1
 8011d74:	e7da      	b.n	8011d2c <_ftello_r+0x80>
 8011d76:	0710      	lsls	r0, r2, #28
 8011d78:	d5f5      	bpl.n	8011d66 <_ftello_r+0xba>
 8011d7a:	6823      	ldr	r3, [r4, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d0f2      	beq.n	8011d66 <_ftello_r+0xba>
 8011d80:	6921      	ldr	r1, [r4, #16]
 8011d82:	1a5b      	subs	r3, r3, r1
 8011d84:	441d      	add	r5, r3
 8011d86:	e7ee      	b.n	8011d66 <_ftello_r+0xba>
 8011d88:	08017c24 	.word	0x08017c24
 8011d8c:	08017c44 	.word	0x08017c44
 8011d90:	08017c04 	.word	0x08017c04

08011d94 <_fwalk_reent>:
 8011d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d98:	4606      	mov	r6, r0
 8011d9a:	4688      	mov	r8, r1
 8011d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011da0:	2700      	movs	r7, #0
 8011da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011da6:	f1b9 0901 	subs.w	r9, r9, #1
 8011daa:	d505      	bpl.n	8011db8 <_fwalk_reent+0x24>
 8011dac:	6824      	ldr	r4, [r4, #0]
 8011dae:	2c00      	cmp	r4, #0
 8011db0:	d1f7      	bne.n	8011da2 <_fwalk_reent+0xe>
 8011db2:	4638      	mov	r0, r7
 8011db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011db8:	89ab      	ldrh	r3, [r5, #12]
 8011dba:	2b01      	cmp	r3, #1
 8011dbc:	d907      	bls.n	8011dce <_fwalk_reent+0x3a>
 8011dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	d003      	beq.n	8011dce <_fwalk_reent+0x3a>
 8011dc6:	4629      	mov	r1, r5
 8011dc8:	4630      	mov	r0, r6
 8011dca:	47c0      	blx	r8
 8011dcc:	4307      	orrs	r7, r0
 8011dce:	3568      	adds	r5, #104	; 0x68
 8011dd0:	e7e9      	b.n	8011da6 <_fwalk_reent+0x12>
	...

08011dd4 <__libc_init_array>:
 8011dd4:	b570      	push	{r4, r5, r6, lr}
 8011dd6:	4d0d      	ldr	r5, [pc, #52]	; (8011e0c <__libc_init_array+0x38>)
 8011dd8:	4c0d      	ldr	r4, [pc, #52]	; (8011e10 <__libc_init_array+0x3c>)
 8011dda:	1b64      	subs	r4, r4, r5
 8011ddc:	10a4      	asrs	r4, r4, #2
 8011dde:	2600      	movs	r6, #0
 8011de0:	42a6      	cmp	r6, r4
 8011de2:	d109      	bne.n	8011df8 <__libc_init_array+0x24>
 8011de4:	4d0b      	ldr	r5, [pc, #44]	; (8011e14 <__libc_init_array+0x40>)
 8011de6:	4c0c      	ldr	r4, [pc, #48]	; (8011e18 <__libc_init_array+0x44>)
 8011de8:	f003 f8c8 	bl	8014f7c <_init>
 8011dec:	1b64      	subs	r4, r4, r5
 8011dee:	10a4      	asrs	r4, r4, #2
 8011df0:	2600      	movs	r6, #0
 8011df2:	42a6      	cmp	r6, r4
 8011df4:	d105      	bne.n	8011e02 <__libc_init_array+0x2e>
 8011df6:	bd70      	pop	{r4, r5, r6, pc}
 8011df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dfc:	4798      	blx	r3
 8011dfe:	3601      	adds	r6, #1
 8011e00:	e7ee      	b.n	8011de0 <__libc_init_array+0xc>
 8011e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e06:	4798      	blx	r3
 8011e08:	3601      	adds	r6, #1
 8011e0a:	e7f2      	b.n	8011df2 <__libc_init_array+0x1e>
 8011e0c:	080181fc 	.word	0x080181fc
 8011e10:	080181fc 	.word	0x080181fc
 8011e14:	080181fc 	.word	0x080181fc
 8011e18:	08018208 	.word	0x08018208

08011e1c <localtime>:
 8011e1c:	b538      	push	{r3, r4, r5, lr}
 8011e1e:	4b0b      	ldr	r3, [pc, #44]	; (8011e4c <localtime+0x30>)
 8011e20:	681d      	ldr	r5, [r3, #0]
 8011e22:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011e24:	4604      	mov	r4, r0
 8011e26:	b953      	cbnz	r3, 8011e3e <localtime+0x22>
 8011e28:	2024      	movs	r0, #36	; 0x24
 8011e2a:	f000 f975 	bl	8012118 <malloc>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	63e8      	str	r0, [r5, #60]	; 0x3c
 8011e32:	b920      	cbnz	r0, 8011e3e <localtime+0x22>
 8011e34:	4b06      	ldr	r3, [pc, #24]	; (8011e50 <localtime+0x34>)
 8011e36:	4807      	ldr	r0, [pc, #28]	; (8011e54 <localtime+0x38>)
 8011e38:	2132      	movs	r1, #50	; 0x32
 8011e3a:	f001 fd2b 	bl	8013894 <__assert_func>
 8011e3e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8011e40:	4620      	mov	r0, r4
 8011e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e46:	f000 b807 	b.w	8011e58 <localtime_r>
 8011e4a:	bf00      	nop
 8011e4c:	20000100 	.word	0x20000100
 8011e50:	08017c68 	.word	0x08017c68
 8011e54:	08017c7f 	.word	0x08017c7f

08011e58 <localtime_r>:
 8011e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011e5c:	4607      	mov	r7, r0
 8011e5e:	9101      	str	r1, [sp, #4]
 8011e60:	f001 fdf4 	bl	8013a4c <__gettzinfo>
 8011e64:	9901      	ldr	r1, [sp, #4]
 8011e66:	4680      	mov	r8, r0
 8011e68:	4638      	mov	r0, r7
 8011e6a:	f001 fdf3 	bl	8013a54 <gmtime_r>
 8011e6e:	6943      	ldr	r3, [r0, #20]
 8011e70:	079a      	lsls	r2, r3, #30
 8011e72:	4604      	mov	r4, r0
 8011e74:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8011e78:	d105      	bne.n	8011e86 <localtime_r+0x2e>
 8011e7a:	2264      	movs	r2, #100	; 0x64
 8011e7c:	fb96 f3f2 	sdiv	r3, r6, r2
 8011e80:	fb02 6313 	mls	r3, r2, r3, r6
 8011e84:	bb7b      	cbnz	r3, 8011ee6 <localtime_r+0x8e>
 8011e86:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011e8a:	fb96 f5f3 	sdiv	r5, r6, r3
 8011e8e:	fb03 6515 	mls	r5, r3, r5, r6
 8011e92:	fab5 f585 	clz	r5, r5
 8011e96:	096d      	lsrs	r5, r5, #5
 8011e98:	4b68      	ldr	r3, [pc, #416]	; (801203c <localtime_r+0x1e4>)
 8011e9a:	2230      	movs	r2, #48	; 0x30
 8011e9c:	fb02 3505 	mla	r5, r2, r5, r3
 8011ea0:	f001 f9f8 	bl	8013294 <__tz_lock>
 8011ea4:	f001 fa02 	bl	80132ac <_tzset_unlocked>
 8011ea8:	4b65      	ldr	r3, [pc, #404]	; (8012040 <localtime_r+0x1e8>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	b353      	cbz	r3, 8011f04 <localtime_r+0xac>
 8011eae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011eb2:	42b3      	cmp	r3, r6
 8011eb4:	d119      	bne.n	8011eea <localtime_r+0x92>
 8011eb6:	f8d8 1000 	ldr.w	r1, [r8]
 8011eba:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011ebe:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8011ec2:	b9d1      	cbnz	r1, 8011efa <localtime_r+0xa2>
 8011ec4:	4296      	cmp	r6, r2
 8011ec6:	eb77 0303 	sbcs.w	r3, r7, r3
 8011eca:	da23      	bge.n	8011f14 <localtime_r+0xbc>
 8011ecc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8011ed0:	4296      	cmp	r6, r2
 8011ed2:	eb77 0303 	sbcs.w	r3, r7, r3
 8011ed6:	bfb4      	ite	lt
 8011ed8:	2301      	movlt	r3, #1
 8011eda:	2300      	movge	r3, #0
 8011edc:	6223      	str	r3, [r4, #32]
 8011ede:	db1b      	blt.n	8011f18 <localtime_r+0xc0>
 8011ee0:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8011ee4:	e01a      	b.n	8011f1c <localtime_r+0xc4>
 8011ee6:	2501      	movs	r5, #1
 8011ee8:	e7d6      	b.n	8011e98 <localtime_r+0x40>
 8011eea:	4630      	mov	r0, r6
 8011eec:	f001 f92a 	bl	8013144 <__tzcalc_limits>
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d1e0      	bne.n	8011eb6 <localtime_r+0x5e>
 8011ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ef8:	e004      	b.n	8011f04 <localtime_r+0xac>
 8011efa:	4296      	cmp	r6, r2
 8011efc:	eb77 0303 	sbcs.w	r3, r7, r3
 8011f00:	da02      	bge.n	8011f08 <localtime_r+0xb0>
 8011f02:	2300      	movs	r3, #0
 8011f04:	6223      	str	r3, [r4, #32]
 8011f06:	e7eb      	b.n	8011ee0 <localtime_r+0x88>
 8011f08:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8011f0c:	4296      	cmp	r6, r2
 8011f0e:	eb77 0303 	sbcs.w	r3, r7, r3
 8011f12:	daf6      	bge.n	8011f02 <localtime_r+0xaa>
 8011f14:	2301      	movs	r3, #1
 8011f16:	6223      	str	r3, [r4, #32]
 8011f18:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8011f1c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011f20:	203c      	movs	r0, #60	; 0x3c
 8011f22:	fb91 f6f3 	sdiv	r6, r1, r3
 8011f26:	fb03 1316 	mls	r3, r3, r6, r1
 8011f2a:	6861      	ldr	r1, [r4, #4]
 8011f2c:	fb93 f2f0 	sdiv	r2, r3, r0
 8011f30:	fb00 3012 	mls	r0, r0, r2, r3
 8011f34:	6823      	ldr	r3, [r4, #0]
 8011f36:	1a89      	subs	r1, r1, r2
 8011f38:	68a2      	ldr	r2, [r4, #8]
 8011f3a:	6061      	str	r1, [r4, #4]
 8011f3c:	1a1b      	subs	r3, r3, r0
 8011f3e:	1b92      	subs	r2, r2, r6
 8011f40:	2b3b      	cmp	r3, #59	; 0x3b
 8011f42:	6023      	str	r3, [r4, #0]
 8011f44:	60a2      	str	r2, [r4, #8]
 8011f46:	dd35      	ble.n	8011fb4 <localtime_r+0x15c>
 8011f48:	3101      	adds	r1, #1
 8011f4a:	6061      	str	r1, [r4, #4]
 8011f4c:	3b3c      	subs	r3, #60	; 0x3c
 8011f4e:	6023      	str	r3, [r4, #0]
 8011f50:	6863      	ldr	r3, [r4, #4]
 8011f52:	2b3b      	cmp	r3, #59	; 0x3b
 8011f54:	dd34      	ble.n	8011fc0 <localtime_r+0x168>
 8011f56:	3201      	adds	r2, #1
 8011f58:	60a2      	str	r2, [r4, #8]
 8011f5a:	3b3c      	subs	r3, #60	; 0x3c
 8011f5c:	6063      	str	r3, [r4, #4]
 8011f5e:	68a3      	ldr	r3, [r4, #8]
 8011f60:	2b17      	cmp	r3, #23
 8011f62:	dd33      	ble.n	8011fcc <localtime_r+0x174>
 8011f64:	69e2      	ldr	r2, [r4, #28]
 8011f66:	3201      	adds	r2, #1
 8011f68:	61e2      	str	r2, [r4, #28]
 8011f6a:	69a2      	ldr	r2, [r4, #24]
 8011f6c:	3201      	adds	r2, #1
 8011f6e:	2a06      	cmp	r2, #6
 8011f70:	bfc8      	it	gt
 8011f72:	2200      	movgt	r2, #0
 8011f74:	61a2      	str	r2, [r4, #24]
 8011f76:	68e2      	ldr	r2, [r4, #12]
 8011f78:	3b18      	subs	r3, #24
 8011f7a:	3201      	adds	r2, #1
 8011f7c:	60a3      	str	r3, [r4, #8]
 8011f7e:	6923      	ldr	r3, [r4, #16]
 8011f80:	60e2      	str	r2, [r4, #12]
 8011f82:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8011f86:	428a      	cmp	r2, r1
 8011f88:	dd0e      	ble.n	8011fa8 <localtime_r+0x150>
 8011f8a:	2b0b      	cmp	r3, #11
 8011f8c:	eba2 0201 	sub.w	r2, r2, r1
 8011f90:	60e2      	str	r2, [r4, #12]
 8011f92:	f103 0201 	add.w	r2, r3, #1
 8011f96:	bf09      	itett	eq
 8011f98:	6963      	ldreq	r3, [r4, #20]
 8011f9a:	6122      	strne	r2, [r4, #16]
 8011f9c:	2200      	moveq	r2, #0
 8011f9e:	3301      	addeq	r3, #1
 8011fa0:	bf02      	ittt	eq
 8011fa2:	6122      	streq	r2, [r4, #16]
 8011fa4:	6163      	streq	r3, [r4, #20]
 8011fa6:	61e2      	streq	r2, [r4, #28]
 8011fa8:	f001 f97a 	bl	80132a0 <__tz_unlock>
 8011fac:	4620      	mov	r0, r4
 8011fae:	b002      	add	sp, #8
 8011fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	dacb      	bge.n	8011f50 <localtime_r+0xf8>
 8011fb8:	3901      	subs	r1, #1
 8011fba:	6061      	str	r1, [r4, #4]
 8011fbc:	333c      	adds	r3, #60	; 0x3c
 8011fbe:	e7c6      	b.n	8011f4e <localtime_r+0xf6>
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	dacc      	bge.n	8011f5e <localtime_r+0x106>
 8011fc4:	3a01      	subs	r2, #1
 8011fc6:	60a2      	str	r2, [r4, #8]
 8011fc8:	333c      	adds	r3, #60	; 0x3c
 8011fca:	e7c7      	b.n	8011f5c <localtime_r+0x104>
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	daeb      	bge.n	8011fa8 <localtime_r+0x150>
 8011fd0:	69e2      	ldr	r2, [r4, #28]
 8011fd2:	3a01      	subs	r2, #1
 8011fd4:	61e2      	str	r2, [r4, #28]
 8011fd6:	69a2      	ldr	r2, [r4, #24]
 8011fd8:	3a01      	subs	r2, #1
 8011fda:	bf48      	it	mi
 8011fdc:	2206      	movmi	r2, #6
 8011fde:	61a2      	str	r2, [r4, #24]
 8011fe0:	68e2      	ldr	r2, [r4, #12]
 8011fe2:	3318      	adds	r3, #24
 8011fe4:	3a01      	subs	r2, #1
 8011fe6:	60e2      	str	r2, [r4, #12]
 8011fe8:	60a3      	str	r3, [r4, #8]
 8011fea:	2a00      	cmp	r2, #0
 8011fec:	d1dc      	bne.n	8011fa8 <localtime_r+0x150>
 8011fee:	6923      	ldr	r3, [r4, #16]
 8011ff0:	3b01      	subs	r3, #1
 8011ff2:	d405      	bmi.n	8012000 <localtime_r+0x1a8>
 8011ff4:	6123      	str	r3, [r4, #16]
 8011ff6:	6923      	ldr	r3, [r4, #16]
 8011ff8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8011ffc:	60e3      	str	r3, [r4, #12]
 8011ffe:	e7d3      	b.n	8011fa8 <localtime_r+0x150>
 8012000:	230b      	movs	r3, #11
 8012002:	6123      	str	r3, [r4, #16]
 8012004:	6963      	ldr	r3, [r4, #20]
 8012006:	1e5a      	subs	r2, r3, #1
 8012008:	6162      	str	r2, [r4, #20]
 801200a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801200e:	0793      	lsls	r3, r2, #30
 8012010:	d105      	bne.n	801201e <localtime_r+0x1c6>
 8012012:	2164      	movs	r1, #100	; 0x64
 8012014:	fb92 f3f1 	sdiv	r3, r2, r1
 8012018:	fb01 2313 	mls	r3, r1, r3, r2
 801201c:	b963      	cbnz	r3, 8012038 <localtime_r+0x1e0>
 801201e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012022:	fb92 f3f1 	sdiv	r3, r2, r1
 8012026:	fb01 2313 	mls	r3, r1, r3, r2
 801202a:	fab3 f383 	clz	r3, r3
 801202e:	095b      	lsrs	r3, r3, #5
 8012030:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8012034:	61e3      	str	r3, [r4, #28]
 8012036:	e7de      	b.n	8011ff6 <localtime_r+0x19e>
 8012038:	2301      	movs	r3, #1
 801203a:	e7f9      	b.n	8012030 <localtime_r+0x1d8>
 801203c:	08017ce0 	.word	0x08017ce0
 8012040:	20000b1c 	.word	0x20000b1c

08012044 <__retarget_lock_init_recursive>:
 8012044:	4770      	bx	lr

08012046 <__retarget_lock_close_recursive>:
 8012046:	4770      	bx	lr

08012048 <__retarget_lock_acquire>:
 8012048:	4770      	bx	lr

0801204a <__retarget_lock_acquire_recursive>:
 801204a:	4770      	bx	lr

0801204c <__retarget_lock_release>:
 801204c:	4770      	bx	lr

0801204e <__retarget_lock_release_recursive>:
 801204e:	4770      	bx	lr

08012050 <__swhatbuf_r>:
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	460e      	mov	r6, r1
 8012054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012058:	2900      	cmp	r1, #0
 801205a:	b096      	sub	sp, #88	; 0x58
 801205c:	4614      	mov	r4, r2
 801205e:	461d      	mov	r5, r3
 8012060:	da07      	bge.n	8012072 <__swhatbuf_r+0x22>
 8012062:	2300      	movs	r3, #0
 8012064:	602b      	str	r3, [r5, #0]
 8012066:	89b3      	ldrh	r3, [r6, #12]
 8012068:	061a      	lsls	r2, r3, #24
 801206a:	d410      	bmi.n	801208e <__swhatbuf_r+0x3e>
 801206c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012070:	e00e      	b.n	8012090 <__swhatbuf_r+0x40>
 8012072:	466a      	mov	r2, sp
 8012074:	f001 fc84 	bl	8013980 <_fstat_r>
 8012078:	2800      	cmp	r0, #0
 801207a:	dbf2      	blt.n	8012062 <__swhatbuf_r+0x12>
 801207c:	9a01      	ldr	r2, [sp, #4]
 801207e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012082:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012086:	425a      	negs	r2, r3
 8012088:	415a      	adcs	r2, r3
 801208a:	602a      	str	r2, [r5, #0]
 801208c:	e7ee      	b.n	801206c <__swhatbuf_r+0x1c>
 801208e:	2340      	movs	r3, #64	; 0x40
 8012090:	2000      	movs	r0, #0
 8012092:	6023      	str	r3, [r4, #0]
 8012094:	b016      	add	sp, #88	; 0x58
 8012096:	bd70      	pop	{r4, r5, r6, pc}

08012098 <__smakebuf_r>:
 8012098:	898b      	ldrh	r3, [r1, #12]
 801209a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801209c:	079d      	lsls	r5, r3, #30
 801209e:	4606      	mov	r6, r0
 80120a0:	460c      	mov	r4, r1
 80120a2:	d507      	bpl.n	80120b4 <__smakebuf_r+0x1c>
 80120a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80120a8:	6023      	str	r3, [r4, #0]
 80120aa:	6123      	str	r3, [r4, #16]
 80120ac:	2301      	movs	r3, #1
 80120ae:	6163      	str	r3, [r4, #20]
 80120b0:	b002      	add	sp, #8
 80120b2:	bd70      	pop	{r4, r5, r6, pc}
 80120b4:	ab01      	add	r3, sp, #4
 80120b6:	466a      	mov	r2, sp
 80120b8:	f7ff ffca 	bl	8012050 <__swhatbuf_r>
 80120bc:	9900      	ldr	r1, [sp, #0]
 80120be:	4605      	mov	r5, r0
 80120c0:	4630      	mov	r0, r6
 80120c2:	f000 f8af 	bl	8012224 <_malloc_r>
 80120c6:	b948      	cbnz	r0, 80120dc <__smakebuf_r+0x44>
 80120c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120cc:	059a      	lsls	r2, r3, #22
 80120ce:	d4ef      	bmi.n	80120b0 <__smakebuf_r+0x18>
 80120d0:	f023 0303 	bic.w	r3, r3, #3
 80120d4:	f043 0302 	orr.w	r3, r3, #2
 80120d8:	81a3      	strh	r3, [r4, #12]
 80120da:	e7e3      	b.n	80120a4 <__smakebuf_r+0xc>
 80120dc:	4b0d      	ldr	r3, [pc, #52]	; (8012114 <__smakebuf_r+0x7c>)
 80120de:	62b3      	str	r3, [r6, #40]	; 0x28
 80120e0:	89a3      	ldrh	r3, [r4, #12]
 80120e2:	6020      	str	r0, [r4, #0]
 80120e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120e8:	81a3      	strh	r3, [r4, #12]
 80120ea:	9b00      	ldr	r3, [sp, #0]
 80120ec:	6163      	str	r3, [r4, #20]
 80120ee:	9b01      	ldr	r3, [sp, #4]
 80120f0:	6120      	str	r0, [r4, #16]
 80120f2:	b15b      	cbz	r3, 801210c <__smakebuf_r+0x74>
 80120f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120f8:	4630      	mov	r0, r6
 80120fa:	f001 fd5b 	bl	8013bb4 <_isatty_r>
 80120fe:	b128      	cbz	r0, 801210c <__smakebuf_r+0x74>
 8012100:	89a3      	ldrh	r3, [r4, #12]
 8012102:	f023 0303 	bic.w	r3, r3, #3
 8012106:	f043 0301 	orr.w	r3, r3, #1
 801210a:	81a3      	strh	r3, [r4, #12]
 801210c:	89a0      	ldrh	r0, [r4, #12]
 801210e:	4305      	orrs	r5, r0
 8012110:	81a5      	strh	r5, [r4, #12]
 8012112:	e7cd      	b.n	80120b0 <__smakebuf_r+0x18>
 8012114:	0801187d 	.word	0x0801187d

08012118 <malloc>:
 8012118:	4b02      	ldr	r3, [pc, #8]	; (8012124 <malloc+0xc>)
 801211a:	4601      	mov	r1, r0
 801211c:	6818      	ldr	r0, [r3, #0]
 801211e:	f000 b881 	b.w	8012224 <_malloc_r>
 8012122:	bf00      	nop
 8012124:	20000100 	.word	0x20000100

08012128 <free>:
 8012128:	4b02      	ldr	r3, [pc, #8]	; (8012134 <free+0xc>)
 801212a:	4601      	mov	r1, r0
 801212c:	6818      	ldr	r0, [r3, #0]
 801212e:	f000 b829 	b.w	8012184 <_free_r>
 8012132:	bf00      	nop
 8012134:	20000100 	.word	0x20000100

08012138 <memcpy>:
 8012138:	440a      	add	r2, r1
 801213a:	4291      	cmp	r1, r2
 801213c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012140:	d100      	bne.n	8012144 <memcpy+0xc>
 8012142:	4770      	bx	lr
 8012144:	b510      	push	{r4, lr}
 8012146:	f811 4b01 	ldrb.w	r4, [r1], #1
 801214a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801214e:	4291      	cmp	r1, r2
 8012150:	d1f9      	bne.n	8012146 <memcpy+0xe>
 8012152:	bd10      	pop	{r4, pc}

08012154 <memset>:
 8012154:	4402      	add	r2, r0
 8012156:	4603      	mov	r3, r0
 8012158:	4293      	cmp	r3, r2
 801215a:	d100      	bne.n	801215e <memset+0xa>
 801215c:	4770      	bx	lr
 801215e:	f803 1b01 	strb.w	r1, [r3], #1
 8012162:	e7f9      	b.n	8012158 <memset+0x4>

08012164 <_calloc_r>:
 8012164:	b513      	push	{r0, r1, r4, lr}
 8012166:	434a      	muls	r2, r1
 8012168:	4611      	mov	r1, r2
 801216a:	9201      	str	r2, [sp, #4]
 801216c:	f000 f85a 	bl	8012224 <_malloc_r>
 8012170:	4604      	mov	r4, r0
 8012172:	b118      	cbz	r0, 801217c <_calloc_r+0x18>
 8012174:	9a01      	ldr	r2, [sp, #4]
 8012176:	2100      	movs	r1, #0
 8012178:	f7ff ffec 	bl	8012154 <memset>
 801217c:	4620      	mov	r0, r4
 801217e:	b002      	add	sp, #8
 8012180:	bd10      	pop	{r4, pc}
	...

08012184 <_free_r>:
 8012184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012186:	2900      	cmp	r1, #0
 8012188:	d048      	beq.n	801221c <_free_r+0x98>
 801218a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801218e:	9001      	str	r0, [sp, #4]
 8012190:	2b00      	cmp	r3, #0
 8012192:	f1a1 0404 	sub.w	r4, r1, #4
 8012196:	bfb8      	it	lt
 8012198:	18e4      	addlt	r4, r4, r3
 801219a:	f001 fd43 	bl	8013c24 <__malloc_lock>
 801219e:	4a20      	ldr	r2, [pc, #128]	; (8012220 <_free_r+0x9c>)
 80121a0:	9801      	ldr	r0, [sp, #4]
 80121a2:	6813      	ldr	r3, [r2, #0]
 80121a4:	4615      	mov	r5, r2
 80121a6:	b933      	cbnz	r3, 80121b6 <_free_r+0x32>
 80121a8:	6063      	str	r3, [r4, #4]
 80121aa:	6014      	str	r4, [r2, #0]
 80121ac:	b003      	add	sp, #12
 80121ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121b2:	f001 bd3d 	b.w	8013c30 <__malloc_unlock>
 80121b6:	42a3      	cmp	r3, r4
 80121b8:	d90b      	bls.n	80121d2 <_free_r+0x4e>
 80121ba:	6821      	ldr	r1, [r4, #0]
 80121bc:	1862      	adds	r2, r4, r1
 80121be:	4293      	cmp	r3, r2
 80121c0:	bf04      	itt	eq
 80121c2:	681a      	ldreq	r2, [r3, #0]
 80121c4:	685b      	ldreq	r3, [r3, #4]
 80121c6:	6063      	str	r3, [r4, #4]
 80121c8:	bf04      	itt	eq
 80121ca:	1852      	addeq	r2, r2, r1
 80121cc:	6022      	streq	r2, [r4, #0]
 80121ce:	602c      	str	r4, [r5, #0]
 80121d0:	e7ec      	b.n	80121ac <_free_r+0x28>
 80121d2:	461a      	mov	r2, r3
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	b10b      	cbz	r3, 80121dc <_free_r+0x58>
 80121d8:	42a3      	cmp	r3, r4
 80121da:	d9fa      	bls.n	80121d2 <_free_r+0x4e>
 80121dc:	6811      	ldr	r1, [r2, #0]
 80121de:	1855      	adds	r5, r2, r1
 80121e0:	42a5      	cmp	r5, r4
 80121e2:	d10b      	bne.n	80121fc <_free_r+0x78>
 80121e4:	6824      	ldr	r4, [r4, #0]
 80121e6:	4421      	add	r1, r4
 80121e8:	1854      	adds	r4, r2, r1
 80121ea:	42a3      	cmp	r3, r4
 80121ec:	6011      	str	r1, [r2, #0]
 80121ee:	d1dd      	bne.n	80121ac <_free_r+0x28>
 80121f0:	681c      	ldr	r4, [r3, #0]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	6053      	str	r3, [r2, #4]
 80121f6:	4421      	add	r1, r4
 80121f8:	6011      	str	r1, [r2, #0]
 80121fa:	e7d7      	b.n	80121ac <_free_r+0x28>
 80121fc:	d902      	bls.n	8012204 <_free_r+0x80>
 80121fe:	230c      	movs	r3, #12
 8012200:	6003      	str	r3, [r0, #0]
 8012202:	e7d3      	b.n	80121ac <_free_r+0x28>
 8012204:	6825      	ldr	r5, [r4, #0]
 8012206:	1961      	adds	r1, r4, r5
 8012208:	428b      	cmp	r3, r1
 801220a:	bf04      	itt	eq
 801220c:	6819      	ldreq	r1, [r3, #0]
 801220e:	685b      	ldreq	r3, [r3, #4]
 8012210:	6063      	str	r3, [r4, #4]
 8012212:	bf04      	itt	eq
 8012214:	1949      	addeq	r1, r1, r5
 8012216:	6021      	streq	r1, [r4, #0]
 8012218:	6054      	str	r4, [r2, #4]
 801221a:	e7c7      	b.n	80121ac <_free_r+0x28>
 801221c:	b003      	add	sp, #12
 801221e:	bd30      	pop	{r4, r5, pc}
 8012220:	20000af8 	.word	0x20000af8

08012224 <_malloc_r>:
 8012224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012226:	1ccd      	adds	r5, r1, #3
 8012228:	f025 0503 	bic.w	r5, r5, #3
 801222c:	3508      	adds	r5, #8
 801222e:	2d0c      	cmp	r5, #12
 8012230:	bf38      	it	cc
 8012232:	250c      	movcc	r5, #12
 8012234:	2d00      	cmp	r5, #0
 8012236:	4606      	mov	r6, r0
 8012238:	db01      	blt.n	801223e <_malloc_r+0x1a>
 801223a:	42a9      	cmp	r1, r5
 801223c:	d903      	bls.n	8012246 <_malloc_r+0x22>
 801223e:	230c      	movs	r3, #12
 8012240:	6033      	str	r3, [r6, #0]
 8012242:	2000      	movs	r0, #0
 8012244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012246:	f001 fced 	bl	8013c24 <__malloc_lock>
 801224a:	4921      	ldr	r1, [pc, #132]	; (80122d0 <_malloc_r+0xac>)
 801224c:	680a      	ldr	r2, [r1, #0]
 801224e:	4614      	mov	r4, r2
 8012250:	b99c      	cbnz	r4, 801227a <_malloc_r+0x56>
 8012252:	4f20      	ldr	r7, [pc, #128]	; (80122d4 <_malloc_r+0xb0>)
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	b923      	cbnz	r3, 8012262 <_malloc_r+0x3e>
 8012258:	4621      	mov	r1, r4
 801225a:	4630      	mov	r0, r6
 801225c:	f000 f8da 	bl	8012414 <_sbrk_r>
 8012260:	6038      	str	r0, [r7, #0]
 8012262:	4629      	mov	r1, r5
 8012264:	4630      	mov	r0, r6
 8012266:	f000 f8d5 	bl	8012414 <_sbrk_r>
 801226a:	1c43      	adds	r3, r0, #1
 801226c:	d123      	bne.n	80122b6 <_malloc_r+0x92>
 801226e:	230c      	movs	r3, #12
 8012270:	6033      	str	r3, [r6, #0]
 8012272:	4630      	mov	r0, r6
 8012274:	f001 fcdc 	bl	8013c30 <__malloc_unlock>
 8012278:	e7e3      	b.n	8012242 <_malloc_r+0x1e>
 801227a:	6823      	ldr	r3, [r4, #0]
 801227c:	1b5b      	subs	r3, r3, r5
 801227e:	d417      	bmi.n	80122b0 <_malloc_r+0x8c>
 8012280:	2b0b      	cmp	r3, #11
 8012282:	d903      	bls.n	801228c <_malloc_r+0x68>
 8012284:	6023      	str	r3, [r4, #0]
 8012286:	441c      	add	r4, r3
 8012288:	6025      	str	r5, [r4, #0]
 801228a:	e004      	b.n	8012296 <_malloc_r+0x72>
 801228c:	6863      	ldr	r3, [r4, #4]
 801228e:	42a2      	cmp	r2, r4
 8012290:	bf0c      	ite	eq
 8012292:	600b      	streq	r3, [r1, #0]
 8012294:	6053      	strne	r3, [r2, #4]
 8012296:	4630      	mov	r0, r6
 8012298:	f001 fcca 	bl	8013c30 <__malloc_unlock>
 801229c:	f104 000b 	add.w	r0, r4, #11
 80122a0:	1d23      	adds	r3, r4, #4
 80122a2:	f020 0007 	bic.w	r0, r0, #7
 80122a6:	1ac2      	subs	r2, r0, r3
 80122a8:	d0cc      	beq.n	8012244 <_malloc_r+0x20>
 80122aa:	1a1b      	subs	r3, r3, r0
 80122ac:	50a3      	str	r3, [r4, r2]
 80122ae:	e7c9      	b.n	8012244 <_malloc_r+0x20>
 80122b0:	4622      	mov	r2, r4
 80122b2:	6864      	ldr	r4, [r4, #4]
 80122b4:	e7cc      	b.n	8012250 <_malloc_r+0x2c>
 80122b6:	1cc4      	adds	r4, r0, #3
 80122b8:	f024 0403 	bic.w	r4, r4, #3
 80122bc:	42a0      	cmp	r0, r4
 80122be:	d0e3      	beq.n	8012288 <_malloc_r+0x64>
 80122c0:	1a21      	subs	r1, r4, r0
 80122c2:	4630      	mov	r0, r6
 80122c4:	f000 f8a6 	bl	8012414 <_sbrk_r>
 80122c8:	3001      	adds	r0, #1
 80122ca:	d1dd      	bne.n	8012288 <_malloc_r+0x64>
 80122cc:	e7cf      	b.n	801226e <_malloc_r+0x4a>
 80122ce:	bf00      	nop
 80122d0:	20000af8 	.word	0x20000af8
 80122d4:	20000afc 	.word	0x20000afc

080122d8 <_open_r>:
 80122d8:	b538      	push	{r3, r4, r5, lr}
 80122da:	4d07      	ldr	r5, [pc, #28]	; (80122f8 <_open_r+0x20>)
 80122dc:	4604      	mov	r4, r0
 80122de:	4608      	mov	r0, r1
 80122e0:	4611      	mov	r1, r2
 80122e2:	2200      	movs	r2, #0
 80122e4:	602a      	str	r2, [r5, #0]
 80122e6:	461a      	mov	r2, r3
 80122e8:	f7ee fdc2 	bl	8000e70 <_open>
 80122ec:	1c43      	adds	r3, r0, #1
 80122ee:	d102      	bne.n	80122f6 <_open_r+0x1e>
 80122f0:	682b      	ldr	r3, [r5, #0]
 80122f2:	b103      	cbz	r3, 80122f6 <_open_r+0x1e>
 80122f4:	6023      	str	r3, [r4, #0]
 80122f6:	bd38      	pop	{r3, r4, r5, pc}
 80122f8:	20000bc4 	.word	0x20000bc4

080122fc <putchar>:
 80122fc:	4b09      	ldr	r3, [pc, #36]	; (8012324 <putchar+0x28>)
 80122fe:	b513      	push	{r0, r1, r4, lr}
 8012300:	681c      	ldr	r4, [r3, #0]
 8012302:	4601      	mov	r1, r0
 8012304:	b134      	cbz	r4, 8012314 <putchar+0x18>
 8012306:	69a3      	ldr	r3, [r4, #24]
 8012308:	b923      	cbnz	r3, 8012314 <putchar+0x18>
 801230a:	9001      	str	r0, [sp, #4]
 801230c:	4620      	mov	r0, r4
 801230e:	f7ff fae9 	bl	80118e4 <__sinit>
 8012312:	9901      	ldr	r1, [sp, #4]
 8012314:	68a2      	ldr	r2, [r4, #8]
 8012316:	4620      	mov	r0, r4
 8012318:	b002      	add	sp, #8
 801231a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801231e:	f002 b8fd 	b.w	801451c <_putc_r>
 8012322:	bf00      	nop
 8012324:	20000100 	.word	0x20000100

08012328 <srand>:
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	4b10      	ldr	r3, [pc, #64]	; (801236c <srand+0x44>)
 801232c:	681d      	ldr	r5, [r3, #0]
 801232e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012330:	4604      	mov	r4, r0
 8012332:	b9b3      	cbnz	r3, 8012362 <srand+0x3a>
 8012334:	2018      	movs	r0, #24
 8012336:	f7ff feef 	bl	8012118 <malloc>
 801233a:	4602      	mov	r2, r0
 801233c:	63a8      	str	r0, [r5, #56]	; 0x38
 801233e:	b920      	cbnz	r0, 801234a <srand+0x22>
 8012340:	4b0b      	ldr	r3, [pc, #44]	; (8012370 <srand+0x48>)
 8012342:	480c      	ldr	r0, [pc, #48]	; (8012374 <srand+0x4c>)
 8012344:	2142      	movs	r1, #66	; 0x42
 8012346:	f001 faa5 	bl	8013894 <__assert_func>
 801234a:	490b      	ldr	r1, [pc, #44]	; (8012378 <srand+0x50>)
 801234c:	4b0b      	ldr	r3, [pc, #44]	; (801237c <srand+0x54>)
 801234e:	e9c0 1300 	strd	r1, r3, [r0]
 8012352:	4b0b      	ldr	r3, [pc, #44]	; (8012380 <srand+0x58>)
 8012354:	6083      	str	r3, [r0, #8]
 8012356:	230b      	movs	r3, #11
 8012358:	8183      	strh	r3, [r0, #12]
 801235a:	2100      	movs	r1, #0
 801235c:	2001      	movs	r0, #1
 801235e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012362:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012364:	2200      	movs	r2, #0
 8012366:	611c      	str	r4, [r3, #16]
 8012368:	615a      	str	r2, [r3, #20]
 801236a:	bd38      	pop	{r3, r4, r5, pc}
 801236c:	20000100 	.word	0x20000100
 8012370:	08017c68 	.word	0x08017c68
 8012374:	08017d40 	.word	0x08017d40
 8012378:	abcd330e 	.word	0xabcd330e
 801237c:	e66d1234 	.word	0xe66d1234
 8012380:	0005deec 	.word	0x0005deec

08012384 <rand>:
 8012384:	4b17      	ldr	r3, [pc, #92]	; (80123e4 <rand+0x60>)
 8012386:	b510      	push	{r4, lr}
 8012388:	681c      	ldr	r4, [r3, #0]
 801238a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801238c:	b9b3      	cbnz	r3, 80123bc <rand+0x38>
 801238e:	2018      	movs	r0, #24
 8012390:	f7ff fec2 	bl	8012118 <malloc>
 8012394:	63a0      	str	r0, [r4, #56]	; 0x38
 8012396:	b928      	cbnz	r0, 80123a4 <rand+0x20>
 8012398:	4602      	mov	r2, r0
 801239a:	4b13      	ldr	r3, [pc, #76]	; (80123e8 <rand+0x64>)
 801239c:	4813      	ldr	r0, [pc, #76]	; (80123ec <rand+0x68>)
 801239e:	214e      	movs	r1, #78	; 0x4e
 80123a0:	f001 fa78 	bl	8013894 <__assert_func>
 80123a4:	4a12      	ldr	r2, [pc, #72]	; (80123f0 <rand+0x6c>)
 80123a6:	4b13      	ldr	r3, [pc, #76]	; (80123f4 <rand+0x70>)
 80123a8:	e9c0 2300 	strd	r2, r3, [r0]
 80123ac:	4b12      	ldr	r3, [pc, #72]	; (80123f8 <rand+0x74>)
 80123ae:	6083      	str	r3, [r0, #8]
 80123b0:	230b      	movs	r3, #11
 80123b2:	8183      	strh	r3, [r0, #12]
 80123b4:	2201      	movs	r2, #1
 80123b6:	2300      	movs	r3, #0
 80123b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80123bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80123be:	480f      	ldr	r0, [pc, #60]	; (80123fc <rand+0x78>)
 80123c0:	690a      	ldr	r2, [r1, #16]
 80123c2:	694b      	ldr	r3, [r1, #20]
 80123c4:	4c0e      	ldr	r4, [pc, #56]	; (8012400 <rand+0x7c>)
 80123c6:	4350      	muls	r0, r2
 80123c8:	fb04 0003 	mla	r0, r4, r3, r0
 80123cc:	fba2 3404 	umull	r3, r4, r2, r4
 80123d0:	1c5a      	adds	r2, r3, #1
 80123d2:	4404      	add	r4, r0
 80123d4:	f144 0000 	adc.w	r0, r4, #0
 80123d8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80123dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80123e0:	bd10      	pop	{r4, pc}
 80123e2:	bf00      	nop
 80123e4:	20000100 	.word	0x20000100
 80123e8:	08017c68 	.word	0x08017c68
 80123ec:	08017d40 	.word	0x08017d40
 80123f0:	abcd330e 	.word	0xabcd330e
 80123f4:	e66d1234 	.word	0xe66d1234
 80123f8:	0005deec 	.word	0x0005deec
 80123fc:	5851f42d 	.word	0x5851f42d
 8012400:	4c957f2d 	.word	0x4c957f2d

08012404 <realloc>:
 8012404:	4b02      	ldr	r3, [pc, #8]	; (8012410 <realloc+0xc>)
 8012406:	460a      	mov	r2, r1
 8012408:	4601      	mov	r1, r0
 801240a:	6818      	ldr	r0, [r3, #0]
 801240c:	f001 bc16 	b.w	8013c3c <_realloc_r>
 8012410:	20000100 	.word	0x20000100

08012414 <_sbrk_r>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	4d06      	ldr	r5, [pc, #24]	; (8012430 <_sbrk_r+0x1c>)
 8012418:	2300      	movs	r3, #0
 801241a:	4604      	mov	r4, r0
 801241c:	4608      	mov	r0, r1
 801241e:	602b      	str	r3, [r5, #0]
 8012420:	f7ee fd34 	bl	8000e8c <_sbrk>
 8012424:	1c43      	adds	r3, r0, #1
 8012426:	d102      	bne.n	801242e <_sbrk_r+0x1a>
 8012428:	682b      	ldr	r3, [r5, #0]
 801242a:	b103      	cbz	r3, 801242e <_sbrk_r+0x1a>
 801242c:	6023      	str	r3, [r4, #0]
 801242e:	bd38      	pop	{r3, r4, r5, pc}
 8012430:	20000bc4 	.word	0x20000bc4

08012434 <_raise_r>:
 8012434:	291f      	cmp	r1, #31
 8012436:	b538      	push	{r3, r4, r5, lr}
 8012438:	4604      	mov	r4, r0
 801243a:	460d      	mov	r5, r1
 801243c:	d904      	bls.n	8012448 <_raise_r+0x14>
 801243e:	2316      	movs	r3, #22
 8012440:	6003      	str	r3, [r0, #0]
 8012442:	f04f 30ff 	mov.w	r0, #4294967295
 8012446:	bd38      	pop	{r3, r4, r5, pc}
 8012448:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801244a:	b112      	cbz	r2, 8012452 <_raise_r+0x1e>
 801244c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012450:	b94b      	cbnz	r3, 8012466 <_raise_r+0x32>
 8012452:	4620      	mov	r0, r4
 8012454:	f000 f830 	bl	80124b8 <_getpid_r>
 8012458:	462a      	mov	r2, r5
 801245a:	4601      	mov	r1, r0
 801245c:	4620      	mov	r0, r4
 801245e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012462:	f000 b817 	b.w	8012494 <_kill_r>
 8012466:	2b01      	cmp	r3, #1
 8012468:	d00a      	beq.n	8012480 <_raise_r+0x4c>
 801246a:	1c59      	adds	r1, r3, #1
 801246c:	d103      	bne.n	8012476 <_raise_r+0x42>
 801246e:	2316      	movs	r3, #22
 8012470:	6003      	str	r3, [r0, #0]
 8012472:	2001      	movs	r0, #1
 8012474:	e7e7      	b.n	8012446 <_raise_r+0x12>
 8012476:	2400      	movs	r4, #0
 8012478:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801247c:	4628      	mov	r0, r5
 801247e:	4798      	blx	r3
 8012480:	2000      	movs	r0, #0
 8012482:	e7e0      	b.n	8012446 <_raise_r+0x12>

08012484 <raise>:
 8012484:	4b02      	ldr	r3, [pc, #8]	; (8012490 <raise+0xc>)
 8012486:	4601      	mov	r1, r0
 8012488:	6818      	ldr	r0, [r3, #0]
 801248a:	f7ff bfd3 	b.w	8012434 <_raise_r>
 801248e:	bf00      	nop
 8012490:	20000100 	.word	0x20000100

08012494 <_kill_r>:
 8012494:	b538      	push	{r3, r4, r5, lr}
 8012496:	4d07      	ldr	r5, [pc, #28]	; (80124b4 <_kill_r+0x20>)
 8012498:	2300      	movs	r3, #0
 801249a:	4604      	mov	r4, r0
 801249c:	4608      	mov	r0, r1
 801249e:	4611      	mov	r1, r2
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	f7ee fc5e 	bl	8000d62 <_kill>
 80124a6:	1c43      	adds	r3, r0, #1
 80124a8:	d102      	bne.n	80124b0 <_kill_r+0x1c>
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	b103      	cbz	r3, 80124b0 <_kill_r+0x1c>
 80124ae:	6023      	str	r3, [r4, #0]
 80124b0:	bd38      	pop	{r3, r4, r5, pc}
 80124b2:	bf00      	nop
 80124b4:	20000bc4 	.word	0x20000bc4

080124b8 <_getpid_r>:
 80124b8:	f7ee bc4b 	b.w	8000d52 <_getpid>

080124bc <__sread>:
 80124bc:	b510      	push	{r4, lr}
 80124be:	460c      	mov	r4, r1
 80124c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124c4:	f002 f872 	bl	80145ac <_read_r>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	bfab      	itete	ge
 80124cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80124ce:	89a3      	ldrhlt	r3, [r4, #12]
 80124d0:	181b      	addge	r3, r3, r0
 80124d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80124d6:	bfac      	ite	ge
 80124d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80124da:	81a3      	strhlt	r3, [r4, #12]
 80124dc:	bd10      	pop	{r4, pc}

080124de <__seofread>:
 80124de:	2000      	movs	r0, #0
 80124e0:	4770      	bx	lr

080124e2 <__swrite>:
 80124e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e6:	461f      	mov	r7, r3
 80124e8:	898b      	ldrh	r3, [r1, #12]
 80124ea:	05db      	lsls	r3, r3, #23
 80124ec:	4605      	mov	r5, r0
 80124ee:	460c      	mov	r4, r1
 80124f0:	4616      	mov	r6, r2
 80124f2:	d505      	bpl.n	8012500 <__swrite+0x1e>
 80124f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124f8:	2302      	movs	r3, #2
 80124fa:	2200      	movs	r2, #0
 80124fc:	f001 fb6e 	bl	8013bdc <_lseek_r>
 8012500:	89a3      	ldrh	r3, [r4, #12]
 8012502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801250a:	81a3      	strh	r3, [r4, #12]
 801250c:	4632      	mov	r2, r6
 801250e:	463b      	mov	r3, r7
 8012510:	4628      	mov	r0, r5
 8012512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012516:	f001 b8d7 	b.w	80136c8 <_write_r>

0801251a <__sseek>:
 801251a:	b510      	push	{r4, lr}
 801251c:	460c      	mov	r4, r1
 801251e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012522:	f001 fb5b 	bl	8013bdc <_lseek_r>
 8012526:	1c43      	adds	r3, r0, #1
 8012528:	89a3      	ldrh	r3, [r4, #12]
 801252a:	bf15      	itete	ne
 801252c:	6560      	strne	r0, [r4, #84]	; 0x54
 801252e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012536:	81a3      	strheq	r3, [r4, #12]
 8012538:	bf18      	it	ne
 801253a:	81a3      	strhne	r3, [r4, #12]
 801253c:	bd10      	pop	{r4, pc}

0801253e <__sclose>:
 801253e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012542:	f001 b9c5 	b.w	80138d0 <_close_r>
	...

08012548 <iso_year_adjust>:
 8012548:	6941      	ldr	r1, [r0, #20]
 801254a:	2900      	cmp	r1, #0
 801254c:	f240 736c 	movw	r3, #1900	; 0x76c
 8012550:	bfa8      	it	ge
 8012552:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8012556:	18ca      	adds	r2, r1, r3
 8012558:	078b      	lsls	r3, r1, #30
 801255a:	d105      	bne.n	8012568 <iso_year_adjust+0x20>
 801255c:	2164      	movs	r1, #100	; 0x64
 801255e:	fb92 f3f1 	sdiv	r3, r2, r1
 8012562:	fb01 2313 	mls	r3, r1, r3, r2
 8012566:	b9db      	cbnz	r3, 80125a0 <iso_year_adjust+0x58>
 8012568:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801256c:	fb92 f3f1 	sdiv	r3, r2, r1
 8012570:	fb01 2313 	mls	r3, r1, r3, r2
 8012574:	fab3 f383 	clz	r3, r3
 8012578:	095b      	lsrs	r3, r3, #5
 801257a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801257e:	0040      	lsls	r0, r0, #1
 8012580:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8012584:	4418      	add	r0, r3
 8012586:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801258a:	4298      	cmp	r0, r3
 801258c:	d03a      	beq.n	8012604 <iso_year_adjust+0xbc>
 801258e:	dc21      	bgt.n	80125d4 <iso_year_adjust+0x8c>
 8012590:	2801      	cmp	r0, #1
 8012592:	dc1a      	bgt.n	80125ca <iso_year_adjust+0x82>
 8012594:	2800      	cmp	r0, #0
 8012596:	bfb4      	ite	lt
 8012598:	2000      	movlt	r0, #0
 801259a:	f04f 30ff 	movge.w	r0, #4294967295
 801259e:	4770      	bx	lr
 80125a0:	2301      	movs	r3, #1
 80125a2:	e7ea      	b.n	801257a <iso_year_adjust+0x32>
 80125a4:	2817      	cmp	r0, #23
 80125a6:	d813      	bhi.n	80125d0 <iso_year_adjust+0x88>
 80125a8:	e8df f000 	tbb	[pc, r0]
 80125ac:	0c0c0c0c 	.word	0x0c0c0c0c
 80125b0:	0c0c1212 	.word	0x0c0c1212
 80125b4:	12121212 	.word	0x12121212
 80125b8:	12121212 	.word	0x12121212
 80125bc:	0c0c1212 	.word	0x0c0c1212
 80125c0:	0c0c1212 	.word	0x0c0c1212
 80125c4:	f04f 30ff 	mov.w	r0, #4294967295
 80125c8:	4770      	bx	lr
 80125ca:	380a      	subs	r0, #10
 80125cc:	2817      	cmp	r0, #23
 80125ce:	d9e9      	bls.n	80125a4 <iso_year_adjust+0x5c>
 80125d0:	2000      	movs	r0, #0
 80125d2:	4770      	bx	lr
 80125d4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80125d8:	4298      	cmp	r0, r3
 80125da:	dc06      	bgt.n	80125ea <iso_year_adjust+0xa2>
 80125dc:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80125e0:	4298      	cmp	r0, r3
 80125e2:	bfd4      	ite	le
 80125e4:	2000      	movle	r0, #0
 80125e6:	2001      	movgt	r0, #1
 80125e8:	4770      	bx	lr
 80125ea:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80125ee:	3802      	subs	r0, #2
 80125f0:	2815      	cmp	r0, #21
 80125f2:	d8ed      	bhi.n	80125d0 <iso_year_adjust+0x88>
 80125f4:	2301      	movs	r3, #1
 80125f6:	4083      	lsls	r3, r0
 80125f8:	4803      	ldr	r0, [pc, #12]	; (8012608 <iso_year_adjust+0xc0>)
 80125fa:	4018      	ands	r0, r3
 80125fc:	3800      	subs	r0, #0
 80125fe:	bf18      	it	ne
 8012600:	2001      	movne	r0, #1
 8012602:	4770      	bx	lr
 8012604:	2001      	movs	r0, #1
 8012606:	4770      	bx	lr
 8012608:	002a001f 	.word	0x002a001f

0801260c <__strftime>:
 801260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012610:	b091      	sub	sp, #68	; 0x44
 8012612:	461d      	mov	r5, r3
 8012614:	2300      	movs	r3, #0
 8012616:	4681      	mov	r9, r0
 8012618:	4688      	mov	r8, r1
 801261a:	9304      	str	r3, [sp, #16]
 801261c:	461c      	mov	r4, r3
 801261e:	7813      	ldrb	r3, [r2, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	f000 84d1 	beq.w	8012fc8 <__strftime+0x9bc>
 8012626:	2b25      	cmp	r3, #37	; 0x25
 8012628:	d11b      	bne.n	8012662 <__strftime+0x56>
 801262a:	7857      	ldrb	r7, [r2, #1]
 801262c:	2f30      	cmp	r7, #48	; 0x30
 801262e:	d024      	beq.n	801267a <__strftime+0x6e>
 8012630:	2f2b      	cmp	r7, #43	; 0x2b
 8012632:	d022      	beq.n	801267a <__strftime+0x6e>
 8012634:	f102 0b01 	add.w	fp, r2, #1
 8012638:	2700      	movs	r7, #0
 801263a:	f89b 3000 	ldrb.w	r3, [fp]
 801263e:	3b31      	subs	r3, #49	; 0x31
 8012640:	2b08      	cmp	r3, #8
 8012642:	d81d      	bhi.n	8012680 <__strftime+0x74>
 8012644:	4658      	mov	r0, fp
 8012646:	220a      	movs	r2, #10
 8012648:	a908      	add	r1, sp, #32
 801264a:	f000 fd57 	bl	80130fc <strtoul>
 801264e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8012652:	4606      	mov	r6, r0
 8012654:	f89b 3000 	ldrb.w	r3, [fp]
 8012658:	2b45      	cmp	r3, #69	; 0x45
 801265a:	d113      	bne.n	8012684 <__strftime+0x78>
 801265c:	f10b 0b01 	add.w	fp, fp, #1
 8012660:	e012      	b.n	8012688 <__strftime+0x7c>
 8012662:	f108 31ff 	add.w	r1, r8, #4294967295
 8012666:	42a1      	cmp	r1, r4
 8012668:	d802      	bhi.n	8012670 <__strftime+0x64>
 801266a:	2400      	movs	r4, #0
 801266c:	f000 bcb2 	b.w	8012fd4 <__strftime+0x9c8>
 8012670:	f809 3004 	strb.w	r3, [r9, r4]
 8012674:	3201      	adds	r2, #1
 8012676:	3401      	adds	r4, #1
 8012678:	e7d1      	b.n	801261e <__strftime+0x12>
 801267a:	f102 0b02 	add.w	fp, r2, #2
 801267e:	e7dc      	b.n	801263a <__strftime+0x2e>
 8012680:	2600      	movs	r6, #0
 8012682:	e7e7      	b.n	8012654 <__strftime+0x48>
 8012684:	2b4f      	cmp	r3, #79	; 0x4f
 8012686:	d0e9      	beq.n	801265c <__strftime+0x50>
 8012688:	f89b 0000 	ldrb.w	r0, [fp]
 801268c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8012690:	2b55      	cmp	r3, #85	; 0x55
 8012692:	d8ea      	bhi.n	801266a <__strftime+0x5e>
 8012694:	a201      	add	r2, pc, #4	; (adr r2, 801269c <__strftime+0x90>)
 8012696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801269a:	bf00      	nop
 801269c:	08012fbb 	.word	0x08012fbb
 80126a0:	0801266b 	.word	0x0801266b
 80126a4:	0801266b 	.word	0x0801266b
 80126a8:	0801266b 	.word	0x0801266b
 80126ac:	0801266b 	.word	0x0801266b
 80126b0:	0801266b 	.word	0x0801266b
 80126b4:	0801266b 	.word	0x0801266b
 80126b8:	0801266b 	.word	0x0801266b
 80126bc:	0801266b 	.word	0x0801266b
 80126c0:	0801266b 	.word	0x0801266b
 80126c4:	0801266b 	.word	0x0801266b
 80126c8:	0801266b 	.word	0x0801266b
 80126cc:	0801266b 	.word	0x0801266b
 80126d0:	0801266b 	.word	0x0801266b
 80126d4:	0801266b 	.word	0x0801266b
 80126d8:	0801266b 	.word	0x0801266b
 80126dc:	0801266b 	.word	0x0801266b
 80126e0:	0801266b 	.word	0x0801266b
 80126e4:	0801266b 	.word	0x0801266b
 80126e8:	0801266b 	.word	0x0801266b
 80126ec:	0801266b 	.word	0x0801266b
 80126f0:	0801266b 	.word	0x0801266b
 80126f4:	0801266b 	.word	0x0801266b
 80126f8:	0801266b 	.word	0x0801266b
 80126fc:	0801266b 	.word	0x0801266b
 8012700:	0801266b 	.word	0x0801266b
 8012704:	0801266b 	.word	0x0801266b
 8012708:	0801266b 	.word	0x0801266b
 801270c:	08012833 	.word	0x08012833
 8012710:	0801288d 	.word	0x0801288d
 8012714:	08012903 	.word	0x08012903
 8012718:	0801299d 	.word	0x0801299d
 801271c:	0801266b 	.word	0x0801266b
 8012720:	080129e9 	.word	0x080129e9
 8012724:	08012ac9 	.word	0x08012ac9
 8012728:	08012bcb 	.word	0x08012bcb
 801272c:	08012bd9 	.word	0x08012bd9
 8012730:	0801266b 	.word	0x0801266b
 8012734:	0801266b 	.word	0x0801266b
 8012738:	0801266b 	.word	0x0801266b
 801273c:	08012c09 	.word	0x08012c09
 8012740:	0801266b 	.word	0x0801266b
 8012744:	0801266b 	.word	0x0801266b
 8012748:	08012c21 	.word	0x08012c21
 801274c:	0801266b 	.word	0x0801266b
 8012750:	08012c6f 	.word	0x08012c6f
 8012754:	08012d85 	.word	0x08012d85
 8012758:	08012d97 	.word	0x08012d97
 801275c:	08012def 	.word	0x08012def
 8012760:	08012dff 	.word	0x08012dff
 8012764:	08012e75 	.word	0x08012e75
 8012768:	080128fb 	.word	0x080128fb
 801276c:	08012ea9 	.word	0x08012ea9
 8012770:	08012f67 	.word	0x08012f67
 8012774:	0801266b 	.word	0x0801266b
 8012778:	0801266b 	.word	0x0801266b
 801277c:	0801266b 	.word	0x0801266b
 8012780:	0801266b 	.word	0x0801266b
 8012784:	0801266b 	.word	0x0801266b
 8012788:	0801266b 	.word	0x0801266b
 801278c:	080127f5 	.word	0x080127f5
 8012790:	08012861 	.word	0x08012861
 8012794:	080128bb 	.word	0x080128bb
 8012798:	08012975 	.word	0x08012975
 801279c:	08012975 	.word	0x08012975
 80127a0:	0801266b 	.word	0x0801266b
 80127a4:	08012a31 	.word	0x08012a31
 80127a8:	08012861 	.word	0x08012861
 80127ac:	0801266b 	.word	0x0801266b
 80127b0:	08012bfb 	.word	0x08012bfb
 80127b4:	08012bcb 	.word	0x08012bcb
 80127b8:	08012bd9 	.word	0x08012bd9
 80127bc:	08012c03 	.word	0x08012c03
 80127c0:	08012c0d 	.word	0x08012c0d
 80127c4:	0801266b 	.word	0x0801266b
 80127c8:	08012c21 	.word	0x08012c21
 80127cc:	0801266b 	.word	0x0801266b
 80127d0:	080128eb 	.word	0x080128eb
 80127d4:	08012c85 	.word	0x08012c85
 80127d8:	08012d89 	.word	0x08012d89
 80127dc:	08012dd1 	.word	0x08012dd1
 80127e0:	0801266b 	.word	0x0801266b
 80127e4:	08012e65 	.word	0x08012e65
 80127e8:	080128f3 	.word	0x080128f3
 80127ec:	08012e8d 	.word	0x08012e8d
 80127f0:	08012ef9 	.word	0x08012ef9
 80127f4:	69ab      	ldr	r3, [r5, #24]
 80127f6:	4aa7      	ldr	r2, [pc, #668]	; (8012a94 <__strftime+0x488>)
 80127f8:	3318      	adds	r3, #24
 80127fa:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80127fe:	4630      	mov	r0, r6
 8012800:	f7ed fd1c 	bl	800023c <strlen>
 8012804:	3e01      	subs	r6, #1
 8012806:	4420      	add	r0, r4
 8012808:	f108 33ff 	add.w	r3, r8, #4294967295
 801280c:	42a0      	cmp	r0, r4
 801280e:	d107      	bne.n	8012820 <__strftime+0x214>
 8012810:	f89b 3000 	ldrb.w	r3, [fp]
 8012814:	2b00      	cmp	r3, #0
 8012816:	f000 83d7 	beq.w	8012fc8 <__strftime+0x9bc>
 801281a:	f10b 0201 	add.w	r2, fp, #1
 801281e:	e6fe      	b.n	801261e <__strftime+0x12>
 8012820:	42a3      	cmp	r3, r4
 8012822:	f67f af22 	bls.w	801266a <__strftime+0x5e>
 8012826:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801282a:	f809 2004 	strb.w	r2, [r9, r4]
 801282e:	3401      	adds	r4, #1
 8012830:	e7ec      	b.n	801280c <__strftime+0x200>
 8012832:	69aa      	ldr	r2, [r5, #24]
 8012834:	4b97      	ldr	r3, [pc, #604]	; (8012a94 <__strftime+0x488>)
 8012836:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801283a:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801283c:	4630      	mov	r0, r6
 801283e:	f7ed fcfd 	bl	800023c <strlen>
 8012842:	3e01      	subs	r6, #1
 8012844:	4420      	add	r0, r4
 8012846:	f108 33ff 	add.w	r3, r8, #4294967295
 801284a:	42a0      	cmp	r0, r4
 801284c:	d0e0      	beq.n	8012810 <__strftime+0x204>
 801284e:	42a3      	cmp	r3, r4
 8012850:	f67f af0b 	bls.w	801266a <__strftime+0x5e>
 8012854:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012858:	f809 2004 	strb.w	r2, [r9, r4]
 801285c:	3401      	adds	r4, #1
 801285e:	e7f4      	b.n	801284a <__strftime+0x23e>
 8012860:	4b8c      	ldr	r3, [pc, #560]	; (8012a94 <__strftime+0x488>)
 8012862:	692a      	ldr	r2, [r5, #16]
 8012864:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012868:	4630      	mov	r0, r6
 801286a:	f7ed fce7 	bl	800023c <strlen>
 801286e:	3e01      	subs	r6, #1
 8012870:	4420      	add	r0, r4
 8012872:	f108 33ff 	add.w	r3, r8, #4294967295
 8012876:	42a0      	cmp	r0, r4
 8012878:	d0ca      	beq.n	8012810 <__strftime+0x204>
 801287a:	42a3      	cmp	r3, r4
 801287c:	f67f aef5 	bls.w	801266a <__strftime+0x5e>
 8012880:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012884:	f809 2004 	strb.w	r2, [r9, r4]
 8012888:	3401      	adds	r4, #1
 801288a:	e7f4      	b.n	8012876 <__strftime+0x26a>
 801288c:	692b      	ldr	r3, [r5, #16]
 801288e:	4a81      	ldr	r2, [pc, #516]	; (8012a94 <__strftime+0x488>)
 8012890:	330c      	adds	r3, #12
 8012892:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8012896:	4630      	mov	r0, r6
 8012898:	f7ed fcd0 	bl	800023c <strlen>
 801289c:	3e01      	subs	r6, #1
 801289e:	4420      	add	r0, r4
 80128a0:	f108 33ff 	add.w	r3, r8, #4294967295
 80128a4:	42a0      	cmp	r0, r4
 80128a6:	d0b3      	beq.n	8012810 <__strftime+0x204>
 80128a8:	42a3      	cmp	r3, r4
 80128aa:	f67f aede 	bls.w	801266a <__strftime+0x5e>
 80128ae:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80128b2:	f809 2004 	strb.w	r2, [r9, r4]
 80128b6:	3401      	adds	r4, #1
 80128b8:	e7f4      	b.n	80128a4 <__strftime+0x298>
 80128ba:	4b76      	ldr	r3, [pc, #472]	; (8012a94 <__strftime+0x488>)
 80128bc:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80128c0:	4630      	mov	r0, r6
 80128c2:	f7ed fcbb 	bl	800023c <strlen>
 80128c6:	7833      	ldrb	r3, [r6, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d0a1      	beq.n	8012810 <__strftime+0x204>
 80128cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	4632      	mov	r2, r6
 80128d2:	462b      	mov	r3, r5
 80128d4:	eba8 0104 	sub.w	r1, r8, r4
 80128d8:	eb09 0004 	add.w	r0, r9, r4
 80128dc:	f7ff fe96 	bl	801260c <__strftime>
 80128e0:	2800      	cmp	r0, #0
 80128e2:	f77f aec2 	ble.w	801266a <__strftime+0x5e>
 80128e6:	4404      	add	r4, r0
 80128e8:	e792      	b.n	8012810 <__strftime+0x204>
 80128ea:	4b6a      	ldr	r3, [pc, #424]	; (8012a94 <__strftime+0x488>)
 80128ec:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 80128f0:	e7e6      	b.n	80128c0 <__strftime+0x2b4>
 80128f2:	4b68      	ldr	r3, [pc, #416]	; (8012a94 <__strftime+0x488>)
 80128f4:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80128f8:	e7e2      	b.n	80128c0 <__strftime+0x2b4>
 80128fa:	4b66      	ldr	r3, [pc, #408]	; (8012a94 <__strftime+0x488>)
 80128fc:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8012900:	e7de      	b.n	80128c0 <__strftime+0x2b4>
 8012902:	4965      	ldr	r1, [pc, #404]	; (8012a98 <__strftime+0x48c>)
 8012904:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8012908:	458a      	cmp	sl, r1
 801290a:	bfac      	ite	ge
 801290c:	2100      	movge	r1, #0
 801290e:	2101      	movlt	r1, #1
 8012910:	f1ba 0f00 	cmp.w	sl, #0
 8012914:	db0e      	blt.n	8012934 <__strftime+0x328>
 8012916:	2064      	movs	r0, #100	; 0x64
 8012918:	fb9a f0f0 	sdiv	r0, sl, r0
 801291c:	3013      	adds	r0, #19
 801291e:	b19f      	cbz	r7, 8012948 <__strftime+0x33c>
 8012920:	2863      	cmp	r0, #99	; 0x63
 8012922:	dd25      	ble.n	8012970 <__strftime+0x364>
 8012924:	4a5d      	ldr	r2, [pc, #372]	; (8012a9c <__strftime+0x490>)
 8012926:	4b5e      	ldr	r3, [pc, #376]	; (8012aa0 <__strftime+0x494>)
 8012928:	2f2b      	cmp	r7, #43	; 0x2b
 801292a:	bf14      	ite	ne
 801292c:	4617      	movne	r7, r2
 801292e:	461f      	moveq	r7, r3
 8012930:	4a5c      	ldr	r2, [pc, #368]	; (8012aa4 <__strftime+0x498>)
 8012932:	e00b      	b.n	801294c <__strftime+0x340>
 8012934:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8012938:	9105      	str	r1, [sp, #20]
 801293a:	f000 ffa7 	bl	801388c <abs>
 801293e:	2364      	movs	r3, #100	; 0x64
 8012940:	9905      	ldr	r1, [sp, #20]
 8012942:	fb90 f0f3 	sdiv	r0, r0, r3
 8012946:	e7ea      	b.n	801291e <__strftime+0x312>
 8012948:	4f54      	ldr	r7, [pc, #336]	; (8012a9c <__strftime+0x490>)
 801294a:	4a57      	ldr	r2, [pc, #348]	; (8012aa8 <__strftime+0x49c>)
 801294c:	4b57      	ldr	r3, [pc, #348]	; (8012aac <__strftime+0x4a0>)
 801294e:	9001      	str	r0, [sp, #4]
 8012950:	2e02      	cmp	r6, #2
 8012952:	bf2c      	ite	cs
 8012954:	ebc1 0606 	rsbcs	r6, r1, r6
 8012958:	f1c1 0602 	rsbcc	r6, r1, #2
 801295c:	494e      	ldr	r1, [pc, #312]	; (8012a98 <__strftime+0x48c>)
 801295e:	9600      	str	r6, [sp, #0]
 8012960:	458a      	cmp	sl, r1
 8012962:	bfa8      	it	ge
 8012964:	463b      	movge	r3, r7
 8012966:	eba8 0104 	sub.w	r1, r8, r4
 801296a:	eb09 0004 	add.w	r0, r9, r4
 801296e:	e02a      	b.n	80129c6 <__strftime+0x3ba>
 8012970:	4f4a      	ldr	r7, [pc, #296]	; (8012a9c <__strftime+0x490>)
 8012972:	e7dd      	b.n	8012930 <__strftime+0x324>
 8012974:	494e      	ldr	r1, [pc, #312]	; (8012ab0 <__strftime+0x4a4>)
 8012976:	4a4f      	ldr	r2, [pc, #316]	; (8012ab4 <__strftime+0x4a8>)
 8012978:	68eb      	ldr	r3, [r5, #12]
 801297a:	2864      	cmp	r0, #100	; 0x64
 801297c:	bf08      	it	eq
 801297e:	460a      	moveq	r2, r1
 8012980:	eba8 0104 	sub.w	r1, r8, r4
 8012984:	eb09 0004 	add.w	r0, r9, r4
 8012988:	f001 fe22 	bl	80145d0 <sniprintf>
 801298c:	2800      	cmp	r0, #0
 801298e:	f6ff ae6c 	blt.w	801266a <__strftime+0x5e>
 8012992:	4404      	add	r4, r0
 8012994:	45a0      	cmp	r8, r4
 8012996:	f63f af3b 	bhi.w	8012810 <__strftime+0x204>
 801299a:	e666      	b.n	801266a <__strftime+0x5e>
 801299c:	6968      	ldr	r0, [r5, #20]
 801299e:	692b      	ldr	r3, [r5, #16]
 80129a0:	68ef      	ldr	r7, [r5, #12]
 80129a2:	2800      	cmp	r0, #0
 80129a4:	eb09 0604 	add.w	r6, r9, r4
 80129a8:	eba8 0104 	sub.w	r1, r8, r4
 80129ac:	f103 0301 	add.w	r3, r3, #1
 80129b0:	db0c      	blt.n	80129cc <__strftime+0x3c0>
 80129b2:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80129b6:	fb90 f2fc 	sdiv	r2, r0, ip
 80129ba:	fb0c 0212 	mls	r2, ip, r2, r0
 80129be:	e9cd 7200 	strd	r7, r2, [sp]
 80129c2:	4a3d      	ldr	r2, [pc, #244]	; (8012ab8 <__strftime+0x4ac>)
 80129c4:	4630      	mov	r0, r6
 80129c6:	f001 fe03 	bl	80145d0 <sniprintf>
 80129ca:	e7df      	b.n	801298c <__strftime+0x380>
 80129cc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80129d0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80129d4:	f000 ff5a 	bl	801388c <abs>
 80129d8:	2264      	movs	r2, #100	; 0x64
 80129da:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80129de:	fb90 fcf2 	sdiv	ip, r0, r2
 80129e2:	fb0c 0212 	mls	r2, ip, r2, r0
 80129e6:	e7ea      	b.n	80129be <__strftime+0x3b2>
 80129e8:	2325      	movs	r3, #37	; 0x25
 80129ea:	f88d 3020 	strb.w	r3, [sp, #32]
 80129ee:	b187      	cbz	r7, 8012a12 <__strftime+0x406>
 80129f0:	2e06      	cmp	r6, #6
 80129f2:	bf38      	it	cc
 80129f4:	2606      	movcc	r6, #6
 80129f6:	1fb3      	subs	r3, r6, #6
 80129f8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80129fc:	d10c      	bne.n	8012a18 <__strftime+0x40c>
 80129fe:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8012a02:	492e      	ldr	r1, [pc, #184]	; (8012abc <__strftime+0x4b0>)
 8012a04:	f001 fe44 	bl	8014690 <strcpy>
 8012a08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	aa08      	add	r2, sp, #32
 8012a0e:	462b      	mov	r3, r5
 8012a10:	e760      	b.n	80128d4 <__strftime+0x2c8>
 8012a12:	272b      	movs	r7, #43	; 0x2b
 8012a14:	260a      	movs	r6, #10
 8012a16:	e7ee      	b.n	80129f6 <__strftime+0x3ea>
 8012a18:	4a29      	ldr	r2, [pc, #164]	; (8012ac0 <__strftime+0x4b4>)
 8012a1a:	211e      	movs	r1, #30
 8012a1c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8012a20:	f001 fdd6 	bl	80145d0 <sniprintf>
 8012a24:	2800      	cmp	r0, #0
 8012a26:	ddea      	ble.n	80129fe <__strftime+0x3f2>
 8012a28:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8012a2c:	4418      	add	r0, r3
 8012a2e:	e7e8      	b.n	8012a02 <__strftime+0x3f6>
 8012a30:	4628      	mov	r0, r5
 8012a32:	f7ff fd89 	bl	8012548 <iso_year_adjust>
 8012a36:	4606      	mov	r6, r0
 8012a38:	6968      	ldr	r0, [r5, #20]
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	db11      	blt.n	8012a62 <__strftime+0x456>
 8012a3e:	2264      	movs	r2, #100	; 0x64
 8012a40:	fb90 f3f2 	sdiv	r3, r0, r2
 8012a44:	fb02 0313 	mls	r3, r2, r3, r0
 8012a48:	441e      	add	r6, r3
 8012a4a:	2364      	movs	r3, #100	; 0x64
 8012a4c:	fb96 f0f3 	sdiv	r0, r6, r3
 8012a50:	fb03 6610 	mls	r6, r3, r0, r6
 8012a54:	441e      	add	r6, r3
 8012a56:	fbb6 f2f3 	udiv	r2, r6, r3
 8012a5a:	fb03 6312 	mls	r3, r3, r2, r6
 8012a5e:	4a14      	ldr	r2, [pc, #80]	; (8012ab0 <__strftime+0x4a4>)
 8012a60:	e78e      	b.n	8012980 <__strftime+0x374>
 8012a62:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012a66:	f000 ff11 	bl	801388c <abs>
 8012a6a:	2364      	movs	r3, #100	; 0x64
 8012a6c:	2e00      	cmp	r6, #0
 8012a6e:	fb90 f2f3 	sdiv	r2, r0, r3
 8012a72:	fb02 0313 	mls	r3, r2, r3, r0
 8012a76:	da05      	bge.n	8012a84 <__strftime+0x478>
 8012a78:	6969      	ldr	r1, [r5, #20]
 8012a7a:	4a12      	ldr	r2, [pc, #72]	; (8012ac4 <__strftime+0x4b8>)
 8012a7c:	4291      	cmp	r1, r2
 8012a7e:	bfb8      	it	lt
 8012a80:	2601      	movlt	r6, #1
 8012a82:	e7e1      	b.n	8012a48 <__strftime+0x43c>
 8012a84:	d0e0      	beq.n	8012a48 <__strftime+0x43c>
 8012a86:	6969      	ldr	r1, [r5, #20]
 8012a88:	4a03      	ldr	r2, [pc, #12]	; (8012a98 <__strftime+0x48c>)
 8012a8a:	4291      	cmp	r1, r2
 8012a8c:	bfb8      	it	lt
 8012a8e:	f04f 36ff 	movlt.w	r6, #4294967295
 8012a92:	e7d9      	b.n	8012a48 <__strftime+0x43c>
 8012a94:	08017f24 	.word	0x08017f24
 8012a98:	fffff894 	.word	0xfffff894
 8012a9c:	08018097 	.word	0x08018097
 8012aa0:	08017dae 	.word	0x08017dae
 8012aa4:	08017da6 	.word	0x08017da6
 8012aa8:	08017d9f 	.word	0x08017d9f
 8012aac:	080181d7 	.word	0x080181d7
 8012ab0:	08017dbe 	.word	0x08017dbe
 8012ab4:	08017db0 	.word	0x08017db0
 8012ab8:	08017db4 	.word	0x08017db4
 8012abc:	08017dc7 	.word	0x08017dc7
 8012ac0:	08017dc3 	.word	0x08017dc3
 8012ac4:	fffff895 	.word	0xfffff895
 8012ac8:	4bb6      	ldr	r3, [pc, #728]	; (8012da4 <__strftime+0x798>)
 8012aca:	6969      	ldr	r1, [r5, #20]
 8012acc:	4299      	cmp	r1, r3
 8012ace:	bfac      	ite	ge
 8012ad0:	2300      	movge	r3, #0
 8012ad2:	2301      	movlt	r3, #1
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8012ada:	f7ff fd35 	bl	8012548 <iso_year_adjust>
 8012ade:	9906      	ldr	r1, [sp, #24]
 8012ae0:	2900      	cmp	r1, #0
 8012ae2:	4682      	mov	sl, r0
 8012ae4:	db27      	blt.n	8012b36 <__strftime+0x52a>
 8012ae6:	2264      	movs	r2, #100	; 0x64
 8012ae8:	fb91 f2f2 	sdiv	r2, r1, r2
 8012aec:	3213      	adds	r2, #19
 8012aee:	6968      	ldr	r0, [r5, #20]
 8012af0:	2800      	cmp	r0, #0
 8012af2:	db2b      	blt.n	8012b4c <__strftime+0x540>
 8012af4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012af8:	fb90 fefc 	sdiv	lr, r0, ip
 8012afc:	fb0c 001e 	mls	r0, ip, lr, r0
 8012b00:	f1ba 0f00 	cmp.w	sl, #0
 8012b04:	da31      	bge.n	8012b6a <__strftime+0x55e>
 8012b06:	6969      	ldr	r1, [r5, #20]
 8012b08:	4ba7      	ldr	r3, [pc, #668]	; (8012da8 <__strftime+0x79c>)
 8012b0a:	4299      	cmp	r1, r3
 8012b0c:	db38      	blt.n	8012b80 <__strftime+0x574>
 8012b0e:	eb0a 0300 	add.w	r3, sl, r0
 8012b12:	1c59      	adds	r1, r3, #1
 8012b14:	d139      	bne.n	8012b8a <__strftime+0x57e>
 8012b16:	3a01      	subs	r2, #1
 8012b18:	2363      	movs	r3, #99	; 0x63
 8012b1a:	2064      	movs	r0, #100	; 0x64
 8012b1c:	fb00 3202 	mla	r2, r0, r2, r3
 8012b20:	9b05      	ldr	r3, [sp, #20]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d036      	beq.n	8012b94 <__strftime+0x588>
 8012b26:	232d      	movs	r3, #45	; 0x2d
 8012b28:	f88d 3020 	strb.w	r3, [sp, #32]
 8012b2c:	b106      	cbz	r6, 8012b30 <__strftime+0x524>
 8012b2e:	3e01      	subs	r6, #1
 8012b30:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8012b34:	e038      	b.n	8012ba8 <__strftime+0x59c>
 8012b36:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8012b3a:	9106      	str	r1, [sp, #24]
 8012b3c:	f000 fea6 	bl	801388c <abs>
 8012b40:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012b44:	9906      	ldr	r1, [sp, #24]
 8012b46:	fb90 f2fc 	sdiv	r2, r0, ip
 8012b4a:	e7d0      	b.n	8012aee <__strftime+0x4e2>
 8012b4c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012b50:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012b54:	f000 fe9a 	bl	801388c <abs>
 8012b58:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012b5c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012b60:	fb90 fefc 	sdiv	lr, r0, ip
 8012b64:	fb0e 001c 	mls	r0, lr, ip, r0
 8012b68:	e7ca      	b.n	8012b00 <__strftime+0x4f4>
 8012b6a:	d0d0      	beq.n	8012b0e <__strftime+0x502>
 8012b6c:	4b8d      	ldr	r3, [pc, #564]	; (8012da4 <__strftime+0x798>)
 8012b6e:	4299      	cmp	r1, r3
 8012b70:	bfb4      	ite	lt
 8012b72:	2301      	movlt	r3, #1
 8012b74:	2300      	movge	r3, #0
 8012b76:	9305      	str	r3, [sp, #20]
 8012b78:	bfb8      	it	lt
 8012b7a:	f04f 3aff 	movlt.w	sl, #4294967295
 8012b7e:	e7c6      	b.n	8012b0e <__strftime+0x502>
 8012b80:	f04f 0a01 	mov.w	sl, #1
 8012b84:	f8cd a014 	str.w	sl, [sp, #20]
 8012b88:	e7c1      	b.n	8012b0e <__strftime+0x502>
 8012b8a:	2b64      	cmp	r3, #100	; 0x64
 8012b8c:	bf04      	itt	eq
 8012b8e:	3201      	addeq	r2, #1
 8012b90:	2300      	moveq	r3, #0
 8012b92:	e7c2      	b.n	8012b1a <__strftime+0x50e>
 8012b94:	2f2b      	cmp	r7, #43	; 0x2b
 8012b96:	d106      	bne.n	8012ba6 <__strftime+0x59a>
 8012b98:	f242 730f 	movw	r3, #9999	; 0x270f
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d902      	bls.n	8012ba6 <__strftime+0x59a>
 8012ba0:	f88d 7020 	strb.w	r7, [sp, #32]
 8012ba4:	e7c2      	b.n	8012b2c <__strftime+0x520>
 8012ba6:	ab08      	add	r3, sp, #32
 8012ba8:	2125      	movs	r1, #37	; 0x25
 8012baa:	7019      	strb	r1, [r3, #0]
 8012bac:	b94f      	cbnz	r7, 8012bc2 <__strftime+0x5b6>
 8012bae:	1c58      	adds	r0, r3, #1
 8012bb0:	497e      	ldr	r1, [pc, #504]	; (8012dac <__strftime+0x7a0>)
 8012bb2:	9205      	str	r2, [sp, #20]
 8012bb4:	f001 fd6c 	bl	8014690 <strcpy>
 8012bb8:	9a05      	ldr	r2, [sp, #20]
 8012bba:	9200      	str	r2, [sp, #0]
 8012bbc:	4633      	mov	r3, r6
 8012bbe:	aa08      	add	r2, sp, #32
 8012bc0:	e059      	b.n	8012c76 <__strftime+0x66a>
 8012bc2:	2130      	movs	r1, #48	; 0x30
 8012bc4:	1c98      	adds	r0, r3, #2
 8012bc6:	7059      	strb	r1, [r3, #1]
 8012bc8:	e7f2      	b.n	8012bb0 <__strftime+0x5a4>
 8012bca:	4979      	ldr	r1, [pc, #484]	; (8012db0 <__strftime+0x7a4>)
 8012bcc:	4a79      	ldr	r2, [pc, #484]	; (8012db4 <__strftime+0x7a8>)
 8012bce:	68ab      	ldr	r3, [r5, #8]
 8012bd0:	286b      	cmp	r0, #107	; 0x6b
 8012bd2:	bf08      	it	eq
 8012bd4:	460a      	moveq	r2, r1
 8012bd6:	e6d3      	b.n	8012980 <__strftime+0x374>
 8012bd8:	68ab      	ldr	r3, [r5, #8]
 8012bda:	b163      	cbz	r3, 8012bf6 <__strftime+0x5ea>
 8012bdc:	2b0c      	cmp	r3, #12
 8012bde:	d004      	beq.n	8012bea <__strftime+0x5de>
 8012be0:	210c      	movs	r1, #12
 8012be2:	fb93 f2f1 	sdiv	r2, r3, r1
 8012be6:	fb01 3312 	mls	r3, r1, r2, r3
 8012bea:	4972      	ldr	r1, [pc, #456]	; (8012db4 <__strftime+0x7a8>)
 8012bec:	4a70      	ldr	r2, [pc, #448]	; (8012db0 <__strftime+0x7a4>)
 8012bee:	2849      	cmp	r0, #73	; 0x49
 8012bf0:	bf08      	it	eq
 8012bf2:	460a      	moveq	r2, r1
 8012bf4:	e6c4      	b.n	8012980 <__strftime+0x374>
 8012bf6:	230c      	movs	r3, #12
 8012bf8:	e7f7      	b.n	8012bea <__strftime+0x5de>
 8012bfa:	69eb      	ldr	r3, [r5, #28]
 8012bfc:	4a6e      	ldr	r2, [pc, #440]	; (8012db8 <__strftime+0x7ac>)
 8012bfe:	3301      	adds	r3, #1
 8012c00:	e6be      	b.n	8012980 <__strftime+0x374>
 8012c02:	692b      	ldr	r3, [r5, #16]
 8012c04:	3301      	adds	r3, #1
 8012c06:	e72a      	b.n	8012a5e <__strftime+0x452>
 8012c08:	686b      	ldr	r3, [r5, #4]
 8012c0a:	e728      	b.n	8012a5e <__strftime+0x452>
 8012c0c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012c10:	42a3      	cmp	r3, r4
 8012c12:	f67f ad2a 	bls.w	801266a <__strftime+0x5e>
 8012c16:	230a      	movs	r3, #10
 8012c18:	f809 3004 	strb.w	r3, [r9, r4]
 8012c1c:	3401      	adds	r4, #1
 8012c1e:	e5f7      	b.n	8012810 <__strftime+0x204>
 8012c20:	68ab      	ldr	r3, [r5, #8]
 8012c22:	2b0b      	cmp	r3, #11
 8012c24:	bfcc      	ite	gt
 8012c26:	22a4      	movgt	r2, #164	; 0xa4
 8012c28:	22a0      	movle	r2, #160	; 0xa0
 8012c2a:	4b64      	ldr	r3, [pc, #400]	; (8012dbc <__strftime+0x7b0>)
 8012c2c:	4413      	add	r3, r2
 8012c2e:	685e      	ldr	r6, [r3, #4]
 8012c30:	4630      	mov	r0, r6
 8012c32:	f7ed fb03 	bl	800023c <strlen>
 8012c36:	1e72      	subs	r2, r6, #1
 8012c38:	4420      	add	r0, r4
 8012c3a:	f108 36ff 	add.w	r6, r8, #4294967295
 8012c3e:	42a0      	cmp	r0, r4
 8012c40:	f43f ade6 	beq.w	8012810 <__strftime+0x204>
 8012c44:	42a6      	cmp	r6, r4
 8012c46:	f67f ad10 	bls.w	801266a <__strftime+0x5e>
 8012c4a:	f89b 1000 	ldrb.w	r1, [fp]
 8012c4e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012c52:	2950      	cmp	r1, #80	; 0x50
 8012c54:	d107      	bne.n	8012c66 <__strftime+0x65a>
 8012c56:	495a      	ldr	r1, [pc, #360]	; (8012dc0 <__strftime+0x7b4>)
 8012c58:	5cc9      	ldrb	r1, [r1, r3]
 8012c5a:	f001 0103 	and.w	r1, r1, #3
 8012c5e:	2901      	cmp	r1, #1
 8012c60:	bf08      	it	eq
 8012c62:	3320      	addeq	r3, #32
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	f809 3004 	strb.w	r3, [r9, r4]
 8012c6a:	3401      	adds	r4, #1
 8012c6c:	e7e7      	b.n	8012c3e <__strftime+0x632>
 8012c6e:	686b      	ldr	r3, [r5, #4]
 8012c70:	9300      	str	r3, [sp, #0]
 8012c72:	4a54      	ldr	r2, [pc, #336]	; (8012dc4 <__strftime+0x7b8>)
 8012c74:	68ab      	ldr	r3, [r5, #8]
 8012c76:	eba8 0104 	sub.w	r1, r8, r4
 8012c7a:	eb09 0004 	add.w	r0, r9, r4
 8012c7e:	f001 fca7 	bl	80145d0 <sniprintf>
 8012c82:	e683      	b.n	801298c <__strftime+0x380>
 8012c84:	6a2b      	ldr	r3, [r5, #32]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	db79      	blt.n	8012d7e <__strftime+0x772>
 8012c8a:	f000 fb03 	bl	8013294 <__tz_lock>
 8012c8e:	9b04      	ldr	r3, [sp, #16]
 8012c90:	b90b      	cbnz	r3, 8012c96 <__strftime+0x68a>
 8012c92:	f000 fb0b 	bl	80132ac <_tzset_unlocked>
 8012c96:	f000 fed9 	bl	8013a4c <__gettzinfo>
 8012c9a:	6a2b      	ldr	r3, [r5, #32]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	bfcc      	ite	gt
 8012ca0:	2350      	movgt	r3, #80	; 0x50
 8012ca2:	2328      	movle	r3, #40	; 0x28
 8012ca4:	58c3      	ldr	r3, [r0, r3]
 8012ca6:	f1c3 0a00 	rsb	sl, r3, #0
 8012caa:	f000 faf9 	bl	80132a0 <__tz_unlock>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	9304      	str	r3, [sp, #16]
 8012cb2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8012cb6:	4662      	mov	r2, ip
 8012cb8:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8012cbc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8012cc0:	9602      	str	r6, [sp, #8]
 8012cc2:	f143 36ff 	adc.w	r6, r3, #4294967295
 8012cc6:	9603      	str	r6, [sp, #12]
 8012cc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012ccc:	2e00      	cmp	r6, #0
 8012cce:	f177 0600 	sbcs.w	r6, r7, #0
 8012cd2:	eba8 0104 	sub.w	r1, r8, r4
 8012cd6:	eb09 0004 	add.w	r0, r9, r4
 8012cda:	da05      	bge.n	8012ce8 <__strftime+0x6dc>
 8012cdc:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8012ce0:	f143 33ff 	adc.w	r3, r3, #4294967295
 8012ce4:	9602      	str	r6, [sp, #8]
 8012ce6:	9303      	str	r3, [sp, #12]
 8012ce8:	9b02      	ldr	r3, [sp, #8]
 8012cea:	089e      	lsrs	r6, r3, #2
 8012cec:	9b03      	ldr	r3, [sp, #12]
 8012cee:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8012cf2:	f10c 32ff 	add.w	r2, ip, #4294967295
 8012cf6:	109f      	asrs	r7, r3, #2
 8012cf8:	2364      	movs	r3, #100	; 0x64
 8012cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8012cfe:	1af6      	subs	r6, r6, r3
 8012d00:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8012d04:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8012d08:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012d0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d10:	18f6      	adds	r6, r6, r3
 8012d12:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012d16:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8012d1a:	f240 136d 	movw	r3, #365	; 0x16d
 8012d1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8012d22:	69eb      	ldr	r3, [r5, #28]
 8012d24:	eb16 060c 	adds.w	r6, r6, ip
 8012d28:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8012d2c:	18f6      	adds	r6, r6, r3
 8012d2e:	f04f 0c18 	mov.w	ip, #24
 8012d32:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012d36:	fba6 230c 	umull	r2, r3, r6, ip
 8012d3a:	68ae      	ldr	r6, [r5, #8]
 8012d3c:	fb0c 3307 	mla	r3, ip, r7, r3
 8012d40:	1992      	adds	r2, r2, r6
 8012d42:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8012d46:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8012d4a:	fba2 670c 	umull	r6, r7, r2, ip
 8012d4e:	fb0c 7703 	mla	r7, ip, r3, r7
 8012d52:	686b      	ldr	r3, [r5, #4]
 8012d54:	18f6      	adds	r6, r6, r3
 8012d56:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012d5a:	fba6 230c 	umull	r2, r3, r6, ip
 8012d5e:	682e      	ldr	r6, [r5, #0]
 8012d60:	fb0c 3307 	mla	r3, ip, r7, r3
 8012d64:	1992      	adds	r2, r2, r6
 8012d66:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8012d6a:	ebb2 020a 	subs.w	r2, r2, sl
 8012d6e:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8012d72:	e9cd 2300 	strd	r2, r3, [sp]
 8012d76:	4a14      	ldr	r2, [pc, #80]	; (8012dc8 <__strftime+0x7bc>)
 8012d78:	f001 fc2a 	bl	80145d0 <sniprintf>
 8012d7c:	e606      	b.n	801298c <__strftime+0x380>
 8012d7e:	f04f 0a00 	mov.w	sl, #0
 8012d82:	e796      	b.n	8012cb2 <__strftime+0x6a6>
 8012d84:	682b      	ldr	r3, [r5, #0]
 8012d86:	e66a      	b.n	8012a5e <__strftime+0x452>
 8012d88:	f108 33ff 	add.w	r3, r8, #4294967295
 8012d8c:	42a3      	cmp	r3, r4
 8012d8e:	f67f ac6c 	bls.w	801266a <__strftime+0x5e>
 8012d92:	2309      	movs	r3, #9
 8012d94:	e740      	b.n	8012c18 <__strftime+0x60c>
 8012d96:	682b      	ldr	r3, [r5, #0]
 8012d98:	9301      	str	r3, [sp, #4]
 8012d9a:	686b      	ldr	r3, [r5, #4]
 8012d9c:	9300      	str	r3, [sp, #0]
 8012d9e:	4a0b      	ldr	r2, [pc, #44]	; (8012dcc <__strftime+0x7c0>)
 8012da0:	68ab      	ldr	r3, [r5, #8]
 8012da2:	e5e0      	b.n	8012966 <__strftime+0x35a>
 8012da4:	fffff894 	.word	0xfffff894
 8012da8:	fffff895 	.word	0xfffff895
 8012dac:	08017dcf 	.word	0x08017dcf
 8012db0:	08017db0 	.word	0x08017db0
 8012db4:	08017dbe 	.word	0x08017dbe
 8012db8:	08017dd3 	.word	0x08017dd3
 8012dbc:	08017f24 	.word	0x08017f24
 8012dc0:	08018099 	.word	0x08018099
 8012dc4:	08017de2 	.word	0x08017de2
 8012dc8:	08017dd8 	.word	0x08017dd8
 8012dcc:	08017ddd 	.word	0x08017ddd
 8012dd0:	f108 33ff 	add.w	r3, r8, #4294967295
 8012dd4:	42a3      	cmp	r3, r4
 8012dd6:	f67f ac48 	bls.w	801266a <__strftime+0x5e>
 8012dda:	69ab      	ldr	r3, [r5, #24]
 8012ddc:	eb09 0204 	add.w	r2, r9, r4
 8012de0:	3401      	adds	r4, #1
 8012de2:	b913      	cbnz	r3, 8012dea <__strftime+0x7de>
 8012de4:	2337      	movs	r3, #55	; 0x37
 8012de6:	7013      	strb	r3, [r2, #0]
 8012de8:	e512      	b.n	8012810 <__strftime+0x204>
 8012dea:	3330      	adds	r3, #48	; 0x30
 8012dec:	e7fb      	b.n	8012de6 <__strftime+0x7da>
 8012dee:	69eb      	ldr	r3, [r5, #28]
 8012df0:	69aa      	ldr	r2, [r5, #24]
 8012df2:	3307      	adds	r3, #7
 8012df4:	1a9b      	subs	r3, r3, r2
 8012df6:	2207      	movs	r2, #7
 8012df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dfc:	e62f      	b.n	8012a5e <__strftime+0x452>
 8012dfe:	4628      	mov	r0, r5
 8012e00:	f7ff fba2 	bl	8012548 <iso_year_adjust>
 8012e04:	69aa      	ldr	r2, [r5, #24]
 8012e06:	b132      	cbz	r2, 8012e16 <__strftime+0x80a>
 8012e08:	3a01      	subs	r2, #1
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	dc28      	bgt.n	8012e60 <__strftime+0x854>
 8012e0e:	69eb      	ldr	r3, [r5, #28]
 8012e10:	d103      	bne.n	8012e1a <__strftime+0x80e>
 8012e12:	330a      	adds	r3, #10
 8012e14:	e7ee      	b.n	8012df4 <__strftime+0x7e8>
 8012e16:	2206      	movs	r2, #6
 8012e18:	e7f7      	b.n	8012e0a <__strftime+0x7fe>
 8012e1a:	6968      	ldr	r0, [r5, #20]
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	eba2 0303 	sub.w	r3, r2, r3
 8012e22:	f240 726b 	movw	r2, #1899	; 0x76b
 8012e26:	bfa8      	it	ge
 8012e28:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8012e2c:	4410      	add	r0, r2
 8012e2e:	0782      	lsls	r2, r0, #30
 8012e30:	d105      	bne.n	8012e3e <__strftime+0x832>
 8012e32:	2264      	movs	r2, #100	; 0x64
 8012e34:	fb90 f1f2 	sdiv	r1, r0, r2
 8012e38:	fb02 0111 	mls	r1, r2, r1, r0
 8012e3c:	b971      	cbnz	r1, 8012e5c <__strftime+0x850>
 8012e3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012e42:	fb90 f2f1 	sdiv	r2, r0, r1
 8012e46:	fb01 0212 	mls	r2, r1, r2, r0
 8012e4a:	fab2 f282 	clz	r2, r2
 8012e4e:	0952      	lsrs	r2, r2, #5
 8012e50:	1a9a      	subs	r2, r3, r2
 8012e52:	2a05      	cmp	r2, #5
 8012e54:	bfb4      	ite	lt
 8012e56:	2335      	movlt	r3, #53	; 0x35
 8012e58:	2334      	movge	r3, #52	; 0x34
 8012e5a:	e600      	b.n	8012a5e <__strftime+0x452>
 8012e5c:	2201      	movs	r2, #1
 8012e5e:	e7f7      	b.n	8012e50 <__strftime+0x844>
 8012e60:	2301      	movs	r3, #1
 8012e62:	e5fc      	b.n	8012a5e <__strftime+0x452>
 8012e64:	f108 33ff 	add.w	r3, r8, #4294967295
 8012e68:	42a3      	cmp	r3, r4
 8012e6a:	f67f abfe 	bls.w	801266a <__strftime+0x5e>
 8012e6e:	69ab      	ldr	r3, [r5, #24]
 8012e70:	3330      	adds	r3, #48	; 0x30
 8012e72:	e6d1      	b.n	8012c18 <__strftime+0x60c>
 8012e74:	69ab      	ldr	r3, [r5, #24]
 8012e76:	b13b      	cbz	r3, 8012e88 <__strftime+0x87c>
 8012e78:	3b01      	subs	r3, #1
 8012e7a:	69ea      	ldr	r2, [r5, #28]
 8012e7c:	3207      	adds	r2, #7
 8012e7e:	1ad2      	subs	r2, r2, r3
 8012e80:	2307      	movs	r3, #7
 8012e82:	fb92 f3f3 	sdiv	r3, r2, r3
 8012e86:	e5ea      	b.n	8012a5e <__strftime+0x452>
 8012e88:	2306      	movs	r3, #6
 8012e8a:	e7f6      	b.n	8012e7a <__strftime+0x86e>
 8012e8c:	6968      	ldr	r0, [r5, #20]
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	db05      	blt.n	8012e9e <__strftime+0x892>
 8012e92:	2264      	movs	r2, #100	; 0x64
 8012e94:	fb90 f3f2 	sdiv	r3, r0, r2
 8012e98:	fb03 0312 	mls	r3, r3, r2, r0
 8012e9c:	e5df      	b.n	8012a5e <__strftime+0x452>
 8012e9e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012ea2:	f000 fcf3 	bl	801388c <abs>
 8012ea6:	e7f4      	b.n	8012e92 <__strftime+0x886>
 8012ea8:	696b      	ldr	r3, [r5, #20]
 8012eaa:	4a4c      	ldr	r2, [pc, #304]	; (8012fdc <__strftime+0x9d0>)
 8012eac:	4293      	cmp	r3, r2
 8012eae:	da09      	bge.n	8012ec4 <__strftime+0x8b8>
 8012eb0:	212d      	movs	r1, #45	; 0x2d
 8012eb2:	f88d 1020 	strb.w	r1, [sp, #32]
 8012eb6:	eba2 0a03 	sub.w	sl, r2, r3
 8012eba:	b106      	cbz	r6, 8012ebe <__strftime+0x8b2>
 8012ebc:	3e01      	subs	r6, #1
 8012ebe:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8012ec2:	e00b      	b.n	8012edc <__strftime+0x8d0>
 8012ec4:	2f2b      	cmp	r7, #43	; 0x2b
 8012ec6:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8012eca:	d106      	bne.n	8012eda <__strftime+0x8ce>
 8012ecc:	f242 730f 	movw	r3, #9999	; 0x270f
 8012ed0:	459a      	cmp	sl, r3
 8012ed2:	d902      	bls.n	8012eda <__strftime+0x8ce>
 8012ed4:	f88d 7020 	strb.w	r7, [sp, #32]
 8012ed8:	e7ef      	b.n	8012eba <__strftime+0x8ae>
 8012eda:	ab08      	add	r3, sp, #32
 8012edc:	2225      	movs	r2, #37	; 0x25
 8012ede:	701a      	strb	r2, [r3, #0]
 8012ee0:	b937      	cbnz	r7, 8012ef0 <__strftime+0x8e4>
 8012ee2:	1c58      	adds	r0, r3, #1
 8012ee4:	493e      	ldr	r1, [pc, #248]	; (8012fe0 <__strftime+0x9d4>)
 8012ee6:	f001 fbd3 	bl	8014690 <strcpy>
 8012eea:	f8cd a000 	str.w	sl, [sp]
 8012eee:	e665      	b.n	8012bbc <__strftime+0x5b0>
 8012ef0:	2230      	movs	r2, #48	; 0x30
 8012ef2:	1c98      	adds	r0, r3, #2
 8012ef4:	705a      	strb	r2, [r3, #1]
 8012ef6:	e7f5      	b.n	8012ee4 <__strftime+0x8d8>
 8012ef8:	6a2b      	ldr	r3, [r5, #32]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f6ff ac88 	blt.w	8012810 <__strftime+0x204>
 8012f00:	f000 f9c8 	bl	8013294 <__tz_lock>
 8012f04:	9b04      	ldr	r3, [sp, #16]
 8012f06:	b90b      	cbnz	r3, 8012f0c <__strftime+0x900>
 8012f08:	f000 f9d0 	bl	80132ac <_tzset_unlocked>
 8012f0c:	f000 fd9e 	bl	8013a4c <__gettzinfo>
 8012f10:	6a2b      	ldr	r3, [r5, #32]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	bfcc      	ite	gt
 8012f16:	2350      	movgt	r3, #80	; 0x50
 8012f18:	2328      	movle	r3, #40	; 0x28
 8012f1a:	eb09 0704 	add.w	r7, r9, r4
 8012f1e:	58c6      	ldr	r6, [r0, r3]
 8012f20:	f000 f9be 	bl	80132a0 <__tz_unlock>
 8012f24:	4276      	negs	r6, r6
 8012f26:	233c      	movs	r3, #60	; 0x3c
 8012f28:	fb96 f0f3 	sdiv	r0, r6, r3
 8012f2c:	f000 fe52 	bl	8013bd4 <labs>
 8012f30:	233c      	movs	r3, #60	; 0x3c
 8012f32:	eba8 0a04 	sub.w	sl, r8, r4
 8012f36:	fb90 f2f3 	sdiv	r2, r0, r3
 8012f3a:	fb02 0013 	mls	r0, r2, r3, r0
 8012f3e:	9000      	str	r0, [sp, #0]
 8012f40:	4a28      	ldr	r2, [pc, #160]	; (8012fe4 <__strftime+0x9d8>)
 8012f42:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012f46:	4651      	mov	r1, sl
 8012f48:	4638      	mov	r0, r7
 8012f4a:	fb96 f3f3 	sdiv	r3, r6, r3
 8012f4e:	f001 fb3f 	bl	80145d0 <sniprintf>
 8012f52:	2800      	cmp	r0, #0
 8012f54:	f6ff ab89 	blt.w	801266a <__strftime+0x5e>
 8012f58:	4404      	add	r4, r0
 8012f5a:	45a0      	cmp	r8, r4
 8012f5c:	f67f ab85 	bls.w	801266a <__strftime+0x5e>
 8012f60:	2301      	movs	r3, #1
 8012f62:	9304      	str	r3, [sp, #16]
 8012f64:	e454      	b.n	8012810 <__strftime+0x204>
 8012f66:	6a2b      	ldr	r3, [r5, #32]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f6ff ac51 	blt.w	8012810 <__strftime+0x204>
 8012f6e:	f000 f991 	bl	8013294 <__tz_lock>
 8012f72:	9b04      	ldr	r3, [sp, #16]
 8012f74:	b90b      	cbnz	r3, 8012f7a <__strftime+0x96e>
 8012f76:	f000 f999 	bl	80132ac <_tzset_unlocked>
 8012f7a:	6a2b      	ldr	r3, [r5, #32]
 8012f7c:	4a1a      	ldr	r2, [pc, #104]	; (8012fe8 <__strftime+0x9dc>)
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	bfd4      	ite	le
 8012f82:	2300      	movle	r3, #0
 8012f84:	2301      	movgt	r3, #1
 8012f86:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8012f8a:	4630      	mov	r0, r6
 8012f8c:	f7ed f956 	bl	800023c <strlen>
 8012f90:	3e01      	subs	r6, #1
 8012f92:	4420      	add	r0, r4
 8012f94:	f108 33ff 	add.w	r3, r8, #4294967295
 8012f98:	42a0      	cmp	r0, r4
 8012f9a:	d102      	bne.n	8012fa2 <__strftime+0x996>
 8012f9c:	f000 f980 	bl	80132a0 <__tz_unlock>
 8012fa0:	e7de      	b.n	8012f60 <__strftime+0x954>
 8012fa2:	42a3      	cmp	r3, r4
 8012fa4:	d905      	bls.n	8012fb2 <__strftime+0x9a6>
 8012fa6:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012faa:	f809 2004 	strb.w	r2, [r9, r4]
 8012fae:	3401      	adds	r4, #1
 8012fb0:	e7f2      	b.n	8012f98 <__strftime+0x98c>
 8012fb2:	f000 f975 	bl	80132a0 <__tz_unlock>
 8012fb6:	f7ff bb58 	b.w	801266a <__strftime+0x5e>
 8012fba:	f108 33ff 	add.w	r3, r8, #4294967295
 8012fbe:	42a3      	cmp	r3, r4
 8012fc0:	f67f ab53 	bls.w	801266a <__strftime+0x5e>
 8012fc4:	2325      	movs	r3, #37	; 0x25
 8012fc6:	e627      	b.n	8012c18 <__strftime+0x60c>
 8012fc8:	f1b8 0f00 	cmp.w	r8, #0
 8012fcc:	d002      	beq.n	8012fd4 <__strftime+0x9c8>
 8012fce:	2300      	movs	r3, #0
 8012fd0:	f809 3004 	strb.w	r3, [r9, r4]
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	b011      	add	sp, #68	; 0x44
 8012fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fdc:	fffff894 	.word	0xfffff894
 8012fe0:	08017dcf 	.word	0x08017dcf
 8012fe4:	08017dec 	.word	0x08017dec
 8012fe8:	20000164 	.word	0x20000164

08012fec <strftime>:
 8012fec:	b513      	push	{r0, r1, r4, lr}
 8012fee:	4c03      	ldr	r4, [pc, #12]	; (8012ffc <strftime+0x10>)
 8012ff0:	9400      	str	r4, [sp, #0]
 8012ff2:	f7ff fb0b 	bl	801260c <__strftime>
 8012ff6:	b002      	add	sp, #8
 8012ff8:	bd10      	pop	{r4, pc}
 8012ffa:	bf00      	nop
 8012ffc:	200001c8 	.word	0x200001c8

08013000 <_strtoul_l.isra.0>:
 8013000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013004:	4e3b      	ldr	r6, [pc, #236]	; (80130f4 <_strtoul_l.isra.0+0xf4>)
 8013006:	4686      	mov	lr, r0
 8013008:	468c      	mov	ip, r1
 801300a:	4660      	mov	r0, ip
 801300c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013010:	5da5      	ldrb	r5, [r4, r6]
 8013012:	f015 0508 	ands.w	r5, r5, #8
 8013016:	d1f8      	bne.n	801300a <_strtoul_l.isra.0+0xa>
 8013018:	2c2d      	cmp	r4, #45	; 0x2d
 801301a:	d134      	bne.n	8013086 <_strtoul_l.isra.0+0x86>
 801301c:	f89c 4000 	ldrb.w	r4, [ip]
 8013020:	f04f 0801 	mov.w	r8, #1
 8013024:	f100 0c02 	add.w	ip, r0, #2
 8013028:	2b00      	cmp	r3, #0
 801302a:	d05e      	beq.n	80130ea <_strtoul_l.isra.0+0xea>
 801302c:	2b10      	cmp	r3, #16
 801302e:	d10c      	bne.n	801304a <_strtoul_l.isra.0+0x4a>
 8013030:	2c30      	cmp	r4, #48	; 0x30
 8013032:	d10a      	bne.n	801304a <_strtoul_l.isra.0+0x4a>
 8013034:	f89c 0000 	ldrb.w	r0, [ip]
 8013038:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801303c:	2858      	cmp	r0, #88	; 0x58
 801303e:	d14f      	bne.n	80130e0 <_strtoul_l.isra.0+0xe0>
 8013040:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013044:	2310      	movs	r3, #16
 8013046:	f10c 0c02 	add.w	ip, ip, #2
 801304a:	f04f 37ff 	mov.w	r7, #4294967295
 801304e:	2500      	movs	r5, #0
 8013050:	fbb7 f7f3 	udiv	r7, r7, r3
 8013054:	fb03 f907 	mul.w	r9, r3, r7
 8013058:	ea6f 0909 	mvn.w	r9, r9
 801305c:	4628      	mov	r0, r5
 801305e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013062:	2e09      	cmp	r6, #9
 8013064:	d818      	bhi.n	8013098 <_strtoul_l.isra.0+0x98>
 8013066:	4634      	mov	r4, r6
 8013068:	42a3      	cmp	r3, r4
 801306a:	dd24      	ble.n	80130b6 <_strtoul_l.isra.0+0xb6>
 801306c:	2d00      	cmp	r5, #0
 801306e:	db1f      	blt.n	80130b0 <_strtoul_l.isra.0+0xb0>
 8013070:	4287      	cmp	r7, r0
 8013072:	d31d      	bcc.n	80130b0 <_strtoul_l.isra.0+0xb0>
 8013074:	d101      	bne.n	801307a <_strtoul_l.isra.0+0x7a>
 8013076:	45a1      	cmp	r9, r4
 8013078:	db1a      	blt.n	80130b0 <_strtoul_l.isra.0+0xb0>
 801307a:	fb00 4003 	mla	r0, r0, r3, r4
 801307e:	2501      	movs	r5, #1
 8013080:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013084:	e7eb      	b.n	801305e <_strtoul_l.isra.0+0x5e>
 8013086:	2c2b      	cmp	r4, #43	; 0x2b
 8013088:	bf08      	it	eq
 801308a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801308e:	46a8      	mov	r8, r5
 8013090:	bf08      	it	eq
 8013092:	f100 0c02 	addeq.w	ip, r0, #2
 8013096:	e7c7      	b.n	8013028 <_strtoul_l.isra.0+0x28>
 8013098:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801309c:	2e19      	cmp	r6, #25
 801309e:	d801      	bhi.n	80130a4 <_strtoul_l.isra.0+0xa4>
 80130a0:	3c37      	subs	r4, #55	; 0x37
 80130a2:	e7e1      	b.n	8013068 <_strtoul_l.isra.0+0x68>
 80130a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80130a8:	2e19      	cmp	r6, #25
 80130aa:	d804      	bhi.n	80130b6 <_strtoul_l.isra.0+0xb6>
 80130ac:	3c57      	subs	r4, #87	; 0x57
 80130ae:	e7db      	b.n	8013068 <_strtoul_l.isra.0+0x68>
 80130b0:	f04f 35ff 	mov.w	r5, #4294967295
 80130b4:	e7e4      	b.n	8013080 <_strtoul_l.isra.0+0x80>
 80130b6:	2d00      	cmp	r5, #0
 80130b8:	da07      	bge.n	80130ca <_strtoul_l.isra.0+0xca>
 80130ba:	2322      	movs	r3, #34	; 0x22
 80130bc:	f8ce 3000 	str.w	r3, [lr]
 80130c0:	f04f 30ff 	mov.w	r0, #4294967295
 80130c4:	b942      	cbnz	r2, 80130d8 <_strtoul_l.isra.0+0xd8>
 80130c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130ca:	f1b8 0f00 	cmp.w	r8, #0
 80130ce:	d000      	beq.n	80130d2 <_strtoul_l.isra.0+0xd2>
 80130d0:	4240      	negs	r0, r0
 80130d2:	2a00      	cmp	r2, #0
 80130d4:	d0f7      	beq.n	80130c6 <_strtoul_l.isra.0+0xc6>
 80130d6:	b10d      	cbz	r5, 80130dc <_strtoul_l.isra.0+0xdc>
 80130d8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80130dc:	6011      	str	r1, [r2, #0]
 80130de:	e7f2      	b.n	80130c6 <_strtoul_l.isra.0+0xc6>
 80130e0:	2430      	movs	r4, #48	; 0x30
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d1b1      	bne.n	801304a <_strtoul_l.isra.0+0x4a>
 80130e6:	2308      	movs	r3, #8
 80130e8:	e7af      	b.n	801304a <_strtoul_l.isra.0+0x4a>
 80130ea:	2c30      	cmp	r4, #48	; 0x30
 80130ec:	d0a2      	beq.n	8013034 <_strtoul_l.isra.0+0x34>
 80130ee:	230a      	movs	r3, #10
 80130f0:	e7ab      	b.n	801304a <_strtoul_l.isra.0+0x4a>
 80130f2:	bf00      	nop
 80130f4:	08018099 	.word	0x08018099

080130f8 <_strtoul_r>:
 80130f8:	f7ff bf82 	b.w	8013000 <_strtoul_l.isra.0>

080130fc <strtoul>:
 80130fc:	4613      	mov	r3, r2
 80130fe:	460a      	mov	r2, r1
 8013100:	4601      	mov	r1, r0
 8013102:	4802      	ldr	r0, [pc, #8]	; (801310c <strtoul+0x10>)
 8013104:	6800      	ldr	r0, [r0, #0]
 8013106:	f7ff bf7b 	b.w	8013000 <_strtoul_l.isra.0>
 801310a:	bf00      	nop
 801310c:	20000100 	.word	0x20000100

08013110 <time>:
 8013110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013112:	4b0b      	ldr	r3, [pc, #44]	; (8013140 <time+0x30>)
 8013114:	2200      	movs	r2, #0
 8013116:	4669      	mov	r1, sp
 8013118:	4604      	mov	r4, r0
 801311a:	6818      	ldr	r0, [r3, #0]
 801311c:	f000 fc84 	bl	8013a28 <_gettimeofday_r>
 8013120:	2800      	cmp	r0, #0
 8013122:	bfbe      	ittt	lt
 8013124:	f04f 32ff 	movlt.w	r2, #4294967295
 8013128:	f04f 33ff 	movlt.w	r3, #4294967295
 801312c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8013130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013134:	b10c      	cbz	r4, 801313a <time+0x2a>
 8013136:	e9c4 0100 	strd	r0, r1, [r4]
 801313a:	b004      	add	sp, #16
 801313c:	bd10      	pop	{r4, pc}
 801313e:	bf00      	nop
 8013140:	20000100 	.word	0x20000100

08013144 <__tzcalc_limits>:
 8013144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013148:	4680      	mov	r8, r0
 801314a:	f000 fc7f 	bl	8013a4c <__gettzinfo>
 801314e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8013152:	4598      	cmp	r8, r3
 8013154:	f340 8098 	ble.w	8013288 <__tzcalc_limits+0x144>
 8013158:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801315c:	4443      	add	r3, r8
 801315e:	109b      	asrs	r3, r3, #2
 8013160:	f240 126d 	movw	r2, #365	; 0x16d
 8013164:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8013168:	fb02 3505 	mla	r5, r2, r5, r3
 801316c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8013170:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8013174:	fb93 f3f2 	sdiv	r3, r3, r2
 8013178:	441d      	add	r5, r3
 801317a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801317e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8013182:	fb98 f7f3 	sdiv	r7, r8, r3
 8013186:	fb03 8717 	mls	r7, r3, r7, r8
 801318a:	4442      	add	r2, r8
 801318c:	fab7 fc87 	clz	ip, r7
 8013190:	fbb2 f2f3 	udiv	r2, r2, r3
 8013194:	f008 0303 	and.w	r3, r8, #3
 8013198:	4415      	add	r5, r2
 801319a:	2264      	movs	r2, #100	; 0x64
 801319c:	f8c0 8004 	str.w	r8, [r0, #4]
 80131a0:	fb98 f6f2 	sdiv	r6, r8, r2
 80131a4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80131a8:	fb02 8616 	mls	r6, r2, r6, r8
 80131ac:	4604      	mov	r4, r0
 80131ae:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80131b2:	9300      	str	r3, [sp, #0]
 80131b4:	f04f 0e07 	mov.w	lr, #7
 80131b8:	7a22      	ldrb	r2, [r4, #8]
 80131ba:	6963      	ldr	r3, [r4, #20]
 80131bc:	2a4a      	cmp	r2, #74	; 0x4a
 80131be:	d128      	bne.n	8013212 <__tzcalc_limits+0xce>
 80131c0:	9900      	ldr	r1, [sp, #0]
 80131c2:	18ea      	adds	r2, r5, r3
 80131c4:	b901      	cbnz	r1, 80131c8 <__tzcalc_limits+0x84>
 80131c6:	b906      	cbnz	r6, 80131ca <__tzcalc_limits+0x86>
 80131c8:	bb0f      	cbnz	r7, 801320e <__tzcalc_limits+0xca>
 80131ca:	2b3b      	cmp	r3, #59	; 0x3b
 80131cc:	bfd4      	ite	le
 80131ce:	2300      	movle	r3, #0
 80131d0:	2301      	movgt	r3, #1
 80131d2:	4413      	add	r3, r2
 80131d4:	1e5a      	subs	r2, r3, #1
 80131d6:	69a3      	ldr	r3, [r4, #24]
 80131d8:	492c      	ldr	r1, [pc, #176]	; (801328c <__tzcalc_limits+0x148>)
 80131da:	fb01 3202 	mla	r2, r1, r2, r3
 80131de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80131e0:	4413      	add	r3, r2
 80131e2:	461a      	mov	r2, r3
 80131e4:	17db      	asrs	r3, r3, #31
 80131e6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80131ea:	3428      	adds	r4, #40	; 0x28
 80131ec:	45a3      	cmp	fp, r4
 80131ee:	d1e3      	bne.n	80131b8 <__tzcalc_limits+0x74>
 80131f0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80131f4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80131f8:	4294      	cmp	r4, r2
 80131fa:	eb75 0303 	sbcs.w	r3, r5, r3
 80131fe:	bfb4      	ite	lt
 8013200:	2301      	movlt	r3, #1
 8013202:	2300      	movge	r3, #0
 8013204:	6003      	str	r3, [r0, #0]
 8013206:	2001      	movs	r0, #1
 8013208:	b003      	add	sp, #12
 801320a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801320e:	2300      	movs	r3, #0
 8013210:	e7df      	b.n	80131d2 <__tzcalc_limits+0x8e>
 8013212:	2a44      	cmp	r2, #68	; 0x44
 8013214:	d101      	bne.n	801321a <__tzcalc_limits+0xd6>
 8013216:	18ea      	adds	r2, r5, r3
 8013218:	e7dd      	b.n	80131d6 <__tzcalc_limits+0x92>
 801321a:	9a00      	ldr	r2, [sp, #0]
 801321c:	bb72      	cbnz	r2, 801327c <__tzcalc_limits+0x138>
 801321e:	2e00      	cmp	r6, #0
 8013220:	bf0c      	ite	eq
 8013222:	46e0      	moveq	r8, ip
 8013224:	f04f 0801 	movne.w	r8, #1
 8013228:	4919      	ldr	r1, [pc, #100]	; (8013290 <__tzcalc_limits+0x14c>)
 801322a:	68e2      	ldr	r2, [r4, #12]
 801322c:	9201      	str	r2, [sp, #4]
 801322e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8013232:	fb0a 1808 	mla	r8, sl, r8, r1
 8013236:	462a      	mov	r2, r5
 8013238:	f04f 0900 	mov.w	r9, #0
 801323c:	f1a8 0804 	sub.w	r8, r8, #4
 8013240:	9901      	ldr	r1, [sp, #4]
 8013242:	f109 0901 	add.w	r9, r9, #1
 8013246:	4549      	cmp	r1, r9
 8013248:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801324c:	dc18      	bgt.n	8013280 <__tzcalc_limits+0x13c>
 801324e:	f102 0804 	add.w	r8, r2, #4
 8013252:	fb98 f9fe 	sdiv	r9, r8, lr
 8013256:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801325a:	eba8 0909 	sub.w	r9, r8, r9
 801325e:	ebb3 0909 	subs.w	r9, r3, r9
 8013262:	6923      	ldr	r3, [r4, #16]
 8013264:	f103 33ff 	add.w	r3, r3, #4294967295
 8013268:	bf48      	it	mi
 801326a:	f109 0907 	addmi.w	r9, r9, #7
 801326e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013272:	444b      	add	r3, r9
 8013274:	4553      	cmp	r3, sl
 8013276:	da05      	bge.n	8013284 <__tzcalc_limits+0x140>
 8013278:	441a      	add	r2, r3
 801327a:	e7ac      	b.n	80131d6 <__tzcalc_limits+0x92>
 801327c:	46e0      	mov	r8, ip
 801327e:	e7d3      	b.n	8013228 <__tzcalc_limits+0xe4>
 8013280:	4452      	add	r2, sl
 8013282:	e7dd      	b.n	8013240 <__tzcalc_limits+0xfc>
 8013284:	3b07      	subs	r3, #7
 8013286:	e7f5      	b.n	8013274 <__tzcalc_limits+0x130>
 8013288:	2000      	movs	r0, #0
 801328a:	e7bd      	b.n	8013208 <__tzcalc_limits+0xc4>
 801328c:	00015180 	.word	0x00015180
 8013290:	08017ce0 	.word	0x08017ce0

08013294 <__tz_lock>:
 8013294:	4801      	ldr	r0, [pc, #4]	; (801329c <__tz_lock+0x8>)
 8013296:	f7fe bed7 	b.w	8012048 <__retarget_lock_acquire>
 801329a:	bf00      	nop
 801329c:	20000bbf 	.word	0x20000bbf

080132a0 <__tz_unlock>:
 80132a0:	4801      	ldr	r0, [pc, #4]	; (80132a8 <__tz_unlock+0x8>)
 80132a2:	f7fe bed3 	b.w	801204c <__retarget_lock_release>
 80132a6:	bf00      	nop
 80132a8:	20000bbf 	.word	0x20000bbf

080132ac <_tzset_unlocked>:
 80132ac:	4b01      	ldr	r3, [pc, #4]	; (80132b4 <_tzset_unlocked+0x8>)
 80132ae:	6818      	ldr	r0, [r3, #0]
 80132b0:	f000 b802 	b.w	80132b8 <_tzset_unlocked_r>
 80132b4:	20000100 	.word	0x20000100

080132b8 <_tzset_unlocked_r>:
 80132b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132bc:	b08d      	sub	sp, #52	; 0x34
 80132be:	4607      	mov	r7, r0
 80132c0:	f000 fbc4 	bl	8013a4c <__gettzinfo>
 80132c4:	49ae      	ldr	r1, [pc, #696]	; (8013580 <_tzset_unlocked_r+0x2c8>)
 80132c6:	4eaf      	ldr	r6, [pc, #700]	; (8013584 <_tzset_unlocked_r+0x2cc>)
 80132c8:	4605      	mov	r5, r0
 80132ca:	4638      	mov	r0, r7
 80132cc:	f000 fba4 	bl	8013a18 <_getenv_r>
 80132d0:	4604      	mov	r4, r0
 80132d2:	b970      	cbnz	r0, 80132f2 <_tzset_unlocked_r+0x3a>
 80132d4:	4bac      	ldr	r3, [pc, #688]	; (8013588 <_tzset_unlocked_r+0x2d0>)
 80132d6:	4aad      	ldr	r2, [pc, #692]	; (801358c <_tzset_unlocked_r+0x2d4>)
 80132d8:	6018      	str	r0, [r3, #0]
 80132da:	4bad      	ldr	r3, [pc, #692]	; (8013590 <_tzset_unlocked_r+0x2d8>)
 80132dc:	6018      	str	r0, [r3, #0]
 80132de:	4bad      	ldr	r3, [pc, #692]	; (8013594 <_tzset_unlocked_r+0x2dc>)
 80132e0:	6830      	ldr	r0, [r6, #0]
 80132e2:	e9c3 2200 	strd	r2, r2, [r3]
 80132e6:	f7fe ff1f 	bl	8012128 <free>
 80132ea:	6034      	str	r4, [r6, #0]
 80132ec:	b00d      	add	sp, #52	; 0x34
 80132ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f2:	6831      	ldr	r1, [r6, #0]
 80132f4:	2900      	cmp	r1, #0
 80132f6:	d15f      	bne.n	80133b8 <_tzset_unlocked_r+0x100>
 80132f8:	6830      	ldr	r0, [r6, #0]
 80132fa:	f7fe ff15 	bl	8012128 <free>
 80132fe:	4620      	mov	r0, r4
 8013300:	f7ec ff9c 	bl	800023c <strlen>
 8013304:	1c41      	adds	r1, r0, #1
 8013306:	4638      	mov	r0, r7
 8013308:	f7fe ff8c 	bl	8012224 <_malloc_r>
 801330c:	6030      	str	r0, [r6, #0]
 801330e:	2800      	cmp	r0, #0
 8013310:	d157      	bne.n	80133c2 <_tzset_unlocked_r+0x10a>
 8013312:	7823      	ldrb	r3, [r4, #0]
 8013314:	4aa0      	ldr	r2, [pc, #640]	; (8013598 <_tzset_unlocked_r+0x2e0>)
 8013316:	49a1      	ldr	r1, [pc, #644]	; (801359c <_tzset_unlocked_r+0x2e4>)
 8013318:	2b3a      	cmp	r3, #58	; 0x3a
 801331a:	bf08      	it	eq
 801331c:	3401      	addeq	r4, #1
 801331e:	ae0a      	add	r6, sp, #40	; 0x28
 8013320:	4633      	mov	r3, r6
 8013322:	4620      	mov	r0, r4
 8013324:	f001 f988 	bl	8014638 <siscanf>
 8013328:	2800      	cmp	r0, #0
 801332a:	dddf      	ble.n	80132ec <_tzset_unlocked_r+0x34>
 801332c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801332e:	18e7      	adds	r7, r4, r3
 8013330:	5ce3      	ldrb	r3, [r4, r3]
 8013332:	2b2d      	cmp	r3, #45	; 0x2d
 8013334:	d149      	bne.n	80133ca <_tzset_unlocked_r+0x112>
 8013336:	3701      	adds	r7, #1
 8013338:	f04f 34ff 	mov.w	r4, #4294967295
 801333c:	f10d 0a20 	add.w	sl, sp, #32
 8013340:	f10d 0b1e 	add.w	fp, sp, #30
 8013344:	f04f 0800 	mov.w	r8, #0
 8013348:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801334c:	4994      	ldr	r1, [pc, #592]	; (80135a0 <_tzset_unlocked_r+0x2e8>)
 801334e:	9603      	str	r6, [sp, #12]
 8013350:	f8cd b000 	str.w	fp, [sp]
 8013354:	4633      	mov	r3, r6
 8013356:	aa07      	add	r2, sp, #28
 8013358:	4638      	mov	r0, r7
 801335a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801335e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8013362:	f001 f969 	bl	8014638 <siscanf>
 8013366:	4540      	cmp	r0, r8
 8013368:	ddc0      	ble.n	80132ec <_tzset_unlocked_r+0x34>
 801336a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801336e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013372:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80135ac <_tzset_unlocked_r+0x2f4>
 8013376:	213c      	movs	r1, #60	; 0x3c
 8013378:	fb01 2203 	mla	r2, r1, r3, r2
 801337c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013380:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013384:	fb01 2303 	mla	r3, r1, r3, r2
 8013388:	435c      	muls	r4, r3
 801338a:	62ac      	str	r4, [r5, #40]	; 0x28
 801338c:	4c81      	ldr	r4, [pc, #516]	; (8013594 <_tzset_unlocked_r+0x2dc>)
 801338e:	4b82      	ldr	r3, [pc, #520]	; (8013598 <_tzset_unlocked_r+0x2e0>)
 8013390:	6023      	str	r3, [r4, #0]
 8013392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013394:	4981      	ldr	r1, [pc, #516]	; (801359c <_tzset_unlocked_r+0x2e4>)
 8013396:	441f      	add	r7, r3
 8013398:	464a      	mov	r2, r9
 801339a:	4633      	mov	r3, r6
 801339c:	4638      	mov	r0, r7
 801339e:	f001 f94b 	bl	8014638 <siscanf>
 80133a2:	4540      	cmp	r0, r8
 80133a4:	dc16      	bgt.n	80133d4 <_tzset_unlocked_r+0x11c>
 80133a6:	6823      	ldr	r3, [r4, #0]
 80133a8:	6063      	str	r3, [r4, #4]
 80133aa:	4b77      	ldr	r3, [pc, #476]	; (8013588 <_tzset_unlocked_r+0x2d0>)
 80133ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80133ae:	601a      	str	r2, [r3, #0]
 80133b0:	4b77      	ldr	r3, [pc, #476]	; (8013590 <_tzset_unlocked_r+0x2d8>)
 80133b2:	f8c3 8000 	str.w	r8, [r3]
 80133b6:	e799      	b.n	80132ec <_tzset_unlocked_r+0x34>
 80133b8:	f7ec ff48 	bl	800024c <strcmp>
 80133bc:	2800      	cmp	r0, #0
 80133be:	d19b      	bne.n	80132f8 <_tzset_unlocked_r+0x40>
 80133c0:	e794      	b.n	80132ec <_tzset_unlocked_r+0x34>
 80133c2:	4621      	mov	r1, r4
 80133c4:	f001 f964 	bl	8014690 <strcpy>
 80133c8:	e7a3      	b.n	8013312 <_tzset_unlocked_r+0x5a>
 80133ca:	2b2b      	cmp	r3, #43	; 0x2b
 80133cc:	bf08      	it	eq
 80133ce:	3701      	addeq	r7, #1
 80133d0:	2401      	movs	r4, #1
 80133d2:	e7b3      	b.n	801333c <_tzset_unlocked_r+0x84>
 80133d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133d6:	f8c4 9004 	str.w	r9, [r4, #4]
 80133da:	18fc      	adds	r4, r7, r3
 80133dc:	5cfb      	ldrb	r3, [r7, r3]
 80133de:	2b2d      	cmp	r3, #45	; 0x2d
 80133e0:	f040 808b 	bne.w	80134fa <_tzset_unlocked_r+0x242>
 80133e4:	3401      	adds	r4, #1
 80133e6:	f04f 37ff 	mov.w	r7, #4294967295
 80133ea:	2300      	movs	r3, #0
 80133ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80133f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80133f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80133f8:	930a      	str	r3, [sp, #40]	; 0x28
 80133fa:	e9cd a602 	strd	sl, r6, [sp, #8]
 80133fe:	e9cd b600 	strd	fp, r6, [sp]
 8013402:	4967      	ldr	r1, [pc, #412]	; (80135a0 <_tzset_unlocked_r+0x2e8>)
 8013404:	4633      	mov	r3, r6
 8013406:	aa07      	add	r2, sp, #28
 8013408:	4620      	mov	r0, r4
 801340a:	f001 f915 	bl	8014638 <siscanf>
 801340e:	2800      	cmp	r0, #0
 8013410:	dc78      	bgt.n	8013504 <_tzset_unlocked_r+0x24c>
 8013412:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8013414:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8013418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801341a:	652f      	str	r7, [r5, #80]	; 0x50
 801341c:	441c      	add	r4, r3
 801341e:	462f      	mov	r7, r5
 8013420:	f04f 0900 	mov.w	r9, #0
 8013424:	7823      	ldrb	r3, [r4, #0]
 8013426:	2b2c      	cmp	r3, #44	; 0x2c
 8013428:	bf08      	it	eq
 801342a:	3401      	addeq	r4, #1
 801342c:	f894 8000 	ldrb.w	r8, [r4]
 8013430:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8013434:	d178      	bne.n	8013528 <_tzset_unlocked_r+0x270>
 8013436:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801343a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801343e:	ab09      	add	r3, sp, #36	; 0x24
 8013440:	9300      	str	r3, [sp, #0]
 8013442:	4958      	ldr	r1, [pc, #352]	; (80135a4 <_tzset_unlocked_r+0x2ec>)
 8013444:	9603      	str	r6, [sp, #12]
 8013446:	4633      	mov	r3, r6
 8013448:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801344c:	4620      	mov	r0, r4
 801344e:	f001 f8f3 	bl	8014638 <siscanf>
 8013452:	2803      	cmp	r0, #3
 8013454:	f47f af4a 	bne.w	80132ec <_tzset_unlocked_r+0x34>
 8013458:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801345c:	1e4b      	subs	r3, r1, #1
 801345e:	2b0b      	cmp	r3, #11
 8013460:	f63f af44 	bhi.w	80132ec <_tzset_unlocked_r+0x34>
 8013464:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013468:	1e53      	subs	r3, r2, #1
 801346a:	2b04      	cmp	r3, #4
 801346c:	f63f af3e 	bhi.w	80132ec <_tzset_unlocked_r+0x34>
 8013470:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013474:	2b06      	cmp	r3, #6
 8013476:	f63f af39 	bhi.w	80132ec <_tzset_unlocked_r+0x34>
 801347a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801347e:	f887 8008 	strb.w	r8, [r7, #8]
 8013482:	617b      	str	r3, [r7, #20]
 8013484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013486:	eb04 0803 	add.w	r8, r4, r3
 801348a:	2302      	movs	r3, #2
 801348c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013490:	2300      	movs	r3, #0
 8013492:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013496:	f8ad 3020 	strh.w	r3, [sp, #32]
 801349a:	930a      	str	r3, [sp, #40]	; 0x28
 801349c:	f898 3000 	ldrb.w	r3, [r8]
 80134a0:	2b2f      	cmp	r3, #47	; 0x2f
 80134a2:	d109      	bne.n	80134b8 <_tzset_unlocked_r+0x200>
 80134a4:	e9cd a602 	strd	sl, r6, [sp, #8]
 80134a8:	e9cd b600 	strd	fp, r6, [sp]
 80134ac:	493e      	ldr	r1, [pc, #248]	; (80135a8 <_tzset_unlocked_r+0x2f0>)
 80134ae:	4633      	mov	r3, r6
 80134b0:	aa07      	add	r2, sp, #28
 80134b2:	4640      	mov	r0, r8
 80134b4:	f001 f8c0 	bl	8014638 <siscanf>
 80134b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80134bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80134c0:	213c      	movs	r1, #60	; 0x3c
 80134c2:	fb01 2203 	mla	r2, r1, r3, r2
 80134c6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80134ca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80134ce:	fb01 2303 	mla	r3, r1, r3, r2
 80134d2:	61bb      	str	r3, [r7, #24]
 80134d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80134d6:	3728      	adds	r7, #40	; 0x28
 80134d8:	4444      	add	r4, r8
 80134da:	f1b9 0f00 	cmp.w	r9, #0
 80134de:	d020      	beq.n	8013522 <_tzset_unlocked_r+0x26a>
 80134e0:	6868      	ldr	r0, [r5, #4]
 80134e2:	f7ff fe2f 	bl	8013144 <__tzcalc_limits>
 80134e6:	4b28      	ldr	r3, [pc, #160]	; (8013588 <_tzset_unlocked_r+0x2d0>)
 80134e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80134ea:	601a      	str	r2, [r3, #0]
 80134ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80134ee:	1a9b      	subs	r3, r3, r2
 80134f0:	4a27      	ldr	r2, [pc, #156]	; (8013590 <_tzset_unlocked_r+0x2d8>)
 80134f2:	bf18      	it	ne
 80134f4:	2301      	movne	r3, #1
 80134f6:	6013      	str	r3, [r2, #0]
 80134f8:	e6f8      	b.n	80132ec <_tzset_unlocked_r+0x34>
 80134fa:	2b2b      	cmp	r3, #43	; 0x2b
 80134fc:	bf08      	it	eq
 80134fe:	3401      	addeq	r4, #1
 8013500:	2701      	movs	r7, #1
 8013502:	e772      	b.n	80133ea <_tzset_unlocked_r+0x132>
 8013504:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013508:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801350c:	213c      	movs	r1, #60	; 0x3c
 801350e:	fb01 2203 	mla	r2, r1, r3, r2
 8013512:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013516:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801351a:	fb01 2303 	mla	r3, r1, r3, r2
 801351e:	435f      	muls	r7, r3
 8013520:	e77a      	b.n	8013418 <_tzset_unlocked_r+0x160>
 8013522:	f04f 0901 	mov.w	r9, #1
 8013526:	e77d      	b.n	8013424 <_tzset_unlocked_r+0x16c>
 8013528:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801352c:	bf06      	itte	eq
 801352e:	3401      	addeq	r4, #1
 8013530:	4643      	moveq	r3, r8
 8013532:	2344      	movne	r3, #68	; 0x44
 8013534:	220a      	movs	r2, #10
 8013536:	a90b      	add	r1, sp, #44	; 0x2c
 8013538:	4620      	mov	r0, r4
 801353a:	9305      	str	r3, [sp, #20]
 801353c:	f7ff fdde 	bl	80130fc <strtoul>
 8013540:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8013544:	9b05      	ldr	r3, [sp, #20]
 8013546:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801354a:	45a0      	cmp	r8, r4
 801354c:	d114      	bne.n	8013578 <_tzset_unlocked_r+0x2c0>
 801354e:	234d      	movs	r3, #77	; 0x4d
 8013550:	f1b9 0f00 	cmp.w	r9, #0
 8013554:	d107      	bne.n	8013566 <_tzset_unlocked_r+0x2ae>
 8013556:	722b      	strb	r3, [r5, #8]
 8013558:	2103      	movs	r1, #3
 801355a:	2302      	movs	r3, #2
 801355c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8013560:	f8c5 9014 	str.w	r9, [r5, #20]
 8013564:	e791      	b.n	801348a <_tzset_unlocked_r+0x1d2>
 8013566:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801356a:	220b      	movs	r2, #11
 801356c:	2301      	movs	r3, #1
 801356e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8013572:	2300      	movs	r3, #0
 8013574:	63eb      	str	r3, [r5, #60]	; 0x3c
 8013576:	e788      	b.n	801348a <_tzset_unlocked_r+0x1d2>
 8013578:	b280      	uxth	r0, r0
 801357a:	723b      	strb	r3, [r7, #8]
 801357c:	6178      	str	r0, [r7, #20]
 801357e:	e784      	b.n	801348a <_tzset_unlocked_r+0x1d2>
 8013580:	08018020 	.word	0x08018020
 8013584:	20000b18 	.word	0x20000b18
 8013588:	20000b20 	.word	0x20000b20
 801358c:	08018023 	.word	0x08018023
 8013590:	20000b1c 	.word	0x20000b1c
 8013594:	20000164 	.word	0x20000164
 8013598:	20000b0b 	.word	0x20000b0b
 801359c:	08018027 	.word	0x08018027
 80135a0:	0801804a 	.word	0x0801804a
 80135a4:	08018036 	.word	0x08018036
 80135a8:	08018049 	.word	0x08018049
 80135ac:	20000b00 	.word	0x20000b00

080135b0 <_vsniprintf_r>:
 80135b0:	b530      	push	{r4, r5, lr}
 80135b2:	1e14      	subs	r4, r2, #0
 80135b4:	4605      	mov	r5, r0
 80135b6:	b09b      	sub	sp, #108	; 0x6c
 80135b8:	4618      	mov	r0, r3
 80135ba:	da05      	bge.n	80135c8 <_vsniprintf_r+0x18>
 80135bc:	238b      	movs	r3, #139	; 0x8b
 80135be:	602b      	str	r3, [r5, #0]
 80135c0:	f04f 30ff 	mov.w	r0, #4294967295
 80135c4:	b01b      	add	sp, #108	; 0x6c
 80135c6:	bd30      	pop	{r4, r5, pc}
 80135c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80135cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80135d0:	bf14      	ite	ne
 80135d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80135d6:	4623      	moveq	r3, r4
 80135d8:	9302      	str	r3, [sp, #8]
 80135da:	9305      	str	r3, [sp, #20]
 80135dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135e0:	9100      	str	r1, [sp, #0]
 80135e2:	9104      	str	r1, [sp, #16]
 80135e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80135e8:	4602      	mov	r2, r0
 80135ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80135ec:	4669      	mov	r1, sp
 80135ee:	4628      	mov	r0, r5
 80135f0:	f000 fba6 	bl	8013d40 <_svfiprintf_r>
 80135f4:	1c43      	adds	r3, r0, #1
 80135f6:	bfbc      	itt	lt
 80135f8:	238b      	movlt	r3, #139	; 0x8b
 80135fa:	602b      	strlt	r3, [r5, #0]
 80135fc:	2c00      	cmp	r4, #0
 80135fe:	d0e1      	beq.n	80135c4 <_vsniprintf_r+0x14>
 8013600:	9b00      	ldr	r3, [sp, #0]
 8013602:	2200      	movs	r2, #0
 8013604:	701a      	strb	r2, [r3, #0]
 8013606:	e7dd      	b.n	80135c4 <_vsniprintf_r+0x14>

08013608 <vsniprintf>:
 8013608:	b507      	push	{r0, r1, r2, lr}
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	4613      	mov	r3, r2
 801360e:	460a      	mov	r2, r1
 8013610:	4601      	mov	r1, r0
 8013612:	4803      	ldr	r0, [pc, #12]	; (8013620 <vsniprintf+0x18>)
 8013614:	6800      	ldr	r0, [r0, #0]
 8013616:	f7ff ffcb 	bl	80135b0 <_vsniprintf_r>
 801361a:	b003      	add	sp, #12
 801361c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013620:	20000100 	.word	0x20000100

08013624 <__swbuf_r>:
 8013624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013626:	460e      	mov	r6, r1
 8013628:	4614      	mov	r4, r2
 801362a:	4605      	mov	r5, r0
 801362c:	b118      	cbz	r0, 8013636 <__swbuf_r+0x12>
 801362e:	6983      	ldr	r3, [r0, #24]
 8013630:	b90b      	cbnz	r3, 8013636 <__swbuf_r+0x12>
 8013632:	f7fe f957 	bl	80118e4 <__sinit>
 8013636:	4b21      	ldr	r3, [pc, #132]	; (80136bc <__swbuf_r+0x98>)
 8013638:	429c      	cmp	r4, r3
 801363a:	d12b      	bne.n	8013694 <__swbuf_r+0x70>
 801363c:	686c      	ldr	r4, [r5, #4]
 801363e:	69a3      	ldr	r3, [r4, #24]
 8013640:	60a3      	str	r3, [r4, #8]
 8013642:	89a3      	ldrh	r3, [r4, #12]
 8013644:	071a      	lsls	r2, r3, #28
 8013646:	d52f      	bpl.n	80136a8 <__swbuf_r+0x84>
 8013648:	6923      	ldr	r3, [r4, #16]
 801364a:	b36b      	cbz	r3, 80136a8 <__swbuf_r+0x84>
 801364c:	6923      	ldr	r3, [r4, #16]
 801364e:	6820      	ldr	r0, [r4, #0]
 8013650:	1ac0      	subs	r0, r0, r3
 8013652:	6963      	ldr	r3, [r4, #20]
 8013654:	b2f6      	uxtb	r6, r6
 8013656:	4283      	cmp	r3, r0
 8013658:	4637      	mov	r7, r6
 801365a:	dc04      	bgt.n	8013666 <__swbuf_r+0x42>
 801365c:	4621      	mov	r1, r4
 801365e:	4628      	mov	r0, r5
 8013660:	f7fe f89a 	bl	8011798 <_fflush_r>
 8013664:	bb30      	cbnz	r0, 80136b4 <__swbuf_r+0x90>
 8013666:	68a3      	ldr	r3, [r4, #8]
 8013668:	3b01      	subs	r3, #1
 801366a:	60a3      	str	r3, [r4, #8]
 801366c:	6823      	ldr	r3, [r4, #0]
 801366e:	1c5a      	adds	r2, r3, #1
 8013670:	6022      	str	r2, [r4, #0]
 8013672:	701e      	strb	r6, [r3, #0]
 8013674:	6963      	ldr	r3, [r4, #20]
 8013676:	3001      	adds	r0, #1
 8013678:	4283      	cmp	r3, r0
 801367a:	d004      	beq.n	8013686 <__swbuf_r+0x62>
 801367c:	89a3      	ldrh	r3, [r4, #12]
 801367e:	07db      	lsls	r3, r3, #31
 8013680:	d506      	bpl.n	8013690 <__swbuf_r+0x6c>
 8013682:	2e0a      	cmp	r6, #10
 8013684:	d104      	bne.n	8013690 <__swbuf_r+0x6c>
 8013686:	4621      	mov	r1, r4
 8013688:	4628      	mov	r0, r5
 801368a:	f7fe f885 	bl	8011798 <_fflush_r>
 801368e:	b988      	cbnz	r0, 80136b4 <__swbuf_r+0x90>
 8013690:	4638      	mov	r0, r7
 8013692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013694:	4b0a      	ldr	r3, [pc, #40]	; (80136c0 <__swbuf_r+0x9c>)
 8013696:	429c      	cmp	r4, r3
 8013698:	d101      	bne.n	801369e <__swbuf_r+0x7a>
 801369a:	68ac      	ldr	r4, [r5, #8]
 801369c:	e7cf      	b.n	801363e <__swbuf_r+0x1a>
 801369e:	4b09      	ldr	r3, [pc, #36]	; (80136c4 <__swbuf_r+0xa0>)
 80136a0:	429c      	cmp	r4, r3
 80136a2:	bf08      	it	eq
 80136a4:	68ec      	ldreq	r4, [r5, #12]
 80136a6:	e7ca      	b.n	801363e <__swbuf_r+0x1a>
 80136a8:	4621      	mov	r1, r4
 80136aa:	4628      	mov	r0, r5
 80136ac:	f000 f81e 	bl	80136ec <__swsetup_r>
 80136b0:	2800      	cmp	r0, #0
 80136b2:	d0cb      	beq.n	801364c <__swbuf_r+0x28>
 80136b4:	f04f 37ff 	mov.w	r7, #4294967295
 80136b8:	e7ea      	b.n	8013690 <__swbuf_r+0x6c>
 80136ba:	bf00      	nop
 80136bc:	08017c24 	.word	0x08017c24
 80136c0:	08017c44 	.word	0x08017c44
 80136c4:	08017c04 	.word	0x08017c04

080136c8 <_write_r>:
 80136c8:	b538      	push	{r3, r4, r5, lr}
 80136ca:	4d07      	ldr	r5, [pc, #28]	; (80136e8 <_write_r+0x20>)
 80136cc:	4604      	mov	r4, r0
 80136ce:	4608      	mov	r0, r1
 80136d0:	4611      	mov	r1, r2
 80136d2:	2200      	movs	r2, #0
 80136d4:	602a      	str	r2, [r5, #0]
 80136d6:	461a      	mov	r2, r3
 80136d8:	f7ed fb7a 	bl	8000dd0 <_write>
 80136dc:	1c43      	adds	r3, r0, #1
 80136de:	d102      	bne.n	80136e6 <_write_r+0x1e>
 80136e0:	682b      	ldr	r3, [r5, #0]
 80136e2:	b103      	cbz	r3, 80136e6 <_write_r+0x1e>
 80136e4:	6023      	str	r3, [r4, #0]
 80136e6:	bd38      	pop	{r3, r4, r5, pc}
 80136e8:	20000bc4 	.word	0x20000bc4

080136ec <__swsetup_r>:
 80136ec:	4b32      	ldr	r3, [pc, #200]	; (80137b8 <__swsetup_r+0xcc>)
 80136ee:	b570      	push	{r4, r5, r6, lr}
 80136f0:	681d      	ldr	r5, [r3, #0]
 80136f2:	4606      	mov	r6, r0
 80136f4:	460c      	mov	r4, r1
 80136f6:	b125      	cbz	r5, 8013702 <__swsetup_r+0x16>
 80136f8:	69ab      	ldr	r3, [r5, #24]
 80136fa:	b913      	cbnz	r3, 8013702 <__swsetup_r+0x16>
 80136fc:	4628      	mov	r0, r5
 80136fe:	f7fe f8f1 	bl	80118e4 <__sinit>
 8013702:	4b2e      	ldr	r3, [pc, #184]	; (80137bc <__swsetup_r+0xd0>)
 8013704:	429c      	cmp	r4, r3
 8013706:	d10f      	bne.n	8013728 <__swsetup_r+0x3c>
 8013708:	686c      	ldr	r4, [r5, #4]
 801370a:	89a3      	ldrh	r3, [r4, #12]
 801370c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013710:	0719      	lsls	r1, r3, #28
 8013712:	d42c      	bmi.n	801376e <__swsetup_r+0x82>
 8013714:	06dd      	lsls	r5, r3, #27
 8013716:	d411      	bmi.n	801373c <__swsetup_r+0x50>
 8013718:	2309      	movs	r3, #9
 801371a:	6033      	str	r3, [r6, #0]
 801371c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013720:	81a3      	strh	r3, [r4, #12]
 8013722:	f04f 30ff 	mov.w	r0, #4294967295
 8013726:	e03e      	b.n	80137a6 <__swsetup_r+0xba>
 8013728:	4b25      	ldr	r3, [pc, #148]	; (80137c0 <__swsetup_r+0xd4>)
 801372a:	429c      	cmp	r4, r3
 801372c:	d101      	bne.n	8013732 <__swsetup_r+0x46>
 801372e:	68ac      	ldr	r4, [r5, #8]
 8013730:	e7eb      	b.n	801370a <__swsetup_r+0x1e>
 8013732:	4b24      	ldr	r3, [pc, #144]	; (80137c4 <__swsetup_r+0xd8>)
 8013734:	429c      	cmp	r4, r3
 8013736:	bf08      	it	eq
 8013738:	68ec      	ldreq	r4, [r5, #12]
 801373a:	e7e6      	b.n	801370a <__swsetup_r+0x1e>
 801373c:	0758      	lsls	r0, r3, #29
 801373e:	d512      	bpl.n	8013766 <__swsetup_r+0x7a>
 8013740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013742:	b141      	cbz	r1, 8013756 <__swsetup_r+0x6a>
 8013744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013748:	4299      	cmp	r1, r3
 801374a:	d002      	beq.n	8013752 <__swsetup_r+0x66>
 801374c:	4630      	mov	r0, r6
 801374e:	f7fe fd19 	bl	8012184 <_free_r>
 8013752:	2300      	movs	r3, #0
 8013754:	6363      	str	r3, [r4, #52]	; 0x34
 8013756:	89a3      	ldrh	r3, [r4, #12]
 8013758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801375c:	81a3      	strh	r3, [r4, #12]
 801375e:	2300      	movs	r3, #0
 8013760:	6063      	str	r3, [r4, #4]
 8013762:	6923      	ldr	r3, [r4, #16]
 8013764:	6023      	str	r3, [r4, #0]
 8013766:	89a3      	ldrh	r3, [r4, #12]
 8013768:	f043 0308 	orr.w	r3, r3, #8
 801376c:	81a3      	strh	r3, [r4, #12]
 801376e:	6923      	ldr	r3, [r4, #16]
 8013770:	b94b      	cbnz	r3, 8013786 <__swsetup_r+0x9a>
 8013772:	89a3      	ldrh	r3, [r4, #12]
 8013774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801377c:	d003      	beq.n	8013786 <__swsetup_r+0x9a>
 801377e:	4621      	mov	r1, r4
 8013780:	4630      	mov	r0, r6
 8013782:	f7fe fc89 	bl	8012098 <__smakebuf_r>
 8013786:	89a0      	ldrh	r0, [r4, #12]
 8013788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801378c:	f010 0301 	ands.w	r3, r0, #1
 8013790:	d00a      	beq.n	80137a8 <__swsetup_r+0xbc>
 8013792:	2300      	movs	r3, #0
 8013794:	60a3      	str	r3, [r4, #8]
 8013796:	6963      	ldr	r3, [r4, #20]
 8013798:	425b      	negs	r3, r3
 801379a:	61a3      	str	r3, [r4, #24]
 801379c:	6923      	ldr	r3, [r4, #16]
 801379e:	b943      	cbnz	r3, 80137b2 <__swsetup_r+0xc6>
 80137a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80137a4:	d1ba      	bne.n	801371c <__swsetup_r+0x30>
 80137a6:	bd70      	pop	{r4, r5, r6, pc}
 80137a8:	0781      	lsls	r1, r0, #30
 80137aa:	bf58      	it	pl
 80137ac:	6963      	ldrpl	r3, [r4, #20]
 80137ae:	60a3      	str	r3, [r4, #8]
 80137b0:	e7f4      	b.n	801379c <__swsetup_r+0xb0>
 80137b2:	2000      	movs	r0, #0
 80137b4:	e7f7      	b.n	80137a6 <__swsetup_r+0xba>
 80137b6:	bf00      	nop
 80137b8:	20000100 	.word	0x20000100
 80137bc:	08017c24 	.word	0x08017c24
 80137c0:	08017c44 	.word	0x08017c44
 80137c4:	08017c04 	.word	0x08017c04

080137c8 <__register_exitproc>:
 80137c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8013888 <__register_exitproc+0xc0>
 80137d0:	4606      	mov	r6, r0
 80137d2:	f8d8 0000 	ldr.w	r0, [r8]
 80137d6:	461f      	mov	r7, r3
 80137d8:	460d      	mov	r5, r1
 80137da:	4691      	mov	r9, r2
 80137dc:	f7fe fc35 	bl	801204a <__retarget_lock_acquire_recursive>
 80137e0:	4b25      	ldr	r3, [pc, #148]	; (8013878 <__register_exitproc+0xb0>)
 80137e2:	681c      	ldr	r4, [r3, #0]
 80137e4:	b934      	cbnz	r4, 80137f4 <__register_exitproc+0x2c>
 80137e6:	4c25      	ldr	r4, [pc, #148]	; (801387c <__register_exitproc+0xb4>)
 80137e8:	601c      	str	r4, [r3, #0]
 80137ea:	4b25      	ldr	r3, [pc, #148]	; (8013880 <__register_exitproc+0xb8>)
 80137ec:	b113      	cbz	r3, 80137f4 <__register_exitproc+0x2c>
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80137f4:	6863      	ldr	r3, [r4, #4]
 80137f6:	2b1f      	cmp	r3, #31
 80137f8:	dd07      	ble.n	801380a <__register_exitproc+0x42>
 80137fa:	f8d8 0000 	ldr.w	r0, [r8]
 80137fe:	f7fe fc26 	bl	801204e <__retarget_lock_release_recursive>
 8013802:	f04f 30ff 	mov.w	r0, #4294967295
 8013806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801380a:	b34e      	cbz	r6, 8013860 <__register_exitproc+0x98>
 801380c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013810:	b988      	cbnz	r0, 8013836 <__register_exitproc+0x6e>
 8013812:	4b1c      	ldr	r3, [pc, #112]	; (8013884 <__register_exitproc+0xbc>)
 8013814:	b923      	cbnz	r3, 8013820 <__register_exitproc+0x58>
 8013816:	f8d8 0000 	ldr.w	r0, [r8]
 801381a:	f7fe fc17 	bl	801204c <__retarget_lock_release>
 801381e:	e7f0      	b.n	8013802 <__register_exitproc+0x3a>
 8013820:	f44f 7084 	mov.w	r0, #264	; 0x108
 8013824:	f7fe fc78 	bl	8012118 <malloc>
 8013828:	2800      	cmp	r0, #0
 801382a:	d0f4      	beq.n	8013816 <__register_exitproc+0x4e>
 801382c:	2300      	movs	r3, #0
 801382e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8013832:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8013836:	6863      	ldr	r3, [r4, #4]
 8013838:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801383c:	2201      	movs	r2, #1
 801383e:	409a      	lsls	r2, r3
 8013840:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8013844:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8013848:	4313      	orrs	r3, r2
 801384a:	2e02      	cmp	r6, #2
 801384c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8013850:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8013854:	bf02      	ittt	eq
 8013856:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801385a:	431a      	orreq	r2, r3
 801385c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8013860:	6863      	ldr	r3, [r4, #4]
 8013862:	f8d8 0000 	ldr.w	r0, [r8]
 8013866:	1c5a      	adds	r2, r3, #1
 8013868:	3302      	adds	r3, #2
 801386a:	6062      	str	r2, [r4, #4]
 801386c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8013870:	f7fe fbed 	bl	801204e <__retarget_lock_release_recursive>
 8013874:	2000      	movs	r0, #0
 8013876:	e7c6      	b.n	8013806 <__register_exitproc+0x3e>
 8013878:	20000bb0 	.word	0x20000bb0
 801387c:	20000b24 	.word	0x20000b24
 8013880:	00000000 	.word	0x00000000
 8013884:	08012119 	.word	0x08012119
 8013888:	2000016c 	.word	0x2000016c

0801388c <abs>:
 801388c:	2800      	cmp	r0, #0
 801388e:	bfb8      	it	lt
 8013890:	4240      	neglt	r0, r0
 8013892:	4770      	bx	lr

08013894 <__assert_func>:
 8013894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013896:	4614      	mov	r4, r2
 8013898:	461a      	mov	r2, r3
 801389a:	4b09      	ldr	r3, [pc, #36]	; (80138c0 <__assert_func+0x2c>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	4605      	mov	r5, r0
 80138a0:	68d8      	ldr	r0, [r3, #12]
 80138a2:	b14c      	cbz	r4, 80138b8 <__assert_func+0x24>
 80138a4:	4b07      	ldr	r3, [pc, #28]	; (80138c4 <__assert_func+0x30>)
 80138a6:	9100      	str	r1, [sp, #0]
 80138a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80138ac:	4906      	ldr	r1, [pc, #24]	; (80138c8 <__assert_func+0x34>)
 80138ae:	462b      	mov	r3, r5
 80138b0:	f000 f854 	bl	801395c <fiprintf>
 80138b4:	f7fd fe5a 	bl	801156c <abort>
 80138b8:	4b04      	ldr	r3, [pc, #16]	; (80138cc <__assert_func+0x38>)
 80138ba:	461c      	mov	r4, r3
 80138bc:	e7f3      	b.n	80138a6 <__assert_func+0x12>
 80138be:	bf00      	nop
 80138c0:	20000100 	.word	0x20000100
 80138c4:	0801805c 	.word	0x0801805c
 80138c8:	08018069 	.word	0x08018069
 80138cc:	08018097 	.word	0x08018097

080138d0 <_close_r>:
 80138d0:	b538      	push	{r3, r4, r5, lr}
 80138d2:	4d06      	ldr	r5, [pc, #24]	; (80138ec <_close_r+0x1c>)
 80138d4:	2300      	movs	r3, #0
 80138d6:	4604      	mov	r4, r0
 80138d8:	4608      	mov	r0, r1
 80138da:	602b      	str	r3, [r5, #0]
 80138dc:	f7ed fa94 	bl	8000e08 <_close>
 80138e0:	1c43      	adds	r3, r0, #1
 80138e2:	d102      	bne.n	80138ea <_close_r+0x1a>
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	b103      	cbz	r3, 80138ea <_close_r+0x1a>
 80138e8:	6023      	str	r3, [r4, #0]
 80138ea:	bd38      	pop	{r3, r4, r5, pc}
 80138ec:	20000bc4 	.word	0x20000bc4

080138f0 <__sflags>:
 80138f0:	780b      	ldrb	r3, [r1, #0]
 80138f2:	2b72      	cmp	r3, #114	; 0x72
 80138f4:	b530      	push	{r4, r5, lr}
 80138f6:	d022      	beq.n	801393e <__sflags+0x4e>
 80138f8:	2b77      	cmp	r3, #119	; 0x77
 80138fa:	d024      	beq.n	8013946 <__sflags+0x56>
 80138fc:	2b61      	cmp	r3, #97	; 0x61
 80138fe:	d027      	beq.n	8013950 <__sflags+0x60>
 8013900:	2316      	movs	r3, #22
 8013902:	6003      	str	r3, [r0, #0]
 8013904:	2000      	movs	r0, #0
 8013906:	bd30      	pop	{r4, r5, pc}
 8013908:	2d62      	cmp	r5, #98	; 0x62
 801390a:	d012      	beq.n	8013932 <__sflags+0x42>
 801390c:	2d78      	cmp	r5, #120	; 0x78
 801390e:	d013      	beq.n	8013938 <__sflags+0x48>
 8013910:	2d2b      	cmp	r5, #43	; 0x2b
 8013912:	d107      	bne.n	8013924 <__sflags+0x34>
 8013914:	f020 001c 	bic.w	r0, r0, #28
 8013918:	f023 0303 	bic.w	r3, r3, #3
 801391c:	f040 0010 	orr.w	r0, r0, #16
 8013920:	f043 0302 	orr.w	r3, r3, #2
 8013924:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013928:	2d00      	cmp	r5, #0
 801392a:	d1ed      	bne.n	8013908 <__sflags+0x18>
 801392c:	4323      	orrs	r3, r4
 801392e:	6013      	str	r3, [r2, #0]
 8013930:	e7e9      	b.n	8013906 <__sflags+0x16>
 8013932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013936:	e7f5      	b.n	8013924 <__sflags+0x34>
 8013938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801393c:	e7f2      	b.n	8013924 <__sflags+0x34>
 801393e:	2400      	movs	r4, #0
 8013940:	4623      	mov	r3, r4
 8013942:	2004      	movs	r0, #4
 8013944:	e7ee      	b.n	8013924 <__sflags+0x34>
 8013946:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801394a:	2301      	movs	r3, #1
 801394c:	2008      	movs	r0, #8
 801394e:	e7e9      	b.n	8013924 <__sflags+0x34>
 8013950:	f44f 7402 	mov.w	r4, #520	; 0x208
 8013954:	2301      	movs	r3, #1
 8013956:	f44f 7084 	mov.w	r0, #264	; 0x108
 801395a:	e7e3      	b.n	8013924 <__sflags+0x34>

0801395c <fiprintf>:
 801395c:	b40e      	push	{r1, r2, r3}
 801395e:	b503      	push	{r0, r1, lr}
 8013960:	4601      	mov	r1, r0
 8013962:	ab03      	add	r3, sp, #12
 8013964:	4805      	ldr	r0, [pc, #20]	; (801397c <fiprintf+0x20>)
 8013966:	f853 2b04 	ldr.w	r2, [r3], #4
 801396a:	6800      	ldr	r0, [r0, #0]
 801396c:	9301      	str	r3, [sp, #4]
 801396e:	f000 fb11 	bl	8013f94 <_vfiprintf_r>
 8013972:	b002      	add	sp, #8
 8013974:	f85d eb04 	ldr.w	lr, [sp], #4
 8013978:	b003      	add	sp, #12
 801397a:	4770      	bx	lr
 801397c:	20000100 	.word	0x20000100

08013980 <_fstat_r>:
 8013980:	b538      	push	{r3, r4, r5, lr}
 8013982:	4d07      	ldr	r5, [pc, #28]	; (80139a0 <_fstat_r+0x20>)
 8013984:	2300      	movs	r3, #0
 8013986:	4604      	mov	r4, r0
 8013988:	4608      	mov	r0, r1
 801398a:	4611      	mov	r1, r2
 801398c:	602b      	str	r3, [r5, #0]
 801398e:	f7ed fa47 	bl	8000e20 <_fstat>
 8013992:	1c43      	adds	r3, r0, #1
 8013994:	d102      	bne.n	801399c <_fstat_r+0x1c>
 8013996:	682b      	ldr	r3, [r5, #0]
 8013998:	b103      	cbz	r3, 801399c <_fstat_r+0x1c>
 801399a:	6023      	str	r3, [r4, #0]
 801399c:	bd38      	pop	{r3, r4, r5, pc}
 801399e:	bf00      	nop
 80139a0:	20000bc4 	.word	0x20000bc4

080139a4 <_findenv_r>:
 80139a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a8:	4607      	mov	r7, r0
 80139aa:	4689      	mov	r9, r1
 80139ac:	4616      	mov	r6, r2
 80139ae:	f000 fe97 	bl	80146e0 <__env_lock>
 80139b2:	4b18      	ldr	r3, [pc, #96]	; (8013a14 <_findenv_r+0x70>)
 80139b4:	681c      	ldr	r4, [r3, #0]
 80139b6:	469a      	mov	sl, r3
 80139b8:	b134      	cbz	r4, 80139c8 <_findenv_r+0x24>
 80139ba:	464b      	mov	r3, r9
 80139bc:	4698      	mov	r8, r3
 80139be:	f813 1b01 	ldrb.w	r1, [r3], #1
 80139c2:	b139      	cbz	r1, 80139d4 <_findenv_r+0x30>
 80139c4:	293d      	cmp	r1, #61	; 0x3d
 80139c6:	d1f9      	bne.n	80139bc <_findenv_r+0x18>
 80139c8:	4638      	mov	r0, r7
 80139ca:	f000 fe8f 	bl	80146ec <__env_unlock>
 80139ce:	2000      	movs	r0, #0
 80139d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d4:	eba8 0809 	sub.w	r8, r8, r9
 80139d8:	46a3      	mov	fp, r4
 80139da:	f854 0b04 	ldr.w	r0, [r4], #4
 80139de:	2800      	cmp	r0, #0
 80139e0:	d0f2      	beq.n	80139c8 <_findenv_r+0x24>
 80139e2:	4642      	mov	r2, r8
 80139e4:	4649      	mov	r1, r9
 80139e6:	f000 fe5b 	bl	80146a0 <strncmp>
 80139ea:	2800      	cmp	r0, #0
 80139ec:	d1f4      	bne.n	80139d8 <_findenv_r+0x34>
 80139ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80139f2:	eb03 0508 	add.w	r5, r3, r8
 80139f6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80139fa:	2b3d      	cmp	r3, #61	; 0x3d
 80139fc:	d1ec      	bne.n	80139d8 <_findenv_r+0x34>
 80139fe:	f8da 3000 	ldr.w	r3, [sl]
 8013a02:	ebab 0303 	sub.w	r3, fp, r3
 8013a06:	109b      	asrs	r3, r3, #2
 8013a08:	4638      	mov	r0, r7
 8013a0a:	6033      	str	r3, [r6, #0]
 8013a0c:	f000 fe6e 	bl	80146ec <__env_unlock>
 8013a10:	1c68      	adds	r0, r5, #1
 8013a12:	e7dd      	b.n	80139d0 <_findenv_r+0x2c>
 8013a14:	20000000 	.word	0x20000000

08013a18 <_getenv_r>:
 8013a18:	b507      	push	{r0, r1, r2, lr}
 8013a1a:	aa01      	add	r2, sp, #4
 8013a1c:	f7ff ffc2 	bl	80139a4 <_findenv_r>
 8013a20:	b003      	add	sp, #12
 8013a22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013a28 <_gettimeofday_r>:
 8013a28:	b538      	push	{r3, r4, r5, lr}
 8013a2a:	4d07      	ldr	r5, [pc, #28]	; (8013a48 <_gettimeofday_r+0x20>)
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	4604      	mov	r4, r0
 8013a30:	4608      	mov	r0, r1
 8013a32:	4611      	mov	r1, r2
 8013a34:	602b      	str	r3, [r5, #0]
 8013a36:	f001 fa99 	bl	8014f6c <_gettimeofday>
 8013a3a:	1c43      	adds	r3, r0, #1
 8013a3c:	d102      	bne.n	8013a44 <_gettimeofday_r+0x1c>
 8013a3e:	682b      	ldr	r3, [r5, #0]
 8013a40:	b103      	cbz	r3, 8013a44 <_gettimeofday_r+0x1c>
 8013a42:	6023      	str	r3, [r4, #0]
 8013a44:	bd38      	pop	{r3, r4, r5, pc}
 8013a46:	bf00      	nop
 8013a48:	20000bc4 	.word	0x20000bc4

08013a4c <__gettzinfo>:
 8013a4c:	4800      	ldr	r0, [pc, #0]	; (8013a50 <__gettzinfo+0x4>)
 8013a4e:	4770      	bx	lr
 8013a50:	20000170 	.word	0x20000170

08013a54 <gmtime_r>:
 8013a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a58:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013a5c:	460c      	mov	r4, r1
 8013a5e:	4a51      	ldr	r2, [pc, #324]	; (8013ba4 <gmtime_r+0x150>)
 8013a60:	2300      	movs	r3, #0
 8013a62:	4630      	mov	r0, r6
 8013a64:	4639      	mov	r1, r7
 8013a66:	f7ec fea5 	bl	80007b4 <__aeabi_ldivmod>
 8013a6a:	4639      	mov	r1, r7
 8013a6c:	4605      	mov	r5, r0
 8013a6e:	4a4d      	ldr	r2, [pc, #308]	; (8013ba4 <gmtime_r+0x150>)
 8013a70:	4630      	mov	r0, r6
 8013a72:	2300      	movs	r3, #0
 8013a74:	f7ec fe9e 	bl	80007b4 <__aeabi_ldivmod>
 8013a78:	2a00      	cmp	r2, #0
 8013a7a:	bfbc      	itt	lt
 8013a7c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8013a80:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8013a84:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013a88:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8013a8c:	fbb2 f3f1 	udiv	r3, r2, r1
 8013a90:	fb01 2213 	mls	r2, r1, r3, r2
 8013a94:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8013a98:	bfac      	ite	ge
 8013a9a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8013a9e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8013aa2:	60a3      	str	r3, [r4, #8]
 8013aa4:	fbb2 f3f1 	udiv	r3, r2, r1
 8013aa8:	fb01 2213 	mls	r2, r1, r3, r2
 8013aac:	6063      	str	r3, [r4, #4]
 8013aae:	6022      	str	r2, [r4, #0]
 8013ab0:	1cc3      	adds	r3, r0, #3
 8013ab2:	2207      	movs	r2, #7
 8013ab4:	fb93 f2f2 	sdiv	r2, r3, r2
 8013ab8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8013abc:	1a9b      	subs	r3, r3, r2
 8013abe:	bf48      	it	mi
 8013ac0:	3307      	addmi	r3, #7
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	61a3      	str	r3, [r4, #24]
 8013ac6:	bfb8      	it	lt
 8013ac8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8013acc:	4936      	ldr	r1, [pc, #216]	; (8013ba8 <gmtime_r+0x154>)
 8013ace:	bfae      	itee	ge
 8013ad0:	fb90 f1f1 	sdivge	r1, r0, r1
 8013ad4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8013ad8:	fb93 f1f1 	sdivlt	r1, r3, r1
 8013adc:	4b33      	ldr	r3, [pc, #204]	; (8013bac <gmtime_r+0x158>)
 8013ade:	fb03 0001 	mla	r0, r3, r1, r0
 8013ae2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8013ae6:	fbb0 f2f2 	udiv	r2, r0, r2
 8013aea:	4402      	add	r2, r0
 8013aec:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8013af0:	fbb0 f3fc 	udiv	r3, r0, ip
 8013af4:	1ad2      	subs	r2, r2, r3
 8013af6:	f240 176d 	movw	r7, #365	; 0x16d
 8013afa:	4b2d      	ldr	r3, [pc, #180]	; (8013bb0 <gmtime_r+0x15c>)
 8013afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8013b00:	2664      	movs	r6, #100	; 0x64
 8013b02:	1ad3      	subs	r3, r2, r3
 8013b04:	fbb3 f5f7 	udiv	r5, r3, r7
 8013b08:	fbb3 f3fc 	udiv	r3, r3, ip
 8013b0c:	fbb5 f2f6 	udiv	r2, r5, r6
 8013b10:	1ad3      	subs	r3, r2, r3
 8013b12:	4403      	add	r3, r0
 8013b14:	fb07 3315 	mls	r3, r7, r5, r3
 8013b18:	2099      	movs	r0, #153	; 0x99
 8013b1a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8013b1e:	f10c 0c02 	add.w	ip, ip, #2
 8013b22:	f103 0e01 	add.w	lr, r3, #1
 8013b26:	fbbc f7f0 	udiv	r7, ip, r0
 8013b2a:	4378      	muls	r0, r7
 8013b2c:	3002      	adds	r0, #2
 8013b2e:	f04f 0805 	mov.w	r8, #5
 8013b32:	fbb0 f0f8 	udiv	r0, r0, r8
 8013b36:	ebae 0000 	sub.w	r0, lr, r0
 8013b3a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8013b3e:	45f4      	cmp	ip, lr
 8013b40:	bf94      	ite	ls
 8013b42:	f04f 0c02 	movls.w	ip, #2
 8013b46:	f06f 0c09 	mvnhi.w	ip, #9
 8013b4a:	4467      	add	r7, ip
 8013b4c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8013b50:	fb0c 5101 	mla	r1, ip, r1, r5
 8013b54:	2f01      	cmp	r7, #1
 8013b56:	bf98      	it	ls
 8013b58:	3101      	addls	r1, #1
 8013b5a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8013b5e:	d30c      	bcc.n	8013b7a <gmtime_r+0x126>
 8013b60:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8013b64:	61e3      	str	r3, [r4, #28]
 8013b66:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	60e0      	str	r0, [r4, #12]
 8013b6e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8013b72:	6223      	str	r3, [r4, #32]
 8013b74:	4620      	mov	r0, r4
 8013b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b7a:	f015 0f03 	tst.w	r5, #3
 8013b7e:	d102      	bne.n	8013b86 <gmtime_r+0x132>
 8013b80:	fb06 5212 	mls	r2, r6, r2, r5
 8013b84:	b95a      	cbnz	r2, 8013b9e <gmtime_r+0x14a>
 8013b86:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8013b8a:	fbb5 f2f6 	udiv	r2, r5, r6
 8013b8e:	fb06 5212 	mls	r2, r6, r2, r5
 8013b92:	fab2 f282 	clz	r2, r2
 8013b96:	0952      	lsrs	r2, r2, #5
 8013b98:	333b      	adds	r3, #59	; 0x3b
 8013b9a:	4413      	add	r3, r2
 8013b9c:	e7e2      	b.n	8013b64 <gmtime_r+0x110>
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	e7fa      	b.n	8013b98 <gmtime_r+0x144>
 8013ba2:	bf00      	nop
 8013ba4:	00015180 	.word	0x00015180
 8013ba8:	00023ab1 	.word	0x00023ab1
 8013bac:	fffdc54f 	.word	0xfffdc54f
 8013bb0:	00023ab0 	.word	0x00023ab0

08013bb4 <_isatty_r>:
 8013bb4:	b538      	push	{r3, r4, r5, lr}
 8013bb6:	4d06      	ldr	r5, [pc, #24]	; (8013bd0 <_isatty_r+0x1c>)
 8013bb8:	2300      	movs	r3, #0
 8013bba:	4604      	mov	r4, r0
 8013bbc:	4608      	mov	r0, r1
 8013bbe:	602b      	str	r3, [r5, #0]
 8013bc0:	f7ed f93e 	bl	8000e40 <_isatty>
 8013bc4:	1c43      	adds	r3, r0, #1
 8013bc6:	d102      	bne.n	8013bce <_isatty_r+0x1a>
 8013bc8:	682b      	ldr	r3, [r5, #0]
 8013bca:	b103      	cbz	r3, 8013bce <_isatty_r+0x1a>
 8013bcc:	6023      	str	r3, [r4, #0]
 8013bce:	bd38      	pop	{r3, r4, r5, pc}
 8013bd0:	20000bc4 	.word	0x20000bc4

08013bd4 <labs>:
 8013bd4:	2800      	cmp	r0, #0
 8013bd6:	bfb8      	it	lt
 8013bd8:	4240      	neglt	r0, r0
 8013bda:	4770      	bx	lr

08013bdc <_lseek_r>:
 8013bdc:	b538      	push	{r3, r4, r5, lr}
 8013bde:	4d07      	ldr	r5, [pc, #28]	; (8013bfc <_lseek_r+0x20>)
 8013be0:	4604      	mov	r4, r0
 8013be2:	4608      	mov	r0, r1
 8013be4:	4611      	mov	r1, r2
 8013be6:	2200      	movs	r2, #0
 8013be8:	602a      	str	r2, [r5, #0]
 8013bea:	461a      	mov	r2, r3
 8013bec:	f7ed f933 	bl	8000e56 <_lseek>
 8013bf0:	1c43      	adds	r3, r0, #1
 8013bf2:	d102      	bne.n	8013bfa <_lseek_r+0x1e>
 8013bf4:	682b      	ldr	r3, [r5, #0]
 8013bf6:	b103      	cbz	r3, 8013bfa <_lseek_r+0x1e>
 8013bf8:	6023      	str	r3, [r4, #0]
 8013bfa:	bd38      	pop	{r3, r4, r5, pc}
 8013bfc:	20000bc4 	.word	0x20000bc4

08013c00 <__ascii_mbtowc>:
 8013c00:	b082      	sub	sp, #8
 8013c02:	b901      	cbnz	r1, 8013c06 <__ascii_mbtowc+0x6>
 8013c04:	a901      	add	r1, sp, #4
 8013c06:	b142      	cbz	r2, 8013c1a <__ascii_mbtowc+0x1a>
 8013c08:	b14b      	cbz	r3, 8013c1e <__ascii_mbtowc+0x1e>
 8013c0a:	7813      	ldrb	r3, [r2, #0]
 8013c0c:	600b      	str	r3, [r1, #0]
 8013c0e:	7812      	ldrb	r2, [r2, #0]
 8013c10:	1e10      	subs	r0, r2, #0
 8013c12:	bf18      	it	ne
 8013c14:	2001      	movne	r0, #1
 8013c16:	b002      	add	sp, #8
 8013c18:	4770      	bx	lr
 8013c1a:	4610      	mov	r0, r2
 8013c1c:	e7fb      	b.n	8013c16 <__ascii_mbtowc+0x16>
 8013c1e:	f06f 0001 	mvn.w	r0, #1
 8013c22:	e7f8      	b.n	8013c16 <__ascii_mbtowc+0x16>

08013c24 <__malloc_lock>:
 8013c24:	4801      	ldr	r0, [pc, #4]	; (8013c2c <__malloc_lock+0x8>)
 8013c26:	f7fe ba10 	b.w	801204a <__retarget_lock_acquire_recursive>
 8013c2a:	bf00      	nop
 8013c2c:	20000bbc 	.word	0x20000bbc

08013c30 <__malloc_unlock>:
 8013c30:	4801      	ldr	r0, [pc, #4]	; (8013c38 <__malloc_unlock+0x8>)
 8013c32:	f7fe ba0c 	b.w	801204e <__retarget_lock_release_recursive>
 8013c36:	bf00      	nop
 8013c38:	20000bbc 	.word	0x20000bbc

08013c3c <_realloc_r>:
 8013c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c3e:	4607      	mov	r7, r0
 8013c40:	4614      	mov	r4, r2
 8013c42:	460e      	mov	r6, r1
 8013c44:	b921      	cbnz	r1, 8013c50 <_realloc_r+0x14>
 8013c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013c4a:	4611      	mov	r1, r2
 8013c4c:	f7fe baea 	b.w	8012224 <_malloc_r>
 8013c50:	b922      	cbnz	r2, 8013c5c <_realloc_r+0x20>
 8013c52:	f7fe fa97 	bl	8012184 <_free_r>
 8013c56:	4625      	mov	r5, r4
 8013c58:	4628      	mov	r0, r5
 8013c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c5c:	f000 fd66 	bl	801472c <_malloc_usable_size_r>
 8013c60:	42a0      	cmp	r0, r4
 8013c62:	d20f      	bcs.n	8013c84 <_realloc_r+0x48>
 8013c64:	4621      	mov	r1, r4
 8013c66:	4638      	mov	r0, r7
 8013c68:	f7fe fadc 	bl	8012224 <_malloc_r>
 8013c6c:	4605      	mov	r5, r0
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d0f2      	beq.n	8013c58 <_realloc_r+0x1c>
 8013c72:	4631      	mov	r1, r6
 8013c74:	4622      	mov	r2, r4
 8013c76:	f7fe fa5f 	bl	8012138 <memcpy>
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	4638      	mov	r0, r7
 8013c7e:	f7fe fa81 	bl	8012184 <_free_r>
 8013c82:	e7e9      	b.n	8013c58 <_realloc_r+0x1c>
 8013c84:	4635      	mov	r5, r6
 8013c86:	e7e7      	b.n	8013c58 <_realloc_r+0x1c>

08013c88 <__ssputs_r>:
 8013c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c8c:	688e      	ldr	r6, [r1, #8]
 8013c8e:	429e      	cmp	r6, r3
 8013c90:	4682      	mov	sl, r0
 8013c92:	460c      	mov	r4, r1
 8013c94:	4690      	mov	r8, r2
 8013c96:	461f      	mov	r7, r3
 8013c98:	d838      	bhi.n	8013d0c <__ssputs_r+0x84>
 8013c9a:	898a      	ldrh	r2, [r1, #12]
 8013c9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ca0:	d032      	beq.n	8013d08 <__ssputs_r+0x80>
 8013ca2:	6825      	ldr	r5, [r4, #0]
 8013ca4:	6909      	ldr	r1, [r1, #16]
 8013ca6:	eba5 0901 	sub.w	r9, r5, r1
 8013caa:	6965      	ldr	r5, [r4, #20]
 8013cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013cb4:	3301      	adds	r3, #1
 8013cb6:	444b      	add	r3, r9
 8013cb8:	106d      	asrs	r5, r5, #1
 8013cba:	429d      	cmp	r5, r3
 8013cbc:	bf38      	it	cc
 8013cbe:	461d      	movcc	r5, r3
 8013cc0:	0553      	lsls	r3, r2, #21
 8013cc2:	d531      	bpl.n	8013d28 <__ssputs_r+0xa0>
 8013cc4:	4629      	mov	r1, r5
 8013cc6:	f7fe faad 	bl	8012224 <_malloc_r>
 8013cca:	4606      	mov	r6, r0
 8013ccc:	b950      	cbnz	r0, 8013ce4 <__ssputs_r+0x5c>
 8013cce:	230c      	movs	r3, #12
 8013cd0:	f8ca 3000 	str.w	r3, [sl]
 8013cd4:	89a3      	ldrh	r3, [r4, #12]
 8013cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cda:	81a3      	strh	r3, [r4, #12]
 8013cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8013ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ce4:	6921      	ldr	r1, [r4, #16]
 8013ce6:	464a      	mov	r2, r9
 8013ce8:	f7fe fa26 	bl	8012138 <memcpy>
 8013cec:	89a3      	ldrh	r3, [r4, #12]
 8013cee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cf6:	81a3      	strh	r3, [r4, #12]
 8013cf8:	6126      	str	r6, [r4, #16]
 8013cfa:	6165      	str	r5, [r4, #20]
 8013cfc:	444e      	add	r6, r9
 8013cfe:	eba5 0509 	sub.w	r5, r5, r9
 8013d02:	6026      	str	r6, [r4, #0]
 8013d04:	60a5      	str	r5, [r4, #8]
 8013d06:	463e      	mov	r6, r7
 8013d08:	42be      	cmp	r6, r7
 8013d0a:	d900      	bls.n	8013d0e <__ssputs_r+0x86>
 8013d0c:	463e      	mov	r6, r7
 8013d0e:	4632      	mov	r2, r6
 8013d10:	6820      	ldr	r0, [r4, #0]
 8013d12:	4641      	mov	r1, r8
 8013d14:	f000 fcf0 	bl	80146f8 <memmove>
 8013d18:	68a3      	ldr	r3, [r4, #8]
 8013d1a:	6822      	ldr	r2, [r4, #0]
 8013d1c:	1b9b      	subs	r3, r3, r6
 8013d1e:	4432      	add	r2, r6
 8013d20:	60a3      	str	r3, [r4, #8]
 8013d22:	6022      	str	r2, [r4, #0]
 8013d24:	2000      	movs	r0, #0
 8013d26:	e7db      	b.n	8013ce0 <__ssputs_r+0x58>
 8013d28:	462a      	mov	r2, r5
 8013d2a:	f7ff ff87 	bl	8013c3c <_realloc_r>
 8013d2e:	4606      	mov	r6, r0
 8013d30:	2800      	cmp	r0, #0
 8013d32:	d1e1      	bne.n	8013cf8 <__ssputs_r+0x70>
 8013d34:	6921      	ldr	r1, [r4, #16]
 8013d36:	4650      	mov	r0, sl
 8013d38:	f7fe fa24 	bl	8012184 <_free_r>
 8013d3c:	e7c7      	b.n	8013cce <__ssputs_r+0x46>
	...

08013d40 <_svfiprintf_r>:
 8013d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d44:	4698      	mov	r8, r3
 8013d46:	898b      	ldrh	r3, [r1, #12]
 8013d48:	061b      	lsls	r3, r3, #24
 8013d4a:	b09d      	sub	sp, #116	; 0x74
 8013d4c:	4607      	mov	r7, r0
 8013d4e:	460d      	mov	r5, r1
 8013d50:	4614      	mov	r4, r2
 8013d52:	d50e      	bpl.n	8013d72 <_svfiprintf_r+0x32>
 8013d54:	690b      	ldr	r3, [r1, #16]
 8013d56:	b963      	cbnz	r3, 8013d72 <_svfiprintf_r+0x32>
 8013d58:	2140      	movs	r1, #64	; 0x40
 8013d5a:	f7fe fa63 	bl	8012224 <_malloc_r>
 8013d5e:	6028      	str	r0, [r5, #0]
 8013d60:	6128      	str	r0, [r5, #16]
 8013d62:	b920      	cbnz	r0, 8013d6e <_svfiprintf_r+0x2e>
 8013d64:	230c      	movs	r3, #12
 8013d66:	603b      	str	r3, [r7, #0]
 8013d68:	f04f 30ff 	mov.w	r0, #4294967295
 8013d6c:	e0d1      	b.n	8013f12 <_svfiprintf_r+0x1d2>
 8013d6e:	2340      	movs	r3, #64	; 0x40
 8013d70:	616b      	str	r3, [r5, #20]
 8013d72:	2300      	movs	r3, #0
 8013d74:	9309      	str	r3, [sp, #36]	; 0x24
 8013d76:	2320      	movs	r3, #32
 8013d78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d80:	2330      	movs	r3, #48	; 0x30
 8013d82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013f2c <_svfiprintf_r+0x1ec>
 8013d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d8a:	f04f 0901 	mov.w	r9, #1
 8013d8e:	4623      	mov	r3, r4
 8013d90:	469a      	mov	sl, r3
 8013d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d96:	b10a      	cbz	r2, 8013d9c <_svfiprintf_r+0x5c>
 8013d98:	2a25      	cmp	r2, #37	; 0x25
 8013d9a:	d1f9      	bne.n	8013d90 <_svfiprintf_r+0x50>
 8013d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8013da0:	d00b      	beq.n	8013dba <_svfiprintf_r+0x7a>
 8013da2:	465b      	mov	r3, fp
 8013da4:	4622      	mov	r2, r4
 8013da6:	4629      	mov	r1, r5
 8013da8:	4638      	mov	r0, r7
 8013daa:	f7ff ff6d 	bl	8013c88 <__ssputs_r>
 8013dae:	3001      	adds	r0, #1
 8013db0:	f000 80aa 	beq.w	8013f08 <_svfiprintf_r+0x1c8>
 8013db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013db6:	445a      	add	r2, fp
 8013db8:	9209      	str	r2, [sp, #36]	; 0x24
 8013dba:	f89a 3000 	ldrb.w	r3, [sl]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	f000 80a2 	beq.w	8013f08 <_svfiprintf_r+0x1c8>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8013dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dce:	f10a 0a01 	add.w	sl, sl, #1
 8013dd2:	9304      	str	r3, [sp, #16]
 8013dd4:	9307      	str	r3, [sp, #28]
 8013dd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013dda:	931a      	str	r3, [sp, #104]	; 0x68
 8013ddc:	4654      	mov	r4, sl
 8013dde:	2205      	movs	r2, #5
 8013de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013de4:	4851      	ldr	r0, [pc, #324]	; (8013f2c <_svfiprintf_r+0x1ec>)
 8013de6:	f7ec fa3b 	bl	8000260 <memchr>
 8013dea:	9a04      	ldr	r2, [sp, #16]
 8013dec:	b9d8      	cbnz	r0, 8013e26 <_svfiprintf_r+0xe6>
 8013dee:	06d0      	lsls	r0, r2, #27
 8013df0:	bf44      	itt	mi
 8013df2:	2320      	movmi	r3, #32
 8013df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013df8:	0711      	lsls	r1, r2, #28
 8013dfa:	bf44      	itt	mi
 8013dfc:	232b      	movmi	r3, #43	; 0x2b
 8013dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e02:	f89a 3000 	ldrb.w	r3, [sl]
 8013e06:	2b2a      	cmp	r3, #42	; 0x2a
 8013e08:	d015      	beq.n	8013e36 <_svfiprintf_r+0xf6>
 8013e0a:	9a07      	ldr	r2, [sp, #28]
 8013e0c:	4654      	mov	r4, sl
 8013e0e:	2000      	movs	r0, #0
 8013e10:	f04f 0c0a 	mov.w	ip, #10
 8013e14:	4621      	mov	r1, r4
 8013e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e1a:	3b30      	subs	r3, #48	; 0x30
 8013e1c:	2b09      	cmp	r3, #9
 8013e1e:	d94e      	bls.n	8013ebe <_svfiprintf_r+0x17e>
 8013e20:	b1b0      	cbz	r0, 8013e50 <_svfiprintf_r+0x110>
 8013e22:	9207      	str	r2, [sp, #28]
 8013e24:	e014      	b.n	8013e50 <_svfiprintf_r+0x110>
 8013e26:	eba0 0308 	sub.w	r3, r0, r8
 8013e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	9304      	str	r3, [sp, #16]
 8013e32:	46a2      	mov	sl, r4
 8013e34:	e7d2      	b.n	8013ddc <_svfiprintf_r+0x9c>
 8013e36:	9b03      	ldr	r3, [sp, #12]
 8013e38:	1d19      	adds	r1, r3, #4
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	9103      	str	r1, [sp, #12]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	bfbb      	ittet	lt
 8013e42:	425b      	neglt	r3, r3
 8013e44:	f042 0202 	orrlt.w	r2, r2, #2
 8013e48:	9307      	strge	r3, [sp, #28]
 8013e4a:	9307      	strlt	r3, [sp, #28]
 8013e4c:	bfb8      	it	lt
 8013e4e:	9204      	strlt	r2, [sp, #16]
 8013e50:	7823      	ldrb	r3, [r4, #0]
 8013e52:	2b2e      	cmp	r3, #46	; 0x2e
 8013e54:	d10c      	bne.n	8013e70 <_svfiprintf_r+0x130>
 8013e56:	7863      	ldrb	r3, [r4, #1]
 8013e58:	2b2a      	cmp	r3, #42	; 0x2a
 8013e5a:	d135      	bne.n	8013ec8 <_svfiprintf_r+0x188>
 8013e5c:	9b03      	ldr	r3, [sp, #12]
 8013e5e:	1d1a      	adds	r2, r3, #4
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	9203      	str	r2, [sp, #12]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	bfb8      	it	lt
 8013e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e6c:	3402      	adds	r4, #2
 8013e6e:	9305      	str	r3, [sp, #20]
 8013e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013f3c <_svfiprintf_r+0x1fc>
 8013e74:	7821      	ldrb	r1, [r4, #0]
 8013e76:	2203      	movs	r2, #3
 8013e78:	4650      	mov	r0, sl
 8013e7a:	f7ec f9f1 	bl	8000260 <memchr>
 8013e7e:	b140      	cbz	r0, 8013e92 <_svfiprintf_r+0x152>
 8013e80:	2340      	movs	r3, #64	; 0x40
 8013e82:	eba0 000a 	sub.w	r0, r0, sl
 8013e86:	fa03 f000 	lsl.w	r0, r3, r0
 8013e8a:	9b04      	ldr	r3, [sp, #16]
 8013e8c:	4303      	orrs	r3, r0
 8013e8e:	3401      	adds	r4, #1
 8013e90:	9304      	str	r3, [sp, #16]
 8013e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e96:	4826      	ldr	r0, [pc, #152]	; (8013f30 <_svfiprintf_r+0x1f0>)
 8013e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e9c:	2206      	movs	r2, #6
 8013e9e:	f7ec f9df 	bl	8000260 <memchr>
 8013ea2:	2800      	cmp	r0, #0
 8013ea4:	d038      	beq.n	8013f18 <_svfiprintf_r+0x1d8>
 8013ea6:	4b23      	ldr	r3, [pc, #140]	; (8013f34 <_svfiprintf_r+0x1f4>)
 8013ea8:	bb1b      	cbnz	r3, 8013ef2 <_svfiprintf_r+0x1b2>
 8013eaa:	9b03      	ldr	r3, [sp, #12]
 8013eac:	3307      	adds	r3, #7
 8013eae:	f023 0307 	bic.w	r3, r3, #7
 8013eb2:	3308      	adds	r3, #8
 8013eb4:	9303      	str	r3, [sp, #12]
 8013eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eb8:	4433      	add	r3, r6
 8013eba:	9309      	str	r3, [sp, #36]	; 0x24
 8013ebc:	e767      	b.n	8013d8e <_svfiprintf_r+0x4e>
 8013ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ec2:	460c      	mov	r4, r1
 8013ec4:	2001      	movs	r0, #1
 8013ec6:	e7a5      	b.n	8013e14 <_svfiprintf_r+0xd4>
 8013ec8:	2300      	movs	r3, #0
 8013eca:	3401      	adds	r4, #1
 8013ecc:	9305      	str	r3, [sp, #20]
 8013ece:	4619      	mov	r1, r3
 8013ed0:	f04f 0c0a 	mov.w	ip, #10
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013eda:	3a30      	subs	r2, #48	; 0x30
 8013edc:	2a09      	cmp	r2, #9
 8013ede:	d903      	bls.n	8013ee8 <_svfiprintf_r+0x1a8>
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d0c5      	beq.n	8013e70 <_svfiprintf_r+0x130>
 8013ee4:	9105      	str	r1, [sp, #20]
 8013ee6:	e7c3      	b.n	8013e70 <_svfiprintf_r+0x130>
 8013ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013eec:	4604      	mov	r4, r0
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e7f0      	b.n	8013ed4 <_svfiprintf_r+0x194>
 8013ef2:	ab03      	add	r3, sp, #12
 8013ef4:	9300      	str	r3, [sp, #0]
 8013ef6:	462a      	mov	r2, r5
 8013ef8:	4b0f      	ldr	r3, [pc, #60]	; (8013f38 <_svfiprintf_r+0x1f8>)
 8013efa:	a904      	add	r1, sp, #16
 8013efc:	4638      	mov	r0, r7
 8013efe:	f3af 8000 	nop.w
 8013f02:	1c42      	adds	r2, r0, #1
 8013f04:	4606      	mov	r6, r0
 8013f06:	d1d6      	bne.n	8013eb6 <_svfiprintf_r+0x176>
 8013f08:	89ab      	ldrh	r3, [r5, #12]
 8013f0a:	065b      	lsls	r3, r3, #25
 8013f0c:	f53f af2c 	bmi.w	8013d68 <_svfiprintf_r+0x28>
 8013f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f12:	b01d      	add	sp, #116	; 0x74
 8013f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f18:	ab03      	add	r3, sp, #12
 8013f1a:	9300      	str	r3, [sp, #0]
 8013f1c:	462a      	mov	r2, r5
 8013f1e:	4b06      	ldr	r3, [pc, #24]	; (8013f38 <_svfiprintf_r+0x1f8>)
 8013f20:	a904      	add	r1, sp, #16
 8013f22:	4638      	mov	r0, r7
 8013f24:	f000 f9d4 	bl	80142d0 <_printf_i>
 8013f28:	e7eb      	b.n	8013f02 <_svfiprintf_r+0x1c2>
 8013f2a:	bf00      	nop
 8013f2c:	080181a3 	.word	0x080181a3
 8013f30:	080181ad 	.word	0x080181ad
 8013f34:	00000000 	.word	0x00000000
 8013f38:	08013c89 	.word	0x08013c89
 8013f3c:	080181a9 	.word	0x080181a9

08013f40 <__sfputc_r>:
 8013f40:	6893      	ldr	r3, [r2, #8]
 8013f42:	3b01      	subs	r3, #1
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	b410      	push	{r4}
 8013f48:	6093      	str	r3, [r2, #8]
 8013f4a:	da08      	bge.n	8013f5e <__sfputc_r+0x1e>
 8013f4c:	6994      	ldr	r4, [r2, #24]
 8013f4e:	42a3      	cmp	r3, r4
 8013f50:	db01      	blt.n	8013f56 <__sfputc_r+0x16>
 8013f52:	290a      	cmp	r1, #10
 8013f54:	d103      	bne.n	8013f5e <__sfputc_r+0x1e>
 8013f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f5a:	f7ff bb63 	b.w	8013624 <__swbuf_r>
 8013f5e:	6813      	ldr	r3, [r2, #0]
 8013f60:	1c58      	adds	r0, r3, #1
 8013f62:	6010      	str	r0, [r2, #0]
 8013f64:	7019      	strb	r1, [r3, #0]
 8013f66:	4608      	mov	r0, r1
 8013f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f6c:	4770      	bx	lr

08013f6e <__sfputs_r>:
 8013f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f70:	4606      	mov	r6, r0
 8013f72:	460f      	mov	r7, r1
 8013f74:	4614      	mov	r4, r2
 8013f76:	18d5      	adds	r5, r2, r3
 8013f78:	42ac      	cmp	r4, r5
 8013f7a:	d101      	bne.n	8013f80 <__sfputs_r+0x12>
 8013f7c:	2000      	movs	r0, #0
 8013f7e:	e007      	b.n	8013f90 <__sfputs_r+0x22>
 8013f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f84:	463a      	mov	r2, r7
 8013f86:	4630      	mov	r0, r6
 8013f88:	f7ff ffda 	bl	8013f40 <__sfputc_r>
 8013f8c:	1c43      	adds	r3, r0, #1
 8013f8e:	d1f3      	bne.n	8013f78 <__sfputs_r+0xa>
 8013f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013f94 <_vfiprintf_r>:
 8013f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f98:	460d      	mov	r5, r1
 8013f9a:	b09d      	sub	sp, #116	; 0x74
 8013f9c:	4614      	mov	r4, r2
 8013f9e:	4698      	mov	r8, r3
 8013fa0:	4606      	mov	r6, r0
 8013fa2:	b118      	cbz	r0, 8013fac <_vfiprintf_r+0x18>
 8013fa4:	6983      	ldr	r3, [r0, #24]
 8013fa6:	b90b      	cbnz	r3, 8013fac <_vfiprintf_r+0x18>
 8013fa8:	f7fd fc9c 	bl	80118e4 <__sinit>
 8013fac:	4b89      	ldr	r3, [pc, #548]	; (80141d4 <_vfiprintf_r+0x240>)
 8013fae:	429d      	cmp	r5, r3
 8013fb0:	d11b      	bne.n	8013fea <_vfiprintf_r+0x56>
 8013fb2:	6875      	ldr	r5, [r6, #4]
 8013fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fb6:	07d9      	lsls	r1, r3, #31
 8013fb8:	d405      	bmi.n	8013fc6 <_vfiprintf_r+0x32>
 8013fba:	89ab      	ldrh	r3, [r5, #12]
 8013fbc:	059a      	lsls	r2, r3, #22
 8013fbe:	d402      	bmi.n	8013fc6 <_vfiprintf_r+0x32>
 8013fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fc2:	f7fe f842 	bl	801204a <__retarget_lock_acquire_recursive>
 8013fc6:	89ab      	ldrh	r3, [r5, #12]
 8013fc8:	071b      	lsls	r3, r3, #28
 8013fca:	d501      	bpl.n	8013fd0 <_vfiprintf_r+0x3c>
 8013fcc:	692b      	ldr	r3, [r5, #16]
 8013fce:	b9eb      	cbnz	r3, 801400c <_vfiprintf_r+0x78>
 8013fd0:	4629      	mov	r1, r5
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	f7ff fb8a 	bl	80136ec <__swsetup_r>
 8013fd8:	b1c0      	cbz	r0, 801400c <_vfiprintf_r+0x78>
 8013fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fdc:	07dc      	lsls	r4, r3, #31
 8013fde:	d50e      	bpl.n	8013ffe <_vfiprintf_r+0x6a>
 8013fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe4:	b01d      	add	sp, #116	; 0x74
 8013fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fea:	4b7b      	ldr	r3, [pc, #492]	; (80141d8 <_vfiprintf_r+0x244>)
 8013fec:	429d      	cmp	r5, r3
 8013fee:	d101      	bne.n	8013ff4 <_vfiprintf_r+0x60>
 8013ff0:	68b5      	ldr	r5, [r6, #8]
 8013ff2:	e7df      	b.n	8013fb4 <_vfiprintf_r+0x20>
 8013ff4:	4b79      	ldr	r3, [pc, #484]	; (80141dc <_vfiprintf_r+0x248>)
 8013ff6:	429d      	cmp	r5, r3
 8013ff8:	bf08      	it	eq
 8013ffa:	68f5      	ldreq	r5, [r6, #12]
 8013ffc:	e7da      	b.n	8013fb4 <_vfiprintf_r+0x20>
 8013ffe:	89ab      	ldrh	r3, [r5, #12]
 8014000:	0598      	lsls	r0, r3, #22
 8014002:	d4ed      	bmi.n	8013fe0 <_vfiprintf_r+0x4c>
 8014004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014006:	f7fe f822 	bl	801204e <__retarget_lock_release_recursive>
 801400a:	e7e9      	b.n	8013fe0 <_vfiprintf_r+0x4c>
 801400c:	2300      	movs	r3, #0
 801400e:	9309      	str	r3, [sp, #36]	; 0x24
 8014010:	2320      	movs	r3, #32
 8014012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014016:	f8cd 800c 	str.w	r8, [sp, #12]
 801401a:	2330      	movs	r3, #48	; 0x30
 801401c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80141e0 <_vfiprintf_r+0x24c>
 8014020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014024:	f04f 0901 	mov.w	r9, #1
 8014028:	4623      	mov	r3, r4
 801402a:	469a      	mov	sl, r3
 801402c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014030:	b10a      	cbz	r2, 8014036 <_vfiprintf_r+0xa2>
 8014032:	2a25      	cmp	r2, #37	; 0x25
 8014034:	d1f9      	bne.n	801402a <_vfiprintf_r+0x96>
 8014036:	ebba 0b04 	subs.w	fp, sl, r4
 801403a:	d00b      	beq.n	8014054 <_vfiprintf_r+0xc0>
 801403c:	465b      	mov	r3, fp
 801403e:	4622      	mov	r2, r4
 8014040:	4629      	mov	r1, r5
 8014042:	4630      	mov	r0, r6
 8014044:	f7ff ff93 	bl	8013f6e <__sfputs_r>
 8014048:	3001      	adds	r0, #1
 801404a:	f000 80aa 	beq.w	80141a2 <_vfiprintf_r+0x20e>
 801404e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014050:	445a      	add	r2, fp
 8014052:	9209      	str	r2, [sp, #36]	; 0x24
 8014054:	f89a 3000 	ldrb.w	r3, [sl]
 8014058:	2b00      	cmp	r3, #0
 801405a:	f000 80a2 	beq.w	80141a2 <_vfiprintf_r+0x20e>
 801405e:	2300      	movs	r3, #0
 8014060:	f04f 32ff 	mov.w	r2, #4294967295
 8014064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014068:	f10a 0a01 	add.w	sl, sl, #1
 801406c:	9304      	str	r3, [sp, #16]
 801406e:	9307      	str	r3, [sp, #28]
 8014070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014074:	931a      	str	r3, [sp, #104]	; 0x68
 8014076:	4654      	mov	r4, sl
 8014078:	2205      	movs	r2, #5
 801407a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801407e:	4858      	ldr	r0, [pc, #352]	; (80141e0 <_vfiprintf_r+0x24c>)
 8014080:	f7ec f8ee 	bl	8000260 <memchr>
 8014084:	9a04      	ldr	r2, [sp, #16]
 8014086:	b9d8      	cbnz	r0, 80140c0 <_vfiprintf_r+0x12c>
 8014088:	06d1      	lsls	r1, r2, #27
 801408a:	bf44      	itt	mi
 801408c:	2320      	movmi	r3, #32
 801408e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014092:	0713      	lsls	r3, r2, #28
 8014094:	bf44      	itt	mi
 8014096:	232b      	movmi	r3, #43	; 0x2b
 8014098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801409c:	f89a 3000 	ldrb.w	r3, [sl]
 80140a0:	2b2a      	cmp	r3, #42	; 0x2a
 80140a2:	d015      	beq.n	80140d0 <_vfiprintf_r+0x13c>
 80140a4:	9a07      	ldr	r2, [sp, #28]
 80140a6:	4654      	mov	r4, sl
 80140a8:	2000      	movs	r0, #0
 80140aa:	f04f 0c0a 	mov.w	ip, #10
 80140ae:	4621      	mov	r1, r4
 80140b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140b4:	3b30      	subs	r3, #48	; 0x30
 80140b6:	2b09      	cmp	r3, #9
 80140b8:	d94e      	bls.n	8014158 <_vfiprintf_r+0x1c4>
 80140ba:	b1b0      	cbz	r0, 80140ea <_vfiprintf_r+0x156>
 80140bc:	9207      	str	r2, [sp, #28]
 80140be:	e014      	b.n	80140ea <_vfiprintf_r+0x156>
 80140c0:	eba0 0308 	sub.w	r3, r0, r8
 80140c4:	fa09 f303 	lsl.w	r3, r9, r3
 80140c8:	4313      	orrs	r3, r2
 80140ca:	9304      	str	r3, [sp, #16]
 80140cc:	46a2      	mov	sl, r4
 80140ce:	e7d2      	b.n	8014076 <_vfiprintf_r+0xe2>
 80140d0:	9b03      	ldr	r3, [sp, #12]
 80140d2:	1d19      	adds	r1, r3, #4
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	9103      	str	r1, [sp, #12]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	bfbb      	ittet	lt
 80140dc:	425b      	neglt	r3, r3
 80140de:	f042 0202 	orrlt.w	r2, r2, #2
 80140e2:	9307      	strge	r3, [sp, #28]
 80140e4:	9307      	strlt	r3, [sp, #28]
 80140e6:	bfb8      	it	lt
 80140e8:	9204      	strlt	r2, [sp, #16]
 80140ea:	7823      	ldrb	r3, [r4, #0]
 80140ec:	2b2e      	cmp	r3, #46	; 0x2e
 80140ee:	d10c      	bne.n	801410a <_vfiprintf_r+0x176>
 80140f0:	7863      	ldrb	r3, [r4, #1]
 80140f2:	2b2a      	cmp	r3, #42	; 0x2a
 80140f4:	d135      	bne.n	8014162 <_vfiprintf_r+0x1ce>
 80140f6:	9b03      	ldr	r3, [sp, #12]
 80140f8:	1d1a      	adds	r2, r3, #4
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	9203      	str	r2, [sp, #12]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	bfb8      	it	lt
 8014102:	f04f 33ff 	movlt.w	r3, #4294967295
 8014106:	3402      	adds	r4, #2
 8014108:	9305      	str	r3, [sp, #20]
 801410a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80141f0 <_vfiprintf_r+0x25c>
 801410e:	7821      	ldrb	r1, [r4, #0]
 8014110:	2203      	movs	r2, #3
 8014112:	4650      	mov	r0, sl
 8014114:	f7ec f8a4 	bl	8000260 <memchr>
 8014118:	b140      	cbz	r0, 801412c <_vfiprintf_r+0x198>
 801411a:	2340      	movs	r3, #64	; 0x40
 801411c:	eba0 000a 	sub.w	r0, r0, sl
 8014120:	fa03 f000 	lsl.w	r0, r3, r0
 8014124:	9b04      	ldr	r3, [sp, #16]
 8014126:	4303      	orrs	r3, r0
 8014128:	3401      	adds	r4, #1
 801412a:	9304      	str	r3, [sp, #16]
 801412c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014130:	482c      	ldr	r0, [pc, #176]	; (80141e4 <_vfiprintf_r+0x250>)
 8014132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014136:	2206      	movs	r2, #6
 8014138:	f7ec f892 	bl	8000260 <memchr>
 801413c:	2800      	cmp	r0, #0
 801413e:	d03f      	beq.n	80141c0 <_vfiprintf_r+0x22c>
 8014140:	4b29      	ldr	r3, [pc, #164]	; (80141e8 <_vfiprintf_r+0x254>)
 8014142:	bb1b      	cbnz	r3, 801418c <_vfiprintf_r+0x1f8>
 8014144:	9b03      	ldr	r3, [sp, #12]
 8014146:	3307      	adds	r3, #7
 8014148:	f023 0307 	bic.w	r3, r3, #7
 801414c:	3308      	adds	r3, #8
 801414e:	9303      	str	r3, [sp, #12]
 8014150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014152:	443b      	add	r3, r7
 8014154:	9309      	str	r3, [sp, #36]	; 0x24
 8014156:	e767      	b.n	8014028 <_vfiprintf_r+0x94>
 8014158:	fb0c 3202 	mla	r2, ip, r2, r3
 801415c:	460c      	mov	r4, r1
 801415e:	2001      	movs	r0, #1
 8014160:	e7a5      	b.n	80140ae <_vfiprintf_r+0x11a>
 8014162:	2300      	movs	r3, #0
 8014164:	3401      	adds	r4, #1
 8014166:	9305      	str	r3, [sp, #20]
 8014168:	4619      	mov	r1, r3
 801416a:	f04f 0c0a 	mov.w	ip, #10
 801416e:	4620      	mov	r0, r4
 8014170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014174:	3a30      	subs	r2, #48	; 0x30
 8014176:	2a09      	cmp	r2, #9
 8014178:	d903      	bls.n	8014182 <_vfiprintf_r+0x1ee>
 801417a:	2b00      	cmp	r3, #0
 801417c:	d0c5      	beq.n	801410a <_vfiprintf_r+0x176>
 801417e:	9105      	str	r1, [sp, #20]
 8014180:	e7c3      	b.n	801410a <_vfiprintf_r+0x176>
 8014182:	fb0c 2101 	mla	r1, ip, r1, r2
 8014186:	4604      	mov	r4, r0
 8014188:	2301      	movs	r3, #1
 801418a:	e7f0      	b.n	801416e <_vfiprintf_r+0x1da>
 801418c:	ab03      	add	r3, sp, #12
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	462a      	mov	r2, r5
 8014192:	4b16      	ldr	r3, [pc, #88]	; (80141ec <_vfiprintf_r+0x258>)
 8014194:	a904      	add	r1, sp, #16
 8014196:	4630      	mov	r0, r6
 8014198:	f3af 8000 	nop.w
 801419c:	4607      	mov	r7, r0
 801419e:	1c78      	adds	r0, r7, #1
 80141a0:	d1d6      	bne.n	8014150 <_vfiprintf_r+0x1bc>
 80141a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141a4:	07d9      	lsls	r1, r3, #31
 80141a6:	d405      	bmi.n	80141b4 <_vfiprintf_r+0x220>
 80141a8:	89ab      	ldrh	r3, [r5, #12]
 80141aa:	059a      	lsls	r2, r3, #22
 80141ac:	d402      	bmi.n	80141b4 <_vfiprintf_r+0x220>
 80141ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141b0:	f7fd ff4d 	bl	801204e <__retarget_lock_release_recursive>
 80141b4:	89ab      	ldrh	r3, [r5, #12]
 80141b6:	065b      	lsls	r3, r3, #25
 80141b8:	f53f af12 	bmi.w	8013fe0 <_vfiprintf_r+0x4c>
 80141bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141be:	e711      	b.n	8013fe4 <_vfiprintf_r+0x50>
 80141c0:	ab03      	add	r3, sp, #12
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	462a      	mov	r2, r5
 80141c6:	4b09      	ldr	r3, [pc, #36]	; (80141ec <_vfiprintf_r+0x258>)
 80141c8:	a904      	add	r1, sp, #16
 80141ca:	4630      	mov	r0, r6
 80141cc:	f000 f880 	bl	80142d0 <_printf_i>
 80141d0:	e7e4      	b.n	801419c <_vfiprintf_r+0x208>
 80141d2:	bf00      	nop
 80141d4:	08017c24 	.word	0x08017c24
 80141d8:	08017c44 	.word	0x08017c44
 80141dc:	08017c04 	.word	0x08017c04
 80141e0:	080181a3 	.word	0x080181a3
 80141e4:	080181ad 	.word	0x080181ad
 80141e8:	00000000 	.word	0x00000000
 80141ec:	08013f6f 	.word	0x08013f6f
 80141f0:	080181a9 	.word	0x080181a9

080141f4 <_printf_common>:
 80141f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141f8:	4616      	mov	r6, r2
 80141fa:	4699      	mov	r9, r3
 80141fc:	688a      	ldr	r2, [r1, #8]
 80141fe:	690b      	ldr	r3, [r1, #16]
 8014200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014204:	4293      	cmp	r3, r2
 8014206:	bfb8      	it	lt
 8014208:	4613      	movlt	r3, r2
 801420a:	6033      	str	r3, [r6, #0]
 801420c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014210:	4607      	mov	r7, r0
 8014212:	460c      	mov	r4, r1
 8014214:	b10a      	cbz	r2, 801421a <_printf_common+0x26>
 8014216:	3301      	adds	r3, #1
 8014218:	6033      	str	r3, [r6, #0]
 801421a:	6823      	ldr	r3, [r4, #0]
 801421c:	0699      	lsls	r1, r3, #26
 801421e:	bf42      	ittt	mi
 8014220:	6833      	ldrmi	r3, [r6, #0]
 8014222:	3302      	addmi	r3, #2
 8014224:	6033      	strmi	r3, [r6, #0]
 8014226:	6825      	ldr	r5, [r4, #0]
 8014228:	f015 0506 	ands.w	r5, r5, #6
 801422c:	d106      	bne.n	801423c <_printf_common+0x48>
 801422e:	f104 0a19 	add.w	sl, r4, #25
 8014232:	68e3      	ldr	r3, [r4, #12]
 8014234:	6832      	ldr	r2, [r6, #0]
 8014236:	1a9b      	subs	r3, r3, r2
 8014238:	42ab      	cmp	r3, r5
 801423a:	dc26      	bgt.n	801428a <_printf_common+0x96>
 801423c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014240:	1e13      	subs	r3, r2, #0
 8014242:	6822      	ldr	r2, [r4, #0]
 8014244:	bf18      	it	ne
 8014246:	2301      	movne	r3, #1
 8014248:	0692      	lsls	r2, r2, #26
 801424a:	d42b      	bmi.n	80142a4 <_printf_common+0xb0>
 801424c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014250:	4649      	mov	r1, r9
 8014252:	4638      	mov	r0, r7
 8014254:	47c0      	blx	r8
 8014256:	3001      	adds	r0, #1
 8014258:	d01e      	beq.n	8014298 <_printf_common+0xa4>
 801425a:	6823      	ldr	r3, [r4, #0]
 801425c:	68e5      	ldr	r5, [r4, #12]
 801425e:	6832      	ldr	r2, [r6, #0]
 8014260:	f003 0306 	and.w	r3, r3, #6
 8014264:	2b04      	cmp	r3, #4
 8014266:	bf08      	it	eq
 8014268:	1aad      	subeq	r5, r5, r2
 801426a:	68a3      	ldr	r3, [r4, #8]
 801426c:	6922      	ldr	r2, [r4, #16]
 801426e:	bf0c      	ite	eq
 8014270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014274:	2500      	movne	r5, #0
 8014276:	4293      	cmp	r3, r2
 8014278:	bfc4      	itt	gt
 801427a:	1a9b      	subgt	r3, r3, r2
 801427c:	18ed      	addgt	r5, r5, r3
 801427e:	2600      	movs	r6, #0
 8014280:	341a      	adds	r4, #26
 8014282:	42b5      	cmp	r5, r6
 8014284:	d11a      	bne.n	80142bc <_printf_common+0xc8>
 8014286:	2000      	movs	r0, #0
 8014288:	e008      	b.n	801429c <_printf_common+0xa8>
 801428a:	2301      	movs	r3, #1
 801428c:	4652      	mov	r2, sl
 801428e:	4649      	mov	r1, r9
 8014290:	4638      	mov	r0, r7
 8014292:	47c0      	blx	r8
 8014294:	3001      	adds	r0, #1
 8014296:	d103      	bne.n	80142a0 <_printf_common+0xac>
 8014298:	f04f 30ff 	mov.w	r0, #4294967295
 801429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142a0:	3501      	adds	r5, #1
 80142a2:	e7c6      	b.n	8014232 <_printf_common+0x3e>
 80142a4:	18e1      	adds	r1, r4, r3
 80142a6:	1c5a      	adds	r2, r3, #1
 80142a8:	2030      	movs	r0, #48	; 0x30
 80142aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80142ae:	4422      	add	r2, r4
 80142b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80142b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80142b8:	3302      	adds	r3, #2
 80142ba:	e7c7      	b.n	801424c <_printf_common+0x58>
 80142bc:	2301      	movs	r3, #1
 80142be:	4622      	mov	r2, r4
 80142c0:	4649      	mov	r1, r9
 80142c2:	4638      	mov	r0, r7
 80142c4:	47c0      	blx	r8
 80142c6:	3001      	adds	r0, #1
 80142c8:	d0e6      	beq.n	8014298 <_printf_common+0xa4>
 80142ca:	3601      	adds	r6, #1
 80142cc:	e7d9      	b.n	8014282 <_printf_common+0x8e>
	...

080142d0 <_printf_i>:
 80142d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80142d4:	460c      	mov	r4, r1
 80142d6:	4691      	mov	r9, r2
 80142d8:	7e27      	ldrb	r7, [r4, #24]
 80142da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80142dc:	2f78      	cmp	r7, #120	; 0x78
 80142de:	4680      	mov	r8, r0
 80142e0:	469a      	mov	sl, r3
 80142e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80142e6:	d807      	bhi.n	80142f8 <_printf_i+0x28>
 80142e8:	2f62      	cmp	r7, #98	; 0x62
 80142ea:	d80a      	bhi.n	8014302 <_printf_i+0x32>
 80142ec:	2f00      	cmp	r7, #0
 80142ee:	f000 80d8 	beq.w	80144a2 <_printf_i+0x1d2>
 80142f2:	2f58      	cmp	r7, #88	; 0x58
 80142f4:	f000 80a3 	beq.w	801443e <_printf_i+0x16e>
 80142f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80142fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014300:	e03a      	b.n	8014378 <_printf_i+0xa8>
 8014302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014306:	2b15      	cmp	r3, #21
 8014308:	d8f6      	bhi.n	80142f8 <_printf_i+0x28>
 801430a:	a001      	add	r0, pc, #4	; (adr r0, 8014310 <_printf_i+0x40>)
 801430c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014310:	08014369 	.word	0x08014369
 8014314:	0801437d 	.word	0x0801437d
 8014318:	080142f9 	.word	0x080142f9
 801431c:	080142f9 	.word	0x080142f9
 8014320:	080142f9 	.word	0x080142f9
 8014324:	080142f9 	.word	0x080142f9
 8014328:	0801437d 	.word	0x0801437d
 801432c:	080142f9 	.word	0x080142f9
 8014330:	080142f9 	.word	0x080142f9
 8014334:	080142f9 	.word	0x080142f9
 8014338:	080142f9 	.word	0x080142f9
 801433c:	08014489 	.word	0x08014489
 8014340:	080143ad 	.word	0x080143ad
 8014344:	0801446b 	.word	0x0801446b
 8014348:	080142f9 	.word	0x080142f9
 801434c:	080142f9 	.word	0x080142f9
 8014350:	080144ab 	.word	0x080144ab
 8014354:	080142f9 	.word	0x080142f9
 8014358:	080143ad 	.word	0x080143ad
 801435c:	080142f9 	.word	0x080142f9
 8014360:	080142f9 	.word	0x080142f9
 8014364:	08014473 	.word	0x08014473
 8014368:	680b      	ldr	r3, [r1, #0]
 801436a:	1d1a      	adds	r2, r3, #4
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	600a      	str	r2, [r1, #0]
 8014370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014378:	2301      	movs	r3, #1
 801437a:	e0a3      	b.n	80144c4 <_printf_i+0x1f4>
 801437c:	6825      	ldr	r5, [r4, #0]
 801437e:	6808      	ldr	r0, [r1, #0]
 8014380:	062e      	lsls	r6, r5, #24
 8014382:	f100 0304 	add.w	r3, r0, #4
 8014386:	d50a      	bpl.n	801439e <_printf_i+0xce>
 8014388:	6805      	ldr	r5, [r0, #0]
 801438a:	600b      	str	r3, [r1, #0]
 801438c:	2d00      	cmp	r5, #0
 801438e:	da03      	bge.n	8014398 <_printf_i+0xc8>
 8014390:	232d      	movs	r3, #45	; 0x2d
 8014392:	426d      	negs	r5, r5
 8014394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014398:	485e      	ldr	r0, [pc, #376]	; (8014514 <_printf_i+0x244>)
 801439a:	230a      	movs	r3, #10
 801439c:	e019      	b.n	80143d2 <_printf_i+0x102>
 801439e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80143a2:	6805      	ldr	r5, [r0, #0]
 80143a4:	600b      	str	r3, [r1, #0]
 80143a6:	bf18      	it	ne
 80143a8:	b22d      	sxthne	r5, r5
 80143aa:	e7ef      	b.n	801438c <_printf_i+0xbc>
 80143ac:	680b      	ldr	r3, [r1, #0]
 80143ae:	6825      	ldr	r5, [r4, #0]
 80143b0:	1d18      	adds	r0, r3, #4
 80143b2:	6008      	str	r0, [r1, #0]
 80143b4:	0628      	lsls	r0, r5, #24
 80143b6:	d501      	bpl.n	80143bc <_printf_i+0xec>
 80143b8:	681d      	ldr	r5, [r3, #0]
 80143ba:	e002      	b.n	80143c2 <_printf_i+0xf2>
 80143bc:	0669      	lsls	r1, r5, #25
 80143be:	d5fb      	bpl.n	80143b8 <_printf_i+0xe8>
 80143c0:	881d      	ldrh	r5, [r3, #0]
 80143c2:	4854      	ldr	r0, [pc, #336]	; (8014514 <_printf_i+0x244>)
 80143c4:	2f6f      	cmp	r7, #111	; 0x6f
 80143c6:	bf0c      	ite	eq
 80143c8:	2308      	moveq	r3, #8
 80143ca:	230a      	movne	r3, #10
 80143cc:	2100      	movs	r1, #0
 80143ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80143d2:	6866      	ldr	r6, [r4, #4]
 80143d4:	60a6      	str	r6, [r4, #8]
 80143d6:	2e00      	cmp	r6, #0
 80143d8:	bfa2      	ittt	ge
 80143da:	6821      	ldrge	r1, [r4, #0]
 80143dc:	f021 0104 	bicge.w	r1, r1, #4
 80143e0:	6021      	strge	r1, [r4, #0]
 80143e2:	b90d      	cbnz	r5, 80143e8 <_printf_i+0x118>
 80143e4:	2e00      	cmp	r6, #0
 80143e6:	d04d      	beq.n	8014484 <_printf_i+0x1b4>
 80143e8:	4616      	mov	r6, r2
 80143ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80143ee:	fb03 5711 	mls	r7, r3, r1, r5
 80143f2:	5dc7      	ldrb	r7, [r0, r7]
 80143f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80143f8:	462f      	mov	r7, r5
 80143fa:	42bb      	cmp	r3, r7
 80143fc:	460d      	mov	r5, r1
 80143fe:	d9f4      	bls.n	80143ea <_printf_i+0x11a>
 8014400:	2b08      	cmp	r3, #8
 8014402:	d10b      	bne.n	801441c <_printf_i+0x14c>
 8014404:	6823      	ldr	r3, [r4, #0]
 8014406:	07df      	lsls	r7, r3, #31
 8014408:	d508      	bpl.n	801441c <_printf_i+0x14c>
 801440a:	6923      	ldr	r3, [r4, #16]
 801440c:	6861      	ldr	r1, [r4, #4]
 801440e:	4299      	cmp	r1, r3
 8014410:	bfde      	ittt	le
 8014412:	2330      	movle	r3, #48	; 0x30
 8014414:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014418:	f106 36ff 	addle.w	r6, r6, #4294967295
 801441c:	1b92      	subs	r2, r2, r6
 801441e:	6122      	str	r2, [r4, #16]
 8014420:	f8cd a000 	str.w	sl, [sp]
 8014424:	464b      	mov	r3, r9
 8014426:	aa03      	add	r2, sp, #12
 8014428:	4621      	mov	r1, r4
 801442a:	4640      	mov	r0, r8
 801442c:	f7ff fee2 	bl	80141f4 <_printf_common>
 8014430:	3001      	adds	r0, #1
 8014432:	d14c      	bne.n	80144ce <_printf_i+0x1fe>
 8014434:	f04f 30ff 	mov.w	r0, #4294967295
 8014438:	b004      	add	sp, #16
 801443a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801443e:	4835      	ldr	r0, [pc, #212]	; (8014514 <_printf_i+0x244>)
 8014440:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014444:	6823      	ldr	r3, [r4, #0]
 8014446:	680e      	ldr	r6, [r1, #0]
 8014448:	061f      	lsls	r7, r3, #24
 801444a:	f856 5b04 	ldr.w	r5, [r6], #4
 801444e:	600e      	str	r6, [r1, #0]
 8014450:	d514      	bpl.n	801447c <_printf_i+0x1ac>
 8014452:	07d9      	lsls	r1, r3, #31
 8014454:	bf44      	itt	mi
 8014456:	f043 0320 	orrmi.w	r3, r3, #32
 801445a:	6023      	strmi	r3, [r4, #0]
 801445c:	b91d      	cbnz	r5, 8014466 <_printf_i+0x196>
 801445e:	6823      	ldr	r3, [r4, #0]
 8014460:	f023 0320 	bic.w	r3, r3, #32
 8014464:	6023      	str	r3, [r4, #0]
 8014466:	2310      	movs	r3, #16
 8014468:	e7b0      	b.n	80143cc <_printf_i+0xfc>
 801446a:	6823      	ldr	r3, [r4, #0]
 801446c:	f043 0320 	orr.w	r3, r3, #32
 8014470:	6023      	str	r3, [r4, #0]
 8014472:	2378      	movs	r3, #120	; 0x78
 8014474:	4828      	ldr	r0, [pc, #160]	; (8014518 <_printf_i+0x248>)
 8014476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801447a:	e7e3      	b.n	8014444 <_printf_i+0x174>
 801447c:	065e      	lsls	r6, r3, #25
 801447e:	bf48      	it	mi
 8014480:	b2ad      	uxthmi	r5, r5
 8014482:	e7e6      	b.n	8014452 <_printf_i+0x182>
 8014484:	4616      	mov	r6, r2
 8014486:	e7bb      	b.n	8014400 <_printf_i+0x130>
 8014488:	680b      	ldr	r3, [r1, #0]
 801448a:	6826      	ldr	r6, [r4, #0]
 801448c:	6960      	ldr	r0, [r4, #20]
 801448e:	1d1d      	adds	r5, r3, #4
 8014490:	600d      	str	r5, [r1, #0]
 8014492:	0635      	lsls	r5, r6, #24
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	d501      	bpl.n	801449c <_printf_i+0x1cc>
 8014498:	6018      	str	r0, [r3, #0]
 801449a:	e002      	b.n	80144a2 <_printf_i+0x1d2>
 801449c:	0671      	lsls	r1, r6, #25
 801449e:	d5fb      	bpl.n	8014498 <_printf_i+0x1c8>
 80144a0:	8018      	strh	r0, [r3, #0]
 80144a2:	2300      	movs	r3, #0
 80144a4:	6123      	str	r3, [r4, #16]
 80144a6:	4616      	mov	r6, r2
 80144a8:	e7ba      	b.n	8014420 <_printf_i+0x150>
 80144aa:	680b      	ldr	r3, [r1, #0]
 80144ac:	1d1a      	adds	r2, r3, #4
 80144ae:	600a      	str	r2, [r1, #0]
 80144b0:	681e      	ldr	r6, [r3, #0]
 80144b2:	6862      	ldr	r2, [r4, #4]
 80144b4:	2100      	movs	r1, #0
 80144b6:	4630      	mov	r0, r6
 80144b8:	f7eb fed2 	bl	8000260 <memchr>
 80144bc:	b108      	cbz	r0, 80144c2 <_printf_i+0x1f2>
 80144be:	1b80      	subs	r0, r0, r6
 80144c0:	6060      	str	r0, [r4, #4]
 80144c2:	6863      	ldr	r3, [r4, #4]
 80144c4:	6123      	str	r3, [r4, #16]
 80144c6:	2300      	movs	r3, #0
 80144c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144cc:	e7a8      	b.n	8014420 <_printf_i+0x150>
 80144ce:	6923      	ldr	r3, [r4, #16]
 80144d0:	4632      	mov	r2, r6
 80144d2:	4649      	mov	r1, r9
 80144d4:	4640      	mov	r0, r8
 80144d6:	47d0      	blx	sl
 80144d8:	3001      	adds	r0, #1
 80144da:	d0ab      	beq.n	8014434 <_printf_i+0x164>
 80144dc:	6823      	ldr	r3, [r4, #0]
 80144de:	079b      	lsls	r3, r3, #30
 80144e0:	d413      	bmi.n	801450a <_printf_i+0x23a>
 80144e2:	68e0      	ldr	r0, [r4, #12]
 80144e4:	9b03      	ldr	r3, [sp, #12]
 80144e6:	4298      	cmp	r0, r3
 80144e8:	bfb8      	it	lt
 80144ea:	4618      	movlt	r0, r3
 80144ec:	e7a4      	b.n	8014438 <_printf_i+0x168>
 80144ee:	2301      	movs	r3, #1
 80144f0:	4632      	mov	r2, r6
 80144f2:	4649      	mov	r1, r9
 80144f4:	4640      	mov	r0, r8
 80144f6:	47d0      	blx	sl
 80144f8:	3001      	adds	r0, #1
 80144fa:	d09b      	beq.n	8014434 <_printf_i+0x164>
 80144fc:	3501      	adds	r5, #1
 80144fe:	68e3      	ldr	r3, [r4, #12]
 8014500:	9903      	ldr	r1, [sp, #12]
 8014502:	1a5b      	subs	r3, r3, r1
 8014504:	42ab      	cmp	r3, r5
 8014506:	dcf2      	bgt.n	80144ee <_printf_i+0x21e>
 8014508:	e7eb      	b.n	80144e2 <_printf_i+0x212>
 801450a:	2500      	movs	r5, #0
 801450c:	f104 0619 	add.w	r6, r4, #25
 8014510:	e7f5      	b.n	80144fe <_printf_i+0x22e>
 8014512:	bf00      	nop
 8014514:	080181b4 	.word	0x080181b4
 8014518:	080181c5 	.word	0x080181c5

0801451c <_putc_r>:
 801451c:	b570      	push	{r4, r5, r6, lr}
 801451e:	460d      	mov	r5, r1
 8014520:	4614      	mov	r4, r2
 8014522:	4606      	mov	r6, r0
 8014524:	b118      	cbz	r0, 801452e <_putc_r+0x12>
 8014526:	6983      	ldr	r3, [r0, #24]
 8014528:	b90b      	cbnz	r3, 801452e <_putc_r+0x12>
 801452a:	f7fd f9db 	bl	80118e4 <__sinit>
 801452e:	4b1c      	ldr	r3, [pc, #112]	; (80145a0 <_putc_r+0x84>)
 8014530:	429c      	cmp	r4, r3
 8014532:	d124      	bne.n	801457e <_putc_r+0x62>
 8014534:	6874      	ldr	r4, [r6, #4]
 8014536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014538:	07d8      	lsls	r0, r3, #31
 801453a:	d405      	bmi.n	8014548 <_putc_r+0x2c>
 801453c:	89a3      	ldrh	r3, [r4, #12]
 801453e:	0599      	lsls	r1, r3, #22
 8014540:	d402      	bmi.n	8014548 <_putc_r+0x2c>
 8014542:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014544:	f7fd fd81 	bl	801204a <__retarget_lock_acquire_recursive>
 8014548:	68a3      	ldr	r3, [r4, #8]
 801454a:	3b01      	subs	r3, #1
 801454c:	2b00      	cmp	r3, #0
 801454e:	60a3      	str	r3, [r4, #8]
 8014550:	da05      	bge.n	801455e <_putc_r+0x42>
 8014552:	69a2      	ldr	r2, [r4, #24]
 8014554:	4293      	cmp	r3, r2
 8014556:	db1c      	blt.n	8014592 <_putc_r+0x76>
 8014558:	b2eb      	uxtb	r3, r5
 801455a:	2b0a      	cmp	r3, #10
 801455c:	d019      	beq.n	8014592 <_putc_r+0x76>
 801455e:	6823      	ldr	r3, [r4, #0]
 8014560:	1c5a      	adds	r2, r3, #1
 8014562:	6022      	str	r2, [r4, #0]
 8014564:	701d      	strb	r5, [r3, #0]
 8014566:	b2ed      	uxtb	r5, r5
 8014568:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801456a:	07da      	lsls	r2, r3, #31
 801456c:	d405      	bmi.n	801457a <_putc_r+0x5e>
 801456e:	89a3      	ldrh	r3, [r4, #12]
 8014570:	059b      	lsls	r3, r3, #22
 8014572:	d402      	bmi.n	801457a <_putc_r+0x5e>
 8014574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014576:	f7fd fd6a 	bl	801204e <__retarget_lock_release_recursive>
 801457a:	4628      	mov	r0, r5
 801457c:	bd70      	pop	{r4, r5, r6, pc}
 801457e:	4b09      	ldr	r3, [pc, #36]	; (80145a4 <_putc_r+0x88>)
 8014580:	429c      	cmp	r4, r3
 8014582:	d101      	bne.n	8014588 <_putc_r+0x6c>
 8014584:	68b4      	ldr	r4, [r6, #8]
 8014586:	e7d6      	b.n	8014536 <_putc_r+0x1a>
 8014588:	4b07      	ldr	r3, [pc, #28]	; (80145a8 <_putc_r+0x8c>)
 801458a:	429c      	cmp	r4, r3
 801458c:	bf08      	it	eq
 801458e:	68f4      	ldreq	r4, [r6, #12]
 8014590:	e7d1      	b.n	8014536 <_putc_r+0x1a>
 8014592:	4629      	mov	r1, r5
 8014594:	4622      	mov	r2, r4
 8014596:	4630      	mov	r0, r6
 8014598:	f7ff f844 	bl	8013624 <__swbuf_r>
 801459c:	4605      	mov	r5, r0
 801459e:	e7e3      	b.n	8014568 <_putc_r+0x4c>
 80145a0:	08017c24 	.word	0x08017c24
 80145a4:	08017c44 	.word	0x08017c44
 80145a8:	08017c04 	.word	0x08017c04

080145ac <_read_r>:
 80145ac:	b538      	push	{r3, r4, r5, lr}
 80145ae:	4d07      	ldr	r5, [pc, #28]	; (80145cc <_read_r+0x20>)
 80145b0:	4604      	mov	r4, r0
 80145b2:	4608      	mov	r0, r1
 80145b4:	4611      	mov	r1, r2
 80145b6:	2200      	movs	r2, #0
 80145b8:	602a      	str	r2, [r5, #0]
 80145ba:	461a      	mov	r2, r3
 80145bc:	f7ec fbeb 	bl	8000d96 <_read>
 80145c0:	1c43      	adds	r3, r0, #1
 80145c2:	d102      	bne.n	80145ca <_read_r+0x1e>
 80145c4:	682b      	ldr	r3, [r5, #0]
 80145c6:	b103      	cbz	r3, 80145ca <_read_r+0x1e>
 80145c8:	6023      	str	r3, [r4, #0]
 80145ca:	bd38      	pop	{r3, r4, r5, pc}
 80145cc:	20000bc4 	.word	0x20000bc4

080145d0 <sniprintf>:
 80145d0:	b40c      	push	{r2, r3}
 80145d2:	b530      	push	{r4, r5, lr}
 80145d4:	4b17      	ldr	r3, [pc, #92]	; (8014634 <sniprintf+0x64>)
 80145d6:	1e0c      	subs	r4, r1, #0
 80145d8:	681d      	ldr	r5, [r3, #0]
 80145da:	b09d      	sub	sp, #116	; 0x74
 80145dc:	da08      	bge.n	80145f0 <sniprintf+0x20>
 80145de:	238b      	movs	r3, #139	; 0x8b
 80145e0:	602b      	str	r3, [r5, #0]
 80145e2:	f04f 30ff 	mov.w	r0, #4294967295
 80145e6:	b01d      	add	sp, #116	; 0x74
 80145e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80145ec:	b002      	add	sp, #8
 80145ee:	4770      	bx	lr
 80145f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80145f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80145f8:	bf14      	ite	ne
 80145fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80145fe:	4623      	moveq	r3, r4
 8014600:	9304      	str	r3, [sp, #16]
 8014602:	9307      	str	r3, [sp, #28]
 8014604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014608:	9002      	str	r0, [sp, #8]
 801460a:	9006      	str	r0, [sp, #24]
 801460c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014610:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014612:	ab21      	add	r3, sp, #132	; 0x84
 8014614:	a902      	add	r1, sp, #8
 8014616:	4628      	mov	r0, r5
 8014618:	9301      	str	r3, [sp, #4]
 801461a:	f7ff fb91 	bl	8013d40 <_svfiprintf_r>
 801461e:	1c43      	adds	r3, r0, #1
 8014620:	bfbc      	itt	lt
 8014622:	238b      	movlt	r3, #139	; 0x8b
 8014624:	602b      	strlt	r3, [r5, #0]
 8014626:	2c00      	cmp	r4, #0
 8014628:	d0dd      	beq.n	80145e6 <sniprintf+0x16>
 801462a:	9b02      	ldr	r3, [sp, #8]
 801462c:	2200      	movs	r2, #0
 801462e:	701a      	strb	r2, [r3, #0]
 8014630:	e7d9      	b.n	80145e6 <sniprintf+0x16>
 8014632:	bf00      	nop
 8014634:	20000100 	.word	0x20000100

08014638 <siscanf>:
 8014638:	b40e      	push	{r1, r2, r3}
 801463a:	b510      	push	{r4, lr}
 801463c:	b09f      	sub	sp, #124	; 0x7c
 801463e:	ac21      	add	r4, sp, #132	; 0x84
 8014640:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014644:	f854 2b04 	ldr.w	r2, [r4], #4
 8014648:	9201      	str	r2, [sp, #4]
 801464a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801464e:	9004      	str	r0, [sp, #16]
 8014650:	9008      	str	r0, [sp, #32]
 8014652:	f7eb fdf3 	bl	800023c <strlen>
 8014656:	4b0c      	ldr	r3, [pc, #48]	; (8014688 <siscanf+0x50>)
 8014658:	9005      	str	r0, [sp, #20]
 801465a:	9009      	str	r0, [sp, #36]	; 0x24
 801465c:	930d      	str	r3, [sp, #52]	; 0x34
 801465e:	480b      	ldr	r0, [pc, #44]	; (801468c <siscanf+0x54>)
 8014660:	9a01      	ldr	r2, [sp, #4]
 8014662:	6800      	ldr	r0, [r0, #0]
 8014664:	9403      	str	r4, [sp, #12]
 8014666:	2300      	movs	r3, #0
 8014668:	9311      	str	r3, [sp, #68]	; 0x44
 801466a:	9316      	str	r3, [sp, #88]	; 0x58
 801466c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014670:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014674:	a904      	add	r1, sp, #16
 8014676:	4623      	mov	r3, r4
 8014678:	f000 f8ba 	bl	80147f0 <__ssvfiscanf_r>
 801467c:	b01f      	add	sp, #124	; 0x7c
 801467e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014682:	b003      	add	sp, #12
 8014684:	4770      	bx	lr
 8014686:	bf00      	nop
 8014688:	080124df 	.word	0x080124df
 801468c:	20000100 	.word	0x20000100

08014690 <strcpy>:
 8014690:	4603      	mov	r3, r0
 8014692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014696:	f803 2b01 	strb.w	r2, [r3], #1
 801469a:	2a00      	cmp	r2, #0
 801469c:	d1f9      	bne.n	8014692 <strcpy+0x2>
 801469e:	4770      	bx	lr

080146a0 <strncmp>:
 80146a0:	b510      	push	{r4, lr}
 80146a2:	b16a      	cbz	r2, 80146c0 <strncmp+0x20>
 80146a4:	3901      	subs	r1, #1
 80146a6:	1884      	adds	r4, r0, r2
 80146a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80146ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80146b0:	4293      	cmp	r3, r2
 80146b2:	d103      	bne.n	80146bc <strncmp+0x1c>
 80146b4:	42a0      	cmp	r0, r4
 80146b6:	d001      	beq.n	80146bc <strncmp+0x1c>
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d1f5      	bne.n	80146a8 <strncmp+0x8>
 80146bc:	1a98      	subs	r0, r3, r2
 80146be:	bd10      	pop	{r4, pc}
 80146c0:	4610      	mov	r0, r2
 80146c2:	e7fc      	b.n	80146be <strncmp+0x1e>

080146c4 <__ascii_wctomb>:
 80146c4:	b149      	cbz	r1, 80146da <__ascii_wctomb+0x16>
 80146c6:	2aff      	cmp	r2, #255	; 0xff
 80146c8:	bf85      	ittet	hi
 80146ca:	238a      	movhi	r3, #138	; 0x8a
 80146cc:	6003      	strhi	r3, [r0, #0]
 80146ce:	700a      	strbls	r2, [r1, #0]
 80146d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80146d4:	bf98      	it	ls
 80146d6:	2001      	movls	r0, #1
 80146d8:	4770      	bx	lr
 80146da:	4608      	mov	r0, r1
 80146dc:	4770      	bx	lr
	...

080146e0 <__env_lock>:
 80146e0:	4801      	ldr	r0, [pc, #4]	; (80146e8 <__env_lock+0x8>)
 80146e2:	f7fd bcb2 	b.w	801204a <__retarget_lock_acquire_recursive>
 80146e6:	bf00      	nop
 80146e8:	20000bba 	.word	0x20000bba

080146ec <__env_unlock>:
 80146ec:	4801      	ldr	r0, [pc, #4]	; (80146f4 <__env_unlock+0x8>)
 80146ee:	f7fd bcae 	b.w	801204e <__retarget_lock_release_recursive>
 80146f2:	bf00      	nop
 80146f4:	20000bba 	.word	0x20000bba

080146f8 <memmove>:
 80146f8:	4288      	cmp	r0, r1
 80146fa:	b510      	push	{r4, lr}
 80146fc:	eb01 0402 	add.w	r4, r1, r2
 8014700:	d902      	bls.n	8014708 <memmove+0x10>
 8014702:	4284      	cmp	r4, r0
 8014704:	4623      	mov	r3, r4
 8014706:	d807      	bhi.n	8014718 <memmove+0x20>
 8014708:	1e43      	subs	r3, r0, #1
 801470a:	42a1      	cmp	r1, r4
 801470c:	d008      	beq.n	8014720 <memmove+0x28>
 801470e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014716:	e7f8      	b.n	801470a <memmove+0x12>
 8014718:	4402      	add	r2, r0
 801471a:	4601      	mov	r1, r0
 801471c:	428a      	cmp	r2, r1
 801471e:	d100      	bne.n	8014722 <memmove+0x2a>
 8014720:	bd10      	pop	{r4, pc}
 8014722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801472a:	e7f7      	b.n	801471c <memmove+0x24>

0801472c <_malloc_usable_size_r>:
 801472c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014730:	1f18      	subs	r0, r3, #4
 8014732:	2b00      	cmp	r3, #0
 8014734:	bfbc      	itt	lt
 8014736:	580b      	ldrlt	r3, [r1, r0]
 8014738:	18c0      	addlt	r0, r0, r3
 801473a:	4770      	bx	lr

0801473c <_sungetc_r>:
 801473c:	b538      	push	{r3, r4, r5, lr}
 801473e:	1c4b      	adds	r3, r1, #1
 8014740:	4614      	mov	r4, r2
 8014742:	d103      	bne.n	801474c <_sungetc_r+0x10>
 8014744:	f04f 35ff 	mov.w	r5, #4294967295
 8014748:	4628      	mov	r0, r5
 801474a:	bd38      	pop	{r3, r4, r5, pc}
 801474c:	8993      	ldrh	r3, [r2, #12]
 801474e:	f023 0320 	bic.w	r3, r3, #32
 8014752:	8193      	strh	r3, [r2, #12]
 8014754:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014756:	6852      	ldr	r2, [r2, #4]
 8014758:	b2cd      	uxtb	r5, r1
 801475a:	b18b      	cbz	r3, 8014780 <_sungetc_r+0x44>
 801475c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801475e:	4293      	cmp	r3, r2
 8014760:	dd08      	ble.n	8014774 <_sungetc_r+0x38>
 8014762:	6823      	ldr	r3, [r4, #0]
 8014764:	1e5a      	subs	r2, r3, #1
 8014766:	6022      	str	r2, [r4, #0]
 8014768:	f803 5c01 	strb.w	r5, [r3, #-1]
 801476c:	6863      	ldr	r3, [r4, #4]
 801476e:	3301      	adds	r3, #1
 8014770:	6063      	str	r3, [r4, #4]
 8014772:	e7e9      	b.n	8014748 <_sungetc_r+0xc>
 8014774:	4621      	mov	r1, r4
 8014776:	f000 fbbf 	bl	8014ef8 <__submore>
 801477a:	2800      	cmp	r0, #0
 801477c:	d0f1      	beq.n	8014762 <_sungetc_r+0x26>
 801477e:	e7e1      	b.n	8014744 <_sungetc_r+0x8>
 8014780:	6921      	ldr	r1, [r4, #16]
 8014782:	6823      	ldr	r3, [r4, #0]
 8014784:	b151      	cbz	r1, 801479c <_sungetc_r+0x60>
 8014786:	4299      	cmp	r1, r3
 8014788:	d208      	bcs.n	801479c <_sungetc_r+0x60>
 801478a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801478e:	42a9      	cmp	r1, r5
 8014790:	d104      	bne.n	801479c <_sungetc_r+0x60>
 8014792:	3b01      	subs	r3, #1
 8014794:	3201      	adds	r2, #1
 8014796:	6023      	str	r3, [r4, #0]
 8014798:	6062      	str	r2, [r4, #4]
 801479a:	e7d5      	b.n	8014748 <_sungetc_r+0xc>
 801479c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80147a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147a4:	6363      	str	r3, [r4, #52]	; 0x34
 80147a6:	2303      	movs	r3, #3
 80147a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80147aa:	4623      	mov	r3, r4
 80147ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	2301      	movs	r3, #1
 80147b4:	e7dc      	b.n	8014770 <_sungetc_r+0x34>

080147b6 <__ssrefill_r>:
 80147b6:	b510      	push	{r4, lr}
 80147b8:	460c      	mov	r4, r1
 80147ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80147bc:	b169      	cbz	r1, 80147da <__ssrefill_r+0x24>
 80147be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147c2:	4299      	cmp	r1, r3
 80147c4:	d001      	beq.n	80147ca <__ssrefill_r+0x14>
 80147c6:	f7fd fcdd 	bl	8012184 <_free_r>
 80147ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80147cc:	6063      	str	r3, [r4, #4]
 80147ce:	2000      	movs	r0, #0
 80147d0:	6360      	str	r0, [r4, #52]	; 0x34
 80147d2:	b113      	cbz	r3, 80147da <__ssrefill_r+0x24>
 80147d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80147d6:	6023      	str	r3, [r4, #0]
 80147d8:	bd10      	pop	{r4, pc}
 80147da:	6923      	ldr	r3, [r4, #16]
 80147dc:	6023      	str	r3, [r4, #0]
 80147de:	2300      	movs	r3, #0
 80147e0:	6063      	str	r3, [r4, #4]
 80147e2:	89a3      	ldrh	r3, [r4, #12]
 80147e4:	f043 0320 	orr.w	r3, r3, #32
 80147e8:	81a3      	strh	r3, [r4, #12]
 80147ea:	f04f 30ff 	mov.w	r0, #4294967295
 80147ee:	e7f3      	b.n	80147d8 <__ssrefill_r+0x22>

080147f0 <__ssvfiscanf_r>:
 80147f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	460c      	mov	r4, r1
 80147f6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80147fa:	2100      	movs	r1, #0
 80147fc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014800:	49b2      	ldr	r1, [pc, #712]	; (8014acc <__ssvfiscanf_r+0x2dc>)
 8014802:	91a0      	str	r1, [sp, #640]	; 0x280
 8014804:	f10d 0804 	add.w	r8, sp, #4
 8014808:	49b1      	ldr	r1, [pc, #708]	; (8014ad0 <__ssvfiscanf_r+0x2e0>)
 801480a:	4fb2      	ldr	r7, [pc, #712]	; (8014ad4 <__ssvfiscanf_r+0x2e4>)
 801480c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8014ad8 <__ssvfiscanf_r+0x2e8>
 8014810:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014814:	4606      	mov	r6, r0
 8014816:	91a1      	str	r1, [sp, #644]	; 0x284
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	f892 a000 	ldrb.w	sl, [r2]
 801481e:	f1ba 0f00 	cmp.w	sl, #0
 8014822:	f000 8151 	beq.w	8014ac8 <__ssvfiscanf_r+0x2d8>
 8014826:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801482a:	f013 0308 	ands.w	r3, r3, #8
 801482e:	f102 0501 	add.w	r5, r2, #1
 8014832:	d019      	beq.n	8014868 <__ssvfiscanf_r+0x78>
 8014834:	6863      	ldr	r3, [r4, #4]
 8014836:	2b00      	cmp	r3, #0
 8014838:	dd0f      	ble.n	801485a <__ssvfiscanf_r+0x6a>
 801483a:	6823      	ldr	r3, [r4, #0]
 801483c:	781a      	ldrb	r2, [r3, #0]
 801483e:	5cba      	ldrb	r2, [r7, r2]
 8014840:	0712      	lsls	r2, r2, #28
 8014842:	d401      	bmi.n	8014848 <__ssvfiscanf_r+0x58>
 8014844:	462a      	mov	r2, r5
 8014846:	e7e8      	b.n	801481a <__ssvfiscanf_r+0x2a>
 8014848:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801484a:	3201      	adds	r2, #1
 801484c:	9245      	str	r2, [sp, #276]	; 0x114
 801484e:	6862      	ldr	r2, [r4, #4]
 8014850:	3301      	adds	r3, #1
 8014852:	3a01      	subs	r2, #1
 8014854:	6062      	str	r2, [r4, #4]
 8014856:	6023      	str	r3, [r4, #0]
 8014858:	e7ec      	b.n	8014834 <__ssvfiscanf_r+0x44>
 801485a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801485c:	4621      	mov	r1, r4
 801485e:	4630      	mov	r0, r6
 8014860:	4798      	blx	r3
 8014862:	2800      	cmp	r0, #0
 8014864:	d0e9      	beq.n	801483a <__ssvfiscanf_r+0x4a>
 8014866:	e7ed      	b.n	8014844 <__ssvfiscanf_r+0x54>
 8014868:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801486c:	f040 8083 	bne.w	8014976 <__ssvfiscanf_r+0x186>
 8014870:	9341      	str	r3, [sp, #260]	; 0x104
 8014872:	9343      	str	r3, [sp, #268]	; 0x10c
 8014874:	7853      	ldrb	r3, [r2, #1]
 8014876:	2b2a      	cmp	r3, #42	; 0x2a
 8014878:	bf02      	ittt	eq
 801487a:	2310      	moveq	r3, #16
 801487c:	1c95      	addeq	r5, r2, #2
 801487e:	9341      	streq	r3, [sp, #260]	; 0x104
 8014880:	220a      	movs	r2, #10
 8014882:	46ab      	mov	fp, r5
 8014884:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8014888:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801488c:	2b09      	cmp	r3, #9
 801488e:	d91d      	bls.n	80148cc <__ssvfiscanf_r+0xdc>
 8014890:	4891      	ldr	r0, [pc, #580]	; (8014ad8 <__ssvfiscanf_r+0x2e8>)
 8014892:	2203      	movs	r2, #3
 8014894:	f7eb fce4 	bl	8000260 <memchr>
 8014898:	b140      	cbz	r0, 80148ac <__ssvfiscanf_r+0xbc>
 801489a:	2301      	movs	r3, #1
 801489c:	eba0 0009 	sub.w	r0, r0, r9
 80148a0:	fa03 f000 	lsl.w	r0, r3, r0
 80148a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80148a6:	4318      	orrs	r0, r3
 80148a8:	9041      	str	r0, [sp, #260]	; 0x104
 80148aa:	465d      	mov	r5, fp
 80148ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80148b0:	2b78      	cmp	r3, #120	; 0x78
 80148b2:	d806      	bhi.n	80148c2 <__ssvfiscanf_r+0xd2>
 80148b4:	2b57      	cmp	r3, #87	; 0x57
 80148b6:	d810      	bhi.n	80148da <__ssvfiscanf_r+0xea>
 80148b8:	2b25      	cmp	r3, #37	; 0x25
 80148ba:	d05c      	beq.n	8014976 <__ssvfiscanf_r+0x186>
 80148bc:	d856      	bhi.n	801496c <__ssvfiscanf_r+0x17c>
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d074      	beq.n	80149ac <__ssvfiscanf_r+0x1bc>
 80148c2:	2303      	movs	r3, #3
 80148c4:	9347      	str	r3, [sp, #284]	; 0x11c
 80148c6:	230a      	movs	r3, #10
 80148c8:	9342      	str	r3, [sp, #264]	; 0x108
 80148ca:	e081      	b.n	80149d0 <__ssvfiscanf_r+0x1e0>
 80148cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80148ce:	fb02 1303 	mla	r3, r2, r3, r1
 80148d2:	3b30      	subs	r3, #48	; 0x30
 80148d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80148d6:	465d      	mov	r5, fp
 80148d8:	e7d3      	b.n	8014882 <__ssvfiscanf_r+0x92>
 80148da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80148de:	2a20      	cmp	r2, #32
 80148e0:	d8ef      	bhi.n	80148c2 <__ssvfiscanf_r+0xd2>
 80148e2:	a101      	add	r1, pc, #4	; (adr r1, 80148e8 <__ssvfiscanf_r+0xf8>)
 80148e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80148e8:	080149bb 	.word	0x080149bb
 80148ec:	080148c3 	.word	0x080148c3
 80148f0:	080148c3 	.word	0x080148c3
 80148f4:	08014a19 	.word	0x08014a19
 80148f8:	080148c3 	.word	0x080148c3
 80148fc:	080148c3 	.word	0x080148c3
 8014900:	080148c3 	.word	0x080148c3
 8014904:	080148c3 	.word	0x080148c3
 8014908:	080148c3 	.word	0x080148c3
 801490c:	080148c3 	.word	0x080148c3
 8014910:	080148c3 	.word	0x080148c3
 8014914:	08014a2f 	.word	0x08014a2f
 8014918:	08014a05 	.word	0x08014a05
 801491c:	08014973 	.word	0x08014973
 8014920:	08014973 	.word	0x08014973
 8014924:	08014973 	.word	0x08014973
 8014928:	080148c3 	.word	0x080148c3
 801492c:	08014a09 	.word	0x08014a09
 8014930:	080148c3 	.word	0x080148c3
 8014934:	080148c3 	.word	0x080148c3
 8014938:	080148c3 	.word	0x080148c3
 801493c:	080148c3 	.word	0x080148c3
 8014940:	08014a3f 	.word	0x08014a3f
 8014944:	08014a11 	.word	0x08014a11
 8014948:	080149b3 	.word	0x080149b3
 801494c:	080148c3 	.word	0x080148c3
 8014950:	080148c3 	.word	0x080148c3
 8014954:	08014a3b 	.word	0x08014a3b
 8014958:	080148c3 	.word	0x080148c3
 801495c:	08014a05 	.word	0x08014a05
 8014960:	080148c3 	.word	0x080148c3
 8014964:	080148c3 	.word	0x080148c3
 8014968:	080149bb 	.word	0x080149bb
 801496c:	3b45      	subs	r3, #69	; 0x45
 801496e:	2b02      	cmp	r3, #2
 8014970:	d8a7      	bhi.n	80148c2 <__ssvfiscanf_r+0xd2>
 8014972:	2305      	movs	r3, #5
 8014974:	e02b      	b.n	80149ce <__ssvfiscanf_r+0x1de>
 8014976:	6863      	ldr	r3, [r4, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	dd0d      	ble.n	8014998 <__ssvfiscanf_r+0x1a8>
 801497c:	6823      	ldr	r3, [r4, #0]
 801497e:	781a      	ldrb	r2, [r3, #0]
 8014980:	4552      	cmp	r2, sl
 8014982:	f040 80a1 	bne.w	8014ac8 <__ssvfiscanf_r+0x2d8>
 8014986:	3301      	adds	r3, #1
 8014988:	6862      	ldr	r2, [r4, #4]
 801498a:	6023      	str	r3, [r4, #0]
 801498c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801498e:	3a01      	subs	r2, #1
 8014990:	3301      	adds	r3, #1
 8014992:	6062      	str	r2, [r4, #4]
 8014994:	9345      	str	r3, [sp, #276]	; 0x114
 8014996:	e755      	b.n	8014844 <__ssvfiscanf_r+0x54>
 8014998:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801499a:	4621      	mov	r1, r4
 801499c:	4630      	mov	r0, r6
 801499e:	4798      	blx	r3
 80149a0:	2800      	cmp	r0, #0
 80149a2:	d0eb      	beq.n	801497c <__ssvfiscanf_r+0x18c>
 80149a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80149a6:	2800      	cmp	r0, #0
 80149a8:	f040 8084 	bne.w	8014ab4 <__ssvfiscanf_r+0x2c4>
 80149ac:	f04f 30ff 	mov.w	r0, #4294967295
 80149b0:	e086      	b.n	8014ac0 <__ssvfiscanf_r+0x2d0>
 80149b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80149b4:	f042 0220 	orr.w	r2, r2, #32
 80149b8:	9241      	str	r2, [sp, #260]	; 0x104
 80149ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80149bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80149c0:	9241      	str	r2, [sp, #260]	; 0x104
 80149c2:	2210      	movs	r2, #16
 80149c4:	2b6f      	cmp	r3, #111	; 0x6f
 80149c6:	9242      	str	r2, [sp, #264]	; 0x108
 80149c8:	bf34      	ite	cc
 80149ca:	2303      	movcc	r3, #3
 80149cc:	2304      	movcs	r3, #4
 80149ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80149d0:	6863      	ldr	r3, [r4, #4]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	dd41      	ble.n	8014a5a <__ssvfiscanf_r+0x26a>
 80149d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80149d8:	0659      	lsls	r1, r3, #25
 80149da:	d404      	bmi.n	80149e6 <__ssvfiscanf_r+0x1f6>
 80149dc:	6823      	ldr	r3, [r4, #0]
 80149de:	781a      	ldrb	r2, [r3, #0]
 80149e0:	5cba      	ldrb	r2, [r7, r2]
 80149e2:	0712      	lsls	r2, r2, #28
 80149e4:	d440      	bmi.n	8014a68 <__ssvfiscanf_r+0x278>
 80149e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80149e8:	2b02      	cmp	r3, #2
 80149ea:	dc4f      	bgt.n	8014a8c <__ssvfiscanf_r+0x29c>
 80149ec:	466b      	mov	r3, sp
 80149ee:	4622      	mov	r2, r4
 80149f0:	a941      	add	r1, sp, #260	; 0x104
 80149f2:	4630      	mov	r0, r6
 80149f4:	f000 f874 	bl	8014ae0 <_scanf_chars>
 80149f8:	2801      	cmp	r0, #1
 80149fa:	d065      	beq.n	8014ac8 <__ssvfiscanf_r+0x2d8>
 80149fc:	2802      	cmp	r0, #2
 80149fe:	f47f af21 	bne.w	8014844 <__ssvfiscanf_r+0x54>
 8014a02:	e7cf      	b.n	80149a4 <__ssvfiscanf_r+0x1b4>
 8014a04:	220a      	movs	r2, #10
 8014a06:	e7dd      	b.n	80149c4 <__ssvfiscanf_r+0x1d4>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	9342      	str	r3, [sp, #264]	; 0x108
 8014a0c:	2303      	movs	r3, #3
 8014a0e:	e7de      	b.n	80149ce <__ssvfiscanf_r+0x1de>
 8014a10:	2308      	movs	r3, #8
 8014a12:	9342      	str	r3, [sp, #264]	; 0x108
 8014a14:	2304      	movs	r3, #4
 8014a16:	e7da      	b.n	80149ce <__ssvfiscanf_r+0x1de>
 8014a18:	4629      	mov	r1, r5
 8014a1a:	4640      	mov	r0, r8
 8014a1c:	f000 f9ac 	bl	8014d78 <__sccl>
 8014a20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a26:	9341      	str	r3, [sp, #260]	; 0x104
 8014a28:	4605      	mov	r5, r0
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	e7cf      	b.n	80149ce <__ssvfiscanf_r+0x1de>
 8014a2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a34:	9341      	str	r3, [sp, #260]	; 0x104
 8014a36:	2300      	movs	r3, #0
 8014a38:	e7c9      	b.n	80149ce <__ssvfiscanf_r+0x1de>
 8014a3a:	2302      	movs	r3, #2
 8014a3c:	e7c7      	b.n	80149ce <__ssvfiscanf_r+0x1de>
 8014a3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014a40:	06c3      	lsls	r3, r0, #27
 8014a42:	f53f aeff 	bmi.w	8014844 <__ssvfiscanf_r+0x54>
 8014a46:	9b00      	ldr	r3, [sp, #0]
 8014a48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014a4a:	1d19      	adds	r1, r3, #4
 8014a4c:	9100      	str	r1, [sp, #0]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	07c0      	lsls	r0, r0, #31
 8014a52:	bf4c      	ite	mi
 8014a54:	801a      	strhmi	r2, [r3, #0]
 8014a56:	601a      	strpl	r2, [r3, #0]
 8014a58:	e6f4      	b.n	8014844 <__ssvfiscanf_r+0x54>
 8014a5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014a5c:	4621      	mov	r1, r4
 8014a5e:	4630      	mov	r0, r6
 8014a60:	4798      	blx	r3
 8014a62:	2800      	cmp	r0, #0
 8014a64:	d0b7      	beq.n	80149d6 <__ssvfiscanf_r+0x1e6>
 8014a66:	e79d      	b.n	80149a4 <__ssvfiscanf_r+0x1b4>
 8014a68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014a6a:	3201      	adds	r2, #1
 8014a6c:	9245      	str	r2, [sp, #276]	; 0x114
 8014a6e:	6862      	ldr	r2, [r4, #4]
 8014a70:	3a01      	subs	r2, #1
 8014a72:	2a00      	cmp	r2, #0
 8014a74:	6062      	str	r2, [r4, #4]
 8014a76:	dd02      	ble.n	8014a7e <__ssvfiscanf_r+0x28e>
 8014a78:	3301      	adds	r3, #1
 8014a7a:	6023      	str	r3, [r4, #0]
 8014a7c:	e7ae      	b.n	80149dc <__ssvfiscanf_r+0x1ec>
 8014a7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014a80:	4621      	mov	r1, r4
 8014a82:	4630      	mov	r0, r6
 8014a84:	4798      	blx	r3
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d0a8      	beq.n	80149dc <__ssvfiscanf_r+0x1ec>
 8014a8a:	e78b      	b.n	80149a4 <__ssvfiscanf_r+0x1b4>
 8014a8c:	2b04      	cmp	r3, #4
 8014a8e:	dc06      	bgt.n	8014a9e <__ssvfiscanf_r+0x2ae>
 8014a90:	466b      	mov	r3, sp
 8014a92:	4622      	mov	r2, r4
 8014a94:	a941      	add	r1, sp, #260	; 0x104
 8014a96:	4630      	mov	r0, r6
 8014a98:	f000 f87a 	bl	8014b90 <_scanf_i>
 8014a9c:	e7ac      	b.n	80149f8 <__ssvfiscanf_r+0x208>
 8014a9e:	4b0f      	ldr	r3, [pc, #60]	; (8014adc <__ssvfiscanf_r+0x2ec>)
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	f43f aecf 	beq.w	8014844 <__ssvfiscanf_r+0x54>
 8014aa6:	466b      	mov	r3, sp
 8014aa8:	4622      	mov	r2, r4
 8014aaa:	a941      	add	r1, sp, #260	; 0x104
 8014aac:	4630      	mov	r0, r6
 8014aae:	f3af 8000 	nop.w
 8014ab2:	e7a1      	b.n	80149f8 <__ssvfiscanf_r+0x208>
 8014ab4:	89a3      	ldrh	r3, [r4, #12]
 8014ab6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014aba:	bf18      	it	ne
 8014abc:	f04f 30ff 	movne.w	r0, #4294967295
 8014ac0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8014ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014aca:	e7f9      	b.n	8014ac0 <__ssvfiscanf_r+0x2d0>
 8014acc:	0801473d 	.word	0x0801473d
 8014ad0:	080147b7 	.word	0x080147b7
 8014ad4:	08018099 	.word	0x08018099
 8014ad8:	080181a9 	.word	0x080181a9
 8014adc:	00000000 	.word	0x00000000

08014ae0 <_scanf_chars>:
 8014ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ae4:	4615      	mov	r5, r2
 8014ae6:	688a      	ldr	r2, [r1, #8]
 8014ae8:	4680      	mov	r8, r0
 8014aea:	460c      	mov	r4, r1
 8014aec:	b932      	cbnz	r2, 8014afc <_scanf_chars+0x1c>
 8014aee:	698a      	ldr	r2, [r1, #24]
 8014af0:	2a00      	cmp	r2, #0
 8014af2:	bf0c      	ite	eq
 8014af4:	2201      	moveq	r2, #1
 8014af6:	f04f 32ff 	movne.w	r2, #4294967295
 8014afa:	608a      	str	r2, [r1, #8]
 8014afc:	6822      	ldr	r2, [r4, #0]
 8014afe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8014b8c <_scanf_chars+0xac>
 8014b02:	06d1      	lsls	r1, r2, #27
 8014b04:	bf5f      	itttt	pl
 8014b06:	681a      	ldrpl	r2, [r3, #0]
 8014b08:	1d11      	addpl	r1, r2, #4
 8014b0a:	6019      	strpl	r1, [r3, #0]
 8014b0c:	6816      	ldrpl	r6, [r2, #0]
 8014b0e:	2700      	movs	r7, #0
 8014b10:	69a0      	ldr	r0, [r4, #24]
 8014b12:	b188      	cbz	r0, 8014b38 <_scanf_chars+0x58>
 8014b14:	2801      	cmp	r0, #1
 8014b16:	d107      	bne.n	8014b28 <_scanf_chars+0x48>
 8014b18:	682b      	ldr	r3, [r5, #0]
 8014b1a:	781a      	ldrb	r2, [r3, #0]
 8014b1c:	6963      	ldr	r3, [r4, #20]
 8014b1e:	5c9b      	ldrb	r3, [r3, r2]
 8014b20:	b953      	cbnz	r3, 8014b38 <_scanf_chars+0x58>
 8014b22:	bb27      	cbnz	r7, 8014b6e <_scanf_chars+0x8e>
 8014b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b28:	2802      	cmp	r0, #2
 8014b2a:	d120      	bne.n	8014b6e <_scanf_chars+0x8e>
 8014b2c:	682b      	ldr	r3, [r5, #0]
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014b34:	071b      	lsls	r3, r3, #28
 8014b36:	d41a      	bmi.n	8014b6e <_scanf_chars+0x8e>
 8014b38:	6823      	ldr	r3, [r4, #0]
 8014b3a:	06da      	lsls	r2, r3, #27
 8014b3c:	bf5e      	ittt	pl
 8014b3e:	682b      	ldrpl	r3, [r5, #0]
 8014b40:	781b      	ldrbpl	r3, [r3, #0]
 8014b42:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014b46:	682a      	ldr	r2, [r5, #0]
 8014b48:	686b      	ldr	r3, [r5, #4]
 8014b4a:	3201      	adds	r2, #1
 8014b4c:	602a      	str	r2, [r5, #0]
 8014b4e:	68a2      	ldr	r2, [r4, #8]
 8014b50:	3b01      	subs	r3, #1
 8014b52:	3a01      	subs	r2, #1
 8014b54:	606b      	str	r3, [r5, #4]
 8014b56:	3701      	adds	r7, #1
 8014b58:	60a2      	str	r2, [r4, #8]
 8014b5a:	b142      	cbz	r2, 8014b6e <_scanf_chars+0x8e>
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	dcd7      	bgt.n	8014b10 <_scanf_chars+0x30>
 8014b60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014b64:	4629      	mov	r1, r5
 8014b66:	4640      	mov	r0, r8
 8014b68:	4798      	blx	r3
 8014b6a:	2800      	cmp	r0, #0
 8014b6c:	d0d0      	beq.n	8014b10 <_scanf_chars+0x30>
 8014b6e:	6823      	ldr	r3, [r4, #0]
 8014b70:	f013 0310 	ands.w	r3, r3, #16
 8014b74:	d105      	bne.n	8014b82 <_scanf_chars+0xa2>
 8014b76:	68e2      	ldr	r2, [r4, #12]
 8014b78:	3201      	adds	r2, #1
 8014b7a:	60e2      	str	r2, [r4, #12]
 8014b7c:	69a2      	ldr	r2, [r4, #24]
 8014b7e:	b102      	cbz	r2, 8014b82 <_scanf_chars+0xa2>
 8014b80:	7033      	strb	r3, [r6, #0]
 8014b82:	6923      	ldr	r3, [r4, #16]
 8014b84:	441f      	add	r7, r3
 8014b86:	6127      	str	r7, [r4, #16]
 8014b88:	2000      	movs	r0, #0
 8014b8a:	e7cb      	b.n	8014b24 <_scanf_chars+0x44>
 8014b8c:	08018099 	.word	0x08018099

08014b90 <_scanf_i>:
 8014b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b94:	4698      	mov	r8, r3
 8014b96:	4b74      	ldr	r3, [pc, #464]	; (8014d68 <_scanf_i+0x1d8>)
 8014b98:	460c      	mov	r4, r1
 8014b9a:	4682      	mov	sl, r0
 8014b9c:	4616      	mov	r6, r2
 8014b9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014ba2:	b087      	sub	sp, #28
 8014ba4:	ab03      	add	r3, sp, #12
 8014ba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014baa:	4b70      	ldr	r3, [pc, #448]	; (8014d6c <_scanf_i+0x1dc>)
 8014bac:	69a1      	ldr	r1, [r4, #24]
 8014bae:	4a70      	ldr	r2, [pc, #448]	; (8014d70 <_scanf_i+0x1e0>)
 8014bb0:	2903      	cmp	r1, #3
 8014bb2:	bf18      	it	ne
 8014bb4:	461a      	movne	r2, r3
 8014bb6:	68a3      	ldr	r3, [r4, #8]
 8014bb8:	9201      	str	r2, [sp, #4]
 8014bba:	1e5a      	subs	r2, r3, #1
 8014bbc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014bc0:	bf88      	it	hi
 8014bc2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014bc6:	4627      	mov	r7, r4
 8014bc8:	bf82      	ittt	hi
 8014bca:	eb03 0905 	addhi.w	r9, r3, r5
 8014bce:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014bd2:	60a3      	strhi	r3, [r4, #8]
 8014bd4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014bd8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014bdc:	bf98      	it	ls
 8014bde:	f04f 0900 	movls.w	r9, #0
 8014be2:	6023      	str	r3, [r4, #0]
 8014be4:	463d      	mov	r5, r7
 8014be6:	f04f 0b00 	mov.w	fp, #0
 8014bea:	6831      	ldr	r1, [r6, #0]
 8014bec:	ab03      	add	r3, sp, #12
 8014bee:	7809      	ldrb	r1, [r1, #0]
 8014bf0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014bf4:	2202      	movs	r2, #2
 8014bf6:	f7eb fb33 	bl	8000260 <memchr>
 8014bfa:	b328      	cbz	r0, 8014c48 <_scanf_i+0xb8>
 8014bfc:	f1bb 0f01 	cmp.w	fp, #1
 8014c00:	d159      	bne.n	8014cb6 <_scanf_i+0x126>
 8014c02:	6862      	ldr	r2, [r4, #4]
 8014c04:	b92a      	cbnz	r2, 8014c12 <_scanf_i+0x82>
 8014c06:	6822      	ldr	r2, [r4, #0]
 8014c08:	2308      	movs	r3, #8
 8014c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014c0e:	6063      	str	r3, [r4, #4]
 8014c10:	6022      	str	r2, [r4, #0]
 8014c12:	6822      	ldr	r2, [r4, #0]
 8014c14:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014c18:	6022      	str	r2, [r4, #0]
 8014c1a:	68a2      	ldr	r2, [r4, #8]
 8014c1c:	1e51      	subs	r1, r2, #1
 8014c1e:	60a1      	str	r1, [r4, #8]
 8014c20:	b192      	cbz	r2, 8014c48 <_scanf_i+0xb8>
 8014c22:	6832      	ldr	r2, [r6, #0]
 8014c24:	1c51      	adds	r1, r2, #1
 8014c26:	6031      	str	r1, [r6, #0]
 8014c28:	7812      	ldrb	r2, [r2, #0]
 8014c2a:	f805 2b01 	strb.w	r2, [r5], #1
 8014c2e:	6872      	ldr	r2, [r6, #4]
 8014c30:	3a01      	subs	r2, #1
 8014c32:	2a00      	cmp	r2, #0
 8014c34:	6072      	str	r2, [r6, #4]
 8014c36:	dc07      	bgt.n	8014c48 <_scanf_i+0xb8>
 8014c38:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014c3c:	4631      	mov	r1, r6
 8014c3e:	4650      	mov	r0, sl
 8014c40:	4790      	blx	r2
 8014c42:	2800      	cmp	r0, #0
 8014c44:	f040 8085 	bne.w	8014d52 <_scanf_i+0x1c2>
 8014c48:	f10b 0b01 	add.w	fp, fp, #1
 8014c4c:	f1bb 0f03 	cmp.w	fp, #3
 8014c50:	d1cb      	bne.n	8014bea <_scanf_i+0x5a>
 8014c52:	6863      	ldr	r3, [r4, #4]
 8014c54:	b90b      	cbnz	r3, 8014c5a <_scanf_i+0xca>
 8014c56:	230a      	movs	r3, #10
 8014c58:	6063      	str	r3, [r4, #4]
 8014c5a:	6863      	ldr	r3, [r4, #4]
 8014c5c:	4945      	ldr	r1, [pc, #276]	; (8014d74 <_scanf_i+0x1e4>)
 8014c5e:	6960      	ldr	r0, [r4, #20]
 8014c60:	1ac9      	subs	r1, r1, r3
 8014c62:	f000 f889 	bl	8014d78 <__sccl>
 8014c66:	f04f 0b00 	mov.w	fp, #0
 8014c6a:	68a3      	ldr	r3, [r4, #8]
 8014c6c:	6822      	ldr	r2, [r4, #0]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d03d      	beq.n	8014cee <_scanf_i+0x15e>
 8014c72:	6831      	ldr	r1, [r6, #0]
 8014c74:	6960      	ldr	r0, [r4, #20]
 8014c76:	f891 c000 	ldrb.w	ip, [r1]
 8014c7a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014c7e:	2800      	cmp	r0, #0
 8014c80:	d035      	beq.n	8014cee <_scanf_i+0x15e>
 8014c82:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014c86:	d124      	bne.n	8014cd2 <_scanf_i+0x142>
 8014c88:	0510      	lsls	r0, r2, #20
 8014c8a:	d522      	bpl.n	8014cd2 <_scanf_i+0x142>
 8014c8c:	f10b 0b01 	add.w	fp, fp, #1
 8014c90:	f1b9 0f00 	cmp.w	r9, #0
 8014c94:	d003      	beq.n	8014c9e <_scanf_i+0x10e>
 8014c96:	3301      	adds	r3, #1
 8014c98:	f109 39ff 	add.w	r9, r9, #4294967295
 8014c9c:	60a3      	str	r3, [r4, #8]
 8014c9e:	6873      	ldr	r3, [r6, #4]
 8014ca0:	3b01      	subs	r3, #1
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	6073      	str	r3, [r6, #4]
 8014ca6:	dd1b      	ble.n	8014ce0 <_scanf_i+0x150>
 8014ca8:	6833      	ldr	r3, [r6, #0]
 8014caa:	3301      	adds	r3, #1
 8014cac:	6033      	str	r3, [r6, #0]
 8014cae:	68a3      	ldr	r3, [r4, #8]
 8014cb0:	3b01      	subs	r3, #1
 8014cb2:	60a3      	str	r3, [r4, #8]
 8014cb4:	e7d9      	b.n	8014c6a <_scanf_i+0xda>
 8014cb6:	f1bb 0f02 	cmp.w	fp, #2
 8014cba:	d1ae      	bne.n	8014c1a <_scanf_i+0x8a>
 8014cbc:	6822      	ldr	r2, [r4, #0]
 8014cbe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014cc2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8014cc6:	d1bf      	bne.n	8014c48 <_scanf_i+0xb8>
 8014cc8:	2310      	movs	r3, #16
 8014cca:	6063      	str	r3, [r4, #4]
 8014ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014cd0:	e7a2      	b.n	8014c18 <_scanf_i+0x88>
 8014cd2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8014cd6:	6022      	str	r2, [r4, #0]
 8014cd8:	780b      	ldrb	r3, [r1, #0]
 8014cda:	f805 3b01 	strb.w	r3, [r5], #1
 8014cde:	e7de      	b.n	8014c9e <_scanf_i+0x10e>
 8014ce0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014ce4:	4631      	mov	r1, r6
 8014ce6:	4650      	mov	r0, sl
 8014ce8:	4798      	blx	r3
 8014cea:	2800      	cmp	r0, #0
 8014cec:	d0df      	beq.n	8014cae <_scanf_i+0x11e>
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	05d9      	lsls	r1, r3, #23
 8014cf2:	d50d      	bpl.n	8014d10 <_scanf_i+0x180>
 8014cf4:	42bd      	cmp	r5, r7
 8014cf6:	d909      	bls.n	8014d0c <_scanf_i+0x17c>
 8014cf8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014d00:	4632      	mov	r2, r6
 8014d02:	4650      	mov	r0, sl
 8014d04:	4798      	blx	r3
 8014d06:	f105 39ff 	add.w	r9, r5, #4294967295
 8014d0a:	464d      	mov	r5, r9
 8014d0c:	42bd      	cmp	r5, r7
 8014d0e:	d028      	beq.n	8014d62 <_scanf_i+0x1d2>
 8014d10:	6822      	ldr	r2, [r4, #0]
 8014d12:	f012 0210 	ands.w	r2, r2, #16
 8014d16:	d113      	bne.n	8014d40 <_scanf_i+0x1b0>
 8014d18:	702a      	strb	r2, [r5, #0]
 8014d1a:	6863      	ldr	r3, [r4, #4]
 8014d1c:	9e01      	ldr	r6, [sp, #4]
 8014d1e:	4639      	mov	r1, r7
 8014d20:	4650      	mov	r0, sl
 8014d22:	47b0      	blx	r6
 8014d24:	f8d8 3000 	ldr.w	r3, [r8]
 8014d28:	6821      	ldr	r1, [r4, #0]
 8014d2a:	1d1a      	adds	r2, r3, #4
 8014d2c:	f8c8 2000 	str.w	r2, [r8]
 8014d30:	f011 0f20 	tst.w	r1, #32
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	d00f      	beq.n	8014d58 <_scanf_i+0x1c8>
 8014d38:	6018      	str	r0, [r3, #0]
 8014d3a:	68e3      	ldr	r3, [r4, #12]
 8014d3c:	3301      	adds	r3, #1
 8014d3e:	60e3      	str	r3, [r4, #12]
 8014d40:	1bed      	subs	r5, r5, r7
 8014d42:	44ab      	add	fp, r5
 8014d44:	6925      	ldr	r5, [r4, #16]
 8014d46:	445d      	add	r5, fp
 8014d48:	6125      	str	r5, [r4, #16]
 8014d4a:	2000      	movs	r0, #0
 8014d4c:	b007      	add	sp, #28
 8014d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d52:	f04f 0b00 	mov.w	fp, #0
 8014d56:	e7ca      	b.n	8014cee <_scanf_i+0x15e>
 8014d58:	07ca      	lsls	r2, r1, #31
 8014d5a:	bf4c      	ite	mi
 8014d5c:	8018      	strhmi	r0, [r3, #0]
 8014d5e:	6018      	strpl	r0, [r3, #0]
 8014d60:	e7eb      	b.n	8014d3a <_scanf_i+0x1aa>
 8014d62:	2001      	movs	r0, #1
 8014d64:	e7f2      	b.n	8014d4c <_scanf_i+0x1bc>
 8014d66:	bf00      	nop
 8014d68:	08016fcc 	.word	0x08016fcc
 8014d6c:	080130f9 	.word	0x080130f9
 8014d70:	08014ef5 	.word	0x08014ef5
 8014d74:	080181ef 	.word	0x080181ef

08014d78 <__sccl>:
 8014d78:	b570      	push	{r4, r5, r6, lr}
 8014d7a:	780b      	ldrb	r3, [r1, #0]
 8014d7c:	4604      	mov	r4, r0
 8014d7e:	2b5e      	cmp	r3, #94	; 0x5e
 8014d80:	bf0b      	itete	eq
 8014d82:	784b      	ldrbeq	r3, [r1, #1]
 8014d84:	1c48      	addne	r0, r1, #1
 8014d86:	1c88      	addeq	r0, r1, #2
 8014d88:	2200      	movne	r2, #0
 8014d8a:	bf08      	it	eq
 8014d8c:	2201      	moveq	r2, #1
 8014d8e:	1e61      	subs	r1, r4, #1
 8014d90:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014d94:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014d98:	42a9      	cmp	r1, r5
 8014d9a:	d1fb      	bne.n	8014d94 <__sccl+0x1c>
 8014d9c:	b90b      	cbnz	r3, 8014da2 <__sccl+0x2a>
 8014d9e:	3801      	subs	r0, #1
 8014da0:	bd70      	pop	{r4, r5, r6, pc}
 8014da2:	f082 0101 	eor.w	r1, r2, #1
 8014da6:	54e1      	strb	r1, [r4, r3]
 8014da8:	1c42      	adds	r2, r0, #1
 8014daa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8014dae:	2d2d      	cmp	r5, #45	; 0x2d
 8014db0:	f102 36ff 	add.w	r6, r2, #4294967295
 8014db4:	4610      	mov	r0, r2
 8014db6:	d006      	beq.n	8014dc6 <__sccl+0x4e>
 8014db8:	2d5d      	cmp	r5, #93	; 0x5d
 8014dba:	d0f1      	beq.n	8014da0 <__sccl+0x28>
 8014dbc:	b90d      	cbnz	r5, 8014dc2 <__sccl+0x4a>
 8014dbe:	4630      	mov	r0, r6
 8014dc0:	e7ee      	b.n	8014da0 <__sccl+0x28>
 8014dc2:	462b      	mov	r3, r5
 8014dc4:	e7ef      	b.n	8014da6 <__sccl+0x2e>
 8014dc6:	7816      	ldrb	r6, [r2, #0]
 8014dc8:	2e5d      	cmp	r6, #93	; 0x5d
 8014dca:	d0fa      	beq.n	8014dc2 <__sccl+0x4a>
 8014dcc:	42b3      	cmp	r3, r6
 8014dce:	dcf8      	bgt.n	8014dc2 <__sccl+0x4a>
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3001      	adds	r0, #1
 8014dd4:	4286      	cmp	r6, r0
 8014dd6:	5421      	strb	r1, [r4, r0]
 8014dd8:	dcfb      	bgt.n	8014dd2 <__sccl+0x5a>
 8014dda:	43d8      	mvns	r0, r3
 8014ddc:	4430      	add	r0, r6
 8014dde:	1c5d      	adds	r5, r3, #1
 8014de0:	42b3      	cmp	r3, r6
 8014de2:	bfa8      	it	ge
 8014de4:	2000      	movge	r0, #0
 8014de6:	182b      	adds	r3, r5, r0
 8014de8:	3202      	adds	r2, #2
 8014dea:	e7de      	b.n	8014daa <__sccl+0x32>

08014dec <_strtol_l.isra.0>:
 8014dec:	2b01      	cmp	r3, #1
 8014dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014df2:	d001      	beq.n	8014df8 <_strtol_l.isra.0+0xc>
 8014df4:	2b24      	cmp	r3, #36	; 0x24
 8014df6:	d906      	bls.n	8014e06 <_strtol_l.isra.0+0x1a>
 8014df8:	f7fc fbce 	bl	8011598 <__errno>
 8014dfc:	2316      	movs	r3, #22
 8014dfe:	6003      	str	r3, [r0, #0]
 8014e00:	2000      	movs	r0, #0
 8014e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e06:	4f3a      	ldr	r7, [pc, #232]	; (8014ef0 <_strtol_l.isra.0+0x104>)
 8014e08:	468e      	mov	lr, r1
 8014e0a:	4676      	mov	r6, lr
 8014e0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014e10:	5de5      	ldrb	r5, [r4, r7]
 8014e12:	f015 0508 	ands.w	r5, r5, #8
 8014e16:	d1f8      	bne.n	8014e0a <_strtol_l.isra.0+0x1e>
 8014e18:	2c2d      	cmp	r4, #45	; 0x2d
 8014e1a:	d134      	bne.n	8014e86 <_strtol_l.isra.0+0x9a>
 8014e1c:	f89e 4000 	ldrb.w	r4, [lr]
 8014e20:	f04f 0801 	mov.w	r8, #1
 8014e24:	f106 0e02 	add.w	lr, r6, #2
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d05c      	beq.n	8014ee6 <_strtol_l.isra.0+0xfa>
 8014e2c:	2b10      	cmp	r3, #16
 8014e2e:	d10c      	bne.n	8014e4a <_strtol_l.isra.0+0x5e>
 8014e30:	2c30      	cmp	r4, #48	; 0x30
 8014e32:	d10a      	bne.n	8014e4a <_strtol_l.isra.0+0x5e>
 8014e34:	f89e 4000 	ldrb.w	r4, [lr]
 8014e38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014e3c:	2c58      	cmp	r4, #88	; 0x58
 8014e3e:	d14d      	bne.n	8014edc <_strtol_l.isra.0+0xf0>
 8014e40:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014e44:	2310      	movs	r3, #16
 8014e46:	f10e 0e02 	add.w	lr, lr, #2
 8014e4a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014e4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014e52:	2600      	movs	r6, #0
 8014e54:	fbbc f9f3 	udiv	r9, ip, r3
 8014e58:	4635      	mov	r5, r6
 8014e5a:	fb03 ca19 	mls	sl, r3, r9, ip
 8014e5e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014e62:	2f09      	cmp	r7, #9
 8014e64:	d818      	bhi.n	8014e98 <_strtol_l.isra.0+0xac>
 8014e66:	463c      	mov	r4, r7
 8014e68:	42a3      	cmp	r3, r4
 8014e6a:	dd24      	ble.n	8014eb6 <_strtol_l.isra.0+0xca>
 8014e6c:	2e00      	cmp	r6, #0
 8014e6e:	db1f      	blt.n	8014eb0 <_strtol_l.isra.0+0xc4>
 8014e70:	45a9      	cmp	r9, r5
 8014e72:	d31d      	bcc.n	8014eb0 <_strtol_l.isra.0+0xc4>
 8014e74:	d101      	bne.n	8014e7a <_strtol_l.isra.0+0x8e>
 8014e76:	45a2      	cmp	sl, r4
 8014e78:	db1a      	blt.n	8014eb0 <_strtol_l.isra.0+0xc4>
 8014e7a:	fb05 4503 	mla	r5, r5, r3, r4
 8014e7e:	2601      	movs	r6, #1
 8014e80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014e84:	e7eb      	b.n	8014e5e <_strtol_l.isra.0+0x72>
 8014e86:	2c2b      	cmp	r4, #43	; 0x2b
 8014e88:	bf08      	it	eq
 8014e8a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014e8e:	46a8      	mov	r8, r5
 8014e90:	bf08      	it	eq
 8014e92:	f106 0e02 	addeq.w	lr, r6, #2
 8014e96:	e7c7      	b.n	8014e28 <_strtol_l.isra.0+0x3c>
 8014e98:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014e9c:	2f19      	cmp	r7, #25
 8014e9e:	d801      	bhi.n	8014ea4 <_strtol_l.isra.0+0xb8>
 8014ea0:	3c37      	subs	r4, #55	; 0x37
 8014ea2:	e7e1      	b.n	8014e68 <_strtol_l.isra.0+0x7c>
 8014ea4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014ea8:	2f19      	cmp	r7, #25
 8014eaa:	d804      	bhi.n	8014eb6 <_strtol_l.isra.0+0xca>
 8014eac:	3c57      	subs	r4, #87	; 0x57
 8014eae:	e7db      	b.n	8014e68 <_strtol_l.isra.0+0x7c>
 8014eb0:	f04f 36ff 	mov.w	r6, #4294967295
 8014eb4:	e7e4      	b.n	8014e80 <_strtol_l.isra.0+0x94>
 8014eb6:	2e00      	cmp	r6, #0
 8014eb8:	da05      	bge.n	8014ec6 <_strtol_l.isra.0+0xda>
 8014eba:	2322      	movs	r3, #34	; 0x22
 8014ebc:	6003      	str	r3, [r0, #0]
 8014ebe:	4665      	mov	r5, ip
 8014ec0:	b942      	cbnz	r2, 8014ed4 <_strtol_l.isra.0+0xe8>
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	e79d      	b.n	8014e02 <_strtol_l.isra.0+0x16>
 8014ec6:	f1b8 0f00 	cmp.w	r8, #0
 8014eca:	d000      	beq.n	8014ece <_strtol_l.isra.0+0xe2>
 8014ecc:	426d      	negs	r5, r5
 8014ece:	2a00      	cmp	r2, #0
 8014ed0:	d0f7      	beq.n	8014ec2 <_strtol_l.isra.0+0xd6>
 8014ed2:	b10e      	cbz	r6, 8014ed8 <_strtol_l.isra.0+0xec>
 8014ed4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014ed8:	6011      	str	r1, [r2, #0]
 8014eda:	e7f2      	b.n	8014ec2 <_strtol_l.isra.0+0xd6>
 8014edc:	2430      	movs	r4, #48	; 0x30
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d1b3      	bne.n	8014e4a <_strtol_l.isra.0+0x5e>
 8014ee2:	2308      	movs	r3, #8
 8014ee4:	e7b1      	b.n	8014e4a <_strtol_l.isra.0+0x5e>
 8014ee6:	2c30      	cmp	r4, #48	; 0x30
 8014ee8:	d0a4      	beq.n	8014e34 <_strtol_l.isra.0+0x48>
 8014eea:	230a      	movs	r3, #10
 8014eec:	e7ad      	b.n	8014e4a <_strtol_l.isra.0+0x5e>
 8014eee:	bf00      	nop
 8014ef0:	08018099 	.word	0x08018099

08014ef4 <_strtol_r>:
 8014ef4:	f7ff bf7a 	b.w	8014dec <_strtol_l.isra.0>

08014ef8 <__submore>:
 8014ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014efc:	460c      	mov	r4, r1
 8014efe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f04:	4299      	cmp	r1, r3
 8014f06:	d11d      	bne.n	8014f44 <__submore+0x4c>
 8014f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014f0c:	f7fd f98a 	bl	8012224 <_malloc_r>
 8014f10:	b918      	cbnz	r0, 8014f1a <__submore+0x22>
 8014f12:	f04f 30ff 	mov.w	r0, #4294967295
 8014f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f1e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014f20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014f24:	6360      	str	r0, [r4, #52]	; 0x34
 8014f26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8014f2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014f2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014f32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014f36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014f3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014f3e:	6020      	str	r0, [r4, #0]
 8014f40:	2000      	movs	r0, #0
 8014f42:	e7e8      	b.n	8014f16 <__submore+0x1e>
 8014f44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014f46:	0077      	lsls	r7, r6, #1
 8014f48:	463a      	mov	r2, r7
 8014f4a:	f7fe fe77 	bl	8013c3c <_realloc_r>
 8014f4e:	4605      	mov	r5, r0
 8014f50:	2800      	cmp	r0, #0
 8014f52:	d0de      	beq.n	8014f12 <__submore+0x1a>
 8014f54:	eb00 0806 	add.w	r8, r0, r6
 8014f58:	4601      	mov	r1, r0
 8014f5a:	4632      	mov	r2, r6
 8014f5c:	4640      	mov	r0, r8
 8014f5e:	f7fd f8eb 	bl	8012138 <memcpy>
 8014f62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014f66:	f8c4 8000 	str.w	r8, [r4]
 8014f6a:	e7e9      	b.n	8014f40 <__submore+0x48>

08014f6c <_gettimeofday>:
 8014f6c:	4b02      	ldr	r3, [pc, #8]	; (8014f78 <_gettimeofday+0xc>)
 8014f6e:	2258      	movs	r2, #88	; 0x58
 8014f70:	601a      	str	r2, [r3, #0]
 8014f72:	f04f 30ff 	mov.w	r0, #4294967295
 8014f76:	4770      	bx	lr
 8014f78:	20000bc4 	.word	0x20000bc4

08014f7c <_init>:
 8014f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f7e:	bf00      	nop
 8014f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f82:	bc08      	pop	{r3}
 8014f84:	469e      	mov	lr, r3
 8014f86:	4770      	bx	lr

08014f88 <_fini>:
 8014f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f8a:	bf00      	nop
 8014f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f8e:	bc08      	pop	{r3}
 8014f90:	469e      	mov	lr, r3
 8014f92:	4770      	bx	lr
