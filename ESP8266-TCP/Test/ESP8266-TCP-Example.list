
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021438  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000059b8  08021618  08021618  00031618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026fd0  08026fd0  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08026fd0  08026fd0  00036fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026fd8  08026fd8  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08026fd8  08026fd8  00036fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08026fe8  08026fe8  00036fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08026ff8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af8  2000033c  08027334  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e34  08027334  00040e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00067daf  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c0b7  00000000  00000000  000a811b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000041f8  00000000  00000000  000b41d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003fd8  00000000  00000000  000b83d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d83d  00000000  00000000  000bc3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c796  00000000  00000000  000e9be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110955  00000000  00000000  0011637b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00226cd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00013f4c  00000000  00000000  00226d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080215f8 	.word	0x080215f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	080215f8 	.word	0x080215f8

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000408 	.word	0x20000408

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01c ff4e 	bl	801dc0c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01c fea6 	bl	801dc0c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000e38 	.word	0x20000e38

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01d fa7d 	bl	801e448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 ffbf 	bl	8003ed0 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08026ff8 	.word	0x08026ff8
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000e34 	.word	0x20000e34

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000e20 	.word	0x20000e20
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000e20 	.word	0x20000e20

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	0802470c 	.word	0x0802470c
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	0802471c 	.word	0x0802471c

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	0802471c 	.word	0x0802471c

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08024724 	.word	0x08024724
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	0802473c 	.word	0x0802473c
 8003904:	08024744 	.word	0x08024744

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f9da 	bl	8003cf4 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	20000498 	.word	0x20000498

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f9ec 	bl	8003d76 <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	20000498 	.word	0x20000498

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fa63 	bl	8003e8a <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000498 	.word	0x20000498

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <Wait_Response+0x74>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <Wait_Response+0x78>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <Wait_Response+0x7c>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <Wait_Response+0x74>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <Wait_Response+0x80>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa43 	bl	8003e8a <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <Wait_Response+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <Wait_Response+0x7c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e012      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <Wait_Response+0x78>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4798      	blx	r3
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <Wait_Response+0x7c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d807      	bhi.n	8003a3e <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <Wait_Response+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <Wait_Response+0x7c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e000      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a3e:	2305      	movs	r3, #5
	}

}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000036c 	.word	0x2000036c
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	20000370 	.word	0x20000370
 8003a54:	20000498 	.word	0x20000498

08003a58 <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b09e      	sub	sp, #120	; 0x78
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	static Status response_state = IDLE;

	static uint8_t commandCount = 0,firstCall = 1;


	switch(commandCount)
 8003a62:	4b9a      	ldr	r3, [pc, #616]	; (8003ccc <Connect_Wifi+0x274>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	f000 80c4 	beq.w	8003bf4 <Connect_Wifi+0x19c>
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	f300 8127 	bgt.w	8003cc0 <Connect_Wifi+0x268>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <Connect_Wifi+0x24>
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d05e      	beq.n	8003b38 <Connect_Wifi+0xe0>
 8003a7a:	e121      	b.n	8003cc0 <Connect_Wifi+0x268>
	{
	case 0:
		if(firstCall)
 8003a7c:	4b94      	ldr	r3, [pc, #592]	; (8003cd0 <Connect_Wifi+0x278>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <Connect_Wifi+0x38>
		{
			Send_AT_Command(AT_CWMODE_STATION);  // sending AT+CWMODE=1
 8003a84:	4893      	ldr	r0, [pc, #588]	; (8003cd4 <Connect_Wifi+0x27c>)
 8003a86:	f7ff ff6b 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003a8a:	4b91      	ldr	r3, [pc, #580]	; (8003cd0 <Connect_Wifi+0x278>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a94:	4890      	ldr	r0, [pc, #576]	; (8003cd8 <Connect_Wifi+0x280>)
 8003a96:	f7ff ff9d 	bl	80039d4 <Wait_Response>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b8f      	ldr	r3, [pc, #572]	; (8003cdc <Connect_Wifi+0x284>)
 8003aa0:	701a      	strb	r2, [r3, #0]

		if(Read_Response(AT_RESPONSE_ERROR))		// if there is an ERROR message in the buffer return CONNECTION_ERROR
 8003aa2:	488f      	ldr	r0, [pc, #572]	; (8003ce0 <Connect_Wifi+0x288>)
 8003aa4:	f7ff ff84 	bl	80039b0 <Read_Response>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <Connect_Wifi+0x70>
		{
			firstCall = 1;
 8003aae:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <Connect_Wifi+0x278>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003ab4:	4b85      	ldr	r3, [pc, #532]	; (8003ccc <Connect_Wifi+0x274>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003aba:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f9ad 	bl	8003e1e <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e0fc      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003ac8:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <Connect_Wifi+0x284>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d101      	bne.n	8003ad4 <Connect_Wifi+0x7c>
		{
			return IDLE;
 8003ad0:	2305      	movs	r3, #5
 8003ad2:	e0f6      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003ad4:	4b81      	ldr	r3, [pc, #516]	; (8003cdc <Connect_Wifi+0x284>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <Connect_Wifi+0xa4>
		{
			commandCount += 1;
 8003adc:	4b7b      	ldr	r3, [pc, #492]	; (8003ccc <Connect_Wifi+0x274>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <Connect_Wifi+0x274>)
 8003ae6:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f996 	bl	8003e1e <ringBuffer_flush>
			firstCall = 1;
 8003af2:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <Connect_Wifi+0x278>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
			return FOUND;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e0e2      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003afc:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <Connect_Wifi+0x284>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d10c      	bne.n	8003b1e <Connect_Wifi+0xc6>
		{
			firstCall = 1;
 8003b04:	4b72      	ldr	r3, [pc, #456]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b0a:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f985 	bl	8003e1e <ringBuffer_flush>
			commandCount = 0;
 8003b14:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <Connect_Wifi+0x274>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
			return TIMEOUT_ERROR;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0d1      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003b1e:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003b24:	4b69      	ldr	r3, [pc, #420]	; (8003ccc <Connect_Wifi+0x274>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b2a:	4b6e      	ldr	r3, [pc, #440]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f975 	bl	8003e1e <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003b34:	2304      	movs	r3, #4
 8003b36:	e0c4      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}


		break;
	case 1:
		if(firstCall)
 8003b38:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <Connect_Wifi+0xf4>
		{
			Send_AT_Command(AT_CWQAP);  // sending AT+CWQAP
 8003b40:	4869      	ldr	r0, [pc, #420]	; (8003ce8 <Connect_Wifi+0x290>)
 8003b42:	f7ff ff0d 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003b46:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b50:	4861      	ldr	r0, [pc, #388]	; (8003cd8 <Connect_Wifi+0x280>)
 8003b52:	f7ff ff3f 	bl	80039d4 <Wait_Response>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <Connect_Wifi+0x284>)
 8003b5c:	701a      	strb	r2, [r3, #0]
		if(Read_Response(AT_RESPONSE_ERROR))
 8003b5e:	4860      	ldr	r0, [pc, #384]	; (8003ce0 <Connect_Wifi+0x288>)
 8003b60:	f7ff ff26 	bl	80039b0 <Read_Response>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00c      	beq.n	8003b84 <Connect_Wifi+0x12c>
		{
			firstCall = 1;
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003b70:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <Connect_Wifi+0x274>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b76:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f94f 	bl	8003e1e <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003b80:	2304      	movs	r3, #4
 8003b82:	e09e      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003b84:	4b55      	ldr	r3, [pc, #340]	; (8003cdc <Connect_Wifi+0x284>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d101      	bne.n	8003b90 <Connect_Wifi+0x138>
		{
			return IDLE;
 8003b8c:	2305      	movs	r3, #5
 8003b8e:	e098      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003b90:	4b52      	ldr	r3, [pc, #328]	; (8003cdc <Connect_Wifi+0x284>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <Connect_Wifi+0x160>
		{
			commandCount += 1;
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <Connect_Wifi+0x274>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <Connect_Wifi+0x274>)
 8003ba2:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f938 	bl	8003e1e <ringBuffer_flush>
			firstCall = 1;
 8003bae:	4b48      	ldr	r3, [pc, #288]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
			return FOUND;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e084      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003bb8:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <Connect_Wifi+0x284>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d10c      	bne.n	8003bda <Connect_Wifi+0x182>
		{
			firstCall = 1;
 8003bc0:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <Connect_Wifi+0x274>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003bcc:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f924 	bl	8003e1e <ringBuffer_flush>
			return TIMEOUT_ERROR;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e073      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003be0:	4b3a      	ldr	r3, [pc, #232]	; (8003ccc <Connect_Wifi+0x274>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003be6:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f917 	bl	8003e1e <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	e066      	b.n	8003cc2 <Connect_Wifi+0x26a>

		break;

	case 2:
	{
		if(firstCall)
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <Connect_Wifi+0x1c6>
		{
			char tx_buffer[100];

			sprintf(tx_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003bfc:	f107 000c 	add.w	r0, r7, #12
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a39      	ldr	r2, [pc, #228]	; (8003cec <Connect_Wifi+0x294>)
 8003c08:	4939      	ldr	r1, [pc, #228]	; (8003cf0 <Connect_Wifi+0x298>)
 8003c0a:	f01a ff91 	bl	801eb30 <siprintf>

			Send_AT_Command(tx_buffer);  // sending AT+CWJAP="<SSID>","<password>"
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fea4 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003c18:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003c1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c22:	482d      	ldr	r0, [pc, #180]	; (8003cd8 <Connect_Wifi+0x280>)
 8003c24:	f7ff fed6 	bl	80039d4 <Wait_Response>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <Connect_Wifi+0x284>)
 8003c2e:	701a      	strb	r2, [r3, #0]
		if(Read_Response(AT_RESPONSE_ERROR))
 8003c30:	482b      	ldr	r0, [pc, #172]	; (8003ce0 <Connect_Wifi+0x288>)
 8003c32:	f7ff febd 	bl	80039b0 <Read_Response>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <Connect_Wifi+0x1fe>
		{
			firstCall = 1;
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <Connect_Wifi+0x274>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f8e6 	bl	8003e1e <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003c52:	2304      	movs	r3, #4
 8003c54:	e035      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <Connect_Wifi+0x284>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d101      	bne.n	8003c62 <Connect_Wifi+0x20a>
		{

			return IDLE;
 8003c5e:	2305      	movs	r3, #5
 8003c60:	e02f      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <Connect_Wifi+0x284>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <Connect_Wifi+0x22c>
		{
			commandCount = 0;
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <Connect_Wifi+0x274>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f8d2 	bl	8003e1e <ringBuffer_flush>
			firstCall = 1;
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
			return CONNECTION_OK;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e01e      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <Connect_Wifi+0x284>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d10c      	bne.n	8003ca6 <Connect_Wifi+0x24e>
		{
			firstCall = 1;
 8003c8c:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <Connect_Wifi+0x274>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f8be 	bl	8003e1e <ringBuffer_flush>
			return TIMEOUT_ERROR;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e00d      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <Connect_Wifi+0x278>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <Connect_Wifi+0x274>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f8b1 	bl	8003e1e <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	e000      	b.n	8003cc2 <Connect_Wifi+0x26a>


		break;
	}

	default: return CONNECTION_ERROR;
 8003cc0:	2304      	movs	r3, #4
	}
	return IDLE;
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3770      	adds	r7, #112	; 0x70
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000374 	.word	0x20000374
 8003cd0:	20000010 	.word	0x20000010
 8003cd4:	08021618 	.word	0x08021618
 8003cd8:	08021628 	.word	0x08021628
 8003cdc:	20000011 	.word	0x20000011
 8003ce0:	0802162c 	.word	0x0802162c
 8003ce4:	20000498 	.word	0x20000498
 8003ce8:	08021634 	.word	0x08021634
 8003cec:	08021640 	.word	0x08021640
 8003cf0:	0802164c 	.word	0x0802164c

08003cf4 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003cfc:	2010      	movs	r0, #16
 8003cfe:	f01a fd45 	bl	801e78c <malloc>
 8003d02:	4603      	mov	r3, r0
 8003d04:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e017      	b.n	8003d40 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003d22:	2101      	movs	r1, #1
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f019 ff69 	bl	801dbfc <calloc>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f01a fd1a 	bl	801e79c <free>
		}
		free(buffer);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f01a fd17 	bl	801e79c <free>
	}
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d00c      	beq.n	8003daa <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4413      	add	r3, r2
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003da8:	e009      	b.n	8003dbe <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d00d      	beq.n	8003dfc <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	605a      	str	r2, [r3, #4]
		return data;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	e00a      	b.n	8003e12 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	605a      	str	r2, [r3, #4]
		return data;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68d8      	ldr	r0, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2100      	movs	r1, #0
 8003e32:	f01a fcc9 	bl	801e7c8 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	601a      	str	r2, [r3, #0]
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e00a      	b.n	8003e72 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	4413      	add	r3, r2
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff85 	bl	8003d76 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	6838      	ldr	r0, [r7, #0]
 8003e74:	f7fc f9e2 	bl	800023c <strlen>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d8ed      	bhi.n	8003e5c <ringBuffer_pushArray+0x10>
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f01b fc0a 	bl	801f6b4 <strstr>
 8003ea0:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <ringBuffer_lookFor+0x22>
		return 1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003eac:	2300      	movs	r3, #0

}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ed6:	f7fd f84a 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eda:	f000 f81d 	bl	8003f18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ede:	f000 f951 	bl	8004184 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003ee2:	f000 f891 	bl	8004008 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003ee6:	f000 f8ed 	bl	80040c4 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <main+0x44>)
 8003eec:	463b      	mov	r3, r7
 8003eee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ef2:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003ef6:	463b      	mov	r3, r7
 8003ef8:	4619      	mov	r1, r3
 8003efa:	2002      	movs	r0, #2
 8003efc:	f002 fef4 	bl	8006ce8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003f00:	2120      	movs	r1, #32
 8003f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f06:	f7fd fc2f 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003f0a:	2064      	movs	r0, #100	; 0x64
 8003f0c:	f7fd f8a0 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003f10:	e7f6      	b.n	8003f00 <main+0x30>
 8003f12:	bf00      	nop
 8003f14:	08021664 	.word	0x08021664

08003f18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b0a8      	sub	sp, #160	; 0xa0
 8003f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f22:	2238      	movs	r2, #56	; 0x38
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f01a fc4e 	bl	801e7c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	2254      	movs	r2, #84	; 0x54
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f01a fc40 	bl	801e7c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003f48:	2000      	movs	r0, #0
 8003f4a:	f7fd fc4b 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f56:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f58:	2340      	movs	r3, #64	; 0x40
 8003f5a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f62:	2302      	movs	r3, #2
 8003f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003f68:	2304      	movs	r3, #4
 8003f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003f6e:	2355      	movs	r3, #85	; 0x55
 8003f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f74:	2302      	movs	r3, #2
 8003f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f80:	2302      	movs	r3, #2
 8003f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fcde 	bl	800194c <HAL_RCC_OscConfig>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf14      	ite	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	2300      	moveq	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003fa0:	f000 f960 	bl	8004264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fac:	2300      	movs	r3, #0
 8003fae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003fb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd ffdc 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003fd4:	f000 f946 	bl	8004264 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003fd8:	2321      	movs	r3, #33	; 0x21
 8003fda:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fe4:	463b      	mov	r3, r7
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe f9e4 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003ffc:	f000 f932 	bl	8004264 <Error_Handler>
  }
}
 8004000:	bf00      	nop
 8004002:	37a0      	adds	r7, #160	; 0xa0
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800400c:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800400e:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8004010:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004012:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004018:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800401a:	4b28      	ldr	r3, [pc, #160]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800401c:	2200      	movs	r2, #0
 800401e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004020:	4b26      	ldr	r3, [pc, #152]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004026:	4b25      	ldr	r3, [pc, #148]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004028:	2200      	movs	r2, #0
 800402a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800402c:	4b23      	ldr	r3, [pc, #140]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800402e:	220c      	movs	r2, #12
 8004030:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004032:	4b22      	ldr	r3, [pc, #136]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004034:	2200      	movs	r2, #0
 8004036:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004038:	4b20      	ldr	r3, [pc, #128]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800403a:	2200      	movs	r2, #0
 800403c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800403e:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004040:	2200      	movs	r2, #0
 8004042:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004046:	2200      	movs	r2, #0
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800404a:	481c      	ldr	r0, [pc, #112]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800404c:	f7fe fbfe 	bl	800284c <HAL_UART_Init>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf14      	ite	ne
 8004056:	2301      	movne	r3, #1
 8004058:	2300      	moveq	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8004060:	f000 f900 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004064:	2100      	movs	r1, #0
 8004066:	4815      	ldr	r0, [pc, #84]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004068:	f7ff fb84 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 800407c:	f000 f8f2 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004080:	2100      	movs	r1, #0
 8004082:	480e      	ldr	r0, [pc, #56]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004084:	f7ff fbb4 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8004098:	f000 f8e4 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800409c:	4807      	ldr	r0, [pc, #28]	; (80040bc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800409e:	f7ff fb30 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 80040b2:	f000 f8d7 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000378 	.word	0x20000378
 80040c0:	40008000 	.word	0x40008000

080040c4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040ca:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80040cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040ce:	4b2b      	ldr	r3, [pc, #172]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040d6:	4b29      	ldr	r3, [pc, #164]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040dc:	4b27      	ldr	r3, [pc, #156]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040ea:	220c      	movs	r2, #12
 80040ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004102:	2200      	movs	r2, #0
 8004104:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004108:	2200      	movs	r2, #0
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800410c:	481b      	ldr	r0, [pc, #108]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800410e:	f7fe fb9d 	bl	800284c <HAL_UART_Init>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8004122:	f000 f89f 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004126:	2100      	movs	r1, #0
 8004128:	4814      	ldr	r0, [pc, #80]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800412a:	f7ff fb23 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800413e:	f000 f891 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004142:	2100      	movs	r1, #0
 8004144:	480d      	ldr	r0, [pc, #52]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004146:	f7ff fb53 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800415a:	f000 f883 	bl	8004264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800415e:	4807      	ldr	r0, [pc, #28]	; (800417c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004160:	f7ff facf 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8004174:	f000 f876 	bl	8004264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000408 	.word	0x20000408
 8004180:	40013800 	.word	0x40013800

08004184 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418a:	f107 0314 	add.w	r3, r7, #20
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800419a:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041a0:	f043 0304 	orr.w	r3, r3, #4
 80041a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041a6:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041b2:	4b29      	ldr	r3, [pc, #164]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b6:	4a28      	ldr	r2, [pc, #160]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041b8:	f043 0320 	orr.w	r3, r3, #32
 80041bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ca:	4b23      	ldr	r3, [pc, #140]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	4a22      	ldr	r2, [pc, #136]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ee:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <_ZL12MX_GPIO_Initv+0xd4>)
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2120      	movs	r1, #32
 80041fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004202:	f7fd fa99 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800420a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <_ZL12MX_GPIO_Initv+0xd8>)
 800420e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4619      	mov	r1, r3
 800421a:	4811      	ldr	r0, [pc, #68]	; (8004260 <_ZL12MX_GPIO_Initv+0xdc>)
 800421c:	f7fd f90a 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004220:	2320      	movs	r3, #32
 8004222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004224:	2301      	movs	r3, #1
 8004226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422c:	2300      	movs	r3, #0
 800422e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004230:	f107 0314 	add.w	r3, r7, #20
 8004234:	4619      	mov	r1, r3
 8004236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800423a:	f7fd f8fb 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	2028      	movs	r0, #40	; 0x28
 8004244:	f7fd f801 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004248:	2028      	movs	r0, #40	; 0x28
 800424a:	f7fd f818 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 800424e:	bf00      	nop
 8004250:	3728      	adds	r7, #40	; 0x28
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	10110000 	.word	0x10110000
 8004260:	48000800 	.word	0x48000800

08004264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004268:	b672      	cpsid	i
}
 800426a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800426c:	e7fe      	b.n	800426c <Error_Handler+0x8>

0800426e <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8004276:	2032      	movs	r0, #50	; 0x32
 8004278:	f7ff fd3c 	bl	8003cf4 <ringBuffer_init>
 800427c:	4602      	mov	r2, r0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	605a      	str	r2, [r3, #4]

	}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fd56 	bl	8003d48 <ringBuffer_deInit>
	}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f00e f9b8 	bl	8012624 <_ZN5UtestC1Ev>
 80042b4:	4a03      	ldr	r2, [pc, #12]	; (80042c4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	080255cc 	.word	0x080255cc

080042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	4a05      	ldr	r2, [pc, #20]	; (80042e8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4618      	mov	r0, r3
 80042da:	f00e f9b3 	bl	8012644 <_ZN5UtestD1Ev>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	080255cc 	.word	0x080255cc

080042ec <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ffe7 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80042fa:	2108      	movs	r1, #8
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f004 f9d5 	bl	80086ac <_ZdlPvj>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ffbe 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004328:	4a03      	ldr	r2, [pc, #12]	; (8004338 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	080255ac 	.word	0x080255ac

0800433c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	2224      	movs	r2, #36	; 0x24
 8004346:	4906      	ldr	r1, [pc, #24]	; (8004360 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004348:	2008      	movs	r0, #8
 800434a:	f004 f99b 	bl	8008684 <_ZnwjPKci>
 800434e:	4604      	mov	r4, r0
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff ffdb 	bl	800430c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8004356:	4623      	mov	r3, r4
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bd90      	pop	{r4, r7, pc}
 8004360:	0802166c 	.word	0x0802166c

08004364 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f00c fd76 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8004374:	4a03      	ldr	r2, [pc, #12]	; (8004384 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08025500 	.word	0x08025500

08004388 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	b087      	sub	sp, #28
 800438c:	af04      	add	r7, sp, #16
 800438e:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004390:	f00e f91e 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004394:	4604      	mov	r4, r0
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	3338      	adds	r3, #56	; 0x38
 800439a:	681d      	ldr	r5, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	461e      	mov	r6, r3
 80043a4:	f00e f924 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043a8:	4603      	mov	r3, r0
 80043aa:	9302      	str	r3, [sp, #8]
 80043ac:	2327      	movs	r3, #39	; 0x27
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 80043b6:	4632      	mov	r2, r6
 80043b8:	2132      	movs	r1, #50	; 0x32
 80043ba:	4620      	mov	r0, r4
 80043bc:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 80043be:	f00e f907 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 80043c2:	4604      	mov	r4, r0
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	3320      	adds	r3, #32
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2de      	uxtb	r6, r3
 80043da:	f00e f909 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043de:	4603      	mov	r3, r0
 80043e0:	9303      	str	r3, [sp, #12]
 80043e2:	2328      	movs	r3, #40	; 0x28
 80043e4:	9302      	str	r3, [sp, #8]
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 80043f0:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 80043f2:	4631      	mov	r1, r6
 80043f4:	4620      	mov	r0, r4
 80043f6:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 80043f8:	f00e f8ea 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 80043fc:	4604      	mov	r4, r0
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	3338      	adds	r3, #56	; 0x38
 8004402:	681d      	ldr	r5, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461e      	mov	r6, r3
 800440c:	f00e f8f0 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004410:	4603      	mov	r3, r0
 8004412:	9302      	str	r3, [sp, #8]
 8004414:	2329      	movs	r3, #41	; 0x29
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800441e:	4632      	mov	r2, r6
 8004420:	2100      	movs	r1, #0
 8004422:	4620      	mov	r0, r4
 8004424:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004426:	f00e f8d3 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800442a:	4604      	mov	r4, r0
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	3338      	adds	r3, #56	; 0x38
 8004430:	681d      	ldr	r5, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	461e      	mov	r6, r3
 800443a:	f00e f8d9 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800443e:	4603      	mov	r3, r0
 8004440:	9302      	str	r3, [sp, #8]
 8004442:	232a      	movs	r3, #42	; 0x2a
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 800444c:	4632      	mov	r2, r6
 800444e:	2100      	movs	r1, #0
 8004450:	4620      	mov	r0, r4
 8004452:	47a8      	blx	r5

}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800445c:	0802166c 	.word	0x0802166c
 8004460:	08021680 	.word	0x08021680
 8004464:	080216a8 	.word	0x080216a8
 8004468:	080216c0 	.word	0x080216c0
 800446c:	080216c8 	.word	0x080216c8
 8004470:	080216f0 	.word	0x080216f0

08004474 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff ff0a 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004490:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	080254e0 	.word	0x080254e0

080044a4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	222e      	movs	r2, #46	; 0x2e
 80044ae:	4906      	ldr	r1, [pc, #24]	; (80044c8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 80044b0:	2008      	movs	r0, #8
 80044b2:	f004 f8e7 	bl	8008684 <_ZnwjPKci>
 80044b6:	4604      	mov	r4, r0
 80044b8:	4620      	mov	r0, r4
 80044ba:	f7ff ffdb 	bl	8004474 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 80044be:	4623      	mov	r3, r4
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd90      	pop	{r4, r7, pc}
 80044c8:	0802166c 	.word	0x0802166c

080044cc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f00c fcc2 	bl	8010e60 <_ZN10UtestShellC1Ev>
 80044dc:	4a03      	ldr	r2, [pc, #12]	; (80044ec <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	08025434 	.word	0x08025434

080044f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 80044f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af04      	add	r7, sp, #16
 80044f6:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2145      	movs	r1, #69	; 0x45
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fc39 	bl	8003d76 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004504:	f00e f864 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004508:	4604      	mov	r4, r0
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	3338      	adds	r3, #56	; 0x38
 800450e:	681d      	ldr	r5, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	461e      	mov	r6, r3
 800451a:	f00e f869 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800451e:	4603      	mov	r3, r0
 8004520:	9302      	str	r3, [sp, #8]
 8004522:	2331      	movs	r3, #49	; 0x31
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 800452c:	4632      	mov	r2, r6
 800452e:	2145      	movs	r1, #69	; 0x45
 8004530:	4620      	mov	r0, r4
 8004532:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2110      	movs	r1, #16
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fc1b 	bl	8003d76 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004540:	f00e f846 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004544:	4604      	mov	r4, r0
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	3338      	adds	r3, #56	; 0x38
 800454a:	681d      	ldr	r5, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	3301      	adds	r3, #1
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	461e      	mov	r6, r3
 8004558:	f00e f84a 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800455c:	4603      	mov	r3, r0
 800455e:	9302      	str	r3, [sp, #8]
 8004560:	2334      	movs	r3, #52	; 0x34
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 800456a:	4632      	mov	r2, r6
 800456c:	2110      	movs	r1, #16
 800456e:	4620      	mov	r0, r4
 8004570:	47a8      	blx	r5

}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800457a:	bf00      	nop
 800457c:	0802166c 	.word	0x0802166c
 8004580:	08021718 	.word	0x08021718
 8004584:	08021748 	.word	0x08021748

08004588 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fe80 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80045a4:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	08025414 	.word	0x08025414

080045b8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	2238      	movs	r2, #56	; 0x38
 80045c2:	4906      	ldr	r1, [pc, #24]	; (80045dc <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 80045c4:	2008      	movs	r0, #8
 80045c6:	f004 f85d 	bl	8008684 <_ZnwjPKci>
 80045ca:	4604      	mov	r4, r0
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7ff ffdb 	bl	8004588 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 80045d2:	4623      	mov	r3, r4
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd90      	pop	{r4, r7, pc}
 80045dc:	0802166c 	.word	0x0802166c

080045e0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f00c fc38 	bl	8010e60 <_ZN10UtestShellC1Ev>
 80045f0:	4a03      	ldr	r2, [pc, #12]	; (8004600 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08025368 	.word	0x08025368

08004604 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af04      	add	r7, sp, #16
 800460a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	3b01      	subs	r3, #1
 8004622:	429a      	cmp	r2, r3
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4293      	cmp	r3, r2
 8004632:	da0b      	bge.n	800464c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fb99 	bl	8003d76 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e7e3      	b.n	8004614 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	21ff      	movs	r1, #255	; 0xff
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fb8f 	bl	8003d76 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004658:	f00d ffba 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800465c:	4604      	mov	r4, r0
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	3338      	adds	r3, #56	; 0x38
 8004662:	681d      	ldr	r5, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	461e      	mov	r6, r3
 800466e:	f00d ffbf 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004672:	4603      	mov	r3, r0
 8004674:	9302      	str	r3, [sp, #8]
 8004676:	2340      	movs	r3, #64	; 0x40
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004680:	4632      	mov	r2, r6
 8004682:	21ff      	movs	r1, #255	; 0xff
 8004684:	4620      	mov	r0, r4
 8004686:	47a8      	blx	r5
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004690:	0802166c 	.word	0x0802166c
 8004694:	08021778 	.word	0x08021778

08004698 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fdf8 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046b4:	4a03      	ldr	r2, [pc, #12]	; (80046c4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	08025348 	.word	0x08025348

080046c8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	2243      	movs	r2, #67	; 0x43
 80046d2:	4906      	ldr	r1, [pc, #24]	; (80046ec <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 80046d4:	2008      	movs	r0, #8
 80046d6:	f003 ffd5 	bl	8008684 <_ZnwjPKci>
 80046da:	4604      	mov	r4, r0
 80046dc:	4620      	mov	r0, r4
 80046de:	f7ff ffdb 	bl	8004698 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80046e2:	4623      	mov	r3, r4
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd90      	pop	{r4, r7, pc}
 80046ec:	0802166c 	.word	0x0802166c

080046f0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f00c fbb0 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8004700:	4a03      	ldr	r2, [pc, #12]	; (8004710 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	0802529c 	.word	0x0802529c

08004714 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af04      	add	r7, sp, #16
 800471a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	21ff      	movs	r1, #255	; 0xff
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fb27 	bl	8003d76 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fb4c 	bl	8003dca <ringBuffer_pop>
 8004732:	4603      	mov	r3, r0
 8004734:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004736:	f00d ff4b 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800473a:	4604      	mov	r4, r0
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	3338      	adds	r3, #56	; 0x38
 8004740:	681d      	ldr	r5, [r3, #0]
 8004742:	7bfe      	ldrb	r6, [r7, #15]
 8004744:	f00d ff54 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004748:	4603      	mov	r3, r0
 800474a:	9302      	str	r3, [sp, #8]
 800474c:	2348      	movs	r3, #72	; 0x48
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004756:	4632      	mov	r2, r6
 8004758:	21ff      	movs	r1, #255	; 0xff
 800475a:	4620      	mov	r0, r4
 800475c:	47a8      	blx	r5

}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	bf00      	nop
 8004768:	0802166c 	.word	0x0802166c
 800476c:	080217a8 	.word	0x080217a8

08004770 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fd8c 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800478c:	4a03      	ldr	r2, [pc, #12]	; (800479c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	0802527c 	.word	0x0802527c

080047a0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	224c      	movs	r2, #76	; 0x4c
 80047aa:	4906      	ldr	r1, [pc, #24]	; (80047c4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80047ac:	2008      	movs	r0, #8
 80047ae:	f003 ff69 	bl	8008684 <_ZnwjPKci>
 80047b2:	4604      	mov	r4, r0
 80047b4:	4620      	mov	r0, r4
 80047b6:	f7ff ffdb 	bl	8004770 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 80047ba:	4623      	mov	r3, r4
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd90      	pop	{r4, r7, pc}
 80047c4:	0802166c 	.word	0x0802166c

080047c8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f00c fb44 	bl	8010e60 <_ZN10UtestShellC1Ev>
 80047d8:	4a03      	ldr	r2, [pc, #12]	; (80047e8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	080251d0 	.word	0x080251d0

080047ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 80047ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af04      	add	r7, sp, #16
 80047f2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	21aa      	movs	r1, #170	; 0xaa
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fab9 	bl	8003d76 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	3b01      	subs	r3, #1
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4293      	cmp	r3, r2
 800482a:	da0a      	bge.n	8004842 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff faca 	bl	8003dca <ringBuffer_pop>
 8004836:	4603      	mov	r3, r0
 8004838:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3301      	adds	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e7e4      	b.n	800480c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fabf 	bl	8003dca <ringBuffer_pop>
 800484c:	4603      	mov	r3, r0
 800484e:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004850:	f00d febe 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004854:	4604      	mov	r4, r0
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	3338      	adds	r3, #56	; 0x38
 800485a:	681d      	ldr	r5, [r3, #0]
 800485c:	7afe      	ldrb	r6, [r7, #11]
 800485e:	f00d fec7 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004862:	4603      	mov	r3, r0
 8004864:	9302      	str	r3, [sp, #8]
 8004866:	2359      	movs	r3, #89	; 0x59
 8004868:	9301      	str	r3, [sp, #4]
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004870:	4632      	mov	r2, r6
 8004872:	21aa      	movs	r1, #170	; 0xaa
 8004874:	4620      	mov	r0, r4
 8004876:	47a8      	blx	r5
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004880:	0802166c 	.word	0x0802166c
 8004884:	080217c8 	.word	0x080217c8

08004888 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fd00 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80048a4:	4a03      	ldr	r2, [pc, #12]	; (80048b4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	080251b0 	.word	0x080251b0

080048b8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 80048b8:	b590      	push	{r4, r7, lr}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	225c      	movs	r2, #92	; 0x5c
 80048c2:	4906      	ldr	r1, [pc, #24]	; (80048dc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 80048c4:	2008      	movs	r0, #8
 80048c6:	f003 fedd 	bl	8008684 <_ZnwjPKci>
 80048ca:	4604      	mov	r4, r0
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff ffdb 	bl	8004888 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 80048d2:	4623      	mov	r3, r4
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd90      	pop	{r4, r7, pc}
 80048dc:	0802166c 	.word	0x0802166c

080048e0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f00c fab8 	bl	8010e60 <_ZN10UtestShellC1Ev>
 80048f0:	4a03      	ldr	r2, [pc, #12]	; (8004900 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	08025104 	.word	0x08025104

08004904 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004906:	b089      	sub	sp, #36	; 0x24
 8004908:	af04      	add	r7, sp, #16
 800490a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d20b      	bcs.n	8004934 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fa25 	bl	8003d76 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e7ed      	b.n	8004910 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004934:	f00d fe4c 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004938:	4604      	mov	r4, r0
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	3338      	adds	r3, #56	; 0x38
 800493e:	681d      	ldr	r5, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	3b01      	subs	r3, #1
 800494e:	4413      	add	r3, r2
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	461e      	mov	r6, r3
 8004954:	f00d fe4c 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004958:	4603      	mov	r3, r0
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	2363      	movs	r3, #99	; 0x63
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004966:	4632      	mov	r2, r6
 8004968:	2131      	movs	r1, #49	; 0x31
 800496a:	4620      	mov	r0, r4
 800496c:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fa53 	bl	8003e1e <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004978:	f00d fe2a 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800497c:	4604      	mov	r4, r0
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	3338      	adds	r3, #56	; 0x38
 8004982:	681d      	ldr	r5, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	3b01      	subs	r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	461e      	mov	r6, r3
 8004998:	f00d fe2a 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800499c:	4603      	mov	r3, r0
 800499e:	9302      	str	r3, [sp, #8]
 80049a0:	2367      	movs	r3, #103	; 0x67
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	4b14      	ldr	r3, [pc, #80]	; (80049fc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 80049aa:	4632      	mov	r2, r6
 80049ac:	2100      	movs	r1, #0
 80049ae:	4620      	mov	r0, r4
 80049b0:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80049b2:	f00d fe0d 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 80049b6:	4604      	mov	r4, r0
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	3338      	adds	r3, #56	; 0x38
 80049bc:	681d      	ldr	r5, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	461e      	mov	r6, r3
 80049d2:	f00d fe0d 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049d6:	4603      	mov	r3, r0
 80049d8:	9302      	str	r3, [sp, #8]
 80049da:	2368      	movs	r3, #104	; 0x68
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 80049e4:	4632      	mov	r2, r6
 80049e6:	2100      	movs	r1, #0
 80049e8:	4620      	mov	r0, r4
 80049ea:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f4:	0802166c 	.word	0x0802166c
 80049f8:	080217e8 	.word	0x080217e8
 80049fc:	08021824 	.word	0x08021824
 8004a00:	08021860 	.word	0x08021860

08004a04 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fc42 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a20:	4a03      	ldr	r2, [pc, #12]	; (8004a30 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	080250e4 	.word	0x080250e4

08004a34 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	2271      	movs	r2, #113	; 0x71
 8004a3e:	4906      	ldr	r1, [pc, #24]	; (8004a58 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004a40:	2008      	movs	r0, #8
 8004a42:	f003 fe1f 	bl	8008684 <_ZnwjPKci>
 8004a46:	4604      	mov	r4, r0
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7ff ffdb 	bl	8004a04 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004a4e:	4623      	mov	r3, r4
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd90      	pop	{r4, r7, pc}
 8004a58:	0802166c 	.word	0x0802166c

08004a5c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f00c f9fa 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8004a6c:	4a03      	ldr	r2, [pc, #12]	; (8004a7c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08025038 	.word	0x08025038

08004a80 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af04      	add	r7, sp, #16
 8004a86:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	490e      	ldr	r1, [pc, #56]	; (8004ac8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff f9dc 	bl	8003e4c <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004a94:	f00d fd9c 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	3324      	adds	r3, #36	; 0x24
 8004a9e:	681d      	ldr	r5, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	68de      	ldr	r6, [r3, #12]
 8004aa6:	f00d fda3 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	9302      	str	r3, [sp, #8]
 8004aae:	2375      	movs	r3, #117	; 0x75
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4632      	mov	r2, r6
 8004aba:	4903      	ldr	r1, [pc, #12]	; (8004ac8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004abc:	4620      	mov	r0, r4
 8004abe:	47a8      	blx	r5
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac8:	08021898 	.word	0x08021898
 8004acc:	0802166c 	.word	0x0802166c

08004ad0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fbdc 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004aec:	4a03      	ldr	r2, [pc, #12]	; (8004afc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	08025018 	.word	0x08025018

08004b00 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	2278      	movs	r2, #120	; 0x78
 8004b0a:	4906      	ldr	r1, [pc, #24]	; (8004b24 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004b0c:	2008      	movs	r0, #8
 8004b0e:	f003 fdb9 	bl	8008684 <_ZnwjPKci>
 8004b12:	4604      	mov	r4, r0
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7ff ffdb 	bl	8004ad0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}
 8004b24:	0802166c 	.word	0x0802166c

08004b28 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f00c f994 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8004b38:	4a03      	ldr	r2, [pc, #12]	; (8004b48 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	08024f6c 	.word	0x08024f6c

08004b4c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b50:	b08a      	sub	sp, #40	; 0x28
 8004b52:	af04      	add	r7, sp, #16
 8004b54:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	494e      	ldr	r1, [pc, #312]	; (8004c94 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff f975 	bl	8003e4c <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004b62:	f00d fd35 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004b66:	4604      	mov	r4, r0
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	3324      	adds	r3, #36	; 0x24
 8004b6c:	681d      	ldr	r5, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68de      	ldr	r6, [r3, #12]
 8004b74:	f00d fd3c 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	9302      	str	r3, [sp, #8]
 8004b7c:	237c      	movs	r3, #124	; 0x7c
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	4b45      	ldr	r3, [pc, #276]	; (8004c98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	4632      	mov	r2, r6
 8004b88:	4942      	ldr	r1, [pc, #264]	; (8004c94 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4942      	ldr	r1, [pc, #264]	; (8004c9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff f978 	bl	8003e8a <ringBuffer_lookFor>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d05c      	beq.n	8004c64 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	493b      	ldr	r1, [pc, #236]	; (8004c9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff f96a 	bl	8003e8a <ringBuffer_lookFor>
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4937      	ldr	r1, [pc, #220]	; (8004c9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff f963 	bl	8003e8a <ringBuffer_lookFor>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	bf14      	ite	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	2300      	moveq	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004bd4:	f00d fcfc 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004bd8:	6803      	ldr	r3, [r0, #0]
 8004bda:	3370      	adds	r3, #112	; 0x70
 8004bdc:	681c      	ldr	r4, [r3, #0]
 8004bde:	237d      	movs	r3, #125	; 0x7d
 8004be0:	4a2d      	ldr	r2, [pc, #180]	; (8004c98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004be2:	492f      	ldr	r1, [pc, #188]	; (8004ca0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004be4:	47a0      	blx	r4
 8004be6:	f00d fcf3 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004bea:	4604      	mov	r4, r0
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	3358      	adds	r3, #88	; 0x58
 8004bf0:	681d      	ldr	r5, [r3, #0]
 8004bf2:	f107 0308 	add.w	r3, r7, #8
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f006 ff85 	bl	800bb08 <_Z10StringFromi>
 8004bfe:	f107 0308 	add.w	r3, r7, #8
 8004c02:	4618      	mov	r0, r3
 8004c04:	f006 fc8c 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8004c08:	4606      	mov	r6, r0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4923      	ldr	r1, [pc, #140]	; (8004c9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff f93a 	bl	8003e8a <ringBuffer_lookFor>
 8004c16:	4602      	mov	r2, r0
 8004c18:	f107 0310 	add.w	r3, r7, #16
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f007 f9ec 	bl	800bffc <_Z10StringFromm>
 8004c24:	f107 0310 	add.w	r3, r7, #16
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f006 fc79 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8004c2e:	4680      	mov	r8, r0
 8004c30:	f00d fcde 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c34:	4603      	mov	r3, r0
 8004c36:	9303      	str	r3, [sp, #12]
 8004c38:	237d      	movs	r3, #125	; 0x7d
 8004c3a:	9302      	str	r3, [sp, #8]
 8004c3c:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	2300      	movs	r3, #0
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	4643      	mov	r3, r8
 8004c46:	4632      	mov	r2, r6
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	47a8      	blx	r5
 8004c4e:	f107 0310 	add.w	r3, r7, #16
 8004c52:	4618      	mov	r0, r3
 8004c54:	f006 fc91 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8004c58:	f107 0308 	add.w	r3, r7, #8
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f006 fc8c 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8004c62:	e012      	b.n	8004c8a <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004c64:	f00d fcb4 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004c68:	4604      	mov	r4, r0
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	3338      	adds	r3, #56	; 0x38
 8004c6e:	681d      	ldr	r5, [r3, #0]
 8004c70:	f00d fcbe 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c74:	4603      	mov	r3, r0
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	237d      	movs	r3, #125	; 0x7d
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2300      	movs	r3, #0
 8004c82:	2200      	movs	r2, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	4620      	mov	r0, r4
 8004c88:	47a8      	blx	r5
}
 8004c8a:	bf00      	nop
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c94:	080218a0 	.word	0x080218a0
 8004c98:	0802166c 	.word	0x0802166c
 8004c9c:	080218ac 	.word	0x080218ac
 8004ca0:	080218b4 	.word	0x080218b4

08004ca4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff faf2 	bl	80042a4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004cc0:	4a03      	ldr	r2, [pc, #12]	; (8004cd0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	08024f4c 	.word	0x08024f4c

08004cd4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	4906      	ldr	r1, [pc, #24]	; (8004cf8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004ce0:	2008      	movs	r0, #8
 8004ce2:	f003 fccf 	bl	8008684 <_ZnwjPKci>
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7ff ffdb 	bl	8004ca4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004cee:	4623      	mov	r3, r4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd90      	pop	{r4, r7, pc}
 8004cf8:	0802166c 	.word	0x0802166c

08004cfc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f00c f8aa 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8004d0c:	4a03      	ldr	r2, [pc, #12]	; (8004d1c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	08024ea0 	.word	0x08024ea0

08004d20 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af04      	add	r7, sp, #16
 8004d26:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004d28:	f00d fc52 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	3338      	adds	r3, #56	; 0x38
 8004d32:	681d      	ldr	r5, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff f8bc 	bl	8003eb6 <ringBuffer_capacity>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	461e      	mov	r6, r3
 8004d42:	f00d fc55 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d46:	4603      	mov	r3, r0
 8004d48:	9302      	str	r3, [sp, #8]
 8004d4a:	2383      	movs	r3, #131	; 0x83
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004d54:	4632      	mov	r2, r6
 8004d56:	2132      	movs	r1, #50	; 0x32
 8004d58:	4620      	mov	r0, r4
 8004d5a:	47a8      	blx	r5

}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d64:	0802166c 	.word	0x0802166c
 8004d68:	08021958 	.word	0x08021958

08004d6c <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004d6c:	b5b0      	push	{r4, r5, r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	491d      	ldr	r1, [pc, #116]	; (8004df0 <_Z18UART_Transmit_FakePh+0x84>)
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f006 f845 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8004d80:	f107 0308 	add.w	r3, r7, #8
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f004 f918 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	3318      	adds	r3, #24
 8004d92:	681d      	ldr	r5, [r3, #0]
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	4916      	ldr	r1, [pc, #88]	; (8004df4 <_Z18UART_Transmit_FakePh+0x88>)
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f006 f835 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	4619      	mov	r1, r3
 8004da6:	4620      	mov	r0, r4
 8004da8:	47a8      	blx	r5
 8004daa:	4604      	mov	r4, r0
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	333c      	adds	r3, #60	; 0x3c
 8004db0:	681d      	ldr	r5, [r3, #0]
 8004db2:	f107 0318 	add.w	r3, r7, #24
 8004db6:	4910      	ldr	r1, [pc, #64]	; (8004df8 <_Z18UART_Transmit_FakePh+0x8c>)
 8004db8:	4618      	mov	r0, r3
 8004dba:	f006 f826 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8004dbe:	f107 0318 	add.w	r3, r7, #24
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	47a8      	blx	r5
 8004dca:	f107 0318 	add.w	r3, r7, #24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f006 fbd3 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8004dd4:	f107 0310 	add.w	r3, r7, #16
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f006 fbce 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f006 fbc9 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8004de8:	bf00      	nop
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bdb0      	pop	{r4, r5, r7, pc}
 8004df0:	08021990 	.word	0x08021990
 8004df4:	08021994 	.word	0x08021994
 8004df8:	080219a8 	.word	0x080219a8

08004dfc <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004dfc:	b5b0      	push	{r4, r5, r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004e02:	463b      	mov	r3, r7
 8004e04:	4916      	ldr	r1, [pc, #88]	; (8004e60 <_Z17UART_Receive_Fakev+0x64>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f005 ffff 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f004 f8d3 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e16:	4604      	mov	r4, r0
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	681d      	ldr	r5, [r3, #0]
 8004e1e:	f107 0308 	add.w	r3, r7, #8
 8004e22:	4910      	ldr	r1, [pc, #64]	; (8004e64 <_Z17UART_Receive_Fakev+0x68>)
 8004e24:	4618      	mov	r0, r3
 8004e26:	f005 fff0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8004e2a:	f107 0308 	add.w	r3, r7, #8
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4620      	mov	r0, r4
 8004e32:	47a8      	blx	r5
 8004e34:	4603      	mov	r3, r0
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	3264      	adds	r2, #100	; 0x64
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	4790      	blx	r2
 8004e40:	4603      	mov	r3, r0
 8004e42:	b2dc      	uxtb	r4, r3
 8004e44:	f107 0308 	add.w	r3, r7, #8
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f006 fb96 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8004e4e:	463b      	mov	r3, r7
 8004e50:	4618      	mov	r0, r3
 8004e52:	f006 fb92 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8004e56:	4623      	mov	r3, r4
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e60:	08021990 	.word	0x08021990
 8004e64:	080219b0 	.word	0x080219b0

08004e68 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <_Z12getTick_Fakev+0x30>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d103      	bne.n	8004e7e <_Z12getTick_Fakev+0x16>
		time = 0;
 8004e76:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <_Z12getTick_Fakev+0x30>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	e004      	b.n	8004e88 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <_Z12getTick_Fakev+0x30>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <_Z12getTick_Fakev+0x30>)
 8004e86:	6013      	str	r3, [r2, #0]
	return time;
 8004e88:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <_Z12getTick_Fakev+0x30>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	200005bc 	.word	0x200005bc

08004e9c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004ea4:	2364      	movs	r3, #100	; 0x64
 8004ea6:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004ea8:	4904      	ldr	r1, [pc, #16]	; (8004ebc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004eaa:	4805      	ldr	r0, [pc, #20]	; (8004ec0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004eac:	f7fe fd2c 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	08004e69 	.word	0x08004e69
 8004ebc:	08004dfd 	.word	0x08004dfd
 8004ec0:	08004d6d 	.word	0x08004d6d

08004ec4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4917      	ldr	r1, [pc, #92]	; (8004f30 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f005 ff99 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8004ed8:	f107 0308 	add.w	r3, r7, #8
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f004 f86c 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	3294      	adds	r2, #148	; 0x94
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	4790      	blx	r2
 8004ef0:	f107 0308 	add.w	r3, r7, #8
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f006 fb40 	bl	800b57a <_ZN12SimpleStringD1Ev>
		mock().clear();
 8004efa:	f107 0310 	add.w	r3, r7, #16
 8004efe:	490c      	ldr	r1, [pc, #48]	; (8004f30 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8004f00:	4618      	mov	r0, r3
 8004f02:	f005 ff82 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8004f06:	f107 0310 	add.w	r3, r7, #16
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f004 f855 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f12:	4603      	mov	r3, r0
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	329c      	adds	r2, #156	; 0x9c
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	4790      	blx	r2
 8004f1e:	f107 0310 	add.w	r3, r7, #16
 8004f22:	4618      	mov	r0, r3
 8004f24:	f006 fb29 	bl	800b57a <_ZN12SimpleStringD1Ev>
	}
 8004f28:	bf00      	nop
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	08021990 	.word	0x08021990

08004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f00d fb70 	bl	8012624 <_ZN5UtestC1Ev>
 8004f44:	4a03      	ldr	r2, [pc, #12]	; (8004f54 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	08024e80 	.word	0x08024e80

08004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f00d fb6b 	bl	8012644 <_ZN5UtestD1Ev>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	08024e80 	.word	0x08024e80

08004f7c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ffe7 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f003 fb8d 	bl	80086ac <_ZdlPvj>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff ffc4 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004fac:	4a03      	ldr	r2, [pc, #12]	; (8004fbc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	08024e60 	.word	0x08024e60

08004fc0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004fc0:	b590      	push	{r4, r7, lr}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	22b8      	movs	r2, #184	; 0xb8
 8004fca:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004fcc:	2004      	movs	r0, #4
 8004fce:	f003 fb59 	bl	8008684 <_ZnwjPKci>
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7ff ffe1 	bl	8004f9c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004fda:	4623      	mov	r3, r4
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd90      	pop	{r4, r7, pc}
 8004fe4:	0802166c 	.word	0x0802166c

08004fe8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f00b ff34 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8004ff8:	4a03      	ldr	r2, [pc, #12]	; (8005008 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08024db4 	.word	0x08024db4

0800500c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 800500c:	b5b0      	push	{r4, r5, r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af04      	add	r7, sp, #16
 8005012:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8005014:	4b10      	ldr	r3, [pc, #64]	; (8005058 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005016:	4a11      	ldr	r2, [pc, #68]	; (800505c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8005018:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 800501a:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	2364      	movs	r3, #100	; 0x64
 8005020:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8005022:	4910      	ldr	r1, [pc, #64]	; (8005064 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8005024:	f7fe fc70 	bl	8003908 <ESP_Init>
 8005028:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 800502a:	f00d fad1 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800502e:	4604      	mov	r4, r0
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	3338      	adds	r3, #56	; 0x38
 8005034:	681d      	ldr	r5, [r3, #0]
 8005036:	f00d fadb 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800503a:	4603      	mov	r3, r0
 800503c:	9302      	str	r3, [sp, #8]
 800503e:	23c6      	movs	r3, #198	; 0xc6
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	4b09      	ldr	r3, [pc, #36]	; (8005068 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	2101      	movs	r1, #1
 800504c:	4620      	mov	r0, r4
 800504e:	47a8      	blx	r5

}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bdb0      	pop	{r4, r5, r7, pc}
 8005058:	200005c0 	.word	0x200005c0
 800505c:	08004d6d 	.word	0x08004d6d
 8005060:	08004e69 	.word	0x08004e69
 8005064:	08004dfd 	.word	0x08004dfd
 8005068:	0802166c 	.word	0x0802166c
 800506c:	080219c4 	.word	0x080219c4

08005070 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ff5a 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005080:	4a03      	ldr	r2, [pc, #12]	; (8005090 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	08024d94 	.word	0x08024d94

08005094 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005094:	b590      	push	{r4, r7, lr}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	22ca      	movs	r2, #202	; 0xca
 800509e:	4906      	ldr	r1, [pc, #24]	; (80050b8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 80050a0:	2004      	movs	r0, #4
 80050a2:	f003 faef 	bl	8008684 <_ZnwjPKci>
 80050a6:	4604      	mov	r4, r0
 80050a8:	4620      	mov	r0, r4
 80050aa:	f7ff ffe1 	bl	8005070 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 80050ae:	4623      	mov	r3, r4
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd90      	pop	{r4, r7, pc}
 80050b8:	0802166c 	.word	0x0802166c

080050bc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f00b feca 	bl	8010e60 <_ZN10UtestShellC1Ev>
 80050cc:	4a03      	ldr	r2, [pc, #12]	; (80050dc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	08024ce8 	.word	0x08024ce8

080050e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 80050e0:	b5b0      	push	{r4, r5, r7, lr}
 80050e2:	b08e      	sub	sp, #56	; 0x38
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 80050e8:	f107 0308 	add.w	r3, r7, #8
 80050ec:	493d      	ldr	r1, [pc, #244]	; (80051e4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 fe8b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80050f4:	f107 0308 	add.w	r3, r7, #8
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f003 ff5e 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005100:	4604      	mov	r4, r0
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	681d      	ldr	r5, [r3, #0]
 8005108:	f107 0310 	add.w	r3, r7, #16
 800510c:	4936      	ldr	r1, [pc, #216]	; (80051e8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800510e:	4618      	mov	r0, r3
 8005110:	f005 fe7b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005114:	f107 0310 	add.w	r3, r7, #16
 8005118:	4619      	mov	r1, r3
 800511a:	4620      	mov	r0, r4
 800511c:	47a8      	blx	r5
 800511e:	4604      	mov	r4, r0
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	334c      	adds	r3, #76	; 0x4c
 8005124:	681d      	ldr	r5, [r3, #0]
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	4930      	ldr	r1, [pc, #192]	; (80051ec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 800512c:	4618      	mov	r0, r3
 800512e:	f005 fe6c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005132:	f107 0318 	add.w	r3, r7, #24
 8005136:	4a2e      	ldr	r2, [pc, #184]	; (80051f0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005138:	4619      	mov	r1, r3
 800513a:	4620      	mov	r0, r4
 800513c:	47a8      	blx	r5
 800513e:	f107 0318 	add.w	r3, r7, #24
 8005142:	4618      	mov	r0, r3
 8005144:	f006 fa19 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005148:	f107 0310 	add.w	r3, r7, #16
 800514c:	4618      	mov	r0, r3
 800514e:	f006 fa14 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	4618      	mov	r0, r3
 8005158:	f006 fa0f 	bl	800b57a <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 800515c:	f107 0320 	add.w	r3, r7, #32
 8005160:	4920      	ldr	r1, [pc, #128]	; (80051e4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8005162:	4618      	mov	r0, r3
 8005164:	f005 fe51 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005168:	f107 0320 	add.w	r3, r7, #32
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f003 ff24 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005174:	4604      	mov	r4, r0
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	681d      	ldr	r5, [r3, #0]
 800517c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005180:	4919      	ldr	r1, [pc, #100]	; (80051e8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8005182:	4618      	mov	r0, r3
 8005184:	f005 fe41 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800518c:	4619      	mov	r1, r3
 800518e:	4620      	mov	r0, r4
 8005190:	47a8      	blx	r5
 8005192:	4604      	mov	r4, r0
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	334c      	adds	r3, #76	; 0x4c
 8005198:	681d      	ldr	r5, [r3, #0]
 800519a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800519e:	4913      	ldr	r1, [pc, #76]	; (80051ec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80051a0:	4618      	mov	r0, r3
 80051a2:	f005 fe32 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80051a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 80051ac:	4619      	mov	r1, r3
 80051ae:	4620      	mov	r0, r4
 80051b0:	47a8      	blx	r5
 80051b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051b6:	4618      	mov	r0, r3
 80051b8:	f006 f9df 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80051bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c0:	4618      	mov	r0, r3
 80051c2:	f006 f9da 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80051c6:	f107 0320 	add.w	r3, r7, #32
 80051ca:	4618      	mov	r0, r3
 80051cc:	f006 f9d5 	bl	800b57a <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 80051d0:	4807      	ldr	r0, [pc, #28]	; (80051f0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80051d2:	f7fe fbc5 	bl	8003960 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 80051d6:	4807      	ldr	r0, [pc, #28]	; (80051f4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 80051d8:	f7fe fbc2 	bl	8003960 <Send_AT_Command>



}
 80051dc:	bf00      	nop
 80051de:	3738      	adds	r7, #56	; 0x38
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bdb0      	pop	{r4, r5, r7, pc}
 80051e4:	08021990 	.word	0x08021990
 80051e8:	08021994 	.word	0x08021994
 80051ec:	080219a8 	.word	0x080219a8
 80051f0:	08021898 	.word	0x08021898
 80051f4:	080219e4 	.word	0x080219e4

080051f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fe96 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005208:	4a03      	ldr	r2, [pc, #12]	; (8005218 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	08024cc8 	.word	0x08024cc8

0800521c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	22d6      	movs	r2, #214	; 0xd6
 8005226:	4906      	ldr	r1, [pc, #24]	; (8005240 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005228:	2004      	movs	r0, #4
 800522a:	f003 fa2b 	bl	8008684 <_ZnwjPKci>
 800522e:	4604      	mov	r4, r0
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff ffe1 	bl	80051f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8005236:	4623      	mov	r3, r4
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}
 8005240:	0802166c 	.word	0x0802166c

08005244 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4618      	mov	r0, r3
 8005250:	f00b fe06 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8005254:	4a03      	ldr	r2, [pc, #12]	; (8005264 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	08024c1c 	.word	0x08024c1c

08005268 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8005268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800526a:	b097      	sub	sp, #92	; 0x5c
 800526c:	af04      	add	r7, sp, #16
 800526e:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8005270:	f107 0308 	add.w	r3, r7, #8
 8005274:	4967      	ldr	r1, [pc, #412]	; (8005414 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005276:	4618      	mov	r0, r3
 8005278:	f005 fdc7 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	2100      	movs	r1, #0
 8005282:	4618      	mov	r0, r3
 8005284:	f003 fe9a 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005288:	4604      	mov	r4, r0
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	681d      	ldr	r5, [r3, #0]
 8005290:	f107 0310 	add.w	r3, r7, #16
 8005294:	4960      	ldr	r1, [pc, #384]	; (8005418 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005296:	4618      	mov	r0, r3
 8005298:	f005 fdb7 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800529c:	f107 0310 	add.w	r3, r7, #16
 80052a0:	4619      	mov	r1, r3
 80052a2:	4620      	mov	r0, r4
 80052a4:	47a8      	blx	r5
 80052a6:	4603      	mov	r3, r0
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	3264      	adds	r2, #100	; 0x64
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	214f      	movs	r1, #79	; 0x4f
 80052b0:	4618      	mov	r0, r3
 80052b2:	4790      	blx	r2
 80052b4:	f107 0310 	add.w	r3, r7, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	f006 f95e 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f006 f959 	bl	800b57a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80052c8:	f7fe fb58 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 80052cc:	f107 0318 	add.w	r3, r7, #24
 80052d0:	4950      	ldr	r1, [pc, #320]	; (8005414 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	f005 fd99 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80052d8:	f107 0318 	add.w	r3, r7, #24
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f003 fe6c 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052e4:	4604      	mov	r4, r0
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	330c      	adds	r3, #12
 80052ea:	681d      	ldr	r5, [r3, #0]
 80052ec:	f107 0320 	add.w	r3, r7, #32
 80052f0:	4949      	ldr	r1, [pc, #292]	; (8005418 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80052f2:	4618      	mov	r0, r3
 80052f4:	f005 fd89 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80052f8:	f107 0320 	add.w	r3, r7, #32
 80052fc:	4619      	mov	r1, r3
 80052fe:	4620      	mov	r0, r4
 8005300:	47a8      	blx	r5
 8005302:	4603      	mov	r3, r0
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	3264      	adds	r2, #100	; 0x64
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	214b      	movs	r1, #75	; 0x4b
 800530c:	4618      	mov	r0, r3
 800530e:	4790      	blx	r2
 8005310:	f107 0320 	add.w	r3, r7, #32
 8005314:	4618      	mov	r0, r3
 8005316:	f006 f930 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800531a:	f107 0318 	add.w	r3, r7, #24
 800531e:	4618      	mov	r0, r3
 8005320:	f006 f92b 	bl	800b57a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005324:	f7fe fb2a 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8005328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800532c:	4939      	ldr	r1, [pc, #228]	; (8005414 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800532e:	4618      	mov	r0, r3
 8005330:	f005 fd6b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005338:	2100      	movs	r1, #0
 800533a:	4618      	mov	r0, r3
 800533c:	f003 fe3e 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005340:	4604      	mov	r4, r0
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	330c      	adds	r3, #12
 8005346:	681d      	ldr	r5, [r3, #0]
 8005348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800534c:	4932      	ldr	r1, [pc, #200]	; (8005418 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800534e:	4618      	mov	r0, r3
 8005350:	f005 fd5b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005354:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005358:	4619      	mov	r1, r3
 800535a:	4620      	mov	r0, r4
 800535c:	47a8      	blx	r5
 800535e:	4603      	mov	r3, r0
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	3264      	adds	r2, #100	; 0x64
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	210d      	movs	r1, #13
 8005368:	4618      	mov	r0, r3
 800536a:	4790      	blx	r2
 800536c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005370:	4618      	mov	r0, r3
 8005372:	f006 f902 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800537a:	4618      	mov	r0, r3
 800537c:	f006 f8fd 	bl	800b57a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005380:	f7fe fafc 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 8005384:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005388:	4922      	ldr	r1, [pc, #136]	; (8005414 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800538a:	4618      	mov	r0, r3
 800538c:	f005 fd3d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005390:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f003 fe10 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800539c:	4604      	mov	r4, r0
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	681d      	ldr	r5, [r3, #0]
 80053a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053a8:	491b      	ldr	r1, [pc, #108]	; (8005418 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80053aa:	4618      	mov	r0, r3
 80053ac:	f005 fd2d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80053b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053b4:	4619      	mov	r1, r3
 80053b6:	4620      	mov	r0, r4
 80053b8:	47a8      	blx	r5
 80053ba:	4603      	mov	r3, r0
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	3264      	adds	r2, #100	; 0x64
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	210a      	movs	r1, #10
 80053c4:	4618      	mov	r0, r3
 80053c6:	4790      	blx	r2
 80053c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053cc:	4618      	mov	r0, r3
 80053ce:	f006 f8d4 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80053d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053d6:	4618      	mov	r0, r3
 80053d8:	f006 f8cf 	bl	800b57a <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80053dc:	f7fe face 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 80053e0:	f00d f8f6 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 80053e4:	4604      	mov	r4, r0
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	3324      	adds	r3, #36	; 0x24
 80053ea:	681d      	ldr	r5, [r3, #0]
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68de      	ldr	r6, [r3, #12]
 80053f2:	f00d f8fd 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80053f6:	4603      	mov	r3, r0
 80053f8:	9302      	str	r3, [sp, #8]
 80053fa:	23e2      	movs	r3, #226	; 0xe2
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	4b08      	ldr	r3, [pc, #32]	; (8005420 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b8>)
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	4632      	mov	r2, r6
 8005406:	4907      	ldr	r1, [pc, #28]	; (8005424 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1bc>)
 8005408:	4620      	mov	r0, r4
 800540a:	47a8      	blx	r5

}
 800540c:	bf00      	nop
 800540e:	374c      	adds	r7, #76	; 0x4c
 8005410:	46bd      	mov	sp, r7
 8005412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005414:	08021990 	.word	0x08021990
 8005418:	080219b0 	.word	0x080219b0
 800541c:	20000498 	.word	0x20000498
 8005420:	0802166c 	.word	0x0802166c
 8005424:	080219ec 	.word	0x080219ec

08005428 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fd7e 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005438:	4a03      	ldr	r2, [pc, #12]	; (8005448 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	08024bfc 	.word	0x08024bfc

0800544c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	22e6      	movs	r2, #230	; 0xe6
 8005456:	4906      	ldr	r1, [pc, #24]	; (8005470 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8005458:	2004      	movs	r0, #4
 800545a:	f003 f913 	bl	8008684 <_ZnwjPKci>
 800545e:	4604      	mov	r4, r0
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff ffe1 	bl	8005428 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005466:	4623      	mov	r3, r4
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bd90      	pop	{r4, r7, pc}
 8005470:	0802166c 	.word	0x0802166c

08005474 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4618      	mov	r0, r3
 8005480:	f00b fcee 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8005484:	4a03      	ldr	r2, [pc, #12]	; (8005494 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	08024b50 	.word	0x08024b50

08005498 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549a:	b091      	sub	sp, #68	; 0x44
 800549c:	af04      	add	r7, sp, #16
 800549e:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 80054a0:	4a35      	ldr	r2, [pc, #212]	; (8005578 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 80054a2:	f107 030c 	add.w	r3, r7, #12
 80054a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054aa:	6018      	str	r0, [r3, #0]
 80054ac:	3304      	adds	r3, #4
 80054ae:	7019      	strb	r1, [r3, #0]
 80054b0:	f107 0311 	add.w	r3, r7, #17
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054be:	f107 030c 	add.w	r3, r7, #12
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fa feba 	bl	800023c <strlen>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	4293      	cmp	r3, r2
 80054d0:	da35      	bge.n	800553e <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80054d2:	f107 0318 	add.w	r3, r7, #24
 80054d6:	4929      	ldr	r1, [pc, #164]	; (800557c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 80054d8:	4618      	mov	r0, r3
 80054da:	f005 fc96 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80054de:	f107 0318 	add.w	r3, r7, #24
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f003 fd69 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80054ea:	4604      	mov	r4, r0
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	681d      	ldr	r5, [r3, #0]
 80054f2:	f107 0320 	add.w	r3, r7, #32
 80054f6:	4922      	ldr	r1, [pc, #136]	; (8005580 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 80054f8:	4618      	mov	r0, r3
 80054fa:	f005 fc86 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80054fe:	f107 0320 	add.w	r3, r7, #32
 8005502:	4619      	mov	r1, r3
 8005504:	4620      	mov	r0, r4
 8005506:	47a8      	blx	r5
 8005508:	4603      	mov	r3, r0
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	3264      	adds	r2, #100	; 0x64
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	f107 000c 	add.w	r0, r7, #12
 8005514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005516:	4401      	add	r1, r0
 8005518:	7809      	ldrb	r1, [r1, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	4790      	blx	r2
 800551e:	f107 0320 	add.w	r3, r7, #32
 8005522:	4618      	mov	r0, r3
 8005524:	f006 f829 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005528:	f107 0318 	add.w	r3, r7, #24
 800552c:	4618      	mov	r0, r3
 800552e:	f006 f824 	bl	800b57a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005532:	f7fe fa23 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	3301      	adds	r3, #1
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800553c:	e7bf      	b.n	80054be <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 800553e:	4811      	ldr	r0, [pc, #68]	; (8005584 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xec>)
 8005540:	f7fe fa36 	bl	80039b0 <Read_Response>
 8005544:	62b8      	str	r0, [r7, #40]	; 0x28

	LONGS_EQUAL(1,result);
 8005546:	f00d f843 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800554a:	4604      	mov	r4, r0
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	3338      	adds	r3, #56	; 0x38
 8005550:	681d      	ldr	r5, [r3, #0]
 8005552:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8005554:	f00d f84c 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005558:	4603      	mov	r3, r0
 800555a:	9302      	str	r3, [sp, #8]
 800555c:	23f2      	movs	r3, #242	; 0xf2
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf0>)
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf4>)
 8005566:	4632      	mov	r2, r6
 8005568:	2101      	movs	r1, #1
 800556a:	4620      	mov	r0, r4
 800556c:	47a8      	blx	r5

}
 800556e:	bf00      	nop
 8005570:	3734      	adds	r7, #52	; 0x34
 8005572:	46bd      	mov	sp, r7
 8005574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005576:	bf00      	nop
 8005578:	080219f8 	.word	0x080219f8
 800557c:	08021990 	.word	0x08021990
 8005580:	080219b0 	.word	0x080219b0
 8005584:	080219f4 	.word	0x080219f4
 8005588:	0802166c 	.word	0x0802166c
 800558c:	080219c4 	.word	0x080219c4

08005590 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fcca 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80055a0:	4a03      	ldr	r2, [pc, #12]	; (80055b0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	08024b30 	.word	0x08024b30

080055b4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	22f7      	movs	r2, #247	; 0xf7
 80055be:	4906      	ldr	r1, [pc, #24]	; (80055d8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 80055c0:	2004      	movs	r0, #4
 80055c2:	f003 f85f 	bl	8008684 <_ZnwjPKci>
 80055c6:	4604      	mov	r4, r0
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7ff ffe1 	bl	8005590 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 80055ce:	4623      	mov	r3, r4
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd90      	pop	{r4, r7, pc}
 80055d8:	0802166c 	.word	0x0802166c

080055dc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f00b fc3a 	bl	8010e60 <_ZN10UtestShellC1Ev>
 80055ec:	4a03      	ldr	r2, [pc, #12]	; (80055fc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	08024a84 	.word	0x08024a84

08005600 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005602:	b089      	sub	sp, #36	; 0x24
 8005604:	af04      	add	r7, sp, #16
 8005606:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005608:	2305      	movs	r3, #5
 800560a:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 800560c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005610:	4811      	ldr	r0, [pc, #68]	; (8005658 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8005612:	f7fe f9df 	bl	80039d4 <Wait_Response>
 8005616:	4603      	mov	r3, r0
 8005618:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	2b05      	cmp	r3, #5
 800561e:	d100      	bne.n	8005622 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005620:	e7f4      	b.n	800560c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8005622:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8005624:	f00c ffd4 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8005628:	4604      	mov	r4, r0
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	3338      	adds	r3, #56	; 0x38
 800562e:	681d      	ldr	r5, [r3, #0]
 8005630:	7bfe      	ldrb	r6, [r7, #15]
 8005632:	f00c ffdd 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005636:	4603      	mov	r3, r0
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	f240 1303 	movw	r3, #259	; 0x103
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 8005646:	4632      	mov	r2, r6
 8005648:	2102      	movs	r1, #2
 800564a:	4620      	mov	r0, r4
 800564c:	47a8      	blx	r5

}
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005656:	bf00      	nop
 8005658:	080219f4 	.word	0x080219f4
 800565c:	0802166c 	.word	0x0802166c
 8005660:	08021a04 	.word	0x08021a04

08005664 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fc60 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005674:	4a03      	ldr	r2, [pc, #12]	; (8005684 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	08024a64 	.word	0x08024a64

08005688 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	f240 1207 	movw	r2, #263	; 0x107
 8005694:	4906      	ldr	r1, [pc, #24]	; (80056b0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005696:	2004      	movs	r0, #4
 8005698:	f002 fff4 	bl	8008684 <_ZnwjPKci>
 800569c:	4604      	mov	r4, r0
 800569e:	4620      	mov	r0, r4
 80056a0:	f7ff ffe0 	bl	8005664 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 80056a4:	4623      	mov	r3, r4
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd90      	pop	{r4, r7, pc}
 80056ae:	bf00      	nop
 80056b0:	0802166c 	.word	0x0802166c

080056b4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	f00b fbce 	bl	8010e60 <_ZN10UtestShellC1Ev>
 80056c4:	4a03      	ldr	r2, [pc, #12]	; (80056d4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	080249b8 	.word	0x080249b8

080056d8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 80056d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056da:	b091      	sub	sp, #68	; 0x44
 80056dc:	af04      	add	r7, sp, #16
 80056de:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80056e0:	2305      	movs	r3, #5
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 80056e6:	4a3b      	ldr	r2, [pc, #236]	; (80057d4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80056e8:	f107 030c 	add.w	r3, r7, #12
 80056ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056f0:	6018      	str	r0, [r3, #0]
 80056f2:	3304      	adds	r3, #4
 80056f4:	7019      	strb	r1, [r3, #0]
 80056f6:	f107 0311 	add.w	r3, r7, #17
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005700:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005704:	4834      	ldr	r0, [pc, #208]	; (80057d8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005706:	f7fe f965 	bl	80039d4 <Wait_Response>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 8005710:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005714:	2b05      	cmp	r3, #5
 8005716:	d141      	bne.n	800579c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005718:	2300      	movs	r3, #0
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4618      	mov	r0, r3
 8005722:	f7fa fd8b 	bl	800023c <strlen>
 8005726:	4603      	mov	r3, r0
 8005728:	461a      	mov	r2, r3
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	4293      	cmp	r3, r2
 800572e:	dae7      	bge.n	8005700 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005730:	f107 0318 	add.w	r3, r7, #24
 8005734:	4929      	ldr	r1, [pc, #164]	; (80057dc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005736:	4618      	mov	r0, r3
 8005738:	f005 fb67 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800573c:	f107 0318 	add.w	r3, r7, #24
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f003 fc3a 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005748:	4604      	mov	r4, r0
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	681d      	ldr	r5, [r3, #0]
 8005750:	f107 0320 	add.w	r3, r7, #32
 8005754:	4922      	ldr	r1, [pc, #136]	; (80057e0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 8005756:	4618      	mov	r0, r3
 8005758:	f005 fb57 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800575c:	f107 0320 	add.w	r3, r7, #32
 8005760:	4619      	mov	r1, r3
 8005762:	4620      	mov	r0, r4
 8005764:	47a8      	blx	r5
 8005766:	4603      	mov	r3, r0
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	3264      	adds	r2, #100	; 0x64
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	f107 000c 	add.w	r0, r7, #12
 8005772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005774:	4401      	add	r1, r0
 8005776:	7809      	ldrb	r1, [r1, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	4790      	blx	r2
 800577c:	f107 0320 	add.w	r3, r7, #32
 8005780:	4618      	mov	r0, r3
 8005782:	f005 fefa 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005786:	f107 0318 	add.w	r3, r7, #24
 800578a:	4618      	mov	r0, r3
 800578c:	f005 fef5 	bl	800b57a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005790:	f7fe f8f4 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	3301      	adds	r3, #1
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579a:	e7bf      	b.n	800571c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 800579c:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 800579e:	f00c ff17 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 80057a2:	4604      	mov	r4, r0
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	3338      	adds	r3, #56	; 0x38
 80057a8:	681d      	ldr	r5, [r3, #0]
 80057aa:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 80057ae:	f00c ff1f 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80057b2:	4603      	mov	r3, r0
 80057b4:	9302      	str	r3, [sp, #8]
 80057b6:	f44f 738d 	mov.w	r3, #282	; 0x11a
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	4b09      	ldr	r3, [pc, #36]	; (80057e8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 80057c2:	4632      	mov	r2, r6
 80057c4:	2100      	movs	r1, #0
 80057c6:	4620      	mov	r0, r4
 80057c8:	47a8      	blx	r5
}
 80057ca:	bf00      	nop
 80057cc:	3734      	adds	r7, #52	; 0x34
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d2:	bf00      	nop
 80057d4:	080219f8 	.word	0x080219f8
 80057d8:	080219f4 	.word	0x080219f4
 80057dc:	08021990 	.word	0x08021990
 80057e0:	080219b0 	.word	0x080219b0
 80057e4:	0802166c 	.word	0x0802166c
 80057e8:	08021a38 	.word	0x08021a38

080057ec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fb9c 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80057fc:	4a03      	ldr	r2, [pc, #12]	; (800580c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	08024998 	.word	0x08024998

08005810 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	f240 121d 	movw	r2, #285	; 0x11d
 800581c:	4906      	ldr	r1, [pc, #24]	; (8005838 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800581e:	2004      	movs	r0, #4
 8005820:	f002 ff30 	bl	8008684 <_ZnwjPKci>
 8005824:	4604      	mov	r4, r0
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff ffe0 	bl	80057ec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 800582c:	4623      	mov	r3, r4
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bd90      	pop	{r4, r7, pc}
 8005836:	bf00      	nop
 8005838:	0802166c 	.word	0x0802166c

0800583c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4618      	mov	r0, r3
 8005848:	f00b fb0a 	bl	8010e60 <_ZN10UtestShellC1Ev>
 800584c:	4a03      	ldr	r2, [pc, #12]	; (800585c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	080248ec 	.word	0x080248ec

08005860 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005862:	b08f      	sub	sp, #60	; 0x3c
 8005864:	af04      	add	r7, sp, #16
 8005866:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005868:	2302      	movs	r3, #2
 800586a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 800586e:	f107 030c 	add.w	r3, r7, #12
 8005872:	492f      	ldr	r1, [pc, #188]	; (8005930 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005874:	4618      	mov	r0, r3
 8005876:	f005 fac8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800587a:	f107 030c 	add.w	r3, r7, #12
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f003 fb9b 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005886:	4604      	mov	r4, r0
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	681d      	ldr	r5, [r3, #0]
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	4928      	ldr	r1, [pc, #160]	; (8005934 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005894:	4618      	mov	r0, r3
 8005896:	f005 fab8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800589a:	f107 0314 	add.w	r3, r7, #20
 800589e:	4619      	mov	r1, r3
 80058a0:	4620      	mov	r0, r4
 80058a2:	47a8      	blx	r5
 80058a4:	4604      	mov	r4, r0
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	334c      	adds	r3, #76	; 0x4c
 80058aa:	681d      	ldr	r5, [r3, #0]
 80058ac:	f107 031c 	add.w	r3, r7, #28
 80058b0:	4921      	ldr	r1, [pc, #132]	; (8005938 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 80058b2:	4618      	mov	r0, r3
 80058b4:	f005 faa9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80058b8:	f107 031c 	add.w	r3, r7, #28
 80058bc:	4a1f      	ldr	r2, [pc, #124]	; (800593c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 80058be:	4619      	mov	r1, r3
 80058c0:	4620      	mov	r0, r4
 80058c2:	47a8      	blx	r5
 80058c4:	f107 031c 	add.w	r3, r7, #28
 80058c8:	4618      	mov	r0, r3
 80058ca:	f005 fe56 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80058ce:	f107 0314 	add.w	r3, r7, #20
 80058d2:	4618      	mov	r0, r3
 80058d4:	f005 fe51 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80058d8:	f107 030c 	add.w	r3, r7, #12
 80058dc:	4618      	mov	r0, r3
 80058de:	f005 fe4c 	bl	800b57a <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 80058e2:	4917      	ldr	r1, [pc, #92]	; (8005940 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 80058e4:	4817      	ldr	r0, [pc, #92]	; (8005944 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 80058e6:	f7fe f8b7 	bl	8003a58 <Connect_Wifi>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 80058f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058f4:	2b05      	cmp	r3, #5
 80058f6:	d100      	bne.n	80058fa <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 80058f8:	e7f3      	b.n	80058e2 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 80058fa:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80058fc:	f00c fe68 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8005900:	4604      	mov	r4, r0
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	3338      	adds	r3, #56	; 0x38
 8005906:	681d      	ldr	r5, [r3, #0]
 8005908:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 800590c:	f00c fe70 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005910:	4603      	mov	r3, r0
 8005912:	9302      	str	r3, [sp, #8]
 8005914:	f44f 7398 	mov.w	r3, #304	; 0x130
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	4b0b      	ldr	r3, [pc, #44]	; (800594c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005920:	4632      	mov	r2, r6
 8005922:	2102      	movs	r1, #2
 8005924:	4620      	mov	r0, r4
 8005926:	47a8      	blx	r5

}
 8005928:	bf00      	nop
 800592a:	372c      	adds	r7, #44	; 0x2c
 800592c:	46bd      	mov	sp, r7
 800592e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005930:	08021990 	.word	0x08021990
 8005934:	08021994 	.word	0x08021994
 8005938:	080219a8 	.word	0x080219a8
 800593c:	08021a64 	.word	0x08021a64
 8005940:	08021a74 	.word	0x08021a74
 8005944:	08021a7c 	.word	0x08021a7c
 8005948:	0802166c 	.word	0x0802166c
 800594c:	08021a84 	.word	0x08021a84

08005950 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff faea 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005960:	4a03      	ldr	r2, [pc, #12]	; (8005970 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	080248cc 	.word	0x080248cc

08005974 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005974:	b590      	push	{r4, r7, lr}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005980:	4906      	ldr	r1, [pc, #24]	; (800599c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005982:	2004      	movs	r0, #4
 8005984:	f002 fe7e 	bl	8008684 <_ZnwjPKci>
 8005988:	4604      	mov	r4, r0
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff ffe0 	bl	8005950 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005990:	4623      	mov	r3, r4
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bd90      	pop	{r4, r7, pc}
 800599a:	bf00      	nop
 800599c:	0802166c 	.word	0x0802166c

080059a0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f00b fa58 	bl	8010e60 <_ZN10UtestShellC1Ev>
 80059b0:	4a03      	ldr	r2, [pc, #12]	; (80059c0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	08024820 	.word	0x08024820

080059c4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 80059c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c6:	b0e1      	sub	sp, #388	; 0x184
 80059c8:	af04      	add	r7, sp, #16
 80059ca:	1d3b      	adds	r3, r7, #4
 80059cc:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 80059ce:	4a78      	ldr	r2, [pc, #480]	; (8005bb0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 80059d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80059d4:	4611      	mov	r1, r2
 80059d6:	2296      	movs	r2, #150	; 0x96
 80059d8:	4618      	mov	r0, r3
 80059da:	f018 fee7 	bl	801e7ac <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 80059de:	f107 0308 	add.w	r3, r7, #8
 80059e2:	4a74      	ldr	r2, [pc, #464]	; (8005bb4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 80059e4:	4618      	mov	r0, r3
 80059e6:	4611      	mov	r1, r2
 80059e8:	2396      	movs	r3, #150	; 0x96
 80059ea:	461a      	mov	r2, r3
 80059ec:	f018 fede 	bl	801e7ac <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80059f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	dc46      	bgt.n	8005a8c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 80059fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a02:	496d      	ldr	r1, [pc, #436]	; (8005bb8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005a04:	4618      	mov	r0, r3
 8005a06:	f005 fa00 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005a0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f003 fad3 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a16:	4604      	mov	r4, r0
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a22:	4966      	ldr	r1, [pc, #408]	; (8005bbc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005a24:	4618      	mov	r0, r3
 8005a26:	f005 f9f0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005a2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4620      	mov	r0, r4
 8005a32:	47a8      	blx	r5
 8005a34:	4604      	mov	r4, r0
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	334c      	adds	r3, #76	; 0x4c
 8005a3a:	681d      	ldr	r5, [r3, #0]
 8005a3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a40:	495f      	ldr	r1, [pc, #380]	; (8005bc0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005a42:	4618      	mov	r0, r3
 8005a44:	f005 f9e1 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005a48:	f107 0208 	add.w	r2, r7, #8
 8005a4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a50:	2132      	movs	r1, #50	; 0x32
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	441a      	add	r2, r3
 8005a58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4620      	mov	r0, r4
 8005a60:	47a8      	blx	r5
 8005a62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a66:	4618      	mov	r0, r3
 8005a68:	f005 fd87 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005a6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a70:	4618      	mov	r0, r3
 8005a72:	f005 fd82 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005a76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f005 fd7d 	bl	800b57a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005a80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a84:	3301      	adds	r3, #1
 8005a86:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005a8a:	e7b4      	b.n	80059f6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005a8c:	2305      	movs	r3, #5
 8005a8e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005a98:	494a      	ldr	r1, [pc, #296]	; (8005bc4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005a9a:	484b      	ldr	r0, [pc, #300]	; (8005bc8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005a9c:	f7fd ffdc 	bl	8003a58 <Connect_Wifi>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == CONNECTION_ERROR || response == CONNECTION_OK || response == TIMEOUT_ERROR)
 8005aa6:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d065      	beq.n	8005b7a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005aae:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d061      	beq.n	8005b7a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005ab6:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d05d      	beq.n	8005b7a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 8005abe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	dce8      	bgt.n	8005a98 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005acc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005ad0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ad4:	2132      	movs	r1, #50	; 0x32
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	4413      	add	r3, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fa fbad 	bl	800023c <strlen>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005aea:	4293      	cmp	r3, r2
 8005aec:	da3f      	bge.n	8005b6e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005aee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005af2:	4931      	ldr	r1, [pc, #196]	; (8005bb8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005af4:	4618      	mov	r0, r3
 8005af6:	f005 f988 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005afa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f003 fa5b 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b06:	4604      	mov	r4, r0
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b12:	492e      	ldr	r1, [pc, #184]	; (8005bcc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005b14:	4618      	mov	r0, r3
 8005b16:	f005 f978 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005b1a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4620      	mov	r0, r4
 8005b22:	47a8      	blx	r5
 8005b24:	4603      	mov	r3, r0
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	3264      	adds	r2, #100	; 0x64
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005b30:	2032      	movs	r0, #50	; 0x32
 8005b32:	fb00 f101 	mul.w	r1, r0, r1
 8005b36:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005b3a:	4408      	add	r0, r1
 8005b3c:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005b40:	4401      	add	r1, r0
 8005b42:	39d0      	subs	r1, #208	; 0xd0
 8005b44:	7809      	ldrb	r1, [r1, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	4790      	blx	r2
 8005b4a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f005 fd13 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005b54:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f005 fd0e 	bl	800b57a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005b5e:	f7fd ff0d 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005b62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b66:	3301      	adds	r3, #1
 8005b68:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005b6c:	e7ae      	b.n	8005acc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005b6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b72:	3301      	adds	r3, #1
 8005b74:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005b78:	e78e      	b.n	8005a98 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(CONNECTION_ERROR,response);
 8005b7a:	f00c fd29 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8005b7e:	4604      	mov	r4, r0
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	3338      	adds	r3, #56	; 0x38
 8005b84:	681d      	ldr	r5, [r3, #0]
 8005b86:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005b8a:	f00c fd31 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	9302      	str	r3, [sp, #8]
 8005b92:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005b9e:	4632      	mov	r2, r6
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	47a8      	blx	r5

}
 8005ba6:	bf00      	nop
 8005ba8:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb0:	08021ae0 	.word	0x08021ae0
 8005bb4:	08021b78 	.word	0x08021b78
 8005bb8:	08021990 	.word	0x08021990
 8005bbc:	08021994 	.word	0x08021994
 8005bc0:	080219a8 	.word	0x080219a8
 8005bc4:	08021a74 	.word	0x08021a74
 8005bc8:	08021a7c 	.word	0x08021a7c
 8005bcc:	080219b0 	.word	0x080219b0
 8005bd0:	0802166c 	.word	0x0802166c
 8005bd4:	08021ab0 	.word	0x08021ab0

08005bd8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff f9a6 	bl	8004f34 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005be8:	4a03      	ldr	r2, [pc, #12]	; (8005bf8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	08024800 	.word	0x08024800

08005bfc <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005c08:	4906      	ldr	r1, [pc, #24]	; (8005c24 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005c0a:	2004      	movs	r0, #4
 8005c0c:	f002 fd3a 	bl	8008684 <_ZnwjPKci>
 8005c10:	4604      	mov	r4, r0
 8005c12:	4620      	mov	r0, r4
 8005c14:	f7ff ffe0 	bl	8005bd8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005c18:	4623      	mov	r3, r4
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd90      	pop	{r4, r7, pc}
 8005c22:	bf00      	nop
 8005c24:	0802166c 	.word	0x0802166c

08005c28 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f00b f914 	bl	8010e60 <_ZN10UtestShellC1Ev>
 8005c38:	4a03      	ldr	r2, [pc, #12]	; (8005c48 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	08024754 	.word	0x08024754

08005c4c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4e:	b0e1      	sub	sp, #388	; 0x184
 8005c50:	af04      	add	r7, sp, #16
 8005c52:	1d3b      	adds	r3, r7, #4
 8005c54:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005c56:	4a77      	ldr	r2, [pc, #476]	; (8005e34 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005c58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	2296      	movs	r2, #150	; 0x96
 8005c60:	4618      	mov	r0, r3
 8005c62:	f018 fda3 	bl	801e7ac <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005c66:	f107 0308 	add.w	r3, r7, #8
 8005c6a:	4a73      	ldr	r2, [pc, #460]	; (8005e38 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	4611      	mov	r1, r2
 8005c70:	2396      	movs	r3, #150	; 0x96
 8005c72:	461a      	mov	r2, r3
 8005c74:	f018 fd9a 	bl	801e7ac <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c7e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	dc46      	bgt.n	8005d14 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005c86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c8a:	496c      	ldr	r1, [pc, #432]	; (8005e3c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f005 f8bc 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005c92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f003 f98f 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	681d      	ldr	r5, [r3, #0]
 8005ca6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005caa:	4965      	ldr	r1, [pc, #404]	; (8005e40 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005cac:	4618      	mov	r0, r3
 8005cae:	f005 f8ac 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005cb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4620      	mov	r0, r4
 8005cba:	47a8      	blx	r5
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	334c      	adds	r3, #76	; 0x4c
 8005cc2:	681d      	ldr	r5, [r3, #0]
 8005cc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cc8:	495e      	ldr	r1, [pc, #376]	; (8005e44 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f005 f89d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005cd0:	f107 0208 	add.w	r2, r7, #8
 8005cd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005cd8:	2132      	movs	r1, #50	; 0x32
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	441a      	add	r2, r3
 8005ce0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	47a8      	blx	r5
 8005cea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f005 fc43 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005cf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f005 fc3e 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005cfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d02:	4618      	mov	r0, r3
 8005d04:	f005 fc39 	bl	800b57a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005d08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d12:	e7b4      	b.n	8005c7e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005d1a:	494b      	ldr	r1, [pc, #300]	; (8005e48 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005d1c:	484b      	ldr	r0, [pc, #300]	; (8005e4c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005d1e:	f7fd fe9b 	bl	8003a58 <Connect_Wifi>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == CONNECTION_ERROR || response == CONNECTION_OK || response == TIMEOUT_ERROR)
 8005d28:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d065      	beq.n	8005dfc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005d30:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d061      	beq.n	8005dfc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005d38:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d05d      	beq.n	8005dfc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005d40:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	dce8      	bgt.n	8005d1a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005d4e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005d52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d56:	2132      	movs	r1, #50	; 0x32
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fa6c 	bl	800023c <strlen>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	da3f      	bge.n	8005df0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005d70:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005d74:	4931      	ldr	r1, [pc, #196]	; (8005e3c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005d76:	4618      	mov	r0, r3
 8005d78:	f005 f847 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005d7c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005d80:	2100      	movs	r1, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f003 f91a 	bl	8008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d88:	4604      	mov	r4, r0
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	330c      	adds	r3, #12
 8005d8e:	681d      	ldr	r5, [r3, #0]
 8005d90:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005d94:	492e      	ldr	r1, [pc, #184]	; (8005e50 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005d96:	4618      	mov	r0, r3
 8005d98:	f005 f837 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8005d9c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005da0:	4619      	mov	r1, r3
 8005da2:	4620      	mov	r0, r4
 8005da4:	47a8      	blx	r5
 8005da6:	4603      	mov	r3, r0
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	3264      	adds	r2, #100	; 0x64
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005db2:	2032      	movs	r0, #50	; 0x32
 8005db4:	fb00 f101 	mul.w	r1, r0, r1
 8005db8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005dbc:	4408      	add	r0, r1
 8005dbe:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005dc2:	4401      	add	r1, r0
 8005dc4:	39d0      	subs	r1, #208	; 0xd0
 8005dc6:	7809      	ldrb	r1, [r1, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	4790      	blx	r2
 8005dcc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f005 fbd2 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8005dd6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f005 fbcd 	bl	800b57a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005de0:	f7fd fdcc 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005de4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005dee:	e7ae      	b.n	8005d4e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005df0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005df4:	3301      	adds	r3, #1
 8005df6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005dfa:	e78e      	b.n	8005d1a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(CONNECTION_OK,response);
 8005dfc:	f00c fbe8 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8005e00:	4604      	mov	r4, r0
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	3338      	adds	r3, #56	; 0x38
 8005e06:	681d      	ldr	r5, [r3, #0]
 8005e08:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005e0c:	f00c fbf0 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e10:	4603      	mov	r3, r0
 8005e12:	9302      	str	r3, [sp, #8]
 8005e14:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	; (8005e58 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005e20:	4632      	mov	r2, r6
 8005e22:	2103      	movs	r1, #3
 8005e24:	4620      	mov	r0, r4
 8005e26:	47a8      	blx	r5

}
 8005e28:	bf00      	nop
 8005e2a:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e32:	bf00      	nop
 8005e34:	08021c3c 	.word	0x08021c3c
 8005e38:	08021b78 	.word	0x08021b78
 8005e3c:	08021990 	.word	0x08021990
 8005e40:	08021994 	.word	0x08021994
 8005e44:	080219a8 	.word	0x080219a8
 8005e48:	08021a74 	.word	0x08021a74
 8005e4c:	08021a7c 	.word	0x08021a7c
 8005e50:	080219b0 	.word	0x080219b0
 8005e54:	0802166c 	.word	0x0802166c
 8005e58:	08021c10 	.word	0x08021c10

08005e5c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	4a05      	ldr	r2, [pc, #20]	; (8005e7c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f00b f84b 	bl	8010f08 <_ZN10UtestShellD1Ev>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	08024754 	.word	0x08024754

08005e80 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff ffe7 	bl	8005e5c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8005e8e:	211c      	movs	r1, #28
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f002 fc0b 	bl	80086ac <_ZdlPvj>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	4a05      	ldr	r2, [pc, #20]	; (8005ec0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff f851 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	08024800 	.word	0x08024800

08005ec4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff ffe7 	bl	8005ea0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f002 fbe9 	bl	80086ac <_ZdlPvj>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	4a05      	ldr	r2, [pc, #20]	; (8005f04 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f00b f807 	bl	8010f08 <_ZN10UtestShellD1Ev>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4618      	mov	r0, r3
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	08024820 	.word	0x08024820

08005f08 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ffe7 	bl	8005ee4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8005f16:	211c      	movs	r1, #28
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f002 fbc7 	bl	80086ac <_ZdlPvj>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	4a05      	ldr	r2, [pc, #20]	; (8005f48 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff f80d 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	080248cc 	.word	0x080248cc

08005f4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff ffe7 	bl	8005f28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f002 fba5 	bl	80086ac <_ZdlPvj>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	4a05      	ldr	r2, [pc, #20]	; (8005f8c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f00a ffc3 	bl	8010f08 <_ZN10UtestShellD1Ev>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	080248ec 	.word	0x080248ec

08005f90 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff ffe7 	bl	8005f6c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8005f9e:	211c      	movs	r1, #28
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f002 fb83 	bl	80086ac <_ZdlPvj>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	4a05      	ldr	r2, [pc, #20]	; (8005fd0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe ffc9 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	08024998 	.word	0x08024998

08005fd4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff ffe7 	bl	8005fb0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8005fe2:	2104      	movs	r1, #4
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f002 fb61 	bl	80086ac <_ZdlPvj>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	4a05      	ldr	r2, [pc, #20]	; (8006014 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4618      	mov	r0, r3
 8006006:	f00a ff7f 	bl	8010f08 <_ZN10UtestShellD1Ev>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	080249b8 	.word	0x080249b8

08006018 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ffe7 	bl	8005ff4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8006026:	211c      	movs	r1, #28
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f002 fb3f 	bl	80086ac <_ZdlPvj>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	4a05      	ldr	r2, [pc, #20]	; (8006058 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe ff85 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	08024a64 	.word	0x08024a64

0800605c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ffe7 	bl	8006038 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 800606a:	2104      	movs	r1, #4
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f002 fb1d 	bl	80086ac <_ZdlPvj>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	4a05      	ldr	r2, [pc, #20]	; (800609c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4618      	mov	r0, r3
 800608e:	f00a ff3b 	bl	8010f08 <_ZN10UtestShellD1Ev>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	08024a84 	.word	0x08024a84

080060a0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ffe7 	bl	800607c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 80060ae:	211c      	movs	r1, #28
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f002 fafb 	bl	80086ac <_ZdlPvj>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	4a05      	ldr	r2, [pc, #20]	; (80060e0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe ff41 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	08024b30 	.word	0x08024b30

080060e4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff ffe7 	bl	80060c0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 80060f2:	2104      	movs	r1, #4
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f002 fad9 	bl	80086ac <_ZdlPvj>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	4a05      	ldr	r2, [pc, #20]	; (8006124 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4618      	mov	r0, r3
 8006116:	f00a fef7 	bl	8010f08 <_ZN10UtestShellD1Ev>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	08024b50 	.word	0x08024b50

08006128 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ffe7 	bl	8006104 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8006136:	211c      	movs	r1, #28
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f002 fab7 	bl	80086ac <_ZdlPvj>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	4a05      	ldr	r2, [pc, #20]	; (8006168 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4618      	mov	r0, r3
 800615a:	f7fe fefd 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	08024bfc 	.word	0x08024bfc

0800616c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ffe7 	bl	8006148 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 800617a:	2104      	movs	r1, #4
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f002 fa95 	bl	80086ac <_ZdlPvj>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	4a05      	ldr	r2, [pc, #20]	; (80061ac <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4618      	mov	r0, r3
 800619e:	f00a feb3 	bl	8010f08 <_ZN10UtestShellD1Ev>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	08024c1c 	.word	0x08024c1c

080061b0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff ffe7 	bl	800618c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 80061be:	211c      	movs	r1, #28
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f002 fa73 	bl	80086ac <_ZdlPvj>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	4a05      	ldr	r2, [pc, #20]	; (80061f0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe feb9 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	08024cc8 	.word	0x08024cc8

080061f4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ffe7 	bl	80061d0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8006202:	2104      	movs	r1, #4
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f002 fa51 	bl	80086ac <_ZdlPvj>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	4a05      	ldr	r2, [pc, #20]	; (8006234 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4618      	mov	r0, r3
 8006226:	f00a fe6f 	bl	8010f08 <_ZN10UtestShellD1Ev>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	08024ce8 	.word	0x08024ce8

08006238 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff ffe7 	bl	8006214 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8006246:	211c      	movs	r1, #28
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f002 fa2f 	bl	80086ac <_ZdlPvj>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	4a05      	ldr	r2, [pc, #20]	; (8006278 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fe75 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	08024d94 	.word	0x08024d94

0800627c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff ffe7 	bl	8006258 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 800628a:	2104      	movs	r1, #4
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f002 fa0d 	bl	80086ac <_ZdlPvj>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	4a05      	ldr	r2, [pc, #20]	; (80062bc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f00a fe2b 	bl	8010f08 <_ZN10UtestShellD1Ev>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	08024db4 	.word	0x08024db4

080062c0 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff ffe7 	bl	800629c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 80062ce:	211c      	movs	r1, #28
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f002 f9eb 	bl	80086ac <_ZdlPvj>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	4a05      	ldr	r2, [pc, #20]	; (8006300 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe fe31 	bl	8004f58 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	08024e60 	.word	0x08024e60

08006304 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ffe7 	bl	80062e0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8006312:	2104      	movs	r1, #4
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f002 f9c9 	bl	80086ac <_ZdlPvj>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	4a05      	ldr	r2, [pc, #20]	; (8006344 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4618      	mov	r0, r3
 8006336:	f00a fde7 	bl	8010f08 <_ZN10UtestShellD1Ev>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	08024ea0 	.word	0x08024ea0

08006348 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff ffe7 	bl	8006324 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8006356:	211c      	movs	r1, #28
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f002 f9a7 	bl	80086ac <_ZdlPvj>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	4a05      	ldr	r2, [pc, #20]	; (8006388 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4618      	mov	r0, r3
 800637a:	f7fd ffa5 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	08024f4c 	.word	0x08024f4c

0800638c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff ffe7 	bl	8006368 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 800639a:	2108      	movs	r1, #8
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f002 f985 	bl	80086ac <_ZdlPvj>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	4a05      	ldr	r2, [pc, #20]	; (80063cc <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4618      	mov	r0, r3
 80063be:	f00a fda3 	bl	8010f08 <_ZN10UtestShellD1Ev>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	08024f6c 	.word	0x08024f6c

080063d0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff ffe7 	bl	80063ac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 80063de:	211c      	movs	r1, #28
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f002 f963 	bl	80086ac <_ZdlPvj>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	4a05      	ldr	r2, [pc, #20]	; (8006410 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	f7fd ff61 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08025018 	.word	0x08025018

08006414 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff ffe7 	bl	80063f0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8006422:	2108      	movs	r1, #8
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f002 f941 	bl	80086ac <_ZdlPvj>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	4a05      	ldr	r2, [pc, #20]	; (8006454 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4618      	mov	r0, r3
 8006446:	f00a fd5f 	bl	8010f08 <_ZN10UtestShellD1Ev>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	08025038 	.word	0x08025038

08006458 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff ffe7 	bl	8006434 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8006466:	211c      	movs	r1, #28
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f002 f91f 	bl	80086ac <_ZdlPvj>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	4a05      	ldr	r2, [pc, #20]	; (8006498 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4618      	mov	r0, r3
 800648a:	f7fd ff1d 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	080250e4 	.word	0x080250e4

0800649c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff ffe7 	bl	8006478 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 80064aa:	2108      	movs	r1, #8
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f002 f8fd 	bl	80086ac <_ZdlPvj>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	4a05      	ldr	r2, [pc, #20]	; (80064dc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f00a fd1b 	bl	8010f08 <_ZN10UtestShellD1Ev>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	08025104 	.word	0x08025104

080064e0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ffe7 	bl	80064bc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80064ee:	211c      	movs	r1, #28
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f002 f8db 	bl	80086ac <_ZdlPvj>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	4a05      	ldr	r2, [pc, #20]	; (8006520 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd fed9 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	080251b0 	.word	0x080251b0

08006524 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ffe7 	bl	8006500 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8006532:	2108      	movs	r1, #8
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f002 f8b9 	bl	80086ac <_ZdlPvj>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	4a05      	ldr	r2, [pc, #20]	; (8006564 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4618      	mov	r0, r3
 8006556:	f00a fcd7 	bl	8010f08 <_ZN10UtestShellD1Ev>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	080251d0 	.word	0x080251d0

08006568 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff ffe7 	bl	8006544 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8006576:	211c      	movs	r1, #28
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f002 f897 	bl	80086ac <_ZdlPvj>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	4a05      	ldr	r2, [pc, #20]	; (80065a8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4618      	mov	r0, r3
 800659a:	f7fd fe95 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	0802527c 	.word	0x0802527c

080065ac <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff ffe7 	bl	8006588 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 80065ba:	2108      	movs	r1, #8
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f002 f875 	bl	80086ac <_ZdlPvj>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	4a05      	ldr	r2, [pc, #20]	; (80065ec <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	f00a fc93 	bl	8010f08 <_ZN10UtestShellD1Ev>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	0802529c 	.word	0x0802529c

080065f0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff ffe7 	bl	80065cc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80065fe:	211c      	movs	r1, #28
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f002 f853 	bl	80086ac <_ZdlPvj>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	4a05      	ldr	r2, [pc, #20]	; (8006630 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4618      	mov	r0, r3
 8006622:	f7fd fe51 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	08025348 	.word	0x08025348

08006634 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ffe7 	bl	8006610 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8006642:	2108      	movs	r1, #8
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f002 f831 	bl	80086ac <_ZdlPvj>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	4a05      	ldr	r2, [pc, #20]	; (8006674 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	f00a fc4f 	bl	8010f08 <_ZN10UtestShellD1Ev>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	08025368 	.word	0x08025368

08006678 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff ffe7 	bl	8006654 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8006686:	211c      	movs	r1, #28
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f002 f80f 	bl	80086ac <_ZdlPvj>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	4a05      	ldr	r2, [pc, #20]	; (80066b8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fd fe0d 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	08025414 	.word	0x08025414

080066bc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff ffe7 	bl	8006698 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 80066ca:	2108      	movs	r1, #8
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 ffed 	bl	80086ac <_ZdlPvj>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	4a05      	ldr	r2, [pc, #20]	; (80066fc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f00a fc0b 	bl	8010f08 <_ZN10UtestShellD1Ev>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	08025434 	.word	0x08025434

08006700 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ffe7 	bl	80066dc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 800670e:	211c      	movs	r1, #28
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 ffcb 	bl	80086ac <_ZdlPvj>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	4a05      	ldr	r2, [pc, #20]	; (8006740 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4618      	mov	r0, r3
 8006732:	f7fd fdc9 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	080254e0 	.word	0x080254e0

08006744 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ffe7 	bl	8006720 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8006752:	2108      	movs	r1, #8
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 ffa9 	bl	80086ac <_ZdlPvj>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	4a05      	ldr	r2, [pc, #20]	; (8006784 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4618      	mov	r0, r3
 8006776:	f00a fbc7 	bl	8010f08 <_ZN10UtestShellD1Ev>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	08025500 	.word	0x08025500

08006788 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ffe7 	bl	8006764 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8006796:	211c      	movs	r1, #28
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 ff87 	bl	80086ac <_ZdlPvj>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	4a05      	ldr	r2, [pc, #20]	; (80067c8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fd fd85 	bl	80042c8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	080255ac 	.word	0x080255ac

080067cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ffe7 	bl	80067a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80067da:	2108      	movs	r1, #8
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f001 ff65 	bl	80086ac <_ZdlPvj>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <_Z41__static_initialization_and_destruction_0ii>:
}
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	f040 80f4 	bne.w	80069e6 <_Z41__static_initialization_and_destruction_0ii+0x1fa>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006804:	4293      	cmp	r3, r2
 8006806:	f040 80ee 	bne.w	80069e6 <_Z41__static_initialization_and_destruction_0ii+0x1fa>
TEST(RingBuffer_Test_Group, InitTest)
 800680a:	48a6      	ldr	r0, [pc, #664]	; (8006aa4 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800680c:	f7fd fdaa 	bl	8004364 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8006810:	2324      	movs	r3, #36	; 0x24
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	4ba4      	ldr	r3, [pc, #656]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4ba4      	ldr	r3, [pc, #656]	; (8006aac <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800681a:	4aa5      	ldr	r2, [pc, #660]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800681c:	49a1      	ldr	r1, [pc, #644]	; (8006aa4 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800681e:	48a5      	ldr	r0, [pc, #660]	; (8006ab4 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8006820:	f00c f96e 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006824:	48a4      	ldr	r0, [pc, #656]	; (8006ab8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8006826:	f7fd fe51 	bl	80044cc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 800682a:	232e      	movs	r3, #46	; 0x2e
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	4b9e      	ldr	r3, [pc, #632]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	4ba2      	ldr	r3, [pc, #648]	; (8006abc <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8006834:	4a9e      	ldr	r2, [pc, #632]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006836:	49a0      	ldr	r1, [pc, #640]	; (8006ab8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8006838:	48a1      	ldr	r0, [pc, #644]	; (8006ac0 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800683a:	f00c f961 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800683e:	48a1      	ldr	r0, [pc, #644]	; (8006ac4 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8006840:	f7fd fece 	bl	80045e0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8006844:	2338      	movs	r3, #56	; 0x38
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	4b97      	ldr	r3, [pc, #604]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	4b9e      	ldr	r3, [pc, #632]	; (8006ac8 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800684e:	4a98      	ldr	r2, [pc, #608]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006850:	499c      	ldr	r1, [pc, #624]	; (8006ac4 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8006852:	489e      	ldr	r0, [pc, #632]	; (8006acc <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8006854:	f00c f954 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8006858:	489d      	ldr	r0, [pc, #628]	; (8006ad0 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800685a:	f7fd ff49 	bl	80046f0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800685e:	2343      	movs	r3, #67	; 0x43
 8006860:	9301      	str	r3, [sp, #4]
 8006862:	4b91      	ldr	r3, [pc, #580]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4b9b      	ldr	r3, [pc, #620]	; (8006ad4 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8006868:	4a91      	ldr	r2, [pc, #580]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800686a:	4999      	ldr	r1, [pc, #612]	; (8006ad0 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800686c:	489a      	ldr	r0, [pc, #616]	; (8006ad8 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800686e:	f00c f947 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006872:	489a      	ldr	r0, [pc, #616]	; (8006adc <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8006874:	f7fd ffa8 	bl	80047c8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8006878:	234c      	movs	r3, #76	; 0x4c
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	4b8a      	ldr	r3, [pc, #552]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	4b97      	ldr	r3, [pc, #604]	; (8006ae0 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8006882:	4a8b      	ldr	r2, [pc, #556]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006884:	4995      	ldr	r1, [pc, #596]	; (8006adc <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8006886:	4897      	ldr	r0, [pc, #604]	; (8006ae4 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8006888:	f00c f93a 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800688c:	4896      	ldr	r0, [pc, #600]	; (8006ae8 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800688e:	f7fe f827 	bl	80048e0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8006892:	235c      	movs	r3, #92	; 0x5c
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	4b84      	ldr	r3, [pc, #528]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	4b94      	ldr	r3, [pc, #592]	; (8006aec <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800689c:	4a84      	ldr	r2, [pc, #528]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800689e:	4992      	ldr	r1, [pc, #584]	; (8006ae8 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80068a0:	4893      	ldr	r0, [pc, #588]	; (8006af0 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80068a2:	f00c f92d 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80068a6:	4893      	ldr	r0, [pc, #588]	; (8006af4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80068a8:	f7fe f8d8 	bl	8004a5c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80068ac:	2371      	movs	r3, #113	; 0x71
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	4b7d      	ldr	r3, [pc, #500]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4b90      	ldr	r3, [pc, #576]	; (8006af8 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80068b6:	4a7e      	ldr	r2, [pc, #504]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80068b8:	498e      	ldr	r1, [pc, #568]	; (8006af4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80068ba:	4890      	ldr	r0, [pc, #576]	; (8006afc <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80068bc:	f00c f920 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80068c0:	488f      	ldr	r0, [pc, #572]	; (8006b00 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80068c2:	f7fe f931 	bl	8004b28 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80068c6:	2378      	movs	r3, #120	; 0x78
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	4b77      	ldr	r3, [pc, #476]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	4b8d      	ldr	r3, [pc, #564]	; (8006b04 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80068d0:	4a77      	ldr	r2, [pc, #476]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80068d2:	498b      	ldr	r1, [pc, #556]	; (8006b00 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80068d4:	488c      	ldr	r0, [pc, #560]	; (8006b08 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80068d6:	f00c f913 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80068da:	488c      	ldr	r0, [pc, #560]	; (8006b0c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80068dc:	f7fe fa0e 	bl	8004cfc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80068e0:	2380      	movs	r3, #128	; 0x80
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	4b70      	ldr	r3, [pc, #448]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	4b89      	ldr	r3, [pc, #548]	; (8006b10 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80068ea:	4a71      	ldr	r2, [pc, #452]	; (8006ab0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80068ec:	4987      	ldr	r1, [pc, #540]	; (8006b0c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80068ee:	4889      	ldr	r0, [pc, #548]	; (8006b14 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80068f0:	f00c f906 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80068f4:	4888      	ldr	r0, [pc, #544]	; (8006b18 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80068f6:	f7fe fb77 	bl	8004fe8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80068fa:	23b8      	movs	r3, #184	; 0xb8
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	4b6a      	ldr	r3, [pc, #424]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	4b86      	ldr	r3, [pc, #536]	; (8006b1c <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8006904:	4a86      	ldr	r2, [pc, #536]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006906:	4984      	ldr	r1, [pc, #528]	; (8006b18 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006908:	4886      	ldr	r0, [pc, #536]	; (8006b24 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800690a:	f00c f8f9 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800690e:	4886      	ldr	r0, [pc, #536]	; (8006b28 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8006910:	f7fe fbd4 	bl	80050bc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8006914:	23ca      	movs	r3, #202	; 0xca
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	4b63      	ldr	r3, [pc, #396]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	4b83      	ldr	r3, [pc, #524]	; (8006b2c <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800691e:	4a80      	ldr	r2, [pc, #512]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006920:	4981      	ldr	r1, [pc, #516]	; (8006b28 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8006922:	4883      	ldr	r0, [pc, #524]	; (8006b30 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8006924:	f00c f8ec 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8006928:	4882      	ldr	r0, [pc, #520]	; (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800692a:	f7fe fc8b 	bl	8005244 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 800692e:	23d6      	movs	r3, #214	; 0xd6
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	4b5d      	ldr	r3, [pc, #372]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	4b80      	ldr	r3, [pc, #512]	; (8006b38 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8006938:	4a79      	ldr	r2, [pc, #484]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800693a:	497e      	ldr	r1, [pc, #504]	; (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800693c:	487f      	ldr	r0, [pc, #508]	; (8006b3c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800693e:	f00c f8df 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8006942:	487f      	ldr	r0, [pc, #508]	; (8006b40 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006944:	f7fe fd96 	bl	8005474 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8006948:	23e6      	movs	r3, #230	; 0xe6
 800694a:	9301      	str	r3, [sp, #4]
 800694c:	4b56      	ldr	r3, [pc, #344]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	4b7c      	ldr	r3, [pc, #496]	; (8006b44 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8006952:	4a73      	ldr	r2, [pc, #460]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8006954:	497a      	ldr	r1, [pc, #488]	; (8006b40 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006956:	487c      	ldr	r0, [pc, #496]	; (8006b48 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8006958:	f00c f8d2 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800695c:	487b      	ldr	r0, [pc, #492]	; (8006b4c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800695e:	f7fe fe3d 	bl	80055dc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8006962:	23f7      	movs	r3, #247	; 0xf7
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	4b50      	ldr	r3, [pc, #320]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	4b79      	ldr	r3, [pc, #484]	; (8006b50 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800696c:	4a6c      	ldr	r2, [pc, #432]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800696e:	4977      	ldr	r1, [pc, #476]	; (8006b4c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8006970:	4878      	ldr	r0, [pc, #480]	; (8006b54 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8006972:	f00c f8c5 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8006976:	4878      	ldr	r0, [pc, #480]	; (8006b58 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8006978:	f7fe fe9c 	bl	80056b4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 800697c:	f240 1307 	movw	r3, #263	; 0x107
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	4b49      	ldr	r3, [pc, #292]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4b75      	ldr	r3, [pc, #468]	; (8006b5c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8006988:	4a65      	ldr	r2, [pc, #404]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800698a:	4973      	ldr	r1, [pc, #460]	; (8006b58 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800698c:	4874      	ldr	r0, [pc, #464]	; (8006b60 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800698e:	f00c f8b7 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006992:	4874      	ldr	r0, [pc, #464]	; (8006b64 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006994:	f7fe ff52 	bl	800583c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8006998:	f240 131d 	movw	r3, #285	; 0x11d
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	4b42      	ldr	r3, [pc, #264]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	4b71      	ldr	r3, [pc, #452]	; (8006b68 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80069a4:	4a5e      	ldr	r2, [pc, #376]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80069a6:	496f      	ldr	r1, [pc, #444]	; (8006b64 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80069a8:	4870      	ldr	r0, [pc, #448]	; (8006b6c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80069aa:	f00c f8a9 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80069ae:	4870      	ldr	r0, [pc, #448]	; (8006b70 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80069b0:	f7fe fff6 	bl	80059a0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 80069b4:	f44f 739a 	mov.w	r3, #308	; 0x134
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	4b3b      	ldr	r3, [pc, #236]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4b6d      	ldr	r3, [pc, #436]	; (8006b74 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80069c0:	4a57      	ldr	r2, [pc, #348]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80069c2:	496b      	ldr	r1, [pc, #428]	; (8006b70 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80069c4:	486c      	ldr	r0, [pc, #432]	; (8006b78 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80069c6:	f00c f89b 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80069ca:	486c      	ldr	r0, [pc, #432]	; (8006b7c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80069cc:	f7ff f92c 	bl	8005c28 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 80069d0:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	4b34      	ldr	r3, [pc, #208]	; (8006aa8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	4b69      	ldr	r3, [pc, #420]	; (8006b80 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80069dc:	4a50      	ldr	r2, [pc, #320]	; (8006b20 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80069de:	4967      	ldr	r1, [pc, #412]	; (8006b7c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80069e0:	4868      	ldr	r0, [pc, #416]	; (8006b84 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80069e2:	f00c f88d 	bl	8012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f040 80e5 	bne.w	8006bb8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069f4:	4293      	cmp	r3, r2
 80069f6:	f040 80df 	bne.w	8006bb8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>
 80069fa:	4862      	ldr	r0, [pc, #392]	; (8006b84 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80069fc:	f00c f8aa 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a00:	485e      	ldr	r0, [pc, #376]	; (8006b7c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8006a02:	f7ff fa2b 	bl	8005e5c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006a06:	485c      	ldr	r0, [pc, #368]	; (8006b78 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8006a08:	f00c f8a4 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a0c:	4858      	ldr	r0, [pc, #352]	; (8006b70 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8006a0e:	f7ff fa69 	bl	8005ee4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006a12:	4856      	ldr	r0, [pc, #344]	; (8006b6c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8006a14:	f00c f89e 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a18:	4852      	ldr	r0, [pc, #328]	; (8006b64 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8006a1a:	f7ff faa7 	bl	8005f6c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8006a1e:	4850      	ldr	r0, [pc, #320]	; (8006b60 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8006a20:	f00c f898 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a24:	484c      	ldr	r0, [pc, #304]	; (8006b58 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8006a26:	f7ff fae5 	bl	8005ff4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006a2a:	484a      	ldr	r0, [pc, #296]	; (8006b54 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8006a2c:	f00c f892 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a30:	4846      	ldr	r0, [pc, #280]	; (8006b4c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8006a32:	f7ff fb23 	bl	800607c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8006a36:	4844      	ldr	r0, [pc, #272]	; (8006b48 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8006a38:	f00c f88c 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a3c:	4840      	ldr	r0, [pc, #256]	; (8006b40 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8006a3e:	f7ff fb61 	bl	8006104 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8006a42:	483e      	ldr	r0, [pc, #248]	; (8006b3c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8006a44:	f00c f886 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a48:	483a      	ldr	r0, [pc, #232]	; (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8006a4a:	f7ff fb9f 	bl	800618c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006a4e:	4838      	ldr	r0, [pc, #224]	; (8006b30 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8006a50:	f00c f880 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a54:	4834      	ldr	r0, [pc, #208]	; (8006b28 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8006a56:	f7ff fbdd 	bl	8006214 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006a5a:	4832      	ldr	r0, [pc, #200]	; (8006b24 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8006a5c:	f00c f87a 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a60:	482d      	ldr	r0, [pc, #180]	; (8006b18 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8006a62:	f7ff fc1b 	bl	800629c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8006a66:	482b      	ldr	r0, [pc, #172]	; (8006b14 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8006a68:	f00c f874 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a6c:	4827      	ldr	r0, [pc, #156]	; (8006b0c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8006a6e:	f7ff fc59 	bl	8006324 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8006a72:	4825      	ldr	r0, [pc, #148]	; (8006b08 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8006a74:	f00c f86e 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a78:	4821      	ldr	r0, [pc, #132]	; (8006b00 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8006a7a:	f7ff fc97 	bl	80063ac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006a7e:	481f      	ldr	r0, [pc, #124]	; (8006afc <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8006a80:	f00c f868 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a84:	481b      	ldr	r0, [pc, #108]	; (8006af4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8006a86:	f7ff fcd5 	bl	8006434 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8006a8a:	4819      	ldr	r0, [pc, #100]	; (8006af0 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8006a8c:	f00c f862 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a90:	4815      	ldr	r0, [pc, #84]	; (8006ae8 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8006a92:	f7ff fd13 	bl	80064bc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006a96:	4813      	ldr	r0, [pc, #76]	; (8006ae4 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8006a98:	f00c f85c 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006a9c:	480f      	ldr	r0, [pc, #60]	; (8006adc <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8006a9e:	f7ff fd51 	bl	8006544 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8006aa2:	e071      	b.n	8006b88 <_Z41__static_initialization_and_destruction_0ii+0x39c>
 8006aa4:	2000049c 	.word	0x2000049c
 8006aa8:	0802166c 	.word	0x0802166c
 8006aac:	08021cd4 	.word	0x08021cd4
 8006ab0:	08021ce0 	.word	0x08021ce0
 8006ab4:	200004b8 	.word	0x200004b8
 8006ab8:	200004bc 	.word	0x200004bc
 8006abc:	08021cf8 	.word	0x08021cf8
 8006ac0:	200004d8 	.word	0x200004d8
 8006ac4:	200004dc 	.word	0x200004dc
 8006ac8:	08021d08 	.word	0x08021d08
 8006acc:	200004f8 	.word	0x200004f8
 8006ad0:	200004fc 	.word	0x200004fc
 8006ad4:	08021d1c 	.word	0x08021d1c
 8006ad8:	20000518 	.word	0x20000518
 8006adc:	2000051c 	.word	0x2000051c
 8006ae0:	08021d2c 	.word	0x08021d2c
 8006ae4:	20000538 	.word	0x20000538
 8006ae8:	2000053c 	.word	0x2000053c
 8006aec:	08021d44 	.word	0x08021d44
 8006af0:	20000558 	.word	0x20000558
 8006af4:	2000055c 	.word	0x2000055c
 8006af8:	08021d54 	.word	0x08021d54
 8006afc:	20000578 	.word	0x20000578
 8006b00:	2000057c 	.word	0x2000057c
 8006b04:	08021d64 	.word	0x08021d64
 8006b08:	20000598 	.word	0x20000598
 8006b0c:	2000059c 	.word	0x2000059c
 8006b10:	08021d70 	.word	0x08021d70
 8006b14:	200005b8 	.word	0x200005b8
 8006b18:	200005c4 	.word	0x200005c4
 8006b1c:	08021d80 	.word	0x08021d80
 8006b20:	08021d90 	.word	0x08021d90
 8006b24:	200005e0 	.word	0x200005e0
 8006b28:	200005e4 	.word	0x200005e4
 8006b2c:	08021da8 	.word	0x08021da8
 8006b30:	20000600 	.word	0x20000600
 8006b34:	20000604 	.word	0x20000604
 8006b38:	08021dc0 	.word	0x08021dc0
 8006b3c:	20000620 	.word	0x20000620
 8006b40:	20000624 	.word	0x20000624
 8006b44:	08021ddc 	.word	0x08021ddc
 8006b48:	20000640 	.word	0x20000640
 8006b4c:	20000644 	.word	0x20000644
 8006b50:	08021df0 	.word	0x08021df0
 8006b54:	20000660 	.word	0x20000660
 8006b58:	20000664 	.word	0x20000664
 8006b5c:	08021e0c 	.word	0x08021e0c
 8006b60:	20000680 	.word	0x20000680
 8006b64:	20000684 	.word	0x20000684
 8006b68:	08021e20 	.word	0x08021e20
 8006b6c:	200006a0 	.word	0x200006a0
 8006b70:	200006a4 	.word	0x200006a4
 8006b74:	08021e3c 	.word	0x08021e3c
 8006b78:	200006c0 	.word	0x200006c0
 8006b7c:	200006c4 	.word	0x200006c4
 8006b80:	08021e54 	.word	0x08021e54
 8006b84:	200006e0 	.word	0x200006e0
TEST(RingBuffer_Test_Group, PopDataTests)
 8006b88:	480d      	ldr	r0, [pc, #52]	; (8006bc0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8006b8a:	f00b ffe3 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006b8e:	480d      	ldr	r0, [pc, #52]	; (8006bc4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8006b90:	f7ff fd1c 	bl	80065cc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006b94:	480c      	ldr	r0, [pc, #48]	; (8006bc8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8006b96:	f00b ffdd 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006b9a:	480c      	ldr	r0, [pc, #48]	; (8006bcc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8006b9c:	f7ff fd5a 	bl	8006654 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8006ba0:	480b      	ldr	r0, [pc, #44]	; (8006bd0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8006ba2:	f00b ffd7 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006ba6:	480b      	ldr	r0, [pc, #44]	; (8006bd4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8006ba8:	f7ff fd98 	bl	80066dc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8006bac:	480a      	ldr	r0, [pc, #40]	; (8006bd8 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8006bae:	f00b ffd1 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8006bb2:	480a      	ldr	r0, [pc, #40]	; (8006bdc <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8006bb4:	f7ff fdd6 	bl	8006764 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20000518 	.word	0x20000518
 8006bc4:	200004fc 	.word	0x200004fc
 8006bc8:	200004f8 	.word	0x200004f8
 8006bcc:	200004dc 	.word	0x200004dc
 8006bd0:	200004d8 	.word	0x200004d8
 8006bd4:	200004bc 	.word	0x200004bc
 8006bd8:	200004b8 	.word	0x200004b8
 8006bdc:	2000049c 	.word	0x2000049c

08006be0 <_GLOBAL__sub_I_rx_buffer>:
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006be8:	2001      	movs	r0, #1
 8006bea:	f7ff fdff 	bl	80067ec <_Z41__static_initialization_and_destruction_0ii>
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <_GLOBAL__sub_D_rx_buffer>:
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f7ff fdf7 	bl	80067ec <_Z41__static_initialization_and_destruction_0ii>
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
    }
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69db      	ldr	r3, [r3, #28]
    }
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695b      	ldr	r3, [r3, #20]
    }
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff ffed 	bl	8006c30 <_ZNK10TestResult15getFailureCountEv>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <_ZNK10TestResult9isFailureEv+0x2a>
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ffcf 	bl	8006c00 <_ZNK10TestResult11getRunCountEv>
 8006c62:	4604      	mov	r4, r0
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ffd7 	bl	8006c18 <_ZNK10TestResult15getIgnoredCountEv>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4423      	add	r3, r4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <_ZNK10TestResult9isFailureEv+0x2e>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <_ZNK10TestResult9isFailureEv+0x30>
 8006c76:	2300      	movs	r3, #0
    }
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd90      	pop	{r4, r7, pc}

08006c80 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
    {
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f007 fde6 	bl	800e85c <_ZN10TestOutputC1Ev>
 8006c90:	4a03      	ldr	r2, [pc, #12]	; (8006ca0 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
    }
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	08025c60 	.word	0x08025c60

08006ca4 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
    {
 8006cac:	4a05      	ldr	r2, [pc, #20]	; (8006cc4 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f007 fdef 	bl	800e898 <_ZN10TestOutputD1Ev>
    }
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	08025c60 	.word	0x08025c60

08006cc8 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
    }
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ffe7 	bl	8006ca4 <_ZN17ConsoleTestOutputD1Ev>
 8006cd6:	2110      	movs	r1, #16
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fce7 	bl	80086ac <_ZdlPvj>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8006ce8:	b5b0      	push	{r4, r5, r7, lr}
 8006cea:	b098      	sub	sp, #96	; 0x60
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
    int result = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8006cf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff ffc0 	bl	8006c80 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8006d00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006d04:	4935      	ldr	r1, [pc, #212]	; (8006ddc <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8006d06:	4618      	mov	r0, r3
 8006d08:	f004 f87f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8006d0c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006d10:	f107 0318 	add.w	r3, r7, #24
 8006d14:	2200      	movs	r2, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f001 ff6a 	bl	8008bf0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8006d1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006d20:	4618      	mov	r0, r3
 8006d22:	f004 fc2a 	bl	800b57a <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8006d26:	f107 0318 	add.w	r3, r7, #24
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 ff2f 	bl	8008b90 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8006d32:	f009 fb21 	bl	8010378 <_ZN12TestRegistry18getCurrentRegistryEv>
 8006d36:	4603      	mov	r3, r0
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	3234      	adds	r2, #52	; 0x34
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	f107 0118 	add.w	r1, r7, #24
 8006d42:	4618      	mov	r0, r3
 8006d44:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8006d46:	f009 fb17 	bl	8010378 <_ZN12TestRegistry18getCurrentRegistryEv>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f107 0008 	add.w	r0, r7, #8
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	f000 f844 	bl	8006de0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8006d58:	f107 0308 	add.w	r3, r7, #8
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 f899 	bl	8006e94 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8006d62:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8006d64:	f107 0308 	add.w	r3, r7, #8
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 f863 	bl	8006e34 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8006d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10c      	bne.n	8006d8e <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8006d74:	f107 0318 	add.w	r3, r7, #24
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f002 f83a 	bl	8008df4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8006d80:	4602      	mov	r2, r0
 8006d82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f007 fe27 	bl	800e9dc <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8006d8e:	f009 faf3 	bl	8010378 <_ZN12TestRegistry18getCurrentRegistryEv>
 8006d92:	4604      	mov	r4, r0
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	3344      	adds	r3, #68	; 0x44
 8006d98:	681d      	ldr	r5, [r3, #0]
 8006d9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006d9e:	490f      	ldr	r1, [pc, #60]	; (8006ddc <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8006da0:	4618      	mov	r0, r3
 8006da2:	f004 f832 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8006da6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006daa:	4619      	mov	r1, r3
 8006dac:	4620      	mov	r0, r4
 8006dae:	47a8      	blx	r5
 8006db0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006db4:	4618      	mov	r0, r3
 8006db6:	f004 fbe0 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return result;
 8006dba:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8006dbc:	f107 0318 	add.w	r3, r7, #24
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 ff4d 	bl	8008c60 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8006dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ff6a 	bl	8006ca4 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8006dd0:	4623      	mov	r3, r4
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3760      	adds	r7, #96	; 0x60
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	08021e68 	.word	0x08021e68

08006de0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8006dee:	4a0f      	ldr	r2, [pc, #60]	; (8006e2c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	605a      	str	r2, [r3, #4]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	609a      	str	r2, [r3, #8]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8006e06:	2241      	movs	r2, #65	; 0x41
 8006e08:	4909      	ldr	r1, [pc, #36]	; (8006e30 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8006e0a:	2038      	movs	r0, #56	; 0x38
 8006e0c:	f001 fc3a 	bl	8008684 <_ZnwjPKci>
 8006e10:	4604      	mov	r4, r0
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	4620      	mov	r0, r4
 8006e18:	f00c f84a 	bl	8012eb0 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	609c      	str	r4, [r3, #8]
}
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd90      	pop	{r4, r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	080255ec 	.word	0x080255ec
 8006e30:	08021e7c 	.word	0x08021e7c

08006e34 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	4a0c      	ldr	r2, [pc, #48]	; (8006e70 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	3204      	adds	r2, #4
 8006e4e:	6812      	ldr	r2, [r2, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	4790      	blx	r2
    delete output_;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	3204      	adds	r2, #4
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	4790      	blx	r2
}
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	080255ec 	.word	0x080255ec

08006e74 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
}
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ffd9 	bl	8006e34 <_ZN21CommandLineTestRunnerD1Ev>
 8006e82:	2110      	movs	r1, #16
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fc11 	bl	80086ac <_ZdlPvj>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8006e94:	b5b0      	push	{r4, r5, r7, lr}
 8006e96:	b08c      	sub	sp, #48	; 0x30
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8006ea0:	f107 031c 	add.w	r3, r7, #28
 8006ea4:	4929      	ldr	r1, [pc, #164]	; (8006f4c <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f003 ffaf 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8006eac:	f107 021c 	add.w	r2, r7, #28
 8006eb0:	f107 0308 	add.w	r3, r7, #8
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f008 fe1c 	bl	800faf4 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8006ebc:	f107 031c 	add.w	r3, r7, #28
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f004 fb5a 	bl	800b57a <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3334      	adds	r3, #52	; 0x34
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f107 0108 	add.w	r1, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	333c      	adds	r3, #60	; 0x3c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4610      	mov	r0, r2
 8006eec:	4798      	blx	r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fa3e 	bl	8007374 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8ac 	bl	800705c <_ZN21CommandLineTestRunner11runAllTestsEv>
 8006f04:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68dd      	ldr	r5, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3344      	adds	r3, #68	; 0x44
 8006f12:	681c      	ldr	r4, [r3, #0]
 8006f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f18:	490c      	ldr	r1, [pc, #48]	; (8006f4c <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f003 ff75 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8006f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f24:	4619      	mov	r1, r3
 8006f26:	4628      	mov	r0, r5
 8006f28:	47a0      	blx	r4
 8006f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f004 fb23 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return testResult;
 8006f34:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8006f36:	f107 0308 	add.w	r3, r7, #8
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 faaa 	bl	8007494 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8006f40:	4623      	mov	r3, r4
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3730      	adds	r7, #48	; 0x30
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bdb0      	pop	{r4, r5, r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	08021ea0 	.word	0x08021ea0

08006f50 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8006f50:	b5b0      	push	{r4, r5, r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68dd      	ldr	r5, [r3, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3330      	adds	r3, #48	; 0x30
 8006f64:	681c      	ldr	r4, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f00c fce0 	bl	8013930 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8006f70:	4603      	mov	r3, r0
 8006f72:	4619      	mov	r1, r3
 8006f74:	4628      	mov	r0, r5
 8006f76:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68dd      	ldr	r5, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	332c      	adds	r3, #44	; 0x2c
 8006f84:	681c      	ldr	r4, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f00c fcdc 	bl	8013948 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8006f90:	4603      	mov	r3, r0
 8006f92:	4619      	mov	r1, r3
 8006f94:	4628      	mov	r0, r5
 8006f96:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f00c fc2b 	bl	80137f8 <_ZNK20CommandLineArguments9isVerboseEv>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d009      	beq.n	8006fbc <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3320      	adds	r3, #32
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f00c fc25 	bl	8013810 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d009      	beq.n	8006fe0 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3320      	adds	r3, #32
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2102      	movs	r1, #2
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f00c fc1f 	bl	8013828 <_ZNK20CommandLineArguments7isColorEv>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3324      	adds	r3, #36	; 0x24
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4610      	mov	r0, r2
 8007000:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	4618      	mov	r0, r3
 8007008:	f00c fc4a 	bl	80138a0 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d008      	beq.n	8007024 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3360      	adds	r3, #96	; 0x60
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	4618      	mov	r0, r3
 800702a:	f00c fc2d 	bl	8013888 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	4618      	mov	r0, r3
 800703a:	f009 fa19 	bl	8010470 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4618      	mov	r0, r3
 8007044:	f00c fc50 	bl	80138e8 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800704e:	f00b fadb 	bl	8012608 <_ZN10UtestShell14setCrashOnFailEv>
}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800705c <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800705c:	b5b0      	push	{r4, r5, r7, lr}
 800705e:	b094      	sub	sp, #80	; 0x50
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff ff73 	bl	8006f50 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800706e:	2300      	movs	r3, #0
 8007070:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	4618      	mov	r0, r3
 800707c:	f00c fc1c 	bl	80138b8 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8007080:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	4618      	mov	r0, r3
 8007088:	f00c fbda 	bl	8013840 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d019      	beq.n	80070c6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	f107 0308 	add.w	r3, r7, #8
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f009 fbaf 	bl	8010800 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3320      	adds	r3, #32
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f107 0108 	add.w	r1, r7, #8
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
        return 0;
 80070b8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80070ba:	f107 0308 	add.w	r3, r7, #8
 80070be:	4618      	mov	r0, r3
 80070c0:	f009 fbd6 	bl	8010870 <_ZN10TestResultD1Ev>
 80070c4:	e0e1      	b.n	800728a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f00c fbc4 	bl	8013858 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d019      	beq.n	800710a <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	f107 0308 	add.w	r3, r7, #8
 80070de:	4611      	mov	r1, r2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f009 fb8d 	bl	8010800 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3324      	adds	r3, #36	; 0x24
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f107 0108 	add.w	r1, r7, #8
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
        return 0;
 80070fc:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	4618      	mov	r0, r3
 8007104:	f009 fbb4 	bl	8010870 <_ZN10TestResultD1Ev>
 8007108:	e0bf      	b.n	800728a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	4618      	mov	r0, r3
 8007110:	f00c fbae 	bl	8013870 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d019      	beq.n	800714e <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	f107 0308 	add.w	r3, r7, #8
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f009 fb6b 	bl	8010800 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3328      	adds	r3, #40	; 0x28
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f107 0108 	add.w	r1, r7, #8
 800713c:	4610      	mov	r0, r2
 800713e:	4798      	blx	r3
        return 0;
 8007140:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	4618      	mov	r0, r3
 8007148:	f009 fb92 	bl	8010870 <_ZN10TestResultD1Ev>
 800714c:	e09d      	b.n	800728a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	4618      	mov	r0, r3
 8007154:	f00c fbbc 	bl	80138d0 <_ZNK20CommandLineArguments11isReversingEv>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d008      	beq.n	8007170 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	331c      	adds	r3, #28
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3

    if (arguments_->isShuffling())
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4618      	mov	r0, r3
 8007176:	f00c fbc3 	bl	8013900 <_ZNK20CommandLineArguments11isShufflingEv>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d023      	beq.n	80071c8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	332c      	adds	r3, #44	; 0x2c
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4941      	ldr	r1, [pc, #260]	; (8007294 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685d      	ldr	r5, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3334      	adds	r3, #52	; 0x34
 80071a0:	681c      	ldr	r4, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f00c fbb6 	bl	8013918 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80071ac:	4603      	mov	r3, r0
 80071ae:	4619      	mov	r1, r3
 80071b0:	4628      	mov	r0, r5
 80071b2:	47a0      	blx	r4
        output_->print("\n");
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	332c      	adds	r3, #44	; 0x2c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4935      	ldr	r1, [pc, #212]	; (8007298 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 80071c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80071ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071d0:	429a      	cmp	r2, r3
 80071d2:	bf8c      	ite	hi
 80071d4:	2301      	movhi	r3, #1
 80071d6:	2300      	movls	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d04e      	beq.n	800727c <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f00c fb8c 	bl	8013900 <_ZNK20CommandLineArguments11isShufflingEv>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00f      	beq.n	800720e <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68dd      	ldr	r5, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3318      	adds	r3, #24
 80071fa:	681c      	ldr	r4, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	4618      	mov	r0, r3
 8007202:	f00c fb89 	bl	8013918 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8007206:	4603      	mov	r3, r0
 8007208:	4619      	mov	r1, r3
 800720a:	4628      	mov	r0, r5
 800720c:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6858      	ldr	r0, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3340      	adds	r3, #64	; 0x40
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800721e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007220:	4798      	blx	r3
        TestResult tr(*output_);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	f107 0308 	add.w	r3, r7, #8
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f009 fae7 	bl	8010800 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3314      	adds	r3, #20
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f107 0108 	add.w	r1, r7, #8
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8007248:	f107 0308 	add.w	r3, r7, #8
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fcef 	bl	8006c30 <_ZNK10TestResult15getFailureCountEv>
 8007252:	4602      	mov	r2, r0
 8007254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007256:	4413      	add	r3, r2
 8007258:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800725a:	f107 0308 	add.w	r3, r7, #8
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff fcf2 	bl	8006c48 <_ZNK10TestResult9isFailureEv>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d002      	beq.n	8007270 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800726a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726c:	3301      	adds	r3, #1
 800726e:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8007270:	f107 0308 	add.w	r3, r7, #8
 8007274:	4618      	mov	r0, r3
 8007276:	f009 fafb 	bl	8010870 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800727a:	e7a5      	b.n	80071c8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800727c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8007282:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8007284:	e000      	b.n	8007288 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8007286:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8007288:	bf00      	nop
 800728a:	4623      	mov	r3, r4
}
 800728c:	4618      	mov	r0, r3
 800728e:	3750      	adds	r7, #80	; 0x50
 8007290:	46bd      	mov	sp, r7
 8007292:	bdb0      	pop	{r4, r5, r7, pc}
 8007294:	08021eb4 	.word	0x08021eb4
 8007298:	08021ee0 	.word	0x08021ee0

0800729c <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 800729c:	b590      	push	{r4, r7, lr}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 80072a4:	229d      	movs	r2, #157	; 0x9d
 80072a6:	4906      	ldr	r1, [pc, #24]	; (80072c0 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80072a8:	201c      	movs	r0, #28
 80072aa:	f001 f9eb 	bl	8008684 <_ZnwjPKci>
 80072ae:	4604      	mov	r4, r0
 80072b0:	4620      	mov	r0, r4
 80072b2:	f005 f955 	bl	800c560 <_ZN18TeamCityTestOutputC1Ev>
 80072b6:	4623      	mov	r3, r4
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd90      	pop	{r4, r7, pc}
 80072c0:	08021e7c 	.word	0x08021e7c

080072c4 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 80072c4:	b590      	push	{r4, r7, lr}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 80072ce:	22a2      	movs	r2, #162	; 0xa2
 80072d0:	490a      	ldr	r1, [pc, #40]	; (80072fc <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 80072d2:	2014      	movs	r0, #20
 80072d4:	f001 f9d6 	bl	8008684 <_ZnwjPKci>
 80072d8:	4604      	mov	r4, r0
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 f980 	bl	80075e0 <_ZN15JUnitTestOutputC1Ev>
 80072e0:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fbb2 	bl	8007a54 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 80072f0:	68fb      	ldr	r3, [r7, #12]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd90      	pop	{r4, r7, pc}
 80072fa:	bf00      	nop
 80072fc:	08021e7c 	.word	0x08021e7c

08007300 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8007300:	b590      	push	{r4, r7, lr}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8007308:	22ab      	movs	r2, #171	; 0xab
 800730a:	4906      	ldr	r1, [pc, #24]	; (8007324 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 800730c:	2010      	movs	r0, #16
 800730e:	f001 f9b9 	bl	8008684 <_ZnwjPKci>
 8007312:	4604      	mov	r4, r0
 8007314:	4620      	mov	r0, r4
 8007316:	f7ff fcb3 	bl	8006c80 <_ZN17ConsoleTestOutputC1Ev>
 800731a:	4623      	mov	r3, r4
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bd90      	pop	{r4, r7, pc}
 8007324:	08021e7c 	.word	0x08021e7c

08007328 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8007328:	b590      	push	{r4, r7, lr}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8007334:	22b0      	movs	r2, #176	; 0xb0
 8007336:	490e      	ldr	r1, [pc, #56]	; (8007370 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8007338:	2018      	movs	r0, #24
 800733a:	f001 f9a3 	bl	8008684 <_ZnwjPKci>
 800733e:	4604      	mov	r4, r0
 8007340:	4620      	mov	r0, r4
 8007342:	f007 ff83 	bl	800f24c <_ZN19CompositeTestOutputC1Ev>
 8007346:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	335c      	adds	r3, #92	; 0x5c
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	6978      	ldr	r0, [r7, #20]
 8007354:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3360      	adds	r3, #96	; 0x60
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	4798      	blx	r3
  return composite;
 8007364:	697b      	ldr	r3, [r7, #20]
}
 8007366:	4618      	mov	r0, r3
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	bd90      	pop	{r4, r7, pc}
 800736e:	bf00      	nop
 8007370:	08021e7c 	.word	0x08021e7c

08007374 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8007374:	b5b0      	push	{r4, r5, r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f00b fe4f 	bl	8013028 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800738a:	4603      	mov	r3, r0
 800738c:	f083 0301 	eor.w	r3, r3, #1
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d029      	beq.n	80073ea <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3310      	adds	r3, #16
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	4798      	blx	r3
 80073a2:	4602      	mov	r2, r0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685d      	ldr	r5, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	332c      	adds	r3, #44	; 0x2c
 80073b4:	681c      	ldr	r4, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f00c fa10 	bl	80137e0 <_ZNK20CommandLineArguments8needHelpEv>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d006      	beq.n	80073d4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f00c f9fa 	bl	80137c4 <_ZNK20CommandLineArguments4helpEv>
 80073d0:	4603      	mov	r3, r0
 80073d2:	e005      	b.n	80073e0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	4618      	mov	r0, r3
 80073da:	f00c f9e5 	bl	80137a8 <_ZNK20CommandLineArguments5usageEv>
 80073de:	4603      	mov	r3, r0
 80073e0:	4619      	mov	r1, r3
 80073e2:	4628      	mov	r0, r5
 80073e4:	47a0      	blx	r4
    return false;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e050      	b.n	800748c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f00d f84c 	bl	801448c <_ZNK20CommandLineArguments13isJUnitOutputEv>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d02c      	beq.n	8007454 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	681c      	ldr	r4, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	4618      	mov	r0, r3
 8007408:	f00d f864 	bl	80144d4 <_ZNK20CommandLineArguments14getPackageNameEv>
 800740c:	4603      	mov	r3, r0
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	47a0      	blx	r4
 8007414:	4602      	mov	r2, r0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	4618      	mov	r0, r3
 8007420:	f00c f9ea 	bl	80137f8 <_ZNK20CommandLineArguments9isVerboseEv>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d02f      	beq.n	800748a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3314      	adds	r3, #20
 8007430:	681c      	ldr	r4, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685d      	ldr	r5, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3310      	adds	r3, #16
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
 8007442:	4603      	mov	r3, r0
 8007444:	461a      	mov	r2, r3
 8007446:	4629      	mov	r1, r5
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	47a0      	blx	r4
 800744c:	4602      	mov	r2, r0
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	e01a      	b.n	800748a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	4618      	mov	r0, r3
 800745a:	f00d f829 	bl	80144b0 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d009      	beq.n	8007478 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	4798      	blx	r3
 8007470:	4602      	mov	r2, r0
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	e008      	b.n	800748a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3310      	adds	r3, #16
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
 8007484:	4602      	mov	r2, r0
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	605a      	str	r2, [r3, #4]
  return true;
 800748a:	2301      	movs	r3, #1
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bdb0      	pop	{r4, r5, r7, pc}

08007494 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	4a05      	ldr	r2, [pc, #20]	; (80074b4 <_ZN16SetPointerPluginD1Ev+0x20>)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f008 f9e7 	bl	800f878 <_ZN10TestPluginD1Ev>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	08025d6c 	.word	0x08025d6c

080074b8 <_ZN16SetPointerPluginD0Ev>:
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ffe7 	bl	8007494 <_ZN16SetPointerPluginD1Ev>
 80074c6:	2114      	movs	r1, #20
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 f8ef 	bl	80086ac <_ZdlPvj>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
        return checkCount_;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
    }
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4910      	ldr	r1, [pc, #64]	; (800753c <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80074fc:	4618      	mov	r0, r3
 80074fe:	f003 fc84 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	60da      	str	r2, [r3, #12]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	741a      	strb	r2, [r3, #16]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3314      	adds	r3, #20
 8007518:	4908      	ldr	r1, [pc, #32]	; (800753c <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800751a:	4618      	mov	r0, r3
 800751c:	f003 fc75 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	61da      	str	r2, [r3, #28]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	621a      	str	r2, [r3, #32]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	08021ee4 	.word	0x08021ee4

08007540 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	605a      	str	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	609a      	str	r2, [r3, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	60da      	str	r2, [r3, #12]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	611a      	str	r2, [r3, #16]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3314      	adds	r3, #20
 800756a:	4907      	ldr	r1, [pc, #28]	; (8007588 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 800756c:	4618      	mov	r0, r3
 800756e:	f003 fc4c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	61da      	str	r2, [r3, #28]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	621a      	str	r2, [r3, #32]
    {
    }
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	08021ee4 	.word	0x08021ee4

0800758c <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3314      	adds	r3, #20
 8007598:	4618      	mov	r0, r3
 800759a:	f003 ffee 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff ffc4 	bl	8007540 <_ZN20JUnitTestGroupResultC1Ev>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3328      	adds	r3, #40	; 0x28
 80075bc:	4907      	ldr	r1, [pc, #28]	; (80075dc <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80075be:	4618      	mov	r0, r3
 80075c0:	f003 fc23 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3330      	adds	r3, #48	; 0x30
 80075c8:	4904      	ldr	r1, [pc, #16]	; (80075dc <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80075ca:	4618      	mov	r0, r3
 80075cc:	f003 fc1d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	08021ee4 	.word	0x08021ee4

080075e0 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 80075e0:	b590      	push	{r4, r7, lr}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f007 f936 	bl	800e85c <_ZN10TestOutputC1Ev>
 80075f0:	4a09      	ldr	r2, [pc, #36]	; (8007618 <_ZN15JUnitTestOutputC1Ev+0x38>)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	224d      	movs	r2, #77	; 0x4d
 80075f8:	4908      	ldr	r1, [pc, #32]	; (800761c <_ZN15JUnitTestOutputC1Ev+0x3c>)
 80075fa:	2038      	movs	r0, #56	; 0x38
 80075fc:	f001 f842 	bl	8008684 <_ZnwjPKci>
 8007600:	4604      	mov	r4, r0
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff ffd0 	bl	80075a8 <_ZN19JUnitTestOutputImplC1Ev>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	611c      	str	r4, [r3, #16]
{
}
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bd90      	pop	{r4, r7, pc}
 8007616:	bf00      	nop
 8007618:	0802560c 	.word	0x0802560c
 800761c:	08021ee8 	.word	0x08021ee8

08007620 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3330      	adds	r3, #48	; 0x30
 800762c:	4618      	mov	r0, r3
 800762e:	f003 ffa4 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3328      	adds	r3, #40	; 0x28
 8007636:	4618      	mov	r0, r3
 8007638:	f003 ff9f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	f7ff ffa4 	bl	800758c <_ZN20JUnitTestGroupResultD1Ev>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	4a0c      	ldr	r2, [pc, #48]	; (800768c <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f838 	bl	80076d4 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691c      	ldr	r4, [r3, #16]
 8007668:	2c00      	cmp	r4, #0
 800766a:	d006      	beq.n	800767a <_ZN15JUnitTestOutputD1Ev+0x2a>
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff ffd7 	bl	8007620 <_ZN19JUnitTestOutputImplD1Ev>
 8007672:	2138      	movs	r1, #56	; 0x38
 8007674:	4620      	mov	r0, r4
 8007676:	f001 f819 	bl	80086ac <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4618      	mov	r0, r3
 800767e:	f007 f90b 	bl	800e898 <_ZN10TestOutputD1Ev>
}
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}
 800768c:	0802560c 	.word	0x0802560c

08007690 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
}
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7ff ffd9 	bl	8007650 <_ZN15JUnitTestOutputD1Ev>
 800769e:	2114      	movs	r1, #20
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 f803 	bl	80086ac <_ZdlPvj>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3314      	adds	r3, #20
 80076bc:	4618      	mov	r0, r3
 80076be:	f003 ff5c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f003 ff58 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 80076d4:	b590      	push	{r4, r7, lr}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2200      	movs	r2, #0
 80076ea:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f103 0414 	add.w	r4, r3, #20
 80076f4:	f107 0308 	add.w	r3, r7, #8
 80076f8:	491d      	ldr	r1, [pc, #116]	; (8007770 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 80076fa:	4618      	mov	r0, r3
 80076fc:	f003 fb85 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007700:	f107 0308 	add.w	r3, r7, #8
 8007704:	4619      	mov	r1, r3
 8007706:	4620      	mov	r0, r4
 8007708:	f003 fbeb 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800770c:	f107 0308 	add.w	r3, r7, #8
 8007710:	4618      	mov	r0, r3
 8007712:	f003 ff32 	bl	800b57a <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	617b      	str	r3, [r7, #20]
    while (cur) {
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d018      	beq.n	8007756 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d004      	beq.n	800773c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	3204      	adds	r2, #4
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	4790      	blx	r2
        delete cur;
 800773c:	697c      	ldr	r4, [r7, #20]
 800773e:	2c00      	cmp	r4, #0
 8007740:	d006      	beq.n	8007750 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8007742:	4620      	mov	r0, r4
 8007744:	f7ff ffb4 	bl	80076b0 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8007748:	2128      	movs	r1, #40	; 0x28
 800774a:	4620      	mov	r0, r4
 800774c:	f000 ffae 	bl	80086ac <_ZdlPvj>
        cur = tmp;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	617b      	str	r3, [r7, #20]
    while (cur) {
 8007754:	e7e3      	b.n	800771e <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2200      	movs	r2, #0
 800775c:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2200      	movs	r2, #0
 8007764:	621a      	str	r2, [r3, #32]
}
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd90      	pop	{r4, r7, pc}
 800776e:	bf00      	nop
 8007770:	08021ee4 	.word	0x08021ee4

08007774 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800779e:	b590      	push	{r4, r7, lr}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	6a1c      	ldr	r4, [r3, #32]
 80077ae:	6838      	ldr	r0, [r7, #0]
 80077b0:	f009 f9c6 	bl	8010b40 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80077b4:	4603      	mov	r3, r0
 80077b6:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	6a1c      	ldr	r4, [r3, #32]
 80077be:	6838      	ldr	r0, [r7, #0]
 80077c0:	f7ff fe8a 	bl	80074d8 <_ZNK10TestResult13getCheckCountEv>
 80077c4:	4603      	mov	r3, r0
 80077c6:	6223      	str	r3, [r4, #32]
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd90      	pop	{r4, r7, pc}

080077d0 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 80077e6:	b590      	push	{r4, r7, lr}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691c      	ldr	r4, [r3, #16]
 80077f4:	6838      	ldr	r0, [r7, #0]
 80077f6:	f009 f9af 	bl	8010b58 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 80077fa:	4603      	mov	r3, r0
 80077fc:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3364      	adds	r3, #100	; 0x64
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
    resetTestGroupResult();
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff ff62 	bl	80076d4 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	bd90      	pop	{r4, r7, pc}

08007818 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8007818:	b590      	push	{r4, r7, lr}
 800781a:	b089      	sub	sp, #36	; 0x24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	3201      	adds	r2, #1
 800782a:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	f103 0414 	add.w	r4, r3, #20
 8007834:	f107 0308 	add.w	r3, r7, #8
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f009 fcef 	bl	801121e <_ZNK10UtestShell8getGroupEv>
 8007840:	f107 0308 	add.w	r3, r7, #8
 8007844:	4619      	mov	r1, r3
 8007846:	4620      	mov	r0, r4
 8007848:	f003 fb4b 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4618      	mov	r0, r3
 8007852:	f003 fe92 	bl	800b57a <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8007856:	4b3c      	ldr	r3, [pc, #240]	; (8007948 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4798      	blx	r3
 800785c:	4602      	mov	r2, r0
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d110      	bne.n	8007890 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800786e:	2288      	movs	r2, #136	; 0x88
 8007870:	4936      	ldr	r1, [pc, #216]	; (800794c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007872:	2028      	movs	r0, #40	; 0x28
 8007874:	f000 ff06 	bl	8008684 <_ZnwjPKci>
 8007878:	4604      	mov	r4, r0
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff fe38 	bl	80074f0 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8007884:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6912      	ldr	r2, [r2, #16]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	61d3      	str	r3, [r2, #28]
 800788e:	e013      	b.n	80078b8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8007890:	228b      	movs	r2, #139	; 0x8b
 8007892:	492e      	ldr	r1, [pc, #184]	; (800794c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8007894:	2028      	movs	r0, #40	; 0x28
 8007896:	f000 fef5 	bl	8008684 <_ZnwjPKci>
 800789a:	4604      	mov	r4, r0
 800789c:	4620      	mov	r0, r4
 800789e:	f7ff fe27 	bl	80074f0 <_ZN23JUnitTestCaseResultNodeC1Ev>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	6a1a      	ldr	r2, [r3, #32]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078b6:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	461c      	mov	r4, r3
 80078c0:	f107 0310 	add.w	r3, r7, #16
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f009 fc9a 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 80078cc:	f107 0310 	add.w	r3, r7, #16
 80078d0:	4619      	mov	r1, r3
 80078d2:	4620      	mov	r0, r4
 80078d4:	f003 fb05 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	4618      	mov	r0, r3
 80078de:	f003 fe4c 	bl	800b57a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	f103 0414 	add.w	r4, r3, #20
 80078ec:	f107 0318 	add.w	r3, r7, #24
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f009 fd55 	bl	80113a2 <_ZNK10UtestShell7getFileEv>
 80078f8:	f107 0318 	add.w	r3, r7, #24
 80078fc:	4619      	mov	r1, r3
 80078fe:	4620      	mov	r0, r4
 8007900:	f003 faef 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 8007904:	f107 0318 	add.w	r3, r7, #24
 8007908:	4618      	mov	r0, r3
 800790a:	f003 fe36 	bl	800b57a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	6a1c      	ldr	r4, [r3, #32]
 8007914:	6838      	ldr	r0, [r7, #0]
 8007916:	f009 fd53 	bl	80113c0 <_ZNK10UtestShell13getLineNumberEv>
 800791a:	4603      	mov	r3, r0
 800791c:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3318      	adds	r3, #24
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6838      	ldr	r0, [r7, #0]
 8007928:	4798      	blx	r3
 800792a:	4603      	mov	r3, r0
 800792c:	f083 0301 	eor.w	r3, r3, #1
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d004      	beq.n	8007940 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	2201      	movs	r2, #1
 800793e:	741a      	strb	r2, [r3, #16]
    }
}
 8007940:	bf00      	nop
 8007942:	3724      	adds	r7, #36	; 0x24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd90      	pop	{r4, r7, pc}
 8007948:	200000a8 	.word	0x200000a8
 800794c:	08021ee8 	.word	0x08021ee8

08007950 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	; 0x28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800795c:	f107 0310 	add.w	r3, r7, #16
 8007960:	4928      	ldr	r1, [pc, #160]	; (8007a04 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8007962:	4618      	mov	r0, r3
 8007964:	f003 fa51 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	3328      	adds	r3, #40	; 0x28
 800796e:	4618      	mov	r0, r3
 8007970:	f003 fdf2 	bl	800b558 <_ZNK12SimpleString7isEmptyEv>
 8007974:	4603      	mov	r3, r0
 8007976:	f083 0301 	eor.w	r3, r3, #1
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00f      	beq.n	80079a0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007988:	f107 0310 	add.w	r3, r7, #16
 800798c:	4611      	mov	r1, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f003 fe70 	bl	800b674 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8007994:	f107 0310 	add.w	r3, r7, #16
 8007998:	491b      	ldr	r1, [pc, #108]	; (8007a08 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800799a:	4618      	mov	r0, r3
 800799c:	f003 fe7c 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 80079a0:	f107 0310 	add.w	r3, r7, #16
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f003 fe64 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3384      	adds	r3, #132	; 0x84
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f107 0018 	add.w	r0, r7, #24
 80079b8:	f107 0210 	add.w	r2, r7, #16
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	4798      	blx	r3
 80079c0:	f107 0320 	add.w	r3, r7, #32
 80079c4:	4911      	ldr	r1, [pc, #68]	; (8007a0c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 80079c6:	4618      	mov	r0, r3
 80079c8:	f003 fa1f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f107 0220 	add.w	r2, r7, #32
 80079d2:	f107 0118 	add.w	r1, r7, #24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f003 fe31 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 80079dc:	f107 0320 	add.w	r3, r7, #32
 80079e0:	4618      	mov	r0, r3
 80079e2:	f003 fdca 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80079e6:	f107 0318 	add.w	r3, r7, #24
 80079ea:	4618      	mov	r0, r3
 80079ec:	f003 fdc5 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 80079f0:	f107 0310 	add.w	r3, r7, #16
 80079f4:	4618      	mov	r0, r3
 80079f6:	f003 fdc0 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 80079fa:	bf00      	nop
}
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	3728      	adds	r7, #40	; 0x28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	08021f04 	.word	0x08021f04
 8007a08:	08021f10 	.word	0x08021f10
 8007a0c:	08021f14 	.word	0x08021f14

08007a10 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8007a1c:	6879      	ldr	r1, [r7, #4]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f003 fa47 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8007a24:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	225f      	movs	r2, #95	; 0x5f
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f003 fbcc 	bl	800b1d6 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	3301      	adds	r3, #1
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	e7f0      	b.n	8007a28 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8007a46:	bf00      	nop
}
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	08021f1c 	.word	0x08021f1c

08007a54 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d006      	beq.n	8007a74 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	3328      	adds	r3, #40	; 0x28
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f003 fa37 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
    }
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8007a7c:	b590      	push	{r4, r7, lr}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3368      	adds	r3, #104	; 0x68
 8007a8a:	681c      	ldr	r4, [r3, #0]
 8007a8c:	f107 0308 	add.w	r3, r7, #8
 8007a90:	4908      	ldr	r1, [pc, #32]	; (8007ab4 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8007a92:	4618      	mov	r0, r3
 8007a94:	f003 f9b9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007a98:	f107 0308 	add.w	r3, r7, #8
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	47a0      	blx	r4
 8007aa2:	f107 0308 	add.w	r3, r7, #8
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f003 fd67 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8007aac:	bf00      	nop
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd90      	pop	{r4, r7, pc}
 8007ab4:	08021f28 	.word	0x08021f28

08007ab8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8007ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007abc:	b08a      	sub	sp, #40	; 0x28
 8007abe:	af04      	add	r7, sp, #16
 8007ac0:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8007ac8:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8007ace:	3314      	adds	r3, #20
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f003 fd25 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007ad6:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8007ade:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	4a23      	ldr	r2, [pc, #140]	; (8007b74 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8007ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aec:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8007aee:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	4b1f      	ldr	r3, [pc, #124]	; (8007b74 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8007af8:	fba3 1302 	umull	r1, r3, r3, r2
 8007afc:	099b      	lsrs	r3, r3, #6
 8007afe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8007b08:	603b      	str	r3, [r7, #0]
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4798      	blx	r3
 8007b10:	4603      	mov	r3, r0
 8007b12:	f107 0008 	add.w	r0, r7, #8
 8007b16:	9303      	str	r3, [sp, #12]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	9302      	str	r3, [sp, #8]
 8007b1c:	9601      	str	r6, [sp, #4]
 8007b1e:	9500      	str	r5, [sp, #0]
 8007b20:	4623      	mov	r3, r4
 8007b22:	4642      	mov	r2, r8
 8007b24:	4915      	ldr	r1, [pc, #84]	; (8007b7c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8007b26:	f004 fa2f 	bl	800bf88 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3368      	adds	r3, #104	; 0x68
 8007b30:	681c      	ldr	r4, [r3, #0]
 8007b32:	f107 0308 	add.w	r3, r7, #8
 8007b36:	4618      	mov	r0, r3
 8007b38:	f003 fcf2 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	f107 0310 	add.w	r3, r7, #16
 8007b42:	4611      	mov	r1, r2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f003 f960 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007b4a:	f107 0310 	add.w	r3, r7, #16
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	47a0      	blx	r4
 8007b54:	f107 0310 	add.w	r3, r7, #16
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f003 fd0e 	bl	800b57a <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8007b5e:	f107 0308 	add.w	r3, r7, #8
 8007b62:	4618      	mov	r0, r3
 8007b64:	f003 fd09 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8007b68:	bf00      	nop
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b72:	bf00      	nop
 8007b74:	10624dd3 	.word	0x10624dd3
 8007b78:	200000ac 	.word	0x200000ac
 8007b7c:	08021f54 	.word	0x08021f54

08007b80 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8007b80:	b590      	push	{r4, r7, lr}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3368      	adds	r3, #104	; 0x68
 8007b8e:	681c      	ldr	r4, [r3, #0]
 8007b90:	f107 0308 	add.w	r3, r7, #8
 8007b94:	4912      	ldr	r1, [pc, #72]	; (8007be0 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8007b96:	4618      	mov	r0, r3
 8007b98:	f003 f937 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007b9c:	f107 0308 	add.w	r3, r7, #8
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	47a0      	blx	r4
 8007ba6:	f107 0308 	add.w	r3, r7, #8
 8007baa:	4618      	mov	r0, r3
 8007bac:	f003 fce5 	bl	800b57a <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3368      	adds	r3, #104	; 0x68
 8007bb6:	681c      	ldr	r4, [r3, #0]
 8007bb8:	f107 0310 	add.w	r3, r7, #16
 8007bbc:	4909      	ldr	r1, [pc, #36]	; (8007be4 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f003 f923 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007bc4:	f107 0310 	add.w	r3, r7, #16
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	47a0      	blx	r4
 8007bce:	f107 0310 	add.w	r3, r7, #16
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f003 fcd1 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd90      	pop	{r4, r7, pc}
 8007be0:	08021fc4 	.word	0x08021fc4
 8007be4:	08021fd4 	.word	0x08021fd4

08007be8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f003 fc93 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f003 f903 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8007c04:	4a0e      	ldr	r2, [pc, #56]	; (8007c40 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8007c06:	490f      	ldr	r1, [pc, #60]	; (8007c44 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f003 fb13 	bl	800b234 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8007c0e:	4a0e      	ldr	r2, [pc, #56]	; (8007c48 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8007c10:	490e      	ldr	r1, [pc, #56]	; (8007c4c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f003 fb0e 	bl	800b234 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8007c18:	4a0d      	ldr	r2, [pc, #52]	; (8007c50 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8007c1a:	490e      	ldr	r1, [pc, #56]	; (8007c54 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f003 fb09 	bl	800b234 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8007c22:	4a0d      	ldr	r2, [pc, #52]	; (8007c58 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8007c24:	490d      	ldr	r1, [pc, #52]	; (8007c5c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f003 fb04 	bl	800b234 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8007c2c:	4a0c      	ldr	r2, [pc, #48]	; (8007c60 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8007c2e:	490d      	ldr	r1, [pc, #52]	; (8007c64 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f003 faff 	bl	800b234 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8007c36:	bf00      	nop
}
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	08021fe4 	.word	0x08021fe4
 8007c44:	08021fec 	.word	0x08021fec
 8007c48:	08021ff0 	.word	0x08021ff0
 8007c4c:	08021ff8 	.word	0x08021ff8
 8007c50:	08021ffc 	.word	0x08021ffc
 8007c54:	08022004 	.word	0x08022004
 8007c58:	08022008 	.word	0x08022008
 8007c5c:	08022010 	.word	0x08022010
 8007c60:	08022014 	.word	0x08022014
 8007c64:	08022020 	.word	0x08022020

08007c68 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8007c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6c:	b096      	sub	sp, #88	; 0x58
 8007c6e:	af08      	add	r7, sp, #32
 8007c70:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80b2 	beq.w	8007de6 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8007c86:	3328      	adds	r3, #40	; 0x28
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f003 fc49 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007c8e:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	3328      	adds	r3, #40	; 0x28
 8007c96:	4618      	mov	r0, r3
 8007c98:	f003 fc5e 	bl	800b558 <_ZNK12SimpleString7isEmptyEv>
 8007c9c:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8007ca2:	4c53      	ldr	r4, [pc, #332]	; (8007df0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8007ca4:	e000      	b.n	8007ca8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8007ca6:	4c53      	ldr	r4, [pc, #332]	; (8007df4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8007cac:	3314      	adds	r3, #20
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f003 fc36 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f003 fc31 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007cbe:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc2:	6a1a      	ldr	r2, [r3, #32]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8007ccc:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8007cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	4a49      	ldr	r2, [pc, #292]	; (8007df8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8007cda:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8007cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	4b45      	ldr	r3, [pc, #276]	; (8007df8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce6:	099b      	lsrs	r3, r3, #6
 8007ce8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	3314      	adds	r3, #20
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f003 fc11 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	f107 0014 	add.w	r0, r7, #20
 8007d08:	9306      	str	r3, [sp, #24]
 8007d0a:	9205      	str	r2, [sp, #20]
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	9204      	str	r2, [sp, #16]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	9203      	str	r2, [sp, #12]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	9302      	str	r3, [sp, #8]
 8007d18:	9601      	str	r6, [sp, #4]
 8007d1a:	9500      	str	r5, [sp, #0]
 8007d1c:	4623      	mov	r3, r4
 8007d1e:	4642      	mov	r2, r8
 8007d20:	4936      	ldr	r1, [pc, #216]	; (8007dfc <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8007d22:	f004 f931 	bl	800bf88 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3368      	adds	r3, #104	; 0x68
 8007d2c:	681c      	ldr	r4, [r3, #0]
 8007d2e:	f107 0314 	add.w	r3, r7, #20
 8007d32:	4618      	mov	r0, r3
 8007d34:	f003 fbf4 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f107 031c 	add.w	r3, r7, #28
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f003 f862 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007d46:	f107 031c 	add.w	r3, r7, #28
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	47a0      	blx	r4
 8007d50:	f107 031c 	add.w	r3, r7, #28
 8007d54:	4618      	mov	r0, r3
 8007d56:	f003 fc10 	bl	800b57a <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d60:	6a12      	ldr	r2, [r2, #32]
 8007d62:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8007d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d007      	beq.n	8007d7c <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3388      	adds	r3, #136	; 0x88
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	4798      	blx	r3
 8007d7a:	e017      	b.n	8007dac <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7e:	7c1b      	ldrb	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d013      	beq.n	8007dac <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3368      	adds	r3, #104	; 0x68
 8007d8a:	681c      	ldr	r4, [r3, #0]
 8007d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d90:	491b      	ldr	r1, [pc, #108]	; (8007e00 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8007d92:	4618      	mov	r0, r3
 8007d94:	f003 f839 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	47a0      	blx	r4
 8007da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f003 fbe7 	bl	800b57a <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3368      	adds	r3, #104	; 0x68
 8007db2:	681c      	ldr	r4, [r3, #0]
 8007db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007db8:	4912      	ldr	r1, [pc, #72]	; (8007e04 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f003 f825 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	47a0      	blx	r4
 8007dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f003 fbd3 	bl	800b57a <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8007dda:	f107 0314 	add.w	r3, r7, #20
 8007dde:	4618      	mov	r0, r3
 8007de0:	f003 fbcb 	bl	800b57a <_ZN12SimpleStringD1Ev>
    while (cur) {
 8007de4:	e749      	b.n	8007c7a <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8007de6:	bf00      	nop
 8007de8:	3738      	adds	r7, #56	; 0x38
 8007dea:	46bd      	mov	sp, r7
 8007dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df0:	08021ee4 	.word	0x08021ee4
 8007df4:	08022024 	.word	0x08022024
 8007df8:	10624dd3 	.word	0x10624dd3
 8007dfc:	08022028 	.word	0x08022028
 8007e00:	08022084 	.word	0x08022084
 8007e04:	08022094 	.word	0x08022094

08007e08 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8007e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e0a:	b091      	sub	sp, #68	; 0x44
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68d9      	ldr	r1, [r3, #12]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f107 0210 	add.w	r2, r7, #16
 8007e24:	4610      	mov	r0, r2
 8007e26:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8007e28:	f107 0310 	add.w	r3, r7, #16
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f003 fb77 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007e32:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	68da      	ldr	r2, [r3, #12]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4610      	mov	r0, r2
 8007e44:	4798      	blx	r3
 8007e46:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8007e48:	461e      	mov	r6, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3380      	adds	r3, #128	; 0x80
 8007e50:	681c      	ldr	r4, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68d9      	ldr	r1, [r3, #12]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3318      	adds	r3, #24
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f107 0220 	add.w	r2, r7, #32
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	f107 0318 	add.w	r3, r7, #24
 8007e6c:	f107 0220 	add.w	r2, r7, #32
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	47a0      	blx	r4
 8007e76:	f107 0318 	add.w	r3, r7, #24
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f003 fb50 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f107 0008 	add.w	r0, r7, #8
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4633      	mov	r3, r6
 8007e8a:	462a      	mov	r2, r5
 8007e8c:	4924      	ldr	r1, [pc, #144]	; (8007f20 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8007e8e:	f004 f87b 	bl	800bf88 <_Z16StringFromFormatPKcz>
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f003 fb6f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8007e9c:	f107 0320 	add.w	r3, r7, #32
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f003 fb6a 	bl	800b57a <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8007ea6:	f107 0310 	add.w	r3, r7, #16
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f003 fb65 	bl	800b57a <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3368      	adds	r3, #104	; 0x68
 8007eb6:	681c      	ldr	r4, [r3, #0]
 8007eb8:	f107 0308 	add.w	r3, r7, #8
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f003 fb2f 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ec8:	4611      	mov	r1, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f002 ff9d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	47a0      	blx	r4
 8007eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f003 fb4b 	bl	800b57a <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3368      	adds	r3, #104	; 0x68
 8007eea:	681c      	ldr	r4, [r3, #0]
 8007eec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ef0:	490c      	ldr	r1, [pc, #48]	; (8007f24 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f002 ff89 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007ef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	47a0      	blx	r4
 8007f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f06:	4618      	mov	r0, r3
 8007f08:	f003 fb37 	bl	800b57a <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8007f0c:	f107 0308 	add.w	r3, r7, #8
 8007f10:	4618      	mov	r0, r3
 8007f12:	f003 fb32 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8007f16:	bf00      	nop
 8007f18:	373c      	adds	r7, #60	; 0x3c
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	080220a4 	.word	0x080220a4
 8007f24:	080220e0 	.word	0x080220e0

08007f28 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8007f28:	b590      	push	{r4, r7, lr}
 8007f2a:	b08d      	sub	sp, #52	; 0x34
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3368      	adds	r3, #104	; 0x68
 8007f36:	681c      	ldr	r4, [r3, #0]
 8007f38:	f107 0308 	add.w	r3, r7, #8
 8007f3c:	4933      	ldr	r1, [pc, #204]	; (800800c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 ff63 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007f44:	f107 0308 	add.w	r3, r7, #8
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	47a0      	blx	r4
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	4618      	mov	r0, r3
 8007f54:	f003 fb11 	bl	800b57a <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3368      	adds	r3, #104	; 0x68
 8007f5e:	681c      	ldr	r4, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3380      	adds	r3, #128	; 0x80
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	6912      	ldr	r2, [r2, #16]
 8007f6c:	3230      	adds	r2, #48	; 0x30
 8007f6e:	f107 0010 	add.w	r0, r7, #16
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	4798      	blx	r3
 8007f76:	f107 0310 	add.w	r3, r7, #16
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	47a0      	blx	r4
 8007f80:	f107 0310 	add.w	r3, r7, #16
 8007f84:	4618      	mov	r0, r3
 8007f86:	f003 faf8 	bl	800b57a <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3368      	adds	r3, #104	; 0x68
 8007f90:	681c      	ldr	r4, [r3, #0]
 8007f92:	f107 0318 	add.w	r3, r7, #24
 8007f96:	491e      	ldr	r1, [pc, #120]	; (8008010 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f002 ff36 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007f9e:	f107 0318 	add.w	r3, r7, #24
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	47a0      	blx	r4
 8007fa8:	f107 0318 	add.w	r3, r7, #24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f003 fae4 	bl	800b57a <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3368      	adds	r3, #104	; 0x68
 8007fb8:	681c      	ldr	r4, [r3, #0]
 8007fba:	f107 0320 	add.w	r3, r7, #32
 8007fbe:	4915      	ldr	r1, [pc, #84]	; (8008014 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f002 ff22 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007fc6:	f107 0320 	add.w	r3, r7, #32
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	47a0      	blx	r4
 8007fd0:	f107 0320 	add.w	r3, r7, #32
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f003 fad0 	bl	800b57a <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3368      	adds	r3, #104	; 0x68
 8007fe0:	681c      	ldr	r4, [r3, #0]
 8007fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fe6:	490c      	ldr	r1, [pc, #48]	; (8008018 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f002 ff0e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8007fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	47a0      	blx	r4
 8007ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f003 fabc 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8008002:	bf00      	nop
 8008004:	3734      	adds	r7, #52	; 0x34
 8008006:	46bd      	mov	sp, r7
 8008008:	bd90      	pop	{r4, r7, pc}
 800800a:	bf00      	nop
 800800c:	080220ec 	.word	0x080220ec
 8008010:	080220fc 	.word	0x080220fc
 8008014:	0802210c 	.word	0x0802210c
 8008018:	08022128 	.word	0x08022128

0800801c <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3360      	adds	r3, #96	; 0x60
 800802a:	681c      	ldr	r4, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	335c      	adds	r3, #92	; 0x5c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6912      	ldr	r2, [r2, #16]
 8008038:	3214      	adds	r2, #20
 800803a:	f107 0008 	add.w	r0, r7, #8
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4798      	blx	r3
 8008042:	f107 0308 	add.w	r3, r7, #8
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	47a0      	blx	r4
 800804c:	f107 0308 	add.w	r3, r7, #8
 8008050:	4618      	mov	r0, r3
 8008052:	f003 fa92 	bl	800b57a <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3370      	adds	r3, #112	; 0x70
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4798      	blx	r3
    writeTestSuiteSummary();
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3374      	adds	r3, #116	; 0x74
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
    writeProperties();
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3378      	adds	r3, #120	; 0x78
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
    writeTestCases();
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	337c      	adds	r3, #124	; 0x7c
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
    writeFileEnding();
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	338c      	adds	r3, #140	; 0x8c
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
    closeFile();
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	336c      	adds	r3, #108	; 0x6c
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd90      	pop	{r4, r7, pc}

080080a6 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	3330      	adds	r3, #48	; 0x30
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f003 fae2 	bl	800b698 <_ZN12SimpleStringpLEPKc>
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d113      	bne.n	800815a <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	3201      	adds	r2, #1
 800813a:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800813c:	f240 1233 	movw	r2, #307	; 0x133
 8008140:	4908      	ldr	r1, [pc, #32]	; (8008164 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8008142:	2034      	movs	r0, #52	; 0x34
 8008144:	f000 fa9e 	bl	8008684 <_ZnwjPKci>
 8008148:	4604      	mov	r4, r0
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	4620      	mov	r0, r4
 800814e:	f004 fd37 	bl	800cbc0 <_ZN11TestFailureC1ERKS_>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	60dc      	str	r4, [r3, #12]
    }
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	bd90      	pop	{r4, r7, pc}
 8008162:	bf00      	nop
 8008164:	08021ee8 	.word	0x08021ee8

08008168 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8008168:	b5b0      	push	{r4, r5, r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8008172:	4b08      	ldr	r3, [pc, #32]	; (8008194 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8008174:	681d      	ldr	r5, [r3, #0]
 8008176:	6838      	ldr	r0, [r7, #0]
 8008178:	f003 f9d2 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800817c:	4602      	mov	r2, r0
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691c      	ldr	r4, [r3, #16]
 8008182:	4905      	ldr	r1, [pc, #20]	; (8008198 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8008184:	4610      	mov	r0, r2
 8008186:	47a8      	blx	r5
 8008188:	4603      	mov	r3, r0
 800818a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bdb0      	pop	{r4, r5, r7, pc}
 8008194:	200000b4 	.word	0x200000b4
 8008198:	08022138 	.word	0x08022138

0800819c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800819c:	b590      	push	{r4, r7, lr}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 80081a6:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 80081a8:	681c      	ldr	r4, [r3, #0]
 80081aa:	6838      	ldr	r0, [r7, #0]
 80081ac:	f003 f9b8 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 80081b0:	4602      	mov	r2, r0
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	4619      	mov	r1, r3
 80081ba:	4610      	mov	r0, r2
 80081bc:	47a0      	blx	r4
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd90      	pop	{r4, r7, pc}
 80081c6:	bf00      	nop
 80081c8:	200000b8 	.word	0x200000b8

080081cc <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6912      	ldr	r2, [r2, #16]
 80081dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081de:	4610      	mov	r0, r2
 80081e0:	4798      	blx	r3
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	200000bc 	.word	0x200000bc

080081f0 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
        return false;
 80081fe:	2300      	movs	r3, #0
    }
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
    {
 8008214:	4a04      	ldr	r2, [pc, #16]	; (8008228 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	601a      	str	r2, [r3, #0]
    }
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	080256b8 	.word	0x080256b8

0800822c <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
    }
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff ffe9 	bl	800820c <_ZN17MemoryLeakFailureD1Ev>
 800823a:	2104      	movs	r1, #4
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa35 	bl	80086ac <_ZdlPvj>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800824c:	b590      	push	{r4, r7, lr}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	687c      	ldr	r4, [r7, #4]
 8008256:	f000 fc71 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800825a:	4603      	mov	r3, r0
 800825c:	4618      	mov	r0, r3
 800825e:	f00c ff6c 	bl	801513a <_ZN18MemoryLeakDetector8getMutexEv>
 8008262:	4603      	mov	r3, r0
 8008264:	4619      	mov	r1, r3
 8008266:	4620      	mov	r0, r4
 8008268:	f002 fb24 	bl	800a8b4 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4618      	mov	r0, r3
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	bd90      	pop	{r4, r7, pc}

08008276 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4618      	mov	r0, r3
 8008282:	f002 fb29 	bl	800a8d8 <_ZN15ScopedMutexLockD1Ev>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8008290:	b590      	push	{r4, r7, lr}
 8008292:	b087      	sub	sp, #28
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800829c:	f000 fc4e 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80082a0:	4604      	mov	r4, r0
 80082a2:	f006 f8df 	bl	800e464 <_Z25getCurrentMallocAllocatorv>
 80082a6:	4601      	mov	r1, r0
 80082a8:	2301      	movs	r3, #1
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4620      	mov	r0, r4
 80082b6:	f00d f983 	bl	80155c0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80082ba:	4603      	mov	r3, r0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd90      	pop	{r4, r7, pc}

080082c4 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 80082d0:	f000 fc34 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	68f9      	ldr	r1, [r7, #12]
 80082d8:	4618      	mov	r0, r3
 80082da:	f00c ffdd 	bl	8015298 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 80082de:	f000 fc2d 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80082e2:	4604      	mov	r4, r0
 80082e4:	f006 f8be 	bl	800e464 <_Z25getCurrentMallocAllocatorv>
 80082e8:	4601      	mov	r1, r0
 80082ea:	2301      	movs	r3, #1
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	4620      	mov	r0, r4
 80082f8:	f00d f996 	bl	8015628 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	bd90      	pop	{r4, r7, pc}

08008304 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8008304:	b590      	push	{r4, r7, lr}
 8008306:	b089      	sub	sp, #36	; 0x24
 8008308:	af04      	add	r7, sp, #16
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8008312:	f000 fc13 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008316:	4604      	mov	r4, r0
 8008318:	f006 f8a4 	bl	800e464 <_Z25getCurrentMallocAllocatorv>
 800831c:	4601      	mov	r1, r0
 800831e:	2301      	movs	r3, #1
 8008320:	9302      	str	r3, [sp, #8]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	4620      	mov	r0, r4
 8008330:	f00d f9de 	bl	80156f0 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8008334:	4603      	mov	r3, r0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	bd90      	pop	{r4, r7, pc}
	...

08008340 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800834c:	4b04      	ldr	r3, [pc, #16]	; (8008360 <_ZL13normal_mallocjPKcj+0x20>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	4798      	blx	r3
 8008354:	4603      	mov	r3, r0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	200000c8 	.word	0x200000c8

08008364 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <_ZL14normal_reallocPvjPKcj+0x24>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68b9      	ldr	r1, [r7, #8]
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	4798      	blx	r3
 800837c:	4603      	mov	r3, r0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	200000cc 	.word	0x200000cc

0800838c <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8008398:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <_ZL11normal_freePvPKcj+0x1c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	4798      	blx	r3
}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	200000d0 	.word	0x200000d0

080083ac <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 80083b4:	f107 0308 	add.w	r3, r7, #8
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff ff47 	bl	800824c <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80083be:	f000 fbbd 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80083c2:	4604      	mov	r4, r0
 80083c4:	f005 ff9e 	bl	800e304 <_Z22getCurrentNewAllocatorv>
 80083c8:	4601      	mov	r1, r0
 80083ca:	2300      	movs	r3, #0
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4620      	mov	r0, r4
 80083d0:	f00d f864 	bl	801549c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80083d4:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80083d6:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 80083d8:	f107 0308 	add.w	r3, r7, #8
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff ff4a 	bl	8008276 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 80083e2:	4623      	mov	r3, r4
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd90      	pop	{r4, r7, pc}

080083ec <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80083ec:	b590      	push	{r4, r7, lr}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80083f4:	f000 fba2 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80083f8:	4604      	mov	r4, r0
 80083fa:	f005 ff83 	bl	800e304 <_Z22getCurrentNewAllocatorv>
 80083fe:	4601      	mov	r1, r0
 8008400:	2300      	movs	r3, #0
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	4620      	mov	r0, r4
 8008406:	f00d f849 	bl	801549c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800840a:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800840c:	68fb      	ldr	r3, [r7, #12]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	bd90      	pop	{r4, r7, pc}

08008416 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800841e:	f000 fb8d 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008422:	4604      	mov	r4, r0
 8008424:	f005 ff6e 	bl	800e304 <_Z22getCurrentNewAllocatorv>
 8008428:	4601      	mov	r1, r0
 800842a:	2300      	movs	r3, #0
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	4620      	mov	r0, r4
 8008430:	f00d f834 	bl	801549c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008434:	4603      	mov	r3, r0
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	bd90      	pop	{r4, r7, pc}

0800843e <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800843e:	b590      	push	{r4, r7, lr}
 8008440:	b089      	sub	sp, #36	; 0x24
 8008442:	af02      	add	r7, sp, #8
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800844a:	f000 fb77 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800844e:	4604      	mov	r4, r0
 8008450:	f005 ff58 	bl	800e304 <_Z22getCurrentNewAllocatorv>
 8008454:	4601      	mov	r1, r0
 8008456:	2300      	movs	r3, #0
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	4620      	mov	r0, r4
 8008464:	f00d f8ac 	bl	80155c0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8008468:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800846a:	697b      	ldr	r3, [r7, #20]
}
 800846c:	4618      	mov	r0, r3
 800846e:	371c      	adds	r7, #28
 8008470:	46bd      	mov	sp, r7
 8008472:	bd90      	pop	{r4, r7, pc}

08008474 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8008474:	b590      	push	{r4, r7, lr}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800847c:	f000 fb5e 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008480:	4604      	mov	r4, r0
 8008482:	f005 ff97 	bl	800e3b4 <_Z27getCurrentNewArrayAllocatorv>
 8008486:	4601      	mov	r1, r0
 8008488:	2300      	movs	r3, #0
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	4620      	mov	r0, r4
 800848e:	f00d f805 	bl	801549c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008492:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008494:	68fb      	ldr	r3, [r7, #12]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bd90      	pop	{r4, r7, pc}

0800849e <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800849e:	b590      	push	{r4, r7, lr}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80084a6:	f000 fb49 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80084aa:	4604      	mov	r4, r0
 80084ac:	f005 ff82 	bl	800e3b4 <_Z27getCurrentNewArrayAllocatorv>
 80084b0:	4601      	mov	r1, r0
 80084b2:	2300      	movs	r3, #0
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	4620      	mov	r0, r4
 80084b8:	f00c fff0 	bl	801549c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80084bc:	4603      	mov	r3, r0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd90      	pop	{r4, r7, pc}

080084c6 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 80084c6:	b590      	push	{r4, r7, lr}
 80084c8:	b089      	sub	sp, #36	; 0x24
 80084ca:	af02      	add	r7, sp, #8
 80084cc:	60f8      	str	r0, [r7, #12]
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 80084d2:	f000 fb33 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80084d6:	4604      	mov	r4, r0
 80084d8:	f005 ff6c 	bl	800e3b4 <_Z27getCurrentNewArrayAllocatorv>
 80084dc:	4601      	mov	r1, r0
 80084de:	2300      	movs	r3, #0
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4620      	mov	r0, r4
 80084ec:	f00d f868 	bl	80155c0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80084f0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80084f2:	697b      	ldr	r3, [r7, #20]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	371c      	adds	r7, #28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd90      	pop	{r4, r7, pc}

080084fc <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008504:	f000 fb1a 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008508:	4603      	mov	r3, r0
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	f00c fec3 	bl	8015298 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8008512:	f000 fb13 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008516:	4604      	mov	r4, r0
 8008518:	f005 fef4 	bl	800e304 <_Z22getCurrentNewAllocatorv>
 800851c:	4601      	mov	r1, r0
 800851e:	2300      	movs	r3, #0
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	4620      	mov	r0, r4
 8008524:	f00d f8ca 	bl	80156bc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bd90      	pop	{r4, r7, pc}

08008530 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8008530:	b590      	push	{r4, r7, lr}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008538:	f000 fb00 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800853c:	4603      	mov	r3, r0
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	4618      	mov	r0, r3
 8008542:	f00c fea9 	bl	8015298 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8008546:	f000 faf9 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800854a:	4604      	mov	r4, r0
 800854c:	f005 ff32 	bl	800e3b4 <_Z27getCurrentNewArrayAllocatorv>
 8008550:	4601      	mov	r1, r0
 8008552:	2300      	movs	r3, #0
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	4620      	mov	r0, r4
 8008558:	f00d f8b0 	bl	80156bc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	bd90      	pop	{r4, r7, pc}

08008564 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800856c:	4b04      	ldr	r3, [pc, #16]	; (8008580 <_ZL19normal_operator_newj+0x1c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	4798      	blx	r3
 8008574:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008576:	68fb      	ldr	r3, [r7, #12]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	200000c8 	.word	0x200000c8

08008584 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800858c:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
 8008594:	4603      	mov	r3, r0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	200000c8 	.word	0x200000c8

080085a4 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	4798      	blx	r3
 80085b8:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80085ba:	697b      	ldr	r3, [r7, #20]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	200000c8 	.word	0x200000c8

080085c8 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80085d0:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <_ZL25normal_operator_new_arrayj+0x1c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80085da:	68fb      	ldr	r3, [r7, #12]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	200000c8 	.word	0x200000c8

080085e8 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	4798      	blx	r3
 80085f8:	4603      	mov	r3, r0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	200000c8 	.word	0x200000c8

08008608 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008614:	4b04      	ldr	r3, [pc, #16]	; (8008628 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	4798      	blx	r3
 800861c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800861e:	697b      	ldr	r3, [r7, #20]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	200000c8 	.word	0x200000c8

0800862c <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008634:	4b03      	ldr	r3, [pc, #12]	; (8008644 <_ZL22normal_operator_deletePv+0x18>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
}
 800863c:	bf00      	nop
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	200000d0 	.word	0x200000d0

08008648 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008650:	4b03      	ldr	r3, [pc, #12]	; (8008660 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	4798      	blx	r3
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	200000d0 	.word	0x200000d0

08008664 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <_Znwj+0x1c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	4798      	blx	r3
 8008674:	4603      	mov	r3, r0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	2000002c 	.word	0x2000002c

08008684 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <_ZnwjPKci+0x24>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	4798      	blx	r3
 800869c:	4603      	mov	r3, r0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000034 	.word	0x20000034

080086ac <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 80086b6:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <_ZdlPvj+0x1c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
}
 80086be:	bf00      	nop
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000044 	.word	0x20000044

080086cc <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <_ZnajPKci+0x24>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	4798      	blx	r3
 80086e4:	4603      	mov	r3, r0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000040 	.word	0x20000040

080086f4 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 80086fc:	4b03      	ldr	r3, [pc, #12]	; (800870c <_ZdaPv+0x18>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	4798      	blx	r3
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000048 	.word	0x20000048

08008710 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800871a:	4b04      	ldr	r3, [pc, #16]	; (800872c <_ZdaPvj+0x1c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	4798      	blx	r3
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000048 	.word	0x20000048

08008730 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8008734:	4b12      	ldr	r3, [pc, #72]	; (8008780 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8008736:	4a13      	ldr	r2, [pc, #76]	; (8008784 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8008738:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800873a:	4b13      	ldr	r3, [pc, #76]	; (8008788 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800873c:	4a13      	ldr	r2, [pc, #76]	; (800878c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800873e:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8008740:	4b13      	ldr	r3, [pc, #76]	; (8008790 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8008742:	4a14      	ldr	r2, [pc, #80]	; (8008794 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8008744:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8008746:	4b14      	ldr	r3, [pc, #80]	; (8008798 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8008748:	4a14      	ldr	r2, [pc, #80]	; (800879c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800874a:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800874c:	4b14      	ldr	r3, [pc, #80]	; (80087a0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800874e:	4a15      	ldr	r2, [pc, #84]	; (80087a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8008750:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8008754:	4a15      	ldr	r2, [pc, #84]	; (80087ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8008756:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8008758:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800875a:	4a16      	ldr	r2, [pc, #88]	; (80087b4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800875c:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800875e:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8008760:	4a16      	ldr	r2, [pc, #88]	; (80087bc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8008762:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8008764:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8008766:	4a17      	ldr	r2, [pc, #92]	; (80087c4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8008768:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800876a:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800876c:	4a17      	ldr	r2, [pc, #92]	; (80087cc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800876e:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8008770:	4b17      	ldr	r3, [pc, #92]	; (80087d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8008772:	4a18      	ldr	r2, [pc, #96]	; (80087d4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8008774:	601a      	str	r2, [r3, #0]

#endif
}
 8008776:	bf00      	nop
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	2000002c 	.word	0x2000002c
 8008784:	08008565 	.word	0x08008565
 8008788:	20000030 	.word	0x20000030
 800878c:	08008585 	.word	0x08008585
 8008790:	20000034 	.word	0x20000034
 8008794:	080085a5 	.word	0x080085a5
 8008798:	20000038 	.word	0x20000038
 800879c:	080085c9 	.word	0x080085c9
 80087a0:	2000003c 	.word	0x2000003c
 80087a4:	080085e9 	.word	0x080085e9
 80087a8:	20000040 	.word	0x20000040
 80087ac:	08008609 	.word	0x08008609
 80087b0:	20000044 	.word	0x20000044
 80087b4:	0800862d 	.word	0x0800862d
 80087b8:	20000048 	.word	0x20000048
 80087bc:	08008649 	.word	0x08008649
 80087c0:	20000014 	.word	0x20000014
 80087c4:	08008341 	.word	0x08008341
 80087c8:	2000001c 	.word	0x2000001c
 80087cc:	08008365 	.word	0x08008365
 80087d0:	20000018 	.word	0x20000018
 80087d4:	0800838d 	.word	0x0800838d

080087d8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 80087dc:	4b08      	ldr	r3, [pc, #32]	; (8008800 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 80087e6:	4b06      	ldr	r3, [pc, #24]	; (8008800 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a07      	ldr	r2, [pc, #28]	; (8008808 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d101      	bne.n	80087f4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 80087f4:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	2000002c 	.word	0x2000002c
 8008804:	080083ed 	.word	0x080083ed
 8008808:	080083ad 	.word	0x080083ad

0800880c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8008810:	4b1f      	ldr	r3, [pc, #124]	; (8008890 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b01      	cmp	r3, #1
 8008820:	bfcc      	ite	gt
 8008822:	2301      	movgt	r3, #1
 8008824:	2300      	movle	r3, #0
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d12e      	bne.n	800888a <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800882c:	4b19      	ldr	r3, [pc, #100]	; (8008894 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a19      	ldr	r2, [pc, #100]	; (8008898 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8008832:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8008834:	4b19      	ldr	r3, [pc, #100]	; (800889c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a19      	ldr	r2, [pc, #100]	; (80088a0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800883a:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800883c:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a19      	ldr	r2, [pc, #100]	; (80088a8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8008842:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8008844:	4b19      	ldr	r3, [pc, #100]	; (80088ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a19      	ldr	r2, [pc, #100]	; (80088b0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800884a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800884c:	4b19      	ldr	r3, [pc, #100]	; (80088b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a19      	ldr	r2, [pc, #100]	; (80088b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8008852:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8008854:	4b19      	ldr	r3, [pc, #100]	; (80088bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a19      	ldr	r2, [pc, #100]	; (80088c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800885a:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800885c:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a19      	ldr	r2, [pc, #100]	; (80088c8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8008862:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8008864:	4b19      	ldr	r3, [pc, #100]	; (80088cc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a19      	ldr	r2, [pc, #100]	; (80088d0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800886a:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800886c:	4b19      	ldr	r3, [pc, #100]	; (80088d4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a19      	ldr	r2, [pc, #100]	; (80088d8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8008872:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8008874:	4b19      	ldr	r3, [pc, #100]	; (80088dc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a19      	ldr	r2, [pc, #100]	; (80088e0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800887a:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800887c:	4b19      	ldr	r3, [pc, #100]	; (80088e4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a19      	ldr	r2, [pc, #100]	; (80088e8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8008882:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8008884:	f7ff ff54 	bl	8008730 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8008888:	e000      	b.n	800888c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800888a:	bf00      	nop
#endif
}
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200006e4 	.word	0x200006e4
 8008894:	2000002c 	.word	0x2000002c
 8008898:	2000004c 	.word	0x2000004c
 800889c:	20000030 	.word	0x20000030
 80088a0:	20000050 	.word	0x20000050
 80088a4:	20000034 	.word	0x20000034
 80088a8:	20000054 	.word	0x20000054
 80088ac:	20000038 	.word	0x20000038
 80088b0:	20000058 	.word	0x20000058
 80088b4:	2000003c 	.word	0x2000003c
 80088b8:	2000005c 	.word	0x2000005c
 80088bc:	20000040 	.word	0x20000040
 80088c0:	20000060 	.word	0x20000060
 80088c4:	20000044 	.word	0x20000044
 80088c8:	20000064 	.word	0x20000064
 80088cc:	20000048 	.word	0x20000048
 80088d0:	20000068 	.word	0x20000068
 80088d4:	20000014 	.word	0x20000014
 80088d8:	20000020 	.word	0x20000020
 80088dc:	2000001c 	.word	0x2000001c
 80088e0:	20000028 	.word	0x20000028
 80088e4:	20000018 	.word	0x20000018
 80088e8:	20000024 	.word	0x20000024

080088ec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 80088f0:	4b1f      	ldr	r3, [pc, #124]	; (8008970 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	4b1d      	ldr	r3, [pc, #116]	; (8008970 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfcc      	ite	gt
 8008902:	2301      	movgt	r3, #1
 8008904:	2300      	movle	r3, #0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d12c      	bne.n	8008966 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800890c:	4b19      	ldr	r3, [pc, #100]	; (8008974 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a19      	ldr	r2, [pc, #100]	; (8008978 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8008912:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8008914:	4b19      	ldr	r3, [pc, #100]	; (800897c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a19      	ldr	r2, [pc, #100]	; (8008980 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800891a:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800891c:	4b19      	ldr	r3, [pc, #100]	; (8008984 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a19      	ldr	r2, [pc, #100]	; (8008988 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8008922:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8008924:	4b19      	ldr	r3, [pc, #100]	; (800898c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a19      	ldr	r2, [pc, #100]	; (8008990 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800892a:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800892c:	4b19      	ldr	r3, [pc, #100]	; (8008994 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a19      	ldr	r2, [pc, #100]	; (8008998 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8008932:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8008934:	4b19      	ldr	r3, [pc, #100]	; (800899c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a19      	ldr	r2, [pc, #100]	; (80089a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800893a:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800893c:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a19      	ldr	r2, [pc, #100]	; (80089a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8008942:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8008944:	4b19      	ldr	r3, [pc, #100]	; (80089ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800894a:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800894c:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a19      	ldr	r2, [pc, #100]	; (80089b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8008952:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8008954:	4b19      	ldr	r3, [pc, #100]	; (80089bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a19      	ldr	r2, [pc, #100]	; (80089c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800895a:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800895c:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a19      	ldr	r2, [pc, #100]	; (80089c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	e000      	b.n	8008968 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8008966:	bf00      	nop
#endif
}
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	200006e4 	.word	0x200006e4
 8008974:	2000004c 	.word	0x2000004c
 8008978:	2000002c 	.word	0x2000002c
 800897c:	20000050 	.word	0x20000050
 8008980:	20000030 	.word	0x20000030
 8008984:	20000054 	.word	0x20000054
 8008988:	20000034 	.word	0x20000034
 800898c:	20000058 	.word	0x20000058
 8008990:	20000038 	.word	0x20000038
 8008994:	2000005c 	.word	0x2000005c
 8008998:	2000003c 	.word	0x2000003c
 800899c:	20000060 	.word	0x20000060
 80089a0:	20000040 	.word	0x20000040
 80089a4:	20000064 	.word	0x20000064
 80089a8:	20000044 	.word	0x20000044
 80089ac:	20000068 	.word	0x20000068
 80089b0:	20000048 	.word	0x20000048
 80089b4:	20000020 	.word	0x20000020
 80089b8:	20000014 	.word	0x20000014
 80089bc:	20000028 	.word	0x20000028
 80089c0:	2000001c 	.word	0x2000001c
 80089c4:	20000024 	.word	0x20000024
 80089c8:	20000018 	.word	0x20000018

080089cc <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
    {
 80089d4:	4a05      	ldr	r2, [pc, #20]	; (80089ec <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff fc15 	bl	800820c <_ZN17MemoryLeakFailureD1Ev>
    }
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	080256a4 	.word	0x080256a4

080089f0 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
    }
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff ffe7 	bl	80089cc <_ZN25MemoryLeakWarningReporterD1Ev>
 80089fe:	2104      	movs	r1, #4
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff fe53 	bl	80086ac <_ZdlPvj>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <_ZN14TestTerminatorC1Ev+0x1c>)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	08026050 	.word	0x08026050

08008a30 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff ffe8 	bl	8008a10 <_ZN14TestTerminatorC1Ev>
 8008a40:	4a03      	ldr	r2, [pc, #12]	; (8008a50 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	08026028 	.word	0x08026028

08008a54 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8008a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a56:	b099      	sub	sp, #100	; 0x64
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8008a5e:	f009 fdb7 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8008a62:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8008a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	339c      	adds	r3, #156	; 0x9c
 8008a6a:	681c      	ldr	r4, [r3, #0]
 8008a6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a72:	4618      	mov	r0, r3
 8008a74:	f008 fbc4 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 8008a78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f002 fd4f 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8008a82:	4605      	mov	r5, r0
 8008a84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008a86:	f008 fc9b 	bl	80113c0 <_ZNK10UtestShell13getLineNumberEv>
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f002 f9b9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8008a98:	f107 000c 	add.w	r0, r7, #12
 8008a9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	4633      	mov	r3, r6
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008aa8:	f004 fd14 	bl	800d4d4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8008aac:	2300      	movs	r3, #0
 8008aae:	653b      	str	r3, [r7, #80]	; 0x50
 8008ab0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff ffbb 	bl	8008a30 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8008aba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008abe:	f107 030c 	add.w	r3, r7, #12
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ac6:	47a0      	blx	r4
 8008ac8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008acc:	4618      	mov	r0, r3
 8008ace:	f009 fe79 	bl	80127c4 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8008ad2:	f107 030c 	add.w	r3, r7, #12
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f9ac 	bl	8008e34 <_ZN11FailFailureD1Ev>
 8008adc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f002 fd4a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8008ae6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008aea:	4618      	mov	r0, r3
 8008aec:	f002 fd45 	bl	800b57a <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8008af0:	bf00      	nop
 8008af2:	375c      	adds	r7, #92	; 0x5c
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008af8 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	4a04      	ldr	r2, [pc, #16]	; (8008b14 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	080256b8 	.word	0x080256b8

08008b18 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff ffe8 	bl	8008af8 <_ZN17MemoryLeakFailureC1Ev>
 8008b28:	4a03      	ldr	r2, [pc, #12]	; (8008b38 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4618      	mov	r0, r3
 8008b32:	3708      	adds	r7, #8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	080256a4 	.word	0x080256a4

08008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8008b3c:	b598      	push	{r3, r4, r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8008b40:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11b      	bne.n	8008b80 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8008b48:	f7ff fe60 	bl	800880c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8008b4c:	2004      	movs	r0, #4
 8008b4e:	f7ff fd89 	bl	8008664 <_Znwj>
 8008b52:	4603      	mov	r3, r0
 8008b54:	461c      	mov	r4, r3
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7ff ffde 	bl	8008b18 <_ZN25MemoryLeakWarningReporterC1Ev>
 8008b5c:	4b0b      	ldr	r3, [pc, #44]	; (8008b8c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8008b5e:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8008b60:	f241 1050 	movw	r0, #4432	; 0x1150
 8008b64:	f7ff fd7e 	bl	8008664 <_Znwj>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	461c      	mov	r4, r3
 8008b6c:	4b07      	ldr	r3, [pc, #28]	; (8008b8c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4619      	mov	r1, r3
 8008b72:	4620      	mov	r0, r4
 8008b74:	f00c fa3e 	bl	8014ff4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8008b78:	4b03      	ldr	r3, [pc, #12]	; (8008b88 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8008b7a:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8008b7c:	f7ff feb6 	bl	80088ec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8008b80:	4b01      	ldr	r3, [pc, #4]	; (8008b88 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	bd98      	pop	{r3, r4, r7, pc}
 8008b88:	200006ec 	.word	0x200006ec
 8008b8c:	200006e8 	.word	0x200006e8

08008b90 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	765a      	strb	r2, [r3, #25]
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8008bb4:	f7ff fdbc 	bl	8008730 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8008bb8:	4b0b      	ldr	r3, [pc, #44]	; (8008be8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	3204      	adds	r2, #4
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	4790      	blx	r2
    delete globalReporter;
 8008bca:	4b08      	ldr	r3, [pc, #32]	; (8008bec <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d004      	beq.n	8008bdc <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	3204      	adds	r2, #4
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	4790      	blx	r2
    globalDetector = NULLPTR;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
}
 8008be2:	bf00      	nop
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	200006ec 	.word	0x200006ec
 8008bec:	200006e8 	.word	0x200006e8

08008bf0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68b9      	ldr	r1, [r7, #8]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f006 fdfd 	bl	800f800 <_ZN10TestPluginC1ERK12SimpleString>
 8008c06:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	761a      	strb	r2, [r3, #24]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	765a      	strb	r2, [r3, #25]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d102      	bne.n	8008c2c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8008c26:	4a0d      	ldr	r2, [pc, #52]	; (8008c5c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	615a      	str	r2, [r3, #20]
 8008c38:	e004      	b.n	8008c44 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8008c3a:	f7ff ff7f 	bl	8008b3c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f00c fa69 	bl	8015120 <_ZN18MemoryLeakDetector6enableEv>
}
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	080256cc 	.word	0x080256cc
 8008c5c:	200006f0 	.word	0x200006f0

08008c60 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	7e5b      	ldrb	r3, [r3, #25]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8008c76:	f7ff fd5b 	bl	8008730 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8008c7a:	f7ff ff99 	bl	8008bb0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f006 fdf9 	bl	800f878 <_ZN10TestPluginD1Ev>
    }
}
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	080256cc 	.word	0x080256cc

08008c94 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
}
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ffdf 	bl	8008c60 <_ZN23MemoryLeakWarningPluginD1Ev>
 8008ca2:	2124      	movs	r1, #36	; 0x24
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff fd01 	bl	80086ac <_ZdlPvj>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f00c fa0e 	bl	80150e6 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fd ffb0 	bl	8006c30 <_ZNK10TestResult15getFailureCountEv>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	621a      	str	r2, [r3, #32]
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8008ce0:	b590      	push	{r4, r7, lr}
 8008ce2:	b097      	sub	sp, #92	; 0x5c
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f00c fa08 	bl	8015106 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	2103      	movs	r1, #3
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f00c fda5 	bl	801584c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8008d02:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	7e1b      	ldrb	r3, [r3, #24]
 8008d08:	f083 0301 	eor.w	r3, r3, #1
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00e      	beq.n	8008d30 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d009      	beq.n	8008d30 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a1c      	ldr	r4, [r3, #32]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fd ff85 	bl	8006c30 <_ZNK10TestResult15getFailureCountEv>
 8008d26:	4603      	mov	r3, r0
 8008d28:	429c      	cmp	r4, r3
 8008d2a:	d101      	bne.n	8008d30 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8008d30:	2300      	movs	r3, #0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d04c      	beq.n	8008dd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8008d36:	f7ff fd4f 	bl	80087d8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d028      	beq.n	8008d92 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	2103      	movs	r1, #3
 8008d46:	4618      	mov	r0, r3
 8008d48:	f00c fd45 	bl	80157d6 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d52:	4611      	mov	r1, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f002 f858 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8008d5a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008d5e:	f107 0310 	add.w	r3, r7, #16
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f003 feaf 	bl	800cac8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8008d6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f002 fc03 	bl	800b57a <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3334      	adds	r3, #52	; 0x34
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f107 0210 	add.w	r2, r7, #16
 8008d80:	4611      	mov	r1, r2
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8008d86:	f107 0310 	add.w	r3, r7, #16
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f003 ff5c 	bl	800cc48 <_ZN11TestFailureD1Ev>
 8008d90:	e01e      	b.n	8008dd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	69db      	ldr	r3, [r3, #28]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01a      	beq.n	8008dd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3338      	adds	r3, #56	; 0x38
 8008da0:	681c      	ldr	r4, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008dac:	4910      	ldr	r1, [pc, #64]	; (8008df0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8008dae:	4618      	mov	r0, r3
 8008db0:	f003 f8ea 	bl	800bf88 <_Z16StringFromFormatPKcz>
 8008db4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008db8:	4618      	mov	r0, r3
 8008dba:	f002 fbb1 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	47a0      	blx	r4
 8008dc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f002 fbd5 	bl	800b57a <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f00c fd13 	bl	8015800 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	61da      	str	r2, [r3, #28]
}
 8008de6:	bf00      	nop
 8008de8:	375c      	adds	r7, #92	; 0x5c
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd90      	pop	{r4, r7, pc}
 8008dee:	bf00      	nop
 8008df0:	0802213c 	.word	0x0802213c

08008df4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	2102      	movs	r1, #2
 8008e04:	4618      	mov	r0, r3
 8008e06:	f00c fd21 	bl	801584c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8008e0a:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d007      	beq.n	8008e24 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	2102      	movs	r1, #2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f00c fcdb 	bl	80157d6 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8008e20:	4603      	mov	r3, r0
 8008e22:	e000      	b.n	8008e26 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	0802217c 	.word	0x0802217c

08008e34 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	4a05      	ldr	r2, [pc, #20]	; (8008e54 <_ZN11FailFailureD1Ev+0x20>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f003 feff 	bl	800cc48 <_ZN11TestFailureD1Ev>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	08025714 	.word	0x08025714

08008e58 <_ZN11FailFailureD0Ev>:
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff ffe7 	bl	8008e34 <_ZN11FailFailureD1Ev>
 8008e66:	2134      	movs	r1, #52	; 0x34
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff fc1f 	bl	80086ac <_ZdlPvj>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	4a06      	ldr	r2, [pc, #24]	; (8008ecc <_ZN19MockFailureReporterC1Ev+0x24>)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	711a      	strb	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	080268f0 	.word	0x080268f0

08008ed0 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	4a04      	ldr	r2, [pc, #16]	; (8008eec <_ZN19MockFailureReporterD1Ev+0x1c>)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	080268f0 	.word	0x080268f0

08008ef0 <_ZN19MockFailureReporterD0Ev>:
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff ffe9 	bl	8008ed0 <_ZN19MockFailureReporterD1Ev>
 8008efe:	2108      	movs	r1, #8
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff fbd3 	bl	80086ac <_ZdlPvj>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	4a05      	ldr	r2, [pc, #20]	; (8008f30 <_ZN11MockFailureD1Ev+0x20>)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f003 fe91 	bl	800cc48 <_ZN11TestFailureD1Ev>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	08025868 	.word	0x08025868

08008f34 <_ZN11MockFailureD0Ev>:
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff ffe7 	bl	8008f10 <_ZN11MockFailureD1Ev>
 8008f42:	2134      	movs	r1, #52	; 0x34
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fbb1 	bl	80086ac <_ZdlPvj>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 8008f54:	b590      	push	{r4, r7, lr}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
 8008f5e:	4a16      	ldr	r2, [pc, #88]	; (8008fb8 <_ZN14MockNamedValueC1ERKS_+0x64>)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	1d1a      	adds	r2, r3, #4
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	f001 ff9f 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f103 020c 	add.w	r2, r3, #12
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	330c      	adds	r3, #12
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4610      	mov	r0, r2
 8008f82:	f001 ff96 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	f102 0418 	add.w	r4, r2, #24
 8008f8e:	3318      	adds	r3, #24
 8008f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	629a      	str	r2, [r3, #40]	; 0x28
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd90      	pop	{r4, r7, pc}
 8008fb8:	08026930 	.word	0x08026930

08008fbc <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 8008fc6:	f107 030c 	add.w	r3, r7, #12
 8008fca:	4916      	ldr	r1, [pc, #88]	; (8009024 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 ff1c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8008fd2:	f107 030c 	add.w	r3, r7, #12
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f002 fb1f 	bl	800b61c <_ZneRK12SimpleStringS1_>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	4810      	ldr	r0, [pc, #64]	; (8009028 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008fe8:	f000 ff70 	bl	8009ecc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 8008fec:	4603      	mov	r3, r0
 8008fee:	e000      	b.n	8008ff2 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8008ff0:	4b0d      	ldr	r3, [pc, #52]	; (8009028 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	f107 030c 	add.w	r3, r7, #12
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f002 fabe 	bl	800b57a <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	33a8      	adds	r3, #168	; 0xa8
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6978      	ldr	r0, [r7, #20]
 800900a:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	33ac      	adds	r3, #172	; 0xac
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6978      	ldr	r0, [r7, #20]
 8009016:	4798      	blx	r3
    return mock_support;
 8009018:	697b      	ldr	r3, [r7, #20]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	08022180 	.word	0x08022180
 8009028:	200006f4 	.word	0x200006f4

0800902c <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 8009036:	4a21      	ldr	r2, [pc, #132]	; (80090bc <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	605a      	str	r2, [r3, #4]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	609a      	str	r2, [r3, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	731a      	strb	r2, [r3, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f103 0218 	add.w	r2, r3, #24
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	615a      	str	r2, [r3, #20]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3318      	adds	r3, #24
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff ff23 	bl	8008ea8 <_ZN19MockFailureReporterC1Ev>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3320      	adds	r3, #32
 8009066:	4618      	mov	r0, r3
 8009068:	f010 fefc 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	62da      	str	r2, [r3, #44]	; 0x2c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3330      	adds	r3, #48	; 0x30
 8009086:	4618      	mov	r0, r3
 8009088:	f014 fbe8 	bl	801d85c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3338      	adds	r3, #56	; 0x38
 8009090:	4618      	mov	r0, r3
 8009092:	f014 faf2 	bl	801d67a <_ZN18MockNamedValueListC1Ev>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	333c      	adds	r3, #60	; 0x3c
 800909a:	6839      	ldr	r1, [r7, #0]
 800909c:	4618      	mov	r0, r3
 800909e:	f001 ff08 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 80090aa:	2100      	movs	r1, #0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f894 	bl	80091da <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	08025740 	.word	0x08025740

080090c0 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	4a0d      	ldr	r2, [pc, #52]	; (8009100 <_ZN11MockSupportD1Ev+0x40>)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	333c      	adds	r3, #60	; 0x3c
 80090d2:	4618      	mov	r0, r3
 80090d4:	f002 fa51 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	3330      	adds	r3, #48	; 0x30
 80090dc:	4618      	mov	r0, r3
 80090de:	f014 fbd1 	bl	801d884 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3320      	adds	r3, #32
 80090e6:	4618      	mov	r0, r3
 80090e8:	f010 fed0 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3318      	adds	r3, #24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff feed 	bl	8008ed0 <_ZN19MockFailureReporterD1Ev>
{
}
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	08025740 	.word	0x08025740

08009104 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
}
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff ffd7 	bl	80090c0 <_ZN11MockSupportD1Ev>
 8009112:	2148      	movs	r1, #72	; 0x48
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7ff fac9 	bl	80086ac <_ZdlPvj>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691a      	ldr	r2, [r3, #16]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3310      	adds	r3, #16
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	78f9      	ldrb	r1, [r7, #3]
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3318      	adds	r3, #24
 8009160:	e000      	b.n	8009164 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00a      	beq.n	8009186 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	33c8      	adds	r3, #200	; 0xc8
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6952      	ldr	r2, [r2, #20]
 8009182:	4611      	mov	r1, r2
 8009184:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3338      	adds	r3, #56	; 0x38
 800918a:	4618      	mov	r0, r3
 800918c:	f014 fb0b 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01c      	beq.n	80091d2 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 8009198:	68f9      	ldr	r1, [r7, #12]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 ff26 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bf14      	ite	ne
 80091a6:	2301      	movne	r3, #1
 80091a8:	2300      	moveq	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 80091b0:	68f9      	ldr	r1, [r7, #12]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 ff1a 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80091b8:	4603      	mov	r3, r0
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	32a4      	adds	r2, #164	; 0xa4
 80091be:	6812      	ldr	r2, [r2, #0]
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	6949      	ldr	r1, [r1, #20]
 80091c4:	4618      	mov	r0, r3
 80091c6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f014 f9f5 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	e7df      	b.n	8009192 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 80091da:	b480      	push	{r7}
 80091dc:	b083      	sub	sp, #12
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	e000      	b.n	80091f2 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6113      	str	r3, [r2, #16]
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3330      	adds	r3, #48	; 0x30
 800920e:	4618      	mov	r0, r3
 8009210:	f012 fb10 	bl	801b834 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800921c:	b590      	push	{r4, r7, lr}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3330      	adds	r3, #48	; 0x30
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	4618      	mov	r0, r3
 8009232:	f014 fb75 	bl	801d920 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3338      	adds	r3, #56	; 0x38
 800923a:	4618      	mov	r0, r3
 800923c:	f014 fab3 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009240:	6178      	str	r0, [r7, #20]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01c      	beq.n	8009282 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 8009248:	6979      	ldr	r1, [r7, #20]
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 fece 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	bf14      	ite	ne
 8009256:	2301      	movne	r3, #1
 8009258:	2300      	moveq	r3, #0
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 8009260:	6979      	ldr	r1, [r7, #20]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fec2 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009268:	4603      	mov	r3, r0
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	32b0      	adds	r2, #176	; 0xb0
 800926e:	6814      	ldr	r4, [r2, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	4618      	mov	r0, r3
 8009276:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009278:	6978      	ldr	r0, [r7, #20]
 800927a:	f014 f99d 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 800927e:	6178      	str	r0, [r7, #20]
 8009280:	e7df      	b.n	8009242 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 8009282:	bf00      	nop
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	bd90      	pop	{r4, r7, pc}

0800928a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800928a:	b590      	push	{r4, r7, lr}
 800928c:	b087      	sub	sp, #28
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3330      	adds	r3, #48	; 0x30
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	68b9      	ldr	r1, [r7, #8]
 800929e:	4618      	mov	r0, r3
 80092a0:	f014 fb5a 	bl	801d958 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3338      	adds	r3, #56	; 0x38
 80092a8:	4618      	mov	r0, r3
 80092aa:	f014 fa7c 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 80092ae:	6178      	str	r0, [r7, #20]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01c      	beq.n	80092f0 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 80092b6:	6979      	ldr	r1, [r7, #20]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 fe97 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bf14      	ite	ne
 80092c4:	2301      	movne	r3, #1
 80092c6:	2300      	moveq	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 80092ce:	6979      	ldr	r1, [r7, #20]
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 fe8b 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80092d6:	4603      	mov	r3, r0
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	32b4      	adds	r2, #180	; 0xb4
 80092dc:	6814      	ldr	r4, [r2, #0]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	4618      	mov	r0, r3
 80092e4:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80092e6:	6978      	ldr	r0, [r7, #20]
 80092e8:	f014 f966 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80092ec:	6178      	str	r0, [r7, #20]
 80092ee:	e7df      	b.n	80092b0 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 80092f0:	bf00      	nop
 80092f2:	371c      	adds	r7, #28
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd90      	pop	{r4, r7, pc}

080092f8 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3330      	adds	r3, #48	; 0x30
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	4618      	mov	r0, r3
 800930a:	f014 fb91 	bl	801da30 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3338      	adds	r3, #56	; 0x38
 8009312:	4618      	mov	r0, r3
 8009314:	f014 fa47 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01b      	beq.n	8009358 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8009320:	68f9      	ldr	r1, [r7, #12]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fe62 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	bf14      	ite	ne
 800932e:	2301      	movne	r3, #1
 8009330:	2300      	moveq	r3, #0
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 8009338:	68f9      	ldr	r1, [r7, #12]
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fe56 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009340:	4603      	mov	r3, r0
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	32b8      	adds	r2, #184	; 0xb8
 8009346:	6812      	ldr	r2, [r2, #0]
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f014 f932 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	e7e0      	b.n	800931a <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 8009358:	bf00      	nop
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3330      	adds	r3, #48	; 0x30
 800936c:	4618      	mov	r0, r3
 800936e:	f014 fab8 	bl	801d8e2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3338      	adds	r3, #56	; 0x38
 8009376:	4618      	mov	r0, r3
 8009378:	f014 fa15 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d01a      	beq.n	80093ba <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 8009384:	68f9      	ldr	r1, [r7, #12]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fe30 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	bf14      	ite	ne
 8009392:	2301      	movne	r3, #1
 8009394:	2300      	moveq	r3, #0
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d009      	beq.n	80093b0 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800939c:	68f9      	ldr	r1, [r7, #12]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fe24 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80093a4:	4603      	mov	r3, r0
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	32bc      	adds	r2, #188	; 0xbc
 80093aa:	6812      	ldr	r2, [r2, #0]
 80093ac:	4618      	mov	r0, r3
 80093ae:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f014 f901 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	e7e1      	b.n	800937e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d004      	beq.n	80093dc <_ZN11MockSupport5clearEv+0x1a>
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	3204      	adds	r2, #4
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	4618      	mov	r0, r3
 80093da:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 80093ea:	f00e fe0d 	bl	8018008 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3320      	adds	r3, #32
 80093f2:	4618      	mov	r0, r3
 80093f4:	f011 f937 	bl	801a666 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3338      	adds	r3, #56	; 0x38
 800941e:	4618      	mov	r0, r3
 8009420:	f014 f9c1 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01a      	beq.n	8009462 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800942c:	68f9      	ldr	r1, [r7, #12]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fddc 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009434:	60b8      	str	r0, [r7, #8]
        if (support) {
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00d      	beq.n	8009458 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	339c      	adds	r3, #156	; 0x9c
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68b8      	ldr	r0, [r7, #8]
 8009446:	4798      	blx	r3
            delete support;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d004      	beq.n	8009458 <_ZN11MockSupport5clearEv+0x96>
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	3204      	adds	r2, #4
 8009452:	6812      	ldr	r2, [r2, #0]
 8009454:	4618      	mov	r0, r3
 8009456:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f014 f8ad 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	e7e1      	b.n	8009426 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3338      	adds	r3, #56	; 0x38
 8009466:	4618      	mov	r0, r3
 8009468:	f014 f915 	bl	801d696 <_ZN18MockNamedValueList5clearEv>
}
 800946c:	bf00      	nop
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	731a      	strb	r2, [r3, #12]
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b089      	sub	sp, #36	; 0x24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	333c      	adds	r3, #60	; 0x3c
 80094a0:	4618      	mov	r0, r3
 80094a2:	f002 f859 	bl	800b558 <_ZNK12SimpleString7isEmptyEv>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d004      	beq.n	80094b6 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 80094ac:	6879      	ldr	r1, [r7, #4]
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f001 fcff 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 80094b4:	e021      	b.n	80094fa <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80094bc:	f107 0318 	add.w	r3, r7, #24
 80094c0:	4910      	ldr	r1, [pc, #64]	; (8009504 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fca1 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80094c8:	f107 0310 	add.w	r3, r7, #16
 80094cc:	f107 0218 	add.w	r2, r7, #24
 80094d0:	4621      	mov	r1, r4
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 f8b3 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f107 0110 	add.w	r1, r7, #16
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f002 f8ac 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 80094e6:	f107 0310 	add.w	r3, r7, #16
 80094ea:	4618      	mov	r0, r3
 80094ec:	f002 f845 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80094f0:	f107 0318 	add.w	r3, r7, #24
 80094f4:	4618      	mov	r0, r3
 80094f6:	f002 f840 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	3724      	adds	r7, #36	; 0x24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd90      	pop	{r4, r7, pc}
 8009502:	bf00      	nop
 8009504:	08022184 	.word	0x08022184

08009508 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3314      	adds	r3, #20
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	2101      	movs	r1, #1
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
 8009522:	4603      	mov	r3, r0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3314      	adds	r3, #20
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	4798      	blx	r3
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8009550:	b590      	push	{r4, r7, lr}
 8009552:	b089      	sub	sp, #36	; 0x24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009562:	f083 0301 	eor.w	r3, r3, #1
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800956c:	f010 fbf6 	bl	8019d5c <_ZN23MockIgnoredExpectedCall8instanceEv>
 8009570:	4603      	mov	r3, r0
 8009572:	e041      	b.n	80095f8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 fb1b 	bl	8009bb0 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800957a:	22a5      	movs	r2, #165	; 0xa5
 800957c:	4920      	ldr	r1, [pc, #128]	; (8009600 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800957e:	2070      	movs	r0, #112	; 0x70
 8009580:	f7ff f880 	bl	8008684 <_ZnwjPKci>
 8009584:	4604      	mov	r4, r0
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	4620      	mov	r0, r4
 800958a:	f00f f8f3 	bl	8018774 <_ZN23MockCheckedExpectedCallC1Ej>
 800958e:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3308      	adds	r3, #8
 8009596:	681c      	ldr	r4, [r3, #0]
 8009598:	f107 0314 	add.w	r3, r7, #20
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff ff75 	bl	8009490 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 80095a6:	f107 0314 	add.w	r3, r7, #20
 80095aa:	4619      	mov	r1, r3
 80095ac:	69f8      	ldr	r0, [r7, #28]
 80095ae:	47a0      	blx	r4
 80095b0:	f107 0314 	add.w	r3, r7, #20
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 ffe0 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	7b1b      	ldrb	r3, [r3, #12]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d013      	beq.n	80095ea <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3310      	adds	r3, #16
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	6892      	ldr	r2, [r2, #8]
 80095ce:	1c50      	adds	r0, r2, #1
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	6891      	ldr	r1, [r2, #8]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	440a      	add	r2, r1
 80095d8:	4601      	mov	r1, r0
 80095da:	69f8      	ldr	r0, [r7, #28]
 80095dc:	4798      	blx	r3
        expectedCallOrder_ += amount;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	441a      	add	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3320      	adds	r3, #32
 80095ee:	69f9      	ldr	r1, [r7, #28]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f010 fd89 	bl	801a108 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 80095f6:	69fb      	ldr	r3, [r7, #28]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3724      	adds	r7, #36	; 0x24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd90      	pop	{r4, r7, pc}
 8009600:	08022188 	.word	0x08022188

08009604 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 8009604:	b5b0      	push	{r4, r5, r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685d      	ldr	r5, [r3, #4]
 800961a:	22b1      	movs	r2, #177	; 0xb1
 800961c:	490a      	ldr	r1, [pc, #40]	; (8009648 <_ZN11MockSupport16createActualCallEv+0x44>)
 800961e:	202c      	movs	r0, #44	; 0x2c
 8009620:	f7ff f830 	bl	8008684 <_ZnwjPKci>
 8009624:	4604      	mov	r4, r0
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	3320      	adds	r3, #32
 800962e:	4629      	mov	r1, r5
 8009630:	4620      	mov	r0, r4
 8009632:	f00c fbdb 	bl	8015dec <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bdb0      	pop	{r4, r5, r7, pc}
 8009646:	bf00      	nop
 8009648:	08022188 	.word	0x08022188

0800964c <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00d      	beq.n	800967c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3320      	adds	r3, #32
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	f010 fd2a 	bl	801a0c0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800966c:	4603      	mov	r3, r0
 800966e:	f083 0301 	eor.w	r3, r3, #1
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8009678:	2301      	movs	r3, #1
 800967a:	e000      	b.n	800967e <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 8009686:	b590      	push	{r4, r7, lr}
 8009688:	b087      	sub	sp, #28
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	4618      	mov	r0, r3
 800969a:	f7ff fef9 	bl	8009490 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d014      	beq.n	80096d0 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	33c4      	adds	r3, #196	; 0xc4
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4610      	mov	r0, r2
 80096b6:	4798      	blx	r3
        delete lastActualFunctionCall_;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d004      	beq.n	80096ca <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	3204      	adds	r2, #4
 80096c4:	6812      	ldr	r2, [r2, #0]
 80096c6:	4618      	mov	r0, r3
 80096c8:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80096d6:	f083 0301 	eor.w	r3, r3, #1
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 80096e0:	f00e fcbe 	bl	8018060 <_ZN21MockIgnoredActualCall8instanceEv>
 80096e4:	4603      	mov	r3, r0
 80096e6:	461c      	mov	r4, r3
 80096e8:	e02f      	b.n	800974a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 80096f4:	f00e fc6e 	bl	8017fd4 <_ZN19MockActualCallTrace8instanceEv>
 80096f8:	4603      	mov	r3, r0
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	3208      	adds	r2, #8
 80096fe:	6812      	ldr	r2, [r2, #0]
 8009700:	f107 010c 	add.w	r1, r7, #12
 8009704:	4618      	mov	r0, r3
 8009706:	4790      	blx	r2
 8009708:	4604      	mov	r4, r0
 800970a:	e01e      	b.n	800974a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800970c:	f107 030c 	add.w	r3, r7, #12
 8009710:	4619      	mov	r1, r3
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7ff ff9a 	bl	800964c <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800971e:	f00e fc9f 	bl	8018060 <_ZN21MockIgnoredActualCall8instanceEv>
 8009722:	4603      	mov	r3, r0
 8009724:	461c      	mov	r4, r3
 8009726:	e010      	b.n	800974a <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	33c0      	adds	r3, #192	; 0xc0
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	4798      	blx	r3
 8009734:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f107 020c 	add.w	r2, r7, #12
 8009742:	4611      	mov	r1, r2
 8009744:	6978      	ldr	r0, [r7, #20]
 8009746:	4798      	blx	r3
    return *call;
 8009748:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	4618      	mov	r0, r3
 8009750:	f001 ff13 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8009754:	4623      	mov	r3, r4
}
 8009756:	4618      	mov	r0, r3
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	bd90      	pop	{r4, r7, pc}

0800975e <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3338      	adds	r3, #56	; 0x38
 8009772:	4618      	mov	r0, r3
 8009774:	f014 f817 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d01a      	beq.n	80097b6 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 8009780:	68f9      	ldr	r1, [r7, #12]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fc32 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	bf14      	ite	ne
 800978e:	2301      	movne	r3, #1
 8009790:	2300      	moveq	r3, #0
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d009      	beq.n	80097ac <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 8009798:	68f9      	ldr	r1, [r7, #12]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fc26 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097a0:	4603      	mov	r3, r0
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	3290      	adds	r2, #144	; 0x90
 80097a6:	6812      	ldr	r2, [r2, #0]
 80097a8:	4618      	mov	r0, r3
 80097aa:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f013 ff03 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	e7e1      	b.n	800977a <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3338      	adds	r3, #56	; 0x38
 80097d2:	4618      	mov	r0, r3
 80097d4:	f013 ffe7 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01a      	beq.n	8009816 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 80097e0:	68f9      	ldr	r1, [r7, #12]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fc02 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bf14      	ite	ne
 80097ee:	2301      	movne	r3, #1
 80097f0:	2300      	moveq	r3, #0
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d009      	beq.n	800980c <_ZN11MockSupport7disableEv+0x4e>
 80097f8:	68f9      	ldr	r1, [r7, #12]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fbf6 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009800:	4603      	mov	r3, r0
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	3284      	adds	r2, #132	; 0x84
 8009806:	6812      	ldr	r2, [r2, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f013 fed3 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	e7e1      	b.n	80097da <_ZN11MockSupport7disableEv+0x1c>
}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	3338      	adds	r3, #56	; 0x38
 8009832:	4618      	mov	r0, r3
 8009834:	f013 ffb7 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01a      	beq.n	8009876 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 8009840:	68f9      	ldr	r1, [r7, #12]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fbd2 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	bf14      	ite	ne
 800984e:	2301      	movne	r3, #1
 8009850:	2300      	moveq	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b00      	cmp	r3, #0
 8009856:	d009      	beq.n	800986c <_ZN11MockSupport6enableEv+0x4e>
 8009858:	68f9      	ldr	r1, [r7, #12]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fbc6 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009860:	4603      	mov	r3, r0
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	3288      	adds	r2, #136	; 0x88
 8009866:	6812      	ldr	r2, [r2, #0]
 8009868:	4618      	mov	r0, r3
 800986a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f013 fea3 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	e7e1      	b.n	800983a <_ZN11MockSupport6enableEv+0x1c>
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	460b      	mov	r3, r1
 8009888:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	78fa      	ldrb	r2, [r7, #3]
 800988e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3338      	adds	r3, #56	; 0x38
 8009896:	4618      	mov	r0, r3
 8009898:	f013 ff85 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 800989c:	60f8      	str	r0, [r7, #12]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d01b      	beq.n	80098dc <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 80098a4:	68f9      	ldr	r1, [r7, #12]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fba0 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bf14      	ite	ne
 80098b2:	2301      	movne	r3, #1
 80098b4:	2300      	moveq	r3, #0
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <_ZN11MockSupport7tracingEb+0x54>
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fb94 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80098c4:	4603      	mov	r3, r0
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	328c      	adds	r2, #140	; 0x8c
 80098ca:	6812      	ldr	r2, [r2, #0]
 80098cc:	78f9      	ldrb	r1, [r7, #3]
 80098ce:	4618      	mov	r0, r3
 80098d0:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f013 fe70 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	e7e0      	b.n	800989e <_ZN11MockSupport7tracingEb+0x20>
}
 80098dc:	bf00      	nop
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3320      	adds	r3, #32
 80098f0:	4618      	mov	r0, r3
 80098f2:	f010 fbc1 	bl	801a078 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 80098f6:	4603      	mov	r3, r0
 80098f8:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3338      	adds	r3, #56	; 0x38
 80098fe:	4618      	mov	r0, r3
 8009900:	f013 ff51 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009904:	60b8      	str	r0, [r7, #8]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01f      	beq.n	800994c <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800990c:	68b9      	ldr	r1, [r7, #8]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fb6c 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	bf14      	ite	ne
 800991a:	2301      	movne	r3, #1
 800991c:	2300      	moveq	r3, #0
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00e      	beq.n	8009942 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 8009924:	68b9      	ldr	r1, [r7, #8]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fb60 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800992c:	4603      	mov	r3, r0
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	3298      	adds	r2, #152	; 0x98
 8009932:	6812      	ldr	r2, [r2, #0]
 8009934:	4618      	mov	r0, r3
 8009936:	4790      	blx	r2
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4413      	add	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009942:	68b8      	ldr	r0, [r7, #8]
 8009944:	f013 fe38 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8009948:	60b8      	str	r0, [r7, #8]
 800994a:	e7dc      	b.n	8009906 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	bf14      	ite	ne
 8009952:	2301      	movne	r3, #1
 8009954:	2300      	moveq	r3, #0
 8009956:	b2db      	uxtb	r3, r3
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d010      	beq.n	8009992 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	33bc      	adds	r3, #188	; 0xbc
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4610      	mov	r0, r2
 8009980:	4798      	blx	r3
 8009982:	4603      	mov	r3, r0
 8009984:	f083 0301 	eor.w	r3, r3, #1
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800998e:	2301      	movs	r3, #1
 8009990:	e000      	b.n	8009994 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 8009992:	2300      	movs	r3, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 8009998:	2300      	movs	r3, #0
 800999a:	e02a      	b.n	80099f2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3338      	adds	r3, #56	; 0x38
 80099a0:	4618      	mov	r0, r3
 80099a2:	f013 ff00 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d020      	beq.n	80099f0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 80099ae:	68f9      	ldr	r1, [r7, #12]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fb1b 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00f      	beq.n	80099dc <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 80099bc:	68f9      	ldr	r1, [r7, #12]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fb14 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80099c4:	4603      	mov	r3, r0
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff ffca 	bl	8009960 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f083 0301 	eor.w	r3, r3, #1
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 80099d8:	2301      	movs	r3, #1
 80099da:	e000      	b.n	80099de <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 80099dc:	2300      	movs	r3, #0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 80099e2:	2300      	movs	r3, #0
 80099e4:	e005      	b.n	80099f2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f013 fde6 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	e7db      	b.n	80099a8 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 80099f0:	2301      	movs	r3, #1
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b092      	sub	sp, #72	; 0x48
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8009a02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a06:	4618      	mov	r0, r3
 8009a08:	f010 fa2c 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f103 0220 	add.w	r2, r3, #32
 8009a12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a16:	4611      	mov	r1, r2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f010 fbf3 	bl	801a204 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3338      	adds	r3, #56	; 0x38
 8009a22:	4618      	mov	r0, r3
 8009a24:	f013 febf 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009a28:	6478      	str	r0, [r7, #68]	; 0x44
 8009a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01d      	beq.n	8009a6c <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 8009a30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fada 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	bf14      	ite	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	2300      	moveq	r3, #0
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00c      	beq.n	8009a62 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8009a48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 face 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f103 0220 	add.w	r2, r3, #32
 8009a56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f010 fbd1 	bl	801a204 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009a62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009a64:	f013 fda8 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8009a68:	6478      	str	r0, [r7, #68]	; 0x44
 8009a6a:	e7de      	b.n	8009a2a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691a      	ldr	r2, [r3, #16]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	330c      	adds	r3, #12
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	4798      	blx	r3
 8009a7e:	4601      	mov	r1, r0
 8009a80:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f011 f9f5 	bl	801ae78 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	33c4      	adds	r3, #196	; 0xc4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f107 0208 	add.w	r2, r7, #8
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009aa0:	f107 0308 	add.w	r3, r7, #8
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fe6d 	bl	800a784 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8009aaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f010 f9ec 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
}
 8009ab4:	bf00      	nop
 8009ab6:	3748      	adds	r7, #72	; 0x48
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b092      	sub	sp, #72	; 0x48
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8009ac4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f010 f9cb 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f103 0220 	add.w	r2, r3, #32
 8009ad4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f010 fb92 	bl	801a204 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3338      	adds	r3, #56	; 0x38
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f013 fe5e 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009aea:	6478      	str	r0, [r7, #68]	; 0x44
 8009aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01d      	beq.n	8009b2e <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 8009af2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fa79 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bf14      	ite	ne
 8009b00:	2301      	movne	r3, #1
 8009b02:	2300      	moveq	r3, #0
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00c      	beq.n	8009b24 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8009b0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa6d 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f103 0220 	add.w	r2, r3, #32
 8009b18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f010 fb70 	bl	801a204 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009b24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b26:	f013 fd47 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8009b2a:	6478      	str	r0, [r7, #68]	; 0x44
 8009b2c:	e7de      	b.n	8009aec <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691a      	ldr	r2, [r3, #16]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	4798      	blx	r3
 8009b40:	4601      	mov	r1, r0
 8009b42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009b46:	f107 0308 	add.w	r3, r7, #8
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f011 fa38 	bl	801afc0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	33c4      	adds	r3, #196	; 0xc4
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f107 0208 	add.w	r2, r7, #8
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fe2e 	bl	800a7c8 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8009b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009b70:	4618      	mov	r0, r3
 8009b72:	f010 f98b 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
}
 8009b76:	bf00      	nop
 8009b78:	3748      	adds	r7, #72	; 0x48
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
    clear();
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	339c      	adds	r3, #156	; 0x9c
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	4798      	blx	r3
    activeReporter_->failTest(failure);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	691a      	ldr	r2, [r3, #16]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3308      	adds	r3, #8
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	4798      	blx	r3
}
 8009ba8:	bf00      	nop
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 8009bb8:	f008 fd0a 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f007 fb78 	bl	80112b4 <_ZN10UtestShell10countCheckEv>
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d008      	beq.n	8009bee <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	33c4      	adds	r3, #196	; 0xc4
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4610      	mov	r0, r2
 8009bec:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3338      	adds	r3, #56	; 0x38
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f013 fdd7 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d023      	beq.n	8009c48 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 8009c00:	68f9      	ldr	r1, [r7, #12]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f9f2 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d009      	beq.n	8009c22 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8009c0e:	68f9      	ldr	r1, [r7, #12]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f9eb 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009c16:	4603      	mov	r3, r0
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e000      	b.n	8009c24 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 8009c22:	2300      	movs	r3, #0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00a      	beq.n	8009c3e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 8009c28:	68f9      	ldr	r1, [r7, #12]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f9de 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009c30:	4603      	mov	r3, r0
 8009c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	32c4      	adds	r2, #196	; 0xc4
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f013 fcba 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	e7d8      	b.n	8009bfa <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 8009c48:	bf00      	nop
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3320      	adds	r3, #32
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f010 f947 	bl	8019ef0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e027      	b.n	8009cbc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3338      	adds	r3, #56	; 0x38
 8009c70:	4618      	mov	r0, r3
 8009c72:	f013 fd98 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01d      	beq.n	8009cba <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f9b3 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00c      	beq.n	8009ca6 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009c8c:	68f9      	ldr	r1, [r7, #12]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f9ac 	bl	8009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009c94:	4603      	mov	r3, r0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7ff ffda 	bl	8009c50 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e000      	b.n	8009ca8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e005      	b.n	8009cbc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f013 fc81 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	e7de      	b.n	8009c78 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ff7d 	bl	8009bcc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff fe44 	bl	8009960 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3398      	adds	r3, #152	; 0x98
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	4798      	blx	r3
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <_ZN11MockSupport17checkExpectationsEv+0x30>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <_ZN11MockSupport17checkExpectationsEv+0x32>
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d002      	beq.n	8009d00 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fe7d 	bl	80099fa <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff ffa5 	bl	8009c50 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff fed5 	bl	8009abc <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3338      	adds	r3, #56	; 0x38
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f013 fd0c 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bf14      	ite	ne
 8009d36:	2301      	movne	r3, #1
 8009d38:	2300      	moveq	r3, #0
 8009d3a:	b2db      	uxtb	r3, r3
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 8009d44:	b590      	push	{r4, r7, lr}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3338      	adds	r3, #56	; 0x38
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f013 fcf7 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8009d5a:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d111      	bne.n	8009d86 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 8009d62:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009d66:	490a      	ldr	r1, [pc, #40]	; (8009d90 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 8009d68:	2038      	movs	r0, #56	; 0x38
 8009d6a:	f7fe fc8b 	bl	8008684 <_ZnwjPKci>
 8009d6e:	4604      	mov	r4, r0
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	4620      	mov	r0, r4
 8009d74:	f011 fd6e 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 8009d78:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3338      	adds	r3, #56	; 0x38
 8009d7e:	68f9      	ldr	r1, [r7, #12]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f013 fcab 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 8009d86:	68fb      	ldr	r3, [r7, #12]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd90      	pop	{r4, r7, pc}
 8009d90:	08022188 	.word	0x08022188

08009d94 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 8009da2:	68b9      	ldr	r1, [r7, #8]
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7ff ffcd 	bl	8009d44 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 8009daa:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3344      	adds	r3, #68	; 0x44
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	6978      	ldr	r0, [r7, #20]
 8009dba:	4798      	blx	r3
}
 8009dbc:	bf00      	nop
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	3338      	adds	r3, #56	; 0x38
 8009dd4:	6879      	ldr	r1, [r7, #4]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f013 fcb6 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8009ddc:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d111      	bne.n	8009e08 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 8009de4:	f107 0314 	add.w	r3, r7, #20
 8009de8:	490b      	ldr	r1, [pc, #44]	; (8009e18 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 f80d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	4619      	mov	r1, r3
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f011 fd2c 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 8009dfc:	f107 0314 	add.w	r3, r7, #20
 8009e00:	4618      	mov	r0, r3
 8009e02:	f001 fbba 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8009e06:	e003      	b.n	8009e10 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 8009e08:	69f9      	ldr	r1, [r7, #28]
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f7ff f8a2 	bl	8008f54 <_ZN14MockNamedValueC1ERKS_>
}
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	08022180 	.word	0x08022180

08009e1c <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 8009e26:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009e2a:	4927      	ldr	r1, [pc, #156]	; (8009ec8 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 8009e2c:	2048      	movs	r0, #72	; 0x48
 8009e2e:	f7fe fc29 	bl	8008684 <_ZnwjPKci>
 8009e32:	4604      	mov	r4, r0
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7ff f8f8 	bl	800902c <_ZN11MockSupportC1ERK12SimpleString>
 8009e3c:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	33a4      	adds	r3, #164	; 0xa4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6952      	ldr	r2, [r2, #20]
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3390      	adds	r3, #144	; 0x90
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009e6c:	f083 0301 	eor.w	r3, r3, #1
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d005      	beq.n	8009e82 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3384      	adds	r3, #132	; 0x84
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	7b1b      	ldrb	r3, [r3, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3308      	adds	r3, #8
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	4798      	blx	r3

    newMock->tracing(tracing_);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	338c      	adds	r3, #140	; 0x8c
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	33b8      	adds	r3, #184	; 0xb8
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	3230      	adds	r2, #48	; 0x30
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	4798      	blx	r3
    return newMock;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd90      	pop	{r4, r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	08022188 	.word	0x08022188

08009ecc <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 8009ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ece:	b0ab      	sub	sp, #172	; 0xac
 8009ed0:	af04      	add	r7, sp, #16
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8009ed6:	f107 0308 	add.w	r3, r7, #8
 8009eda:	4941      	ldr	r1, [pc, #260]	; (8009fe0 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 ff94 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 8009ee2:	f107 0308 	add.w	r3, r7, #8
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 fbc3 	bl	800b674 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 8009eee:	f107 0308 	add.w	r3, r7, #8
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff ff10 	bl	8009d1a <_ZN11MockSupport7hasDataERK12SimpleString>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d048      	beq.n	8009f92 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 8009f00:	f008 fb66 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8009f04:	4604      	mov	r4, r0
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	3324      	adds	r3, #36	; 0x24
 8009f0a:	681d      	ldr	r5, [r3, #0]
 8009f0c:	f107 0318 	add.w	r3, r7, #24
 8009f10:	f107 0208 	add.w	r2, r7, #8
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff ff54 	bl	8009dc4 <_ZN11MockSupport7getDataERK12SimpleString>
 8009f1c:	f107 0310 	add.w	r3, r7, #16
 8009f20:	f107 0218 	add.w	r2, r7, #24
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f011 ff61 	bl	801bdee <_ZNK14MockNamedValue7getTypeEv>
 8009f2c:	f107 0310 	add.w	r3, r7, #16
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 faf5 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8009f36:	4606      	mov	r6, r0
 8009f38:	f008 fb5a 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	9302      	str	r3, [sp, #8]
 8009f40:	f240 13bd 	movw	r3, #445	; 0x1bd
 8009f44:	9301      	str	r3, [sp, #4]
 8009f46:	4b27      	ldr	r3, [pc, #156]	; (8009fe4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	4926      	ldr	r1, [pc, #152]	; (8009fe8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009f50:	4620      	mov	r0, r4
 8009f52:	47a8      	blx	r5
 8009f54:	f107 0310 	add.w	r3, r7, #16
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fb0e 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8009f5e:	f107 0318 	add.w	r3, r7, #24
 8009f62:	4618      	mov	r0, r3
 8009f64:	f011 fca0 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 8009f68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009f6c:	f107 0208 	add.w	r2, r7, #8
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff ff26 	bl	8009dc4 <_ZN11MockSupport7getDataERK12SimpleString>
 8009f78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f012 fa4f 	bl	801c420 <_ZNK14MockNamedValue16getObjectPointerEv>
 8009f82:	4604      	mov	r4, r0
 8009f84:	bf00      	nop
 8009f86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f011 fc8c 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8009f90:	e01b      	b.n	8009fca <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ff41 	bl	8009e1c <_ZN11MockSupport5cloneERK12SimpleString>
 8009f9a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 8009f9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009fa2:	4911      	ldr	r1, [pc, #68]	; (8009fe8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 ff30 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8009faa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009fae:	f107 0108 	add.w	r1, r7, #8
 8009fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff feec 	bl	8009d94 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 8009fbc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f001 fada 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return newMock;
 8009fc6:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 fad3 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8009fd4:	4623      	mov	r3, r4
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	379c      	adds	r7, #156	; 0x9c
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	080221a0 	.word	0x080221a0
 8009fe4:	08022188 	.word	0x08022188
 8009fe8:	080221c0 	.word	0x080221c0

08009fec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 8009fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	b08b      	sub	sp, #44	; 0x2c
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 8009ff8:	2500      	movs	r5, #0
 8009ffa:	2600      	movs	r6, #0
 8009ffc:	f107 0308 	add.w	r3, r7, #8
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	4618      	mov	r0, r3
 800a004:	f013 fb26 	bl	801d654 <_ZNK22MockNamedValueListNode7getTypeEv>
 800a008:	f04f 0801 	mov.w	r8, #1
 800a00c:	f107 0310 	add.w	r3, r7, #16
 800a010:	492e      	ldr	r1, [pc, #184]	; (800a0cc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800a012:	4618      	mov	r0, r3
 800a014:	f000 fef9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800a018:	f04f 0901 	mov.w	r9, #1
 800a01c:	f107 0210 	add.w	r2, r7, #16
 800a020:	f107 0308 	add.w	r3, r7, #8
 800a024:	4611      	mov	r1, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f001 fab3 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d01a      	beq.n	800a068 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800a032:	f107 0318 	add.w	r3, r7, #24
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f013 faf8 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 800a03e:	2501      	movs	r5, #1
 800a040:	f107 0320 	add.w	r3, r7, #32
 800a044:	4922      	ldr	r1, [pc, #136]	; (800a0d0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fedf 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800a04c:	2601      	movs	r6, #1
 800a04e:	f107 0220 	add.w	r2, r7, #32
 800a052:	f107 0318 	add.w	r3, r7, #24
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 ff54 	bl	800af06 <_ZNK12SimpleString8containsERKS_>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800a064:	2401      	movs	r4, #1
 800a066:	e000      	b.n	800a06a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800a068:	2400      	movs	r4, #0
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	d004      	beq.n	800a078 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800a06e:	f107 0320 	add.w	r3, r7, #32
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fa81 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800a078:	2d00      	cmp	r5, #0
 800a07a:	d004      	beq.n	800a086 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800a07c:	f107 0318 	add.w	r3, r7, #24
 800a080:	4618      	mov	r0, r3
 800a082:	f001 fa7a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800a086:	f1b9 0f00 	cmp.w	r9, #0
 800a08a:	d004      	beq.n	800a096 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800a08c:	f107 0310 	add.w	r3, r7, #16
 800a090:	4618      	mov	r0, r3
 800a092:	f001 fa72 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800a096:	f1b8 0f00 	cmp.w	r8, #0
 800a09a:	d004      	beq.n	800a0a6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 fa6a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800a0a6:	2c00      	cmp	r4, #0
 800a0a8:	d00a      	beq.n	800a0c0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800a0aa:	6838      	ldr	r0, [r7, #0]
 800a0ac:	f013 fa90 	bl	801d5d0 <_ZN22MockNamedValueListNode4itemEv>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	32a0      	adds	r2, #160	; 0xa0
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	4790      	blx	r2
 800a0bc:	4603      	mov	r3, r0
 800a0be:	e000      	b.n	800a0c2 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	372c      	adds	r7, #44	; 0x2c
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0cc:	080221c0 	.word	0x080221c0
 800a0d0:	080221a0 	.word	0x080221a0

0800a0d4 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00a      	beq.n	800a0fc <_ZN11MockSupport11returnValueEv+0x28>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3354      	adds	r3, #84	; 0x54
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	4798      	blx	r3
 800a0fa:	e010      	b.n	800a11e <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800a0fc:	f107 0308 	add.w	r3, r7, #8
 800a100:	4909      	ldr	r1, [pc, #36]	; (800a128 <_ZN11MockSupport11returnValueEv+0x54>)
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fe81 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800a108:	f107 0308 	add.w	r3, r7, #8
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f011 fba0 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 800a114:	f107 0308 	add.w	r3, r7, #8
 800a118:	4618      	mov	r0, r3
 800a11a:	f001 fa2e 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	08022180 	.word	0x08022180

0800a12c <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800a12c:	b590      	push	{r4, r7, lr}
 800a12e:	b091      	sub	sp, #68	; 0x44
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3320      	adds	r3, #32
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f107 0208 	add.w	r2, r7, #8
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	4610      	mov	r0, r2
 800a144:	4798      	blx	r3
 800a146:	f107 0308 	add.w	r3, r7, #8
 800a14a:	4618      	mov	r0, r3
 800a14c:	f011 fe5e 	bl	801be0c <_ZNK14MockNamedValue12getBoolValueEv>
 800a150:	4603      	mov	r3, r0
 800a152:	461c      	mov	r4, r3
 800a154:	bf00      	nop
 800a156:	f107 0308 	add.w	r3, r7, #8
 800a15a:	4618      	mov	r0, r3
 800a15c:	f011 fba4 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a160:	4623      	mov	r3, r4
}
 800a162:	4618      	mov	r0, r3
 800a164:	3744      	adds	r7, #68	; 0x44
 800a166:	46bd      	mov	sp, r7
 800a168:	bd90      	pop	{r4, r7, pc}

0800a16a <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800a16a:	b590      	push	{r4, r7, lr}
 800a16c:	b091      	sub	sp, #68	; 0x44
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3320      	adds	r3, #32
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f107 0208 	add.w	r2, r7, #8
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
 800a184:	f107 0308 	add.w	r3, r7, #8
 800a188:	4618      	mov	r0, r3
 800a18a:	f011 fe67 	bl	801be5c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800a18e:	4604      	mov	r4, r0
 800a190:	bf00      	nop
 800a192:	f107 0308 	add.w	r3, r7, #8
 800a196:	4618      	mov	r0, r3
 800a198:	f011 fb86 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a19c:	4623      	mov	r3, r4
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3744      	adds	r7, #68	; 0x44
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd90      	pop	{r4, r7, pc}

0800a1a6 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800a1a6:	b590      	push	{r4, r7, lr}
 800a1a8:	b091      	sub	sp, #68	; 0x44
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3320      	adds	r3, #32
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f107 0208 	add.w	r2, r7, #8
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4798      	blx	r3
 800a1c0:	f107 0308 	add.w	r3, r7, #8
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f011 fe99 	bl	801befc <_ZNK14MockNamedValue11getIntValueEv>
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	bf00      	nop
 800a1ce:	f107 0308 	add.w	r3, r7, #8
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f011 fb68 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a1d8:	4623      	mov	r3, r4
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3744      	adds	r7, #68	; 0x44
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd90      	pop	{r4, r7, pc}

0800a1e2 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	331c      	adds	r3, #28
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	4798      	blx	r3
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	335c      	adds	r3, #92	; 0x5c
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	4798      	blx	r3
 800a20a:	4603      	mov	r3, r0
 800a20c:	e000      	b.n	800a210 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800a20e:	683b      	ldr	r3, [r7, #0]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	331c      	adds	r3, #28
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	4798      	blx	r3
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00a      	beq.n	800a24c <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3368      	adds	r3, #104	; 0x68
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	4798      	blx	r3
 800a242:	eeb0 7a40 	vmov.f32	s14, s0
 800a246:	eef0 7a60 	vmov.f32	s15, s1
 800a24a:	e001      	b.n	800a250 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800a24c:	ed97 7b00 	vldr	d7, [r7]
}
 800a250:	eeb0 0a47 	vmov.f32	s0, s14
 800a254:	eef0 0a67 	vmov.f32	s1, s15
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	331c      	adds	r3, #28
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	4798      	blx	r3
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d007      	beq.n	800a28a <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3338      	adds	r3, #56	; 0x38
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	4798      	blx	r3
 800a286:	4603      	mov	r3, r0
 800a288:	e000      	b.n	800a28c <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800a28a:	683b      	ldr	r3, [r7, #0]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	331c      	adds	r3, #28
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	4798      	blx	r3
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d007      	beq.n	800a2c2 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3324      	adds	r3, #36	; 0x24
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	4798      	blx	r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	e000      	b.n	800a2c4 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800a2c2:	78fb      	ldrb	r3, [r7, #3]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	331c      	adds	r3, #28
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	332c      	adds	r3, #44	; 0x2c
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	4798      	blx	r3
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	e000      	b.n	800a2fa <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800a2f8:	683b      	ldr	r3, [r7, #0]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	331c      	adds	r3, #28
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	4798      	blx	r3
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d007      	beq.n	800a32e <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3334      	adds	r3, #52	; 0x34
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
 800a32a:	4603      	mov	r3, r0
 800a32c:	e000      	b.n	800a330 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800a32e:	683b      	ldr	r3, [r7, #0]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	331c      	adds	r3, #28
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	4798      	blx	r3
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d007      	beq.n	800a364 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3340      	adds	r3, #64	; 0x40
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	4798      	blx	r3
 800a360:	4603      	mov	r3, r0
 800a362:	e000      	b.n	800a366 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800a364:	683b      	ldr	r3, [r7, #0]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800a36e:	b590      	push	{r4, r7, lr}
 800a370:	b091      	sub	sp, #68	; 0x44
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3320      	adds	r3, #32
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f107 0208 	add.w	r2, r7, #8
 800a382:	6879      	ldr	r1, [r7, #4]
 800a384:	4610      	mov	r0, r2
 800a386:	4798      	blx	r3
 800a388:	f107 0308 	add.w	r3, r7, #8
 800a38c:	4618      	mov	r0, r3
 800a38e:	f011 fddd 	bl	801bf4c <_ZNK14MockNamedValue15getLongIntValueEv>
 800a392:	4604      	mov	r4, r0
 800a394:	bf00      	nop
 800a396:	f107 0308 	add.w	r3, r7, #8
 800a39a:	4618      	mov	r0, r3
 800a39c:	f011 fa84 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a3a0:	4623      	mov	r3, r4
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3744      	adds	r7, #68	; 0x44
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd90      	pop	{r4, r7, pc}

0800a3aa <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800a3aa:	b590      	push	{r4, r7, lr}
 800a3ac:	b091      	sub	sp, #68	; 0x44
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3320      	adds	r3, #32
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f107 0208 	add.w	r2, r7, #8
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4798      	blx	r3
 800a3c4:	f107 0308 	add.w	r3, r7, #8
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f011 fe21 	bl	801c010 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	bf00      	nop
 800a3d2:	f107 0308 	add.w	r3, r7, #8
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f011 fa66 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a3dc:	4623      	mov	r3, r4
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3744      	adds	r7, #68	; 0x44
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd90      	pop	{r4, r7, pc}
	...

0800a3e8 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800a3e8:	b5b0      	push	{r4, r5, r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800a3f2:	f008 f8ed 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	3368      	adds	r3, #104	; 0x68
 800a3fc:	681d      	ldr	r5, [r3, #0]
 800a3fe:	f008 f8f7 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a402:	4603      	mov	r3, r0
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	f240 2345 	movw	r3, #581	; 0x245
 800a40a:	4a06      	ldr	r2, [pc, #24]	; (800a424 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800a40c:	4906      	ldr	r1, [pc, #24]	; (800a428 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800a40e:	4620      	mov	r0, r4
 800a410:	47a8      	blx	r5
    return cpputest_longlong(0);
 800a412:	2100      	movs	r1, #0
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7fe fd2f 	bl	8008e78 <_ZN17cpputest_longlongC1Ei>
}
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bdb0      	pop	{r4, r5, r7, pc}
 800a422:	bf00      	nop
 800a424:	08022188 	.word	0x08022188
 800a428:	080221cc 	.word	0x080221cc

0800a42c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800a42c:	b5b0      	push	{r4, r5, r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af02      	add	r7, sp, #8
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800a436:	f008 f8cb 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800a43a:	4604      	mov	r4, r0
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	3368      	adds	r3, #104	; 0x68
 800a440:	681d      	ldr	r5, [r3, #0]
 800a442:	f008 f8d5 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a446:	4603      	mov	r3, r0
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	f240 234b 	movw	r3, #587	; 0x24b
 800a44e:	4a06      	ldr	r2, [pc, #24]	; (800a468 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800a450:	4906      	ldr	r1, [pc, #24]	; (800a46c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800a452:	4620      	mov	r0, r4
 800a454:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800a456:	2100      	movs	r1, #0
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7fe fd19 	bl	8008e90 <_ZN18cpputest_ulonglongC1Ei>
}
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bdb0      	pop	{r4, r5, r7, pc}
 800a466:	bf00      	nop
 800a468:	08022188 	.word	0x08022188
 800a46c:	080221ec 	.word	0x080221ec

0800a470 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800a470:	b5b0      	push	{r4, r5, r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af02      	add	r7, sp, #8
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	4639      	mov	r1, r7
 800a47c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800a480:	f008 f8a6 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800a484:	4604      	mov	r4, r0
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	3368      	adds	r3, #104	; 0x68
 800a48a:	681d      	ldr	r5, [r3, #0]
 800a48c:	f008 f8b0 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a490:	4603      	mov	r3, r0
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	f240 2351 	movw	r3, #593	; 0x251
 800a498:	4a06      	ldr	r2, [pc, #24]	; (800a4b4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800a49a:	4907      	ldr	r1, [pc, #28]	; (800a4b8 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800a49c:	4620      	mov	r0, r4
 800a49e:	47a8      	blx	r5
    return defaultValue;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	cb03      	ldmia	r3!, {r0, r1}
 800a4a8:	6010      	str	r0, [r2, #0]
 800a4aa:	6051      	str	r1, [r2, #4]
}
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a4b4:	08022188 	.word	0x08022188
 800a4b8:	080221cc 	.word	0x080221cc

0800a4bc <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800a4bc:	b5b0      	push	{r4, r5, r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800a4cc:	f008 f880 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	3368      	adds	r3, #104	; 0x68
 800a4d6:	681d      	ldr	r5, [r3, #0]
 800a4d8:	f008 f88a 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	f240 2357 	movw	r3, #599	; 0x257
 800a4e4:	4a06      	ldr	r2, [pc, #24]	; (800a500 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800a4e6:	4907      	ldr	r1, [pc, #28]	; (800a504 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	47a8      	blx	r5
    return defaultValue;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	463b      	mov	r3, r7
 800a4f2:	cb03      	ldmia	r3!, {r0, r1}
 800a4f4:	6010      	str	r0, [r2, #0]
 800a4f6:	6051      	str	r1, [r2, #4]
}
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a500:	08022188 	.word	0x08022188
 800a504:	080221ec 	.word	0x080221ec

0800a508 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b091      	sub	sp, #68	; 0x44
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3320      	adds	r3, #32
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f107 0208 	add.w	r2, r7, #8
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	4610      	mov	r0, r2
 800a520:	4798      	blx	r3
 800a522:	f107 0308 	add.w	r3, r7, #8
 800a526:	4618      	mov	r0, r3
 800a528:	f011 fea6 	bl	801c278 <_ZNK14MockNamedValue14getStringValueEv>
 800a52c:	4604      	mov	r4, r0
 800a52e:	bf00      	nop
 800a530:	f107 0308 	add.w	r3, r7, #8
 800a534:	4618      	mov	r0, r3
 800a536:	f011 f9b7 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a53a:	4623      	mov	r3, r4
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3744      	adds	r7, #68	; 0x44
 800a540:	46bd      	mov	sp, r7
 800a542:	bd90      	pop	{r4, r7, pc}

0800a544 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800a544:	b580      	push	{r7, lr}
 800a546:	ed2d 8b02 	vpush	{d8}
 800a54a:	b090      	sub	sp, #64	; 0x40
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3320      	adds	r3, #32
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f107 0208 	add.w	r2, r7, #8
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	4610      	mov	r0, r2
 800a560:	4798      	blx	r3
 800a562:	f107 0308 	add.w	r3, r7, #8
 800a566:	4618      	mov	r0, r3
 800a568:	f011 fe2a 	bl	801c1c0 <_ZNK14MockNamedValue14getDoubleValueEv>
 800a56c:	eeb0 8a40 	vmov.f32	s16, s0
 800a570:	eef0 8a60 	vmov.f32	s17, s1
 800a574:	bf00      	nop
 800a576:	f107 0308 	add.w	r3, r7, #8
 800a57a:	4618      	mov	r0, r3
 800a57c:	f011 f994 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a580:	eeb0 7a48 	vmov.f32	s14, s16
 800a584:	eef0 7a68 	vmov.f32	s15, s17
}
 800a588:	eeb0 0a47 	vmov.f32	s0, s14
 800a58c:	eef0 0a67 	vmov.f32	s1, s15
 800a590:	3740      	adds	r7, #64	; 0x40
 800a592:	46bd      	mov	sp, r7
 800a594:	ecbd 8b02 	vpop	{d8}
 800a598:	bd80      	pop	{r7, pc}

0800a59a <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	331c      	adds	r3, #28
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	4798      	blx	r3
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d007      	beq.n	800a5c6 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	336c      	adds	r3, #108	; 0x6c
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	4798      	blx	r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	e000      	b.n	800a5c8 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800a5c6:	683b      	ldr	r3, [r7, #0]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	331c      	adds	r3, #28
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d007      	beq.n	800a5fc <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3378      	adds	r3, #120	; 0x78
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	4798      	blx	r3
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	e000      	b.n	800a5fe <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800a5fc:	683b      	ldr	r3, [r7, #0]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	331c      	adds	r3, #28
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d007      	beq.n	800a632 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3380      	adds	r3, #128	; 0x80
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	4798      	blx	r3
 800a62e:	4603      	mov	r3, r0
 800a630:	e000      	b.n	800a634 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800a632:	683b      	ldr	r3, [r7, #0]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800a63c:	b590      	push	{r4, r7, lr}
 800a63e:	b091      	sub	sp, #68	; 0x44
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3320      	adds	r3, #32
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f107 0208 	add.w	r2, r7, #8
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	4610      	mov	r0, r2
 800a654:	4798      	blx	r3
 800a656:	f107 0308 	add.w	r3, r7, #8
 800a65a:	4618      	mov	r0, r3
 800a65c:	f011 fe34 	bl	801c2c8 <_ZNK14MockNamedValue15getPointerValueEv>
 800a660:	4604      	mov	r4, r0
 800a662:	bf00      	nop
 800a664:	f107 0308 	add.w	r3, r7, #8
 800a668:	4618      	mov	r0, r3
 800a66a:	f011 f91d 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a66e:	4623      	mov	r3, r4
}
 800a670:	4618      	mov	r0, r3
 800a672:	3744      	adds	r7, #68	; 0x44
 800a674:	46bd      	mov	sp, r7
 800a676:	bd90      	pop	{r4, r7, pc}

0800a678 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800a678:	b590      	push	{r4, r7, lr}
 800a67a:	b091      	sub	sp, #68	; 0x44
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3320      	adds	r3, #32
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f107 0208 	add.w	r2, r7, #8
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	4610      	mov	r0, r2
 800a690:	4798      	blx	r3
 800a692:	f107 0308 	add.w	r3, r7, #8
 800a696:	4618      	mov	r0, r3
 800a698:	f011 fe3e 	bl	801c318 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800a69c:	4604      	mov	r4, r0
 800a69e:	bf00      	nop
 800a6a0:	f107 0308 	add.w	r3, r7, #8
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f011 f8ff 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a6aa:	4623      	mov	r3, r4
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3744      	adds	r7, #68	; 0x44
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd90      	pop	{r4, r7, pc}

0800a6b4 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800a6b4:	b590      	push	{r4, r7, lr}
 800a6b6:	b091      	sub	sp, #68	; 0x44
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3320      	adds	r3, #32
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f107 0208 	add.w	r2, r7, #8
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	4798      	blx	r3
 800a6ce:	f107 0308 	add.w	r3, r7, #8
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f011 fe48 	bl	801c368 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800a6d8:	4604      	mov	r4, r0
 800a6da:	bf00      	nop
 800a6dc:	f107 0308 	add.w	r3, r7, #8
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f011 f8e1 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 800a6e6:	4623      	mov	r3, r4
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3744      	adds	r7, #68	; 0x44
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd90      	pop	{r4, r7, pc}

0800a6f0 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00a      	beq.n	800a716 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3350      	adds	r3, #80	; 0x50
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4610      	mov	r0, r2
 800a710:	4798      	blx	r3
 800a712:	4603      	mov	r3, r0
 800a714:	e000      	b.n	800a718 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <_Z41__static_initialization_and_destruction_0ii>:
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d115      	bne.n	800a75c <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a736:	4293      	cmp	r3, r2
 800a738:	d110      	bne.n	800a75c <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800a73a:	f107 0308 	add.w	r3, r7, #8
 800a73e:	490f      	ldr	r1, [pc, #60]	; (800a77c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fb62 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800a746:	f107 0308 	add.w	r3, r7, #8
 800a74a:	4619      	mov	r1, r3
 800a74c:	480c      	ldr	r0, [pc, #48]	; (800a780 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a74e:	f7fe fc6d 	bl	800902c <_ZN11MockSupportC1ERK12SimpleString>
 800a752:	f107 0308 	add.w	r3, r7, #8
 800a756:	4618      	mov	r0, r3
 800a758:	f000 ff0f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d107      	bne.n	800a772 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a768:	4293      	cmp	r3, r2
 800a76a:	d102      	bne.n	800a772 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800a76c:	4804      	ldr	r0, [pc, #16]	; (800a780 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800a76e:	f7fe fca7 	bl	80090c0 <_ZN11MockSupportD1Ev>
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	08022180 	.word	0x08022180
 800a780:	200006f4 	.word	0x200006f4

0800a784 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	4a05      	ldr	r2, [pc, #20]	; (800a7a4 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fbbb 	bl	8008f10 <_ZN11MockFailureD1Ev>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	0802583c 	.word	0x0802583c

0800a7a8 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ffe7 	bl	800a784 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800a7b6:	2134      	movs	r1, #52	; 0x34
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7fd ff77 	bl	80086ac <_ZdlPvj>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	4a05      	ldr	r2, [pc, #20]	; (800a7e8 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fb99 	bl	8008f10 <_ZN11MockFailureD1Ev>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	08025810 	.word	0x08025810

0800a7ec <_ZN20MockCallOrderFailureD0Ev>:
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff ffe7 	bl	800a7c8 <_ZN20MockCallOrderFailureD1Ev>
 800a7fa:	2134      	movs	r1, #52	; 0x34
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7fd ff55 	bl	80086ac <_ZdlPvj>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
 800a810:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a814:	2001      	movs	r0, #1
 800a816:	f7ff ff83 	bl	800a720 <_Z41__static_initialization_and_destruction_0ii>
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
 800a820:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a824:	2000      	movs	r0, #0
 800a826:	f7ff ff7b 	bl	800a720 <_Z41__static_initialization_and_destruction_0ii>
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800a834:	4b05      	ldr	r3, [pc, #20]	; (800a84c <_ZN11SimpleMutexC1Ev+0x20>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4798      	blx	r3
 800a83a:	4602      	mov	r2, r0
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]
}
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	200000f0 	.word	0x200000f0

0800a850 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <_ZN11SimpleMutexD1Ev+0x20>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	6812      	ldr	r2, [r2, #0]
 800a860:	4610      	mov	r0, r2
 800a862:	4798      	blx	r3
}
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4618      	mov	r0, r3
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	200000fc 	.word	0x200000fc

0800a874 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800a87c:	4b04      	ldr	r3, [pc, #16]	; (800a890 <_ZN11SimpleMutex4LockEv+0x1c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6812      	ldr	r2, [r2, #0]
 800a884:	4610      	mov	r0, r2
 800a886:	4798      	blx	r3
}
 800a888:	bf00      	nop
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	200000f4 	.word	0x200000f4

0800a894 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800a89c:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6812      	ldr	r2, [r2, #0]
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4798      	blx	r3
}
 800a8a8:	bf00      	nop
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	200000f8 	.word	0x200000f8

0800a8b4 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff ffd3 	bl	800a874 <_ZN11SimpleMutex4LockEv>
}
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff ffd5 	bl	800a894 <_ZN11SimpleMutex6UnlockEv>
}
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800a8f8:	4b05      	ldr	r3, [pc, #20]	; (800a910 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800a900:	f003 fd7a 	bl	800e3f8 <_Z24defaultNewArrayAllocatorv>
 800a904:	4603      	mov	r3, r0
 800a906:	e001      	b.n	800a90c <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800a908:	4b01      	ldr	r3, [pc, #4]	; (800a910 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	2000073c 	.word	0x2000073c

0800a914 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800a914:	b590      	push	{r4, r7, lr}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800a920:	f7ff ffe8 	bl	800a8f4 <_ZN12SimpleString18getStringAllocatorEv>
 800a924:	6803      	ldr	r3, [r0, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	681c      	ldr	r4, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	68f9      	ldr	r1, [r7, #12]
 800a930:	47a0      	blx	r4
 800a932:	4603      	mov	r3, r0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd90      	pop	{r4, r7, pc}

0800a93c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800a93c:	b590      	push	{r4, r7, lr}
 800a93e:	b087      	sub	sp, #28
 800a940:	af02      	add	r7, sp, #8
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800a94a:	f7ff ffd3 	bl	800a8f4 <_ZN12SimpleString18getStringAllocatorEv>
 800a94e:	6803      	ldr	r3, [r0, #0]
 800a950:	330c      	adds	r3, #12
 800a952:	681c      	ldr	r4, [r3, #0]
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	68f9      	ldr	r1, [r7, #12]
 800a95e:	47a0      	blx	r4
}
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	bd90      	pop	{r4, r7, pc}

0800a968 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800a970:	2284      	movs	r2, #132	; 0x84
 800a972:	4906      	ldr	r1, [pc, #24]	; (800a98c <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800a974:	2001      	movs	r0, #1
 800a976:	f7ff ffcd 	bl	800a914 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a97a:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	701a      	strb	r2, [r3, #0]
    return empty;
 800a982:	68fb      	ldr	r3, [r7, #12]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	08022218 	.word	0x08022218

0800a990 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f001 f809 	bl	800b9b4 <_ZN12SimpleString7isSpaceEc>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <_ZN12SimpleString4AtoUEPKc+0x20>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	e7f3      	b.n	800a998 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 ffe7 	bl	800b98c <_ZN12SimpleString7isDigitEc>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d005      	beq.n	800a9d0 <_ZN12SimpleString4AtoUEPKc+0x40>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b2f      	cmp	r3, #47	; 0x2f
 800a9ca:	d901      	bls.n	800a9d0 <_ZN12SimpleString4AtoUEPKc+0x40>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e000      	b.n	800a9d2 <_ZN12SimpleString4AtoUEPKc+0x42>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d010      	beq.n	800a9f8 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	005b      	lsls	r3, r3, #1
 800a9e0:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	3b30      	subs	r3, #48	; 0x30
 800a9ee:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	607b      	str	r3, [r7, #4]
 800a9f6:	e7dd      	b.n	800a9b4 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 ffd0 	bl	800b9b4 <_ZN12SimpleString7isSpaceEc>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <_ZN12SimpleString4AtoIEPKc+0x20>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	607b      	str	r3, [r7, #4]
 800aa20:	e7f3      	b.n	800aa0a <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800aa28:	7afb      	ldrb	r3, [r7, #11]
 800aa2a:	2b2d      	cmp	r3, #45	; 0x2d
 800aa2c:	d002      	beq.n	800aa34 <_ZN12SimpleString4AtoIEPKc+0x32>
 800aa2e:	7afb      	ldrb	r3, [r7, #11]
 800aa30:	2b2b      	cmp	r3, #43	; 0x2b
 800aa32:	d102      	bne.n	800aa3a <_ZN12SimpleString4AtoIEPKc+0x38>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3301      	adds	r3, #1
 800aa38:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 ffa2 	bl	800b98c <_ZN12SimpleString7isDigitEc>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00f      	beq.n	800aa6e <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	4613      	mov	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	005b      	lsls	r3, r3, #1
 800aa58:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	3b30      	subs	r3, #48	; 0x30
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	607b      	str	r3, [r7, #4]
 800aa6c:	e7e7      	b.n	800aa3e <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800aa6e:	7afb      	ldrb	r3, [r7, #11]
 800aa70:	2b2d      	cmp	r3, #45	; 0x2d
 800aa72:	d102      	bne.n	800aa7a <_ZN12SimpleString4AtoIEPKc+0x78>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	425b      	negs	r3, r3
 800aa78:	e000      	b.n	800aa7c <_ZN12SimpleString4AtoIEPKc+0x7a>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00c      	beq.n	800aab0 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	781a      	ldrb	r2, [r3, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d106      	bne.n	800aab0 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	607b      	str	r3, [r7, #4]
       ++s2;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800aaae:	e7ee      	b.n	800aa8e <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	1ad3      	subs	r3, r2, r3
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800aad0:	f04f 33ff 	mov.w	r3, #4294967295
 800aad4:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3301      	adds	r3, #1
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	1c5a      	adds	r2, r3, #1
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bf14      	ite	ne
 800aae8:	2301      	movne	r3, #1
 800aaea:	2300      	moveq	r3, #0
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d000      	beq.n	800aaf4 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800aaf2:	e7f0      	b.n	800aad6 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d013      	beq.n	800ab3c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00f      	beq.n	800ab3c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	781a      	ldrb	r2, [r3, #0]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d109      	bne.n	800ab3c <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	607b      	str	r3, [r7, #4]
        ++s1;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3301      	adds	r3, #1
 800ab32:	60fb      	str	r3, [r7, #12]
        ++s2;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	3301      	adds	r3, #1
 800ab38:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800ab3a:	e7e8      	b.n	800ab0e <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d006      	beq.n	800ab50 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	461a      	mov	r2, r3
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	e000      	b.n	800ab52 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b087      	sub	sp, #28
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	e01e      	b.n	800abbc <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	781a      	ldrb	r2, [r3, #0]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	607b      	str	r3, [r7, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d005      	beq.n	800ab9e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	3301      	adds	r3, #1
 800aba8:	60bb      	str	r3, [r7, #8]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3301      	adds	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	781a      	ldrb	r2, [r3, #0]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800abb8:	e7e5      	b.n	800ab86 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800abba:	697b      	ldr	r3, [r7, #20]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	371c      	adds	r7, #28
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	e01b      	b.n	800ac16 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d016      	beq.n	800ac14 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800abe6:	6838      	ldr	r0, [r7, #0]
 800abe8:	f7ff ff6e 	bl	800aac8 <_ZN12SimpleString6StrLenEPKc>
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff ff85 	bl	800ab02 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	bf0c      	ite	eq
 800abfe:	2301      	moveq	r3, #1
 800ac00:	2300      	movne	r3, #0
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	e004      	b.n	800ac16 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	607b      	str	r3, [r7, #4]
 800ac12:	e7e4      	b.n	800abde <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b082      	sub	sp, #8
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	4603      	mov	r3, r0
 800ac26:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800ac28:	79fb      	ldrb	r3, [r7, #7]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 fed9 	bl	800b9e2 <_ZN12SimpleString7isUpperEc>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <_ZN12SimpleString7ToLowerEc+0x20>
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	3320      	adds	r3, #32
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	e000      	b.n	800ac40 <_ZN12SimpleString7ToLowerEc+0x22>
 800ac3e:	79fb      	ldrb	r3, [r7, #7]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	613b      	str	r3, [r7, #16]

    while (n--)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	1e5a      	subs	r2, r3, #1
 800ac60:	607a      	str	r2, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	bf14      	ite	ne
 800ac66:	2301      	movne	r3, #1
 800ac68:	2300      	moveq	r3, #0
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d013      	beq.n	800ac98 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	781a      	ldrb	r2, [r3, #0]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d006      	beq.n	800ac8a <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	e007      	b.n	800ac9a <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	617b      	str	r3, [r7, #20]
            ++p2;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	3301      	adds	r3, #1
 800ac94:	613b      	str	r3, [r7, #16]
    while (n--)
 800ac96:	e7e1      	b.n	800ac5c <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
	...

0800aca8 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00d      	beq.n	800acd4 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6818      	ldr	r0, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6859      	ldr	r1, [r3, #4]
 800acc0:	23ee      	movs	r3, #238	; 0xee
 800acc2:	4a06      	ldr	r2, [pc, #24]	; (800acdc <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800acc4:	f7ff fe3a 	bl	800a93c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	605a      	str	r2, [r3, #4]
    }
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	08022218 	.word	0x08022218

0800ace0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff ffdd 	bl	800aca8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff fe37 	bl	800a968 <_ZNK12SimpleString14getEmptyStringEv>
 800acfa:	4602      	mov	r2, r0
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	601a      	str	r2, [r3, #0]
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f7ff ffc7 	bl	800aca8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	4619      	mov	r1, r3
 800ad26:	68b8      	ldr	r0, [r7, #8]
 800ad28:	f000 fe12 	bl	800b950 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	601a      	str	r2, [r3, #0]
}
 800ad32:	bf00      	nop
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
	...

0800ad3c <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff ffae 	bl	800aca8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f240 1209 	movw	r2, #265	; 0x109
 800ad5a:	4907      	ldr	r1, [pc, #28]	; (800ad78 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7ff fdd9 	bl	800a914 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ad62:	4602      	mov	r2, r0
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	701a      	strb	r2, [r3, #0]
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	08022218 	.word	0x08022218

0800ad7c <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7ff ff8d 	bl	800aca8 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	601a      	str	r2, [r3, #0]
}
 800ad9a:	bf00      	nop
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800ada2:	b590      	push	{r4, r7, lr}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681c      	ldr	r4, [r3, #0]
 800adb0:	6838      	ldr	r0, [r7, #0]
 800adb2:	f000 fbc1 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800adb6:	4603      	mov	r3, r0
 800adb8:	3301      	adds	r3, #1
 800adba:	461a      	mov	r2, r3
 800adbc:	4621      	mov	r1, r4
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7ff ffa2 	bl	800ad08 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd90      	pop	{r4, r7, pc}

0800adcc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800add6:	6838      	ldr	r0, [r7, #0]
 800add8:	f7ff fe76 	bl	800aac8 <_ZN12SimpleString6StrLenEPKc>
 800addc:	4603      	mov	r3, r0
 800adde:	3301      	adds	r3, #1
 800ade0:	461a      	mov	r2, r3
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff ff8f 	bl	800ad08 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
    return buffer_;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d103      	bne.n	800ae2e <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff ff5a 	bl	800ace0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800ae2c:	e003      	b.n	800ae36 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff ffcb 	bl	800adcc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b088      	sub	sp, #32
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2200      	movs	r2, #0
 800ae56:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800ae58:	68b8      	ldr	r0, [r7, #8]
 800ae5a:	f7ff fe35 	bl	800aac8 <_ZN12SimpleString6StrLenEPKc>
 800ae5e:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	fb02 f303 	mul.w	r3, r2, r3
 800ae68:	3301      	adds	r3, #1
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7ff ff65 	bl	800ad3c <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800ae78:	2300      	movs	r3, #0
 800ae7a:	61bb      	str	r3, [r7, #24]
 800ae7c:	69ba      	ldr	r2, [r7, #24]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d20e      	bcs.n	800aea2 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	3301      	adds	r3, #1
 800ae88:	461a      	mov	r2, r3
 800ae8a:	68b9      	ldr	r1, [r7, #8]
 800ae8c:	69f8      	ldr	r0, [r7, #28]
 800ae8e:	f7ff fe66 	bl	800ab5e <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800ae92:	69fa      	ldr	r2, [r7, #28]
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	4413      	add	r3, r2
 800ae98:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	e7ec      	b.n	800ae7c <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	2200      	movs	r2, #0
 800aea6:	701a      	strb	r2, [r3, #0]
}
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3720      	adds	r7, #32
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800aec8:	6838      	ldr	r0, [r7, #0]
 800aeca:	f7ff ff92 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800aece:	4603      	mov	r3, r0
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff ff7a 	bl	800adcc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d003      	beq.n	800aefc <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff ff53 	bl	800ada2 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800aefc:	687b      	ldr	r3, [r7, #4]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800af06:	b590      	push	{r4, r7, lr}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff ff6e 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800af16:	4604      	mov	r4, r0
 800af18:	6838      	ldr	r0, [r7, #0]
 800af1a:	f7ff ff6a 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800af1e:	4603      	mov	r3, r0
 800af20:	4619      	mov	r1, r3
 800af22:	4620      	mov	r0, r4
 800af24:	f7ff fe50 	bl	800abc8 <_ZN12SimpleString6StrStrEPKcS1_>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	bf14      	ite	ne
 800af2e:	2301      	movne	r3, #1
 800af30:	2300      	moveq	r3, #0
 800af32:	b2db      	uxtb	r3, r3
}
 800af34:	4618      	mov	r0, r3
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd90      	pop	{r4, r7, pc}

0800af3c <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b087      	sub	sp, #28
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800af46:	f107 0308 	add.w	r3, r7, #8
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 fabb 	bl	800b4c8 <_ZNK12SimpleString9lowerCaseEv>
 800af52:	f107 0310 	add.w	r3, r7, #16
 800af56:	6839      	ldr	r1, [r7, #0]
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 fab5 	bl	800b4c8 <_ZNK12SimpleString9lowerCaseEv>
 800af5e:	f107 0210 	add.w	r2, r7, #16
 800af62:	f107 0308 	add.w	r3, r7, #8
 800af66:	4611      	mov	r1, r2
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff ffcc 	bl	800af06 <_ZNK12SimpleString8containsERKS_>
 800af6e:	4603      	mov	r3, r0
 800af70:	461c      	mov	r4, r3
 800af72:	bf00      	nop
 800af74:	f107 0310 	add.w	r3, r7, #16
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 fafe 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800af7e:	f107 0308 	add.w	r3, r7, #8
 800af82:	4618      	mov	r0, r3
 800af84:	f000 faf9 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800af88:	4623      	mov	r3, r4
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd90      	pop	{r4, r7, pc}

0800af92 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800af92:	b590      	push	{r4, r7, lr}
 800af94:	b083      	sub	sp, #12
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800af9c:	6838      	ldr	r0, [r7, #0]
 800af9e:	f000 facb 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bf0c      	ite	eq
 800afa8:	2301      	moveq	r3, #1
 800afaa:	2300      	movne	r3, #0
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e022      	b.n	800affc <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fabe 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	bf0c      	ite	eq
 800afc2:	2301      	moveq	r3, #1
 800afc4:	2300      	movne	r3, #0
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800afcc:	2300      	movs	r3, #0
 800afce:	e015      	b.n	800affc <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff ff0e 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800afd6:	4604      	mov	r4, r0
 800afd8:	6838      	ldr	r0, [r7, #0]
 800afda:	f7ff ff0a 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800afde:	4603      	mov	r3, r0
 800afe0:	4619      	mov	r1, r3
 800afe2:	4620      	mov	r0, r4
 800afe4:	f7ff fdf0 	bl	800abc8 <_ZN12SimpleString6StrStrEPKcS1_>
 800afe8:	4604      	mov	r4, r0
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff ff01 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800aff0:	4603      	mov	r3, r0
 800aff2:	429c      	cmp	r4, r3
 800aff4:	bf0c      	ite	eq
 800aff6:	2301      	moveq	r3, #1
 800aff8:	2300      	movne	r3, #0
 800affa:	b2db      	uxtb	r3, r3
}
 800affc:	4618      	mov	r0, r3
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	bd90      	pop	{r4, r7, pc}

0800b004 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800b004:	b590      	push	{r4, r7, lr}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fa92 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b014:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800b016:	6838      	ldr	r0, [r7, #0]
 800b018:	f000 fa8e 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b01c:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800b024:	2301      	movs	r3, #1
 800b026:	e020      	b.n	800b06a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800b02e:	2300      	movs	r3, #0
 800b030:	e01b      	b.n	800b06a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	429a      	cmp	r2, r3
 800b038:	d201      	bcs.n	800b03e <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800b03a:	2300      	movs	r3, #0
 800b03c:	e015      	b.n	800b06a <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff fed7 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b044:	4601      	mov	r1, r0
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	18cc      	adds	r4, r1, r3
 800b04e:	6838      	ldr	r0, [r7, #0]
 800b050:	f7ff fecf 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b054:	4603      	mov	r3, r0
 800b056:	4619      	mov	r1, r3
 800b058:	4620      	mov	r0, r4
 800b05a:	f7ff fd13 	bl	800aa84 <_ZN12SimpleString6StrCmpEPKcS1_>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	bf0c      	ite	eq
 800b064:	2301      	moveq	r3, #1
 800b066:	2300      	movne	r3, #0
 800b068:	b2db      	uxtb	r3, r3
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd90      	pop	{r4, r7, pc}

0800b072 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b086      	sub	sp, #24
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff feb6 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b086:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800b088:	2300      	movs	r3, #0
 800b08a:	60fb      	str	r3, [r7, #12]
    if (*str){
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d008      	beq.n	800b0a6 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800b094:	6838      	ldr	r0, [r7, #0]
 800b096:	f7ff feac 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b09a:	4603      	mov	r3, r0
 800b09c:	4619      	mov	r1, r3
 800b09e:	6938      	ldr	r0, [r7, #16]
 800b0a0:	f7ff fd92 	bl	800abc8 <_ZN12SimpleString6StrStrEPKcS1_>
 800b0a4:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d014      	beq.n	800b0d8 <_ZNK12SimpleString5countERKS_+0x66>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d011      	beq.n	800b0d8 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	613b      	str	r3, [r7, #16]
        str++;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	613b      	str	r3, [r7, #16]
        num++;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800b0c4:	6838      	ldr	r0, [r7, #0]
 800b0c6:	f7ff fe94 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6938      	ldr	r0, [r7, #16]
 800b0d0:	f7ff fd7a 	bl	800abc8 <_ZN12SimpleString6StrStrEPKcS1_>
 800b0d4:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800b0d6:	e7e6      	b.n	800b0a6 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800b0d8:	697b      	ldr	r3, [r7, #20]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800b0e2:	b590      	push	{r4, r7, lr}
 800b0e4:	b091      	sub	sp, #68	; 0x44
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f7ff ffbe 	bl	800b072 <_ZNK12SimpleString5countERKS_>
 800b0f6:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800b0f8:	68b9      	ldr	r1, [r7, #8]
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f7ff ff82 	bl	800b004 <_ZNK12SimpleString8endsWithERKS_>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800b106:	2300      	movs	r3, #0
 800b108:	e000      	b.n	800b10c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800b10a:	2301      	movs	r3, #1
 800b10c:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800b10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	4413      	add	r3, r2
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 f95c 	bl	800c3d4 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7ff fe68 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b122:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800b124:	2300      	movs	r3, #0
 800b126:	63bb      	str	r3, [r7, #56]	; 0x38
 800b128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d235      	bcs.n	800b19c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800b130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b132:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800b134:	68b8      	ldr	r0, [r7, #8]
 800b136:	f7ff fe5c 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b13a:	4603      	mov	r3, r0
 800b13c:	4619      	mov	r1, r3
 800b13e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b140:	f7ff fd42 	bl	800abc8 <_ZN12SimpleString6StrStrEPKcS1_>
 800b144:	4603      	mov	r3, r0
 800b146:	3301      	adds	r3, #1
 800b148:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800b14a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 f9db 	bl	800c508 <_ZN22SimpleStringCollectionixEj>
 800b152:	4604      	mov	r4, r0
 800b154:	f107 031c 	add.w	r3, r7, #28
 800b158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff fe55 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800b160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	f107 0014 	add.w	r0, r7, #20
 800b16a:	f107 011c 	add.w	r1, r7, #28
 800b16e:	2200      	movs	r2, #0
 800b170:	f000 fb0c 	bl	800b78c <_ZNK12SimpleString9subStringEjj>
 800b174:	f107 0314 	add.w	r3, r7, #20
 800b178:	4619      	mov	r1, r3
 800b17a:	4620      	mov	r0, r4
 800b17c:	f7ff feb1 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800b180:	f107 0314 	add.w	r3, r7, #20
 800b184:	4618      	mov	r0, r3
 800b186:	f000 f9f8 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800b18a:	f107 031c 	add.w	r3, r7, #28
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 f9f3 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	3301      	adds	r3, #1
 800b198:	63bb      	str	r3, [r7, #56]	; 0x38
 800b19a:	e7c5      	b.n	800b128 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d015      	beq.n	800b1ce <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800b1a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 f9af 	bl	800c508 <_ZN22SimpleStringCollectionixEj>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fe29 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800b1b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f7ff fe8f 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800b1c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 f9d6 	bl	800b57a <_ZN12SimpleStringD1Ev>
    }
}
 800b1ce:	bf00      	nop
 800b1d0:	3744      	adds	r7, #68	; 0x44
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd90      	pop	{r4, r7, pc}

0800b1d6 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	70fb      	strb	r3, [r7, #3]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f9a6 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b1ec:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d218      	bcs.n	800b22c <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff fdf9 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b200:	4602      	mov	r2, r0
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	4413      	add	r3, r2
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	78fa      	ldrb	r2, [r7, #3]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	bf0c      	ite	eq
 800b20e:	2301      	moveq	r3, #1
 800b210:	2300      	movne	r3, #0
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d005      	beq.n	800b224 <_ZN12SimpleString7replaceEcc+0x4e>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4413      	add	r3, r2
 800b220:	78ba      	ldrb	r2, [r7, #2]
 800b222:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	3301      	adds	r3, #1
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	e7e2      	b.n	800b1f2 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b08e      	sub	sp, #56	; 0x38
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800b240:	f107 0310 	add.w	r3, r7, #16
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff fddf 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800b24c:	f107 0310 	add.w	r3, r7, #16
 800b250:	4619      	mov	r1, r3
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f7ff ff0d 	bl	800b072 <_ZNK12SimpleString5countERKS_>
 800b258:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b25a:	f107 0310 	add.w	r3, r7, #16
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 f98b 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d071      	beq.n	800b34e <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f000 f964 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b270:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800b272:	68b8      	ldr	r0, [r7, #8]
 800b274:	f7ff fc28 	bl	800aac8 <_ZN12SimpleString6StrLenEPKc>
 800b278:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff fc24 	bl	800aac8 <_ZN12SimpleString6StrLenEPKc>
 800b280:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b286:	fb02 f203 	mul.w	r2, r2, r3
 800b28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28c:	441a      	add	r2, r3
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b292:	fb01 f303 	mul.w	r3, r1, r3
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	3301      	adds	r3, #1
 800b29a:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d951      	bls.n	800b346 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800b2a2:	f240 129d 	movw	r2, #413	; 0x19d
 800b2a6:	492c      	ldr	r1, [pc, #176]	; (800b358 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800b2a8:	69f8      	ldr	r0, [r7, #28]
 800b2aa:	f7ff fb33 	bl	800a914 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b2ae:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	633b      	str	r3, [r7, #48]	; 0x30
 800b2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d236      	bcs.n	800b32e <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff fd96 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	4413      	add	r3, r2
 800b2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ce:	68b9      	ldr	r1, [r7, #8]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff fc16 	bl	800ab02 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	bf0c      	ite	eq
 800b2dc:	2301      	moveq	r3, #1
 800b2de:	2300      	movne	r3, #0
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d011      	beq.n	800b30a <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	18d0      	adds	r0, r2, r3
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	f7ff fc33 	bl	800ab5e <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800b2f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800b300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	4413      	add	r3, r2
 800b306:	637b      	str	r3, [r7, #52]	; 0x34
 800b308:	e7d6      	b.n	800b2b8 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff fd71 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b310:	4602      	mov	r2, r0
 800b312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b314:	441a      	add	r2, r3
 800b316:	69b9      	ldr	r1, [r7, #24]
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	440b      	add	r3, r1
 800b31c:	7812      	ldrb	r2, [r2, #0]
 800b31e:	701a      	strb	r2, [r3, #0]
                j++;
 800b320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b322:	3301      	adds	r3, #1
 800b324:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800b326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b328:	3301      	adds	r3, #1
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800b32c:	e7c4      	b.n	800b2b8 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	3b01      	subs	r3, #1
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	4413      	add	r3, r2
 800b336:	2200      	movs	r2, #0
 800b338:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800b33a:	69fa      	ldr	r2, [r7, #28]
 800b33c:	69b9      	ldr	r1, [r7, #24]
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7ff fd1c 	bl	800ad7c <_ZN12SimpleString19setInternalBufferToEPcj>
 800b344:	e004      	b.n	800b350 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f7ff fcca 	bl	800ace0 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800b34c:	e000      	b.n	800b350 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800b34e:	bf00      	nop
}
 800b350:	3738      	adds	r7, #56	; 0x38
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	08022218 	.word	0x08022218

0800b35c <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800b35c:	b590      	push	{r4, r7, lr}
 800b35e:	b089      	sub	sp, #36	; 0x24
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800b366:	493b      	ldr	r1, [pc, #236]	; (800b454 <_ZNK12SimpleString9printableEv+0xf8>)
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff fd4e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800b36e:	6838      	ldr	r0, [r7, #0]
 800b370:	f000 f876 	bl	800b460 <_ZNK12SimpleString16getPrintableSizeEv>
 800b374:	4603      	mov	r3, r0
 800b376:	3301      	adds	r3, #1
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff fcde 	bl	800ad3c <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800b380:	6838      	ldr	r0, [r7, #0]
 800b382:	f000 f8d9 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b386:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800b38c:	2300      	movs	r3, #0
 800b38e:	61bb      	str	r3, [r7, #24]
 800b390:	69ba      	ldr	r2, [r7, #24]
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	429a      	cmp	r2, r3
 800b396:	d252      	bcs.n	800b43e <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	4413      	add	r3, r2
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800b3a4:	7cfb      	ldrb	r3, [r7, #19]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 fb43 	bl	800ba32 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d012      	beq.n	800b3d8 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	18d0      	adds	r0, r2, r3
 800b3ba:	7cfb      	ldrb	r3, [r7, #19]
 800b3bc:	3b07      	subs	r3, #7
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	4b25      	ldr	r3, [pc, #148]	; (800b458 <_ZNK12SimpleString9printableEv+0xfc>)
 800b3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	f7ff fbc7 	bl	800ab5e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	3302      	adds	r3, #2
 800b3d4:	61fb      	str	r3, [r7, #28]
 800b3d6:	e02e      	b.n	800b436 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800b3d8:	7cfb      	ldrb	r3, [r7, #19]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 fb15 	bl	800ba0a <_ZN12SimpleString9isControlEc>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d01e      	beq.n	800b424 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800b3e6:	7cfa      	ldrb	r2, [r7, #19]
 800b3e8:	f107 0308 	add.w	r3, r7, #8
 800b3ec:	491b      	ldr	r1, [pc, #108]	; (800b45c <_ZNK12SimpleString9printableEv+0x100>)
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 fdca 	bl	800bf88 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	18d4      	adds	r4, r2, r3
 800b3fc:	f107 0308 	add.w	r3, r7, #8
 800b400:	4618      	mov	r0, r3
 800b402:	f000 f88d 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800b406:	4603      	mov	r3, r0
 800b408:	2204      	movs	r2, #4
 800b40a:	4619      	mov	r1, r3
 800b40c:	4620      	mov	r0, r4
 800b40e:	f7ff fba6 	bl	800ab5e <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	3304      	adds	r3, #4
 800b416:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800b418:	f107 0308 	add.w	r3, r7, #8
 800b41c:	4618      	mov	r0, r3
 800b41e:	f000 f8ac 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800b422:	e008      	b.n	800b436 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	4413      	add	r3, r2
 800b42c:	7cfa      	ldrb	r2, [r7, #19]
 800b42e:	701a      	strb	r2, [r3, #0]
            j++;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	3301      	adds	r3, #1
 800b434:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	3301      	adds	r3, #1
 800b43a:	61bb      	str	r3, [r7, #24]
 800b43c:	e7a8      	b.n	800b390 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	4413      	add	r3, r2
 800b446:	2200      	movs	r2, #0
 800b448:	701a      	strb	r2, [r3, #0]

    return result;
 800b44a:	bf00      	nop
}
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	3724      	adds	r7, #36	; 0x24
 800b450:	46bd      	mov	sp, r7
 800b452:	bd90      	pop	{r4, r7, pc}
 800b454:	080222d8 	.word	0x080222d8
 800b458:	2000006c 	.word	0x2000006c
 800b45c:	080222dc 	.word	0x080222dc

0800b460 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f865 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b46e:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800b474:	2300      	movs	r3, #0
 800b476:	613b      	str	r3, [r7, #16]
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d21e      	bcs.n	800b4be <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	4413      	add	r3, r2
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800b48c:	7afb      	ldrb	r3, [r7, #11]
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 facf 	bl	800ba32 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	3301      	adds	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e009      	b.n	800b4b6 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800b4a2:	7afb      	ldrb	r3, [r7, #11]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fab0 	bl	800ba0a <_ZN12SimpleString9isControlEc>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	3303      	adds	r3, #3
 800b4b4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	613b      	str	r3, [r7, #16]
 800b4bc:	e7dc      	b.n	800b478 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800b4be:	697b      	ldr	r3, [r7, #20]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800b4c8:	b590      	push	{r4, r7, lr}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7ff fcec 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f82c 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b4e0:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	60fb      	str	r3, [r7, #12]
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d213      	bcs.n	800b516 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff fc7f 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	7819      	ldrb	r1, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	18d4      	adds	r4, r2, r3
 800b504:	4608      	mov	r0, r1
 800b506:	f7ff fb8a 	bl	800ac1e <_ZN12SimpleString7ToLowerEc>
 800b50a:	4603      	mov	r3, r0
 800b50c:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3301      	adds	r3, #1
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	e7e7      	b.n	800b4e6 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800b516:	bf00      	nop
}
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd90      	pop	{r4, r7, pc}

0800b520 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff fc62 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b52e:	4603      	mov	r3, r0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff fc56 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b546:	4603      	mov	r3, r0
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff fabd 	bl	800aac8 <_ZN12SimpleString6StrLenEPKc>
 800b54e:	4603      	mov	r3, r0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f7ff ffe9 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bf0c      	ite	eq
 800b56c:	2301      	moveq	r3, #1
 800b56e:	2300      	movne	r3, #0
 800b570:	b2db      	uxtb	r3, r3
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff fb90 	bl	800aca8 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800b592:	b590      	push	{r4, r7, lr}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff ffbf 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	6838      	ldr	r0, [r7, #0]
 800b5a6:	f7ff ffbb 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff fa68 	bl	800aa84 <_ZN12SimpleString6StrCmpEPKcS1_>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bf0c      	ite	eq
 800b5ba:	2301      	moveq	r3, #1
 800b5bc:	2300      	movne	r3, #0
 800b5be:	b2db      	uxtb	r3, r3
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd90      	pop	{r4, r7, pc}

0800b5c8 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800b5d2:	f107 0308 	add.w	r3, r7, #8
 800b5d6:	6879      	ldr	r1, [r7, #4]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff ff75 	bl	800b4c8 <_ZNK12SimpleString9lowerCaseEv>
 800b5de:	f107 0310 	add.w	r3, r7, #16
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff ff6f 	bl	800b4c8 <_ZNK12SimpleString9lowerCaseEv>
 800b5ea:	f107 0210 	add.w	r2, r7, #16
 800b5ee:	f107 0308 	add.w	r3, r7, #8
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7ff ffcc 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	461c      	mov	r4, r3
 800b5fe:	f107 0310 	add.w	r3, r7, #16
 800b602:	4618      	mov	r0, r3
 800b604:	f7ff ffb9 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff ffb4 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800b612:	4623      	mov	r3, r4
}
 800b614:	4618      	mov	r0, r3
 800b616:	371c      	adds	r7, #28
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd90      	pop	{r4, r7, pc}

0800b61c <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7ff ffb2 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 800b62e:	4603      	mov	r3, r0
 800b630:	f083 0301 	eor.w	r3, r3, #1
 800b634:	b2db      	uxtb	r3, r3
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b084      	sub	sp, #16
 800b642:	af00      	add	r7, sp, #0
 800b644:	60f8      	str	r0, [r7, #12]
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800b64a:	68b8      	ldr	r0, [r7, #8]
 800b64c:	f7ff fbd1 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b650:	4603      	mov	r3, r0
 800b652:	4619      	mov	r1, r3
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff fbd8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff fbc9 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b660:	4603      	mov	r3, r0
 800b662:	4619      	mov	r1, r3
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 f817 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    return t;
 800b66a:	bf00      	nop
}
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800b67e:	6838      	ldr	r0, [r7, #0]
 800b680:	f7ff fbb7 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b684:	4603      	mov	r3, r0
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f805 	bl	800b698 <_ZN12SimpleStringpLEPKc>
 800b68e:	4603      	mov	r3, r0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff ff48 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b6a8:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800b6aa:	6838      	ldr	r0, [r7, #0]
 800b6ac:	f7ff fa0c 	bl	800aac8 <_ZN12SimpleString6StrLenEPKc>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7ff fb97 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	68f9      	ldr	r1, [r7, #12]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f000 f941 	bl	800b950 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800b6ce:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7ff fa3f 	bl	800ab5e <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff fb49 	bl	800ad7c <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800b6ea:	687b      	ldr	r3, [r7, #4]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800b6f4:	b590      	push	{r4, r7, lr}
 800b6f6:	b08b      	sub	sp, #44	; 0x2c
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7ff ff18 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b708:	4604      	mov	r4, r0
 800b70a:	68b8      	ldr	r0, [r7, #8]
 800b70c:	f7ff ff14 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b710:	4603      	mov	r3, r0
 800b712:	429c      	cmp	r4, r3
 800b714:	bf8c      	ite	hi
 800b716:	2301      	movhi	r3, #1
 800b718:	2300      	movls	r3, #0
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d006      	beq.n	800b72e <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800b720:	79fb      	ldrb	r3, [r7, #7]
 800b722:	461a      	mov	r2, r3
 800b724:	68f9      	ldr	r1, [r7, #12]
 800b726:	68b8      	ldr	r0, [r7, #8]
 800b728:	f7ff ffe4 	bl	800b6f4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800b72c:	e02b      	b.n	800b786 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800b736:	68b8      	ldr	r0, [r7, #8]
 800b738:	f7ff fefe 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b73c:	4604      	mov	r4, r0
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff fefa 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b744:	4603      	mov	r3, r0
 800b746:	1ae2      	subs	r2, r4, r3
 800b748:	f107 0114 	add.w	r1, r7, #20
 800b74c:	f107 0320 	add.w	r3, r7, #32
 800b750:	4618      	mov	r0, r3
 800b752:	f7ff fb75 	bl	800ae40 <_ZN12SimpleStringC1EPKcj>
 800b756:	f107 0318 	add.w	r3, r7, #24
 800b75a:	f107 0120 	add.w	r1, r7, #32
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	4618      	mov	r0, r3
 800b762:	f7ff ff6c 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800b766:	f107 0318 	add.w	r3, r7, #24
 800b76a:	4619      	mov	r1, r3
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7ff fbb8 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800b772:	f107 0318 	add.w	r3, r7, #24
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff feff 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800b77c:	f107 0320 	add.w	r3, r7, #32
 800b780:	4618      	mov	r0, r3
 800b782:	f7ff fefa 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800b786:	372c      	adds	r7, #44	; 0x2c
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd90      	pop	{r4, r7, pc}

0800b78c <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800b79a:	68b8      	ldr	r0, [r7, #8]
 800b79c:	f7ff fecc 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	bf8c      	ite	hi
 800b7aa:	2301      	movhi	r3, #1
 800b7ac:	2300      	movls	r3, #0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d004      	beq.n	800b7be <_ZNK12SimpleString9subStringEjj+0x32>
 800b7b4:	4919      	ldr	r1, [pc, #100]	; (800b81c <_ZNK12SimpleString9subStringEjj+0x90>)
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f7ff fb27 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800b7bc:	e029      	b.n	800b812 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f7ff fb17 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	441a      	add	r2, r3
 800b7ca:	f107 0310 	add.w	r3, r7, #16
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7ff fb1a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800b7d6:	f107 0310 	add.w	r3, r7, #16
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff feac 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	bf34      	ite	cc
 800b7e8:	2301      	movcc	r3, #1
 800b7ea:	2300      	movcs	r3, #0
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d004      	beq.n	800b7fc <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	701a      	strb	r2, [r3, #0]

    return newString;
 800b7fc:	f107 0310 	add.w	r3, r7, #16
 800b800:	4619      	mov	r1, r3
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f7ff fb55 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800b808:	f107 0310 	add.w	r3, r7, #16
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff feb4 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	080222d8 	.word	0x080222d8

0800b820 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f04f 33ff 	mov.w	r3, #4294967295
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	68b9      	ldr	r1, [r7, #8]
 800b836:	f7ff ffa9 	bl	800b78c <_ZNK12SimpleString9subStringEjj>
}
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7ff fad0 	bl	800adf2 <_ZNK12SimpleString9getBufferEv>
 800b852:	4602      	mov	r2, r0
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	4413      	add	r3, r2
 800b858:	781b      	ldrb	r3, [r3, #0]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b082      	sub	sp, #8
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	460b      	mov	r3, r1
 800b86c:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800b86e:	78fb      	ldrb	r3, [r7, #3]
 800b870:	461a      	mov	r2, r3
 800b872:	2100      	movs	r1, #0
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f805 	bl	800b884 <_ZNK12SimpleString8findFromEjc>
 800b87a:	4603      	mov	r3, r0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	4613      	mov	r3, r2
 800b890:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff fe50 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800b898:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d213      	bcs.n	800b8ce <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800b8a6:	6979      	ldr	r1, [r7, #20]
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7ff ffca 	bl	800b842 <_ZNK12SimpleString2atEj>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	bf0c      	ite	eq
 800b8b8:	2301      	moveq	r3, #1
 800b8ba:	2300      	movne	r3, #0
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <_ZNK12SimpleString8findFromEjc+0x42>
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	e005      	b.n	800b8d2 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	e7e7      	b.n	800b89e <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800b8ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	71fb      	strb	r3, [r7, #7]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800b8f2:	79fb      	ldrb	r3, [r7, #7]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	68b8      	ldr	r0, [r7, #8]
 800b8f8:	f7ff ffb3 	bl	800b862 <_ZNK12SimpleString4findEc>
 800b8fc:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b904:	d104      	bne.n	800b910 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800b906:	4911      	ldr	r1, [pc, #68]	; (800b94c <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff fa7e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800b90e:	e019      	b.n	800b944 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800b910:	79bb      	ldrb	r3, [r7, #6]
 800b912:	461a      	mov	r2, r3
 800b914:	6979      	ldr	r1, [r7, #20]
 800b916:	68b8      	ldr	r0, [r7, #8]
 800b918:	f7ff ffb4 	bl	800b884 <_ZNK12SimpleString8findFromEjc>
 800b91c:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b924:	d106      	bne.n	800b934 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	68b9      	ldr	r1, [r7, #8]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff ff77 	bl	800b820 <_ZNK12SimpleString9subStringEj>
 800b932:	e007      	b.n	800b944 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	f7ff ff24 	bl	800b78c <_ZNK12SimpleString9subStringEjj>
}
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	080222d8 	.word	0x080222d8

0800b950 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800b95a:	f240 2275 	movw	r2, #629	; 0x275
 800b95e:	490a      	ldr	r1, [pc, #40]	; (800b988 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800b960:	6838      	ldr	r0, [r7, #0]
 800b962:	f7fe ffd7 	bl	800a914 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b966:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7ff f8f6 	bl	800ab5e <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	3b01      	subs	r3, #1
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	4413      	add	r3, r2
 800b97a:	2200      	movs	r2, #0
 800b97c:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800b97e:	68fb      	ldr	r3, [r7, #12]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	08022218 	.word	0x08022218

0800b98c <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800b996:	79fb      	ldrb	r3, [r7, #7]
 800b998:	2b2f      	cmp	r3, #47	; 0x2f
 800b99a:	d904      	bls.n	800b9a6 <_ZN12SimpleString7isDigitEc+0x1a>
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	2b39      	cmp	r3, #57	; 0x39
 800b9a0:	d801      	bhi.n	800b9a6 <_ZN12SimpleString7isDigitEc+0x1a>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e000      	b.n	800b9a8 <_ZN12SimpleString7isDigitEc+0x1c>
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	d005      	beq.n	800b9d0 <_ZN12SimpleString7isSpaceEc+0x1c>
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	2b08      	cmp	r3, #8
 800b9c8:	d904      	bls.n	800b9d4 <_ZN12SimpleString7isSpaceEc+0x20>
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
 800b9cc:	2b0d      	cmp	r3, #13
 800b9ce:	d801      	bhi.n	800b9d4 <_ZN12SimpleString7isSpaceEc+0x20>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e000      	b.n	800b9d6 <_ZN12SimpleString7isSpaceEc+0x22>
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	2b40      	cmp	r3, #64	; 0x40
 800b9f0:	d904      	bls.n	800b9fc <_ZN12SimpleString7isUpperEc+0x1a>
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	2b5a      	cmp	r3, #90	; 0x5a
 800b9f6:	d801      	bhi.n	800b9fc <_ZN12SimpleString7isUpperEc+0x1a>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e000      	b.n	800b9fe <_ZN12SimpleString7isUpperEc+0x1c>
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	b083      	sub	sp, #12
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	4603      	mov	r3, r0
 800ba12:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800ba14:	79fb      	ldrb	r3, [r7, #7]
 800ba16:	2b1f      	cmp	r3, #31
 800ba18:	d902      	bls.n	800ba20 <_ZN12SimpleString9isControlEc+0x16>
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	2b7f      	cmp	r3, #127	; 0x7f
 800ba1e:	d101      	bne.n	800ba24 <_ZN12SimpleString9isControlEc+0x1a>
 800ba20:	2301      	movs	r3, #1
 800ba22:	e000      	b.n	800ba26 <_ZN12SimpleString9isControlEc+0x1c>
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	4603      	mov	r3, r0
 800ba3a:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	2b06      	cmp	r3, #6
 800ba40:	d904      	bls.n	800ba4c <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800ba42:	79fb      	ldrb	r3, [r7, #7]
 800ba44:	2b0d      	cmp	r3, #13
 800ba46:	d801      	bhi.n	800ba4c <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e000      	b.n	800ba4e <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
	...

0800ba5c <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <_Z10StringFromb+0x16>
 800ba6e:	4a06      	ldr	r2, [pc, #24]	; (800ba88 <_Z10StringFromb+0x2c>)
 800ba70:	e000      	b.n	800ba74 <_Z10StringFromb+0x18>
 800ba72:	4a06      	ldr	r2, [pc, #24]	; (800ba8c <_Z10StringFromb+0x30>)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4906      	ldr	r1, [pc, #24]	; (800ba90 <_Z10StringFromb+0x34>)
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 fa85 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	080222e4 	.word	0x080222e4
 800ba8c:	080222ec 	.word	0x080222ec
 800ba90:	080222f4 	.word	0x080222f4

0800ba94 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff f9b2 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
}
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
	...

0800bab0 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800bab0:	b590      	push	{r4, r7, lr}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800baba:	2400      	movs	r4, #0
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00e      	beq.n	800bae0 <_Z25PrintableStringFromOrNullPKc+0x30>
 800bac2:	f107 0308 	add.w	r3, r7, #8
 800bac6:	6839      	ldr	r1, [r7, #0]
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff ffe3 	bl	800ba94 <_Z10StringFromPKc>
 800bace:	2401      	movs	r4, #1
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f107 0208 	add.w	r2, r7, #8
 800bad6:	4611      	mov	r1, r2
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff fc3f 	bl	800b35c <_ZNK12SimpleString9printableEv>
 800bade:	e004      	b.n	800baea <_Z25PrintableStringFromOrNullPKc+0x3a>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	4908      	ldr	r1, [pc, #32]	; (800bb04 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7ff ffd5 	bl	800ba94 <_Z10StringFromPKc>
 800baea:	2c00      	cmp	r4, #0
 800baec:	d004      	beq.n	800baf8 <_Z25PrintableStringFromOrNullPKc+0x48>
 800baee:	f107 0308 	add.w	r3, r7, #8
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff fd41 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800baf8:	bf00      	nop
}
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd90      	pop	{r4, r7, pc}
 800bb02:	bf00      	nop
 800bb04:	080222f8 	.word	0x080222f8

0800bb08 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	4904      	ldr	r1, [pc, #16]	; (800bb28 <_Z10StringFromi+0x20>)
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fa35 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	08022300 	.word	0x08022300

0800bb2c <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	4904      	ldr	r1, [pc, #16]	; (800bb4c <_Z10StringFroml+0x20>)
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 fa23 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	08022304 	.word	0x08022304

0800bb50 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800bb5a:	f107 0308 	add.w	r3, r7, #8
 800bb5e:	4910      	ldr	r1, [pc, #64]	; (800bba0 <_Z10StringFromPKv+0x50>)
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7ff f952 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800bb66:	f107 0310 	add.w	r3, r7, #16
 800bb6a:	6839      	ldr	r1, [r7, #0]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 f9a1 	bl	800beb4 <_Z13HexStringFromPKv>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f107 0210 	add.w	r2, r7, #16
 800bb78:	f107 0108 	add.w	r1, r7, #8
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff fd5e 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800bb82:	f107 0310 	add.w	r3, r7, #16
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff fcf7 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bb8c:	f107 0308 	add.w	r3, r7, #8
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7ff fcf2 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bb96:	bf00      	nop
}
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	08022308 	.word	0x08022308

0800bba4 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800bbae:	f107 0308 	add.w	r3, r7, #8
 800bbb2:	4910      	ldr	r1, [pc, #64]	; (800bbf4 <_Z10StringFromPFvvE+0x50>)
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff f928 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800bbba:	f107 0310 	add.w	r3, r7, #16
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 f98b 	bl	800bedc <_Z13HexStringFromPFvvE>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f107 0210 	add.w	r2, r7, #16
 800bbcc:	f107 0108 	add.w	r1, r7, #8
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7ff fd34 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800bbd6:	f107 0310 	add.w	r3, r7, #16
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff fccd 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bbe0:	f107 0308 	add.w	r3, r7, #8
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7ff fcc8 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bbea:	bf00      	nop
}
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	08022308 	.word	0x08022308

0800bbf8 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	4904      	ldr	r1, [pc, #16]	; (800bc18 <_Z13HexStringFroml+0x20>)
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f000 f9bd 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	0802230c 	.word	0x0802230c

0800bc1c <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	4904      	ldr	r1, [pc, #16]	; (800bc3c <_Z13HexStringFromi+0x20>)
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 f9ab 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	08022310 	.word	0x08022310

0800bc40 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800bc4c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4912      	ldr	r1, [pc, #72]	; (800bc9c <_Z13HexStringFroma+0x5c>)
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 f997 	bl	800bf88 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800bc5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	da16      	bge.n	800bc90 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f7ff fc68 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800bc68:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	1e9a      	subs	r2, r3, #2
 800bc6e:	f107 030c 	add.w	r3, r7, #12
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7ff fdd3 	bl	800b820 <_ZNK12SimpleString9subStringEj>
 800bc7a:	f107 030c 	add.w	r3, r7, #12
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff f92e 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800bc86:	f107 030c 	add.w	r3, r7, #12
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff fc75 	bl	800b57a <_ZN12SimpleStringD1Ev>
    }
    return result;
 800bc90:	bf00      	nop
}
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	08022310 	.word	0x08022310

0800bca0 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	4904      	ldr	r1, [pc, #16]	; (800bcc0 <_Z13HexStringFromm+0x20>)
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 f969 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	0802230c 	.word	0x0802230c

0800bcc4 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	4904      	ldr	r1, [pc, #16]	; (800bce4 <_Z13HexStringFromj+0x20>)
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 f957 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	08022310 	.word	0x08022310

0800bce8 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bcf2:	f107 0308 	add.w	r3, r7, #8
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff ff8f 	bl	800bc1c <_Z13HexStringFromi>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f107 0208 	add.w	r2, r7, #8
 800bd04:	4611      	mov	r1, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 f87e 	bl	800be08 <_Z26BracketsFormattedHexString12SimpleString>
 800bd0c:	f107 0308 	add.w	r3, r7, #8
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7ff fc32 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bd16:	bf00      	nop
}
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bd2a:	f107 0308 	add.w	r3, r7, #8
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff ffc7 	bl	800bcc4 <_Z13HexStringFromj>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f107 0208 	add.w	r2, r7, #8
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 f862 	bl	800be08 <_Z26BracketsFormattedHexString12SimpleString>
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff fc16 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bd4e:	bf00      	nop
}
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bd62:	f107 0308 	add.w	r3, r7, #8
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7ff ff45 	bl	800bbf8 <_Z13HexStringFroml>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f107 0208 	add.w	r2, r7, #8
 800bd74:	4611      	mov	r1, r2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 f846 	bl	800be08 <_Z26BracketsFormattedHexString12SimpleString>
 800bd7c:	f107 0308 	add.w	r3, r7, #8
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fbfa 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bd86:	bf00      	nop
}
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bd9a:	f107 0308 	add.w	r3, r7, #8
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7ff ff7d 	bl	800bca0 <_Z13HexStringFromm>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f107 0208 	add.w	r2, r7, #8
 800bdac:	4611      	mov	r1, r2
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 f82a 	bl	800be08 <_Z26BracketsFormattedHexString12SimpleString>
 800bdb4:	f107 0308 	add.w	r3, r7, #8
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fbde 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bdbe:	bf00      	nop
}
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800bdd4:	f107 0308 	add.w	r3, r7, #8
 800bdd8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800bddc:	4611      	mov	r1, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff ff2e 	bl	800bc40 <_Z13HexStringFroma>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f107 0208 	add.w	r2, r7, #8
 800bdea:	4611      	mov	r1, r2
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f80b 	bl	800be08 <_Z26BracketsFormattedHexString12SimpleString>
 800bdf2:	f107 0308 	add.w	r3, r7, #8
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff fbbf 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800bdfc:	bf00      	nop
}
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
	...

0800be08 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b088      	sub	sp, #32
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800be12:	f107 0310 	add.w	r3, r7, #16
 800be16:	4917      	ldr	r1, [pc, #92]	; (800be74 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fe fff6 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800be1e:	f107 0308 	add.w	r3, r7, #8
 800be22:	f107 0110 	add.w	r1, r7, #16
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff fc08 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800be2e:	f107 0318 	add.w	r3, r7, #24
 800be32:	4911      	ldr	r1, [pc, #68]	; (800be78 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe ffe8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f107 0218 	add.w	r2, r7, #24
 800be40:	f107 0108 	add.w	r1, r7, #8
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff fbfa 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800be4a:	f107 0318 	add.w	r3, r7, #24
 800be4e:	4618      	mov	r0, r3
 800be50:	f7ff fb93 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800be54:	f107 0308 	add.w	r3, r7, #8
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff fb8e 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800be5e:	f107 0310 	add.w	r3, r7, #16
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff fb89 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800be68:	bf00      	nop
}
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	3720      	adds	r7, #32
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	08022314 	.word	0x08022314
 800be78:	08022318 	.word	0x08022318

0800be7c <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800be84:	1d3b      	adds	r3, r7, #4
 800be86:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800bea0:	1d3b      	adds	r3, r7, #4
 800bea2:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800bebe:	6838      	ldr	r0, [r7, #0]
 800bec0:	f7ff ffdc 	bl	800be7c <_ZL25convertPointerToLongValuePKv>
 800bec4:	4602      	mov	r2, r0
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4903      	ldr	r1, [pc, #12]	; (800bed8 <_Z13HexStringFromPKv+0x24>)
 800beca:	4618      	mov	r0, r3
 800becc:	f000 f85c 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	0802230c 	.word	0x0802230c

0800bedc <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800bee6:	6838      	ldr	r0, [r7, #0]
 800bee8:	f7ff ffd6 	bl	800be98 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800beec:	4602      	mov	r2, r0
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4903      	ldr	r1, [pc, #12]	; (800bf00 <_Z13HexStringFromPFvvE+0x24>)
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f848 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	0802230c 	.word	0x0802230c

0800bf04 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af02      	add	r7, sp, #8
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	ed87 0b00 	vstr	d0, [r7]
 800bf10:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800bf12:	4b18      	ldr	r3, [pc, #96]	; (800bf74 <_Z10StringFromdi+0x70>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	ed97 0b00 	vldr	d0, [r7]
 800bf1a:	4798      	blx	r3
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	bf14      	ite	ne
 800bf22:	2301      	movne	r3, #1
 800bf24:	2300      	moveq	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d004      	beq.n	800bf36 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800bf2c:	4912      	ldr	r1, [pc, #72]	; (800bf78 <_Z10StringFromdi+0x74>)
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7fe ff6b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800bf34:	e01a      	b.n	800bf6c <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800bf36:	4b11      	ldr	r3, [pc, #68]	; (800bf7c <_Z10StringFromdi+0x78>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	ed97 0b00 	vldr	d0, [r7]
 800bf3e:	4798      	blx	r3
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	bf14      	ite	ne
 800bf46:	2301      	movne	r3, #1
 800bf48:	2300      	moveq	r3, #0
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d004      	beq.n	800bf5a <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800bf50:	490b      	ldr	r1, [pc, #44]	; (800bf80 <_Z10StringFromdi+0x7c>)
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f7fe ff59 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800bf58:	e008      	b.n	800bf6c <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf60:	e9cd 2300 	strd	r2, r3, [sp]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	4907      	ldr	r1, [pc, #28]	; (800bf84 <_Z10StringFromdi+0x80>)
 800bf68:	f000 f80e 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	200000e8 	.word	0x200000e8
 800bf78:	0802234c 	.word	0x0802234c
 800bf7c:	200000ec 	.word	0x200000ec
 800bf80:	08022360 	.word	0x08022360
 800bf84:	08022370 	.word	0x08022370

0800bf88 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800bf88:	b40e      	push	{r1, r2, r3}
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b087      	sub	sp, #28
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800bf92:	4910      	ldr	r1, [pc, #64]	; (800bfd4 <_Z16StringFromFormatPKcz+0x4c>)
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7fe ff38 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800bf9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf9e:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800bfa0:	f107 0310 	add.w	r3, r7, #16
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 f839 	bl	800c020 <_Z17VStringFromFormatPKcSt9__va_list>
 800bfae:	f107 0310 	add.w	r3, r7, #16
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7fe ff94 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800bfba:	f107 0310 	add.w	r3, r7, #16
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff fadb 	bl	800b57a <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800bfc4:	bf00      	nop
}
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	371c      	adds	r7, #28
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfd0:	b003      	add	sp, #12
 800bfd2:	4770      	bx	lr
 800bfd4:	080222d8 	.word	0x080222d8

0800bfd8 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	4904      	ldr	r1, [pc, #16]	; (800bff8 <_Z10StringFromj+0x20>)
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7ff ffcd 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	0802237c 	.word	0x0802237c

0800bffc <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	4904      	ldr	r1, [pc, #16]	; (800c01c <_Z10StringFromm+0x20>)
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7ff ffbb 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	08022380 	.word	0x08022380

0800c020 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800c020:	b590      	push	{r4, r7, lr}
 800c022:	b0a7      	sub	sp, #156	; 0x9c
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800c030:	492e      	ldr	r1, [pc, #184]	; (800c0ec <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f7fe fee9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800c038:	4b2d      	ldr	r3, [pc, #180]	; (800c0f0 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800c03a:	681c      	ldr	r4, [r3, #0]
 800c03c:	f107 0014 	add.w	r0, r7, #20
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	2164      	movs	r1, #100	; 0x64
 800c046:	47a0      	blx	r4
 800c048:	4603      	mov	r3, r0
 800c04a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800c04e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c052:	2b63      	cmp	r3, #99	; 0x63
 800c054:	d813      	bhi.n	800c07e <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800c056:	f107 0214 	add.w	r2, r7, #20
 800c05a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c05e:	4611      	mov	r1, r2
 800c060:	4618      	mov	r0, r3
 800c062:	f7fe fed2 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800c066:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c06a:	4619      	mov	r1, r3
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f7fe ff38 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800c072:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff fa7f 	bl	800b57a <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800c07c:	e031      	b.n	800c0e2 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800c07e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c082:	3301      	adds	r3, #1
 800c084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800c088:	f240 32c3 	movw	r2, #963	; 0x3c3
 800c08c:	4919      	ldr	r1, [pc, #100]	; (800c0f4 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800c08e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c092:	f7fe fc3f 	bl	800a914 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c096:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800c09a:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800c09c:	681c      	ldr	r4, [r3, #0]
 800c09e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c0a6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c0aa:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800c0ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c0b0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe fea8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800c0ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c0be:	4619      	mov	r1, r3
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f7fe ff0e 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800c0c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7ff fa55 	bl	800b57a <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800c0d0:	f240 33c7 	movw	r3, #967	; 0x3c7
 800c0d4:	4a07      	ldr	r2, [pc, #28]	; (800c0f4 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800c0d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c0da:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800c0de:	f7fe fc2d 	bl	800a93c <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800c0e2:	bf00      	nop
}
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	379c      	adds	r7, #156	; 0x9c
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd90      	pop	{r4, r7, pc}
 800c0ec:	080222d8 	.word	0x080222d8
 800c0f0:	200000b0 	.word	0x200000b0
 800c0f4:	08022218 	.word	0x08022218

0800c0f8 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	; 0x28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800c104:	491f      	ldr	r1, [pc, #124]	; (800c184 <_Z16StringFromBinaryPKhj+0x8c>)
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f7fe fe7f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800c10c:	2300      	movs	r3, #0
 800c10e:	627b      	str	r3, [r7, #36]	; 0x24
 800c110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	429a      	cmp	r2, r3
 800c116:	d219      	bcs.n	800c14c <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11c:	4413      	add	r3, r2
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	461a      	mov	r2, r3
 800c122:	f107 0314 	add.w	r3, r7, #20
 800c126:	4918      	ldr	r1, [pc, #96]	; (800c188 <_Z16StringFromBinaryPKhj+0x90>)
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff ff2d 	bl	800bf88 <_Z16StringFromFormatPKcz>
 800c12e:	f107 0314 	add.w	r3, r7, #20
 800c132:	4619      	mov	r1, r3
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7ff fa9d 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800c13a:	f107 0314 	add.w	r3, r7, #20
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff fa1b 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	3301      	adds	r3, #1
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
 800c14a:	e7e1      	b.n	800c110 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7ff f9f3 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800c152:	4603      	mov	r3, r0
 800c154:	3b01      	subs	r3, #1
 800c156:	f107 001c 	add.w	r0, r7, #28
 800c15a:	2200      	movs	r2, #0
 800c15c:	68f9      	ldr	r1, [r7, #12]
 800c15e:	f7ff fb15 	bl	800b78c <_ZNK12SimpleString9subStringEjj>
 800c162:	f107 031c 	add.w	r3, r7, #28
 800c166:	4619      	mov	r1, r3
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7fe feba 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800c16e:	f107 031c 	add.w	r3, r7, #28
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff fa01 	bl	800b57a <_ZN12SimpleStringD1Ev>

    return result;
 800c178:	bf00      	nop
}
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	3728      	adds	r7, #40	; 0x28
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	080222d8 	.word	0x080222d8
 800c188:	08022384 	.word	0x08022384

0800c18c <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d006      	beq.n	800c1ac <_Z22StringFromBinaryOrNullPKhj+0x20>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7ff ffa7 	bl	800c0f8 <_Z16StringFromBinaryPKhj>
 800c1aa:	e004      	b.n	800c1b6 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4904      	ldr	r1, [pc, #16]	; (800c1c0 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7ff fc6f 	bl	800ba94 <_Z10StringFromPKc>
}
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	080222f8 	.word	0x080222f8

0800c1c4 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	4913      	ldr	r1, [pc, #76]	; (800c224 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7ff fed6 	bl	800bf88 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b80      	cmp	r3, #128	; 0x80
 800c1e0:	bf28      	it	cs
 800c1e2:	2380      	movcs	r3, #128	; 0x80
 800c1e4:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800c1e6:	f107 0314 	add.w	r3, r7, #20
 800c1ea:	69fa      	ldr	r2, [r7, #28]
 800c1ec:	68b9      	ldr	r1, [r7, #8]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7ff ffcc 	bl	800c18c <_Z22StringFromBinaryOrNullPKhj>
 800c1f4:	f107 0314 	add.w	r3, r7, #20
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7ff fa3a 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800c200:	f107 0314 	add.w	r3, r7, #20
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff f9b8 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d903      	bls.n	800c21a <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800c212:	4905      	ldr	r1, [pc, #20]	; (800c228 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f7ff fa3f 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800c21a:	bf00      	nop
}
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	3720      	adds	r7, #32
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	0802238c 	.word	0x0802238c
 800c228:	080223a8 	.word	0x080223a8

0800c22c <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d006      	beq.n	800c24c <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	4618      	mov	r0, r3
 800c246:	f7ff ffbd 	bl	800c1c4 <_Z24StringFromBinaryWithSizePKhj>
 800c24a:	e004      	b.n	800c256 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4904      	ldr	r1, [pc, #16]	; (800c260 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800c250:	4618      	mov	r0, r3
 800c252:	f7ff fc1f 	bl	800ba94 <_Z10StringFromPKc>
}
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	080222f8 	.word	0x080222f8

0800c264 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
 800c270:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800c272:	4925      	ldr	r1, [pc, #148]	; (800c308 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f7fe fdc8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d802      	bhi.n	800c286 <_Z20StringFromMaskedBitsmmj+0x22>
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	e000      	b.n	800c288 <_Z20StringFromMaskedBitsmmj+0x24>
 800c286:	2320      	movs	r3, #32
 800c288:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	2201      	movs	r2, #1
 800c290:	fa02 f303 	lsl.w	r3, r2, r3
 800c294:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800c296:	2300      	movs	r3, #0
 800c298:	61fb      	str	r3, [r7, #28]
 800c29a:	69fa      	ldr	r2, [r7, #28]
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d22d      	bcs.n	800c2fe <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00c      	beq.n	800c2c6 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <_Z20StringFromMaskedBitsmmj+0x56>
 800c2b6:	4b15      	ldr	r3, [pc, #84]	; (800c30c <_Z20StringFromMaskedBitsmmj+0xa8>)
 800c2b8:	e000      	b.n	800c2bc <_Z20StringFromMaskedBitsmmj+0x58>
 800c2ba:	4b15      	ldr	r3, [pc, #84]	; (800c310 <_Z20StringFromMaskedBitsmmj+0xac>)
 800c2bc:	4619      	mov	r1, r3
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f7ff f9ea 	bl	800b698 <_ZN12SimpleStringpLEPKc>
 800c2c4:	e003      	b.n	800c2ce <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800c2c6:	4913      	ldr	r1, [pc, #76]	; (800c314 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f7ff f9e5 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	f003 0307 	and.w	r3, r3, #7
 800c2d4:	2b07      	cmp	r3, #7
 800c2d6:	d108      	bne.n	800c2ea <_Z20StringFromMaskedBitsmmj+0x86>
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	69fa      	ldr	r2, [r7, #28]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d003      	beq.n	800c2ea <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800c2e2:	490d      	ldr	r1, [pc, #52]	; (800c318 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7ff f9d7 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	61fb      	str	r3, [r7, #28]
 800c2fc:	e7cd      	b.n	800c29a <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800c2fe:	bf00      	nop
}
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	080222d8 	.word	0x080222d8
 800c30c:	080223b0 	.word	0x080223b0
 800c310:	080223b4 	.word	0x080223b4
 800c314:	080223b8 	.word	0x080223b8
 800c318:	080223bc 	.word	0x080223bc

0800c31c <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	4b18      	ldr	r3, [pc, #96]	; (800c38c <_Z23StringFromOrdinalNumberj+0x70>)
 800c32a:	fba3 1302 	umull	r1, r3, r3, r2
 800c32e:	08d9      	lsrs	r1, r3, #3
 800c330:	460b      	mov	r3, r1
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	440b      	add	r3, r1
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	2b0a      	cmp	r3, #10
 800c340:	d905      	bls.n	800c34e <_Z23StringFromOrdinalNumberj+0x32>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b0d      	cmp	r3, #13
 800c346:	d802      	bhi.n	800c34e <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800c348:	4b11      	ldr	r3, [pc, #68]	; (800c390 <_Z23StringFromOrdinalNumberj+0x74>)
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	e013      	b.n	800c376 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2b03      	cmp	r3, #3
 800c352:	d102      	bne.n	800c35a <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800c354:	4b0f      	ldr	r3, [pc, #60]	; (800c394 <_Z23StringFromOrdinalNumberj+0x78>)
 800c356:	60fb      	str	r3, [r7, #12]
 800c358:	e00d      	b.n	800c376 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d102      	bne.n	800c366 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800c360:	4b0d      	ldr	r3, [pc, #52]	; (800c398 <_Z23StringFromOrdinalNumberj+0x7c>)
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e007      	b.n	800c376 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d102      	bne.n	800c372 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800c36c:	4b0b      	ldr	r3, [pc, #44]	; (800c39c <_Z23StringFromOrdinalNumberj+0x80>)
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	e001      	b.n	800c376 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800c372:	4b07      	ldr	r3, [pc, #28]	; (800c390 <_Z23StringFromOrdinalNumberj+0x74>)
 800c374:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	4908      	ldr	r1, [pc, #32]	; (800c3a0 <_Z23StringFromOrdinalNumberj+0x84>)
 800c37e:	f7ff fe03 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	cccccccd 	.word	0xcccccccd
 800c390:	080223c0 	.word	0x080223c0
 800c394:	080223c4 	.word	0x080223c4
 800c398:	080223c8 	.word	0x080223c8
 800c39c:	080223cc 	.word	0x080223cc
 800c3a0:	080223d0 	.word	0x080223d0

0800c3a4 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4907      	ldr	r1, [pc, #28]	; (800c3d0 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe fd29 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	60da      	str	r2, [r3, #12]
}
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	080222d8 	.word	0x080222d8

0800c3d4 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800c3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d01e      	beq.n	800c424 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	3b04      	subs	r3, #4
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	18d4      	adds	r4, r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	429c      	cmp	r4, r3
 800c3fc:	d004      	beq.n	800c408 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800c3fe:	3c08      	subs	r4, #8
 800c400:	4620      	mov	r0, r4
 800c402:	f7ff f8ba 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800c406:	e7f6      	b.n	800c3f6 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f1a3 0208 	sub.w	r2, r3, #8
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3b04      	subs	r3, #4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	4619      	mov	r1, r3
 800c41e:	4610      	mov	r0, r2
 800c420:	f7fc f976 	bl	8008710 <_ZdaPvj>

    size_ = _size;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68dc      	ldr	r4, [r3, #12]
 800c42e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800c432:	d202      	bcs.n	800c43a <_ZN22SimpleStringCollection8allocateEj+0x66>
 800c434:	1c63      	adds	r3, r4, #1
 800c436:	00db      	lsls	r3, r3, #3
 800c438:	e001      	b.n	800c43e <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800c43a:	f04f 33ff 	mov.w	r3, #4294967295
 800c43e:	f240 4227 	movw	r2, #1063	; 0x427
 800c442:	4910      	ldr	r1, [pc, #64]	; (800c484 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800c444:	4618      	mov	r0, r3
 800c446:	f7fc f941 	bl	80086cc <_ZnajPKci>
 800c44a:	4605      	mov	r5, r0
 800c44c:	1d2b      	adds	r3, r5, #4
 800c44e:	3b04      	subs	r3, #4
 800c450:	2208      	movs	r2, #8
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	1d2b      	adds	r3, r5, #4
 800c456:	601c      	str	r4, [r3, #0]
 800c458:	f105 0308 	add.w	r3, r5, #8
 800c45c:	1e62      	subs	r2, r4, #1
 800c45e:	4614      	mov	r4, r2
 800c460:	461e      	mov	r6, r3
 800c462:	2c00      	cmp	r4, #0
 800c464:	db06      	blt.n	800c474 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800c466:	4908      	ldr	r1, [pc, #32]	; (800c488 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800c468:	4630      	mov	r0, r6
 800c46a:	f7fe fcce 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800c46e:	3608      	adds	r6, #8
 800c470:	3c01      	subs	r4, #1
 800c472:	e7f6      	b.n	800c462 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800c474:	f105 0208 	add.w	r2, r5, #8
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	601a      	str	r2, [r3, #0]
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c484:	08022218 	.word	0x08022218
 800c488:	080222d8 	.word	0x080222d8

0800c48c <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d01e      	beq.n	800c4da <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3b04      	subs	r3, #4
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	18d4      	adds	r4, r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	429c      	cmp	r4, r3
 800c4b2:	d004      	beq.n	800c4be <_ZN22SimpleStringCollectionD1Ev+0x32>
 800c4b4:	3c08      	subs	r4, #8
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f7ff f85f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800c4bc:	e7f6      	b.n	800c4ac <_ZN22SimpleStringCollectionD1Ev+0x20>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f1a3 0208 	sub.w	r2, r3, #8
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	3b04      	subs	r3, #4
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	f7fc f91b 	bl	8008710 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7ff f84b 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd90      	pop	{r4, r7, pc}

0800c4ee <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b083      	sub	sp, #12
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
    return size_;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68db      	ldr	r3, [r3, #12]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
	...

0800c508 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d315      	bcc.n	800c548 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	1d1c      	adds	r4, r3, #4
 800c520:	f107 0308 	add.w	r3, r7, #8
 800c524:	490d      	ldr	r1, [pc, #52]	; (800c55c <_ZN22SimpleStringCollectionixEj+0x54>)
 800c526:	4618      	mov	r0, r3
 800c528:	f7fe fc6f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800c52c:	f107 0308 	add.w	r3, r7, #8
 800c530:	4619      	mov	r1, r3
 800c532:	4620      	mov	r0, r4
 800c534:	f7fe fcd5 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800c538:	f107 0308 	add.w	r3, r7, #8
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff f81c 	bl	800b57a <_ZN12SimpleStringD1Ev>
        return empty_;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3304      	adds	r3, #4
 800c546:	e004      	b.n	800c552 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	00db      	lsls	r3, r3, #3
 800c550:	4413      	add	r3, r2
}
 800c552:	4618      	mov	r0, r3
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	bd90      	pop	{r4, r7, pc}
 800c55a:	bf00      	nop
 800c55c:	080222d8 	.word	0x080222d8

0800c560 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fa fb88 	bl	8006c80 <_ZN17ConsoleTestOutputC1Ev>
 800c570:	4a08      	ldr	r2, [pc, #32]	; (800c594 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	611a      	str	r2, [r3, #16]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	3314      	adds	r3, #20
 800c580:	4905      	ldr	r1, [pc, #20]	; (800c598 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe fc41 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
{
}
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	08025894 	.word	0x08025894
 800c598:	080223d8 	.word	0x080223d8

0800c59c <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	4a08      	ldr	r2, [pc, #32]	; (800c5c8 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	601a      	str	r2, [r3, #0]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	3314      	adds	r3, #20
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe ffe3 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fa fb74 	bl	8006ca4 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	08025894 	.word	0x08025894

0800c5cc <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
}
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ffe1 	bl	800c59c <_ZN18TeamCityTestOutputD1Ev>
 800c5da:	211c      	movs	r1, #28
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7fc f865 	bl	80086ac <_ZdlPvj>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	332c      	adds	r3, #44	; 0x2c
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	492b      	ldr	r1, [pc, #172]	; (800c6b0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800c602:	4610      	mov	r0, r2
 800c604:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800c606:	f107 0308 	add.w	r3, r7, #8
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f004 fdf7 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 800c612:	f107 0308 	add.w	r3, r7, #8
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe ff82 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800c61c:	4603      	mov	r3, r0
 800c61e:	4619      	mov	r1, r3
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f919 	bl	800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fe ffa5 	bl	800b57a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	332c      	adds	r3, #44	; 0x2c
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	491e      	ldr	r1, [pc, #120]	; (800c6b4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800c63c:	4610      	mov	r0, r2
 800c63e:	4798      	blx	r3
    if (!test.willRun()) {
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3318      	adds	r3, #24
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	6838      	ldr	r0, [r7, #0]
 800c64a:	4798      	blx	r3
 800c64c:	4603      	mov	r3, r0
 800c64e:	f083 0301 	eor.w	r3, r3, #1
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d024      	beq.n	800c6a2 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	332c      	adds	r3, #44	; 0x2c
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4915      	ldr	r1, [pc, #84]	; (800c6b8 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800c664:	4610      	mov	r0, r2
 800c666:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800c668:	f107 0310 	add.w	r3, r7, #16
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	4618      	mov	r0, r3
 800c670:	f004 fdc6 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 800c674:	f107 0310 	add.w	r3, r7, #16
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fe ff51 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800c67e:	4603      	mov	r3, r0
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f8e8 	bl	800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c688:	f107 0310 	add.w	r3, r7, #16
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe ff74 	bl	800b57a <_ZN12SimpleStringD1Ev>
        print("']\n");
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	332c      	adds	r3, #44	; 0x2c
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4905      	ldr	r1, [pc, #20]	; (800c6b4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800c69e:	4610      	mov	r0, r2
 800c6a0:	4798      	blx	r3
    }
    currtest_ = &test;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	611a      	str	r2, [r3, #16]
}
 800c6a8:	bf00      	nop
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	080223dc 	.word	0x080223dc
 800c6b4:	080223fc 	.word	0x080223fc
 800c6b8:	08022400 	.word	0x08022400

0800c6bc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800c6bc:	b5b0      	push	{r4, r5, r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d03b      	beq.n	800c746 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	332c      	adds	r3, #44	; 0x2c
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	491d      	ldr	r1, [pc, #116]	; (800c750 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800c6da:	4610      	mov	r0, r2
 800c6dc:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691a      	ldr	r2, [r3, #16]
 800c6e2:	f107 0308 	add.w	r3, r7, #8
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f004 fd89 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 800c6ee:	f107 0308 	add.w	r3, r7, #8
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe ff14 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f8ab 	bl	800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c702:	f107 0308 	add.w	r3, r7, #8
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe ff37 	bl	800b57a <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	332c      	adds	r3, #44	; 0x2c
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	490f      	ldr	r1, [pc, #60]	; (800c754 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800c718:	4610      	mov	r0, r2
 800c71a:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800c71c:	687d      	ldr	r5, [r7, #4]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3334      	adds	r3, #52	; 0x34
 800c724:	681c      	ldr	r4, [r3, #0]
 800c726:	6838      	ldr	r0, [r7, #0]
 800c728:	f004 fa0a 	bl	8010b40 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800c72c:	4603      	mov	r3, r0
 800c72e:	4619      	mov	r1, r3
 800c730:	4628      	mov	r0, r5
 800c732:	47a0      	blx	r4
    print("']\n");
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	332c      	adds	r3, #44	; 0x2c
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4906      	ldr	r1, [pc, #24]	; (800c758 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800c740:	4610      	mov	r0, r2
 800c742:	4798      	blx	r3
 800c744:	e000      	b.n	800c748 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800c746:	bf00      	nop
}
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bdb0      	pop	{r4, r5, r7, pc}
 800c74e:	bf00      	nop
 800c750:	08022420 	.word	0x08022420
 800c754:	08022440 	.word	0x08022440
 800c758:	080223fc 	.word	0x080223fc

0800c75c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800c75c:	b590      	push	{r4, r7, lr}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f103 0414 	add.w	r4, r3, #20
 800c76c:	f107 0308 	add.w	r3, r7, #8
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	4618      	mov	r0, r3
 800c774:	f004 fd53 	bl	801121e <_ZNK10UtestShell8getGroupEv>
 800c778:	f107 0308 	add.w	r3, r7, #8
 800c77c:	4619      	mov	r1, r3
 800c77e:	4620      	mov	r0, r4
 800c780:	f7fe fbaf 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800c784:	f107 0308 	add.w	r3, r7, #8
 800c788:	4618      	mov	r0, r3
 800c78a:	f7fe fef6 	bl	800b57a <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	332c      	adds	r3, #44	; 0x2c
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	490c      	ldr	r1, [pc, #48]	; (800c7cc <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800c79a:	4610      	mov	r0, r2
 800c79c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	3314      	adds	r3, #20
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe febc 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f853 	bl	800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	332c      	adds	r3, #44	; 0x2c
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4904      	ldr	r1, [pc, #16]	; (800c7d0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800c7be:	4610      	mov	r0, r2
 800c7c0:	4798      	blx	r3
}
 800c7c2:	bf00      	nop
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd90      	pop	{r4, r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	08022450 	.word	0x08022450
 800c7d0:	080223fc 	.word	0x080223fc

0800c7d4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800c7d4:	b590      	push	{r4, r7, lr}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f103 0414 	add.w	r4, r3, #20
 800c7e4:	f107 0308 	add.w	r3, r7, #8
 800c7e8:	4918      	ldr	r1, [pc, #96]	; (800c84c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe fb0d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800c7f0:	f107 0308 	add.w	r3, r7, #8
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f7fe fecb 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	461c      	mov	r4, r3
 800c800:	f107 0308 	add.w	r3, r7, #8
 800c804:	4618      	mov	r0, r3
 800c806:	f7fe feb8 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800c80a:	2c00      	cmp	r4, #0
 800c80c:	d11a      	bne.n	800c844 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	332c      	adds	r3, #44	; 0x2c
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	490d      	ldr	r1, [pc, #52]	; (800c850 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800c81a:	4610      	mov	r0, r2
 800c81c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3314      	adds	r3, #20
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fe7c 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800c828:	4603      	mov	r3, r0
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f813 	bl	800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	332c      	adds	r3, #44	; 0x2c
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4905      	ldr	r1, [pc, #20]	; (800c854 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800c83e:	4610      	mov	r0, r2
 800c840:	4798      	blx	r3
 800c842:	e000      	b.n	800c846 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800c844:	bf00      	nop
}
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd90      	pop	{r4, r7, pc}
 800c84c:	080223d8 	.word	0x080223d8
 800c850:	08022474 	.word	0x08022474
 800c854:	080223fc 	.word	0x080223fc

0800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
    while (*s) {
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d03f      	beq.n	800c8ea <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b27      	cmp	r3, #39	; 0x27
 800c870:	d00b      	beq.n	800c88a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b7c      	cmp	r3, #124	; 0x7c
 800c878:	d007      	beq.n	800c88a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b5b      	cmp	r3, #91	; 0x5b
 800c880:	d003      	beq.n	800c88a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	2b5d      	cmp	r3, #93	; 0x5d
 800c888:	d107      	bne.n	800c89a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800c88a:	237c      	movs	r3, #124	; 0x7c
 800c88c:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	73bb      	strb	r3, [r7, #14]
 800c898:	e01a      	b.n	800c8d0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	2b0d      	cmp	r3, #13
 800c8a0:	d106      	bne.n	800c8b0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800c8a2:	237c      	movs	r3, #124	; 0x7c
 800c8a4:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800c8a6:	2372      	movs	r3, #114	; 0x72
 800c8a8:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	73bb      	strb	r3, [r7, #14]
 800c8ae:	e00f      	b.n	800c8d0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b0a      	cmp	r3, #10
 800c8b6:	d106      	bne.n	800c8c6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800c8b8:	237c      	movs	r3, #124	; 0x7c
 800c8ba:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800c8bc:	236e      	movs	r3, #110	; 0x6e
 800c8be:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	73bb      	strb	r3, [r7, #14]
 800c8c4:	e004      	b.n	800c8d0 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3328      	adds	r3, #40	; 0x28
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f107 010c 	add.w	r1, r7, #12
 800c8de:	4610      	mov	r0, r2
 800c8e0:	4798      	blx	r3
        s++;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	603b      	str	r3, [r7, #0]
    while (*s) {
 800c8e8:	e7bb      	b.n	800c862 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800c8ea:	bf00      	nop
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
	...

0800c8f4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800c8f4:	b5b0      	push	{r4, r5, r7, lr}
 800c8f6:	b08a      	sub	sp, #40	; 0x28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	332c      	adds	r3, #44	; 0x2c
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4968      	ldr	r1, [pc, #416]	; (800caac <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800c90a:	4610      	mov	r0, r2
 800c90c:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3310      	adds	r3, #16
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f107 0208 	add.w	r2, r7, #8
 800c91a:	6839      	ldr	r1, [r7, #0]
 800c91c:	4610      	mov	r0, r2
 800c91e:	4798      	blx	r3
 800c920:	f107 0308 	add.w	r3, r7, #8
 800c924:	4618      	mov	r0, r3
 800c926:	f7fe fdfb 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800c92a:	4603      	mov	r3, r0
 800c92c:	4619      	mov	r1, r3
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f7ff ff92 	bl	800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800c934:	f107 0308 	add.w	r3, r7, #8
 800c938:	4618      	mov	r0, r3
 800c93a:	f7fe fe1e 	bl	800b57a <_ZN12SimpleStringD1Ev>
    print("' message='");
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	332c      	adds	r3, #44	; 0x2c
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4959      	ldr	r1, [pc, #356]	; (800cab0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800c94a:	4610      	mov	r0, r2
 800c94c:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800c94e:	6838      	ldr	r0, [r7, #0]
 800c950:	f000 fa15 	bl	800cd7e <_ZNK11TestFailure17isOutsideTestFileEv>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d105      	bne.n	800c966 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800c95a:	6838      	ldr	r0, [r7, #0]
 800c95c:	f000 fa21 	bl	800cda2 <_ZNK11TestFailure18isInHelperFunctionEv>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800c966:	2301      	movs	r3, #1
 800c968:	e000      	b.n	800c96c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800c96a:	2300      	movs	r3, #0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d042      	beq.n	800c9f6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	332c      	adds	r3, #44	; 0x2c
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	494e      	ldr	r1, [pc, #312]	; (800cab4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800c97c:	4610      	mov	r0, r2
 800c97e:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800c980:	687d      	ldr	r5, [r7, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	332c      	adds	r3, #44	; 0x2c
 800c988:	681c      	ldr	r4, [r3, #0]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	331c      	adds	r3, #28
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f107 0210 	add.w	r2, r7, #16
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	4610      	mov	r0, r2
 800c99a:	4798      	blx	r3
 800c99c:	f107 0310 	add.w	r3, r7, #16
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fe fdbd 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	47a0      	blx	r4
 800c9ae:	f107 0310 	add.w	r3, r7, #16
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fe fde1 	bl	800b57a <_ZN12SimpleStringD1Ev>
        print(":");
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	332c      	adds	r3, #44	; 0x2c
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	493d      	ldr	r1, [pc, #244]	; (800cab8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800c9c4:	4610      	mov	r0, r2
 800c9c6:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800c9c8:	687d      	ldr	r5, [r7, #4]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3334      	adds	r3, #52	; 0x34
 800c9d0:	681c      	ldr	r4, [r3, #0]
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3320      	adds	r3, #32
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	6838      	ldr	r0, [r7, #0]
 800c9dc:	4798      	blx	r3
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	47a0      	blx	r4
        print("): ");
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	332c      	adds	r3, #44	; 0x2c
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4932      	ldr	r1, [pc, #200]	; (800cabc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3308      	adds	r3, #8
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f107 0218 	add.w	r2, r7, #24
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	4610      	mov	r0, r2
 800ca06:	4798      	blx	r3
 800ca08:	f107 0318 	add.w	r3, r7, #24
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe fd87 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800ca12:	4603      	mov	r3, r0
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff ff1e 	bl	800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ca1c:	f107 0318 	add.w	r3, r7, #24
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe fdaa 	bl	800b57a <_ZN12SimpleStringD1Ev>
    print(":");
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	332c      	adds	r3, #44	; 0x2c
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4921      	ldr	r1, [pc, #132]	; (800cab8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800ca32:	4610      	mov	r0, r2
 800ca34:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800ca36:	687d      	ldr	r5, [r7, #4]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3334      	adds	r3, #52	; 0x34
 800ca3e:	681c      	ldr	r4, [r3, #0]
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3314      	adds	r3, #20
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6838      	ldr	r0, [r7, #0]
 800ca4a:	4798      	blx	r3
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	4619      	mov	r1, r3
 800ca50:	4628      	mov	r0, r5
 800ca52:	47a0      	blx	r4

    print("' details='");
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	332c      	adds	r3, #44	; 0x2c
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4918      	ldr	r1, [pc, #96]	; (800cac0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800ca60:	4610      	mov	r0, r2
 800ca62:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3318      	adds	r3, #24
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f107 0220 	add.w	r2, r7, #32
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	4610      	mov	r0, r2
 800ca74:	4798      	blx	r3
 800ca76:	f107 0320 	add.w	r3, r7, #32
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe fd50 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800ca80:	4603      	mov	r3, r0
 800ca82:	4619      	mov	r1, r3
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7ff fee7 	bl	800c858 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ca8a:	f107 0320 	add.w	r3, r7, #32
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fe fd73 	bl	800b57a <_ZN12SimpleStringD1Ev>
    print("']\n");
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	332c      	adds	r3, #44	; 0x2c
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4909      	ldr	r1, [pc, #36]	; (800cac4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800caa0:	4610      	mov	r0, r2
 800caa2:	4798      	blx	r3
}
 800caa4:	bf00      	nop
 800caa6:	3728      	adds	r7, #40	; 0x28
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bdb0      	pop	{r4, r5, r7, pc}
 800caac:	08022498 	.word	0x08022498
 800cab0:	080224b8 	.word	0x080224b8
 800cab4:	080224c4 	.word	0x080224c4
 800cab8:	080224d4 	.word	0x080224d4
 800cabc:	080224d8 	.word	0x080224d8
 800cac0:	080224dc 	.word	0x080224dc
 800cac4:	080223fc 	.word	0x080223fc

0800cac8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800cad4:	4a1a      	ldr	r2, [pc, #104]	; (800cb40 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3314      	adds	r3, #20
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	3204      	adds	r2, #4
 800cae6:	68b9      	ldr	r1, [r7, #8]
 800cae8:	4610      	mov	r0, r2
 800caea:	4798      	blx	r3
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	330c      	adds	r3, #12
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f004 fb84 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3314      	adds	r3, #20
 800cafc:	68b9      	ldr	r1, [r7, #8]
 800cafe:	4618      	mov	r0, r3
 800cb00:	f004 fc4f 	bl	80113a2 <_ZNK10UtestShell7getFileEv>
 800cb04:	68b8      	ldr	r0, [r7, #8]
 800cb06:	f004 fc5b 	bl	80113c0 <_ZNK10UtestShell13getLineNumberEv>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	61da      	str	r2, [r3, #28]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3320      	adds	r3, #32
 800cb14:	68b9      	ldr	r1, [r7, #8]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f004 fc43 	bl	80113a2 <_ZNK10UtestShell7getFileEv>
 800cb1c:	68b8      	ldr	r0, [r7, #8]
 800cb1e:	f004 fc4f 	bl	80113c0 <_ZNK10UtestShell13getLineNumberEv>
 800cb22:	4602      	mov	r2, r0
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	629a      	str	r2, [r3, #40]	; 0x28
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	332c      	adds	r3, #44	; 0x2c
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe f9bf 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
{
}
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	08025b60 	.word	0x08025b60

0800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800cb52:	4a19      	ldr	r2, [pc, #100]	; (800cbb8 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	601a      	str	r2, [r3, #0]
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	3314      	adds	r3, #20
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	3204      	adds	r2, #4
 800cb64:	68b9      	ldr	r1, [r7, #8]
 800cb66:	4610      	mov	r0, r2
 800cb68:	4798      	blx	r3
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	330c      	adds	r3, #12
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f004 fb45 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	3314      	adds	r3, #20
 800cb7a:	6879      	ldr	r1, [r7, #4]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fe f944 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	61da      	str	r2, [r3, #28]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	3320      	adds	r3, #32
 800cb8c:	68b9      	ldr	r1, [r7, #8]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f004 fc07 	bl	80113a2 <_ZNK10UtestShell7getFileEv>
 800cb94:	68b8      	ldr	r0, [r7, #8]
 800cb96:	f004 fc13 	bl	80113c0 <_ZNK10UtestShell13getLineNumberEv>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	629a      	str	r2, [r3, #40]	; 0x28
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	332c      	adds	r3, #44	; 0x2c
 800cba4:	4905      	ldr	r1, [pc, #20]	; (800cbbc <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fe f92f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
{
}
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	08025b60 	.word	0x08025b60
 800cbbc:	080224e8 	.word	0x080224e8

0800cbc0 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800cbca:	4a1e      	ldr	r2, [pc, #120]	; (800cc44 <_ZN11TestFailureC1ERKS_+0x84>)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	601a      	str	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	1d1a      	adds	r2, r3, #4
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	4619      	mov	r1, r3
 800cbda:	4610      	mov	r0, r2
 800cbdc:	f7fe f969 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f103 020c 	add.w	r2, r3, #12
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	330c      	adds	r3, #12
 800cbea:	4619      	mov	r1, r3
 800cbec:	4610      	mov	r0, r2
 800cbee:	f7fe f960 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f103 0214 	add.w	r2, r3, #20
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	3314      	adds	r3, #20
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f7fe f957 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	69da      	ldr	r2, [r3, #28]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	61da      	str	r2, [r3, #28]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f103 0220 	add.w	r2, r3, #32
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	3320      	adds	r3, #32
 800cc16:	4619      	mov	r1, r3
 800cc18:	4610      	mov	r0, r2
 800cc1a:	f7fe f94a 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	629a      	str	r2, [r3, #40]	; 0x28
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	332c      	adds	r3, #44	; 0x2c
 800cc30:	4619      	mov	r1, r3
 800cc32:	4610      	mov	r0, r2
 800cc34:	f7fe f93d 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
{
}
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	08025b60 	.word	0x08025b60

0800cc48 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	4a10      	ldr	r2, [pc, #64]	; (800cc94 <_ZN11TestFailureD1Ev+0x4c>)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	332c      	adds	r3, #44	; 0x2c
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe fc8d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3320      	adds	r3, #32
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fc88 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3314      	adds	r3, #20
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fc83 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	330c      	adds	r3, #12
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe fc7e 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe fc79 	bl	800b57a <_ZN12SimpleStringD1Ev>
{
}
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	08025b60 	.word	0x08025b60

0800cc98 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
}
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7ff ffd1 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800cca6:	2134      	movs	r1, #52	; 0x34
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7fb fcff 	bl	80086ac <_ZdlPvj>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
    return fileName_;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	3314      	adds	r3, #20
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7fe f8f2 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	3320      	adds	r3, #32
 800cce4:	4619      	mov	r1, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7fe f8e3 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
    return testName_;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	3304      	adds	r3, #4
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7fe f8d4 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b082      	sub	sp, #8
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
 800cd1a:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	330c      	adds	r3, #12
 800cd20:	4619      	mov	r1, r3
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7fe f8c5 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	69db      	ldr	r3, [r3, #28]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
    return message_;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	332c      	adds	r3, #44	; 0x2c
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7fe f89e 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	3708      	adds	r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f103 0220 	add.w	r2, r3, #32
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3314      	adds	r3, #20
 800cd90:	4619      	mov	r1, r3
 800cd92:	4610      	mov	r0, r2
 800cd94:	f7fe fc42 	bl	800b61c <_ZneRK12SimpleStringS1_>
 800cd98:	4603      	mov	r3, r0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800cda2:	b480      	push	{r7}
 800cda4:	b083      	sub	sp, #12
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	69da      	ldr	r2, [r3, #28]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	bf34      	ite	cc
 800cdb6:	2301      	movcc	r3, #1
 800cdb8:	2300      	movcs	r3, #0
 800cdba:	b2db      	uxtb	r3, r3
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800cdc8:	b590      	push	{r4, r7, lr}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7fe fba2 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800cddc:	4604      	mov	r4, r0
 800cdde:	6838      	ldr	r0, [r7, #0]
 800cde0:	f7fe fb9e 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800cde4:	4603      	mov	r3, r0
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	4622      	mov	r2, r4
 800cdea:	4903      	ldr	r1, [pc, #12]	; (800cdf8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800cdec:	f7ff f8cc 	bl	800bf88 <_Z16StringFromFormatPKcz>
}
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	3714      	adds	r7, #20
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd90      	pop	{r4, r7, pc}
 800cdf8:	080224f4 	.word	0x080224f4

0800cdfc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800cdfc:	b590      	push	{r4, r7, lr}
 800cdfe:	b097      	sub	sp, #92	; 0x5c
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
 800ce08:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800ce0a:	494c      	ldr	r1, [pc, #304]	; (800cf3c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7fd fffc 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800ce12:	2314      	movs	r3, #20
 800ce14:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800ce16:	230a      	movs	r3, #10
 800ce18:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ce1a:	f107 0320 	add.w	r3, r7, #32
 800ce1e:	220a      	movs	r2, #10
 800ce20:	4947      	ldr	r1, [pc, #284]	; (800cf40 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fe f80c 	bl	800ae40 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ce28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce2c:	f107 0120 	add.w	r1, r7, #32
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fe fc03 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800ce38:	f107 0318 	add.w	r3, r7, #24
 800ce3c:	f107 0220 	add.w	r2, r7, #32
 800ce40:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7fe fbfa 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800ce4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fe fb93 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ce54:	f107 0310 	add.w	r3, r7, #16
 800ce58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce5a:	493a      	ldr	r1, [pc, #232]	; (800cf44 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff f893 	bl	800bf88 <_Z16StringFromFormatPKcz>

    result += "\n";
 800ce62:	4939      	ldr	r1, [pc, #228]	; (800cf48 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f7fe fc17 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800ce6a:	f107 0310 	add.w	r3, r7, #16
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fe fb56 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800ce74:	4604      	mov	r4, r0
 800ce76:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ce7a:	f107 0118 	add.w	r1, r7, #24
 800ce7e:	2314      	movs	r3, #20
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	f7fe fc83 	bl	800b78c <_ZNK12SimpleString9subStringEjj>
 800ce86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fb48 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800ce90:	4603      	mov	r3, r0
 800ce92:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ce96:	4622      	mov	r2, r4
 800ce98:	492c      	ldr	r1, [pc, #176]	; (800cf4c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800ce9a:	f7ff f875 	bl	800bf88 <_Z16StringFromFormatPKcz>
 800ce9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cea2:	4619      	mov	r1, r3
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f7fe fbe5 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800ceaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fe fb63 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800ceb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fe fb5e 	bl	800b57a <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800cebe:	f107 0310 	add.w	r3, r7, #16
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fe fb38 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800cec8:	4603      	mov	r3, r0
 800ceca:	f103 020a 	add.w	r2, r3, #10
 800cece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ced2:	491b      	ldr	r1, [pc, #108]	; (800cf40 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fd ffb3 	bl	800ae40 <_ZN12SimpleStringC1EPKcj>
 800ceda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fb1e 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800cee4:	4602      	mov	r2, r0
 800cee6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ceea:	4919      	ldr	r1, [pc, #100]	; (800cf50 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff f84b 	bl	800bf88 <_Z16StringFromFormatPKcz>
 800cef2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cef6:	4619      	mov	r1, r3
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f7fe fbbb 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800cefe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe fb39 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800cf08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fe fb34 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return result;
 800cf12:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800cf14:	f107 0310 	add.w	r3, r7, #16
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe fb2e 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800cf1e:	f107 0318 	add.w	r3, r7, #24
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe fb29 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800cf28:	f107 0320 	add.w	r3, r7, #32
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fe fb24 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return result;
 800cf32:	bf00      	nop
}
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	375c      	adds	r7, #92	; 0x5c
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd90      	pop	{r4, r7, pc}
 800cf3c:	08022514 	.word	0x08022514
 800cf40:	08022518 	.word	0x08022518
 800cf44:	0802251c 	.word	0x0802251c
 800cf48:	08022544 	.word	0x08022544
 800cf4c:	08022548 	.word	0x08022548
 800cf50:	08022550 	.word	0x08022550

0800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800cf54:	b590      	push	{r4, r7, lr}
 800cf56:	b087      	sub	sp, #28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800cf60:	491a      	ldr	r1, [pc, #104]	; (800cfcc <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f7fd ff51 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7fe faf5 	bl	800b558 <_ZNK12SimpleString7isEmptyEv>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	f083 0301 	eor.w	r3, r3, #1
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d022      	beq.n	800cfc0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800cf7a:	f107 0310 	add.w	r3, r7, #16
 800cf7e:	4914      	ldr	r1, [pc, #80]	; (800cfd0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fd ff42 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800cf86:	f107 0310 	add.w	r3, r7, #16
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7fe f800 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 800cf92:	4603      	mov	r3, r0
 800cf94:	f083 0301 	eor.w	r3, r3, #1
 800cf98:	b2dc      	uxtb	r4, r3
 800cf9a:	f107 0310 	add.w	r3, r7, #16
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fe faeb 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800cfa4:	2c00      	cmp	r4, #0
 800cfa6:	d003      	beq.n	800cfb0 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800cfa8:	490a      	ldr	r1, [pc, #40]	; (800cfd4 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f7fe fb74 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800cfb0:	6879      	ldr	r1, [r7, #4]
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f7fe fb5e 	bl	800b674 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800cfb8:	4907      	ldr	r1, [pc, #28]	; (800cfd8 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f7fe fb6c 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800cfc0:	bf00      	nop
}
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	371c      	adds	r7, #28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd90      	pop	{r4, r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	08022514 	.word	0x08022514
 800cfd0:	08022558 	.word	0x08022558
 800cfd4:	08022564 	.word	0x08022564
 800cfd8:	08022570 	.word	0x08022570

0800cfdc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800cfdc:	b590      	push	{r4, r7, lr}
 800cfde:	b089      	sub	sp, #36	; 0x24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	68b9      	ldr	r1, [r7, #8]
 800cff2:	f7ff fda7 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cff6:	4a19      	ldr	r2, [pc, #100]	; (800d05c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d002:	68f9      	ldr	r1, [r7, #12]
 800d004:	f107 0310 	add.w	r3, r7, #16
 800d008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff ffa2 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d010:	f107 0310 	add.w	r3, r7, #16
 800d014:	4619      	mov	r1, r3
 800d016:	4620      	mov	r0, r4
 800d018:	f7fd ff63 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d01c:	f107 0310 	add.w	r3, r7, #16
 800d020:	4618      	mov	r0, r3
 800d022:	f7fe faaa 	bl	800b57a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d02c:	68f9      	ldr	r1, [r7, #12]
 800d02e:	f107 0018 	add.w	r0, r7, #24
 800d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d036:	f7ff fec7 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d03a:	f107 0318 	add.w	r3, r7, #24
 800d03e:	4619      	mov	r1, r3
 800d040:	4620      	mov	r0, r4
 800d042:	f7fe fb17 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d046:	f107 0318 	add.w	r3, r7, #24
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe fa95 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	4618      	mov	r0, r3
 800d054:	3724      	adds	r7, #36	; 0x24
 800d056:	46bd      	mov	sp, r7
 800d058:	bd90      	pop	{r4, r7, pc}
 800d05a:	bf00      	nop
 800d05c:	08025b34 	.word	0x08025b34

0800d060 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800d060:	b5b0      	push	{r4, r5, r7, lr}
 800d062:	b094      	sub	sp, #80	; 0x50
 800d064:	af00      	add	r7, sp, #0
 800d066:	6278      	str	r0, [r7, #36]	; 0x24
 800d068:	6239      	str	r1, [r7, #32]
 800d06a:	61fa      	str	r2, [r7, #28]
 800d06c:	61bb      	str	r3, [r7, #24]
 800d06e:	ed87 0b04 	vstr	d0, [r7, #16]
 800d072:	ed87 1b02 	vstr	d1, [r7, #8]
 800d076:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800d07a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	69fa      	ldr	r2, [r7, #28]
 800d080:	6a39      	ldr	r1, [r7, #32]
 800d082:	f7ff fd5f 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d086:	4a4a      	ldr	r2, [pc, #296]	; (800d1b0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7ff ff5a 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d0a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7fd ff1b 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d0ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fe fa62 	bl	800b57a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d0bc:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800d0be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d0c2:	2107      	movs	r1, #7
 800d0c4:	ed97 0b04 	vldr	d0, [r7, #16]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe ff1b 	bl	800bf04 <_Z10StringFromdi>
 800d0ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0d2:	2107      	movs	r1, #7
 800d0d4:	ed97 0b02 	vldr	d0, [r7, #8]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fe ff13 	bl	800bf04 <_Z10StringFromdi>
 800d0de:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d0e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d0e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	f7ff fe6c 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d0f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7fe fabc 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d0fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe fa3a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d106:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe fa35 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d114:	4618      	mov	r0, r3
 800d116:	f7fe fa30 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	332c      	adds	r3, #44	; 0x2c
 800d11e:	4925      	ldr	r1, [pc, #148]	; (800d1b4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800d120:	4618      	mov	r0, r3
 800d122:	f7fe fab9 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d12c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d130:	2107      	movs	r1, #7
 800d132:	ed97 0b00 	vldr	d0, [r7]
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe fee4 	bl	800bf04 <_Z10StringFromdi>
 800d13c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d140:	4619      	mov	r1, r3
 800d142:	4620      	mov	r0, r4
 800d144:	f7fe fa96 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d148:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fe fa14 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	332c      	adds	r3, #44	; 0x2c
 800d156:	4918      	ldr	r1, [pc, #96]	; (800d1b8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fe fa9d 	bl	800b698 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800d15e:	4b17      	ldr	r3, [pc, #92]	; (800d1bc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	ed97 0b04 	vldr	d0, [r7, #16]
 800d166:	4798      	blx	r3
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10f      	bne.n	800d18e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800d16e:	4b13      	ldr	r3, [pc, #76]	; (800d1bc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	ed97 0b02 	vldr	d0, [r7, #8]
 800d176:	4798      	blx	r3
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d107      	bne.n	800d18e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800d17e:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	ed97 0b00 	vldr	d0, [r7]
 800d186:	4798      	blx	r3
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800d18e:	2301      	movs	r3, #1
 800d190:	e000      	b.n	800d194 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800d192:	2300      	movs	r3, #0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d005      	beq.n	800d1a4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19a:	332c      	adds	r3, #44	; 0x2c
 800d19c:	4908      	ldr	r1, [pc, #32]	; (800d1c0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe fa7a 	bl	800b698 <_ZN12SimpleStringpLEPKc>
}
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3750      	adds	r7, #80	; 0x50
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bdb0      	pop	{r4, r5, r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	08025b08 	.word	0x08025b08
 800d1b4:	08022574 	.word	0x08022574
 800d1b8:	0802258c 	.word	0x0802258c
 800d1bc:	200000e8 	.word	0x200000e8
 800d1c0:	08022590 	.word	0x08022590

0800d1c4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d1c4:	b590      	push	{r4, r7, lr}
 800d1c6:	b093      	sub	sp, #76	; 0x4c
 800d1c8:	af02      	add	r7, sp, #8
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	68b9      	ldr	r1, [r7, #8]
 800d1da:	f7ff fcb3 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d1de:	4a4f      	ldr	r2, [pc, #316]	; (800d31c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d1ea:	68f9      	ldr	r1, [r7, #12]
 800d1ec:	f107 0320 	add.w	r3, r7, #32
 800d1f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7ff feae 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d1f8:	f107 0320 	add.w	r3, r7, #32
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	4620      	mov	r0, r4
 800d200:	f7fd fe6f 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d204:	f107 0320 	add.w	r3, r7, #32
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fe f9b6 	bl	800b57a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800d20e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d210:	f7fe f986 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800d214:	4602      	mov	r2, r0
 800d216:	f107 0318 	add.w	r3, r7, #24
 800d21a:	4611      	mov	r1, r2
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fc47 	bl	800bab0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800d222:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d224:	f7fe f97c 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800d228:	4602      	mov	r2, r0
 800d22a:	f107 0310 	add.w	r3, r7, #16
 800d22e:	4611      	mov	r1, r2
 800d230:	4618      	mov	r0, r3
 800d232:	f7fe fc3d 	bl	800bab0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d23c:	68f9      	ldr	r1, [r7, #12]
 800d23e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d242:	f107 0310 	add.w	r3, r7, #16
 800d246:	f107 0218 	add.w	r2, r7, #24
 800d24a:	f7ff fdbd 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d24e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d252:	4619      	mov	r1, r3
 800d254:	4620      	mov	r0, r4
 800d256:	f7fe fa0d 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d25a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fe f98b 	bl	800b57a <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800d264:	2300      	movs	r3, #0
 800d266:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d268:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d26a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d26c:	f7fe fae9 	bl	800b842 <_ZNK12SimpleString2atEj>
 800d270:	4603      	mov	r3, r0
 800d272:	461c      	mov	r4, r3
 800d274:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d276:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d278:	f7fe fae3 	bl	800b842 <_ZNK12SimpleString2atEj>
 800d27c:	4603      	mov	r3, r0
 800d27e:	429c      	cmp	r4, r3
 800d280:	bf0c      	ite	eq
 800d282:	2301      	moveq	r3, #1
 800d284:	2300      	movne	r3, #0
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d003      	beq.n	800d294 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800d28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d28e:	3301      	adds	r3, #1
 800d290:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d292:	e7e9      	b.n	800d268 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800d294:	2300      	movs	r3, #0
 800d296:	63bb      	str	r3, [r7, #56]	; 0x38
 800d298:	f107 0310 	add.w	r3, r7, #16
 800d29c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fe facf 	bl	800b842 <_ZNK12SimpleString2atEj>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	461c      	mov	r4, r3
 800d2a8:	f107 0318 	add.w	r3, r7, #24
 800d2ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fe fac7 	bl	800b842 <_ZNK12SimpleString2atEj>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	429c      	cmp	r4, r3
 800d2b8:	bf0c      	ite	eq
 800d2ba:	2301      	moveq	r3, #1
 800d2bc:	2300      	movne	r3, #0
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d003      	beq.n	800d2cc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2ca:	e7e5      	b.n	800d298 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d2d2:	68f9      	ldr	r1, [r7, #12]
 800d2d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d2d8:	f107 0210 	add.w	r2, r7, #16
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e2:	f7ff fd8b 	bl	800cdfc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d2e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f7fe f9c1 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d2f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7fe f93f 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800d2fc:	f107 0310 	add.w	r3, r7, #16
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe f93a 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800d306:	f107 0318 	add.w	r3, r7, #24
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fe f935 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	4618      	mov	r0, r3
 800d314:	3744      	adds	r7, #68	; 0x44
 800d316:	46bd      	mov	sp, r7
 800d318:	bd90      	pop	{r4, r7, pc}
 800d31a:	bf00      	nop
 800d31c:	08025adc 	.word	0x08025adc

0800d320 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800d320:	b590      	push	{r4, r7, lr}
 800d322:	b087      	sub	sp, #28
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	68b9      	ldr	r1, [r7, #8]
 800d336:	f7ff fc05 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d33a:	4a1a      	ldr	r2, [pc, #104]	; (800d3a4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d346:	68f9      	ldr	r1, [r7, #12]
 800d348:	f107 0310 	add.w	r3, r7, #16
 800d34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d34e:	4618      	mov	r0, r3
 800d350:	f7ff fe00 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d354:	f107 0310 	add.w	r3, r7, #16
 800d358:	4619      	mov	r1, r3
 800d35a:	4620      	mov	r0, r4
 800d35c:	f7fd fdc1 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d360:	f107 0310 	add.w	r3, r7, #16
 800d364:	4618      	mov	r0, r3
 800d366:	f7fe f908 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	332c      	adds	r3, #44	; 0x2c
 800d36e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d370:	4618      	mov	r0, r3
 800d372:	f7fe f97f 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	332c      	adds	r3, #44	; 0x2c
 800d37a:	490b      	ldr	r1, [pc, #44]	; (800d3a8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fe f98b 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	332c      	adds	r3, #44	; 0x2c
 800d386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe f973 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	332c      	adds	r3, #44	; 0x2c
 800d392:	4906      	ldr	r1, [pc, #24]	; (800d3ac <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d394:	4618      	mov	r0, r3
 800d396:	f7fe f97f 	bl	800b698 <_ZN12SimpleStringpLEPKc>
}
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	4618      	mov	r0, r3
 800d39e:	371c      	adds	r7, #28
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd90      	pop	{r4, r7, pc}
 800d3a4:	08025ab0 	.word	0x08025ab0
 800d3a8:	080225b4 	.word	0x080225b4
 800d3ac:	080225b8 	.word	0x080225b8

0800d3b0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d3b0:	b5b0      	push	{r4, r5, r7, lr}
 800d3b2:	b088      	sub	sp, #32
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
 800d3bc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	68b9      	ldr	r1, [r7, #8]
 800d3c6:	f7ff fbbd 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d3ca:	4a1c      	ldr	r2, [pc, #112]	; (800d43c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d3d6:	68f9      	ldr	r1, [r7, #12]
 800d3d8:	f107 0310 	add.w	r3, r7, #16
 800d3dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff fdb8 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d3e4:	f107 0310 	add.w	r3, r7, #16
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f7fd fd79 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d3f0:	f107 0310 	add.w	r3, r7, #16
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fe f8c0 	bl	800b57a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d400:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d402:	f7fe f88d 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800d406:	4605      	mov	r5, r0
 800d408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d40a:	f7fe f889 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800d40e:	4603      	mov	r3, r0
 800d410:	f107 0018 	add.w	r0, r7, #24
 800d414:	462a      	mov	r2, r5
 800d416:	490a      	ldr	r1, [pc, #40]	; (800d440 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800d418:	f7fe fdb6 	bl	800bf88 <_Z16StringFromFormatPKcz>
 800d41c:	f107 0318 	add.w	r3, r7, #24
 800d420:	4619      	mov	r1, r3
 800d422:	4620      	mov	r0, r4
 800d424:	f7fe f926 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d428:	f107 0318 	add.w	r3, r7, #24
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fe f8a4 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bdb0      	pop	{r4, r5, r7, pc}
 800d43c:	08025a84 	.word	0x08025a84
 800d440:	080225c4 	.word	0x080225c4

0800d444 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800d444:	b590      	push	{r4, r7, lr}
 800d446:	b087      	sub	sp, #28
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	f7ff fb73 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d45e:	4a1a      	ldr	r2, [pc, #104]	; (800d4c8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d46a:	68f9      	ldr	r1, [r7, #12]
 800d46c:	f107 0310 	add.w	r3, r7, #16
 800d470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fd6e 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d478:	f107 0310 	add.w	r3, r7, #16
 800d47c:	4619      	mov	r1, r3
 800d47e:	4620      	mov	r0, r4
 800d480:	f7fd fd2f 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d484:	f107 0310 	add.w	r3, r7, #16
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fe f876 	bl	800b57a <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	332c      	adds	r3, #44	; 0x2c
 800d492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d494:	4618      	mov	r0, r3
 800d496:	f7fe f8ed 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	332c      	adds	r3, #44	; 0x2c
 800d49e:	490b      	ldr	r1, [pc, #44]	; (800d4cc <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe f8f9 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	332c      	adds	r3, #44	; 0x2c
 800d4aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe f8e1 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	332c      	adds	r3, #44	; 0x2c
 800d4b6:	4906      	ldr	r1, [pc, #24]	; (800d4d0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fe f8ed 	bl	800b698 <_ZN12SimpleStringpLEPKc>
}
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	371c      	adds	r7, #28
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd90      	pop	{r4, r7, pc}
 800d4c8:	08025a58 	.word	0x08025a58
 800d4cc:	080225b4 	.word	0x080225b4
 800d4d0:	080225b8 	.word	0x080225b8

0800d4d4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	68b9      	ldr	r1, [r7, #8]
 800d4ea:	f7ff fb2b 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d4ee:	4a07      	ldr	r2, [pc, #28]	; (800d50c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	332c      	adds	r3, #44	; 0x2c
 800d4f8:	69b9      	ldr	r1, [r7, #24]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fd fcf1 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
}
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	08025714 	.word	0x08025714

0800d510 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800d510:	b590      	push	{r4, r7, lr}
 800d512:	b09d      	sub	sp, #116	; 0x74
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	68b9      	ldr	r1, [r7, #8]
 800d526:	f7ff fb0d 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d52a:	4a5d      	ldr	r2, [pc, #372]	; (800d6a0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d536:	68f9      	ldr	r1, [r7, #12]
 800d538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d53c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fd07 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d54a:	4619      	mov	r1, r3
 800d54c:	4620      	mov	r0, r4
 800d54e:	f7fd fcc8 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d552:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d556:	4618      	mov	r0, r3
 800d558:	f7fe f80f 	bl	800b57a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800d55c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d560:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fae1 	bl	800bb2c <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800d56a:	f107 0320 	add.w	r3, r7, #32
 800d56e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d572:	4618      	mov	r0, r3
 800d574:	f7fe fada 	bl	800bb2c <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d578:	f107 0120 	add.w	r1, r7, #32
 800d57c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d580:	2220      	movs	r2, #32
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe f8b6 	bl	800b6f4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d58c:	4945      	ldr	r1, [pc, #276]	; (800d6a4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fd fc3b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800d594:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d598:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d59c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fe f84c 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d5a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe fbd2 	bl	800bd58 <_Z30BracketsFormattedHexStringFroml>
 800d5b4:	f107 0318 	add.w	r3, r7, #24
 800d5b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d5bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fe f83c 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d5c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fd ffd5 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d5d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7fd ffd0 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d5da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fd ffcb 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d5e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d5e8:	492e      	ldr	r1, [pc, #184]	; (800d6a4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fd fc0d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800d5f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d5f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d5f8:	f107 0120 	add.w	r1, r7, #32
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fe f81e 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d602:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d606:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fe fba4 	bl	800bd58 <_Z30BracketsFormattedHexStringFroml>
 800d610:	f107 0310 	add.w	r3, r7, #16
 800d614:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d618:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe f80e 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d622:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d626:	4618      	mov	r0, r3
 800d628:	f7fd ffa7 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d62c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d630:	4618      	mov	r0, r3
 800d632:	f7fd ffa2 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fd ff9d 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d646:	68f9      	ldr	r1, [r7, #12]
 800d648:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d64c:	f107 0318 	add.w	r3, r7, #24
 800d650:	f107 0210 	add.w	r2, r7, #16
 800d654:	f7ff fbb8 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d658:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d65c:	4619      	mov	r1, r3
 800d65e:	4620      	mov	r0, r4
 800d660:	f7fe f808 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d664:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fd ff86 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d66e:	f107 0310 	add.w	r3, r7, #16
 800d672:	4618      	mov	r0, r3
 800d674:	f7fd ff81 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d678:	f107 0318 	add.w	r3, r7, #24
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fd ff7c 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800d682:	f107 0320 	add.w	r3, r7, #32
 800d686:	4618      	mov	r0, r3
 800d688:	f7fd ff77 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800d68c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d690:	4618      	mov	r0, r3
 800d692:	f7fd ff72 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	4618      	mov	r0, r3
 800d69a:	3774      	adds	r7, #116	; 0x74
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd90      	pop	{r4, r7, pc}
 800d6a0:	08025a2c 	.word	0x08025a2c
 800d6a4:	08022518 	.word	0x08022518

0800d6a8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800d6a8:	b590      	push	{r4, r7, lr}
 800d6aa:	b09d      	sub	sp, #116	; 0x74
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	68b9      	ldr	r1, [r7, #8]
 800d6be:	f7ff fa41 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d6c2:	4a5d      	ldr	r2, [pc, #372]	; (800d838 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d6ce:	68f9      	ldr	r1, [r7, #12]
 800d6d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d6d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7ff fc3b 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d6de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f7fd fbfc 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d6ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fd ff43 	bl	800b57a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800d6f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fe fc7d 	bl	800bffc <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800d702:	f107 0320 	add.w	r3, r7, #32
 800d706:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fe fc76 	bl	800bffc <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d710:	f107 0120 	add.w	r1, r7, #32
 800d714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d718:	2220      	movs	r2, #32
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fd ffea 	bl	800b6f4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d724:	4945      	ldr	r1, [pc, #276]	; (800d83c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800d726:	4618      	mov	r0, r3
 800d728:	f7fd fb6f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800d72c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d730:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d734:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fd ff80 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d73e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d742:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d746:	4618      	mov	r0, r3
 800d748:	f7fe fb22 	bl	800bd90 <_Z30BracketsFormattedHexStringFromm>
 800d74c:	f107 0318 	add.w	r3, r7, #24
 800d750:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d754:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d758:	4618      	mov	r0, r3
 800d75a:	f7fd ff70 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d75e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d762:	4618      	mov	r0, r3
 800d764:	f7fd ff09 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d768:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fd ff04 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d776:	4618      	mov	r0, r3
 800d778:	f7fd feff 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d77c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d780:	492e      	ldr	r1, [pc, #184]	; (800d83c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800d782:	4618      	mov	r0, r3
 800d784:	f7fd fb41 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800d788:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d78c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d790:	f107 0120 	add.w	r1, r7, #32
 800d794:	4618      	mov	r0, r3
 800d796:	f7fd ff52 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d79a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d79e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fe faf4 	bl	800bd90 <_Z30BracketsFormattedHexStringFromm>
 800d7a8:	f107 0310 	add.w	r3, r7, #16
 800d7ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d7b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fd ff42 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d7ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fd fedb 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d7c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fd fed6 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d7ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fd fed1 	bl	800b57a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d7de:	68f9      	ldr	r1, [r7, #12]
 800d7e0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d7e4:	f107 0318 	add.w	r3, r7, #24
 800d7e8:	f107 0210 	add.w	r2, r7, #16
 800d7ec:	f7ff faec 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d7f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	f7fd ff3c 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d7fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d800:	4618      	mov	r0, r3
 800d802:	f7fd feba 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d806:	f107 0310 	add.w	r3, r7, #16
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fd feb5 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d810:	f107 0318 	add.w	r3, r7, #24
 800d814:	4618      	mov	r0, r3
 800d816:	f7fd feb0 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800d81a:	f107 0320 	add.w	r3, r7, #32
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fd feab 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800d824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fd fea6 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4618      	mov	r0, r3
 800d832:	3774      	adds	r7, #116	; 0x74
 800d834:	46bd      	mov	sp, r7
 800d836:	bd90      	pop	{r4, r7, pc}
 800d838:	08025a00 	.word	0x08025a00
 800d83c:	08022518 	.word	0x08022518

0800d840 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800d840:	b590      	push	{r4, r7, lr}
 800d842:	b09d      	sub	sp, #116	; 0x74
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
 800d84c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	68b9      	ldr	r1, [r7, #8]
 800d856:	f7ff f975 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d85a:	4a5f      	ldr	r2, [pc, #380]	; (800d9d8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d866:	68f9      	ldr	r1, [r7, #12]
 800d868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d86c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fb6f 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d87a:	4619      	mov	r1, r3
 800d87c:	4620      	mov	r0, r4
 800d87e:	f7fd fb30 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800d882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d886:	4618      	mov	r0, r3
 800d888:	f7fd fe77 	bl	800b57a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800d88c:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800d890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d894:	4611      	mov	r1, r2
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe f936 	bl	800bb08 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800d89c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800d8a0:	f107 0320 	add.w	r3, r7, #32
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe f92e 	bl	800bb08 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800d8ac:	f107 0120 	add.w	r1, r7, #32
 800d8b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d8b4:	2220      	movs	r2, #32
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fd ff1c 	bl	800b6f4 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d8bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d8c0:	4946      	ldr	r1, [pc, #280]	; (800d9dc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fd faa1 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800d8c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d8cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800d8d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fd feb2 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d8da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d8de:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7fe fa6f 	bl	800bdc8 <_Z30BracketsFormattedHexStringFroma>
 800d8ea:	f107 0318 	add.w	r3, r7, #24
 800d8ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800d8f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fd fea1 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d8fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d900:	4618      	mov	r0, r3
 800d902:	f7fd fe3a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fd fe35 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d910:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d914:	4618      	mov	r0, r3
 800d916:	f7fd fe30 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d91a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d91e:	492f      	ldr	r1, [pc, #188]	; (800d9dc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800d920:	4618      	mov	r0, r3
 800d922:	f7fd fa72 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800d926:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d92a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d92e:	f107 0120 	add.w	r1, r7, #32
 800d932:	4618      	mov	r0, r3
 800d934:	f7fd fe83 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d938:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d93c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800d940:	4611      	mov	r1, r2
 800d942:	4618      	mov	r0, r3
 800d944:	f7fe fa40 	bl	800bdc8 <_Z30BracketsFormattedHexStringFroma>
 800d948:	f107 0310 	add.w	r3, r7, #16
 800d94c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d950:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d954:	4618      	mov	r0, r3
 800d956:	f7fd fe72 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 800d95a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fd fe0b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d964:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fd fe06 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800d96e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d972:	4618      	mov	r0, r3
 800d974:	f7fd fe01 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d97e:	68f9      	ldr	r1, [r7, #12]
 800d980:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800d984:	f107 0318 	add.w	r3, r7, #24
 800d988:	f107 0210 	add.w	r2, r7, #16
 800d98c:	f7ff fa1c 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d990:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d994:	4619      	mov	r1, r3
 800d996:	4620      	mov	r0, r4
 800d998:	f7fd fe6c 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800d99c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fd fdea 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800d9a6:	f107 0310 	add.w	r3, r7, #16
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f7fd fde5 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800d9b0:	f107 0318 	add.w	r3, r7, #24
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fd fde0 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800d9ba:	f107 0320 	add.w	r3, r7, #32
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fd fddb 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800d9c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fd fdd6 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3774      	adds	r7, #116	; 0x74
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd90      	pop	{r4, r7, pc}
 800d9d8:	080259d4 	.word	0x080259d4
 800d9dc:	08022518 	.word	0x08022518

0800d9e0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800d9e0:	b590      	push	{r4, r7, lr}
 800d9e2:	b093      	sub	sp, #76	; 0x4c
 800d9e4:	af02      	add	r7, sp, #8
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
 800d9ec:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	68b9      	ldr	r1, [r7, #8]
 800d9f6:	f7ff f8a5 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d9fa:	4a4a      	ldr	r2, [pc, #296]	; (800db24 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da06:	68f9      	ldr	r1, [r7, #12]
 800da08:	f107 0320 	add.w	r3, r7, #32
 800da0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff faa0 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800da14:	f107 0320 	add.w	r3, r7, #32
 800da18:	4619      	mov	r1, r3
 800da1a:	4620      	mov	r0, r4
 800da1c:	f7fd fa61 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800da20:	f107 0320 	add.w	r3, r7, #32
 800da24:	4618      	mov	r0, r3
 800da26:	f7fd fda8 	bl	800b57a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800da2a:	f107 0318 	add.w	r3, r7, #24
 800da2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da30:	4618      	mov	r0, r3
 800da32:	f7fe f83d 	bl	800bab0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800da36:	f107 0310 	add.w	r3, r7, #16
 800da3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe f837 	bl	800bab0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da48:	68f9      	ldr	r1, [r7, #12]
 800da4a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800da4e:	f107 0310 	add.w	r3, r7, #16
 800da52:	f107 0218 	add.w	r2, r7, #24
 800da56:	f7ff f9b7 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800da5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da5e:	4619      	mov	r1, r3
 800da60:	4620      	mov	r0, r4
 800da62:	f7fd fe07 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800da66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fd fd85 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800da70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da72:	2b00      	cmp	r3, #0
 800da74:	d046      	beq.n	800db04 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800da76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d043      	beq.n	800db04 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800da7c:	2300      	movs	r3, #0
 800da7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da84:	4413      	add	r3, r2
 800da86:	781a      	ldrb	r2, [r3, #0]
 800da88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8c:	440b      	add	r3, r1
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	429a      	cmp	r2, r3
 800da92:	d103      	bne.n	800da9c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800da94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da96:	3301      	adds	r3, #1
 800da98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da9a:	e7f1      	b.n	800da80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800da9c:	2300      	movs	r3, #0
 800da9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800daa0:	f107 0310 	add.w	r3, r7, #16
 800daa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fd fecb 	bl	800b842 <_ZNK12SimpleString2atEj>
 800daac:	4603      	mov	r3, r0
 800daae:	461c      	mov	r4, r3
 800dab0:	f107 0318 	add.w	r3, r7, #24
 800dab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fd fec3 	bl	800b842 <_ZNK12SimpleString2atEj>
 800dabc:	4603      	mov	r3, r0
 800dabe:	429c      	cmp	r4, r3
 800dac0:	bf0c      	ite	eq
 800dac2:	2301      	moveq	r3, #1
 800dac4:	2300      	movne	r3, #0
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800dacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dace:	3301      	adds	r3, #1
 800dad0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dad2:	e7e5      	b.n	800daa0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dada:	68f9      	ldr	r1, [r7, #12]
 800dadc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800dae0:	f107 0210 	add.w	r2, r7, #16
 800dae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	f7ff f987 	bl	800cdfc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800daee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800daf2:	4619      	mov	r1, r3
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7fd fdbd 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800dafa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fd fd3b 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800db04:	f107 0310 	add.w	r3, r7, #16
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fd fd36 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800db0e:	f107 0318 	add.w	r3, r7, #24
 800db12:	4618      	mov	r0, r3
 800db14:	f7fd fd31 	bl	800b57a <_ZN12SimpleStringD1Ev>
    }
}
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	4618      	mov	r0, r3
 800db1c:	3744      	adds	r7, #68	; 0x44
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd90      	pop	{r4, r7, pc}
 800db22:	bf00      	nop
 800db24:	080259a8 	.word	0x080259a8

0800db28 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800db28:	b590      	push	{r4, r7, lr}
 800db2a:	b093      	sub	sp, #76	; 0x4c
 800db2c:	af02      	add	r7, sp, #8
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
 800db34:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	68b9      	ldr	r1, [r7, #8]
 800db3e:	f7ff f801 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800db42:	4a55      	ldr	r2, [pc, #340]	; (800dc98 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800db4e:	68f9      	ldr	r1, [r7, #12]
 800db50:	f107 0320 	add.w	r3, r7, #32
 800db54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff f9fc 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800db5c:	f107 0320 	add.w	r3, r7, #32
 800db60:	4619      	mov	r1, r3
 800db62:	4620      	mov	r0, r4
 800db64:	f7fd f9bd 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800db68:	f107 0320 	add.w	r3, r7, #32
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fd fd04 	bl	800b57a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800db72:	f107 0318 	add.w	r3, r7, #24
 800db76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fd ff99 	bl	800bab0 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800db7e:	f107 0310 	add.w	r3, r7, #16
 800db82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db84:	4618      	mov	r0, r3
 800db86:	f7fd ff93 	bl	800bab0 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800db90:	68f9      	ldr	r1, [r7, #12]
 800db92:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800db96:	f107 0310 	add.w	r3, r7, #16
 800db9a:	f107 0218 	add.w	r2, r7, #24
 800db9e:	f7ff f913 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dba6:	4619      	mov	r1, r3
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f7fd fd63 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800dbae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fd fce1 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800dbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d05c      	beq.n	800dc78 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800dbbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d059      	beq.n	800dc78 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbcc:	4413      	add	r3, r2
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fd f824 	bl	800ac1e <_ZN12SimpleString7ToLowerEc>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461c      	mov	r4, r3
 800dbda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbde:	4413      	add	r3, r2
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd f81b 	bl	800ac1e <_ZN12SimpleString7ToLowerEc>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	429c      	cmp	r4, r3
 800dbec:	bf0c      	ite	eq
 800dbee:	2301      	moveq	r3, #1
 800dbf0:	2300      	movne	r3, #0
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800dbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbfe:	e7e3      	b.n	800dbc8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800dc04:	f107 0310 	add.w	r3, r7, #16
 800dc08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fd fe19 	bl	800b842 <_ZNK12SimpleString2atEj>
 800dc10:	4603      	mov	r3, r0
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fd f803 	bl	800ac1e <_ZN12SimpleString7ToLowerEc>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461c      	mov	r4, r3
 800dc1c:	f107 0318 	add.w	r3, r7, #24
 800dc20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fd fe0d 	bl	800b842 <_ZNK12SimpleString2atEj>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7fc fff7 	bl	800ac1e <_ZN12SimpleString7ToLowerEc>
 800dc30:	4603      	mov	r3, r0
 800dc32:	429c      	cmp	r4, r3
 800dc34:	bf0c      	ite	eq
 800dc36:	2301      	moveq	r3, #1
 800dc38:	2300      	movne	r3, #0
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d003      	beq.n	800dc48 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800dc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc42:	3301      	adds	r3, #1
 800dc44:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc46:	e7dd      	b.n	800dc04 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dc4e:	68f9      	ldr	r1, [r7, #12]
 800dc50:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800dc54:	f107 0210 	add.w	r2, r7, #16
 800dc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	f7ff f8cd 	bl	800cdfc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800dc62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc66:	4619      	mov	r1, r3
 800dc68:	4620      	mov	r0, r4
 800dc6a:	f7fd fd03 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800dc6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fd fc81 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800dc78:	f107 0310 	add.w	r3, r7, #16
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fd fc7c 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800dc82:	f107 0318 	add.w	r3, r7, #24
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fd fc77 	bl	800b57a <_ZN12SimpleStringD1Ev>
    }
}
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3744      	adds	r7, #68	; 0x44
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd90      	pop	{r4, r7, pc}
 800dc96:	bf00      	nop
 800dc98:	0802597c 	.word	0x0802597c

0800dc9c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800dc9c:	b5b0      	push	{r4, r5, r7, lr}
 800dc9e:	b092      	sub	sp, #72	; 0x48
 800dca0:	af02      	add	r7, sp, #8
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
 800dca8:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	68b9      	ldr	r1, [r7, #8]
 800dcb2:	f7fe ff47 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dcb6:	4a40      	ldr	r2, [pc, #256]	; (800ddb8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dcc2:	68f9      	ldr	r1, [r7, #12]
 800dcc4:	f107 031c 	add.w	r3, r7, #28
 800dcc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff f942 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dcd0:	f107 031c 	add.w	r3, r7, #28
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f7fd f903 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800dcdc:	f107 031c 	add.w	r3, r7, #28
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fd fc4a 	bl	800b57a <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800dce6:	f107 0314 	add.w	r3, r7, #20
 800dcea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dcec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fe fa4c 	bl	800c18c <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dcfa:	68fd      	ldr	r5, [r7, #12]
 800dcfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7fe fa41 	bl	800c18c <_Z22StringFromBinaryOrNullPKhj>
 800dd0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dd0e:	f107 0314 	add.w	r3, r7, #20
 800dd12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800dd16:	4629      	mov	r1, r5
 800dd18:	f7ff f856 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dd1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd20:	4619      	mov	r1, r3
 800dd22:	4620      	mov	r0, r4
 800dd24:	f7fd fca6 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800dd28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fd fc24 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800dd32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fd fc1f 	bl	800b57a <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800dd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d02f      	beq.n	800dda2 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800dd42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d02c      	beq.n	800dda2 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800dd48:	2300      	movs	r3, #0
 800dd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd50:	4413      	add	r3, r2
 800dd52:	781a      	ldrb	r2, [r3, #0]
 800dd54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd58:	440b      	add	r3, r1
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d103      	bne.n	800dd68 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800dd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd62:	3301      	adds	r3, #1
 800dd64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd66:	e7f1      	b.n	800dd4c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dd6e:	68f9      	ldr	r1, [r7, #12]
 800dd70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd72:	4613      	mov	r3, r2
 800dd74:	005b      	lsls	r3, r3, #1
 800dd76:	4413      	add	r3, r2
 800dd78:	1c5d      	adds	r5, r3, #1
 800dd7a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800dd7e:	f107 0214 	add.w	r2, r7, #20
 800dd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	462b      	mov	r3, r5
 800dd88:	f7ff f838 	bl	800cdfc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800dd8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dd90:	4619      	mov	r1, r3
 800dd92:	4620      	mov	r0, r4
 800dd94:	f7fd fc6e 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800dd98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fd fbec 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800dda2:	f107 0314 	add.w	r3, r7, #20
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fd fbe7 	bl	800b57a <_ZN12SimpleStringD1Ev>
	}
}
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3740      	adds	r7, #64	; 0x40
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bdb0      	pop	{r4, r5, r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	08025950 	.word	0x08025950

0800ddbc <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800ddbc:	b5b0      	push	{r4, r5, r7, lr}
 800ddbe:	b08c      	sub	sp, #48	; 0x30
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
 800ddc8:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	68b9      	ldr	r1, [r7, #8]
 800ddd2:	f7fe feb7 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ddd6:	4a26      	ldr	r2, [pc, #152]	; (800de70 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dde2:	68f9      	ldr	r1, [r7, #12]
 800dde4:	f107 0310 	add.w	r3, r7, #16
 800dde8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7ff f8b2 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ddf0:	f107 0310 	add.w	r3, r7, #16
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f7fd f873 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800ddfc:	f107 0310 	add.w	r3, r7, #16
 800de00:	4618      	mov	r0, r3
 800de02:	f7fd fbba 	bl	800b57a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800de0c:	68fd      	ldr	r5, [r7, #12]
 800de0e:	f107 0020 	add.w	r0, r7, #32
 800de12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de18:	f7fe fa24 	bl	800c264 <_Z20StringFromMaskedBitsmmj>
 800de1c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800de20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de26:	f7fe fa1d 	bl	800c264 <_Z20StringFromMaskedBitsmmj>
 800de2a:	f107 0018 	add.w	r0, r7, #24
 800de2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de32:	f107 0220 	add.w	r2, r7, #32
 800de36:	4629      	mov	r1, r5
 800de38:	f7fe ffc6 	bl	800cdc8 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800de3c:	f107 0318 	add.w	r3, r7, #24
 800de40:	4619      	mov	r1, r3
 800de42:	4620      	mov	r0, r4
 800de44:	f7fd fc16 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800de48:	f107 0318 	add.w	r3, r7, #24
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fd fb94 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800de52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de56:	4618      	mov	r0, r3
 800de58:	f7fd fb8f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800de5c:	f107 0320 	add.w	r3, r7, #32
 800de60:	4618      	mov	r0, r3
 800de62:	f7fd fb8a 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4618      	mov	r0, r3
 800de6a:	3730      	adds	r7, #48	; 0x30
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bdb0      	pop	{r4, r5, r7, pc}
 800de70:	08025924 	.word	0x08025924

0800de74 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800de74:	b590      	push	{r4, r7, lr}
 800de76:	b089      	sub	sp, #36	; 0x24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
 800de80:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	68b9      	ldr	r1, [r7, #8]
 800de8a:	f7fe fe5b 	bl	800cb44 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800de8e:	4a1a      	ldr	r2, [pc, #104]	; (800def8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800de9a:	68f9      	ldr	r1, [r7, #12]
 800de9c:	f107 0310 	add.w	r3, r7, #16
 800dea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7ff f856 	bl	800cf54 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dea8:	f107 0310 	add.w	r3, r7, #16
 800deac:	4619      	mov	r1, r3
 800deae:	4620      	mov	r0, r4
 800deb0:	f7fd f817 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800deb4:	f107 0310 	add.w	r3, r7, #16
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fd fb5e 	bl	800b57a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dec6:	f7fd fb2b 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800deca:	4602      	mov	r2, r0
 800decc:	f107 0318 	add.w	r3, r7, #24
 800ded0:	490a      	ldr	r1, [pc, #40]	; (800defc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7fe f858 	bl	800bf88 <_Z16StringFromFormatPKcz>
 800ded8:	f107 0318 	add.w	r3, r7, #24
 800dedc:	4619      	mov	r1, r3
 800dede:	4620      	mov	r0, r4
 800dee0:	f7fd fbc8 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800dee4:	f107 0318 	add.w	r3, r7, #24
 800dee8:	4618      	mov	r0, r3
 800deea:	f7fd fb46 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	4618      	mov	r0, r3
 800def2:	3724      	adds	r7, #36	; 0x24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd90      	pop	{r4, r7, pc}
 800def8:	080258f8 	.word	0x080258f8
 800defc:	080225e8 	.word	0x080225e8

0800df00 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	4a05      	ldr	r2, [pc, #20]	; (800df20 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	601a      	str	r2, [r3, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	4618      	mov	r0, r3
 800df12:	f7fe fe99 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	080258f8 	.word	0x080258f8

0800df24 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7ff ffe7 	bl	800df00 <_ZN25FeatureUnsupportedFailureD1Ev>
 800df32:	2134      	movs	r1, #52	; 0x34
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7fa fbb9 	bl	80086ac <_ZdlPvj>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4618      	mov	r0, r3
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	4a05      	ldr	r2, [pc, #20]	; (800df64 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	601a      	str	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	4618      	mov	r0, r3
 800df56:	f7fe fe77 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4618      	mov	r0, r3
 800df5e:	3708      	adds	r7, #8
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	08025924 	.word	0x08025924

0800df68 <_ZN16BitsEqualFailureD0Ev>:
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7ff ffe7 	bl	800df44 <_ZN16BitsEqualFailureD1Ev>
 800df76:	2134      	movs	r1, #52	; 0x34
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7fa fb97 	bl	80086ac <_ZdlPvj>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4618      	mov	r0, r3
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	4a05      	ldr	r2, [pc, #20]	; (800dfa8 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	601a      	str	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fe fe55 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	08025950 	.word	0x08025950

0800dfac <_ZN18BinaryEqualFailureD0Ev>:
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff ffe7 	bl	800df88 <_ZN18BinaryEqualFailureD1Ev>
 800dfba:	2134      	movs	r1, #52	; 0x34
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7fa fb75 	bl	80086ac <_ZdlPvj>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	4a05      	ldr	r2, [pc, #20]	; (800dfec <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fe fe33 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	0802597c 	.word	0x0802597c

0800dff0 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff ffe7 	bl	800dfcc <_ZN24StringEqualNoCaseFailureD1Ev>
 800dffe:	2134      	movs	r1, #52	; 0x34
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7fa fb53 	bl	80086ac <_ZdlPvj>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4618      	mov	r0, r3
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	4a05      	ldr	r2, [pc, #20]	; (800e030 <_ZN18StringEqualFailureD1Ev+0x20>)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	601a      	str	r2, [r3, #0]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4618      	mov	r0, r3
 800e022:	f7fe fe11 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4618      	mov	r0, r3
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	080259a8 	.word	0x080259a8

0800e034 <_ZN18StringEqualFailureD0Ev>:
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f7ff ffe7 	bl	800e010 <_ZN18StringEqualFailureD1Ev>
 800e042:	2134      	movs	r1, #52	; 0x34
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7fa fb31 	bl	80086ac <_ZdlPvj>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4618      	mov	r0, r3
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	4a05      	ldr	r2, [pc, #20]	; (800e074 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4618      	mov	r0, r3
 800e066:	f7fe fdef 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	080259d4 	.word	0x080259d4

0800e078 <_ZN23SignedBytesEqualFailureD0Ev>:
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff ffe7 	bl	800e054 <_ZN23SignedBytesEqualFailureD1Ev>
 800e086:	2134      	movs	r1, #52	; 0x34
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7fa fb0f 	bl	80086ac <_ZdlPvj>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4618      	mov	r0, r3
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	4a05      	ldr	r2, [pc, #20]	; (800e0b8 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fdcd 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	08025a00 	.word	0x08025a00

0800e0bc <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff ffe7 	bl	800e098 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800e0ca:	2134      	movs	r1, #52	; 0x34
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7fa faed 	bl	80086ac <_ZdlPvj>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	4a05      	ldr	r2, [pc, #20]	; (800e0fc <_ZN17LongsEqualFailureD1Ev+0x20>)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	601a      	str	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fe fdab 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}
 800e0fc:	08025a2c 	.word	0x08025a2c

0800e100 <_ZN17LongsEqualFailureD0Ev>:
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff ffe7 	bl	800e0dc <_ZN17LongsEqualFailureD1Ev>
 800e10e:	2134      	movs	r1, #52	; 0x34
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7fa facb 	bl	80086ac <_ZdlPvj>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4618      	mov	r0, r3
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	4a05      	ldr	r2, [pc, #20]	; (800e140 <_ZN12CheckFailureD1Ev+0x20>)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe fd89 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	4618      	mov	r0, r3
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	08025a58 	.word	0x08025a58

0800e144 <_ZN12CheckFailureD0Ev>:
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7ff ffe7 	bl	800e120 <_ZN12CheckFailureD1Ev>
 800e152:	2134      	movs	r1, #52	; 0x34
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7fa faa9 	bl	80086ac <_ZdlPvj>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4618      	mov	r0, r3
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	4a05      	ldr	r2, [pc, #20]	; (800e184 <_ZN15ContainsFailureD1Ev+0x20>)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe fd67 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	08025a84 	.word	0x08025a84

0800e188 <_ZN15ContainsFailureD0Ev>:
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff ffe7 	bl	800e164 <_ZN15ContainsFailureD1Ev>
 800e196:	2134      	movs	r1, #52	; 0x34
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7fa fa87 	bl	80086ac <_ZdlPvj>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	4a05      	ldr	r2, [pc, #20]	; (800e1c8 <_ZN17ComparisonFailureD1Ev+0x20>)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	601a      	str	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fe fd45 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	08025ab0 	.word	0x08025ab0

0800e1cc <_ZN17ComparisonFailureD0Ev>:
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7ff ffe7 	bl	800e1a8 <_ZN17ComparisonFailureD1Ev>
 800e1da:	2134      	movs	r1, #52	; 0x34
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7fa fa65 	bl	80086ac <_ZdlPvj>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	4a05      	ldr	r2, [pc, #20]	; (800e20c <_ZN17CheckEqualFailureD1Ev+0x20>)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	601a      	str	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fe fd23 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	4618      	mov	r0, r3
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	08025adc 	.word	0x08025adc

0800e210 <_ZN17CheckEqualFailureD0Ev>:
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff ffe7 	bl	800e1ec <_ZN17CheckEqualFailureD1Ev>
 800e21e:	2134      	movs	r1, #52	; 0x34
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7fa fa43 	bl	80086ac <_ZdlPvj>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4618      	mov	r0, r3
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	4a05      	ldr	r2, [pc, #20]	; (800e250 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	f7fe fd01 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	4618      	mov	r0, r3
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	08025b08 	.word	0x08025b08

0800e254 <_ZN19DoublesEqualFailureD0Ev>:
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7ff ffe7 	bl	800e230 <_ZN19DoublesEqualFailureD1Ev>
 800e262:	2134      	movs	r1, #52	; 0x34
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7fa fa21 	bl	80086ac <_ZdlPvj>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4618      	mov	r0, r3
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	4a05      	ldr	r2, [pc, #20]	; (800e294 <_ZN13EqualsFailureD1Ev+0x20>)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe fcdf 	bl	800cc48 <_ZN11TestFailureD1Ev>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4618      	mov	r0, r3
 800e28e:	3708      	adds	r7, #8
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	08025b34 	.word	0x08025b34

0800e298 <_ZN13EqualsFailureD0Ev>:
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7ff ffe7 	bl	800e274 <_ZN13EqualsFailureD1Ev>
 800e2a6:	2134      	movs	r1, #52	; 0x34
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7fa f9ff 	bl	80086ac <_ZdlPvj>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800e2b8:	b5b0      	push	{r4, r5, r7, lr}
 800e2ba:	b086      	sub	sp, #24
 800e2bc:	af02      	add	r7, sp, #8
 800e2be:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800e2c0:	4b0d      	ldr	r3, [pc, #52]	; (800e2f8 <_ZL13checkedMallocj+0x40>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	4798      	blx	r3
 800e2c8:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d10e      	bne.n	800e2ee <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800e2d0:	f004 f97e 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	6823      	ldr	r3, [r4, #0]
 800e2d8:	3368      	adds	r3, #104	; 0x68
 800e2da:	681d      	ldr	r5, [r3, #0]
 800e2dc:	f004 f988 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	2325      	movs	r3, #37	; 0x25
 800e2e6:	4a05      	ldr	r2, [pc, #20]	; (800e2fc <_ZL13checkedMallocj+0x44>)
 800e2e8:	4905      	ldr	r1, [pc, #20]	; (800e300 <_ZL13checkedMallocj+0x48>)
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	47a8      	blx	r5
    return mem;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bdb0      	pop	{r4, r5, r7, pc}
 800e2f8:	200000c8 	.word	0x200000c8
 800e2fc:	0802265c 	.word	0x0802265c
 800e300:	0802267c 	.word	0x0802267c

0800e304 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800e308:	4b04      	ldr	r3, [pc, #16]	; (800e31c <_Z22getCurrentNewAllocatorv+0x18>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <_Z22getCurrentNewAllocatorv+0x10>
 800e310:	f000 f806 	bl	800e320 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800e314:	4b01      	ldr	r3, [pc, #4]	; (800e31c <_Z22getCurrentNewAllocatorv+0x18>)
 800e316:	681b      	ldr	r3, [r3, #0]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	20000740 	.word	0x20000740

0800e320 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800e320:	b580      	push	{r7, lr}
 800e322:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800e324:	f000 f810 	bl	800e348 <_Z19defaultNewAllocatorv>
 800e328:	4603      	mov	r3, r0
 800e32a:	4a02      	ldr	r2, [pc, #8]	; (800e334 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800e32c:	6013      	str	r3, [r2, #0]
}
 800e32e:	bf00      	nop
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	20000740 	.word	0x20000740

0800e338 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800e338:	b580      	push	{r7, lr}
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	4801      	ldr	r0, [pc, #4]	; (800e344 <__tcf_0+0xc>)
 800e33e:	f000 f909 	bl	800e554 <_ZN19TestMemoryAllocatorD1Ev>
 800e342:	bd80      	pop	{r7, pc}
 800e344:	2000074c 	.word	0x2000074c

0800e348 <_Z19defaultNewAllocatorv>:
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800e34c:	4b13      	ldr	r3, [pc, #76]	; (800e39c <_Z19defaultNewAllocatorv+0x54>)
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	f3bf 8f5b 	dmb	ish
 800e354:	b2db      	uxtb	r3, r3
 800e356:	f003 0301 	and.w	r3, r3, #1
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	bf0c      	ite	eq
 800e35e:	2301      	moveq	r3, #1
 800e360:	2300      	movne	r3, #0
 800e362:	b2db      	uxtb	r3, r3
 800e364:	2b00      	cmp	r3, #0
 800e366:	d016      	beq.n	800e396 <_Z19defaultNewAllocatorv+0x4e>
 800e368:	480c      	ldr	r0, [pc, #48]	; (800e39c <_Z19defaultNewAllocatorv+0x54>)
 800e36a:	f00f fc0d 	bl	801db88 <__cxa_guard_acquire>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	bf14      	ite	ne
 800e374:	2301      	movne	r3, #1
 800e376:	2300      	moveq	r3, #0
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00b      	beq.n	800e396 <_Z19defaultNewAllocatorv+0x4e>
 800e37e:	4b08      	ldr	r3, [pc, #32]	; (800e3a0 <_Z19defaultNewAllocatorv+0x58>)
 800e380:	4a08      	ldr	r2, [pc, #32]	; (800e3a4 <_Z19defaultNewAllocatorv+0x5c>)
 800e382:	4909      	ldr	r1, [pc, #36]	; (800e3a8 <_Z19defaultNewAllocatorv+0x60>)
 800e384:	4809      	ldr	r0, [pc, #36]	; (800e3ac <_Z19defaultNewAllocatorv+0x64>)
 800e386:	f000 f8c5 	bl	800e514 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e38a:	4804      	ldr	r0, [pc, #16]	; (800e39c <_Z19defaultNewAllocatorv+0x54>)
 800e38c:	f00f fc08 	bl	801dba0 <__cxa_guard_release>
 800e390:	4807      	ldr	r0, [pc, #28]	; (800e3b0 <_Z19defaultNewAllocatorv+0x68>)
 800e392:	f00f fc2c 	bl	801dbee <atexit>
    return &allocator;
 800e396:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <_Z19defaultNewAllocatorv+0x64>)
}
 800e398:	4618      	mov	r0, r3
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20000760 	.word	0x20000760
 800e3a0:	0802269c 	.word	0x0802269c
 800e3a4:	080226a4 	.word	0x080226a4
 800e3a8:	080226a8 	.word	0x080226a8
 800e3ac:	2000074c 	.word	0x2000074c
 800e3b0:	0800e339 	.word	0x0800e339

0800e3b4 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800e3b8:	4b04      	ldr	r3, [pc, #16]	; (800e3cc <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d101      	bne.n	800e3c4 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800e3c0:	f000 f806 	bl	800e3d0 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800e3c4:	4b01      	ldr	r3, [pc, #4]	; (800e3cc <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	20000744 	.word	0x20000744

0800e3d0 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800e3d4:	f000 f810 	bl	800e3f8 <_Z24defaultNewArrayAllocatorv>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	4a02      	ldr	r2, [pc, #8]	; (800e3e4 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800e3dc:	6013      	str	r3, [r2, #0]
}
 800e3de:	bf00      	nop
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	20000744 	.word	0x20000744

0800e3e8 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	4801      	ldr	r0, [pc, #4]	; (800e3f4 <__tcf_1+0xc>)
 800e3ee:	f000 f8b1 	bl	800e554 <_ZN19TestMemoryAllocatorD1Ev>
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	20000764 	.word	0x20000764

0800e3f8 <_Z24defaultNewArrayAllocatorv>:
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800e3fc:	4b13      	ldr	r3, [pc, #76]	; (800e44c <_Z24defaultNewArrayAllocatorv+0x54>)
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	f3bf 8f5b 	dmb	ish
 800e404:	b2db      	uxtb	r3, r3
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	bf0c      	ite	eq
 800e40e:	2301      	moveq	r3, #1
 800e410:	2300      	movne	r3, #0
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b00      	cmp	r3, #0
 800e416:	d016      	beq.n	800e446 <_Z24defaultNewArrayAllocatorv+0x4e>
 800e418:	480c      	ldr	r0, [pc, #48]	; (800e44c <_Z24defaultNewArrayAllocatorv+0x54>)
 800e41a:	f00f fbb5 	bl	801db88 <__cxa_guard_acquire>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	bf14      	ite	ne
 800e424:	2301      	movne	r3, #1
 800e426:	2300      	moveq	r3, #0
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00b      	beq.n	800e446 <_Z24defaultNewArrayAllocatorv+0x4e>
 800e42e:	4b08      	ldr	r3, [pc, #32]	; (800e450 <_Z24defaultNewArrayAllocatorv+0x58>)
 800e430:	4a08      	ldr	r2, [pc, #32]	; (800e454 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800e432:	4909      	ldr	r1, [pc, #36]	; (800e458 <_Z24defaultNewArrayAllocatorv+0x60>)
 800e434:	4809      	ldr	r0, [pc, #36]	; (800e45c <_Z24defaultNewArrayAllocatorv+0x64>)
 800e436:	f000 f86d 	bl	800e514 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e43a:	4804      	ldr	r0, [pc, #16]	; (800e44c <_Z24defaultNewArrayAllocatorv+0x54>)
 800e43c:	f00f fbb0 	bl	801dba0 <__cxa_guard_release>
 800e440:	4807      	ldr	r0, [pc, #28]	; (800e460 <_Z24defaultNewArrayAllocatorv+0x68>)
 800e442:	f00f fbd4 	bl	801dbee <atexit>
    return &allocator;
 800e446:	4b05      	ldr	r3, [pc, #20]	; (800e45c <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800e448:	4618      	mov	r0, r3
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	20000778 	.word	0x20000778
 800e450:	080226c0 	.word	0x080226c0
 800e454:	080226cc 	.word	0x080226cc
 800e458:	080226d4 	.word	0x080226d4
 800e45c:	20000764 	.word	0x20000764
 800e460:	0800e3e9 	.word	0x0800e3e9

0800e464 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800e464:	b580      	push	{r7, lr}
 800e466:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800e468:	4b04      	ldr	r3, [pc, #16]	; (800e47c <_Z25getCurrentMallocAllocatorv+0x18>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d101      	bne.n	800e474 <_Z25getCurrentMallocAllocatorv+0x10>
 800e470:	f000 f806 	bl	800e480 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800e474:	4b01      	ldr	r3, [pc, #4]	; (800e47c <_Z25getCurrentMallocAllocatorv+0x18>)
 800e476:	681b      	ldr	r3, [r3, #0]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	20000748 	.word	0x20000748

0800e480 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800e480:	b580      	push	{r7, lr}
 800e482:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800e484:	f000 f810 	bl	800e4a8 <_Z22defaultMallocAllocatorv>
 800e488:	4603      	mov	r3, r0
 800e48a:	4a02      	ldr	r2, [pc, #8]	; (800e494 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800e48c:	6013      	str	r3, [r2, #0]
}
 800e48e:	bf00      	nop
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	20000748 	.word	0x20000748

0800e498 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800e498:	b580      	push	{r7, lr}
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	4801      	ldr	r0, [pc, #4]	; (800e4a4 <__tcf_2+0xc>)
 800e49e:	f000 f859 	bl	800e554 <_ZN19TestMemoryAllocatorD1Ev>
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	2000077c 	.word	0x2000077c

0800e4a8 <_Z22defaultMallocAllocatorv>:
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800e4ac:	4b13      	ldr	r3, [pc, #76]	; (800e4fc <_Z22defaultMallocAllocatorv+0x54>)
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	f3bf 8f5b 	dmb	ish
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	bf0c      	ite	eq
 800e4be:	2301      	moveq	r3, #1
 800e4c0:	2300      	movne	r3, #0
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d016      	beq.n	800e4f6 <_Z22defaultMallocAllocatorv+0x4e>
 800e4c8:	480c      	ldr	r0, [pc, #48]	; (800e4fc <_Z22defaultMallocAllocatorv+0x54>)
 800e4ca:	f00f fb5d 	bl	801db88 <__cxa_guard_acquire>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	bf14      	ite	ne
 800e4d4:	2301      	movne	r3, #1
 800e4d6:	2300      	moveq	r3, #0
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00b      	beq.n	800e4f6 <_Z22defaultMallocAllocatorv+0x4e>
 800e4de:	4b08      	ldr	r3, [pc, #32]	; (800e500 <_Z22defaultMallocAllocatorv+0x58>)
 800e4e0:	4a08      	ldr	r2, [pc, #32]	; (800e504 <_Z22defaultMallocAllocatorv+0x5c>)
 800e4e2:	4909      	ldr	r1, [pc, #36]	; (800e508 <_Z22defaultMallocAllocatorv+0x60>)
 800e4e4:	4809      	ldr	r0, [pc, #36]	; (800e50c <_Z22defaultMallocAllocatorv+0x64>)
 800e4e6:	f000 f815 	bl	800e514 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e4ea:	4804      	ldr	r0, [pc, #16]	; (800e4fc <_Z22defaultMallocAllocatorv+0x54>)
 800e4ec:	f00f fb58 	bl	801dba0 <__cxa_guard_release>
 800e4f0:	4807      	ldr	r0, [pc, #28]	; (800e510 <_Z22defaultMallocAllocatorv+0x68>)
 800e4f2:	f00f fb7c 	bl	801dbee <atexit>
    return &allocator;
 800e4f6:	4b05      	ldr	r3, [pc, #20]	; (800e50c <_Z22defaultMallocAllocatorv+0x64>)
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	20000790 	.word	0x20000790
 800e500:	080226f0 	.word	0x080226f0
 800e504:	080226f8 	.word	0x080226f8
 800e508:	08022700 	.word	0x08022700
 800e50c:	2000077c 	.word	0x2000077c
 800e510:	0800e499 	.word	0x0800e499

0800e514 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800e514:	b480      	push	{r7}
 800e516:	b085      	sub	sp, #20
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
 800e520:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800e522:	4a0b      	ldr	r2, [pc, #44]	; (800e550 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	601a      	str	r2, [r3, #0]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	605a      	str	r2, [r3, #4]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	609a      	str	r2, [r3, #8]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	683a      	ldr	r2, [r7, #0]
 800e538:	60da      	str	r2, [r3, #12]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	741a      	strb	r2, [r3, #16]
{
}
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	4618      	mov	r0, r3
 800e544:	3714      	adds	r7, #20
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	08025bc0 	.word	0x08025bc0

0800e554 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	4a06      	ldr	r2, [pc, #24]	; (800e578 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2201      	movs	r2, #1
 800e566:	741a      	strb	r2, [r3, #16]
}
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4618      	mov	r0, r3
 800e56c:	370c      	adds	r7, #12
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	08025bc0 	.word	0x08025bc0

0800e57c <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
}
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7ff ffe5 	bl	800e554 <_ZN19TestMemoryAllocatorD1Ev>
 800e58a:	2114      	movs	r1, #20
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7fa f88d 	bl	80086ac <_ZdlPvj>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4618      	mov	r0, r3
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	7c1b      	ldrb	r3, [r3, #16]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800e5b4:	b590      	push	{r4, r7, lr}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	3310      	adds	r3, #16
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	4798      	blx	r3
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	3310      	adds	r3, #16
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6838      	ldr	r0, [r7, #0]
 800e5d6:	4798      	blx	r3
 800e5d8:	4603      	mov	r3, r0
 800e5da:	4619      	mov	r1, r3
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f7fc fa51 	bl	800aa84 <_ZN12SimpleString6StrCmpEPKcS1_>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	bf0c      	ite	eq
 800e5e8:	2301      	moveq	r3, #1
 800e5ea:	2300      	movne	r3, #0
 800e5ec:	b2db      	uxtb	r3, r3
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	370c      	adds	r7, #12
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd90      	pop	{r4, r7, pc}
	...

0800e5f8 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800e5f8:	b590      	push	{r4, r7, lr}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	3308      	adds	r3, #8
 800e608:	681c      	ldr	r4, [r3, #0]
 800e60a:	2301      	movs	r3, #1
 800e60c:	4a04      	ldr	r2, [pc, #16]	; (800e620 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800e60e:	6839      	ldr	r1, [r7, #0]
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	47a0      	blx	r4
 800e614:	4603      	mov	r3, r0
}
 800e616:	4618      	mov	r0, r3
 800e618:	370c      	adds	r7, #12
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd90      	pop	{r4, r7, pc}
 800e61e:	bf00      	nop
 800e620:	0802271c 	.word	0x0802271c

0800e624 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800e624:	b590      	push	{r4, r7, lr}
 800e626:	b085      	sub	sp, #20
 800e628:	af02      	add	r7, sp, #8
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	330c      	adds	r3, #12
 800e634:	681c      	ldr	r4, [r3, #0]
 800e636:	2301      	movs	r3, #1
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	4b04      	ldr	r3, [pc, #16]	; (800e64c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	47a0      	blx	r4
}
 800e644:	bf00      	nop
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd90      	pop	{r4, r7, pc}
 800e64c:	0802271c 	.word	0x0802271c

0800e650 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
 800e65c:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800e65e:	68b8      	ldr	r0, [r7, #8]
 800e660:	f7ff fe2a 	bl	800e2b8 <_ZL13checkedMallocj>
 800e664:	4603      	mov	r3, r0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800e67e:	4b04      	ldr	r3, [pc, #16]	; (800e690 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	68b8      	ldr	r0, [r7, #8]
 800e684:	4798      	blx	r3
}
 800e686:	bf00      	nop
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	200000d0 	.word	0x200000d0

0800e694 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
    return name_;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	685b      	ldr	r3, [r3, #4]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	689b      	ldr	r3, [r3, #8]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
    return free_name_;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	68db      	ldr	r3, [r3, #12]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
    return this;
 800e6e4:	687b      	ldr	r3, [r7, #4]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	370c      	adds	r7, #12
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
	...

0800e6f4 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	4a05      	ldr	r2, [pc, #20]	; (800e714 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	601a      	str	r2, [r3, #0]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	4618      	mov	r0, r3
 800e706:	f7ff ff25 	bl	800e554 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4618      	mov	r0, r3
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	08025b8c 	.word	0x08025b8c

0800e718 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
}
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7ff ffe7 	bl	800e6f4 <_ZN20NullUnknownAllocatorD1Ev>
 800e726:	2114      	movs	r1, #20
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7f9 ffbf 	bl	80086ac <_ZdlPvj>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4618      	mov	r0, r3
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
 800e744:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
 800e760:	603b      	str	r3, [r7, #0]
}
 800e762:	bf00      	nop
 800e764:	3714      	adds	r7, #20
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr
	...

0800e770 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	4b06      	ldr	r3, [pc, #24]	; (800e794 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800e77c:	4a05      	ldr	r2, [pc, #20]	; (800e794 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800e77e:	4906      	ldr	r1, [pc, #24]	; (800e798 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800e780:	f7ff fec8 	bl	800e514 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800e784:	4a05      	ldr	r2, [pc, #20]	; (800e79c <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	601a      	str	r2, [r3, #0]
{
}
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4618      	mov	r0, r3
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	08022750 	.word	0x08022750
 800e798:	08022758 	.word	0x08022758
 800e79c:	08025b8c 	.word	0x08025b8c

0800e7a0 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	4801      	ldr	r0, [pc, #4]	; (800e7ac <__tcf_3+0xc>)
 800e7a6:	f7ff ffa5 	bl	800e6f4 <_ZN20NullUnknownAllocatorD1Ev>
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	20000794 	.word	0x20000794

0800e7b0 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800e7b4:	4b12      	ldr	r3, [pc, #72]	; (800e800 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	f3bf 8f5b 	dmb	ish
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	f003 0301 	and.w	r3, r3, #1
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	bf0c      	ite	eq
 800e7c6:	2301      	moveq	r3, #1
 800e7c8:	2300      	movne	r3, #0
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d013      	beq.n	800e7f8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800e7d0:	480b      	ldr	r0, [pc, #44]	; (800e800 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e7d2:	f00f f9d9 	bl	801db88 <__cxa_guard_acquire>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	bf14      	ite	ne
 800e7dc:	2301      	movne	r3, #1
 800e7de:	2300      	moveq	r3, #0
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d008      	beq.n	800e7f8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800e7e6:	4807      	ldr	r0, [pc, #28]	; (800e804 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800e7e8:	f7ff ffc2 	bl	800e770 <_ZN20NullUnknownAllocatorC1Ev>
 800e7ec:	4804      	ldr	r0, [pc, #16]	; (800e800 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800e7ee:	f00f f9d7 	bl	801dba0 <__cxa_guard_release>
 800e7f2:	4805      	ldr	r0, [pc, #20]	; (800e808 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800e7f4:	f00f f9fb 	bl	801dbee <atexit>
    return &allocator;
 800e7f8:	4b02      	ldr	r3, [pc, #8]	; (800e804 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	200007a8 	.word	0x200007a8
 800e804:	20000794 	.word	0x20000794
 800e808:	0800e7a1 	.word	0x0800e7a1

0800e80c <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
        return testCount_;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	689b      	ldr	r3, [r3, #8]
    }
 800e818:	4618      	mov	r0, r3
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	699b      	ldr	r3, [r3, #24]
    }
 800e830:	4618      	mov	r0, r3
 800e832:	370c      	adds	r7, #12
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr

0800e83c <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800e840:	4b05      	ldr	r3, [pc, #20]	; (800e858 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b02      	cmp	r3, #2
 800e846:	d103      	bne.n	800e850 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800e848:	f004 fa4a 	bl	8012ce0 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800e84c:	4603      	mov	r3, r0
 800e84e:	e001      	b.n	800e854 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800e850:	4b01      	ldr	r3, [pc, #4]	; (800e858 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800e852:	781b      	ldrb	r3, [r3, #0]
}
 800e854:	4618      	mov	r0, r3
 800e856:	bd80      	pop	{r7, pc}
 800e858:	20000088 	.word	0x20000088

0800e85c <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800e864:	4a0a      	ldr	r2, [pc, #40]	; (800e890 <_ZN10TestOutputC1Ev+0x34>)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	605a      	str	r2, [r3, #4]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	721a      	strb	r2, [r3, #8]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	725a      	strb	r2, [r3, #9]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4a05      	ldr	r2, [pc, #20]	; (800e894 <_ZN10TestOutputC1Ev+0x38>)
 800e880:	60da      	str	r2, [r3, #12]
{
}
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4618      	mov	r0, r3
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	08025cc4 	.word	0x08025cc4
 800e894:	08022b58 	.word	0x08022b58

0800e898 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	4a04      	ldr	r2, [pc, #16]	; (800e8b4 <_ZN10TestOutputD1Ev+0x1c>)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	601a      	str	r2, [r3, #0]
{
}
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	370c      	adds	r7, #12
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr
 800e8b4:	08025cc4 	.word	0x08025cc4

0800e8b8 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	78fa      	ldrb	r2, [r7, #3]
 800e8c8:	721a      	strb	r2, [r3, #8]
}
 800e8ca:	bf00      	nop
 800e8cc:	370c      	adds	r7, #12
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b083      	sub	sp, #12
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
    color_ = true;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	725a      	strb	r2, [r3, #9]
}
 800e8e4:	bf00      	nop
 800e8e6:	370c      	adds	r7, #12
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3328      	adds	r3, #40	; 0x28
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	6839      	ldr	r1, [r7, #0]
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	4798      	blx	r3
}
 800e908:	bf00      	nop
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800e910:	b590      	push	{r4, r7, lr}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	332c      	adds	r3, #44	; 0x2c
 800e920:	681c      	ldr	r4, [r3, #0]
 800e922:	f107 0308 	add.w	r3, r7, #8
 800e926:	6839      	ldr	r1, [r7, #0]
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fd f8ff 	bl	800bb2c <_Z10StringFroml>
 800e92e:	f107 0308 	add.w	r3, r7, #8
 800e932:	4618      	mov	r0, r3
 800e934:	f7fc fdf4 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800e938:	4603      	mov	r3, r0
 800e93a:	4619      	mov	r1, r3
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	47a0      	blx	r4
 800e940:	f107 0308 	add.w	r3, r7, #8
 800e944:	4618      	mov	r0, r3
 800e946:	f7fc fe18 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800e94a:	bf00      	nop
 800e94c:	3714      	adds	r7, #20
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd90      	pop	{r4, r7, pc}

0800e952 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800e952:	b590      	push	{r4, r7, lr}
 800e954:	b085      	sub	sp, #20
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	332c      	adds	r3, #44	; 0x2c
 800e962:	681c      	ldr	r4, [r3, #0]
 800e964:	f107 0308 	add.w	r3, r7, #8
 800e968:	6839      	ldr	r1, [r7, #0]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fd fb34 	bl	800bfd8 <_Z10StringFromj>
 800e970:	f107 0308 	add.w	r3, r7, #8
 800e974:	4618      	mov	r0, r3
 800e976:	f7fc fdd3 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800e97a:	4603      	mov	r3, r0
 800e97c:	4619      	mov	r1, r3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	47a0      	blx	r4
 800e982:	f107 0308 	add.w	r3, r7, #8
 800e986:	4618      	mov	r0, r3
 800e988:	f7fc fdf7 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800e98c:	bf00      	nop
 800e98e:	3714      	adds	r7, #20
 800e990:	46bd      	mov	sp, r7
 800e992:	bd90      	pop	{r4, r7, pc}

0800e994 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800e994:	b590      	push	{r4, r7, lr}
 800e996:	b087      	sub	sp, #28
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	332c      	adds	r3, #44	; 0x2c
 800e9a6:	681c      	ldr	r4, [r3, #0]
 800e9a8:	f107 0310 	add.w	r3, r7, #16
 800e9ac:	2106      	movs	r1, #6
 800e9ae:	ed97 0b00 	vldr	d0, [r7]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fd faa6 	bl	800bf04 <_Z10StringFromdi>
 800e9b8:	f107 0310 	add.w	r3, r7, #16
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fc fdaf 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	47a0      	blx	r4
 800e9ca:	f107 0310 	add.w	r3, r7, #16
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7fc fdd3 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800e9d4:	bf00      	nop
 800e9d6:	371c      	adds	r7, #28
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd90      	pop	{r4, r7, pc}

0800e9dc <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
    p.print(s);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	332c      	adds	r3, #44	; 0x2c
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	4798      	blx	r3
    return p;
 800e9f4:	687b      	ldr	r3, [r7, #4]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
	...

0800ea00 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ea00:	b590      	push	{r4, r7, lr}
 800ea02:	b085      	sub	sp, #20
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	7a1b      	ldrb	r3, [r3, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d01a      	beq.n	800ea48 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	332c      	adds	r3, #44	; 0x2c
 800ea18:	681c      	ldr	r4, [r3, #0]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	3314      	adds	r3, #20
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f107 0208 	add.w	r2, r7, #8
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	4610      	mov	r0, r2
 800ea2a:	4798      	blx	r3
 800ea2c:	f107 0308 	add.w	r3, r7, #8
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fc fd75 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4619      	mov	r1, r3
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	47a0      	blx	r4
 800ea3e:	f107 0308 	add.w	r3, r7, #8
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fc fd99 	bl	800b57a <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	3318      	adds	r3, #24
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	6838      	ldr	r0, [r7, #0]
 800ea52:	4798      	blx	r3
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d007      	beq.n	800ea6a <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	3344      	adds	r3, #68	; 0x44
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4907      	ldr	r1, [pc, #28]	; (800ea80 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800ea68:	e006      	b.n	800ea78 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	3344      	adds	r3, #68	; 0x44
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4904      	ldr	r1, [pc, #16]	; (800ea84 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	4798      	blx	r3
}
 800ea78:	bf00      	nop
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd90      	pop	{r4, r7, pc}
 800ea80:	08022b58 	.word	0x08022b58
 800ea84:	08022b5c 	.word	0x08022b5c

0800ea88 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	7a1b      	ldrb	r3, [r3, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d019      	beq.n	800eace <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	332c      	adds	r3, #44	; 0x2c
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4910      	ldr	r1, [pc, #64]	; (800eae4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	3334      	adds	r3, #52	; 0x34
 800eaae:	681c      	ldr	r4, [r3, #0]
 800eab0:	6838      	ldr	r0, [r7, #0]
 800eab2:	f002 f845 	bl	8010b40 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800eab6:	4603      	mov	r3, r0
 800eab8:	4619      	mov	r1, r3
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	47a0      	blx	r4
        print(" ms\n");
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	332c      	adds	r3, #44	; 0x2c
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4908      	ldr	r1, [pc, #32]	; (800eae8 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800eacc:	e005      	b.n	800eada <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	3358      	adds	r3, #88	; 0x58
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	4798      	blx	r3
}
 800eada:	bf00      	nop
 800eadc:	370c      	adds	r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd90      	pop	{r4, r7, pc}
 800eae2:	bf00      	nop
 800eae4:	08022b60 	.word	0x08022b60
 800eae8:	08022b64 	.word	0x08022b64

0800eaec <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	332c      	adds	r3, #44	; 0x2c
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	68d2      	ldr	r2, [r2, #12]
 800eb00:	4611      	mov	r1, r2
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	1c5a      	adds	r2, r3, #1
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	605a      	str	r2, [r3, #4]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685a      	ldr	r2, [r3, #4]
 800eb14:	4b0d      	ldr	r3, [pc, #52]	; (800eb4c <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800eb16:	fb83 1302 	smull	r1, r3, r3, r2
 800eb1a:	1119      	asrs	r1, r3, #4
 800eb1c:	17d3      	asrs	r3, r2, #31
 800eb1e:	1acb      	subs	r3, r1, r3
 800eb20:	2132      	movs	r1, #50	; 0x32
 800eb22:	fb01 f303 	mul.w	r3, r1, r3
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	bf0c      	ite	eq
 800eb2c:	2301      	moveq	r3, #1
 800eb2e:	2300      	movne	r3, #0
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d006      	beq.n	800eb44 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	332c      	adds	r3, #44	; 0x2c
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4904      	ldr	r1, [pc, #16]	; (800eb50 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	4798      	blx	r3
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	51eb851f 	.word	0x51eb851f
 800eb50:	08022b6c 	.word	0x08022b6c

0800eb54 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	683a      	ldr	r2, [r7, #0]
 800eb62:	60da      	str	r2, [r3, #12]
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
}
 800eb8e:	bf00      	nop
 800eb90:	370c      	adds	r7, #12
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr

0800eb9a <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800eb9a:	b480      	push	{r7}
 800eb9c:	b083      	sub	sp, #12
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
 800eba2:	6039      	str	r1, [r7, #0]
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800ebb0:	b590      	push	{r4, r7, lr}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
    print("\n");
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	332c      	adds	r3, #44	; 0x2c
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	496f      	ldr	r1, [pc, #444]	; (800ed80 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800ebc8:	6838      	ldr	r0, [r7, #0]
 800ebca:	f7f8 f83d 	bl	8006c48 <_ZNK10TestResult9isFailureEv>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800ebd2:	6838      	ldr	r0, [r7, #0]
 800ebd4:	f7f8 f82c 	bl	8006c30 <_ZNK10TestResult15getFailureCountEv>
 800ebd8:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800ebda:	7bfb      	ldrb	r3, [r7, #15]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d02b      	beq.n	800ec38 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	7a5b      	ldrb	r3, [r3, #9]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d006      	beq.n	800ebf6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	332c      	adds	r3, #44	; 0x2c
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4964      	ldr	r1, [pc, #400]	; (800ed84 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	4798      	blx	r3
        }
        print("Errors (");
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	332c      	adds	r3, #44	; 0x2c
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4962      	ldr	r1, [pc, #392]	; (800ed88 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	4798      	blx	r3
        if (failureCount > 0) {
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00e      	beq.n	800ec28 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	3334      	adds	r3, #52	; 0x34
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68b9      	ldr	r1, [r7, #8]
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	4798      	blx	r3
            print(" failures, ");
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	332c      	adds	r3, #44	; 0x2c
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	495a      	ldr	r1, [pc, #360]	; (800ed8c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	4798      	blx	r3
 800ec26:	e019      	b.n	800ec5c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	332c      	adds	r3, #44	; 0x2c
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4957      	ldr	r1, [pc, #348]	; (800ed90 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	4798      	blx	r3
 800ec36:	e011      	b.n	800ec5c <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	7a5b      	ldrb	r3, [r3, #9]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d006      	beq.n	800ec4e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	332c      	adds	r3, #44	; 0x2c
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4952      	ldr	r1, [pc, #328]	; (800ed94 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	4798      	blx	r3
        }
        print("OK (");
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	332c      	adds	r3, #44	; 0x2c
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4950      	ldr	r1, [pc, #320]	; (800ed98 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	4798      	blx	r3
    }
    print(result.getTestCount());
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3334      	adds	r3, #52	; 0x34
 800ec62:	681c      	ldr	r4, [r3, #0]
 800ec64:	6838      	ldr	r0, [r7, #0]
 800ec66:	f7ff fdd1 	bl	800e80c <_ZNK10TestResult12getTestCountEv>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	47a0      	blx	r4
    print(" tests, ");
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	332c      	adds	r3, #44	; 0x2c
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4948      	ldr	r1, [pc, #288]	; (800ed9c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	4798      	blx	r3
    print(result.getRunCount());
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3334      	adds	r3, #52	; 0x34
 800ec86:	681c      	ldr	r4, [r3, #0]
 800ec88:	6838      	ldr	r0, [r7, #0]
 800ec8a:	f7f7 ffb9 	bl	8006c00 <_ZNK10TestResult11getRunCountEv>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	4619      	mov	r1, r3
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	47a0      	blx	r4
    print(" ran, ");
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	332c      	adds	r3, #44	; 0x2c
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4940      	ldr	r1, [pc, #256]	; (800eda0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	4798      	blx	r3
    print(result.getCheckCount());
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	3334      	adds	r3, #52	; 0x34
 800ecaa:	681c      	ldr	r4, [r3, #0]
 800ecac:	6838      	ldr	r0, [r7, #0]
 800ecae:	f7f8 fc13 	bl	80074d8 <_ZNK10TestResult13getCheckCountEv>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	47a0      	blx	r4
    print(" checks, ");
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	332c      	adds	r3, #44	; 0x2c
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4938      	ldr	r1, [pc, #224]	; (800eda4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	4798      	blx	r3
    print(result.getIgnoredCount());
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	3334      	adds	r3, #52	; 0x34
 800ecce:	681c      	ldr	r4, [r3, #0]
 800ecd0:	6838      	ldr	r0, [r7, #0]
 800ecd2:	f7f7 ffa1 	bl	8006c18 <_ZNK10TestResult15getIgnoredCountEv>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	47a0      	blx	r4
    print(" ignored, ");
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	332c      	adds	r3, #44	; 0x2c
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4930      	ldr	r1, [pc, #192]	; (800eda8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	3334      	adds	r3, #52	; 0x34
 800ecf2:	681c      	ldr	r4, [r3, #0]
 800ecf4:	6838      	ldr	r0, [r7, #0]
 800ecf6:	f7ff fd95 	bl	800e824 <_ZNK10TestResult19getFilteredOutCountEv>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	47a0      	blx	r4
    print(" filtered out, ");
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	332c      	adds	r3, #44	; 0x2c
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	4928      	ldr	r1, [pc, #160]	; (800edac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	3334      	adds	r3, #52	; 0x34
 800ed16:	681c      	ldr	r4, [r3, #0]
 800ed18:	6838      	ldr	r0, [r7, #0]
 800ed1a:	f001 ff05 	bl	8010b28 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	4619      	mov	r1, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	47a0      	blx	r4
    print(" ms)");
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	332c      	adds	r3, #44	; 0x2c
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4920      	ldr	r1, [pc, #128]	; (800edb0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	4798      	blx	r3
    if (color_) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	7a5b      	ldrb	r3, [r3, #9]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d006      	beq.n	800ed4a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	332c      	adds	r3, #44	; 0x2c
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	491b      	ldr	r1, [pc, #108]	; (800edb4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d009      	beq.n	800ed64 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	332c      	adds	r3, #44	; 0x2c
 800ed5c:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800ed5e:	4916      	ldr	r1, [pc, #88]	; (800edb8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	4798      	blx	r3
    }
    print("\n\n");
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	332c      	adds	r3, #44	; 0x2c
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4913      	ldr	r1, [pc, #76]	; (800edbc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	4798      	blx	r3

    dotCount_ = 0;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	605a      	str	r2, [r3, #4]
}
 800ed78:	bf00      	nop
 800ed7a:	3714      	adds	r7, #20
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd90      	pop	{r4, r7, pc}
 800ed80:	08022b6c 	.word	0x08022b6c
 800ed84:	08022b70 	.word	0x08022b70
 800ed88:	08022b78 	.word	0x08022b78
 800ed8c:	08022b84 	.word	0x08022b84
 800ed90:	08022b90 	.word	0x08022b90
 800ed94:	08022ba0 	.word	0x08022ba0
 800ed98:	08022ba8 	.word	0x08022ba8
 800ed9c:	08022bb0 	.word	0x08022bb0
 800eda0:	08022bbc 	.word	0x08022bbc
 800eda4:	08022bc4 	.word	0x08022bc4
 800eda8:	08022bd0 	.word	0x08022bd0
 800edac:	08022bdc 	.word	0x08022bdc
 800edb0:	08022bec 	.word	0x08022bec
 800edb4:	08022bf4 	.word	0x08022bf4
 800edb8:	08022bf8 	.word	0x08022bf8
 800edbc:	08022c9c 	.word	0x08022c9c

0800edc0 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d922      	bls.n	800ee18 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	332c      	adds	r3, #44	; 0x2c
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4911      	ldr	r1, [pc, #68]	; (800ee20 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	4798      	blx	r3
        print(number);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	3334      	adds	r3, #52	; 0x34
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	68b9      	ldr	r1, [r7, #8]
 800edea:	68f8      	ldr	r0, [r7, #12]
 800edec:	4798      	blx	r3
        print(" of ");
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	332c      	adds	r3, #44	; 0x2c
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	490b      	ldr	r1, [pc, #44]	; (800ee24 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	4798      	blx	r3
        print(total);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	3334      	adds	r3, #52	; 0x34
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6879      	ldr	r1, [r7, #4]
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	4798      	blx	r3
        print("\n");
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	332c      	adds	r3, #44	; 0x2c
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4905      	ldr	r1, [pc, #20]	; (800ee28 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	4798      	blx	r3
    }
}
 800ee18:	bf00      	nop
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	08022ca0 	.word	0x08022ca0
 800ee24:	08022cac 	.word	0x08022cac
 800ee28:	08022b6c 	.word	0x08022b6c

0800ee2c <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800ee36:	6838      	ldr	r0, [r7, #0]
 800ee38:	f7fd ffa1 	bl	800cd7e <_ZNK11TestFailure17isOutsideTestFileEv>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d105      	bne.n	800ee4e <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800ee42:	6838      	ldr	r0, [r7, #0]
 800ee44:	f7fd ffad 	bl	800cda2 <_ZNK11TestFailure18isInHelperFunctionEv>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d001      	beq.n	800ee52 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e000      	b.n	800ee54 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800ee52:	2300      	movs	r3, #0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800ee58:	6839      	ldr	r1, [r7, #0]
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 f81d 	bl	800ee9a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800ee60:	e003      	b.n	800ee6a <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800ee62:	6839      	ldr	r1, [r7, #0]
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 f86b 	bl	800ef40 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	3318      	adds	r3, #24
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f107 0208 	add.w	r2, r7, #8
 800ee76:	6839      	ldr	r1, [r7, #0]
 800ee78:	4610      	mov	r0, r2
 800ee7a:	4798      	blx	r3
 800ee7c:	f107 0308 	add.w	r3, r7, #8
 800ee80:	4619      	mov	r1, r3
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f8b2 	bl	800efec <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800ee88:	f107 0308 	add.w	r3, r7, #8
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fc fb74 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800ee92:	bf00      	nop
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b088      	sub	sp, #32
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
 800eea2:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	331c      	adds	r3, #28
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f107 0208 	add.w	r2, r7, #8
 800eeb0:	6839      	ldr	r1, [r7, #0]
 800eeb2:	4610      	mov	r0, r2
 800eeb4:	4798      	blx	r3
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	3320      	adds	r3, #32
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	6838      	ldr	r0, [r7, #0]
 800eec0:	4798      	blx	r3
 800eec2:	4602      	mov	r2, r0
 800eec4:	f107 0308 	add.w	r3, r7, #8
 800eec8:	4619      	mov	r1, r3
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 f8be 	bl	800f04c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800eed0:	f107 0308 	add.w	r3, r7, #8
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7fc fb50 	bl	800b57a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	330c      	adds	r3, #12
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f107 0210 	add.w	r2, r7, #16
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	4610      	mov	r0, r2
 800eeea:	4798      	blx	r3
 800eeec:	f107 0310 	add.w	r3, r7, #16
 800eef0:	4619      	mov	r1, r3
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 f85c 	bl	800efb0 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800eef8:	f107 0310 	add.w	r3, r7, #16
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fc fb3c 	bl	800b57a <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	3308      	adds	r3, #8
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f107 0218 	add.w	r2, r7, #24
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	4610      	mov	r0, r2
 800ef12:	4798      	blx	r3
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3314      	adds	r3, #20
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6838      	ldr	r0, [r7, #0]
 800ef1e:	4798      	blx	r3
 800ef20:	4602      	mov	r2, r0
 800ef22:	f107 0318 	add.w	r3, r7, #24
 800ef26:	4619      	mov	r1, r3
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 f88f 	bl	800f04c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ef2e:	f107 0318 	add.w	r3, r7, #24
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fc fb21 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800ef38:	bf00      	nop
 800ef3a:	3720      	adds	r7, #32
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	3308      	adds	r3, #8
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f107 0208 	add.w	r2, r7, #8
 800ef56:	6839      	ldr	r1, [r7, #0]
 800ef58:	4610      	mov	r0, r2
 800ef5a:	4798      	blx	r3
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3314      	adds	r3, #20
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	6838      	ldr	r0, [r7, #0]
 800ef66:	4798      	blx	r3
 800ef68:	4602      	mov	r2, r0
 800ef6a:	f107 0308 	add.w	r3, r7, #8
 800ef6e:	4619      	mov	r1, r3
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 f86b 	bl	800f04c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ef76:	f107 0308 	add.w	r3, r7, #8
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fc fafd 	bl	800b57a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	330c      	adds	r3, #12
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f107 0210 	add.w	r2, r7, #16
 800ef8c:	6839      	ldr	r1, [r7, #0]
 800ef8e:	4610      	mov	r0, r2
 800ef90:	4798      	blx	r3
 800ef92:	f107 0310 	add.w	r3, r7, #16
 800ef96:	4619      	mov	r1, r3
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 f809 	bl	800efb0 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800ef9e:	f107 0310 	add.w	r3, r7, #16
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fc fae9 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800efa8:	bf00      	nop
 800efaa:	3718      	adds	r7, #24
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800efb0:	b590      	push	{r4, r7, lr}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	332c      	adds	r3, #44	; 0x2c
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4909      	ldr	r1, [pc, #36]	; (800efe8 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	4798      	blx	r3
    print(testName.asCharString());
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	332c      	adds	r3, #44	; 0x2c
 800efce:	681c      	ldr	r4, [r3, #0]
 800efd0:	6838      	ldr	r0, [r7, #0]
 800efd2:	f7fc faa5 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800efd6:	4603      	mov	r3, r0
 800efd8:	4619      	mov	r1, r3
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	47a0      	blx	r4
}
 800efde:	bf00      	nop
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd90      	pop	{r4, r7, pc}
 800efe6:	bf00      	nop
 800efe8:	08022cb4 	.word	0x08022cb4

0800efec <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800efec:	b590      	push	{r4, r7, lr}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
    print("\n");
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	332c      	adds	r3, #44	; 0x2c
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4910      	ldr	r1, [pc, #64]	; (800f040 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	4798      	blx	r3
    print("\t");
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	332c      	adds	r3, #44	; 0x2c
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	490d      	ldr	r1, [pc, #52]	; (800f044 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	4798      	blx	r3
    print(reason.asCharString());
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	332c      	adds	r3, #44	; 0x2c
 800f018:	681c      	ldr	r4, [r3, #0]
 800f01a:	6838      	ldr	r0, [r7, #0]
 800f01c:	f7fc fa80 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800f020:	4603      	mov	r3, r0
 800f022:	4619      	mov	r1, r3
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	47a0      	blx	r4
    print("\n\n");
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	332c      	adds	r3, #44	; 0x2c
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4905      	ldr	r1, [pc, #20]	; (800f048 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	4798      	blx	r3
}
 800f036:	bf00      	nop
 800f038:	370c      	adds	r7, #12
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd90      	pop	{r4, r7, pc}
 800f03e:	bf00      	nop
 800f040:	08022b6c 	.word	0x08022b6c
 800f044:	08022cc4 	.word	0x08022cc4
 800f048:	08022c9c 	.word	0x08022c9c

0800f04c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b089      	sub	sp, #36	; 0x24
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800f058:	f7ff fbf0 	bl	800e83c <_ZN10TestOutput21getWorkingEnvironmentEv>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	bf0c      	ite	eq
 800f062:	2301      	moveq	r3, #1
 800f064:	2300      	movne	r3, #0
 800f066:	b2db      	uxtb	r3, r3
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d015      	beq.n	800f098 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3354      	adds	r3, #84	; 0x54
 800f072:	681c      	ldr	r4, [r3, #0]
 800f074:	f107 0310 	add.w	r3, r7, #16
 800f078:	68b9      	ldr	r1, [r7, #8]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fb ff19 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 800f080:	f107 0310 	add.w	r3, r7, #16
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	4619      	mov	r1, r3
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	47a0      	blx	r4
 800f08c:	f107 0310 	add.w	r3, r7, #16
 800f090:	4618      	mov	r0, r3
 800f092:	f7fc fa72 	bl	800b57a <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800f096:	e014      	b.n	800f0c2 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3350      	adds	r3, #80	; 0x50
 800f09e:	681c      	ldr	r4, [r3, #0]
 800f0a0:	f107 0318 	add.w	r3, r7, #24
 800f0a4:	68b9      	ldr	r1, [r7, #8]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fb ff03 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 800f0ac:	f107 0318 	add.w	r3, r7, #24
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	47a0      	blx	r4
 800f0b8:	f107 0318 	add.w	r3, r7, #24
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fc fa5c 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800f0c2:	bf00      	nop
 800f0c4:	3724      	adds	r7, #36	; 0x24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd90      	pop	{r4, r7, pc}
	...

0800f0cc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800f0cc:	b590      	push	{r4, r7, lr}
 800f0ce:	b085      	sub	sp, #20
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
    print("\n");
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	332c      	adds	r3, #44	; 0x2c
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4916      	ldr	r1, [pc, #88]	; (800f13c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	4798      	blx	r3
    print(file.asCharString());
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	332c      	adds	r3, #44	; 0x2c
 800f0ec:	681c      	ldr	r4, [r3, #0]
 800f0ee:	68b8      	ldr	r0, [r7, #8]
 800f0f0:	f7fc fa16 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	47a0      	blx	r4
    print(":");
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	332c      	adds	r3, #44	; 0x2c
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	490e      	ldr	r1, [pc, #56]	; (800f140 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	4798      	blx	r3
    print(lineNumber);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	3334      	adds	r3, #52	; 0x34
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	6879      	ldr	r1, [r7, #4]
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	4798      	blx	r3
    print(":");
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	332c      	adds	r3, #44	; 0x2c
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4907      	ldr	r1, [pc, #28]	; (800f140 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	4798      	blx	r3
    print(" error:");
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	332c      	adds	r3, #44	; 0x2c
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4905      	ldr	r1, [pc, #20]	; (800f144 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	4798      	blx	r3
}
 800f134:	bf00      	nop
 800f136:	3714      	adds	r7, #20
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd90      	pop	{r4, r7, pc}
 800f13c:	08022b6c 	.word	0x08022b6c
 800f140:	08022cc8 	.word	0x08022cc8
 800f144:	08022ccc 	.word	0x08022ccc

0800f148 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800f148:	b590      	push	{r4, r7, lr}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
    print("\n");
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	332c      	adds	r3, #44	; 0x2c
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4916      	ldr	r1, [pc, #88]	; (800f1b8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	4798      	blx	r3
    print(file.asCharString());
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	332c      	adds	r3, #44	; 0x2c
 800f168:	681c      	ldr	r4, [r3, #0]
 800f16a:	68b8      	ldr	r0, [r7, #8]
 800f16c:	f7fc f9d8 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800f170:	4603      	mov	r3, r0
 800f172:	4619      	mov	r1, r3
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	47a0      	blx	r4
    print("(");
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	332c      	adds	r3, #44	; 0x2c
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	490e      	ldr	r1, [pc, #56]	; (800f1bc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800f182:	68f8      	ldr	r0, [r7, #12]
 800f184:	4798      	blx	r3
    print(lineNumber);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3334      	adds	r3, #52	; 0x34
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6879      	ldr	r1, [r7, #4]
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	4798      	blx	r3
    print("):");
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	332c      	adds	r3, #44	; 0x2c
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4908      	ldr	r1, [pc, #32]	; (800f1c0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	4798      	blx	r3
    print(" error:");
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	332c      	adds	r3, #44	; 0x2c
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4906      	ldr	r1, [pc, #24]	; (800f1c4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	4798      	blx	r3
}
 800f1b0:	bf00      	nop
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd90      	pop	{r4, r7, pc}
 800f1b8:	08022b6c 	.word	0x08022b6c
 800f1bc:	08022cd4 	.word	0x08022cd4
 800f1c0:	08022cd8 	.word	0x08022cd8
 800f1c4:	08022ccc 	.word	0x08022ccc

0800f1c8 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	7a1b      	ldrb	r3, [r3, #8]
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d106      	bne.n	800f1e8 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	3328      	adds	r3, #40	; 0x28
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	4798      	blx	r3
}
 800f1e8:	bf00      	nop
 800f1ea:	3708      	adds	r7, #8
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
    while (*s) {
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d009      	beq.n	800f216 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800f202:	4b0a      	ldr	r3, [pc, #40]	; (800f22c <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	7812      	ldrb	r2, [r2, #0]
 800f20a:	4610      	mov	r0, r2
 800f20c:	4798      	blx	r3
        s++;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	3301      	adds	r3, #1
 800f212:	603b      	str	r3, [r7, #0]
    while (*s) {
 800f214:	e7f1      	b.n	800f1fa <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	334c      	adds	r3, #76	; 0x4c
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	4798      	blx	r3
}
 800f222:	bf00      	nop
 800f224:	3708      	adds	r7, #8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	200000c0 	.word	0x200000c0

0800f230 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800f238:	4b03      	ldr	r3, [pc, #12]	; (800f248 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4798      	blx	r3
}
 800f23e:	bf00      	nop
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	200000c4 	.word	0x200000c4

0800f24c <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4618      	mov	r0, r3
 800f258:	f7ff fb00 	bl	800e85c <_ZN10TestOutputC1Ev>
 800f25c:	4a06      	ldr	r2, [pc, #24]	; (800f278 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	601a      	str	r2, [r3, #0]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2200      	movs	r2, #0
 800f266:	611a      	str	r2, [r3, #16]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	615a      	str	r2, [r3, #20]
{
}
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	3708      	adds	r7, #8
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	08025bf4 	.word	0x08025bf4

0800f27c <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	4a0e      	ldr	r2, [pc, #56]	; (800f2c0 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	691b      	ldr	r3, [r3, #16]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d004      	beq.n	800f29c <_ZN19CompositeTestOutputD1Ev+0x20>
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	3204      	adds	r2, #4
 800f296:	6812      	ldr	r2, [r2, #0]
 800f298:	4618      	mov	r0, r3
 800f29a:	4790      	blx	r2
  delete outputTwo_;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d004      	beq.n	800f2ae <_ZN19CompositeTestOutputD1Ev+0x32>
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	3204      	adds	r2, #4
 800f2a8:	6812      	ldr	r2, [r2, #0]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7ff faf1 	bl	800e898 <_ZN10TestOutputD1Ev>
}
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	08025bf4 	.word	0x08025bf4

0800f2c4 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
}
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7ff ffd5 	bl	800f27c <_ZN19CompositeTestOutputD1Ev>
 800f2d2:	2118      	movs	r1, #24
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7f9 f9e9 	bl	80086ac <_ZdlPvj>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3708      	adds	r7, #8
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d004      	beq.n	800f300 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	3204      	adds	r2, #4
 800f2fa:	6812      	ldr	r2, [r2, #0]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	4790      	blx	r2
  outputOne_ = output;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	683a      	ldr	r2, [r7, #0]
 800f304:	611a      	str	r2, [r3, #16]
}
 800f306:	bf00      	nop
 800f308:	3708      	adds	r7, #8
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b082      	sub	sp, #8
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
 800f316:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	695b      	ldr	r3, [r3, #20]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d004      	beq.n	800f32a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	3204      	adds	r2, #4
 800f324:	6812      	ldr	r2, [r2, #0]
 800f326:	4618      	mov	r0, r3
 800f328:	4790      	blx	r2
  outputTwo_ = output;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	683a      	ldr	r2, [r7, #0]
 800f32e:	615a      	str	r2, [r3, #20]
}
 800f330:	bf00      	nop
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d008      	beq.n	800f35a <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	691a      	ldr	r2, [r3, #16]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	691b      	ldr	r3, [r3, #16]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	3308      	adds	r3, #8
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4610      	mov	r0, r2
 800f358:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	695b      	ldr	r3, [r3, #20]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d008      	beq.n	800f374 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	695a      	ldr	r2, [r3, #20]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	695b      	ldr	r3, [r3, #20]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3308      	adds	r3, #8
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4610      	mov	r0, r2
 800f372:	4798      	blx	r3
}
 800f374:	bf00      	nop
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	691b      	ldr	r3, [r3, #16]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d009      	beq.n	800f3a2 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	691a      	ldr	r2, [r3, #16]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	691b      	ldr	r3, [r3, #16]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	330c      	adds	r3, #12
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	4610      	mov	r0, r2
 800f3a0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	695b      	ldr	r3, [r3, #20]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d009      	beq.n	800f3be <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	695a      	ldr	r2, [r3, #20]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	695b      	ldr	r3, [r3, #20]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	330c      	adds	r3, #12
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	6839      	ldr	r1, [r7, #0]
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	4798      	blx	r3
}
 800f3be:	bf00      	nop
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b082      	sub	sp, #8
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d009      	beq.n	800f3ec <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	691a      	ldr	r2, [r3, #16]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	3310      	adds	r3, #16
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	6839      	ldr	r1, [r7, #0]
 800f3e8:	4610      	mov	r0, r2
 800f3ea:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	695b      	ldr	r3, [r3, #20]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d009      	beq.n	800f408 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	695a      	ldr	r2, [r3, #20]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	695b      	ldr	r3, [r3, #20]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	3310      	adds	r3, #16
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	6839      	ldr	r1, [r7, #0]
 800f404:	4610      	mov	r0, r2
 800f406:	4798      	blx	r3
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	691b      	ldr	r3, [r3, #16]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d009      	beq.n	800f436 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	691a      	ldr	r2, [r3, #16]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	3314      	adds	r3, #20
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	4610      	mov	r0, r2
 800f434:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	695b      	ldr	r3, [r3, #20]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d009      	beq.n	800f452 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	695a      	ldr	r2, [r3, #20]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	3314      	adds	r3, #20
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6839      	ldr	r1, [r7, #0]
 800f44e:	4610      	mov	r0, r2
 800f450:	4798      	blx	r3
}
 800f452:	bf00      	nop
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b082      	sub	sp, #8
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
 800f462:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d009      	beq.n	800f480 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	691a      	ldr	r2, [r3, #16]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	3318      	adds	r3, #24
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	6839      	ldr	r1, [r7, #0]
 800f47c:	4610      	mov	r0, r2
 800f47e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	695b      	ldr	r3, [r3, #20]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d009      	beq.n	800f49c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	695a      	ldr	r2, [r3, #20]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	695b      	ldr	r3, [r3, #20]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3318      	adds	r3, #24
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	6839      	ldr	r1, [r7, #0]
 800f498:	4610      	mov	r0, r2
 800f49a:	4798      	blx	r3
}
 800f49c:	bf00      	nop
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	691b      	ldr	r3, [r3, #16]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d009      	beq.n	800f4ca <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	691a      	ldr	r2, [r3, #16]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	331c      	adds	r3, #28
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	6839      	ldr	r1, [r7, #0]
 800f4c6:	4610      	mov	r0, r2
 800f4c8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	695b      	ldr	r3, [r3, #20]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d009      	beq.n	800f4e6 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	695a      	ldr	r2, [r3, #20]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	695b      	ldr	r3, [r3, #20]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	331c      	adds	r3, #28
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	4798      	blx	r3
}
 800f4e6:	bf00      	nop
 800f4e8:	3708      	adds	r7, #8
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800f4ee:	b580      	push	{r7, lr}
 800f4f0:	b082      	sub	sp, #8
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	691b      	ldr	r3, [r3, #16]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d009      	beq.n	800f516 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	691a      	ldr	r2, [r3, #16]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	691b      	ldr	r3, [r3, #16]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	3320      	adds	r3, #32
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	78f9      	ldrb	r1, [r7, #3]
 800f512:	4610      	mov	r0, r2
 800f514:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	695b      	ldr	r3, [r3, #20]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d009      	beq.n	800f532 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	695a      	ldr	r2, [r3, #20]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	695b      	ldr	r3, [r3, #20]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	3320      	adds	r3, #32
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	78f9      	ldrb	r1, [r7, #3]
 800f52e:	4610      	mov	r0, r2
 800f530:	4798      	blx	r3
}
 800f532:	bf00      	nop
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	691b      	ldr	r3, [r3, #16]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d008      	beq.n	800f55c <_ZN19CompositeTestOutput5colorEv+0x22>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	691a      	ldr	r2, [r3, #16]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	691b      	ldr	r3, [r3, #16]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	3324      	adds	r3, #36	; 0x24
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4610      	mov	r0, r2
 800f55a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	695b      	ldr	r3, [r3, #20]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d008      	beq.n	800f576 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	695a      	ldr	r2, [r3, #20]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	695b      	ldr	r3, [r3, #20]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	3324      	adds	r3, #36	; 0x24
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4610      	mov	r0, r2
 800f574:	4798      	blx	r3
}
 800f576:	bf00      	nop
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b082      	sub	sp, #8
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d009      	beq.n	800f5a4 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	691a      	ldr	r2, [r3, #16]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	3328      	adds	r3, #40	; 0x28
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	6839      	ldr	r1, [r7, #0]
 800f5a0:	4610      	mov	r0, r2
 800f5a2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	695b      	ldr	r3, [r3, #20]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d009      	beq.n	800f5c0 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	695a      	ldr	r2, [r3, #20]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	695b      	ldr	r3, [r3, #20]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3328      	adds	r3, #40	; 0x28
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	6839      	ldr	r1, [r7, #0]
 800f5bc:	4610      	mov	r0, r2
 800f5be:	4798      	blx	r3
}
 800f5c0:	bf00      	nop
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	691b      	ldr	r3, [r3, #16]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d009      	beq.n	800f5ee <_ZN19CompositeTestOutput5printEPKc+0x26>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	691a      	ldr	r2, [r3, #16]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	332c      	adds	r3, #44	; 0x2c
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	6839      	ldr	r1, [r7, #0]
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	695b      	ldr	r3, [r3, #20]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d009      	beq.n	800f60a <_ZN19CompositeTestOutput5printEPKc+0x42>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	695a      	ldr	r2, [r3, #20]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	332c      	adds	r3, #44	; 0x2c
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	6839      	ldr	r1, [r7, #0]
 800f606:	4610      	mov	r0, r2
 800f608:	4798      	blx	r3
}
 800f60a:	bf00      	nop
 800f60c:	3708      	adds	r7, #8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b082      	sub	sp, #8
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
 800f61a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	691b      	ldr	r3, [r3, #16]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d009      	beq.n	800f638 <_ZN19CompositeTestOutput5printEl+0x26>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	691a      	ldr	r2, [r3, #16]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	3330      	adds	r3, #48	; 0x30
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	4610      	mov	r0, r2
 800f636:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	695b      	ldr	r3, [r3, #20]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d009      	beq.n	800f654 <_ZN19CompositeTestOutput5printEl+0x42>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	695a      	ldr	r2, [r3, #20]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	695b      	ldr	r3, [r3, #20]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	3330      	adds	r3, #48	; 0x30
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	6839      	ldr	r1, [r7, #0]
 800f650:	4610      	mov	r0, r2
 800f652:	4798      	blx	r3
}
 800f654:	bf00      	nop
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d009      	beq.n	800f682 <_ZN19CompositeTestOutput5printEj+0x26>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	691a      	ldr	r2, [r3, #16]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	3334      	adds	r3, #52	; 0x34
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	4610      	mov	r0, r2
 800f680:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d009      	beq.n	800f69e <_ZN19CompositeTestOutput5printEj+0x42>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	695a      	ldr	r2, [r3, #20]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	695b      	ldr	r3, [r3, #20]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3334      	adds	r3, #52	; 0x34
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	6839      	ldr	r1, [r7, #0]
 800f69a:	4610      	mov	r0, r2
 800f69c:	4798      	blx	r3
}
 800f69e:	bf00      	nop
 800f6a0:	3708      	adds	r7, #8
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b084      	sub	sp, #16
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	60f8      	str	r0, [r7, #12]
 800f6ae:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00a      	beq.n	800f6d0 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	691a      	ldr	r2, [r3, #16]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	691b      	ldr	r3, [r3, #16]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	3338      	adds	r3, #56	; 0x38
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	ed97 0b00 	vldr	d0, [r7]
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00a      	beq.n	800f6ee <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	695a      	ldr	r2, [r3, #20]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	695b      	ldr	r3, [r3, #20]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3338      	adds	r3, #56	; 0x38
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	ed97 0b00 	vldr	d0, [r7]
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	4798      	blx	r3
}
 800f6ee:	bf00      	nop
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b082      	sub	sp, #8
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	691b      	ldr	r3, [r3, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d009      	beq.n	800f71c <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	691a      	ldr	r2, [r3, #16]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	333c      	adds	r3, #60	; 0x3c
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	6839      	ldr	r1, [r7, #0]
 800f718:	4610      	mov	r0, r2
 800f71a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	695b      	ldr	r3, [r3, #20]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d009      	beq.n	800f738 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	695a      	ldr	r2, [r3, #20]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	695b      	ldr	r3, [r3, #20]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	333c      	adds	r3, #60	; 0x3c
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	6839      	ldr	r1, [r7, #0]
 800f734:	4610      	mov	r0, r2
 800f736:	4798      	blx	r3
}
 800f738:	bf00      	nop
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b082      	sub	sp, #8
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d009      	beq.n	800f766 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	691a      	ldr	r2, [r3, #16]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	691b      	ldr	r3, [r3, #16]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	3344      	adds	r3, #68	; 0x44
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6839      	ldr	r1, [r7, #0]
 800f762:	4610      	mov	r0, r2
 800f764:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	695b      	ldr	r3, [r3, #20]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d009      	beq.n	800f782 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	695a      	ldr	r2, [r3, #20]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	695b      	ldr	r3, [r3, #20]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3344      	adds	r3, #68	; 0x44
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6839      	ldr	r1, [r7, #0]
 800f77e:	4610      	mov	r0, r2
 800f780:	4798      	blx	r3
}
 800f782:	bf00      	nop
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b082      	sub	sp, #8
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	691b      	ldr	r3, [r3, #16]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d008      	beq.n	800f7ac <_ZN19CompositeTestOutput5flushEv+0x22>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	691a      	ldr	r2, [r3, #16]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	691b      	ldr	r3, [r3, #16]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	334c      	adds	r3, #76	; 0x4c
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4610      	mov	r0, r2
 800f7aa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	695b      	ldr	r3, [r3, #20]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d008      	beq.n	800f7c6 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	695a      	ldr	r2, [r3, #20]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	695b      	ldr	r3, [r3, #20]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	334c      	adds	r3, #76	; 0x4c
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	4610      	mov	r0, r2
 800f7c4:	4798      	blx	r3
}
 800f7c6:	bf00      	nop
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800f7ce:	b480      	push	{r7}
 800f7d0:	b085      	sub	sp, #20
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	60f8      	str	r0, [r7, #12]
 800f7d6:	60b9      	str	r1, [r7, #8]
 800f7d8:	607a      	str	r2, [r7, #4]
    }
 800f7da:	bf00      	nop
 800f7dc:	3714      	adds	r7, #20
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr

0800f7e6 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800f7e6:	b480      	push	{r7}
 800f7e8:	b085      	sub	sp, #20
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	60f8      	str	r0, [r7, #12]
 800f7ee:	60b9      	str	r1, [r7, #8]
 800f7f0:	607a      	str	r2, [r7, #4]
    }
 800f7f2:	bf00      	nop
 800f7f4:	3714      	adds	r7, #20
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
	...

0800f800 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800f80a:	4a0b      	ldr	r2, [pc, #44]	; (800f838 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	601a      	str	r2, [r3, #0]
 800f810:	f000 f9ce 	bl	800fbb0 <_ZN14NullTestPlugin8instanceEv>
 800f814:	4602      	mov	r2, r0
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	605a      	str	r2, [r3, #4]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	3308      	adds	r3, #8
 800f81e:	6839      	ldr	r1, [r7, #0]
 800f820:	4618      	mov	r0, r3
 800f822:	f7fb fb46 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2201      	movs	r2, #1
 800f82a:	741a      	strb	r2, [r3, #16]
{
}
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4618      	mov	r0, r3
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	08025db0 	.word	0x08025db0

0800f83c <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800f846:	4a0a      	ldr	r2, [pc, #40]	; (800f870 <_ZN10TestPluginC1EPS_+0x34>)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	601a      	str	r2, [r3, #0]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	683a      	ldr	r2, [r7, #0]
 800f850:	605a      	str	r2, [r3, #4]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	3308      	adds	r3, #8
 800f856:	4907      	ldr	r1, [pc, #28]	; (800f874 <_ZN10TestPluginC1EPS_+0x38>)
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fb fad6 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2201      	movs	r2, #1
 800f862:	741a      	strb	r2, [r3, #16]
{
}
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4618      	mov	r0, r3
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	08025db0 	.word	0x08025db0
 800f874:	08022cdc 	.word	0x08022cdc

0800f878 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	4a06      	ldr	r2, [pc, #24]	; (800f89c <_ZN10TestPluginD1Ev+0x24>)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	601a      	str	r2, [r3, #0]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	3308      	adds	r3, #8
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fb fe75 	bl	800b57a <_ZN12SimpleStringD1Ev>
{
}
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	08025db0 	.word	0x08025db0

0800f8a0 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
}
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff ffe5 	bl	800f878 <_ZN10TestPluginD1Ev>
 800f8ae:	2114      	movs	r1, #20
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7f8 fefb 	bl	80086ac <_ZdlPvj>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	683a      	ldr	r2, [r7, #0]
 800f8ce:	605a      	str	r2, [r3, #4]
    return this;
 800f8d0:	687b      	ldr	r3, [r7, #4]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	370c      	adds	r7, #12
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr

0800f8de <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b084      	sub	sp, #16
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	60f8      	str	r0, [r7, #12]
 800f8e6:	60b9      	str	r1, [r7, #8]
 800f8e8:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	7c1b      	ldrb	r3, [r3, #16]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d007      	beq.n	800f902 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	68b9      	ldr	r1, [r7, #8]
 800f8fe:	68f8      	ldr	r0, [r7, #12]
 800f900:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6858      	ldr	r0, [r3, #4]
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3314      	adds	r3, #20
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	68b9      	ldr	r1, [r7, #8]
 800f914:	4798      	blx	r3
}
 800f916:	bf00      	nop
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af00      	add	r7, sp, #0
 800f924:	60f8      	str	r0, [r7, #12]
 800f926:	60b9      	str	r1, [r7, #8]
 800f928:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6858      	ldr	r0, [r3, #4]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	3318      	adds	r3, #24
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	68b9      	ldr	r1, [r7, #8]
 800f93c:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	7c1b      	ldrb	r3, [r3, #16]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d007      	beq.n	800f956 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	330c      	adds	r3, #12
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	68b9      	ldr	r1, [r7, #8]
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	4798      	blx	r3
}
 800f956:	bf00      	nop
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800f95e:	b590      	push	{r4, r7, lr}
 800f960:	b085      	sub	sp, #20
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	607a      	str	r2, [r7, #4]
 800f96a:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	331c      	adds	r3, #28
 800f972:	681c      	ldr	r4, [r3, #0]
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	68b9      	ldr	r1, [r7, #8]
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	47a0      	blx	r4
 800f97e:	4603      	mov	r3, r0
}
 800f980:	4618      	mov	r0, r3
 800f982:	3714      	adds	r7, #20
 800f984:	46bd      	mov	sp, r7
 800f986:	bd90      	pop	{r4, r7, pc}

0800f988 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800f988:	b590      	push	{r4, r7, lr}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	3310      	adds	r3, #16
 800f99c:	681c      	ldr	r4, [r3, #0]
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	68b9      	ldr	r1, [r7, #8]
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	47a0      	blx	r4
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e011      	b.n	800f9d6 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d00c      	beq.n	800f9d4 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6858      	ldr	r0, [r3, #4]
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	331c      	adds	r3, #28
 800f9c6:	681c      	ldr	r4, [r3, #0]
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	68b9      	ldr	r1, [r7, #8]
 800f9ce:	47a0      	blx	r4
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	e000      	b.n	800f9d6 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3714      	adds	r7, #20
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd90      	pop	{r4, r7, pc}

0800f9de <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800f9de:	b480      	push	{r7}
 800f9e0:	b083      	sub	sp, #12
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
    return name_;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	3308      	adds	r3, #8
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	370c      	adds	r7, #12
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b082      	sub	sp, #8
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	6078      	str	r0, [r7, #4]
 800f9fe:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	3308      	adds	r3, #8
 800fa04:	4619      	mov	r1, r3
 800fa06:	6838      	ldr	r0, [r7, #0]
 800fa08:	f7fb fdc3 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d001      	beq.n	800fa16 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	e00d      	b.n	800fa32 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d007      	beq.n	800fa2e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	6839      	ldr	r1, [r7, #0]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7ff ffe6 	bl	800f9f6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	e001      	b.n	800fa32 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	685b      	ldr	r3, [r3, #4]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
    return next_;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	685b      	ldr	r3, [r3, #4]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	370c      	adds	r7, #12
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr

0800fa52 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b084      	sub	sp, #16
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
 800fa5a:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d00e      	beq.n	800fa86 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7ff ffb6 	bl	800f9de <_ZN10TestPlugin7getNameEv>
 800fa72:	4603      	mov	r3, r0
 800fa74:	6839      	ldr	r1, [r7, #0]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fb fd8b 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d001      	beq.n	800fa86 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800fa82:	2301      	movs	r3, #1
 800fa84:	e000      	b.n	800fa88 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800fa86:	2300      	movs	r3, #0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d007      	beq.n	800fa9c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	685a      	ldr	r2, [r3, #4]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3710      	adds	r7, #16
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800faa6:	b480      	push	{r7}
 800faa8:	b083      	sub	sp, #12
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	741a      	strb	r2, [r3, #16]
}
 800fab4:	bf00      	nop
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2201      	movs	r2, #1
 800facc:	741a      	strb	r2, [r3, #16]
}
 800face:	bf00      	nop
 800fad0:	370c      	adds	r7, #12
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr

0800fada <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800fada:	b480      	push	{r7}
 800fadc:	b083      	sub	sp, #12
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
    return enabled_;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	7c1b      	ldrb	r3, [r3, #16]
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	370c      	adds	r7, #12
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
	...

0800faf4 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7ff fe7c 	bl	800f800 <_ZN10TestPluginC1ERK12SimpleString>
 800fb08:	4a05      	ldr	r2, [pc, #20]	; (800fb20 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800fb0e:	4b05      	ldr	r3, [pc, #20]	; (800fb24 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	601a      	str	r2, [r3, #0]
}
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4618      	mov	r0, r3
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	08025d6c 	.word	0x08025d6c
 800fb24:	200007ac 	.word	0x200007ac

0800fb28 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b087      	sub	sp, #28
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800fb34:	4b0e      	ldr	r3, [pc, #56]	; (800fb70 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	617b      	str	r3, [r7, #20]
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	db0d      	blt.n	800fb5e <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800fb42:	4a0c      	ldr	r2, [pc, #48]	; (800fb74 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800fb4a:	490a      	ldr	r1, [pc, #40]	; (800fb74 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	00db      	lsls	r3, r3, #3
 800fb50:	440b      	add	r3, r1
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	617b      	str	r3, [r7, #20]
 800fb5c:	e7ee      	b.n	800fb3c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800fb5e:	4b04      	ldr	r3, [pc, #16]	; (800fb70 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	601a      	str	r2, [r3, #0]
}
 800fb64:	bf00      	nop
 800fb66:	371c      	adds	r7, #28
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	200007ac 	.word	0x200007ac
 800fb74:	200007b0 	.word	0x200007b0

0800fb78 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2100      	movs	r1, #0
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff fe59 	bl	800f83c <_ZN10TestPluginC1EPS_>
 800fb8a:	4a04      	ldr	r2, [pc, #16]	; (800fb9c <_ZN14NullTestPluginC1Ev+0x24>)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	601a      	str	r2, [r3, #0]
{
}
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4618      	mov	r0, r3
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	08025d28 	.word	0x08025d28

0800fba0 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800fba0:	b580      	push	{r7, lr}
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	4801      	ldr	r0, [pc, #4]	; (800fbac <__tcf_0+0xc>)
 800fba6:	f000 f849 	bl	800fc3c <_ZN14NullTestPluginD1Ev>
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	200008b0 	.word	0x200008b0

0800fbb0 <_ZN14NullTestPlugin8instanceEv>:
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800fbb4:	4b12      	ldr	r3, [pc, #72]	; (800fc00 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	f3bf 8f5b 	dmb	ish
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	f003 0301 	and.w	r3, r3, #1
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	bf0c      	ite	eq
 800fbc6:	2301      	moveq	r3, #1
 800fbc8:	2300      	movne	r3, #0
 800fbca:	b2db      	uxtb	r3, r3
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d013      	beq.n	800fbf8 <_ZN14NullTestPlugin8instanceEv+0x48>
 800fbd0:	480b      	ldr	r0, [pc, #44]	; (800fc00 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800fbd2:	f00d ffd9 	bl	801db88 <__cxa_guard_acquire>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	bf14      	ite	ne
 800fbdc:	2301      	movne	r3, #1
 800fbde:	2300      	moveq	r3, #0
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d008      	beq.n	800fbf8 <_ZN14NullTestPlugin8instanceEv+0x48>
 800fbe6:	4807      	ldr	r0, [pc, #28]	; (800fc04 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800fbe8:	f7ff ffc6 	bl	800fb78 <_ZN14NullTestPluginC1Ev>
 800fbec:	4804      	ldr	r0, [pc, #16]	; (800fc00 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800fbee:	f00d ffd7 	bl	801dba0 <__cxa_guard_release>
 800fbf2:	4805      	ldr	r0, [pc, #20]	; (800fc08 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800fbf4:	f00d fffb 	bl	801dbee <atexit>
    return &_instance;
 800fbf8:	4b02      	ldr	r3, [pc, #8]	; (800fc04 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	200008c4 	.word	0x200008c4
 800fc04:	200008b0 	.word	0x200008b0
 800fc08:	0800fba1 	.word	0x0800fba1

0800fc0c <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b085      	sub	sp, #20
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
}
 800fc18:	bf00      	nop
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
}
 800fc30:	bf00      	nop
 800fc32:	3714      	adds	r7, #20
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	4a05      	ldr	r2, [pc, #20]	; (800fc5c <_ZN14NullTestPluginD1Ev+0x20>)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7ff fe13 	bl	800f878 <_ZN10TestPluginD1Ev>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	4618      	mov	r0, r3
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	08025d28 	.word	0x08025d28

0800fc60 <_ZN14NullTestPluginD0Ev>:
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff ffe7 	bl	800fc3c <_ZN14NullTestPluginD1Ev>
 800fc6e:	2114      	movs	r1, #20
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7f8 fd1b 	bl	80086ac <_ZdlPvj>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800fc88:	4a0f      	ldr	r2, [pc, #60]	; (800fcc8 <_ZN12TestRegistryC1Ev+0x48>)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	605a      	str	r2, [r3, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	609a      	str	r2, [r3, #8]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	60da      	str	r2, [r3, #12]
 800fca0:	f7ff ff86 	bl	800fbb0 <_ZN14NullTestPlugin8instanceEv>
 800fca4:	4602      	mov	r2, r0
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	611a      	str	r2, [r3, #16]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2200      	movs	r2, #0
 800fcae:	751a      	strb	r2, [r3, #20]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	619a      	str	r2, [r3, #24]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	771a      	strb	r2, [r3, #28]
{
}
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	08025df4 	.word	0x08025df4

0800fccc <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	4a04      	ldr	r2, [pc, #16]	; (800fce8 <_ZN12TestRegistryD1Ev+0x1c>)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	601a      	str	r2, [r3, #0]
{
}
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr
 800fce8:	08025df4 	.word	0x08025df4

0800fcec <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
}
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7ff ffe9 	bl	800fccc <_ZN12TestRegistryD1Ev>
 800fcfa:	2120      	movs	r1, #32
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f7f8 fcd5 	bl	80086ac <_ZdlPvj>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	6852      	ldr	r2, [r2, #4]
 800fd22:	4611      	mov	r1, r2
 800fd24:	6838      	ldr	r0, [r7, #0]
 800fd26:	4798      	blx	r3
 800fd28:	4602      	mov	r2, r0
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	605a      	str	r2, [r3, #4]
}
 800fd2e:	bf00      	nop
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}

0800fd36 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b084      	sub	sp, #16
 800fd3a:	af00      	add	r7, sp, #0
 800fd3c:	6078      	str	r0, [r7, #4]
 800fd3e:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800fd40:	2301      	movs	r3, #1
 800fd42:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	3308      	adds	r3, #8
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	6838      	ldr	r0, [r7, #0]
 800fd4e:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	60bb      	str	r3, [r7, #8]
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d05c      	beq.n	800fe16 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	7d1b      	ldrb	r3, [r3, #20]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d005      	beq.n	800fd70 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	3380      	adds	r3, #128	; 0x80
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68b8      	ldr	r0, [r7, #8]
 800fd6e:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	7f1b      	ldrb	r3, [r3, #28]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d005      	beq.n	800fd84 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	3384      	adds	r3, #132	; 0x84
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	68b8      	ldr	r0, [r7, #8]
 800fd82:	4798      	blx	r3

        if (groupStart) {
 800fd84:	7bfb      	ldrb	r3, [r7, #15]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d008      	beq.n	800fd9c <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	3310      	adds	r3, #16
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	68b9      	ldr	r1, [r7, #8]
 800fd94:	6838      	ldr	r0, [r7, #0]
 800fd96:	4798      	blx	r3
            groupStart = false;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3320      	adds	r3, #32
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	6838      	ldr	r0, [r7, #0]
 800fda6:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800fda8:	683a      	ldr	r2, [r7, #0]
 800fdaa:	68b9      	ldr	r1, [r7, #8]
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 fb79 	bl	80104a4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d016      	beq.n	800fde6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	3318      	adds	r3, #24
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	68b9      	ldr	r1, [r7, #8]
 800fdc2:	6838      	ldr	r0, [r7, #0]
 800fdc4:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3390      	adds	r3, #144	; 0x90
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	6911      	ldr	r1, [r2, #16]
 800fdd2:	683a      	ldr	r2, [r7, #0]
 800fdd4:	68b8      	ldr	r0, [r7, #8]
 800fdd6:	4798      	blx	r3
            result.currentTestEnded(test);
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	331c      	adds	r3, #28
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	68b9      	ldr	r1, [r7, #8]
 800fde2:	6838      	ldr	r0, [r7, #0]
 800fde4:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800fde6:	68b9      	ldr	r1, [r7, #8]
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 fa5b 	bl	80102a4 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d008      	beq.n	800fe06 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	3314      	adds	r3, #20
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68b9      	ldr	r1, [r7, #8]
 800fe02:	6838      	ldr	r0, [r7, #0]
 800fe04:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	330c      	adds	r3, #12
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	68b8      	ldr	r0, [r7, #8]
 800fe10:	4798      	blx	r3
 800fe12:	60b8      	str	r0, [r7, #8]
 800fe14:	e79f      	b.n	800fd56 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	330c      	adds	r3, #12
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	6838      	ldr	r0, [r7, #0]
 800fe20:	4798      	blx	r3
    currentRepetition_++;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	699b      	ldr	r3, [r3, #24]
 800fe26:	1c5a      	adds	r2, r3, #1
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	619a      	str	r2, [r3, #24]
}
 800fe2c:	bf00      	nop
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800fe34:	b590      	push	{r4, r7, lr}
 800fe36:	b08f      	sub	sp, #60	; 0x3c
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800fe3e:	f107 0314 	add.w	r3, r7, #20
 800fe42:	4953      	ldr	r1, [pc, #332]	; (800ff90 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fa ffe0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d04d      	beq.n	800fef2 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800fe56:	f107 030c 	add.w	r3, r7, #12
 800fe5a:	494d      	ldr	r1, [pc, #308]	; (800ff90 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7fa ffd4 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800fe62:	f107 030c 	add.w	r3, r7, #12
 800fe66:	494b      	ldr	r1, [pc, #300]	; (800ff94 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7fb fc15 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800fe6e:	f107 031c 	add.w	r3, r7, #28
 800fe72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe74:	4618      	mov	r0, r3
 800fe76:	f001 f9d2 	bl	801121e <_ZNK10UtestShell8getGroupEv>
 800fe7a:	f107 021c 	add.w	r2, r7, #28
 800fe7e:	f107 030c 	add.w	r3, r7, #12
 800fe82:	4611      	mov	r1, r2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fb fbf5 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 800fe8a:	f107 031c 	add.w	r3, r7, #28
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fb fb73 	bl	800b57a <_ZN12SimpleStringD1Ev>
        gname += "#";
 800fe94:	f107 030c 	add.w	r3, r7, #12
 800fe98:	493e      	ldr	r1, [pc, #248]	; (800ff94 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7fb fbfc 	bl	800b698 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800fea0:	f107 020c 	add.w	r2, r7, #12
 800fea4:	f107 0314 	add.w	r3, r7, #20
 800fea8:	4611      	mov	r1, r2
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fb f82b 	bl	800af06 <_ZNK12SimpleString8containsERKS_>
 800feb0:	4603      	mov	r3, r0
 800feb2:	f083 0301 	eor.w	r3, r3, #1
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d00d      	beq.n	800fed8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800febc:	f107 020c 	add.w	r2, r7, #12
 800fec0:	f107 0314 	add.w	r3, r7, #20
 800fec4:	4611      	mov	r1, r2
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fb fbd4 	bl	800b674 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800fecc:	f107 0314 	add.w	r3, r7, #20
 800fed0:	4931      	ldr	r1, [pc, #196]	; (800ff98 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fb fbe0 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800fed8:	f107 030c 	add.w	r3, r7, #12
 800fedc:	4618      	mov	r0, r3
 800fede:	f7fb fb4c 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800fee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	330c      	adds	r3, #12
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800feec:	4798      	blx	r3
 800feee:	6378      	str	r0, [r7, #52]	; 0x34
 800fef0:	e7ae      	b.n	800fe50 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800fef2:	f107 0314 	add.w	r3, r7, #20
 800fef6:	4a26      	ldr	r2, [pc, #152]	; (800ff90 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800fef8:	4926      	ldr	r1, [pc, #152]	; (800ff94 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fb f99a 	bl	800b234 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800ff00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff04:	4924      	ldr	r1, [pc, #144]	; (800ff98 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fa ff7f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 800ff0c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ff10:	f107 0314 	add.w	r3, r7, #20
 800ff14:	4611      	mov	r1, r2
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fb f874 	bl	800b004 <_ZNK12SimpleString8endsWithERKS_>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	461c      	mov	r4, r3
 800ff20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fb fb28 	bl	800b57a <_ZN12SimpleStringD1Ev>
 800ff2a:	2c00      	cmp	r4, #0
 800ff2c:	d01a      	beq.n	800ff64 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800ff2e:	f107 0314 	add.w	r3, r7, #20
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fb fb00 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	3b01      	subs	r3, #1
 800ff3c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800ff40:	f107 0114 	add.w	r1, r7, #20
 800ff44:	2200      	movs	r2, #0
 800ff46:	f7fb fc21 	bl	800b78c <_ZNK12SimpleString9subStringEjj>
 800ff4a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ff4e:	f107 0314 	add.w	r3, r7, #20
 800ff52:	4611      	mov	r1, r2
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fa ffc4 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 800ff5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fb fb0b 	bl	800b57a <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	3338      	adds	r3, #56	; 0x38
 800ff6a:	681c      	ldr	r4, [r3, #0]
 800ff6c:	f107 0314 	add.w	r3, r7, #20
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fb fad5 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 800ff76:	4603      	mov	r3, r0
 800ff78:	4619      	mov	r1, r3
 800ff7a:	6838      	ldr	r0, [r7, #0]
 800ff7c:	47a0      	blx	r4
    SimpleString groupList;
 800ff7e:	f107 0314 	add.w	r3, r7, #20
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fb faf9 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 800ff88:	bf00      	nop
 800ff8a:	373c      	adds	r7, #60	; 0x3c
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd90      	pop	{r4, r7, pc}
 800ff90:	08022d2c 	.word	0x08022d2c
 800ff94:	08022d30 	.word	0x08022d30
 800ff98:	08022d34 	.word	0x08022d34

0800ff9c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800ff9c:	b590      	push	{r4, r7, lr}
 800ff9e:	b091      	sub	sp, #68	; 0x44
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800ffa6:	f107 0314 	add.w	r3, r7, #20
 800ffaa:	4964      	ldr	r1, [pc, #400]	; (801013c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fa ff2c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d06e      	beq.n	801009c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800ffbe:	683a      	ldr	r2, [r7, #0]
 800ffc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 fa6e 	bl	80104a4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d05e      	beq.n	801008c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800ffce:	f107 030c 	add.w	r3, r7, #12
 800ffd2:	495a      	ldr	r1, [pc, #360]	; (801013c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fa ff18 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800ffda:	f107 030c 	add.w	r3, r7, #12
 800ffde:	4958      	ldr	r1, [pc, #352]	; (8010140 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fb fb59 	bl	800b698 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800ffe6:	f107 031c 	add.w	r3, r7, #28
 800ffea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ffec:	4618      	mov	r0, r3
 800ffee:	f001 f916 	bl	801121e <_ZNK10UtestShell8getGroupEv>
 800fff2:	f107 021c 	add.w	r2, r7, #28
 800fff6:	f107 030c 	add.w	r3, r7, #12
 800fffa:	4611      	mov	r1, r2
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fb fb39 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8010002:	f107 031c 	add.w	r3, r7, #28
 8010006:	4618      	mov	r0, r3
 8010008:	f7fb fab7 	bl	800b57a <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 801000c:	f107 030c 	add.w	r3, r7, #12
 8010010:	494c      	ldr	r1, [pc, #304]	; (8010144 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8010012:	4618      	mov	r0, r3
 8010014:	f7fb fb40 	bl	800b698 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8010018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801001c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801001e:	4618      	mov	r0, r3
 8010020:	f001 f8ee 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 8010024:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010028:	f107 030c 	add.w	r3, r7, #12
 801002c:	4611      	mov	r1, r2
 801002e:	4618      	mov	r0, r3
 8010030:	f7fb fb20 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8010034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010038:	4618      	mov	r0, r3
 801003a:	f7fb fa9e 	bl	800b57a <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 801003e:	f107 030c 	add.w	r3, r7, #12
 8010042:	493f      	ldr	r1, [pc, #252]	; (8010140 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8010044:	4618      	mov	r0, r3
 8010046:	f7fb fb27 	bl	800b698 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 801004a:	f107 020c 	add.w	r2, r7, #12
 801004e:	f107 0314 	add.w	r3, r7, #20
 8010052:	4611      	mov	r1, r2
 8010054:	4618      	mov	r0, r3
 8010056:	f7fa ff56 	bl	800af06 <_ZNK12SimpleString8containsERKS_>
 801005a:	4603      	mov	r3, r0
 801005c:	f083 0301 	eor.w	r3, r3, #1
 8010060:	b2db      	uxtb	r3, r3
 8010062:	2b00      	cmp	r3, #0
 8010064:	d00d      	beq.n	8010082 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8010066:	f107 020c 	add.w	r2, r7, #12
 801006a:	f107 0314 	add.w	r3, r7, #20
 801006e:	4611      	mov	r1, r2
 8010070:	4618      	mov	r0, r3
 8010072:	f7fb faff 	bl	800b674 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8010076:	f107 0314 	add.w	r3, r7, #20
 801007a:	4933      	ldr	r1, [pc, #204]	; (8010148 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 801007c:	4618      	mov	r0, r3
 801007e:	f7fb fb0b 	bl	800b698 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8010082:	f107 030c 	add.w	r3, r7, #12
 8010086:	4618      	mov	r0, r3
 8010088:	f7fb fa77 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801008c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	330c      	adds	r3, #12
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010096:	4798      	blx	r3
 8010098:	63f8      	str	r0, [r7, #60]	; 0x3c
 801009a:	e78d      	b.n	800ffb8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 801009c:	f107 0314 	add.w	r3, r7, #20
 80100a0:	4a26      	ldr	r2, [pc, #152]	; (801013c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 80100a2:	4927      	ldr	r1, [pc, #156]	; (8010140 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fb f8c5 	bl	800b234 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 80100aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80100ae:	4926      	ldr	r1, [pc, #152]	; (8010148 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fa feaa 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80100b6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80100ba:	f107 0314 	add.w	r3, r7, #20
 80100be:	4611      	mov	r1, r2
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7fa ff9f 	bl	800b004 <_ZNK12SimpleString8endsWithERKS_>
 80100c6:	4603      	mov	r3, r0
 80100c8:	461c      	mov	r4, r3
 80100ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fb fa53 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80100d4:	2c00      	cmp	r4, #0
 80100d6:	d01a      	beq.n	801010e <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 80100d8:	f107 0314 	add.w	r3, r7, #20
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fb fa2b 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 80100e2:	4603      	mov	r3, r0
 80100e4:	3b01      	subs	r3, #1
 80100e6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80100ea:	f107 0114 	add.w	r1, r7, #20
 80100ee:	2200      	movs	r2, #0
 80100f0:	f7fb fb4c 	bl	800b78c <_ZNK12SimpleString9subStringEjj>
 80100f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80100f8:	f107 0314 	add.w	r3, r7, #20
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fa feef 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 8010104:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010108:	4618      	mov	r0, r3
 801010a:	f7fb fa36 	bl	800b57a <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	3338      	adds	r3, #56	; 0x38
 8010114:	681c      	ldr	r4, [r3, #0]
 8010116:	f107 0314 	add.w	r3, r7, #20
 801011a:	4618      	mov	r0, r3
 801011c:	f7fb fa00 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8010120:	4603      	mov	r3, r0
 8010122:	4619      	mov	r1, r3
 8010124:	6838      	ldr	r0, [r7, #0]
 8010126:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8010128:	f107 0314 	add.w	r3, r7, #20
 801012c:	4618      	mov	r0, r3
 801012e:	f7fb fa24 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8010132:	bf00      	nop
 8010134:	3744      	adds	r7, #68	; 0x44
 8010136:	46bd      	mov	sp, r7
 8010138:	bd90      	pop	{r4, r7, pc}
 801013a:	bf00      	nop
 801013c:	08022d2c 	.word	0x08022d2c
 8010140:	08022d30 	.word	0x08022d30
 8010144:	08022d38 	.word	0x08022d38
 8010148:	08022d34 	.word	0x08022d34

0801014c <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 801014c:	b590      	push	{r4, r7, lr}
 801014e:	b091      	sub	sp, #68	; 0x44
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 8010156:	f107 0314 	add.w	r3, r7, #20
 801015a:	494f      	ldr	r1, [pc, #316]	; (8010298 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 801015c:	4618      	mov	r0, r3
 801015e:	f7fa fe54 	bl	800ae0a <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801016a:	2b00      	cmp	r3, #0
 801016c:	d07d      	beq.n	801026a <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 801016e:	f107 030c 	add.w	r3, r7, #12
 8010172:	4949      	ldr	r1, [pc, #292]	; (8010298 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8010174:	4618      	mov	r0, r3
 8010176:	f7fa fe48 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 801017a:	f107 031c 	add.w	r3, r7, #28
 801017e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010180:	4618      	mov	r0, r3
 8010182:	f001 f84c 	bl	801121e <_ZNK10UtestShell8getGroupEv>
 8010186:	f107 021c 	add.w	r2, r7, #28
 801018a:	f107 030c 	add.w	r3, r7, #12
 801018e:	4611      	mov	r1, r2
 8010190:	4618      	mov	r0, r3
 8010192:	f7fb fa6f 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8010196:	f107 031c 	add.w	r3, r7, #28
 801019a:	4618      	mov	r0, r3
 801019c:	f7fb f9ed 	bl	800b57a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80101a0:	f107 030c 	add.w	r3, r7, #12
 80101a4:	493d      	ldr	r1, [pc, #244]	; (801029c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fb fa76 	bl	800b698 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 80101ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101b2:	4618      	mov	r0, r3
 80101b4:	f001 f824 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 80101b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80101bc:	f107 030c 	add.w	r3, r7, #12
 80101c0:	4611      	mov	r1, r2
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fb fa56 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 80101c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fb f9d4 	bl	800b57a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80101d2:	f107 030c 	add.w	r3, r7, #12
 80101d6:	4931      	ldr	r1, [pc, #196]	; (801029c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fb fa5d 	bl	800b698 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 80101de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80101e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101e4:	4618      	mov	r0, r3
 80101e6:	f001 f8dc 	bl	80113a2 <_ZNK10UtestShell7getFileEv>
 80101ea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80101ee:	f107 030c 	add.w	r3, r7, #12
 80101f2:	4611      	mov	r1, r2
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fb fa3d 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 80101fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fb f9bb 	bl	800b57a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010204:	f107 030c 	add.w	r3, r7, #12
 8010208:	4924      	ldr	r1, [pc, #144]	; (801029c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801020a:	4618      	mov	r0, r3
 801020c:	f7fb fa44 	bl	800b698 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8010210:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010212:	f001 f8d5 	bl	80113c0 <_ZNK10UtestShell13getLineNumberEv>
 8010216:	4603      	mov	r3, r0
 8010218:	461a      	mov	r2, r3
 801021a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801021e:	4920      	ldr	r1, [pc, #128]	; (80102a0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8010220:	4618      	mov	r0, r3
 8010222:	f7fb feb1 	bl	800bf88 <_Z16StringFromFormatPKcz>
 8010226:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801022a:	f107 030c 	add.w	r3, r7, #12
 801022e:	4611      	mov	r1, r2
 8010230:	4618      	mov	r0, r3
 8010232:	f7fb fa1f 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8010236:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801023a:	4618      	mov	r0, r3
 801023c:	f7fb f99d 	bl	800b57a <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 8010240:	f107 020c 	add.w	r2, r7, #12
 8010244:	f107 0314 	add.w	r3, r7, #20
 8010248:	4611      	mov	r1, r2
 801024a:	4618      	mov	r0, r3
 801024c:	f7fb fa12 	bl	800b674 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 8010250:	f107 030c 	add.w	r3, r7, #12
 8010254:	4618      	mov	r0, r3
 8010256:	f7fb f990 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801025a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	330c      	adds	r3, #12
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010264:	4798      	blx	r3
 8010266:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010268:	e77e      	b.n	8010168 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	3338      	adds	r3, #56	; 0x38
 8010270:	681c      	ldr	r4, [r3, #0]
 8010272:	f107 0314 	add.w	r3, r7, #20
 8010276:	4618      	mov	r0, r3
 8010278:	f7fb f952 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801027c:	4603      	mov	r3, r0
 801027e:	4619      	mov	r1, r3
 8010280:	6838      	ldr	r0, [r7, #0]
 8010282:	47a0      	blx	r4
    SimpleString testLocations;
 8010284:	f107 0314 	add.w	r3, r7, #20
 8010288:	4618      	mov	r0, r3
 801028a:	f7fb f976 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 801028e:	bf00      	nop
 8010290:	3744      	adds	r7, #68	; 0x44
 8010292:	46bd      	mov	sp, r7
 8010294:	bd90      	pop	{r4, r7, pc}
 8010296:	bf00      	nop
 8010298:	08022d2c 	.word	0x08022d2c
 801029c:	08022d38 	.word	0x08022d38
 80102a0:	08022d3c 	.word	0x08022d3c

080102a4 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 80102a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102a6:	b087      	sub	sp, #28
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 80102ae:	2400      	movs	r4, #0
 80102b0:	2500      	movs	r5, #0
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d028      	beq.n	801030a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	330c      	adds	r3, #12
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	6838      	ldr	r0, [r7, #0]
 80102c2:	4798      	blx	r3
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d01f      	beq.n	801030a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 80102ca:	f107 0308 	add.w	r3, r7, #8
 80102ce:	6839      	ldr	r1, [r7, #0]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f000 ffa4 	bl	801121e <_ZNK10UtestShell8getGroupEv>
 80102d6:	2401      	movs	r4, #1
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	330c      	adds	r3, #12
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	6838      	ldr	r0, [r7, #0]
 80102e2:	4798      	blx	r3
 80102e4:	4602      	mov	r2, r0
 80102e6:	f107 0310 	add.w	r3, r7, #16
 80102ea:	4611      	mov	r1, r2
 80102ec:	4618      	mov	r0, r3
 80102ee:	f000 ff96 	bl	801121e <_ZNK10UtestShell8getGroupEv>
 80102f2:	2501      	movs	r5, #1
 80102f4:	f107 0210 	add.w	r2, r7, #16
 80102f8:	f107 0308 	add.w	r3, r7, #8
 80102fc:	4611      	mov	r1, r2
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fb f98c 	bl	800b61c <_ZneRK12SimpleStringS1_>
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 801030a:	2601      	movs	r6, #1
 801030c:	e000      	b.n	8010310 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 801030e:	2600      	movs	r6, #0
 8010310:	2d00      	cmp	r5, #0
 8010312:	d004      	beq.n	801031e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8010314:	f107 0310 	add.w	r3, r7, #16
 8010318:	4618      	mov	r0, r3
 801031a:	f7fb f92e 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801031e:	2c00      	cmp	r4, #0
 8010320:	d004      	beq.n	801032c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8010322:	f107 0308 	add.w	r3, r7, #8
 8010326:	4618      	mov	r0, r3
 8010328:	f7fb f927 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801032c:	4633      	mov	r3, r6
}
 801032e:	4618      	mov	r0, r3
 8010330:	371c      	adds	r7, #28
 8010332:	46bd      	mov	sp, r7
 8010334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010336 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b082      	sub	sp, #8
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00a      	beq.n	801035c <_ZN12TestRegistry10countTestsEv+0x26>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	3310      	adds	r3, #16
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4610      	mov	r0, r2
 8010356:	4798      	blx	r3
 8010358:	4603      	mov	r3, r0
 801035a:	e000      	b.n	801035e <_ZN12TestRegistry10countTestsEv+0x28>
 801035c:	2300      	movs	r3, #0
}
 801035e:	4618      	mov	r0, r3
 8010360:	3708      	adds	r7, #8
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
	...

08010368 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8010368:	b580      	push	{r7, lr}
 801036a:	af00      	add	r7, sp, #0
 801036c:	4801      	ldr	r0, [pc, #4]	; (8010374 <__tcf_0+0xc>)
 801036e:	f7ff fcad 	bl	800fccc <_ZN12TestRegistryD1Ev>
 8010372:	bd80      	pop	{r7, pc}
 8010374:	200008cc 	.word	0x200008cc

08010378 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8010378:	b580      	push	{r7, lr}
 801037a:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 801037c:	4b15      	ldr	r3, [pc, #84]	; (80103d4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	f3bf 8f5b 	dmb	ish
 8010384:	b2db      	uxtb	r3, r3
 8010386:	f003 0301 	and.w	r3, r3, #1
 801038a:	2b00      	cmp	r3, #0
 801038c:	bf0c      	ite	eq
 801038e:	2301      	moveq	r3, #1
 8010390:	2300      	movne	r3, #0
 8010392:	b2db      	uxtb	r3, r3
 8010394:	2b00      	cmp	r3, #0
 8010396:	d013      	beq.n	80103c0 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8010398:	480e      	ldr	r0, [pc, #56]	; (80103d4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801039a:	f00d fbf5 	bl	801db88 <__cxa_guard_acquire>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	bf14      	ite	ne
 80103a4:	2301      	movne	r3, #1
 80103a6:	2300      	moveq	r3, #0
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d008      	beq.n	80103c0 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 80103ae:	480a      	ldr	r0, [pc, #40]	; (80103d8 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 80103b0:	f7ff fc66 	bl	800fc80 <_ZN12TestRegistryC1Ev>
 80103b4:	4807      	ldr	r0, [pc, #28]	; (80103d4 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80103b6:	f00d fbf3 	bl	801dba0 <__cxa_guard_release>
 80103ba:	4808      	ldr	r0, [pc, #32]	; (80103dc <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 80103bc:	f00d fc17 	bl	801dbee <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 80103c0:	4b07      	ldr	r3, [pc, #28]	; (80103e0 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d002      	beq.n	80103ce <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 80103c8:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	e000      	b.n	80103d0 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 80103ce:	4b02      	ldr	r3, [pc, #8]	; (80103d8 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	200008ec 	.word	0x200008ec
 80103d8:	200008cc 	.word	0x200008cc
 80103dc:	08010369 	.word	0x08010369
 80103e0:	200008c8 	.word	0x200008c8

080103e4 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 80103ee:	4a04      	ldr	r2, [pc, #16]	; (8010400 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	6013      	str	r3, [r2, #0]
}
 80103f4:	bf00      	nop
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr
 8010400:	200008c8 	.word	0x200008c8

08010404 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00a      	beq.n	801042a <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	685a      	ldr	r2, [r3, #4]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	330c      	adds	r3, #12
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4610      	mov	r0, r2
 8010424:	4798      	blx	r3
 8010426:	4603      	mov	r3, r0
 8010428:	e000      	b.n	801042c <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 801042a:	2300      	movs	r3, #0
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	6053      	str	r3, [r2, #4]

}
 8010430:	bf00      	nop
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	683a      	ldr	r2, [r7, #0]
 8010446:	609a      	str	r2, [r3, #8]
}
 8010448:	bf00      	nop
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	683a      	ldr	r2, [r7, #0]
 8010462:	60da      	str	r2, [r3, #12]
}
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8010470:	b480      	push	{r7}
 8010472:	b083      	sub	sp, #12
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	771a      	strb	r2, [r3, #28]
}
 801047e:	bf00      	nop
 8010480:	370c      	adds	r7, #12
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr

0801048a <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 801048a:	b480      	push	{r7}
 801048c:	b083      	sub	sp, #12
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2201      	movs	r2, #1
 8010496:	751a      	strb	r2, [r3, #20]
}
 8010498:	bf00      	nop
 801049a:	370c      	adds	r7, #12
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	68d9      	ldr	r1, [r3, #12]
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	689b      	ldr	r3, [r3, #8]
 80104b8:	461a      	mov	r2, r3
 80104ba:	68b8      	ldr	r0, [r7, #8]
 80104bc:	f000 ffbb 	bl	8011436 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d001      	beq.n	80104ca <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 80104c6:	2301      	movs	r3, #1
 80104c8:	e006      	b.n	80104d8 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	332c      	adds	r3, #44	; 0x2c
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	4798      	blx	r3
        return false;
 80104d6:	2300      	movs	r3, #0
    }
}
 80104d8:	4618      	mov	r0, r3
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 80104e8:	f7ff fb62 	bl	800fbb0 <_ZN14NullTestPlugin8instanceEv>
 80104ec:	4602      	mov	r2, r0
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	611a      	str	r2, [r3, #16]
}
 80104f2:	bf00      	nop
 80104f4:	3708      	adds	r7, #8
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}

080104fa <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 80104fa:	b580      	push	{r7, lr}
 80104fc:	b082      	sub	sp, #8
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
 8010502:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	3324      	adds	r3, #36	; 0x24
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	6912      	ldr	r2, [r2, #16]
 8010510:	4611      	mov	r1, r2
 8010512:	6838      	ldr	r0, [r7, #0]
 8010514:	4798      	blx	r3
 8010516:	4602      	mov	r2, r0
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	611a      	str	r2, [r3, #16]
}
 801051c:	bf00      	nop
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	691b      	ldr	r3, [r3, #16]
}
 8010530:	4618      	mov	r0, r3
 8010532:	370c      	adds	r7, #12
 8010534:	46bd      	mov	sp, r7
 8010536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053a:	4770      	bx	lr

0801053c <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	691b      	ldr	r3, [r3, #16]
 801054a:	6839      	ldr	r1, [r7, #0]
 801054c:	4618      	mov	r0, r3
 801054e:	f7ff fa52 	bl	800f9f6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8010552:	4603      	mov	r3, r0
}
 8010554:	4618      	mov	r0, r3
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	691a      	ldr	r2, [r3, #16]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	691b      	ldr	r3, [r3, #16]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	3328      	adds	r3, #40	; 0x28
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	6839      	ldr	r1, [r7, #0]
 8010576:	4610      	mov	r0, r2
 8010578:	4798      	blx	r3
 801057a:	4602      	mov	r2, r0
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	691b      	ldr	r3, [r3, #16]
 8010580:	429a      	cmp	r2, r3
 8010582:	bf0c      	ite	eq
 8010584:	2301      	moveq	r3, #1
 8010586:	2300      	movne	r3, #0
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d00b      	beq.n	80105a6 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	691a      	ldr	r2, [r3, #16]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	691b      	ldr	r3, [r3, #16]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	332c      	adds	r3, #44	; 0x2c
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4610      	mov	r0, r2
 801059e:	4798      	blx	r3
 80105a0:	4602      	mov	r2, r0
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	691b      	ldr	r3, [r3, #16]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff fa17 	bl	800f9de <_ZN10TestPlugin7getNameEv>
 80105b0:	4603      	mov	r3, r0
 80105b2:	6839      	ldr	r1, [r7, #0]
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fa ffec 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00b      	beq.n	80105d8 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	691a      	ldr	r2, [r3, #16]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	332c      	adds	r3, #44	; 0x2c
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4610      	mov	r0, r2
 80105d0:	4798      	blx	r3
 80105d2:	4602      	mov	r2, r0
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	691a      	ldr	r2, [r3, #16]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	691b      	ldr	r3, [r3, #16]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	3328      	adds	r3, #40	; 0x28
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	6839      	ldr	r1, [r7, #0]
 80105e8:	4610      	mov	r0, r2
 80105ea:	4798      	blx	r3
}
 80105ec:	bf00      	nop
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
    int count = 0;
 80105fc:	2300      	movs	r3, #0
 80105fe:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	60bb      	str	r3, [r7, #8]
 8010606:	f7ff fad3 	bl	800fbb0 <_ZN14NullTestPlugin8instanceEv>
 801060a:	4602      	mov	r2, r0
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	4293      	cmp	r3, r2
 8010610:	bf14      	ite	ne
 8010612:	2301      	movne	r3, #1
 8010614:	2300      	moveq	r3, #0
 8010616:	b2db      	uxtb	r3, r3
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00a      	beq.n	8010632 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	3301      	adds	r3, #1
 8010620:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	332c      	adds	r3, #44	; 0x2c
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	68b8      	ldr	r0, [r7, #8]
 801062c:	4798      	blx	r3
 801062e:	60b8      	str	r0, [r7, #8]
 8010630:	e7e9      	b.n	8010606 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8010632:	68fb      	ldr	r3, [r7, #12]
}
 8010634:	4618      	mov	r0, r3
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
    return tests_;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	685b      	ldr	r3, [r3, #4]
}
 8010648:	4618      	mov	r0, r3
 801064a:	370c      	adds	r7, #12
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b084      	sub	sp, #16
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	334c      	adds	r3, #76	; 0x4c
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	4798      	blx	r3
 801066a:	4602      	mov	r2, r0
 801066c:	f107 0308 	add.w	r3, r7, #8
 8010670:	4611      	mov	r1, r2
 8010672:	4618      	mov	r0, r3
 8010674:	f002 f8f8 	bl	8012868 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8010678:	f107 0308 	add.w	r3, r7, #8
 801067c:	6839      	ldr	r1, [r7, #0]
 801067e:	4618      	mov	r0, r3
 8010680:	f002 f980 	bl	8012984 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8010684:	f107 0308 	add.w	r3, r7, #8
 8010688:	4618      	mov	r0, r3
 801068a:	f002 fa13 	bl	8012ab4 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 801068e:	4602      	mov	r2, r0
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8010694:	f107 0308 	add.w	r3, r7, #8
 8010698:	4618      	mov	r0, r3
 801069a:	f002 f939 	bl	8012910 <_ZN22UtestShellPointerArrayD1Ev>
}
 801069e:	bf00      	nop
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b084      	sub	sp, #16
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	334c      	adds	r3, #76	; 0x4c
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	4798      	blx	r3
 80106ba:	4602      	mov	r2, r0
 80106bc:	f107 0308 	add.w	r3, r7, #8
 80106c0:	4611      	mov	r1, r2
 80106c2:	4618      	mov	r0, r3
 80106c4:	f002 f8d0 	bl	8012868 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 80106c8:	f107 0308 	add.w	r3, r7, #8
 80106cc:	4618      	mov	r0, r3
 80106ce:	f002 f995 	bl	80129fc <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 80106d2:	f107 0308 	add.w	r3, r7, #8
 80106d6:	4618      	mov	r0, r3
 80106d8:	f002 f9ec 	bl	8012ab4 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 80106dc:	4602      	mov	r2, r0
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 80106e2:	f107 0308 	add.w	r3, r7, #8
 80106e6:	4618      	mov	r0, r3
 80106e8:	f002 f912 	bl	8012910 <_ZN22UtestShellPointerArrayD1Ev>
}
 80106ec:	bf00      	nop
 80106ee:	3710      	adds	r7, #16
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00b      	beq.n	8010722 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	330c      	adds	r3, #12
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	4798      	blx	r3
 8010716:	4602      	mov	r2, r0
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	4293      	cmp	r3, r2
 801071c:	d001      	beq.n	8010722 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 801071e:	2301      	movs	r3, #1
 8010720:	e000      	b.n	8010724 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8010722:	2300      	movs	r3, #0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d007      	beq.n	8010738 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	330c      	adds	r3, #12
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	68f8      	ldr	r0, [r7, #12]
 8010732:	4798      	blx	r3
 8010734:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8010736:	e7e5      	b.n	8010704 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8010738:	68fb      	ldr	r3, [r7, #12]
}
 801073a:	4618      	mov	r0, r3
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8010742:	b590      	push	{r4, r7, lr}
 8010744:	b087      	sub	sp, #28
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	617b      	str	r3, [r7, #20]
    while (current) {
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d01e      	beq.n	8010796 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8010758:	f107 030c 	add.w	r3, r7, #12
 801075c:	6979      	ldr	r1, [r7, #20]
 801075e:	4618      	mov	r0, r3
 8010760:	f000 fd4e 	bl	8011200 <_ZNK10UtestShell7getNameEv>
 8010764:	f107 030c 	add.w	r3, r7, #12
 8010768:	6839      	ldr	r1, [r7, #0]
 801076a:	4618      	mov	r0, r3
 801076c:	f7fa ff11 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8010770:	4603      	mov	r3, r0
 8010772:	461c      	mov	r4, r3
 8010774:	f107 030c 	add.w	r3, r7, #12
 8010778:	4618      	mov	r0, r3
 801077a:	f7fa fefe 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801077e:	2c00      	cmp	r4, #0
 8010780:	d001      	beq.n	8010786 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	e008      	b.n	8010798 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	330c      	adds	r3, #12
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	6978      	ldr	r0, [r7, #20]
 8010790:	4798      	blx	r3
 8010792:	6178      	str	r0, [r7, #20]
    while (current) {
 8010794:	e7dd      	b.n	8010752 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8010796:	2300      	movs	r3, #0
}
 8010798:	4618      	mov	r0, r3
 801079a:	371c      	adds	r7, #28
 801079c:	46bd      	mov	sp, r7
 801079e:	bd90      	pop	{r4, r7, pc}

080107a0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 80107a0:	b590      	push	{r4, r7, lr}
 80107a2:	b087      	sub	sp, #28
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	617b      	str	r3, [r7, #20]
    while (current) {
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d01e      	beq.n	80107f4 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 80107b6:	f107 030c 	add.w	r3, r7, #12
 80107ba:	6979      	ldr	r1, [r7, #20]
 80107bc:	4618      	mov	r0, r3
 80107be:	f000 fd2e 	bl	801121e <_ZNK10UtestShell8getGroupEv>
 80107c2:	f107 030c 	add.w	r3, r7, #12
 80107c6:	6839      	ldr	r1, [r7, #0]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fa fee2 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 80107ce:	4603      	mov	r3, r0
 80107d0:	461c      	mov	r4, r3
 80107d2:	f107 030c 	add.w	r3, r7, #12
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fa fecf 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80107dc:	2c00      	cmp	r4, #0
 80107de:	d001      	beq.n	80107e4 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	e008      	b.n	80107f6 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	330c      	adds	r3, #12
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	6978      	ldr	r0, [r7, #20]
 80107ee:	4798      	blx	r3
 80107f0:	6178      	str	r0, [r7, #20]
    while (current) {
 80107f2:	e7dd      	b.n	80107b0 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 80107f4:	2300      	movs	r3, #0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	371c      	adds	r7, #28
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd90      	pop	{r4, r7, pc}
	...

08010800 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8010800:	b480      	push	{r7}
 8010802:	b083      	sub	sp, #12
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 801080a:	4a18      	ldr	r2, [pc, #96]	; (801086c <_ZN10TestResultC1ER10TestOutput+0x6c>)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	601a      	str	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	683a      	ldr	r2, [r7, #0]
 8010814:	605a      	str	r2, [r3, #4]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	609a      	str	r2, [r3, #8]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	60da      	str	r2, [r3, #12]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	611a      	str	r2, [r3, #16]
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	615a      	str	r2, [r3, #20]
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	619a      	str	r2, [r3, #24]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	61da      	str	r2, [r3, #28]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2200      	movs	r2, #0
 801083e:	621a      	str	r2, [r3, #32]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	625a      	str	r2, [r3, #36]	; 0x24
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	629a      	str	r2, [r3, #40]	; 0x28
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	62da      	str	r2, [r3, #44]	; 0x2c
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2200      	movs	r2, #0
 8010856:	631a      	str	r2, [r3, #48]	; 0x30
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4618      	mov	r0, r3
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr
 801086c:	08025e60 	.word	0x08025e60

08010870 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8010870:	b480      	push	{r7}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	4a04      	ldr	r2, [pc, #16]	; (801088c <_ZN10TestResultD1Ev+0x1c>)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	601a      	str	r2, [r3, #0]
{
}
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4618      	mov	r0, r3
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr
 801088c:	08025e60 	.word	0x08025e60

08010890 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
}
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7ff ffe9 	bl	8010870 <_ZN10TestResultD1Ev>
 801089e:	2138      	movs	r1, #56	; 0x38
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f7f7 ff03 	bl	80086ac <_ZdlPvj>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	4618      	mov	r0, r3
 80108aa:	3708      	adds	r7, #8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	3318      	adds	r3, #24
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	6839      	ldr	r1, [r7, #0]
 80108ca:	4610      	mov	r0, r2
 80108cc:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80108ce:	4b05      	ldr	r3, [pc, #20]	; (80108e4 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	4798      	blx	r3
 80108d4:	4603      	mov	r3, r0
 80108d6:	461a      	mov	r2, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80108dc:	bf00      	nop
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	200000a8 	.word	0x200000a8

080108e8 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
 80108f0:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 80108f2:	4b0c      	ldr	r3, [pc, #48]	; (8010924 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4798      	blx	r3
 80108f8:	4603      	mov	r3, r0
 80108fa:	461a      	mov	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010900:	1ad2      	subs	r2, r2, r3
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	685a      	ldr	r2, [r3, #4]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	331c      	adds	r3, #28
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6879      	ldr	r1, [r7, #4]
 8010916:	4610      	mov	r0, r2
 8010918:	4798      	blx	r3
}
 801091a:	bf00      	nop
 801091c:	3708      	adds	r7, #8
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	200000a8 	.word	0x200000a8

08010928 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	685a      	ldr	r2, [r3, #4]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	3310      	adds	r3, #16
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6839      	ldr	r1, [r7, #0]
 8010942:	4610      	mov	r0, r2
 8010944:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010946:	4b05      	ldr	r3, [pc, #20]	; (801095c <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4798      	blx	r3
 801094c:	4603      	mov	r3, r0
 801094e:	461a      	mov	r2, r3
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010954:	bf00      	nop
 8010956:	3708      	adds	r7, #8
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	200000a8 	.word	0x200000a8

08010960 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
    output_.print(text);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	685a      	ldr	r2, [r3, #4]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	332c      	adds	r3, #44	; 0x2c
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	6839      	ldr	r1, [r7, #0]
 801097a:	4610      	mov	r0, r2
 801097c:	4798      	blx	r3
}
 801097e:	bf00      	nop
 8010980:	3708      	adds	r7, #8
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b082      	sub	sp, #8
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	685a      	ldr	r2, [r3, #4]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	3348      	adds	r3, #72	; 0x48
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	4610      	mov	r0, r2
 80109a2:	4798      	blx	r3
}
 80109a4:	bf00      	nop
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 80109b6:	4b0c      	ldr	r3, [pc, #48]	; (80109e8 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4798      	blx	r3
 80109bc:	4603      	mov	r3, r0
 80109be:	461a      	mov	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c4:	1ad2      	subs	r2, r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	685a      	ldr	r2, [r3, #4]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	3314      	adds	r3, #20
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	4610      	mov	r0, r2
 80109dc:	4798      	blx	r3

}
 80109de:	bf00      	nop
 80109e0:	3708      	adds	r7, #8
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	200000a8 	.word	0x200000a8

080109ec <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	685a      	ldr	r2, [r3, #4]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	333c      	adds	r3, #60	; 0x3c
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	6839      	ldr	r1, [r7, #0]
 8010a06:	4610      	mov	r0, r2
 8010a08:	4798      	blx	r3
    failureCount_++;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	695b      	ldr	r3, [r3, #20]
 8010a0e:	1c5a      	adds	r2, r3, #1
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	615a      	str	r2, [r3, #20]
}
 8010a14:	bf00      	nop
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
    testCount_++;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	689b      	ldr	r3, [r3, #8]
 8010a28:	1c5a      	adds	r2, r3, #1
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	609a      	str	r2, [r3, #8]
}
 8010a2e:	bf00      	nop
 8010a30:	370c      	adds	r7, #12
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr

08010a3a <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8010a3a:	b480      	push	{r7}
 8010a3c:	b083      	sub	sp, #12
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
    runCount_++;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	68db      	ldr	r3, [r3, #12]
 8010a46:	1c5a      	adds	r2, r3, #1
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	60da      	str	r2, [r3, #12]
}
 8010a4c:	bf00      	nop
 8010a4e:	370c      	adds	r7, #12
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	691b      	ldr	r3, [r3, #16]
 8010a64:	1c5a      	adds	r2, r3, #1
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	611a      	str	r2, [r3, #16]
}
 8010a6a:	bf00      	nop
 8010a6c:	370c      	adds	r7, #12
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr

08010a76 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8010a76:	b480      	push	{r7}
 8010a78:	b083      	sub	sp, #12
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	699b      	ldr	r3, [r3, #24]
 8010a82:	1c5a      	adds	r2, r3, #1
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	619a      	str	r2, [r3, #24]
}
 8010a88:	bf00      	nop
 8010a8a:	370c      	adds	r7, #12
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	69db      	ldr	r3, [r3, #28]
 8010aa0:	1c5a      	adds	r2, r3, #1
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	61da      	str	r2, [r3, #28]
}
 8010aa6:	bf00      	nop
 8010aa8:	370c      	adds	r7, #12
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr
	...

08010ab4 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8010abc:	4b09      	ldr	r3, [pc, #36]	; (8010ae4 <_ZN10TestResult12testsStartedEv+0x30>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4798      	blx	r3
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	685a      	ldr	r2, [r3, #4]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3308      	adds	r3, #8
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4610      	mov	r0, r2
 8010ada:	4798      	blx	r3
}
 8010adc:	bf00      	nop
 8010ade:	3708      	adds	r7, #8
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	200000a8 	.word	0x200000a8

08010ae8 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b084      	sub	sp, #16
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8010af0:	4b0c      	ldr	r3, [pc, #48]	; (8010b24 <_ZN10TestResult10testsEndedEv+0x3c>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4798      	blx	r3
 8010af6:	4603      	mov	r3, r0
 8010af8:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	1ad2      	subs	r2, r2, r3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	685a      	ldr	r2, [r3, #4]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	330c      	adds	r3, #12
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	6879      	ldr	r1, [r7, #4]
 8010b16:	4610      	mov	r0, r2
 8010b18:	4798      	blx	r3
}
 8010b1a:	bf00      	nop
 8010b1c:	3710      	adds	r7, #16
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	200000a8 	.word	0x200000a8

08010b28 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b083      	sub	sp, #12
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6a1b      	ldr	r3, [r3, #32]
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	370c      	adds	r7, #12
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8010b40:	b480      	push	{r7}
 8010b42:	b083      	sub	sp, #12
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	370c      	adds	r7, #12
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8010b70:	b590      	push	{r4, r7, lr}
 8010b72:	b087      	sub	sp, #28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	ed87 0b04 	vstr	d0, [r7, #16]
 8010b7a:	ed87 1b02 	vstr	d1, [r7, #8]
 8010b7e:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8010b82:	4b2c      	ldr	r3, [pc, #176]	; (8010c34 <_Z13doubles_equalddd+0xc4>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	ed97 0b04 	vldr	d0, [r7, #16]
 8010b8a:	4798      	blx	r3
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d10f      	bne.n	8010bb2 <_Z13doubles_equalddd+0x42>
 8010b92:	4b28      	ldr	r3, [pc, #160]	; (8010c34 <_Z13doubles_equalddd+0xc4>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	ed97 0b02 	vldr	d0, [r7, #8]
 8010b9a:	4798      	blx	r3
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d107      	bne.n	8010bb2 <_Z13doubles_equalddd+0x42>
 8010ba2:	4b24      	ldr	r3, [pc, #144]	; (8010c34 <_Z13doubles_equalddd+0xc4>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	ed97 0b00 	vldr	d0, [r7]
 8010baa:	4798      	blx	r3
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <_Z13doubles_equalddd+0x46>
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e000      	b.n	8010bb8 <_Z13doubles_equalddd+0x48>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d001      	beq.n	8010bc0 <_Z13doubles_equalddd+0x50>
        return false;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	e035      	b.n	8010c2c <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8010bc0:	4b1d      	ldr	r3, [pc, #116]	; (8010c38 <_Z13doubles_equalddd+0xc8>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	ed97 0b04 	vldr	d0, [r7, #16]
 8010bc8:	4798      	blx	r3
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d009      	beq.n	8010be4 <_Z13doubles_equalddd+0x74>
 8010bd0:	4b19      	ldr	r3, [pc, #100]	; (8010c38 <_Z13doubles_equalddd+0xc8>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	ed97 0b02 	vldr	d0, [r7, #8]
 8010bd8:	4798      	blx	r3
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d001      	beq.n	8010be4 <_Z13doubles_equalddd+0x74>
 8010be0:	2301      	movs	r3, #1
 8010be2:	e000      	b.n	8010be6 <_Z13doubles_equalddd+0x76>
 8010be4:	2300      	movs	r3, #0
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d001      	beq.n	8010bee <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8010bea:	2301      	movs	r3, #1
 8010bec:	e01e      	b.n	8010c2c <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8010bee:	4b13      	ldr	r3, [pc, #76]	; (8010c3c <_Z13doubles_equalddd+0xcc>)
 8010bf0:	681c      	ldr	r4, [r3, #0]
 8010bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010bf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010bfa:	f7ef fb85 	bl	8000308 <__aeabi_dsub>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	ec43 2b17 	vmov	d7, r2, r3
 8010c06:	eeb0 0a47 	vmov.f32	s0, s14
 8010c0a:	eef0 0a67 	vmov.f32	s1, s15
 8010c0e:	47a0      	blx	r4
 8010c10:	ec53 2b10 	vmov	r2, r3, d0
 8010c14:	2101      	movs	r1, #1
 8010c16:	460c      	mov	r4, r1
 8010c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010c1c:	f7ef fda0 	bl	8000760 <__aeabi_dcmpge>
 8010c20:	4603      	mov	r3, r0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d101      	bne.n	8010c2a <_Z13doubles_equalddd+0xba>
 8010c26:	2300      	movs	r3, #0
 8010c28:	461c      	mov	r4, r3
 8010c2a:	b2e3      	uxtb	r3, r4
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	371c      	adds	r7, #28
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd90      	pop	{r4, r7, pc}
 8010c34:	200000e8 	.word	0x200000e8
 8010c38:	200000ec 	.word	0x200000ec
 8010c3c:	200000dc 	.word	0x200000dc

08010c40 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	332c      	adds	r3, #44	; 0x2c
    }
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	370c      	adds	r7, #12
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
    {
 8010c60:	4a0a      	ldr	r2, [pc, #40]	; (8010c8c <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	601a      	str	r2, [r3, #0]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	332c      	adds	r3, #44	; 0x2c
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7ff fe00 	bl	8010870 <_ZN10TestResultD1Ev>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	331c      	adds	r3, #28
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7f6 f815 	bl	8006ca4 <_ZN17ConsoleTestOutputD1Ev>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f000 f943 	bl	8010f08 <_ZN10UtestShellD1Ev>
    }
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	4618      	mov	r0, r3
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	08025ea8 	.word	0x08025ea8

08010c90 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
    }
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f7ff ffdd 	bl	8010c58 <_ZN22OutsideTestRunnerUTestD1Ev>
 8010c9e:	2164      	movs	r1, #100	; 0x64
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7f7 fd03 	bl	80086ac <_ZdlPvj>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3708      	adds	r7, #8
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af02      	add	r7, sp, #8
 8010cb6:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	2300      	movs	r3, #0
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	4b0d      	ldr	r3, [pc, #52]	; (8010cf4 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8010cc0:	4a0d      	ldr	r2, [pc, #52]	; (8010cf8 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8010cc2:	490e      	ldr	r1, [pc, #56]	; (8010cfc <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8010cc4:	f000 f8f8 	bl	8010eb8 <_ZN10UtestShellC1EPKcS1_S1_j>
 8010cc8:	4a0d      	ldr	r2, [pc, #52]	; (8010d00 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	601a      	str	r2, [r3, #0]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	331c      	adds	r3, #28
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7f5 ffd4 	bl	8006c80 <_ZN17ConsoleTestOutputC1Ev>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	331c      	adds	r3, #28
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4610      	mov	r0, r2
 8010ce6:	f7ff fd8b 	bl	8010800 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4618      	mov	r0, r3
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	08022d40 	.word	0x08022d40
 8010cf8:	08022d50 	.word	0x08022d50
 8010cfc:	08022d90 	.word	0x08022d90
 8010d00:	08025ea8 	.word	0x08025ea8

08010d04 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8010d04:	b580      	push	{r7, lr}
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	4801      	ldr	r0, [pc, #4]	; (8010d10 <__tcf_0+0xc>)
 8010d0a:	f7ff ffa5 	bl	8010c58 <_ZN22OutsideTestRunnerUTestD1Ev>
 8010d0e:	bd80      	pop	{r7, pc}
 8010d10:	200008f0 	.word	0x200008f0

08010d14 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8010d18:	4b12      	ldr	r3, [pc, #72]	; (8010d64 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	f3bf 8f5b 	dmb	ish
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	f003 0301 	and.w	r3, r3, #1
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	bf0c      	ite	eq
 8010d2a:	2301      	moveq	r3, #1
 8010d2c:	2300      	movne	r3, #0
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d013      	beq.n	8010d5c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8010d34:	480b      	ldr	r0, [pc, #44]	; (8010d64 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8010d36:	f00c ff27 	bl	801db88 <__cxa_guard_acquire>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	bf14      	ite	ne
 8010d40:	2301      	movne	r3, #1
 8010d42:	2300      	moveq	r3, #0
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d008      	beq.n	8010d5c <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8010d4a:	4807      	ldr	r0, [pc, #28]	; (8010d68 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8010d4c:	f7ff ffb0 	bl	8010cb0 <_ZN22OutsideTestRunnerUTestC1Ev>
 8010d50:	4804      	ldr	r0, [pc, #16]	; (8010d64 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8010d52:	f00c ff25 	bl	801dba0 <__cxa_guard_release>
 8010d56:	4805      	ldr	r0, [pc, #20]	; (8010d6c <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8010d58:	f00c ff49 	bl	801dbee <atexit>
    return instance_;
 8010d5c:	4b02      	ldr	r3, [pc, #8]	; (8010d68 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	20000954 	.word	0x20000954
 8010d68:	200008f0 	.word	0x200008f0
 8010d6c:	08010d05 	.word	0x08010d05

08010d70 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	330c      	adds	r3, #12
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	6878      	ldr	r0, [r7, #4]
 8010d82:	4798      	blx	r3
    }
 8010d84:	bf00      	nop
 8010d86:	3708      	adds	r7, #8
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	3314      	adds	r3, #20
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	4798      	blx	r3
    }
 8010da0:	bf00      	nop
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3310      	adds	r3, #16
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	4798      	blx	r3
    }
 8010dbc:	bf00      	nop
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
 8010dd0:	603b      	str	r3, [r7, #0]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	68ba      	ldr	r2, [r7, #8]
 8010dd6:	601a      	str	r2, [r3, #0]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	605a      	str	r2, [r3, #4]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	683a      	ldr	r2, [r7, #0]
 8010de2:	609a      	str	r2, [r3, #8]
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	4618      	mov	r0, r3
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr

08010df2 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8010df2:	b580      	push	{r7, lr}
 8010df4:	b086      	sub	sp, #24
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	689b      	ldr	r3, [r3, #8]
 8010e0e:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	3394      	adds	r3, #148	; 0x94
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	68ba      	ldr	r2, [r7, #8]
 8010e1a:	68f9      	ldr	r1, [r7, #12]
 8010e1c:	6938      	ldr	r0, [r7, #16]
 8010e1e:	4798      	blx	r3
    }
 8010e20:	bf00      	nop
 8010e22:	3718      	adds	r7, #24
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b086      	sub	sp, #24
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	689b      	ldr	r3, [r3, #8]
 8010e44:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8010e46:	4b05      	ldr	r3, [pc, #20]	; (8010e5c <helperDoRunOneTestSeperateProcess+0x34>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	68f9      	ldr	r1, [r7, #12]
 8010e4e:	6938      	ldr	r0, [r7, #16]
 8010e50:	4798      	blx	r3
    }
 8010e52:	bf00      	nop
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	2000009c 	.word	0x2000009c

08010e60 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8010e68:	4a0f      	ldr	r2, [pc, #60]	; (8010ea8 <_ZN10UtestShellC1Ev+0x48>)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	601a      	str	r2, [r3, #0]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4a0e      	ldr	r2, [pc, #56]	; (8010eac <_ZN10UtestShellC1Ev+0x4c>)
 8010e72:	605a      	str	r2, [r3, #4]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	4a0e      	ldr	r2, [pc, #56]	; (8010eb0 <_ZN10UtestShellC1Ev+0x50>)
 8010e78:	609a      	str	r2, [r3, #8]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4a0d      	ldr	r2, [pc, #52]	; (8010eb4 <_ZN10UtestShellC1Ev+0x54>)
 8010e7e:	60da      	str	r2, [r3, #12]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	611a      	str	r2, [r3, #16]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	615a      	str	r2, [r3, #20]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	761a      	strb	r2, [r3, #24]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	765a      	strb	r2, [r3, #25]
{
}
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	370c      	adds	r7, #12
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop
 8010ea8:	08025f68 	.word	0x08025f68
 8010eac:	08022ddc 	.word	0x08022ddc
 8010eb0:	08022df0 	.word	0x08022df0
 8010eb4:	08022e00 	.word	0x08022e00

08010eb8 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	607a      	str	r2, [r7, #4]
 8010ec4:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8010ec6:	4a0f      	ldr	r2, [pc, #60]	; (8010f04 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	601a      	str	r2, [r3, #0]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	68ba      	ldr	r2, [r7, #8]
 8010ed0:	605a      	str	r2, [r3, #4]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	609a      	str	r2, [r3, #8]
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	683a      	ldr	r2, [r7, #0]
 8010edc:	60da      	str	r2, [r3, #12]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	69ba      	ldr	r2, [r7, #24]
 8010ee2:	611a      	str	r2, [r3, #16]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	615a      	str	r2, [r3, #20]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2200      	movs	r2, #0
 8010eee:	761a      	strb	r2, [r3, #24]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	765a      	strb	r2, [r3, #25]
{
}
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3714      	adds	r7, #20
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr
 8010f04:	08025f68 	.word	0x08025f68

08010f08 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	4a04      	ldr	r2, [pc, #16]	; (8010f24 <_ZN10UtestShellD1Ev+0x1c>)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	601a      	str	r2, [r3, #0]
{
}
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr
 8010f24:	08025f68 	.word	0x08025f68

08010f28 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
}
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f7ff ffe9 	bl	8010f08 <_ZN10UtestShellD1Ev>
 8010f36:	211c      	movs	r1, #28
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7f7 fbb7 	bl	80086ac <_ZdlPvj>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4618      	mov	r0, r3
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	3310      	adds	r3, #16
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	4798      	blx	r3
}
 8010f5e:	bf00      	nop
 8010f60:	3708      	adds	r7, #8
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}
	...

08010f68 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8010f6c:	4b02      	ldr	r3, [pc, #8]	; (8010f78 <_ZN10UtestShell5crashEv+0x10>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	4798      	blx	r3
}
 8010f72:	bf00      	nop
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	20000098 	.word	0x20000098

08010f7c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b088      	sub	sp, #32
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	3324      	adds	r3, #36	; 0x24
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8010f9a:	f107 0014 	add.w	r0, r7, #20
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	68ba      	ldr	r2, [r7, #8]
 8010fa2:	68f9      	ldr	r1, [r7, #12]
 8010fa4:	f7ff ff0e 	bl	8010dc4 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	337c      	adds	r3, #124	; 0x7c
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	68f8      	ldr	r0, [r7, #12]
 8010fb2:	4798      	blx	r3
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d007      	beq.n	8010fca <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8010fba:	4b09      	ldr	r3, [pc, #36]	; (8010fe0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f107 0214 	add.w	r2, r7, #20
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	4807      	ldr	r0, [pc, #28]	; (8010fe4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8010fc6:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8010fc8:	e006      	b.n	8010fd8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8010fca:	4b05      	ldr	r3, [pc, #20]	; (8010fe0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f107 0214 	add.w	r2, r7, #20
 8010fd2:	4611      	mov	r1, r2
 8010fd4:	4804      	ldr	r0, [pc, #16]	; (8010fe8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8010fd6:	4798      	blx	r3
}
 8010fd8:	bf00      	nop
 8010fda:	3720      	adds	r7, #32
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	200000a4 	.word	0x200000a4
 8010fe4:	08010e29 	.word	0x08010e29
 8010fe8:	08010df3 	.word	0x08010df3

08010fec <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8010fec:	b590      	push	{r4, r7, lr}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
    return new Utest();
 8010ff4:	22d3      	movs	r2, #211	; 0xd3
 8010ff6:	4906      	ldr	r1, [pc, #24]	; (8011010 <_ZN10UtestShell10createTestEv+0x24>)
 8010ff8:	2004      	movs	r0, #4
 8010ffa:	f7f7 fb43 	bl	8008684 <_ZnwjPKci>
 8010ffe:	4604      	mov	r4, r0
 8011000:	4620      	mov	r0, r4
 8011002:	f001 fb0f 	bl	8012624 <_ZN5UtestC1Ev>
 8011006:	4623      	mov	r3, r4
}
 8011008:	4618      	mov	r0, r3
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	bd90      	pop	{r4, r7, pc}
 8011010:	08022e10 	.word	0x08022e10

08011014 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
    delete test;
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d004      	beq.n	801102e <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	3204      	adds	r2, #4
 8011028:	6812      	ldr	r2, [r2, #0]
 801102a:	4618      	mov	r0, r3
 801102c:	4790      	blx	r2
}
 801102e:	bf00      	nop
 8011030:	3708      	adds	r7, #8
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
	...

08011038 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b088      	sub	sp, #32
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	60b9      	str	r1, [r7, #8]
 8011042:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	333c      	adds	r3, #60	; 0x3c
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	4940      	ldr	r1, [pc, #256]	; (8011150 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3314      	adds	r3, #20
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	68f9      	ldr	r1, [r7, #12]
 801105e:	68b8      	ldr	r0, [r7, #8]
 8011060:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	333c      	adds	r3, #60	; 0x3c
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	493a      	ldr	r1, [pc, #232]	; (8011154 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8011070:	f001 faae 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8011074:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f001 fa90 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 801107c:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 801107e:	6879      	ldr	r1, [r7, #4]
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f001 fa6b 	bl	801255c <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8011086:	68f9      	ldr	r1, [r7, #12]
 8011088:	68f8      	ldr	r0, [r7, #12]
 801108a:	f001 fa77 	bl	801257c <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	333c      	adds	r3, #60	; 0x3c
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	4930      	ldr	r1, [pc, #192]	; (8011158 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	4798      	blx	r3
    Utest* testToRun = createTest();
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	3388      	adds	r3, #136	; 0x88
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	68f8      	ldr	r0, [r7, #12]
 80110a6:	4798      	blx	r3
 80110a8:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	333c      	adds	r3, #60	; 0x3c
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	492a      	ldr	r1, [pc, #168]	; (801115c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	333c      	adds	r3, #60	; 0x3c
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4927      	ldr	r1, [pc, #156]	; (8011160 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	4798      	blx	r3
    testToRun->run();
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	3308      	adds	r3, #8
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	6978      	ldr	r0, [r7, #20]
 80110d0:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	333c      	adds	r3, #60	; 0x3c
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4922      	ldr	r1, [pc, #136]	; (8011164 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 80110e0:	69f9      	ldr	r1, [r7, #28]
 80110e2:	68f8      	ldr	r0, [r7, #12]
 80110e4:	f001 fa4a 	bl	801257c <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 80110e8:	69b9      	ldr	r1, [r7, #24]
 80110ea:	68f8      	ldr	r0, [r7, #12]
 80110ec:	f001 fa36 	bl	801255c <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	333c      	adds	r3, #60	; 0x3c
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	491b      	ldr	r1, [pc, #108]	; (8011168 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	4798      	blx	r3
    destroyTest(testToRun);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	338c      	adds	r3, #140	; 0x8c
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	6979      	ldr	r1, [r7, #20]
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	333c      	adds	r3, #60	; 0x3c
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4915      	ldr	r1, [pc, #84]	; (801116c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	333c      	adds	r3, #60	; 0x3c
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4913      	ldr	r1, [pc, #76]	; (8011170 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	3318      	adds	r3, #24
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	68f9      	ldr	r1, [r7, #12]
 8011134:	68b8      	ldr	r0, [r7, #8]
 8011136:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	333c      	adds	r3, #60	; 0x3c
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	490c      	ldr	r1, [pc, #48]	; (8011174 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	4798      	blx	r3
}
 8011146:	bf00      	nop
 8011148:	3720      	adds	r7, #32
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	08022e24 	.word	0x08022e24
 8011154:	08022e48 	.word	0x08022e48
 8011158:	08022e68 	.word	0x08022e68
 801115c:	08022e84 	.word	0x08022e84
 8011160:	08022ea0 	.word	0x08022ea0
 8011164:	08022ebc 	.word	0x08022ebc
 8011168:	08022ed4 	.word	0x08022ed4
 801116c:	08022ef0 	.word	0x08022ef0
 8011170:	08022f0c 	.word	0x08022f0c
 8011174:	08022f30 	.word	0x08022f30

08011178 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
    return next_;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	695b      	ldr	r3, [r3, #20]
}
 8011184:	4618      	mov	r0, r3
 8011186:	370c      	adds	r7, #12
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr

08011190 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8011190:	b480      	push	{r7}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	6039      	str	r1, [r7, #0]
    next_ = test;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	683a      	ldr	r2, [r7, #0]
 801119e:	615a      	str	r2, [r3, #20]
    return this;
 80111a0:	687b      	ldr	r3, [r7, #4]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr

080111ae <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b082      	sub	sp, #8
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	695b      	ldr	r3, [r3, #20]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d00b      	beq.n	80111d6 <_ZN10UtestShell10countTestsEv+0x28>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	695a      	ldr	r2, [r3, #20]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	695b      	ldr	r3, [r3, #20]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	3310      	adds	r3, #16
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	4610      	mov	r0, r2
 80111ce:	4798      	blx	r3
 80111d0:	4603      	mov	r3, r0
 80111d2:	3301      	adds	r3, #1
 80111d4:	e000      	b.n	80111d8 <_ZN10UtestShell10countTestsEv+0x2a>
 80111d6:	2301      	movs	r3, #1
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
    return "TEST";
 80111ea:	4904      	ldr	r1, [pc, #16]	; (80111fc <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f7f9 fe0c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
}
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	08022f54 	.word	0x08022f54

08011200 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	689b      	ldr	r3, [r3, #8]
 801120e:	4619      	mov	r1, r3
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7f9 fdfa 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
}
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	3708      	adds	r7, #8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}

0801121e <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 801121e:	b580      	push	{r7, lr}
 8011220:	b082      	sub	sp, #8
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	4619      	mov	r1, r3
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f7f9 fdeb 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
}
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	3708      	adds	r7, #8
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	33a0      	adds	r3, #160	; 0xa0
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	6839      	ldr	r1, [r7, #0]
 8011252:	4610      	mov	r0, r2
 8011254:	4798      	blx	r3
    formattedName += "(";
 8011256:	490e      	ldr	r1, [pc, #56]	; (8011290 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f7fa fa1d 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	4619      	mov	r1, r3
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7fa fa17 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 801126a:	490a      	ldr	r1, [pc, #40]	; (8011294 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7fa fa13 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	689b      	ldr	r3, [r3, #8]
 8011276:	4619      	mov	r1, r3
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f7fa fa0d 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 801127e:	4906      	ldr	r1, [pc, #24]	; (8011298 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7fa fa09 	bl	800b698 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8011286:	bf00      	nop
}
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	08022f5c 	.word	0x08022f5c
 8011294:	08022f60 	.word	0x08022f60
 8011298:	08022f64 	.word	0x08022f64

0801129c <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7e5b      	ldrb	r3, [r3, #25]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	370c      	adds	r7, #12
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr

080112b4 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f001 f96d 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 80112c2:	4603      	mov	r3, r0
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	3228      	adds	r2, #40	; 0x28
 80112c8:	6812      	ldr	r2, [r2, #0]
 80112ca:	4618      	mov	r0, r3
 80112cc:	4790      	blx	r2
}
 80112ce:	bf00      	nop
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 80112d6:	b480      	push	{r7}
 80112d8:	b083      	sub	sp, #12
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
    return true;
 80112de:	2301      	movs	r3, #1
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	7e1b      	ldrb	r3, [r3, #24]
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2201      	movs	r2, #1
 8011310:	761a      	strb	r2, [r3, #24]
}
 8011312:	bf00      	nop
 8011314:	370c      	adds	r7, #12
 8011316:	46bd      	mov	sp, r7
 8011318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131c:	4770      	bx	lr

0801131e <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 801131e:	b480      	push	{r7}
 8011320:	b083      	sub	sp, #12
 8011322:	af00      	add	r7, sp, #0
 8011324:	6078      	str	r0, [r7, #4]

}
 8011326:	bf00      	nop
 8011328:	370c      	adds	r7, #12
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr

08011332 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8011332:	b480      	push	{r7}
 8011334:	b083      	sub	sp, #12
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	60da      	str	r2, [r3, #12]
}
 8011342:	bf00      	nop
 8011344:	370c      	adds	r7, #12
 8011346:	46bd      	mov	sp, r7
 8011348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134c:	4770      	bx	lr

0801134e <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 801134e:	b480      	push	{r7}
 8011350:	b083      	sub	sp, #12
 8011352:	af00      	add	r7, sp, #0
 8011354:	6078      	str	r0, [r7, #4]
 8011356:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	683a      	ldr	r2, [r7, #0]
 801135c:	611a      	str	r2, [r3, #16]
}
 801135e:	bf00      	nop
 8011360:	370c      	adds	r7, #12
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr

0801136a <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 801136a:	b480      	push	{r7}
 801136c:	b083      	sub	sp, #12
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
 8011372:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	683a      	ldr	r2, [r7, #0]
 8011378:	605a      	str	r2, [r3, #4]
}
 801137a:	bf00      	nop
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8011386:	b480      	push	{r7}
 8011388:	b083      	sub	sp, #12
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	683a      	ldr	r2, [r7, #0]
 8011394:	609a      	str	r2, [r3, #8]
}
 8011396:	bf00      	nop
 8011398:	370c      	adds	r7, #12
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr

080113a2 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b082      	sub	sp, #8
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
 80113aa:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	4619      	mov	r1, r3
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f7f9 fd29 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
}
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	691b      	ldr	r3, [r3, #16]
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 80113d8:	b590      	push	{r4, r7, lr}
 80113da:	b087      	sub	sp, #28
 80113dc:	af00      	add	r7, sp, #0
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d101      	bne.n	80113ee <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 80113ea:	2301      	movs	r3, #1
 80113ec:	e01f      	b.n	801142e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d01b      	beq.n	801142c <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 80113f4:	f107 0310 	add.w	r3, r7, #16
 80113f8:	68b9      	ldr	r1, [r7, #8]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7f9 fd05 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011400:	f107 0310 	add.w	r3, r7, #16
 8011404:	4619      	mov	r1, r3
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f00c fb91 	bl	801db2e <_ZNK10TestFilter5matchERK12SimpleString>
 801140c:	4603      	mov	r3, r0
 801140e:	461c      	mov	r4, r3
 8011410:	f107 0310 	add.w	r3, r7, #16
 8011414:	4618      	mov	r0, r3
 8011416:	f7fa f8b0 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801141a:	2c00      	cmp	r4, #0
 801141c:	d001      	beq.n	8011422 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 801141e:	2301      	movs	r3, #1
 8011420:	e005      	b.n	801142e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f00c fb5d 	bl	801dae2 <_ZNK10TestFilter7getNextEv>
 8011428:	6078      	str	r0, [r7, #4]
 801142a:	e7e0      	b.n	80113ee <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 801142c:	2300      	movs	r3, #0
}
 801142e:	4618      	mov	r0, r3
 8011430:	371c      	adds	r7, #28
 8011432:	46bd      	mov	sp, r7
 8011434:	bd90      	pop	{r4, r7, pc}

08011436 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8011436:	b580      	push	{r7, lr}
 8011438:	b084      	sub	sp, #16
 801143a:	af00      	add	r7, sp, #0
 801143c:	60f8      	str	r0, [r7, #12]
 801143e:	60b9      	str	r1, [r7, #8]
 8011440:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	68ba      	ldr	r2, [r7, #8]
 8011448:	4619      	mov	r1, r3
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7ff ffc4 	bl	80113d8 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	d00b      	beq.n	801146e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	689b      	ldr	r3, [r3, #8]
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	4619      	mov	r1, r3
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	f7ff ffba 	bl	80113d8 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d001      	beq.n	801146e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801146a:	2301      	movs	r3, #1
 801146c:	e000      	b.n	8011470 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	3710      	adds	r7, #16
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8011478:	b590      	push	{r4, r7, lr}
 801147a:	b083      	sub	sp, #12
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	339c      	adds	r3, #156	; 0x9c
 8011488:	681c      	ldr	r4, [r3, #0]
 801148a:	f001 f8b1 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801148e:	4603      	mov	r3, r0
 8011490:	461a      	mov	r2, r3
 8011492:	6839      	ldr	r1, [r7, #0]
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8011498:	bf00      	nop
 801149a:	370c      	adds	r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	bd90      	pop	{r4, r7, pc}

080114a0 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	60b9      	str	r1, [r7, #8]
 80114aa:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2201      	movs	r2, #1
 80114b0:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f001 f872 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 80114b8:	4603      	mov	r3, r0
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	3234      	adds	r2, #52	; 0x34
 80114be:	6812      	ldr	r2, [r2, #0]
 80114c0:	68b9      	ldr	r1, [r7, #8]
 80114c2:	4618      	mov	r0, r3
 80114c4:	4790      	blx	r2
    terminator.exitCurrentTest();
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80114d0:	bf00      	nop
 80114d2:	3710      	adds	r7, #16
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	6838      	ldr	r0, [r7, #0]
 80114ea:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80114ec:	bf00      	nop
 80114ee:	3708      	adds	r7, #8
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80114f4:	b590      	push	{r4, r7, lr}
 80114f6:	b09d      	sub	sp, #116	; 0x74
 80114f8:	af04      	add	r7, sp, #16
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	607a      	str	r2, [r7, #4]
 80114fe:	603b      	str	r3, [r7, #0]
 8011500:	460b      	mov	r3, r1
 8011502:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f001 f849 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 801150a:	4603      	mov	r3, r0
 801150c:	681a      	ldr	r2, [r3, #0]
 801150e:	3228      	adds	r2, #40	; 0x28
 8011510:	6812      	ldr	r2, [r2, #0]
 8011512:	4618      	mov	r0, r3
 8011514:	4790      	blx	r2
    if (!condition)
 8011516:	7afb      	ldrb	r3, [r7, #11]
 8011518:	f083 0301 	eor.w	r3, r3, #1
 801151c:	b2db      	uxtb	r3, r3
 801151e:	2b00      	cmp	r3, #0
 8011520:	d03f      	beq.n	80115a2 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	339c      	adds	r3, #156	; 0x9c
 8011528:	681c      	ldr	r4, [r3, #0]
 801152a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801152e:	6879      	ldr	r1, [r7, #4]
 8011530:	4618      	mov	r0, r3
 8011532:	f7f9 fc6a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011536:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801153a:	6839      	ldr	r1, [r7, #0]
 801153c:	4618      	mov	r0, r3
 801153e:	f7f9 fc64 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011542:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011546:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011548:	4618      	mov	r0, r3
 801154a:	f7f9 fc5e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801154e:	f107 0014 	add.w	r0, r7, #20
 8011552:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011556:	9302      	str	r3, [sp, #8]
 8011558:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801155c:	9301      	str	r3, [sp, #4]
 801155e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011566:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011568:	68f9      	ldr	r1, [r7, #12]
 801156a:	f7fb ff6b 	bl	800d444 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801156e:	f107 0314 	add.w	r3, r7, #20
 8011572:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011574:	4619      	mov	r1, r3
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	47a0      	blx	r4
 801157a:	f107 0314 	add.w	r3, r7, #20
 801157e:	4618      	mov	r0, r3
 8011580:	f7fc fdce 	bl	800e120 <_ZN12CheckFailureD1Ev>
 8011584:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011588:	4618      	mov	r0, r3
 801158a:	f7f9 fff6 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801158e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011592:	4618      	mov	r0, r3
 8011594:	f7f9 fff1 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011598:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801159c:	4618      	mov	r0, r3
 801159e:	f7f9 ffec 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 80115a2:	bf00      	nop
 80115a4:	3764      	adds	r7, #100	; 0x64
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd90      	pop	{r4, r7, pc}

080115aa <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80115aa:	b590      	push	{r4, r7, lr}
 80115ac:	b097      	sub	sp, #92	; 0x5c
 80115ae:	af02      	add	r7, sp, #8
 80115b0:	60f8      	str	r0, [r7, #12]
 80115b2:	60b9      	str	r1, [r7, #8]
 80115b4:	607a      	str	r2, [r7, #4]
 80115b6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f000 ffef 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 80115be:	4603      	mov	r3, r0
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	3228      	adds	r2, #40	; 0x28
 80115c4:	6812      	ldr	r2, [r2, #0]
 80115c6:	4618      	mov	r0, r3
 80115c8:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	339c      	adds	r3, #156	; 0x9c
 80115d0:	681c      	ldr	r4, [r3, #0]
 80115d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80115d6:	68b9      	ldr	r1, [r7, #8]
 80115d8:	4618      	mov	r0, r3
 80115da:	f7f9 fc16 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80115de:	f107 0014 	add.w	r0, r7, #20
 80115e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	687a      	ldr	r2, [r7, #4]
 80115ec:	68f9      	ldr	r1, [r7, #12]
 80115ee:	f7fb ff71 	bl	800d4d4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80115f2:	f107 0314 	add.w	r3, r7, #20
 80115f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115f8:	4619      	mov	r1, r3
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	47a0      	blx	r4
 80115fe:	f107 0314 	add.w	r3, r7, #20
 8011602:	4618      	mov	r0, r3
 8011604:	f7f7 fc16 	bl	8008e34 <_ZN11FailFailureD1Ev>
 8011608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801160c:	4618      	mov	r0, r3
 801160e:	f7f9 ffb4 	bl	800b57a <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8011612:	bf00      	nop
 8011614:	3754      	adds	r7, #84	; 0x54
 8011616:	46bd      	mov	sp, r7
 8011618:	bd90      	pop	{r4, r7, pc}

0801161a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801161a:	b590      	push	{r4, r7, lr}
 801161c:	b0a7      	sub	sp, #156	; 0x9c
 801161e:	af04      	add	r7, sp, #16
 8011620:	60f8      	str	r0, [r7, #12]
 8011622:	60b9      	str	r1, [r7, #8]
 8011624:	607a      	str	r2, [r7, #4]
 8011626:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f000 ffb7 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 801162e:	4603      	mov	r3, r0
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	3228      	adds	r2, #40	; 0x28
 8011634:	6812      	ldr	r2, [r2, #0]
 8011636:	4618      	mov	r0, r3
 8011638:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d102      	bne.n	8011646 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d068      	beq.n	8011718 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d002      	beq.n	8011652 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d12a      	bne.n	80116a8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	339c      	adds	r3, #156	; 0x9c
 8011658:	681c      	ldr	r4, [r3, #0]
 801165a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801165e:	6839      	ldr	r1, [r7, #0]
 8011660:	4618      	mov	r0, r3
 8011662:	f7f9 fbd2 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011666:	f107 0010 	add.w	r0, r7, #16
 801166a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801166e:	9302      	str	r3, [sp, #8]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	9301      	str	r3, [sp, #4]
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	9300      	str	r3, [sp, #0]
 8011678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801167c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011680:	68f9      	ldr	r1, [r7, #12]
 8011682:	f7fc f9ad 	bl	800d9e0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011686:	f107 0310 	add.w	r3, r7, #16
 801168a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801168e:	4619      	mov	r1, r3
 8011690:	68f8      	ldr	r0, [r7, #12]
 8011692:	47a0      	blx	r4
 8011694:	f107 0310 	add.w	r3, r7, #16
 8011698:	4618      	mov	r0, r3
 801169a:	f7fc fcb9 	bl	800e010 <_ZN18StringEqualFailureD1Ev>
 801169e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7f9 ff69 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 80116a8:	6879      	ldr	r1, [r7, #4]
 80116aa:	68b8      	ldr	r0, [r7, #8]
 80116ac:	f7f9 f9ea 	bl	800aa84 <_ZN12SimpleString6StrCmpEPKcS1_>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	bf14      	ite	ne
 80116b6:	2301      	movne	r3, #1
 80116b8:	2300      	moveq	r3, #0
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d02c      	beq.n	801171a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	339c      	adds	r3, #156	; 0x9c
 80116c6:	681c      	ldr	r4, [r3, #0]
 80116c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80116cc:	6839      	ldr	r1, [r7, #0]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7f9 fb9b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80116d4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80116d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80116dc:	9302      	str	r3, [sp, #8]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	9301      	str	r3, [sp, #4]
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	9300      	str	r3, [sp, #0]
 80116e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80116ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80116ee:	68f9      	ldr	r1, [r7, #12]
 80116f0:	f7fc f976 	bl	800d9e0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80116f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80116f8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80116fc:	4619      	mov	r1, r3
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	47a0      	blx	r4
 8011702:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011706:	4618      	mov	r0, r3
 8011708:	f7fc fc82 	bl	800e010 <_ZN18StringEqualFailureD1Ev>
 801170c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011710:	4618      	mov	r0, r3
 8011712:	f7f9 ff32 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011716:	e000      	b.n	801171a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011718:	bf00      	nop
}
 801171a:	378c      	adds	r7, #140	; 0x8c
 801171c:	46bd      	mov	sp, r7
 801171e:	bd90      	pop	{r4, r7, pc}

08011720 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011720:	b590      	push	{r4, r7, lr}
 8011722:	b0a7      	sub	sp, #156	; 0x9c
 8011724:	af04      	add	r7, sp, #16
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
 801172c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f000 ff34 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011734:	4603      	mov	r3, r0
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	3228      	adds	r2, #40	; 0x28
 801173a:	6812      	ldr	r2, [r2, #0]
 801173c:	4618      	mov	r0, r3
 801173e:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d102      	bne.n	801174c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d06b      	beq.n	8011824 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d002      	beq.n	8011758 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d12b      	bne.n	80117b0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	339c      	adds	r3, #156	; 0x9c
 801175e:	681c      	ldr	r4, [r3, #0]
 8011760:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011764:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011768:	4618      	mov	r0, r3
 801176a:	f7f9 fb4e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801176e:	f107 0010 	add.w	r0, r7, #16
 8011772:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011776:	9302      	str	r3, [sp, #8]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	9301      	str	r3, [sp, #4]
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011784:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011788:	68f9      	ldr	r1, [r7, #12]
 801178a:	f7fc f929 	bl	800d9e0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801178e:	f107 0310 	add.w	r3, r7, #16
 8011792:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011796:	4619      	mov	r1, r3
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	47a0      	blx	r4
 801179c:	f107 0310 	add.w	r3, r7, #16
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7fc fc35 	bl	800e010 <_ZN18StringEqualFailureD1Ev>
 80117a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7f9 fee5 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 80117b0:	683a      	ldr	r2, [r7, #0]
 80117b2:	6879      	ldr	r1, [r7, #4]
 80117b4:	68b8      	ldr	r0, [r7, #8]
 80117b6:	f7f9 f9a4 	bl	800ab02 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	bf14      	ite	ne
 80117c0:	2301      	movne	r3, #1
 80117c2:	2300      	moveq	r3, #0
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d02d      	beq.n	8011826 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	339c      	adds	r3, #156	; 0x9c
 80117d0:	681c      	ldr	r4, [r3, #0]
 80117d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80117d6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80117da:	4618      	mov	r0, r3
 80117dc:	f7f9 fb15 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80117e0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80117e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80117e8:	9302      	str	r3, [sp, #8]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	9301      	str	r3, [sp, #4]
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80117f6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80117fa:	68f9      	ldr	r1, [r7, #12]
 80117fc:	f7fc f8f0 	bl	800d9e0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011800:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011804:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011808:	4619      	mov	r1, r3
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	47a0      	blx	r4
 801180e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011812:	4618      	mov	r0, r3
 8011814:	f7fc fbfc 	bl	800e010 <_ZN18StringEqualFailureD1Ev>
 8011818:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801181c:	4618      	mov	r0, r3
 801181e:	f7f9 feac 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011822:	e000      	b.n	8011826 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011824:	bf00      	nop
}
 8011826:	378c      	adds	r7, #140	; 0x8c
 8011828:	46bd      	mov	sp, r7
 801182a:	bd90      	pop	{r4, r7, pc}

0801182c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801182c:	b590      	push	{r4, r7, lr}
 801182e:	b0ab      	sub	sp, #172	; 0xac
 8011830:	af04      	add	r7, sp, #16
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	607a      	str	r2, [r7, #4]
 8011838:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f000 feae 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011840:	4603      	mov	r3, r0
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	3228      	adds	r2, #40	; 0x28
 8011846:	6812      	ldr	r2, [r2, #0]
 8011848:	4618      	mov	r0, r3
 801184a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d102      	bne.n	8011858 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d07c      	beq.n	8011952 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d002      	beq.n	8011864 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d128      	bne.n	80118b6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	3398      	adds	r3, #152	; 0x98
 801186a:	681c      	ldr	r4, [r3, #0]
 801186c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011870:	6839      	ldr	r1, [r7, #0]
 8011872:	4618      	mov	r0, r3
 8011874:	f7f9 fac9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011878:	f107 0010 	add.w	r0, r7, #16
 801187c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011880:	9302      	str	r3, [sp, #8]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	9301      	str	r3, [sp, #4]
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	9300      	str	r3, [sp, #0]
 801188a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801188e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011892:	68f9      	ldr	r1, [r7, #12]
 8011894:	f7fc f948 	bl	800db28 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011898:	f107 0310 	add.w	r3, r7, #16
 801189c:	4619      	mov	r1, r3
 801189e:	68f8      	ldr	r0, [r7, #12]
 80118a0:	47a0      	blx	r4
 80118a2:	f107 0310 	add.w	r3, r7, #16
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7fc fb90 	bl	800dfcc <_ZN24StringEqualNoCaseFailureD1Ev>
 80118ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7f9 fe62 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 80118b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80118ba:	68b9      	ldr	r1, [r7, #8]
 80118bc:	4618      	mov	r0, r3
 80118be:	f7f9 faa4 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80118c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80118c6:	6879      	ldr	r1, [r7, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7f9 fa9e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80118ce:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80118d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80118d6:	4611      	mov	r1, r2
 80118d8:	4618      	mov	r0, r3
 80118da:	f7f9 fe75 	bl	800b5c8 <_ZNK12SimpleString12equalsNoCaseERKS_>
 80118de:	4603      	mov	r3, r0
 80118e0:	f083 0301 	eor.w	r3, r3, #1
 80118e4:	b2dc      	uxtb	r4, r3
 80118e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7f9 fe45 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80118f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7f9 fe40 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80118fa:	2c00      	cmp	r4, #0
 80118fc:	d02a      	beq.n	8011954 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	3398      	adds	r3, #152	; 0x98
 8011904:	681c      	ldr	r4, [r3, #0]
 8011906:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801190a:	6839      	ldr	r1, [r7, #0]
 801190c:	4618      	mov	r0, r3
 801190e:	f7f9 fa7c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011912:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8011916:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801191a:	9302      	str	r3, [sp, #8]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	9301      	str	r3, [sp, #4]
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011928:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801192c:	68f9      	ldr	r1, [r7, #12]
 801192e:	f7fc f8fb 	bl	800db28 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8011932:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011936:	4619      	mov	r1, r3
 8011938:	68f8      	ldr	r0, [r7, #12]
 801193a:	47a0      	blx	r4
 801193c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011940:	4618      	mov	r0, r3
 8011942:	f7fc fb43 	bl	800dfcc <_ZN24StringEqualNoCaseFailureD1Ev>
 8011946:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801194a:	4618      	mov	r0, r3
 801194c:	f7f9 fe15 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011950:	e000      	b.n	8011954 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011952:	bf00      	nop
}
 8011954:	379c      	adds	r7, #156	; 0x9c
 8011956:	46bd      	mov	sp, r7
 8011958:	bd90      	pop	{r4, r7, pc}

0801195a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801195a:	b590      	push	{r4, r7, lr}
 801195c:	b0b3      	sub	sp, #204	; 0xcc
 801195e:	af04      	add	r7, sp, #16
 8011960:	60f8      	str	r0, [r7, #12]
 8011962:	60b9      	str	r1, [r7, #8]
 8011964:	607a      	str	r2, [r7, #4]
 8011966:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011968:	68f8      	ldr	r0, [r7, #12]
 801196a:	f000 fe17 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 801196e:	4603      	mov	r3, r0
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	3228      	adds	r2, #40	; 0x28
 8011974:	6812      	ldr	r2, [r2, #0]
 8011976:	4618      	mov	r0, r3
 8011978:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d103      	bne.n	8011988 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	2b00      	cmp	r3, #0
 8011984:	f000 80ad 	beq.w	8011ae2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d002      	beq.n	8011994 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d140      	bne.n	8011a16 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	3398      	adds	r3, #152	; 0x98
 801199a:	681c      	ldr	r4, [r3, #0]
 801199c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80119a0:	68b9      	ldr	r1, [r7, #8]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7f9 fa31 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80119a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80119ac:	6879      	ldr	r1, [r7, #4]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f9 fa2b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80119b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80119b8:	6839      	ldr	r1, [r7, #0]
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7f9 fa25 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80119c0:	f107 0010 	add.w	r0, r7, #16
 80119c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80119c8:	9302      	str	r3, [sp, #8]
 80119ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80119ce:	9301      	str	r3, [sp, #4]
 80119d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80119da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80119de:	68f9      	ldr	r1, [r7, #12]
 80119e0:	f7fb fce6 	bl	800d3b0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80119e4:	f107 0310 	add.w	r3, r7, #16
 80119e8:	4619      	mov	r1, r3
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	47a0      	blx	r4
 80119ee:	f107 0310 	add.w	r3, r7, #16
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fc fbb6 	bl	800e164 <_ZN15ContainsFailureD1Ev>
 80119f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7f9 fdbc 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011a02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7f9 fdb7 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011a0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7f9 fdb2 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8011a16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011a1a:	6879      	ldr	r1, [r7, #4]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7f9 f9f4 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011a22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011a26:	68b9      	ldr	r1, [r7, #8]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7f9 f9ee 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011a2e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011a32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011a36:	4611      	mov	r1, r2
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7f9 fa64 	bl	800af06 <_ZNK12SimpleString8containsERKS_>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	f083 0301 	eor.w	r3, r3, #1
 8011a44:	b2dc      	uxtb	r4, r3
 8011a46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7f9 fd95 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7f9 fd90 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011a5a:	2c00      	cmp	r4, #0
 8011a5c:	d042      	beq.n	8011ae4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	3398      	adds	r3, #152	; 0x98
 8011a64:	681c      	ldr	r4, [r3, #0]
 8011a66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011a6a:	68b9      	ldr	r1, [r7, #8]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7f9 f9cc 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011a72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011a76:	6879      	ldr	r1, [r7, #4]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7f9 f9c6 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011a7e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011a82:	6839      	ldr	r1, [r7, #0]
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7f9 f9c0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011a8a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011a8e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011a92:	9302      	str	r3, [sp, #8]
 8011a94:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011a9e:	9300      	str	r3, [sp, #0]
 8011aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011aa4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011aa8:	68f9      	ldr	r1, [r7, #12]
 8011aaa:	f7fb fc81 	bl	800d3b0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011aae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	68f8      	ldr	r0, [r7, #12]
 8011ab6:	47a0      	blx	r4
 8011ab8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7fc fb51 	bl	800e164 <_ZN15ContainsFailureD1Ev>
 8011ac2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7f9 fd57 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011acc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7f9 fd52 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011ad6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7f9 fd4d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011ae0:	e000      	b.n	8011ae4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011ae2:	bf00      	nop
}
 8011ae4:	37bc      	adds	r7, #188	; 0xbc
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd90      	pop	{r4, r7, pc}

08011aea <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8011aea:	b590      	push	{r4, r7, lr}
 8011aec:	b0b3      	sub	sp, #204	; 0xcc
 8011aee:	af04      	add	r7, sp, #16
 8011af0:	60f8      	str	r0, [r7, #12]
 8011af2:	60b9      	str	r1, [r7, #8]
 8011af4:	607a      	str	r2, [r7, #4]
 8011af6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011af8:	68f8      	ldr	r0, [r7, #12]
 8011afa:	f000 fd4f 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011afe:	4603      	mov	r3, r0
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	3228      	adds	r2, #40	; 0x28
 8011b04:	6812      	ldr	r2, [r2, #0]
 8011b06:	4618      	mov	r0, r3
 8011b08:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d103      	bne.n	8011b18 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f000 80ad 	beq.w	8011c72 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d002      	beq.n	8011b24 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d140      	bne.n	8011ba6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	3398      	adds	r3, #152	; 0x98
 8011b2a:	681c      	ldr	r4, [r3, #0]
 8011b2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011b30:	68b9      	ldr	r1, [r7, #8]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7f9 f969 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011b38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011b3c:	6879      	ldr	r1, [r7, #4]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7f9 f963 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011b48:	6839      	ldr	r1, [r7, #0]
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7f9 f95d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011b50:	f107 0010 	add.w	r0, r7, #16
 8011b54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011b58:	9302      	str	r3, [sp, #8]
 8011b5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011b5e:	9301      	str	r3, [sp, #4]
 8011b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011b6e:	68f9      	ldr	r1, [r7, #12]
 8011b70:	f7fb fc1e 	bl	800d3b0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011b74:	f107 0310 	add.w	r3, r7, #16
 8011b78:	4619      	mov	r1, r3
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	47a0      	blx	r4
 8011b7e:	f107 0310 	add.w	r3, r7, #16
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7fc faee 	bl	800e164 <_ZN15ContainsFailureD1Ev>
 8011b88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7f9 fcf4 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011b92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7f9 fcef 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011b9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7f9 fcea 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8011ba6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011baa:	6879      	ldr	r1, [r7, #4]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7f9 f92c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011bb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011bb6:	68b9      	ldr	r1, [r7, #8]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7f9 f926 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011bbe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011bc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011bc6:	4611      	mov	r1, r2
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7f9 f9b7 	bl	800af3c <_ZNK12SimpleString14containsNoCaseERKS_>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	f083 0301 	eor.w	r3, r3, #1
 8011bd4:	b2dc      	uxtb	r4, r3
 8011bd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7f9 fccd 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011be0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7f9 fcc8 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011bea:	2c00      	cmp	r4, #0
 8011bec:	d042      	beq.n	8011c74 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	3398      	adds	r3, #152	; 0x98
 8011bf4:	681c      	ldr	r4, [r3, #0]
 8011bf6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011bfa:	68b9      	ldr	r1, [r7, #8]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7f9 f904 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011c02:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011c06:	6879      	ldr	r1, [r7, #4]
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7f9 f8fe 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011c0e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011c12:	6839      	ldr	r1, [r7, #0]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f9 f8f8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011c1a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011c1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011c22:	9302      	str	r3, [sp, #8]
 8011c24:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011c2e:	9300      	str	r3, [sp, #0]
 8011c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011c34:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011c38:	68f9      	ldr	r1, [r7, #12]
 8011c3a:	f7fb fbb9 	bl	800d3b0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011c3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011c42:	4619      	mov	r1, r3
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	47a0      	blx	r4
 8011c48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fc fa89 	bl	800e164 <_ZN15ContainsFailureD1Ev>
 8011c52:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7f9 fc8f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011c5c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7f9 fc8a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011c66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7f9 fc85 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011c70:	e000      	b.n	8011c74 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011c72:	bf00      	nop
}
 8011c74:	37bc      	adds	r7, #188	; 0xbc
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd90      	pop	{r4, r7, pc}

08011c7a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011c7a:	b590      	push	{r4, r7, lr}
 8011c7c:	b099      	sub	sp, #100	; 0x64
 8011c7e:	af04      	add	r7, sp, #16
 8011c80:	60f8      	str	r0, [r7, #12]
 8011c82:	60b9      	str	r1, [r7, #8]
 8011c84:	607a      	str	r2, [r7, #4]
 8011c86:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	f000 fc87 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	3228      	adds	r2, #40	; 0x28
 8011c94:	6812      	ldr	r2, [r2, #0]
 8011c96:	4618      	mov	r0, r3
 8011c98:	4790      	blx	r2
    if (expected != actual)
 8011c9a:	68ba      	ldr	r2, [r7, #8]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d027      	beq.n	8011cf2 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	339c      	adds	r3, #156	; 0x9c
 8011ca8:	681c      	ldr	r4, [r3, #0]
 8011caa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011cae:	6839      	ldr	r1, [r7, #0]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7f9 f8aa 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011cb6:	f107 0014 	add.w	r0, r7, #20
 8011cba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011cbe:	9302      	str	r3, [sp, #8]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	9301      	str	r3, [sp, #4]
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ccc:	68f9      	ldr	r1, [r7, #12]
 8011cce:	f7fb fc1f 	bl	800d510 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8011cd2:	f107 0314 	add.w	r3, r7, #20
 8011cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011cd8:	4619      	mov	r1, r3
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	47a0      	blx	r4
 8011cde:	f107 0314 	add.w	r3, r7, #20
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7fc f9fa 	bl	800e0dc <_ZN17LongsEqualFailureD1Ev>
 8011ce8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7f9 fc44 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8011cf2:	bf00      	nop
 8011cf4:	3754      	adds	r7, #84	; 0x54
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd90      	pop	{r4, r7, pc}

08011cfa <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011cfa:	b590      	push	{r4, r7, lr}
 8011cfc:	b099      	sub	sp, #100	; 0x64
 8011cfe:	af04      	add	r7, sp, #16
 8011d00:	60f8      	str	r0, [r7, #12]
 8011d02:	60b9      	str	r1, [r7, #8]
 8011d04:	607a      	str	r2, [r7, #4]
 8011d06:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011d08:	68f8      	ldr	r0, [r7, #12]
 8011d0a:	f000 fc47 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	3228      	adds	r2, #40	; 0x28
 8011d14:	6812      	ldr	r2, [r2, #0]
 8011d16:	4618      	mov	r0, r3
 8011d18:	4790      	blx	r2
    if (expected != actual)
 8011d1a:	68ba      	ldr	r2, [r7, #8]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d027      	beq.n	8011d72 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	339c      	adds	r3, #156	; 0x9c
 8011d28:	681c      	ldr	r4, [r3, #0]
 8011d2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d2e:	6839      	ldr	r1, [r7, #0]
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7f9 f86a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011d36:	f107 0014 	add.w	r0, r7, #20
 8011d3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d3e:	9302      	str	r3, [sp, #8]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	9301      	str	r3, [sp, #4]
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	9300      	str	r3, [sp, #0]
 8011d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d4c:	68f9      	ldr	r1, [r7, #12]
 8011d4e:	f7fb fcab 	bl	800d6a8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8011d52:	f107 0314 	add.w	r3, r7, #20
 8011d56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011d58:	4619      	mov	r1, r3
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	47a0      	blx	r4
 8011d5e:	f107 0314 	add.w	r3, r7, #20
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fc f998 	bl	800e098 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8011d68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7f9 fc04 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8011d72:	bf00      	nop
 8011d74:	3754      	adds	r7, #84	; 0x54
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd90      	pop	{r4, r7, pc}
	...

08011d7c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011d7c:	b082      	sub	sp, #8
 8011d7e:	b590      	push	{r4, r7, lr}
 8011d80:	b099      	sub	sp, #100	; 0x64
 8011d82:	af02      	add	r7, sp, #8
 8011d84:	60f8      	str	r0, [r7, #12]
 8011d86:	1d38      	adds	r0, r7, #4
 8011d88:	e880 0006 	stmia.w	r0, {r1, r2}
 8011d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8011d8e:	68f8      	ldr	r0, [r7, #12]
 8011d90:	f000 fc04 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011d94:	4603      	mov	r3, r0
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	3228      	adds	r2, #40	; 0x28
 8011d9a:	6812      	ldr	r2, [r2, #0]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	339c      	adds	r3, #156	; 0x9c
 8011da6:	681c      	ldr	r4, [r3, #0]
 8011da8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011dac:	4919      	ldr	r1, [pc, #100]	; (8011e14 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7f9 f82b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011db4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011db8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7f9 f825 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011dc0:	f107 0014 	add.w	r0, r7, #20
 8011dc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011dc8:	9301      	str	r3, [sp, #4]
 8011dca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011dce:	9300      	str	r3, [sp, #0]
 8011dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011dd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011dd4:	68f9      	ldr	r1, [r7, #12]
 8011dd6:	f7fc f84d 	bl	800de74 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8011dda:	f107 0314 	add.w	r3, r7, #20
 8011dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011de2:	4619      	mov	r1, r3
 8011de4:	68f8      	ldr	r0, [r7, #12]
 8011de6:	47a0      	blx	r4
 8011de8:	f107 0314 	add.w	r3, r7, #20
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7fc f887 	bl	800df00 <_ZN25FeatureUnsupportedFailureD1Ev>
 8011df2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7f9 fbbf 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011dfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7f9 fbba 	bl	800b57a <_ZN12SimpleStringD1Ev>
#endif
}
 8011e06:	bf00      	nop
 8011e08:	375c      	adds	r7, #92	; 0x5c
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8011e10:	b002      	add	sp, #8
 8011e12:	4770      	bx	lr
 8011e14:	08022f68 	.word	0x08022f68

08011e18 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011e18:	b082      	sub	sp, #8
 8011e1a:	b590      	push	{r4, r7, lr}
 8011e1c:	b099      	sub	sp, #100	; 0x64
 8011e1e:	af02      	add	r7, sp, #8
 8011e20:	60f8      	str	r0, [r7, #12]
 8011e22:	1d38      	adds	r0, r7, #4
 8011e24:	e880 0006 	stmia.w	r0, {r1, r2}
 8011e28:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8011e2a:	68f8      	ldr	r0, [r7, #12]
 8011e2c:	f000 fbb6 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011e30:	4603      	mov	r3, r0
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	3228      	adds	r2, #40	; 0x28
 8011e36:	6812      	ldr	r2, [r2, #0]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	339c      	adds	r3, #156	; 0x9c
 8011e42:	681c      	ldr	r4, [r3, #0]
 8011e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e48:	4919      	ldr	r1, [pc, #100]	; (8011eb0 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f8 ffdd 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011e50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011e54:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7f8 ffd7 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011e5c:	f107 0014 	add.w	r0, r7, #20
 8011e60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011e64:	9301      	str	r3, [sp, #4]
 8011e66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011e6e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011e70:	68f9      	ldr	r1, [r7, #12]
 8011e72:	f7fb ffff 	bl	800de74 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8011e76:	f107 0314 	add.w	r3, r7, #20
 8011e7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011e7e:	4619      	mov	r1, r3
 8011e80:	68f8      	ldr	r0, [r7, #12]
 8011e82:	47a0      	blx	r4
 8011e84:	f107 0314 	add.w	r3, r7, #20
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fc f839 	bl	800df00 <_ZN25FeatureUnsupportedFailureD1Ev>
 8011e8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7f9 fb71 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011e98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7f9 fb6c 	bl	800b57a <_ZN12SimpleStringD1Ev>
#endif
}
 8011ea2:	bf00      	nop
 8011ea4:	375c      	adds	r7, #92	; 0x5c
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8011eac:	b002      	add	sp, #8
 8011eae:	4770      	bx	lr
 8011eb0:	08022f68 	.word	0x08022f68

08011eb4 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011eb4:	b590      	push	{r4, r7, lr}
 8011eb6:	b099      	sub	sp, #100	; 0x64
 8011eb8:	af04      	add	r7, sp, #16
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	607b      	str	r3, [r7, #4]
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	72fb      	strb	r3, [r7, #11]
 8011ec2:	4613      	mov	r3, r2
 8011ec4:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8011ec6:	68f8      	ldr	r0, [r7, #12]
 8011ec8:	f000 fb68 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	3228      	adds	r2, #40	; 0x28
 8011ed2:	6812      	ldr	r2, [r2, #0]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	4790      	blx	r2
    if (expected != actual)
 8011ed8:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8011edc:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d029      	beq.n	8011f38 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	339c      	adds	r3, #156	; 0x9c
 8011eea:	681c      	ldr	r4, [r3, #0]
 8011eec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ef0:	6879      	ldr	r1, [r7, #4]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7f8 ff89 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011ef8:	f107 0014 	add.w	r0, r7, #20
 8011efc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f00:	9302      	str	r3, [sp, #8]
 8011f02:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8011f06:	9301      	str	r3, [sp, #4]
 8011f08:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011f0c:	9300      	str	r3, [sp, #0]
 8011f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f12:	68f9      	ldr	r1, [r7, #12]
 8011f14:	f7fb fc94 	bl	800d840 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8011f18:	f107 0314 	add.w	r3, r7, #20
 8011f1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011f1e:	4619      	mov	r1, r3
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	47a0      	blx	r4
 8011f24:	f107 0314 	add.w	r3, r7, #20
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7fc f893 	bl	800e054 <_ZN23SignedBytesEqualFailureD1Ev>
 8011f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7f9 fb21 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8011f38:	bf00      	nop
 8011f3a:	3754      	adds	r7, #84	; 0x54
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd90      	pop	{r4, r7, pc}

08011f40 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011f40:	b590      	push	{r4, r7, lr}
 8011f42:	b09d      	sub	sp, #116	; 0x74
 8011f44:	af04      	add	r7, sp, #16
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
 8011f4c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f000 fb24 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8011f54:	4603      	mov	r3, r0
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	3228      	adds	r2, #40	; 0x28
 8011f5a:	6812      	ldr	r2, [r2, #0]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	4790      	blx	r2
    if (expected != actual)
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d03f      	beq.n	8011fe8 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	339c      	adds	r3, #156	; 0x9c
 8011f6e:	681c      	ldr	r4, [r3, #0]
 8011f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f74:	68b9      	ldr	r1, [r7, #8]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7f9 fdea 	bl	800bb50 <_Z10StringFromPKv>
 8011f7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f80:	6879      	ldr	r1, [r7, #4]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f9 fde4 	bl	800bb50 <_Z10StringFromPKv>
 8011f88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011f8c:	6839      	ldr	r1, [r7, #0]
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7f8 ff3b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8011f94:	f107 0014 	add.w	r0, r7, #20
 8011f98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011f9c:	9302      	str	r3, [sp, #8]
 8011f9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fa2:	9301      	str	r3, [sp, #4]
 8011fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011fa8:	9300      	str	r3, [sp, #0]
 8011faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011fae:	68f9      	ldr	r1, [r7, #12]
 8011fb0:	f7fb f814 	bl	800cfdc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011fb4:	f107 0314 	add.w	r3, r7, #20
 8011fb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011fba:	4619      	mov	r1, r3
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	47a0      	blx	r4
 8011fc0:	f107 0314 	add.w	r3, r7, #20
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7fc f955 	bl	800e274 <_ZN13EqualsFailureD1Ev>
 8011fca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7f9 fad3 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011fd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7f9 face 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8011fde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7f9 fac9 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8011fe8:	bf00      	nop
 8011fea:	3764      	adds	r7, #100	; 0x64
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd90      	pop	{r4, r7, pc}

08011ff0 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011ff0:	b590      	push	{r4, r7, lr}
 8011ff2:	b09d      	sub	sp, #116	; 0x74
 8011ff4:	af04      	add	r7, sp, #16
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	607a      	str	r2, [r7, #4]
 8011ffc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	f000 facc 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8012004:	4603      	mov	r3, r0
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	3228      	adds	r2, #40	; 0x28
 801200a:	6812      	ldr	r2, [r2, #0]
 801200c:	4618      	mov	r0, r3
 801200e:	4790      	blx	r2
    if (expected != actual)
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	429a      	cmp	r2, r3
 8012016:	d03f      	beq.n	8012098 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	339c      	adds	r3, #156	; 0x9c
 801201e:	681c      	ldr	r4, [r3, #0]
 8012020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012024:	68b9      	ldr	r1, [r7, #8]
 8012026:	4618      	mov	r0, r3
 8012028:	f7f9 fdbc 	bl	800bba4 <_Z10StringFromPFvvE>
 801202c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012030:	6879      	ldr	r1, [r7, #4]
 8012032:	4618      	mov	r0, r3
 8012034:	f7f9 fdb6 	bl	800bba4 <_Z10StringFromPFvvE>
 8012038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801203c:	6839      	ldr	r1, [r7, #0]
 801203e:	4618      	mov	r0, r3
 8012040:	f7f8 fee3 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8012044:	f107 0014 	add.w	r0, r7, #20
 8012048:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801204c:	9302      	str	r3, [sp, #8]
 801204e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012052:	9301      	str	r3, [sp, #4]
 8012054:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801205c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801205e:	68f9      	ldr	r1, [r7, #12]
 8012060:	f7fa ffbc 	bl	800cfdc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012064:	f107 0314 	add.w	r3, r7, #20
 8012068:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801206a:	4619      	mov	r1, r3
 801206c:	68f8      	ldr	r0, [r7, #12]
 801206e:	47a0      	blx	r4
 8012070:	f107 0314 	add.w	r3, r7, #20
 8012074:	4618      	mov	r0, r3
 8012076:	f7fc f8fd 	bl	800e274 <_ZN13EqualsFailureD1Ev>
 801207a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801207e:	4618      	mov	r0, r3
 8012080:	f7f9 fa7b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8012084:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012088:	4618      	mov	r0, r3
 801208a:	f7f9 fa76 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801208e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012092:	4618      	mov	r0, r3
 8012094:	f7f9 fa71 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8012098:	bf00      	nop
 801209a:	3764      	adds	r7, #100	; 0x64
 801209c:	46bd      	mov	sp, r7
 801209e:	bd90      	pop	{r4, r7, pc}

080120a0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80120a0:	b590      	push	{r4, r7, lr}
 80120a2:	b09d      	sub	sp, #116	; 0x74
 80120a4:	af02      	add	r7, sp, #8
 80120a6:	6278      	str	r0, [r7, #36]	; 0x24
 80120a8:	ed87 0b06 	vstr	d0, [r7, #24]
 80120ac:	ed87 1b04 	vstr	d1, [r7, #16]
 80120b0:	ed87 2b02 	vstr	d2, [r7, #8]
 80120b4:	6239      	str	r1, [r7, #32]
 80120b6:	607a      	str	r2, [r7, #4]
 80120b8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80120ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120bc:	f000 fa6e 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 80120c0:	4603      	mov	r3, r0
 80120c2:	681a      	ldr	r2, [r3, #0]
 80120c4:	3228      	adds	r2, #40	; 0x28
 80120c6:	6812      	ldr	r2, [r2, #0]
 80120c8:	4618      	mov	r0, r3
 80120ca:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 80120cc:	ed97 2b02 	vldr	d2, [r7, #8]
 80120d0:	ed97 1b04 	vldr	d1, [r7, #16]
 80120d4:	ed97 0b06 	vldr	d0, [r7, #24]
 80120d8:	f7fe fd4a 	bl	8010b70 <_Z13doubles_equalddd>
 80120dc:	4603      	mov	r3, r0
 80120de:	f083 0301 	eor.w	r3, r3, #1
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d029      	beq.n	801213c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 80120e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	339c      	adds	r3, #156	; 0x9c
 80120ee:	681c      	ldr	r4, [r3, #0]
 80120f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80120f4:	6a39      	ldr	r1, [r7, #32]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7f8 fe87 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80120fc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8012100:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012104:	9300      	str	r3, [sp, #0]
 8012106:	ed97 2b02 	vldr	d2, [r7, #8]
 801210a:	ed97 1b04 	vldr	d1, [r7, #16]
 801210e:	ed97 0b06 	vldr	d0, [r7, #24]
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	687a      	ldr	r2, [r7, #4]
 8012116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012118:	f7fa ffa2 	bl	800d060 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 801211c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012120:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012122:	4619      	mov	r1, r3
 8012124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012126:	47a0      	blx	r4
 8012128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801212c:	4618      	mov	r0, r3
 801212e:	f7fc f87f 	bl	800e230 <_ZN19DoublesEqualFailureD1Ev>
 8012132:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012136:	4618      	mov	r0, r3
 8012138:	f7f9 fa1f 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 801213c:	bf00      	nop
 801213e:	376c      	adds	r7, #108	; 0x6c
 8012140:	46bd      	mov	sp, r7
 8012142:	bd90      	pop	{r4, r7, pc}

08012144 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012144:	b590      	push	{r4, r7, lr}
 8012146:	b0a7      	sub	sp, #156	; 0x9c
 8012148:	af04      	add	r7, sp, #16
 801214a:	60f8      	str	r0, [r7, #12]
 801214c:	60b9      	str	r1, [r7, #8]
 801214e:	607a      	str	r2, [r7, #4]
 8012150:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f000 fa22 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8012158:	4603      	mov	r3, r0
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	3228      	adds	r2, #40	; 0x28
 801215e:	6812      	ldr	r2, [r2, #0]
 8012160:	4618      	mov	r0, r3
 8012162:	4790      	blx	r2
	if (length == 0) return;
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d075      	beq.n	8012256 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d102      	bne.n	8012176 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d071      	beq.n	801225a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d002      	beq.n	8012182 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d12d      	bne.n	80121de <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	339c      	adds	r3, #156	; 0x9c
 8012188:	681c      	ldr	r4, [r3, #0]
 801218a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801218e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012192:	4618      	mov	r0, r3
 8012194:	f7f8 fe39 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8012198:	f107 0010 	add.w	r0, r7, #16
 801219c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80121a0:	9303      	str	r3, [sp, #12]
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	9302      	str	r3, [sp, #8]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80121b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80121b6:	68f9      	ldr	r1, [r7, #12]
 80121b8:	f7fb fd70 	bl	800dc9c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80121bc:	f107 0310 	add.w	r3, r7, #16
 80121c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80121c4:	4619      	mov	r1, r3
 80121c6:	68f8      	ldr	r0, [r7, #12]
 80121c8:	47a0      	blx	r4
 80121ca:	f107 0310 	add.w	r3, r7, #16
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7fb feda 	bl	800df88 <_ZN18BinaryEqualFailureD1Ev>
 80121d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80121d8:	4618      	mov	r0, r3
 80121da:	f7f9 f9ce 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	6879      	ldr	r1, [r7, #4]
 80121e2:	68b8      	ldr	r0, [r7, #8]
 80121e4:	f7f8 fd30 	bl	800ac48 <_ZN12SimpleString6MemCmpEPKvS1_j>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	bf14      	ite	ne
 80121ee:	2301      	movne	r3, #1
 80121f0:	2300      	moveq	r3, #0
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d031      	beq.n	801225c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	339c      	adds	r3, #156	; 0x9c
 80121fe:	681c      	ldr	r4, [r3, #0]
 8012200:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012204:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012208:	4618      	mov	r0, r3
 801220a:	f7f8 fdfe 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801220e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012212:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012216:	9303      	str	r3, [sp, #12]
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	9302      	str	r3, [sp, #8]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	9301      	str	r3, [sp, #4]
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012228:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801222c:	68f9      	ldr	r1, [r7, #12]
 801222e:	f7fb fd35 	bl	800dc9c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8012232:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012236:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801223a:	4619      	mov	r1, r3
 801223c:	68f8      	ldr	r0, [r7, #12]
 801223e:	47a0      	blx	r4
 8012240:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012244:	4618      	mov	r0, r3
 8012246:	f7fb fe9f 	bl	800df88 <_ZN18BinaryEqualFailureD1Ev>
 801224a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801224e:	4618      	mov	r0, r3
 8012250:	f7f9 f993 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8012254:	e002      	b.n	801225c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8012256:	bf00      	nop
 8012258:	e000      	b.n	801225c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801225a:	bf00      	nop
}
 801225c:	378c      	adds	r7, #140	; 0x8c
 801225e:	46bd      	mov	sp, r7
 8012260:	bd90      	pop	{r4, r7, pc}

08012262 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012262:	b590      	push	{r4, r7, lr}
 8012264:	b09b      	sub	sp, #108	; 0x6c
 8012266:	af06      	add	r7, sp, #24
 8012268:	60f8      	str	r0, [r7, #12]
 801226a:	60b9      	str	r1, [r7, #8]
 801226c:	607a      	str	r2, [r7, #4]
 801226e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012270:	68f8      	ldr	r0, [r7, #12]
 8012272:	f000 f993 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8012276:	4603      	mov	r3, r0
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	3228      	adds	r2, #40	; 0x28
 801227c:	6812      	ldr	r2, [r2, #0]
 801227e:	4618      	mov	r0, r3
 8012280:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8012282:	68ba      	ldr	r2, [r7, #8]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	405a      	eors	r2, r3
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	4013      	ands	r3, r2
 801228c:	2b00      	cmp	r3, #0
 801228e:	d02b      	beq.n	80122e8 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	339c      	adds	r3, #156	; 0x9c
 8012296:	681c      	ldr	r4, [r3, #0]
 8012298:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801229c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801229e:	4618      	mov	r0, r3
 80122a0:	f7f8 fdb3 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80122a4:	f107 0014 	add.w	r0, r7, #20
 80122a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80122ac:	9304      	str	r3, [sp, #16]
 80122ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80122b0:	9303      	str	r3, [sp, #12]
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	9302      	str	r3, [sp, #8]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	9301      	str	r3, [sp, #4]
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80122c2:	68f9      	ldr	r1, [r7, #12]
 80122c4:	f7fb fd7a 	bl	800ddbc <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 80122c8:	f107 0314 	add.w	r3, r7, #20
 80122cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80122ce:	4619      	mov	r1, r3
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	47a0      	blx	r4
 80122d4:	f107 0314 	add.w	r3, r7, #20
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fb fe33 	bl	800df44 <_ZN16BitsEqualFailureD1Ev>
 80122de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7f9 f949 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 80122e8:	bf00      	nop
 80122ea:	3754      	adds	r7, #84	; 0x54
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd90      	pop	{r4, r7, pc}

080122f0 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 80122f0:	b590      	push	{r4, r7, lr}
 80122f2:	b09d      	sub	sp, #116	; 0x74
 80122f4:	af04      	add	r7, sp, #16
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	607a      	str	r2, [r7, #4]
 80122fa:	603b      	str	r3, [r7, #0]
 80122fc:	460b      	mov	r3, r1
 80122fe:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012300:	68f8      	ldr	r0, [r7, #12]
 8012302:	f000 f94b 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8012306:	4603      	mov	r3, r0
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	3228      	adds	r2, #40	; 0x28
 801230c:	6812      	ldr	r2, [r2, #0]
 801230e:	4618      	mov	r0, r3
 8012310:	4790      	blx	r2
    if (failed)
 8012312:	7afb      	ldrb	r3, [r7, #11]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d03f      	beq.n	8012398 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	339c      	adds	r3, #156	; 0x9c
 801231e:	681c      	ldr	r4, [r3, #0]
 8012320:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012324:	6879      	ldr	r1, [r7, #4]
 8012326:	4618      	mov	r0, r3
 8012328:	f7f8 fd6f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801232c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012330:	6839      	ldr	r1, [r7, #0]
 8012332:	4618      	mov	r0, r3
 8012334:	f7f8 fd69 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8012338:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801233c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801233e:	4618      	mov	r0, r3
 8012340:	f7f8 fd63 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8012344:	f107 0014 	add.w	r0, r7, #20
 8012348:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801234c:	9302      	str	r3, [sp, #8]
 801234e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012358:	9300      	str	r3, [sp, #0]
 801235a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801235c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801235e:	68f9      	ldr	r1, [r7, #12]
 8012360:	f7fa ff30 	bl	800d1c4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012364:	f107 0314 	add.w	r3, r7, #20
 8012368:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801236a:	4619      	mov	r1, r3
 801236c:	68f8      	ldr	r0, [r7, #12]
 801236e:	47a0      	blx	r4
 8012370:	f107 0314 	add.w	r3, r7, #20
 8012374:	4618      	mov	r0, r3
 8012376:	f7fb ff39 	bl	800e1ec <_ZN17CheckEqualFailureD1Ev>
 801237a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801237e:	4618      	mov	r0, r3
 8012380:	f7f9 f8fb 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8012384:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012388:	4618      	mov	r0, r3
 801238a:	f7f9 f8f6 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801238e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012392:	4618      	mov	r0, r3
 8012394:	f7f9 f8f1 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8012398:	bf00      	nop
 801239a:	3764      	adds	r7, #100	; 0x64
 801239c:	46bd      	mov	sp, r7
 801239e:	bd90      	pop	{r4, r7, pc}

080123a0 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 80123a0:	b590      	push	{r4, r7, lr}
 80123a2:	b09d      	sub	sp, #116	; 0x74
 80123a4:	af04      	add	r7, sp, #16
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	607a      	str	r2, [r7, #4]
 80123aa:	603b      	str	r3, [r7, #0]
 80123ac:	460b      	mov	r3, r1
 80123ae:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80123b0:	68f8      	ldr	r0, [r7, #12]
 80123b2:	f000 f8f3 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 80123b6:	4603      	mov	r3, r0
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	3228      	adds	r2, #40	; 0x28
 80123bc:	6812      	ldr	r2, [r2, #0]
 80123be:	4618      	mov	r0, r3
 80123c0:	4790      	blx	r2
    if (!comparison)
 80123c2:	7afb      	ldrb	r3, [r7, #11]
 80123c4:	f083 0301 	eor.w	r3, r3, #1
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d03f      	beq.n	801244e <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	339c      	adds	r3, #156	; 0x9c
 80123d4:	681c      	ldr	r4, [r3, #0]
 80123d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123da:	6879      	ldr	r1, [r7, #4]
 80123dc:	4618      	mov	r0, r3
 80123de:	f7f8 fd14 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80123e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80123e6:	6839      	ldr	r1, [r7, #0]
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7f8 fd0e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80123ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80123f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7f8 fd08 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80123fa:	f107 0014 	add.w	r0, r7, #20
 80123fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012402:	9302      	str	r3, [sp, #8]
 8012404:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012408:	9301      	str	r3, [sp, #4]
 801240a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801240e:	9300      	str	r3, [sp, #0]
 8012410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012412:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012414:	68f9      	ldr	r1, [r7, #12]
 8012416:	f7fa ff83 	bl	800d320 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801241a:	f107 0314 	add.w	r3, r7, #20
 801241e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012420:	4619      	mov	r1, r3
 8012422:	68f8      	ldr	r0, [r7, #12]
 8012424:	47a0      	blx	r4
 8012426:	f107 0314 	add.w	r3, r7, #20
 801242a:	4618      	mov	r0, r3
 801242c:	f7fb febc 	bl	800e1a8 <_ZN17ComparisonFailureD1Ev>
 8012430:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012434:	4618      	mov	r0, r3
 8012436:	f7f9 f8a0 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801243a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801243e:	4618      	mov	r0, r3
 8012440:	f7f9 f89b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8012444:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012448:	4618      	mov	r0, r3
 801244a:	f7f9 f896 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 801244e:	bf00      	nop
 8012450:	3764      	adds	r7, #100	; 0x64
 8012452:	46bd      	mov	sp, r7
 8012454:	bd90      	pop	{r4, r7, pc}
	...

08012458 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8012458:	b5b0      	push	{r4, r5, r7, lr}
 801245a:	b088      	sub	sp, #32
 801245c:	af00      	add	r7, sp, #0
 801245e:	60f8      	str	r0, [r7, #12]
 8012460:	60b9      	str	r1, [r7, #8]
 8012462:	607a      	str	r2, [r7, #4]
 8012464:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8012466:	f107 0310 	add.w	r3, r7, #16
 801246a:	4924      	ldr	r1, [pc, #144]	; (80124fc <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 801246c:	4618      	mov	r0, r3
 801246e:	f7f8 fccc 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8012472:	f107 0310 	add.w	r3, r7, #16
 8012476:	6879      	ldr	r1, [r7, #4]
 8012478:	4618      	mov	r0, r3
 801247a:	f7f9 f90d 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 801247e:	f107 0310 	add.w	r3, r7, #16
 8012482:	491f      	ldr	r1, [pc, #124]	; (8012500 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8012484:	4618      	mov	r0, r3
 8012486:	f7f9 f907 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 801248a:	f107 0318 	add.w	r3, r7, #24
 801248e:	6839      	ldr	r1, [r7, #0]
 8012490:	4618      	mov	r0, r3
 8012492:	f7f9 fda1 	bl	800bfd8 <_Z10StringFromj>
 8012496:	f107 0218 	add.w	r2, r7, #24
 801249a:	f107 0310 	add.w	r3, r7, #16
 801249e:	4611      	mov	r1, r2
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7f9 f8e7 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 80124a6:	f107 0318 	add.w	r3, r7, #24
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7f9 f865 	bl	800b57a <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 80124b0:	f107 0310 	add.w	r3, r7, #16
 80124b4:	4913      	ldr	r1, [pc, #76]	; (8012504 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7f9 f8ee 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 80124bc:	f107 0310 	add.w	r3, r7, #16
 80124c0:	68b9      	ldr	r1, [r7, #8]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7f9 f8e8 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	f000 f867 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 80124ce:	4604      	mov	r4, r0
 80124d0:	6823      	ldr	r3, [r4, #0]
 80124d2:	3338      	adds	r3, #56	; 0x38
 80124d4:	681d      	ldr	r5, [r3, #0]
 80124d6:	f107 0310 	add.w	r3, r7, #16
 80124da:	4618      	mov	r0, r3
 80124dc:	f7f9 f820 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 80124e0:	4603      	mov	r3, r0
 80124e2:	4619      	mov	r1, r3
 80124e4:	4620      	mov	r0, r4
 80124e6:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 80124e8:	f107 0310 	add.w	r3, r7, #16
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7f9 f844 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 80124f2:	bf00      	nop
 80124f4:	3720      	adds	r7, #32
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bdb0      	pop	{r4, r5, r7, pc}
 80124fa:	bf00      	nop
 80124fc:	08022f80 	.word	0x08022f80
 8012500:	08022f84 	.word	0x08022f84
 8012504:	08022f88 	.word	0x08022f88

08012508 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8012508:	b590      	push	{r4, r7, lr}
 801250a:	b085      	sub	sp, #20
 801250c:	af00      	add	r7, sp, #0
 801250e:	60f8      	str	r0, [r7, #12]
 8012510:	60b9      	str	r1, [r7, #8]
 8012512:	607a      	str	r2, [r7, #4]
 8012514:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	3370      	adds	r3, #112	; 0x70
 801251c:	681c      	ldr	r4, [r3, #0]
 801251e:	68b8      	ldr	r0, [r7, #8]
 8012520:	f7f8 fffe 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8012524:	4601      	mov	r1, r0
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	47a0      	blx	r4
}
 801252e:	bf00      	nop
 8012530:	3714      	adds	r7, #20
 8012532:	46bd      	mov	sp, r7
 8012534:	bd90      	pop	{r4, r7, pc}

08012536 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8012536:	b580      	push	{r7, lr}
 8012538:	b082      	sub	sp, #8
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
 801253e:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f000 f82b 	bl	801259c <_ZN10UtestShell13getTestResultEv>
 8012546:	4603      	mov	r3, r0
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	323c      	adds	r2, #60	; 0x3c
 801254c:	6812      	ldr	r2, [r2, #0]
 801254e:	6839      	ldr	r1, [r7, #0]
 8012550:	4618      	mov	r0, r3
 8012552:	4790      	blx	r2
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 801255c:	b480      	push	{r7}
 801255e:	b083      	sub	sp, #12
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8012566:	4a04      	ldr	r2, [pc, #16]	; (8012578 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	6013      	str	r3, [r2, #0]
}
 801256c:	bf00      	nop
 801256e:	370c      	adds	r7, #12
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr
 8012578:	20000958 	.word	0x20000958

0801257c <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8012586:	4a04      	ldr	r2, [pc, #16]	; (8012598 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	6013      	str	r3, [r2, #0]
}
 801258c:	bf00      	nop
 801258e:	370c      	adds	r7, #12
 8012590:	46bd      	mov	sp, r7
 8012592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012596:	4770      	bx	lr
 8012598:	2000095c 	.word	0x2000095c

0801259c <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 80125a4:	4b09      	ldr	r3, [pc, #36]	; (80125cc <_ZN10UtestShell13getTestResultEv+0x30>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d109      	bne.n	80125c0 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 80125ac:	f7fe fbb2 	bl	8010d14 <_ZN22OutsideTestRunnerUTest8instanceEv>
 80125b0:	4603      	mov	r3, r0
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	32a4      	adds	r2, #164	; 0xa4
 80125b6:	6812      	ldr	r2, [r2, #0]
 80125b8:	4618      	mov	r0, r3
 80125ba:	4790      	blx	r2
 80125bc:	4603      	mov	r3, r0
 80125be:	e001      	b.n	80125c4 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 80125c0:	4b02      	ldr	r3, [pc, #8]	; (80125cc <_ZN10UtestShell13getTestResultEv+0x30>)
 80125c2:	681b      	ldr	r3, [r3, #0]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	20000958 	.word	0x20000958

080125d0 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 80125d4:	4b05      	ldr	r3, [pc, #20]	; (80125ec <_ZN10UtestShell10getCurrentEv+0x1c>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d103      	bne.n	80125e4 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 80125dc:	f7fe fb9a 	bl	8010d14 <_ZN22OutsideTestRunnerUTest8instanceEv>
 80125e0:	4603      	mov	r3, r0
 80125e2:	e001      	b.n	80125e8 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 80125e4:	4b01      	ldr	r3, [pc, #4]	; (80125ec <_ZN10UtestShell10getCurrentEv+0x1c>)
 80125e6:	681b      	ldr	r3, [r3, #0]
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	bd80      	pop	{r7, pc}
 80125ec:	2000095c 	.word	0x2000095c

080125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 80125f0:	b480      	push	{r7}
 80125f2:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 80125f4:	4b03      	ldr	r3, [pc, #12]	; (8012604 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 80125f6:	681b      	ldr	r3, [r3, #0]
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop
 8012604:	20000094 	.word	0x20000094

08012608 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8012608:	b480      	push	{r7}
 801260a:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 801260c:	4b03      	ldr	r3, [pc, #12]	; (801261c <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 801260e:	4a04      	ldr	r2, [pc, #16]	; (8012620 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8012610:	601a      	str	r2, [r3, #0]
}
 8012612:	bf00      	nop
 8012614:	46bd      	mov	sp, r7
 8012616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261a:	4770      	bx	lr
 801261c:	20000094 	.word	0x20000094
 8012620:	20000090 	.word	0x20000090

08012624 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8012624:	b480      	push	{r7}
 8012626:	b083      	sub	sp, #12
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	4a04      	ldr	r2, [pc, #16]	; (8012640 <_ZN5UtestC1Ev+0x1c>)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	601a      	str	r2, [r3, #0]
{
}
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	370c      	adds	r7, #12
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr
 8012640:	08026064 	.word	0x08026064

08012644 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	4a04      	ldr	r2, [pc, #16]	; (8012660 <_ZN5UtestD1Ev+0x1c>)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	601a      	str	r2, [r3, #0]
{
}
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	4618      	mov	r0, r3
 8012656:	370c      	adds	r7, #12
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr
 8012660:	08026064 	.word	0x08026064

08012664 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
}
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f7ff ffe9 	bl	8012644 <_ZN5UtestD1Ev>
 8012672:	2104      	movs	r1, #4
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f7f6 f819 	bl	80086ac <_ZdlPvj>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4618      	mov	r0, r3
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 801268c:	4b0d      	ldr	r3, [pc, #52]	; (80126c4 <_ZN5Utest3runEv+0x40>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	6879      	ldr	r1, [r7, #4]
 8012692:	480d      	ldr	r0, [pc, #52]	; (80126c8 <_ZN5Utest3runEv+0x44>)
 8012694:	4798      	blx	r3
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	bf14      	ite	ne
 801269c:	2301      	movne	r3, #1
 801269e:	2300      	moveq	r3, #0
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d004      	beq.n	80126b0 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 80126a6:	4b07      	ldr	r3, [pc, #28]	; (80126c4 <_ZN5Utest3runEv+0x40>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	6879      	ldr	r1, [r7, #4]
 80126ac:	4807      	ldr	r0, [pc, #28]	; (80126cc <_ZN5Utest3runEv+0x48>)
 80126ae:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 80126b0:	4b04      	ldr	r3, [pc, #16]	; (80126c4 <_ZN5Utest3runEv+0x40>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	6879      	ldr	r1, [r7, #4]
 80126b6:	4806      	ldr	r0, [pc, #24]	; (80126d0 <_ZN5Utest3runEv+0x4c>)
 80126b8:	4798      	blx	r3
}
 80126ba:	bf00      	nop
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	200000a4 	.word	0x200000a4
 80126c8:	08010d71 	.word	0x08010d71
 80126cc:	08010d8d 	.word	0x08010d8d
 80126d0:	08010da9 	.word	0x08010da9

080126d4 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 80126d4:	b480      	push	{r7}
 80126d6:	b083      	sub	sp, #12
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
}
 80126dc:	bf00      	nop
 80126de:	370c      	adds	r7, #12
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr

080126e8 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 80126e8:	b480      	push	{r7}
 80126ea:	b083      	sub	sp, #12
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
}
 80126f0:	bf00      	nop
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr

080126fc <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
}
 8012704:	bf00      	nop
 8012706:	370c      	adds	r7, #12
 8012708:	46bd      	mov	sp, r7
 801270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270e:	4770      	bx	lr

08012710 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
 8012718:	4a04      	ldr	r2, [pc, #16]	; (801272c <_ZN14TestTerminatorD1Ev+0x1c>)
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	601a      	str	r2, [r3, #0]
{
}
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	4618      	mov	r0, r3
 8012722:	370c      	adds	r7, #12
 8012724:	46bd      	mov	sp, r7
 8012726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272a:	4770      	bx	lr
 801272c:	08026050 	.word	0x08026050

08012730 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8012738:	2300      	movs	r3, #0
 801273a:	60fb      	str	r3, [r7, #12]
 801273c:	f107 030c 	add.w	r3, r7, #12
 8012740:	4618      	mov	r0, r3
 8012742:	f7f6 f975 	bl	8008a30 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8012746:	f107 030c 	add.w	r3, r7, #12
 801274a:	4618      	mov	r0, r3
 801274c:	f000 f82c 	bl	80127a8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8012750:	f107 030c 	add.w	r3, r7, #12
 8012754:	4618      	mov	r0, r3
 8012756:	f000 f835 	bl	80127c4 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 801275a:	bf00      	nop
 801275c:	3710      	adds	r7, #16
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
	...

08012764 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	4a05      	ldr	r2, [pc, #20]	; (8012784 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	601a      	str	r2, [r3, #0]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4618      	mov	r0, r3
 8012776:	f7ff ffcb 	bl	8012710 <_ZN14TestTerminatorD1Ev>
{
}
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4618      	mov	r0, r3
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}
 8012784:	0802603c 	.word	0x0802603c

08012788 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
}
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7ff ffe7 	bl	8012764 <_ZN20NormalTestTerminatorD1Ev>
 8012796:	2104      	movs	r1, #4
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7f5 ff87 	bl	80086ac <_ZdlPvj>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 80127b0:	4b03      	ldr	r3, [pc, #12]	; (80127c0 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80127b6:	bf00      	nop
 80127b8:	3708      	adds	r7, #8
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
 80127be:	bf00      	nop
 80127c0:	200000a0 	.word	0x200000a0

080127c4 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b082      	sub	sp, #8
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	4a05      	ldr	r2, [pc, #20]	; (80127e4 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	601a      	str	r2, [r3, #0]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7ff ff9b 	bl	8012710 <_ZN14TestTerminatorD1Ev>
{
}
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	4618      	mov	r0, r3
 80127de:	3708      	adds	r7, #8
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	08026028 	.word	0x08026028

080127e8 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
}
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f7ff ffe7 	bl	80127c4 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80127f6:	2104      	movs	r1, #4
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7f5 ff57 	bl	80086ac <_ZdlPvj>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	4618      	mov	r0, r3
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8012810:	f7fe fbaa 	bl	8010f68 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	4618      	mov	r0, r3
 8012818:	f7ff ff8a 	bl	8012730 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 801281c:	bf00      	nop
 801281e:	3708      	adds	r7, #8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	4a05      	ldr	r2, [pc, #20]	; (8012844 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	601a      	str	r2, [r3, #0]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	4618      	mov	r0, r3
 8012836:	f7ff ff95 	bl	8012764 <_ZN20NormalTestTerminatorD1Ev>
{
}
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	4618      	mov	r0, r3
 801283e:	3708      	adds	r7, #8
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}
 8012844:	08026014 	.word	0x08026014

08012848 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
}
 8012850:	6878      	ldr	r0, [r7, #4]
 8012852:	f7ff ffe7 	bl	8012824 <_ZN22CrashingTestTerminatorD1Ev>
 8012856:	2104      	movs	r1, #4
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f7f5 ff27 	bl	80086ac <_ZdlPvj>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2200      	movs	r2, #0
 8012876:	601a      	str	r2, [r3, #0]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2200      	movs	r2, #0
 801287c:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d007      	beq.n	8012894 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	3310      	adds	r3, #16
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	6838      	ldr	r0, [r7, #0]
 801288e:	4798      	blx	r3
 8012890:	4603      	mov	r3, r0
 8012892:	e000      	b.n	8012896 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8012894:	2300      	movs	r3, #0
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d02d      	beq.n	80128fe <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d201      	bcs.n	80128b2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 80128ae:	009b      	lsls	r3, r3, #2
 80128b0:	e001      	b.n	80128b6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 80128b2:	f04f 33ff 	mov.w	r3, #4294967295
 80128b6:	f240 3237 	movw	r2, #823	; 0x337
 80128ba:	4914      	ldr	r1, [pc, #80]	; (801290c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 80128bc:	4618      	mov	r0, r3
 80128be:	f7f5 ff05 	bl	80086cc <_ZnajPKci>
 80128c2:	4602      	mov	r2, r0
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80128cc:	2300      	movs	r3, #0
 80128ce:	60bb      	str	r3, [r7, #8]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	68ba      	ldr	r2, [r7, #8]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d212      	bcs.n	8012900 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681a      	ldr	r2, [r3, #0]
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	4413      	add	r3, r2
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	330c      	adds	r3, #12
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	68f8      	ldr	r0, [r7, #12]
 80128f2:	4798      	blx	r3
 80128f4:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	3301      	adds	r3, #1
 80128fa:	60bb      	str	r3, [r7, #8]
 80128fc:	e7e8      	b.n	80128d0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80128fe:	bf00      	nop
    }
}
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	4618      	mov	r0, r3
 8012904:	3710      	adds	r7, #16
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	08022e10 	.word	0x08022e10

08012910 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d004      	beq.n	801292a <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	4618      	mov	r0, r3
 8012926:	f7f5 fee5 	bl	80086f4 <_ZdaPv>
}
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4618      	mov	r0, r3
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8012934:	b480      	push	{r7}
 8012936:	b087      	sub	sp, #28
 8012938:	af00      	add	r7, sp, #0
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	4413      	add	r3, r2
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	4413      	add	r3, r2
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	009b      	lsls	r3, r3, #2
 8012964:	4413      	add	r3, r2
 8012966:	697a      	ldr	r2, [r7, #20]
 8012968:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	4413      	add	r3, r2
 8012974:	693a      	ldr	r2, [r7, #16]
 8012976:	601a      	str	r2, [r3, #0]
}
 8012978:	bf00      	nop
 801297a:	371c      	adds	r7, #28
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d028      	beq.n	80129e8 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8012996:	4b17      	ldr	r3, [pc, #92]	; (80129f4 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	6838      	ldr	r0, [r7, #0]
 801299c:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	3b01      	subs	r3, #1
 80129a4:	60fb      	str	r3, [r7, #12]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d019      	beq.n	80129e0 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d01b      	beq.n	80129ec <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 80129b4:	4b10      	ldr	r3, [pc, #64]	; (80129f8 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4798      	blx	r3
 80129ba:	4603      	mov	r3, r0
 80129bc:	461a      	mov	r2, r3
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	3301      	adds	r3, #1
 80129c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80129c6:	fb03 f301 	mul.w	r3, r3, r1
 80129ca:	1ad3      	subs	r3, r2, r3
 80129cc:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 80129ce:	68ba      	ldr	r2, [r7, #8]
 80129d0:	68f9      	ldr	r1, [r7, #12]
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f7ff ffae 	bl	8012934 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	3b01      	subs	r3, #1
 80129dc:	60fb      	str	r3, [r7, #12]
 80129de:	e7e2      	b.n	80129a6 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f000 f834 	bl	8012a4e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80129e6:	e002      	b.n	80129ee <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 80129e8:	bf00      	nop
 80129ea:	e000      	b.n	80129ee <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 80129ec:	bf00      	nop
}
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	200000e0 	.word	0x200000e0
 80129f8:	200000e4 	.word	0x200000e4

080129fc <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b086      	sub	sp, #24
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	685b      	ldr	r3, [r3, #4]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d01c      	beq.n	8012a46 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	085b      	lsrs	r3, r3, #1
 8012a12:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8012a14:	2300      	movs	r3, #0
 8012a16:	617b      	str	r3, [r7, #20]
 8012a18:	697a      	ldr	r2, [r7, #20]
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d20e      	bcs.n	8012a3e <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	685a      	ldr	r2, [r3, #4]
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	1ad3      	subs	r3, r2, r3
 8012a28:	3b01      	subs	r3, #1
 8012a2a:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8012a2c:	68fa      	ldr	r2, [r7, #12]
 8012a2e:	6979      	ldr	r1, [r7, #20]
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f7ff ff7f 	bl	8012934 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	617b      	str	r3, [r7, #20]
 8012a3c:	e7ec      	b.n	8012a18 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 f805 	bl	8012a4e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8012a44:	e000      	b.n	8012a48 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8012a46:	bf00      	nop
}
 8012a48:	3718      	adds	r7, #24
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}

08012a4e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8012a4e:	b580      	push	{r7, lr}
 8012a50:	b084      	sub	sp, #16
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8012a56:	2300      	movs	r3, #0
 8012a58:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	60bb      	str	r3, [r7, #8]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d221      	bcs.n	8012aac <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6859      	ldr	r1, [r3, #4]
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	1acb      	subs	r3, r1, r3
 8012a74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012a78:	3b01      	subs	r3, #1
 8012a7a:	009b      	lsls	r3, r3, #2
 8012a7c:	4413      	add	r3, r2
 8012a7e:	6818      	ldr	r0, [r3, #0]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6859      	ldr	r1, [r3, #4]
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	1acb      	subs	r3, r1, r3
 8012a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012a90:	3b01      	subs	r3, #1
 8012a92:	009b      	lsls	r3, r3, #2
 8012a94:	4413      	add	r3, r2
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	3308      	adds	r3, #8
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	68f9      	ldr	r1, [r7, #12]
 8012aa0:	4798      	blx	r3
 8012aa2:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	60bb      	str	r3, [r7, #8]
 8012aaa:	e7d8      	b.n	8012a5e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8012aac:	bf00      	nop
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
    return get(0);
 8012abc:	2100      	movs	r1, #0
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f000 f805 	bl	8012ace <_ZNK22UtestShellPointerArray3getEj>
 8012ac4:	4603      	mov	r3, r0
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3708      	adds	r7, #8
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}

08012ace <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8012ace:	b480      	push	{r7}
 8012ad0:	b083      	sub	sp, #12
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	6078      	str	r0, [r7, #4]
 8012ad6:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	683a      	ldr	r2, [r7, #0]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d301      	bcc.n	8012ae6 <_ZNK22UtestShellPointerArray3getEj+0x18>
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	e005      	b.n	8012af2 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	009b      	lsls	r3, r3, #2
 8012aee:	4413      	add	r3, r2
 8012af0:	681b      	ldr	r3, [r3, #0]
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	370c      	adds	r7, #12
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr
	...

08012b00 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	607a      	str	r2, [r7, #4]
 8012b0c:	603b      	str	r3, [r7, #0]
 8012b0e:	4a10      	ldr	r2, [pc, #64]	; (8012b50 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8012b14:	6879      	ldr	r1, [r7, #4]
 8012b16:	68b8      	ldr	r0, [r7, #8]
 8012b18:	f7fe fc27 	bl	801136a <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8012b1c:	6839      	ldr	r1, [r7, #0]
 8012b1e:	68b8      	ldr	r0, [r7, #8]
 8012b20:	f7fe fc31 	bl	8011386 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8012b24:	69b9      	ldr	r1, [r7, #24]
 8012b26:	68b8      	ldr	r0, [r7, #8]
 8012b28:	f7fe fc03 	bl	8011332 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8012b2c:	69f9      	ldr	r1, [r7, #28]
 8012b2e:	68b8      	ldr	r0, [r7, #8]
 8012b30:	f7fe fc0d 	bl	801134e <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8012b34:	f7fd fc20 	bl	8010378 <_ZN12TestRegistry18getCurrentRegistryEv>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	3208      	adds	r2, #8
 8012b3e:	6812      	ldr	r2, [r2, #0]
 8012b40:	68b9      	ldr	r1, [r7, #8]
 8012b42:	4618      	mov	r0, r3
 8012b44:	4790      	blx	r2
}
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	08025f58 	.word	0x08025f58

08012b54 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8012b54:	b480      	push	{r7}
 8012b56:	b083      	sub	sp, #12
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	4a04      	ldr	r2, [pc, #16]	; (8012b70 <_ZN13TestInstallerD1Ev+0x1c>)
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	601a      	str	r2, [r3, #0]
{
}
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	4618      	mov	r0, r3
 8012b66:	370c      	adds	r7, #12
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr
 8012b70:	08025f58 	.word	0x08025f58

08012b74 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b082      	sub	sp, #8
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
}
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7ff ffe9 	bl	8012b54 <_ZN13TestInstallerD1Ev>
 8012b82:	2104      	movs	r1, #4
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7f5 fd91 	bl	80086ac <_ZdlPvj>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	3708      	adds	r7, #8
 8012b90:	46bd      	mov	sp, r7
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d10a      	bne.n	8012bba <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d105      	bne.n	8012bba <_Z41__static_initialization_and_destruction_0ii+0x26>
 8012bae:	4805      	ldr	r0, [pc, #20]	; (8012bc4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8012bb0:	f7ff fe38 	bl	8012824 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8012bb4:	4804      	ldr	r0, [pc, #16]	; (8012bc8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8012bb6:	f7ff fdd5 	bl	8012764 <_ZN20NormalTestTerminatorD1Ev>
}
 8012bba:	bf00      	nop
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	20000090 	.word	0x20000090
 8012bc8:	2000008c 	.word	0x2000008c

08012bcc <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012bd4:	2001      	movs	r0, #1
 8012bd6:	f7ff ffdd 	bl	8012b94 <_Z41__static_initialization_and_destruction_0ii>
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012be4:	2000      	movs	r0, #0
 8012be6:	f7ff ffd5 	bl	8012b94 <_Z41__static_initialization_and_destruction_0ii>
 8012bea:	bd80      	pop	{r7, pc}

08012bec <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8012bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	ed87 0b00 	vstr	d0, [r7]
 8012bf6:	683c      	ldr	r4, [r7, #0]
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8012bfe:	2301      	movs	r3, #1
 8012c00:	461e      	mov	r6, r3
 8012c02:	f04f 32ff 	mov.w	r2, #4294967295
 8012c06:	4b10      	ldr	r3, [pc, #64]	; (8012c48 <_ZSt5isinfd+0x5c>)
 8012c08:	4620      	mov	r0, r4
 8012c0a:	4629      	mov	r1, r5
 8012c0c:	f7ed fdbc 	bl	8000788 <__aeabi_dcmpun>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10b      	bne.n	8012c2e <_ZSt5isinfd+0x42>
 8012c16:	f04f 32ff 	mov.w	r2, #4294967295
 8012c1a:	4b0b      	ldr	r3, [pc, #44]	; (8012c48 <_ZSt5isinfd+0x5c>)
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	4629      	mov	r1, r5
 8012c20:	f7ed fd94 	bl	800074c <__aeabi_dcmple>
 8012c24:	4603      	mov	r3, r0
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d101      	bne.n	8012c2e <_ZSt5isinfd+0x42>
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	461e      	mov	r6, r3
 8012c2e:	b2f3      	uxtb	r3, r6
 8012c30:	f083 0301 	eor.w	r3, r3, #1
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	bf14      	ite	ne
 8012c3a:	2301      	movne	r3, #1
 8012c3c:	2300      	moveq	r3, #0
 8012c3e:	b2db      	uxtb	r3, r3
 8012c40:	4618      	mov	r0, r3
 8012c42:	370c      	adds	r7, #12
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c48:	7fefffff 	.word	0x7fefffff

08012c4c <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8012c4c:	b590      	push	{r4, r7, lr}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	ed87 0b00 	vstr	d0, [r7]
 8012c56:	2301      	movs	r3, #1
 8012c58:	461c      	mov	r4, r3
 8012c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012c62:	f7ed fd91 	bl	8000788 <__aeabi_dcmpun>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d101      	bne.n	8012c70 <_ZSt5isnand+0x24>
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	461c      	mov	r4, r3
 8012c70:	b2e3      	uxtb	r3, r4
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	bf14      	ite	ne
 8012c76:	2301      	movne	r3, #1
 8012c78:	2300      	moveq	r3, #0
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	370c      	adds	r7, #12
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd90      	pop	{r4, r7, pc}

08012c84 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8012c84:	b590      	push	{r4, r7, lr}
 8012c86:	b095      	sub	sp, #84	; 0x54
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	60f8      	str	r0, [r7, #12]
 8012c8c:	60b9      	str	r1, [r7, #8]
 8012c8e:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	3334      	adds	r3, #52	; 0x34
 8012c96:	681c      	ldr	r4, [r3, #0]
 8012c98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c9c:	490f      	ldr	r1, [pc, #60]	; (8012cdc <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7f8 f8b3 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8012ca4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012ca8:	f107 0314 	add.w	r3, r7, #20
 8012cac:	68f9      	ldr	r1, [r7, #12]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7f9 ff0a 	bl	800cac8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8012cb4:	f107 0314 	add.w	r3, r7, #20
 8012cb8:	4619      	mov	r1, r3
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	47a0      	blx	r4
 8012cbe:	f107 0314 	add.w	r3, r7, #20
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7f9 ffc0 	bl	800cc48 <_ZN11TestFailureD1Ev>
 8012cc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7f8 fc54 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8012cd2:	bf00      	nop
 8012cd4:	3754      	adds	r7, #84	; 0x54
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd90      	pop	{r4, r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	08022f98 	.word	0x08022f98

08012ce0 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8012ce4:	2301      	movs	r3, #1
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr

08012cf0 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
 8012cf8:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8012cfa:	4b13      	ldr	r3, [pc, #76]	; (8012d48 <PlatformSpecificSetJmpImplementation+0x58>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	225c      	movs	r2, #92	; 0x5c
 8012d00:	fb02 f303 	mul.w	r3, r2, r3
 8012d04:	4a11      	ldr	r2, [pc, #68]	; (8012d4c <PlatformSpecificSetJmpImplementation+0x5c>)
 8012d06:	4413      	add	r3, r2
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7ed fa89 	bl	8000220 <setjmp>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	bf0c      	ite	eq
 8012d14:	2301      	moveq	r3, #1
 8012d16:	2300      	movne	r3, #0
 8012d18:	b2db      	uxtb	r3, r3
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d00e      	beq.n	8012d3c <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8012d1e:	4b0a      	ldr	r3, [pc, #40]	; (8012d48 <PlatformSpecificSetJmpImplementation+0x58>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	3301      	adds	r3, #1
 8012d24:	4a08      	ldr	r2, [pc, #32]	; (8012d48 <PlatformSpecificSetJmpImplementation+0x58>)
 8012d26:	6013      	str	r3, [r2, #0]
        function(data);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6838      	ldr	r0, [r7, #0]
 8012d2c:	4798      	blx	r3
        jmp_buf_index--;
 8012d2e:	4b06      	ldr	r3, [pc, #24]	; (8012d48 <PlatformSpecificSetJmpImplementation+0x58>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	3b01      	subs	r3, #1
 8012d34:	4a04      	ldr	r2, [pc, #16]	; (8012d48 <PlatformSpecificSetJmpImplementation+0x58>)
 8012d36:	6013      	str	r3, [r2, #0]
        return 1;
 8012d38:	2301      	movs	r3, #1
 8012d3a:	e000      	b.n	8012d3e <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3708      	adds	r7, #8
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	20000cf8 	.word	0x20000cf8
 8012d4c:	20000960 	.word	0x20000960

08012d50 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8012d54:	4b07      	ldr	r3, [pc, #28]	; (8012d74 <PlatformSpecificLongJmpImplementation+0x24>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	4a06      	ldr	r2, [pc, #24]	; (8012d74 <PlatformSpecificLongJmpImplementation+0x24>)
 8012d5c:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8012d5e:	4b05      	ldr	r3, [pc, #20]	; (8012d74 <PlatformSpecificLongJmpImplementation+0x24>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	225c      	movs	r2, #92	; 0x5c
 8012d64:	fb02 f303 	mul.w	r3, r2, r3
 8012d68:	4a03      	ldr	r2, [pc, #12]	; (8012d78 <PlatformSpecificLongJmpImplementation+0x28>)
 8012d6a:	4413      	add	r3, r2
 8012d6c:	2101      	movs	r1, #1
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7ed fa5c 	bl	800022c <longjmp>
 8012d74:	20000cf8 	.word	0x20000cf8
 8012d78:	20000960 	.word	0x20000960

08012d7c <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8012d80:	2300      	movs	r3, #0
#endif
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr

08012d8c <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8012d92:	2000      	movs	r0, #0
 8012d94:	f00e ec3c 	blx	8021610 <__time_veneer>
 8012d98:	4602      	mov	r2, r0
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8012da0:	463b      	mov	r3, r7
 8012da2:	4618      	mov	r0, r3
 8012da4:	f00b fb74 	bl	801e490 <localtime>
 8012da8:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	4a04      	ldr	r2, [pc, #16]	; (8012dc0 <TimeStringImplementation+0x34>)
 8012dae:	2150      	movs	r1, #80	; 0x50
 8012db0:	4804      	ldr	r0, [pc, #16]	; (8012dc4 <TimeStringImplementation+0x38>)
 8012db2:	f00c fc75 	bl	801f6a0 <strftime>
    return dateTime;
 8012db6:	4b03      	ldr	r3, [pc, #12]	; (8012dc4 <TimeStringImplementation+0x38>)
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3710      	adds	r7, #16
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}
 8012dc0:	08022fd4 	.word	0x08022fd4
 8012dc4:	20000cfc 	.word	0x20000cfc

08012dc8 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8012dd2:	6839      	ldr	r1, [r7, #0]
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f00b f991 	bl	801e0fc <fopen>
 8012dda:	4603      	mov	r3, r0
#endif
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3708      	adds	r7, #8
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}

08012de4 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b082      	sub	sp, #8
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8012dee:	6839      	ldr	r1, [r7, #0]
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f00b f9f1 	bl	801e1d8 <fputs>
}
 8012df6:	bf00      	nop
 8012df8:	3708      	adds	r7, #8
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b082      	sub	sp, #8
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f00a ff72 	bl	801dcf0 <fclose>
}
 8012e0c:	bf00      	nop
 8012e0e:	3708      	adds	r7, #8
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	af00      	add	r7, sp, #0
  fflush(stdout);
 8012e18:	4b03      	ldr	r3, [pc, #12]	; (8012e28 <PlatformSpecificFlushImplementation+0x14>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	689b      	ldr	r3, [r3, #8]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f00b f830 	bl	801de84 <fflush>
}
 8012e24:	bf00      	nop
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	20000108 	.word	0x20000108

08012e2c <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8012e36:	ed97 0b00 	vldr	d0, [r7]
 8012e3a:	f7ff ff07 	bl	8012c4c <_ZSt5isnand>
 8012e3e:	4603      	mov	r3, r0
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3708      	adds	r7, #8
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8012e52:	ed97 0b00 	vldr	d0, [r7]
 8012e56:	f7ff fec9 	bl	8012bec <_ZSt5isinfd>
 8012e5a:	4603      	mov	r3, r0
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}

08012e64 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8012e64:	b480      	push	{r7}
 8012e66:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8012e68:	2300      	movs	r3, #0
#endif

}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
}
 8012e7c:	bf00      	nop
 8012e7e:	370c      	adds	r7, #12
 8012e80:	46bd      	mov	sp, r7
 8012e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e86:	4770      	bx	lr

08012e88 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
}
 8012e90:	bf00      	nop
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr

08012e9c <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
}
 8012ea4:	bf00      	nop
 8012ea6:	370c      	adds	r7, #12
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8012ebc:	4a25      	ldr	r2, [pc, #148]	; (8012f54 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	601a      	str	r2, [r3, #0]
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	68ba      	ldr	r2, [r7, #8]
 8012ec6:	605a      	str	r2, [r3, #4]
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	609a      	str	r2, [r3, #8]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	731a      	strb	r2, [r3, #12]
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	735a      	strb	r2, [r3, #13]
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	2200      	movs	r2, #0
 8012ede:	739a      	strb	r2, [r3, #14]
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	73da      	strb	r2, [r3, #15]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	2200      	movs	r2, #0
 8012eea:	741a      	strb	r2, [r3, #16]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	745a      	strb	r2, [r3, #17]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	749a      	strb	r2, [r3, #18]
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	2200      	movs	r2, #0
 8012efc:	74da      	strb	r2, [r3, #19]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	2200      	movs	r2, #0
 8012f02:	751a      	strb	r2, [r3, #20]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2200      	movs	r2, #0
 8012f08:	755a      	strb	r2, [r3, #21]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	759a      	strb	r2, [r3, #22]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	2200      	movs	r2, #0
 8012f14:	75da      	strb	r2, [r3, #23]
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	761a      	strb	r2, [r3, #24]
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2201      	movs	r2, #1
 8012f20:	61da      	str	r2, [r3, #28]
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2200      	movs	r2, #0
 8012f26:	621a      	str	r2, [r3, #32]
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	625a      	str	r2, [r3, #36]	; 0x24
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2200      	movs	r2, #0
 8012f32:	629a      	str	r2, [r3, #40]	; 0x28
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2200      	movs	r2, #0
 8012f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	3330      	adds	r3, #48	; 0x30
 8012f40:	4905      	ldr	r1, [pc, #20]	; (8012f58 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7f7 ff61 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
{
}
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	08026084 	.word	0x08026084
 8012f58:	08022fe8 	.word	0x08022fe8

08012f5c <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7f8 fb07 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
	...

08012f78 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8012f78:	b590      	push	{r4, r7, lr}
 8012f7a:	b085      	sub	sp, #20
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	4a20      	ldr	r2, [pc, #128]	; (8013004 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d015      	beq.n	8012fba <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f92:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f00a fda2 	bl	801dae2 <_ZNK10TestFilter7getNextEv>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8012fa4:	68fc      	ldr	r4, [r7, #12]
 8012fa6:	2c00      	cmp	r4, #0
 8012fa8:	d0ed      	beq.n	8012f86 <_ZN20CommandLineArgumentsD1Ev+0xe>
 8012faa:	4620      	mov	r0, r4
 8012fac:	f7ff ffd6 	bl	8012f5c <_ZN10TestFilterD1Ev>
 8012fb0:	2110      	movs	r1, #16
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f7f5 fb7a 	bl	80086ac <_ZdlPvj>
    while(groupFilters_) {
 8012fb8:	e7e5      	b.n	8012f86 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d015      	beq.n	8012fee <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fc6:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f00a fd88 	bl	801dae2 <_ZNK10TestFilter7getNextEv>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8012fd8:	68bc      	ldr	r4, [r7, #8]
 8012fda:	2c00      	cmp	r4, #0
 8012fdc:	d0ed      	beq.n	8012fba <_ZN20CommandLineArgumentsD1Ev+0x42>
 8012fde:	4620      	mov	r0, r4
 8012fe0:	f7ff ffbc 	bl	8012f5c <_ZN10TestFilterD1Ev>
 8012fe4:	2110      	movs	r1, #16
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f7f5 fb60 	bl	80086ac <_ZdlPvj>
    while(nameFilters_) {
 8012fec:	e7e5      	b.n	8012fba <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	3330      	adds	r3, #48	; 0x30
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7f8 fac1 	bl	800b57a <_ZN12SimpleStringD1Ev>
    }
}
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3714      	adds	r7, #20
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd90      	pop	{r4, r7, pc}
 8013002:	bf00      	nop
 8013004:	08026084 	.word	0x08026084

08013008 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
}
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f7ff ffb1 	bl	8012f78 <_ZN20CommandLineArgumentsD1Ev>
 8013016:	2138      	movs	r1, #56	; 0x38
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7f5 fb47 	bl	80086ac <_ZdlPvj>
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4618      	mov	r0, r3
 8013022:	3708      	adds	r7, #8
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8013028:	b5b0      	push	{r4, r5, r7, lr}
 801302a:	b0be      	sub	sp, #248	; 0xf8
 801302c:	af02      	add	r7, sp, #8
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
 8013032:	2400      	movs	r4, #0
    bool correctParameters = true;
 8013034:	2301      	movs	r3, #1
 8013036:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 801303a:	2301      	movs	r3, #1
 801303c:	613b      	str	r3, [r7, #16]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	685a      	ldr	r2, [r3, #4]
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	429a      	cmp	r2, r3
 8013046:	f340 83a4 	ble.w	8013792 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	689a      	ldr	r2, [r3, #8]
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	4413      	add	r3, r2
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	f107 0308 	add.w	r3, r7, #8
 801305a:	4611      	mov	r1, r2
 801305c:	4618      	mov	r0, r3
 801305e:	f7f7 fed4 	bl	800ae0a <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8013062:	f107 0314 	add.w	r3, r7, #20
 8013066:	49c8      	ldr	r1, [pc, #800]	; (8013388 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8013068:	4618      	mov	r0, r3
 801306a:	f7f7 fece 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801306e:	f107 0214 	add.w	r2, r7, #20
 8013072:	f107 0308 	add.w	r3, r7, #8
 8013076:	4611      	mov	r1, r2
 8013078:	4618      	mov	r0, r3
 801307a:	f7f8 fa8a 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801307e:	4603      	mov	r3, r0
 8013080:	461d      	mov	r5, r3
 8013082:	f107 0314 	add.w	r3, r7, #20
 8013086:	4618      	mov	r0, r3
 8013088:	f7f8 fa77 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801308c:	2d00      	cmp	r5, #0
 801308e:	d006      	beq.n	801309e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2201      	movs	r2, #1
 8013094:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8013096:	2300      	movs	r3, #0
 8013098:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801309c:	e366      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 801309e:	f107 031c 	add.w	r3, r7, #28
 80130a2:	49ba      	ldr	r1, [pc, #744]	; (801338c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7f7 feb0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80130aa:	f107 021c 	add.w	r2, r7, #28
 80130ae:	f107 0308 	add.w	r3, r7, #8
 80130b2:	4611      	mov	r1, r2
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7f8 fa6c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 80130ba:	4603      	mov	r3, r0
 80130bc:	461d      	mov	r5, r3
 80130be:	f107 031c 	add.w	r3, r7, #28
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7f8 fa59 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80130c8:	2d00      	cmp	r5, #0
 80130ca:	d003      	beq.n	80130d4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2201      	movs	r2, #1
 80130d0:	735a      	strb	r2, [r3, #13]
 80130d2:	e34b      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 80130d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80130d8:	49ad      	ldr	r1, [pc, #692]	; (8013390 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 80130da:	4618      	mov	r0, r3
 80130dc:	f7f7 fe95 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80130e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80130e4:	f107 0308 	add.w	r3, r7, #8
 80130e8:	4611      	mov	r1, r2
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f8 fa51 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 80130f0:	4603      	mov	r3, r0
 80130f2:	461d      	mov	r5, r3
 80130f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f8 fa3e 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80130fe:	2d00      	cmp	r5, #0
 8013100:	d003      	beq.n	801310a <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2201      	movs	r2, #1
 8013106:	739a      	strb	r2, [r3, #14]
 8013108:	e330      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 801310a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801310e:	49a1      	ldr	r1, [pc, #644]	; (8013394 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8013110:	4618      	mov	r0, r3
 8013112:	f7f7 fe7a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013116:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801311a:	f107 0308 	add.w	r3, r7, #8
 801311e:	4611      	mov	r1, r2
 8013120:	4618      	mov	r0, r3
 8013122:	f7f8 fa36 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8013126:	4603      	mov	r3, r0
 8013128:	461d      	mov	r5, r3
 801312a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801312e:	4618      	mov	r0, r3
 8013130:	f7f8 fa23 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013134:	2d00      	cmp	r5, #0
 8013136:	d003      	beq.n	8013140 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2201      	movs	r2, #1
 801313c:	73da      	strb	r2, [r3, #15]
 801313e:	e315      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8013140:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013144:	4994      	ldr	r1, [pc, #592]	; (8013398 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8013146:	4618      	mov	r0, r3
 8013148:	f7f7 fe5f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801314c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013150:	f107 0308 	add.w	r3, r7, #8
 8013154:	4611      	mov	r1, r2
 8013156:	4618      	mov	r0, r3
 8013158:	f7f8 fa1b 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801315c:	4603      	mov	r3, r0
 801315e:	461d      	mov	r5, r3
 8013160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013164:	4618      	mov	r0, r3
 8013166:	f7f8 fa08 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801316a:	2d00      	cmp	r5, #0
 801316c:	d003      	beq.n	8013176 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2201      	movs	r2, #1
 8013172:	741a      	strb	r2, [r3, #16]
 8013174:	e2fa      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8013176:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801317a:	4988      	ldr	r1, [pc, #544]	; (801339c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 801317c:	4618      	mov	r0, r3
 801317e:	f7f7 fe44 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013182:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013186:	f107 0308 	add.w	r3, r7, #8
 801318a:	4611      	mov	r1, r2
 801318c:	4618      	mov	r0, r3
 801318e:	f7f8 fa00 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8013192:	4603      	mov	r3, r0
 8013194:	461d      	mov	r5, r3
 8013196:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801319a:	4618      	mov	r0, r3
 801319c:	f7f8 f9ed 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80131a0:	2d00      	cmp	r5, #0
 80131a2:	d003      	beq.n	80131ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2201      	movs	r2, #1
 80131a8:	755a      	strb	r2, [r3, #21]
 80131aa:	e2df      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 80131ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131b0:	497b      	ldr	r1, [pc, #492]	; (80133a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7f7 fe29 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80131b8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80131bc:	f107 0308 	add.w	r3, r7, #8
 80131c0:	4611      	mov	r1, r2
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7f8 f9e5 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 80131c8:	4603      	mov	r3, r0
 80131ca:	461d      	mov	r5, r3
 80131cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f8 f9d2 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80131d6:	2d00      	cmp	r5, #0
 80131d8:	d003      	beq.n	80131e2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2201      	movs	r2, #1
 80131de:	745a      	strb	r2, [r3, #17]
 80131e0:	e2c4      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 80131e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80131e6:	496f      	ldr	r1, [pc, #444]	; (80133a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7f7 fe0e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80131ee:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80131f2:	f107 0308 	add.w	r3, r7, #8
 80131f6:	4611      	mov	r1, r2
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7f8 f9ca 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 80131fe:	4603      	mov	r3, r0
 8013200:	461d      	mov	r5, r3
 8013202:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013206:	4618      	mov	r0, r3
 8013208:	f7f8 f9b7 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801320c:	2d00      	cmp	r5, #0
 801320e:	d003      	beq.n	8013218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2201      	movs	r2, #1
 8013214:	749a      	strb	r2, [r3, #18]
 8013216:	e2a9      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8013218:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801321c:	4962      	ldr	r1, [pc, #392]	; (80133a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 801321e:	4618      	mov	r0, r3
 8013220:	f7f7 fdf3 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013224:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013228:	f107 0308 	add.w	r3, r7, #8
 801322c:	4611      	mov	r1, r2
 801322e:	4618      	mov	r0, r3
 8013230:	f7f8 f9af 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8013234:	4603      	mov	r3, r0
 8013236:	461d      	mov	r5, r3
 8013238:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801323c:	4618      	mov	r0, r3
 801323e:	f7f8 f99c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013242:	2d00      	cmp	r5, #0
 8013244:	d003      	beq.n	801324e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2201      	movs	r2, #1
 801324a:	74da      	strb	r2, [r3, #19]
 801324c:	e28e      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 801324e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013252:	4956      	ldr	r1, [pc, #344]	; (80133ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8013254:	4618      	mov	r0, r3
 8013256:	f7f7 fdd8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801325a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801325e:	f107 0308 	add.w	r3, r7, #8
 8013262:	4611      	mov	r1, r2
 8013264:	4618      	mov	r0, r3
 8013266:	f7f8 f994 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801326a:	4603      	mov	r3, r0
 801326c:	461d      	mov	r5, r3
 801326e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013272:	4618      	mov	r0, r3
 8013274:	f7f8 f981 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013278:	2d00      	cmp	r5, #0
 801327a:	d003      	beq.n	8013284 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2201      	movs	r2, #1
 8013280:	751a      	strb	r2, [r3, #20]
 8013282:	e273      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8013284:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013288:	4949      	ldr	r1, [pc, #292]	; (80133b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 801328a:	4618      	mov	r0, r3
 801328c:	f7f7 fdbd 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013290:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013294:	f107 0308 	add.w	r3, r7, #8
 8013298:	4611      	mov	r1, r2
 801329a:	4618      	mov	r0, r3
 801329c:	f7f8 f979 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 80132a0:	4603      	mov	r3, r0
 80132a2:	461d      	mov	r5, r3
 80132a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7f8 f966 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80132ae:	2d00      	cmp	r5, #0
 80132b0:	d003      	beq.n	80132ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2201      	movs	r2, #1
 80132b6:	759a      	strb	r2, [r3, #22]
 80132b8:	e258      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 80132ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132be:	493d      	ldr	r1, [pc, #244]	; (80133b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7f7 fda2 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80132c6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80132ca:	f107 0308 	add.w	r3, r7, #8
 80132ce:	4611      	mov	r1, r2
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7f7 fe5e 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 80132d6:	4603      	mov	r3, r0
 80132d8:	461d      	mov	r5, r3
 80132da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f8 f94b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80132e4:	2d00      	cmp	r5, #0
 80132e6:	d009      	beq.n	80132fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6859      	ldr	r1, [r3, #4]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	689a      	ldr	r2, [r3, #8]
 80132f0:	f107 0310 	add.w	r3, r7, #16
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f000 fb33 	bl	8013960 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 80132fa:	e237      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 80132fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013300:	492d      	ldr	r1, [pc, #180]	; (80133b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8013302:	4618      	mov	r0, r3
 8013304:	f7f7 fd81 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013308:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801330c:	f107 0308 	add.w	r3, r7, #8
 8013310:	4611      	mov	r1, r2
 8013312:	4618      	mov	r0, r3
 8013314:	f7f7 fe3d 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 8013318:	4603      	mov	r3, r0
 801331a:	461d      	mov	r5, r3
 801331c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013320:	4618      	mov	r0, r3
 8013322:	f7f8 f92a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013326:	2d00      	cmp	r5, #0
 8013328:	d009      	beq.n	801333e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6859      	ldr	r1, [r3, #4]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	689a      	ldr	r2, [r3, #8]
 8013332:	f107 0310 	add.w	r3, r7, #16
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f000 fc40 	bl	8013bbc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 801333c:	e216      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 801333e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013342:	491e      	ldr	r1, [pc, #120]	; (80133bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8013344:	4618      	mov	r0, r3
 8013346:	f7f7 fd60 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801334a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801334e:	f107 0308 	add.w	r3, r7, #8
 8013352:	4611      	mov	r1, r2
 8013354:	4618      	mov	r0, r3
 8013356:	f7f7 fe1c 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 801335a:	4603      	mov	r3, r0
 801335c:	461d      	mov	r5, r3
 801335e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013362:	4618      	mov	r0, r3
 8013364:	f7f8 f909 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013368:	2d00      	cmp	r5, #0
 801336a:	d029      	beq.n	80133c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	6859      	ldr	r1, [r3, #4]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	689a      	ldr	r2, [r3, #8]
 8013374:	f107 0310 	add.w	r3, r7, #16
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f000 fc61 	bl	8013c40 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 801337e:	4603      	mov	r3, r0
 8013380:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013384:	e1f2      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8013386:	bf00      	nop
 8013388:	08022fec 	.word	0x08022fec
 801338c:	08022ff0 	.word	0x08022ff0
 8013390:	08022ff4 	.word	0x08022ff4
 8013394:	08022ff8 	.word	0x08022ff8
 8013398:	08022ffc 	.word	0x08022ffc
 801339c:	08023000 	.word	0x08023000
 80133a0:	08023004 	.word	0x08023004
 80133a4:	08023008 	.word	0x08023008
 80133a8:	0802300c 	.word	0x0802300c
 80133ac:	08023010 	.word	0x08023010
 80133b0:	08023014 	.word	0x08023014
 80133b4:	08023018 	.word	0x08023018
 80133b8:	0802301c 	.word	0x0802301c
 80133bc:	08023020 	.word	0x08023020
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 80133c0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80133c4:	49b9      	ldr	r1, [pc, #740]	; (80136ac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7f7 fd1f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80133cc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80133d0:	f107 0308 	add.w	r3, r7, #8
 80133d4:	4611      	mov	r1, r2
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7f7 fddb 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 80133dc:	4603      	mov	r3, r0
 80133de:	461d      	mov	r5, r3
 80133e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f8 f8c8 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80133ea:	2d00      	cmp	r5, #0
 80133ec:	d009      	beq.n	8013402 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6859      	ldr	r1, [r3, #4]
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	689a      	ldr	r2, [r3, #8]
 80133f6:	f107 0310 	add.w	r3, r7, #16
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f000 fccc 	bl	8013d98 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8013400:	e1b4      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8013402:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013406:	49aa      	ldr	r1, [pc, #680]	; (80136b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8013408:	4618      	mov	r0, r3
 801340a:	f7f7 fcfe 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801340e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8013412:	f107 0308 	add.w	r3, r7, #8
 8013416:	4611      	mov	r1, r2
 8013418:	4618      	mov	r0, r3
 801341a:	f7f7 fdba 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 801341e:	4603      	mov	r3, r0
 8013420:	461d      	mov	r5, r3
 8013422:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013426:	4618      	mov	r0, r3
 8013428:	f7f8 f8a7 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801342c:	2d00      	cmp	r5, #0
 801342e:	d009      	beq.n	8013444 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6859      	ldr	r1, [r3, #4]
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	689a      	ldr	r2, [r3, #8]
 8013438:	f107 0310 	add.w	r3, r7, #16
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f000 fcf1 	bl	8013e24 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8013442:	e193      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8013444:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013448:	499a      	ldr	r1, [pc, #616]	; (80136b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 801344a:	4618      	mov	r0, r3
 801344c:	f7f7 fcdd 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013450:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013454:	f107 0308 	add.w	r3, r7, #8
 8013458:	4611      	mov	r1, r2
 801345a:	4618      	mov	r0, r3
 801345c:	f7f7 fd99 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 8013460:	4603      	mov	r3, r0
 8013462:	461d      	mov	r5, r3
 8013464:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013468:	4618      	mov	r0, r3
 801346a:	f7f8 f886 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801346e:	2d00      	cmp	r5, #0
 8013470:	d009      	beq.n	8013486 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6859      	ldr	r1, [r3, #4]
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	689a      	ldr	r2, [r3, #8]
 801347a:	f107 0310 	add.w	r3, r7, #16
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 fd16 	bl	8013eb0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8013484:	e172      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8013486:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801348a:	498b      	ldr	r1, [pc, #556]	; (80136b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 801348c:	4618      	mov	r0, r3
 801348e:	f7f7 fcbc 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013492:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013496:	f107 0308 	add.w	r3, r7, #8
 801349a:	4611      	mov	r1, r2
 801349c:	4618      	mov	r0, r3
 801349e:	f7f7 fd78 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 80134a2:	4603      	mov	r3, r0
 80134a4:	461d      	mov	r5, r3
 80134a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7f8 f865 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80134b0:	2d00      	cmp	r5, #0
 80134b2:	d009      	beq.n	80134c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6859      	ldr	r1, [r3, #4]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	689a      	ldr	r2, [r3, #8]
 80134bc:	f107 0310 	add.w	r3, r7, #16
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f000 fd3d 	bl	8013f40 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 80134c6:	e151      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 80134c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80134cc:	497b      	ldr	r1, [pc, #492]	; (80136bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7f7 fc9b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80134d4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80134d8:	f107 0308 	add.w	r3, r7, #8
 80134dc:	4611      	mov	r1, r2
 80134de:	4618      	mov	r0, r3
 80134e0:	f7f7 fd57 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 80134e4:	4603      	mov	r3, r0
 80134e6:	461d      	mov	r5, r3
 80134e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7f8 f844 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80134f2:	2d00      	cmp	r5, #0
 80134f4:	d009      	beq.n	801350a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6859      	ldr	r1, [r3, #4]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	689a      	ldr	r2, [r3, #8]
 80134fe:	f107 0310 	add.w	r3, r7, #16
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f000 fd5e 	bl	8013fc4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8013508:	e130      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 801350a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801350e:	496c      	ldr	r1, [pc, #432]	; (80136c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8013510:	4618      	mov	r0, r3
 8013512:	f7f7 fc7a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013516:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801351a:	f107 0308 	add.w	r3, r7, #8
 801351e:	4611      	mov	r1, r2
 8013520:	4618      	mov	r0, r3
 8013522:	f7f7 fd36 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 8013526:	4603      	mov	r3, r0
 8013528:	461d      	mov	r5, r3
 801352a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801352e:	4618      	mov	r0, r3
 8013530:	f7f8 f823 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013534:	2d00      	cmp	r5, #0
 8013536:	d009      	beq.n	801354c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6859      	ldr	r1, [r3, #4]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	689a      	ldr	r2, [r3, #8]
 8013540:	f107 0310 	add.w	r3, r7, #16
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f000 fd83 	bl	8014050 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 801354a:	e10f      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 801354c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013550:	495c      	ldr	r1, [pc, #368]	; (80136c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8013552:	4618      	mov	r0, r3
 8013554:	f7f7 fc59 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013558:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801355c:	f107 0308 	add.w	r3, r7, #8
 8013560:	4611      	mov	r1, r2
 8013562:	4618      	mov	r0, r3
 8013564:	f7f7 fd15 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 8013568:	4603      	mov	r3, r0
 801356a:	461d      	mov	r5, r3
 801356c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013570:	4618      	mov	r0, r3
 8013572:	f7f8 f802 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013576:	2d00      	cmp	r5, #0
 8013578:	d009      	beq.n	801358e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6859      	ldr	r1, [r3, #4]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	689a      	ldr	r2, [r3, #8]
 8013582:	f107 0310 	add.w	r3, r7, #16
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f000 fda8 	bl	80140dc <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 801358c:	e0ee      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 801358e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013592:	494d      	ldr	r1, [pc, #308]	; (80136c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8013594:	4618      	mov	r0, r3
 8013596:	f7f7 fc38 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801359a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 801359e:	f107 0308 	add.w	r3, r7, #8
 80135a2:	4611      	mov	r1, r2
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f7 fcf4 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 80135aa:	4603      	mov	r3, r0
 80135ac:	461d      	mov	r5, r3
 80135ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7f7 ffe1 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80135b8:	2d00      	cmp	r5, #0
 80135ba:	d00c      	beq.n	80135d6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6859      	ldr	r1, [r3, #4]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	689a      	ldr	r2, [r3, #8]
 80135c4:	f107 0310 	add.w	r3, r7, #16
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f000 fa29 	bl	8013a20 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 80135ce:	4603      	mov	r3, r0
 80135d0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80135d4:	e0ca      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 80135d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80135da:	493c      	ldr	r1, [pc, #240]	; (80136cc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80135dc:	4618      	mov	r0, r3
 80135de:	f7f7 fc14 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80135e2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80135e6:	f107 0308 	add.w	r3, r7, #8
 80135ea:	4611      	mov	r1, r2
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7f7 fcd0 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 80135f2:	4603      	mov	r3, r0
 80135f4:	461d      	mov	r5, r3
 80135f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7f7 ffbd 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013600:	2d00      	cmp	r5, #0
 8013602:	d00b      	beq.n	801361c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6859      	ldr	r1, [r3, #4]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	689a      	ldr	r2, [r3, #8]
 801360c:	f107 0310 	add.w	r3, r7, #16
 8013610:	482e      	ldr	r0, [pc, #184]	; (80136cc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013612:	9000      	str	r0, [sp, #0]
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f000 fda9 	bl	801416c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 801361a:	e0a7      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 801361c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013620:	492b      	ldr	r1, [pc, #172]	; (80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8013622:	4618      	mov	r0, r3
 8013624:	f7f7 fbf1 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013628:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 801362c:	f107 0308 	add.w	r3, r7, #8
 8013630:	4611      	mov	r1, r2
 8013632:	4618      	mov	r0, r3
 8013634:	f7f7 fcad 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 8013638:	4603      	mov	r3, r0
 801363a:	461d      	mov	r5, r3
 801363c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013640:	4618      	mov	r0, r3
 8013642:	f7f7 ff9a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013646:	2d00      	cmp	r5, #0
 8013648:	d00b      	beq.n	8013662 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6859      	ldr	r1, [r3, #4]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	689a      	ldr	r2, [r3, #8]
 8013652:	f107 0310 	add.w	r3, r7, #16
 8013656:	481e      	ldr	r0, [pc, #120]	; (80136d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8013658:	9000      	str	r0, [sp, #0]
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f000 fd86 	bl	801416c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8013660:	e084      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8013662:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013666:	491b      	ldr	r1, [pc, #108]	; (80136d4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8013668:	4618      	mov	r0, r3
 801366a:	f7f7 fbce 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801366e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8013672:	f107 0308 	add.w	r3, r7, #8
 8013676:	4611      	mov	r1, r2
 8013678:	4618      	mov	r0, r3
 801367a:	f7f7 fc8a 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 801367e:	4603      	mov	r3, r0
 8013680:	461d      	mov	r5, r3
 8013682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013686:	4618      	mov	r0, r3
 8013688:	f7f7 ff77 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801368c:	2d00      	cmp	r5, #0
 801368e:	d023      	beq.n	80136d8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	6859      	ldr	r1, [r3, #4]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	689a      	ldr	r2, [r3, #8]
 8013698:	f107 0310 	add.w	r3, r7, #16
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f000 fe3b 	bl	8014318 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 80136a2:	4603      	mov	r3, r0
 80136a4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80136a8:	e060      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80136aa:	bf00      	nop
 80136ac:	08023024 	.word	0x08023024
 80136b0:	08023028 	.word	0x08023028
 80136b4:	0802302c 	.word	0x0802302c
 80136b8:	08023034 	.word	0x08023034
 80136bc:	08023038 	.word	0x08023038
 80136c0:	0802303c 	.word	0x0802303c
 80136c4:	08023040 	.word	0x08023040
 80136c8:	08023048 	.word	0x08023048
 80136cc:	0802304c 	.word	0x0802304c
 80136d0:	08023054 	.word	0x08023054
 80136d4:	08023064 	.word	0x08023064
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 80136d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80136dc:	4930      	ldr	r1, [pc, #192]	; (80137a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 80136de:	4618      	mov	r0, r3
 80136e0:	f7f7 fb93 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80136e4:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80136e8:	f107 0308 	add.w	r3, r7, #8
 80136ec:	4611      	mov	r1, r2
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7f7 fc4f 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 80136f4:	4603      	mov	r3, r0
 80136f6:	461d      	mov	r5, r3
 80136f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7f7 ff3c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013702:	2d00      	cmp	r5, #0
 8013704:	d00e      	beq.n	8013724 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	331c      	adds	r3, #28
 801370c:	681d      	ldr	r5, [r3, #0]
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6859      	ldr	r1, [r3, #4]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	689a      	ldr	r2, [r3, #8]
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	6838      	ldr	r0, [r7, #0]
 801371a:	47a8      	blx	r5
 801371c:	4603      	mov	r3, r0
 801371e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013722:	e023      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8013724:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013728:	491e      	ldr	r1, [pc, #120]	; (80137a4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 801372a:	4618      	mov	r0, r3
 801372c:	f7f7 fb6d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013730:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8013734:	f107 0308 	add.w	r3, r7, #8
 8013738:	4611      	mov	r1, r2
 801373a:	4618      	mov	r0, r3
 801373c:	f7f7 fc29 	bl	800af92 <_ZNK12SimpleString10startsWithERKS_>
 8013740:	4603      	mov	r3, r0
 8013742:	461d      	mov	r5, r3
 8013744:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013748:	4618      	mov	r0, r3
 801374a:	f7f7 ff16 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801374e:	2d00      	cmp	r5, #0
 8013750:	d009      	beq.n	8013766 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6859      	ldr	r1, [r3, #4]
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	689a      	ldr	r2, [r3, #8]
 801375a:	f107 0310 	add.w	r3, r7, #16
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f000 fd98 	bl	8014294 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8013764:	e002      	b.n	801376c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8013766:	2300      	movs	r3, #0
 8013768:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 801376c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8013770:	2b00      	cmp	r3, #0
 8013772:	d102      	bne.n	801377a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8013774:	2400      	movs	r4, #0
 8013776:	2500      	movs	r5, #0
 8013778:	e000      	b.n	801377c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 801377a:	2501      	movs	r5, #1
 801377c:	f107 0308 	add.w	r3, r7, #8
 8013780:	4618      	mov	r0, r3
 8013782:	f7f7 fefa 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013786:	2d01      	cmp	r5, #1
 8013788:	d104      	bne.n	8013794 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	3301      	adds	r3, #1
 801378e:	613b      	str	r3, [r7, #16]
 8013790:	e455      	b.n	801303e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8013792:	2401      	movs	r4, #1
 8013794:	4623      	mov	r3, r4
}
 8013796:	4618      	mov	r0, r3
 8013798:	37f0      	adds	r7, #240	; 0xf0
 801379a:	46bd      	mov	sp, r7
 801379c:	bdb0      	pop	{r4, r5, r7, pc}
 801379e:	bf00      	nop
 80137a0:	08022ffc 	.word	0x08022ffc
 80137a4:	08023068 	.word	0x08023068

080137a8 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 80137b0:	4b03      	ldr	r3, [pc, #12]	; (80137c0 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	370c      	adds	r7, #12
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	0802306c 	.word	0x0802306c

080137c4 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 80137cc:	4b03      	ldr	r3, [pc, #12]	; (80137dc <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	370c      	adds	r7, #12
 80137d2:	46bd      	mov	sp, r7
 80137d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d8:	4770      	bx	lr
 80137da:	bf00      	nop
 80137dc:	0802319c 	.word	0x0802319c

080137e0 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 80137e0:	b480      	push	{r7}
 80137e2:	b083      	sub	sp, #12
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
    return needHelp_;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	7b1b      	ldrb	r3, [r3, #12]
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	370c      	adds	r7, #12
 80137f0:	46bd      	mov	sp, r7
 80137f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f6:	4770      	bx	lr

080137f8 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80137f8:	b480      	push	{r7}
 80137fa:	b083      	sub	sp, #12
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
    return verbose_;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	7b5b      	ldrb	r3, [r3, #13]
}
 8013804:	4618      	mov	r0, r3
 8013806:	370c      	adds	r7, #12
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr

08013810 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	7b9b      	ldrb	r3, [r3, #14]
}
 801381c:	4618      	mov	r0, r3
 801381e:	370c      	adds	r7, #12
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr

08013828 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8013828:	b480      	push	{r7}
 801382a:	b083      	sub	sp, #12
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
    return color_;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	7bdb      	ldrb	r3, [r3, #15]
}
 8013834:	4618      	mov	r0, r3
 8013836:	370c      	adds	r7, #12
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr

08013840 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8013840:	b480      	push	{r7}
 8013842:	b083      	sub	sp, #12
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	7c5b      	ldrb	r3, [r3, #17]
}
 801384c:	4618      	mov	r0, r3
 801384e:	370c      	adds	r7, #12
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr

08013858 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8013858:	b480      	push	{r7}
 801385a:	b083      	sub	sp, #12
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	7c9b      	ldrb	r3, [r3, #18]
}
 8013864:	4618      	mov	r0, r3
 8013866:	370c      	adds	r7, #12
 8013868:	46bd      	mov	sp, r7
 801386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386e:	4770      	bx	lr

08013870 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8013870:	b480      	push	{r7}
 8013872:	b083      	sub	sp, #12
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	7cdb      	ldrb	r3, [r3, #19]
}
 801387c:	4618      	mov	r0, r3
 801387e:	370c      	adds	r7, #12
 8013880:	46bd      	mov	sp, r7
 8013882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013886:	4770      	bx	lr

08013888 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8013888:	b480      	push	{r7}
 801388a:	b083      	sub	sp, #12
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	7d1b      	ldrb	r3, [r3, #20]
}
 8013894:	4618      	mov	r0, r3
 8013896:	370c      	adds	r7, #12
 8013898:	46bd      	mov	sp, r7
 801389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389e:	4770      	bx	lr

080138a0 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 80138a0:	b480      	push	{r7}
 80138a2:	b083      	sub	sp, #12
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	7c1b      	ldrb	r3, [r3, #16]
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	370c      	adds	r7, #12
 80138b0:	46bd      	mov	sp, r7
 80138b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b6:	4770      	bx	lr

080138b8 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
    return repeat_;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	69db      	ldr	r3, [r3, #28]
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	370c      	adds	r7, #12
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr

080138d0 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 80138d0:	b480      	push	{r7}
 80138d2:	b083      	sub	sp, #12
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
    return reversing_;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	7d5b      	ldrb	r3, [r3, #21]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	370c      	adds	r7, #12
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr

080138e8 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 80138e8:	b480      	push	{r7}
 80138ea:	b083      	sub	sp, #12
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	7d9b      	ldrb	r3, [r3, #22]
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	370c      	adds	r7, #12
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	7ddb      	ldrb	r3, [r3, #23]
}
 801390c:	4618      	mov	r0, r3
 801390e:	370c      	adds	r7, #12
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr

08013918 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8013918:	b480      	push	{r7}
 801391a:	b083      	sub	sp, #12
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6a1b      	ldr	r3, [r3, #32]
}
 8013924:	4618      	mov	r0, r3
 8013926:	370c      	adds	r7, #12
 8013928:	46bd      	mov	sp, r7
 801392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392e:	4770      	bx	lr

08013930 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8013930:	b480      	push	{r7}
 8013932:	b083      	sub	sp, #12
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 801393c:	4618      	mov	r0, r3
 801393e:	370c      	adds	r7, #12
 8013940:	46bd      	mov	sp, r7
 8013942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013946:	4770      	bx	lr

08013948 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8013948:	b480      	push	{r7}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8013954:	4618      	mov	r0, r3
 8013956:	370c      	adds	r7, #12
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr

08013960 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b086      	sub	sp, #24
 8013964:	af00      	add	r7, sp, #0
 8013966:	60f8      	str	r0, [r7, #12]
 8013968:	60b9      	str	r1, [r7, #8]
 801396a:	607a      	str	r2, [r7, #4]
 801396c:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2200      	movs	r2, #0
 8013972:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	009b      	lsls	r3, r3, #2
 801397a:	687a      	ldr	r2, [r7, #4]
 801397c:	4413      	add	r3, r2
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	f107 0310 	add.w	r3, r7, #16
 8013984:	4611      	mov	r1, r2
 8013986:	4618      	mov	r0, r3
 8013988:	f7f7 fa3f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 801398c:	f107 0310 	add.w	r3, r7, #16
 8013990:	4618      	mov	r0, r3
 8013992:	f7f7 fdd1 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 8013996:	4603      	mov	r3, r0
 8013998:	2b02      	cmp	r3, #2
 801399a:	bf8c      	ite	hi
 801399c:	2301      	movhi	r3, #1
 801399e:	2300      	movls	r3, #0
 80139a0:	b2db      	uxtb	r3, r3
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d00e      	beq.n	80139c4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	4413      	add	r3, r2
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	3302      	adds	r3, #2
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7f7 f824 	bl	800aa02 <_ZN12SimpleString4AtoIEPKc>
 80139ba:	4603      	mov	r3, r0
 80139bc:	461a      	mov	r2, r3
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	61da      	str	r2, [r3, #28]
 80139c2:	e01c      	b.n	80139fe <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	3301      	adds	r3, #1
 80139ca:	68ba      	ldr	r2, [r7, #8]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	dd16      	ble.n	80139fe <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 80139d0:	683b      	ldr	r3, [r7, #0]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	3301      	adds	r3, #1
 80139d6:	009b      	lsls	r3, r3, #2
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	4413      	add	r3, r2
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	4618      	mov	r0, r3
 80139e0:	f7f7 f80f 	bl	800aa02 <_ZN12SimpleString4AtoIEPKc>
 80139e4:	4603      	mov	r3, r0
 80139e6:	461a      	mov	r2, r3
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	69db      	ldr	r3, [r3, #28]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d004      	beq.n	80139fe <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	1c5a      	adds	r2, r3, #1
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	69db      	ldr	r3, [r3, #28]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d102      	bne.n	8013a0c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	2202      	movs	r2, #2
 8013a0a:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8013a0c:	f107 0310 	add.w	r3, r7, #16
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7f7 fdb2 	bl	800b57a <_ZN12SimpleStringD1Ev>

}
 8013a16:	bf00      	nop
 8013a18:	3718      	adds	r7, #24
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
	...

08013a20 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8013a20:	b590      	push	{r4, r7, lr}
 8013a22:	b089      	sub	sp, #36	; 0x24
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
 8013a2c:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	2201      	movs	r2, #1
 8013a32:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8013a34:	4b34      	ldr	r3, [pc, #208]	; (8013b08 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4798      	blx	r3
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	461a      	mov	r2, r3
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6a1b      	ldr	r3, [r3, #32]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d104      	bne.n	8013a54 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	6a1b      	ldr	r3, [r3, #32]
 8013a4e:	1c5a      	adds	r2, r3, #1
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	009b      	lsls	r3, r3, #2
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	f107 0314 	add.w	r3, r7, #20
 8013a64:	4611      	mov	r1, r2
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7f7 f9cf 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8013a6c:	f107 0314 	add.w	r3, r7, #20
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f7 fd61 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 8013a76:	4603      	mov	r3, r0
 8013a78:	2b02      	cmp	r3, #2
 8013a7a:	bf8c      	ite	hi
 8013a7c:	2301      	movhi	r3, #1
 8013a7e:	2300      	movls	r3, #0
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d010      	beq.n	8013aa8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	2201      	movs	r2, #1
 8013a8a:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	009b      	lsls	r3, r3, #2
 8013a92:	687a      	ldr	r2, [r7, #4]
 8013a94:	4413      	add	r3, r2
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	3302      	adds	r3, #2
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7f6 ff78 	bl	800a990 <_ZN12SimpleString4AtoUEPKc>
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	621a      	str	r2, [r3, #32]
 8013aa6:	e01e      	b.n	8013ae6 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	3301      	adds	r3, #1
 8013aae:	68ba      	ldr	r2, [r7, #8]
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	dd18      	ble.n	8013ae6 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	687a      	ldr	r2, [r7, #4]
 8013abe:	4413      	add	r3, r2
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7f6 ff64 	bl	800a990 <_ZN12SimpleString4AtoUEPKc>
 8013ac8:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d00a      	beq.n	8013ae6 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2201      	movs	r2, #1
 8013ad4:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	69fa      	ldr	r2, [r7, #28]
 8013ada:	621a      	str	r2, [r3, #32]
            i++;
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	1c5a      	adds	r2, r3, #1
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	6a1b      	ldr	r3, [r3, #32]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	bf14      	ite	ne
 8013aee:	2301      	movne	r3, #1
 8013af0:	2300      	moveq	r3, #0
 8013af2:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8013af4:	f107 0314 	add.w	r3, r7, #20
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7f7 fd3e 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8013afe:	4623      	mov	r3, r4
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3724      	adds	r7, #36	; 0x24
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd90      	pop	{r4, r7, pc}
 8013b08:	200000a8 	.word	0x200000a8

08013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b088      	sub	sp, #32
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	60f8      	str	r0, [r7, #12]
 8013b14:	60b9      	str	r1, [r7, #8]
 8013b16:	607a      	str	r2, [r7, #4]
 8013b18:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8013b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013b1c:	f7f7 fd0c 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 8013b20:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8013b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	683a      	ldr	r2, [r7, #0]
 8013b2a:	4413      	add	r3, r2
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	f107 0314 	add.w	r3, r7, #20
 8013b32:	4611      	mov	r1, r2
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7f7 f968 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8013b3a:	f107 0314 	add.w	r3, r7, #20
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7f7 fcfa 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 8013b44:	4602      	mov	r2, r0
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	bf34      	ite	cc
 8013b4c:	2301      	movcc	r3, #1
 8013b4e:	2300      	movcs	r3, #0
 8013b50:	b2db      	uxtb	r3, r3
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00c      	beq.n	8013b70 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8013b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	683a      	ldr	r2, [r7, #0]
 8013b5e:	4413      	add	r3, r2
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	4413      	add	r3, r2
 8013b66:	4619      	mov	r1, r3
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f7f7 f94e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013b6e:	e019      	b.n	8013ba4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8013b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	3301      	adds	r3, #1
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	dd0f      	ble.n	8013b9c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8013b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	1c5a      	adds	r2, r3, #1
 8013b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b84:	601a      	str	r2, [r3, #0]
 8013b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	683a      	ldr	r2, [r7, #0]
 8013b8e:	4413      	add	r3, r2
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4619      	mov	r1, r3
 8013b94:	68f8      	ldr	r0, [r7, #12]
 8013b96:	f7f7 f938 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013b9a:	e003      	b.n	8013ba4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8013b9c:	4906      	ldr	r1, [pc, #24]	; (8013bb8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f7f7 f933 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8013ba4:	f107 0314 	add.w	r3, r7, #20
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7f7 fce6 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8013bae:	68f8      	ldr	r0, [r7, #12]
 8013bb0:	3720      	adds	r7, #32
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	08022fe8 	.word	0x08022fe8

08013bbc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8013bbc:	b5b0      	push	{r4, r5, r7, lr}
 8013bbe:	b08c      	sub	sp, #48	; 0x30
 8013bc0:	af02      	add	r7, sp, #8
 8013bc2:	60f8      	str	r0, [r7, #12]
 8013bc4:	60b9      	str	r1, [r7, #8]
 8013bc6:	607a      	str	r2, [r7, #4]
 8013bc8:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8013bca:	f107 031c 	add.w	r3, r7, #28
 8013bce:	491a      	ldr	r1, [pc, #104]	; (8013c38 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7f7 f91a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013bd6:	f107 0014 	add.w	r0, r7, #20
 8013bda:	f107 031c 	add.w	r3, r7, #28
 8013bde:	9301      	str	r3, [sp, #4]
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	9300      	str	r3, [sp, #0]
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	68ba      	ldr	r2, [r7, #8]
 8013be8:	68f9      	ldr	r1, [r7, #12]
 8013bea:	f7ff ff8f 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013bee:	f107 0514 	add.w	r5, r7, #20
 8013bf2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013bf6:	4911      	ldr	r1, [pc, #68]	; (8013c3c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8013bf8:	2010      	movs	r0, #16
 8013bfa:	f7f4 fd43 	bl	8008684 <_ZnwjPKci>
 8013bfe:	4604      	mov	r4, r0
 8013c00:	4629      	mov	r1, r5
 8013c02:	4620      	mov	r0, r4
 8013c04:	f009 ff3e 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8013c08:	627c      	str	r4, [r7, #36]	; 0x24
 8013c0a:	f107 0314 	add.w	r3, r7, #20
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7f7 fcb3 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013c14:	f107 031c 	add.w	r3, r7, #28
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f7f7 fcae 	bl	800b57a <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c22:	4619      	mov	r1, r3
 8013c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c26:	f009 ff4d 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8013c2a:	4602      	mov	r2, r0
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013c30:	bf00      	nop
 8013c32:	3728      	adds	r7, #40	; 0x28
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bdb0      	pop	{r4, r5, r7, pc}
 8013c38:	0802301c 	.word	0x0802301c
 8013c3c:	080239b0 	.word	0x080239b0

08013c40 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8013c40:	b5b0      	push	{r4, r5, r7, lr}
 8013c42:	b092      	sub	sp, #72	; 0x48
 8013c44:	af02      	add	r7, sp, #8
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
 8013c4c:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8013c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013c52:	494e      	ldr	r1, [pc, #312]	; (8013d8c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7f7 f8d8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013c5a:	f107 0020 	add.w	r0, r7, #32
 8013c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013c62:	9301      	str	r3, [sp, #4]
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	9300      	str	r3, [sp, #0]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	68ba      	ldr	r2, [r7, #8]
 8013c6c:	68f9      	ldr	r1, [r7, #12]
 8013c6e:	f7ff ff4d 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7f7 fc7f 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8013c7c:	f107 0310 	add.w	r3, r7, #16
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7f8 fb8f 	bl	800c3a4 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8013c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c8a:	4941      	ldr	r1, [pc, #260]	; (8013d90 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f7f7 f8bc 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013c92:	f107 0210 	add.w	r2, r7, #16
 8013c96:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8013c9a:	f107 0320 	add.w	r3, r7, #32
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7f7 fa1f 	bl	800b0e2 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8013ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7f7 fc66 	bl	800b57a <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8013cae:	f107 0310 	add.w	r3, r7, #16
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7f8 fc1b 	bl	800c4ee <_ZNK22SimpleStringCollection4sizeEv>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	2b02      	cmp	r3, #2
 8013cbc:	bf14      	ite	ne
 8013cbe:	2301      	movne	r3, #1
 8013cc0:	2300      	moveq	r3, #0
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d001      	beq.n	8013ccc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8013cc8:	2400      	movs	r4, #0
 8013cca:	e04f      	b.n	8013d6c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8013ccc:	f107 0310 	add.w	r3, r7, #16
 8013cd0:	2100      	movs	r1, #0
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7f8 fc18 	bl	800c508 <_ZN22SimpleStringCollectionixEj>
 8013cd8:	4604      	mov	r4, r0
 8013cda:	f107 0310 	add.w	r3, r7, #16
 8013cde:	2100      	movs	r1, #0
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7f8 fc11 	bl	800c508 <_ZN22SimpleStringCollectionixEj>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7f7 fc25 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	3b01      	subs	r3, #1
 8013cf2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	4621      	mov	r1, r4
 8013cfa:	f7f7 fd47 	bl	800b78c <_ZNK12SimpleString9subStringEjj>
 8013cfe:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8013d02:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8013d06:	4923      	ldr	r1, [pc, #140]	; (8013d94 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8013d08:	2010      	movs	r0, #16
 8013d0a:	f7f4 fcbb 	bl	8008684 <_ZnwjPKci>
 8013d0e:	4604      	mov	r4, r0
 8013d10:	4629      	mov	r1, r5
 8013d12:	4620      	mov	r0, r4
 8013d14:	f009 feb6 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d1c:	4619      	mov	r1, r3
 8013d1e:	4620      	mov	r0, r4
 8013d20:	f009 fed0 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8013d24:	4602      	mov	r2, r0
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	625a      	str	r2, [r3, #36]	; 0x24
 8013d2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7f7 fc23 	bl	800b57a <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8013d34:	f107 0310 	add.w	r3, r7, #16
 8013d38:	2101      	movs	r1, #1
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7f8 fbe4 	bl	800c508 <_ZN22SimpleStringCollectionixEj>
 8013d40:	4605      	mov	r5, r0
 8013d42:	f240 121f 	movw	r2, #287	; 0x11f
 8013d46:	4913      	ldr	r1, [pc, #76]	; (8013d94 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8013d48:	2010      	movs	r0, #16
 8013d4a:	f7f4 fc9b 	bl	8008684 <_ZnwjPKci>
 8013d4e:	4604      	mov	r4, r0
 8013d50:	4629      	mov	r1, r5
 8013d52:	4620      	mov	r0, r4
 8013d54:	f009 fe96 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f009 feb0 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8013d64:	4602      	mov	r2, r0
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8013d6a:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8013d6c:	f107 0310 	add.w	r3, r7, #16
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7f8 fb8b 	bl	800c48c <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8013d76:	f107 0320 	add.w	r3, r7, #32
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7f7 fbfd 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013d80:	4623      	mov	r3, r4
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	3740      	adds	r7, #64	; 0x40
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bdb0      	pop	{r4, r5, r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	08023020 	.word	0x08023020
 8013d90:	080239d0 	.word	0x080239d0
 8013d94:	080239b0 	.word	0x080239b0

08013d98 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8013d98:	b5b0      	push	{r4, r5, r7, lr}
 8013d9a:	b08c      	sub	sp, #48	; 0x30
 8013d9c:	af02      	add	r7, sp, #8
 8013d9e:	60f8      	str	r0, [r7, #12]
 8013da0:	60b9      	str	r1, [r7, #8]
 8013da2:	607a      	str	r2, [r7, #4]
 8013da4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8013da6:	f107 031c 	add.w	r3, r7, #28
 8013daa:	491c      	ldr	r1, [pc, #112]	; (8013e1c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7f7 f82c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013db2:	f107 0014 	add.w	r0, r7, #20
 8013db6:	f107 031c 	add.w	r3, r7, #28
 8013dba:	9301      	str	r3, [sp, #4]
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	9300      	str	r3, [sp, #0]
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	68ba      	ldr	r2, [r7, #8]
 8013dc4:	68f9      	ldr	r1, [r7, #12]
 8013dc6:	f7ff fea1 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013dca:	f107 0514 	add.w	r5, r7, #20
 8013dce:	f240 1225 	movw	r2, #293	; 0x125
 8013dd2:	4913      	ldr	r1, [pc, #76]	; (8013e20 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8013dd4:	2010      	movs	r0, #16
 8013dd6:	f7f4 fc55 	bl	8008684 <_ZnwjPKci>
 8013dda:	4604      	mov	r4, r0
 8013ddc:	4629      	mov	r1, r5
 8013dde:	4620      	mov	r0, r4
 8013de0:	f009 fe50 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8013de4:	627c      	str	r4, [r7, #36]	; 0x24
 8013de6:	f107 0314 	add.w	r3, r7, #20
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7f7 fbc5 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013df0:	f107 031c 	add.w	r3, r7, #28
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7f7 fbc0 	bl	800b57a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8013dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dfc:	f009 fe7d 	bl	801dafa <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e04:	4619      	mov	r1, r3
 8013e06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e08:	f009 fe5c 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013e12:	bf00      	nop
 8013e14:	3728      	adds	r7, #40	; 0x28
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bdb0      	pop	{r4, r5, r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	08023024 	.word	0x08023024
 8013e20:	080239b0 	.word	0x080239b0

08013e24 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8013e24:	b5b0      	push	{r4, r5, r7, lr}
 8013e26:	b08c      	sub	sp, #48	; 0x30
 8013e28:	af02      	add	r7, sp, #8
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	60b9      	str	r1, [r7, #8]
 8013e2e:	607a      	str	r2, [r7, #4]
 8013e30:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8013e32:	f107 031c 	add.w	r3, r7, #28
 8013e36:	491c      	ldr	r1, [pc, #112]	; (8013ea8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7f6 ffe6 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013e3e:	f107 0014 	add.w	r0, r7, #20
 8013e42:	f107 031c 	add.w	r3, r7, #28
 8013e46:	9301      	str	r3, [sp, #4]
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	9300      	str	r3, [sp, #0]
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	68ba      	ldr	r2, [r7, #8]
 8013e50:	68f9      	ldr	r1, [r7, #12]
 8013e52:	f7ff fe5b 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013e56:	f107 0514 	add.w	r5, r7, #20
 8013e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013e5e:	4913      	ldr	r1, [pc, #76]	; (8013eac <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8013e60:	2010      	movs	r0, #16
 8013e62:	f7f4 fc0f 	bl	8008684 <_ZnwjPKci>
 8013e66:	4604      	mov	r4, r0
 8013e68:	4629      	mov	r1, r5
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f009 fe0a 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8013e70:	627c      	str	r4, [r7, #36]	; 0x24
 8013e72:	f107 0314 	add.w	r3, r7, #20
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7f7 fb7f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013e7c:	f107 031c 	add.w	r3, r7, #28
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7f7 fb7a 	bl	800b57a <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8013e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e88:	f009 fe44 	bl	801db14 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e90:	4619      	mov	r1, r3
 8013e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e94:	f009 fe16 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013e9e:	bf00      	nop
 8013ea0:	3728      	adds	r7, #40	; 0x28
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8013ea6:	bf00      	nop
 8013ea8:	08023028 	.word	0x08023028
 8013eac:	080239b0 	.word	0x080239b0

08013eb0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8013eb0:	b5b0      	push	{r4, r5, r7, lr}
 8013eb2:	b08c      	sub	sp, #48	; 0x30
 8013eb4:	af02      	add	r7, sp, #8
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	607a      	str	r2, [r7, #4]
 8013ebc:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8013ebe:	f107 031c 	add.w	r3, r7, #28
 8013ec2:	491d      	ldr	r1, [pc, #116]	; (8013f38 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7f6 ffa0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013eca:	f107 0014 	add.w	r0, r7, #20
 8013ece:	f107 031c 	add.w	r3, r7, #28
 8013ed2:	9301      	str	r3, [sp, #4]
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	9300      	str	r3, [sp, #0]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	68ba      	ldr	r2, [r7, #8]
 8013edc:	68f9      	ldr	r1, [r7, #12]
 8013ede:	f7ff fe15 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013ee2:	f107 0514 	add.w	r5, r7, #20
 8013ee6:	f240 1233 	movw	r2, #307	; 0x133
 8013eea:	4914      	ldr	r1, [pc, #80]	; (8013f3c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8013eec:	2010      	movs	r0, #16
 8013eee:	f7f4 fbc9 	bl	8008684 <_ZnwjPKci>
 8013ef2:	4604      	mov	r4, r0
 8013ef4:	4629      	mov	r1, r5
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	f009 fdc4 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8013efc:	627c      	str	r4, [r7, #36]	; 0x24
 8013efe:	f107 0314 	add.w	r3, r7, #20
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7f7 fb39 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013f08:	f107 031c 	add.w	r3, r7, #28
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7f7 fb34 	bl	800b57a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8013f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f14:	f009 fdf1 	bl	801dafa <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8013f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f1a:	f009 fdfb 	bl	801db14 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f22:	4619      	mov	r1, r3
 8013f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f26:	f009 fdcd 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013f30:	bf00      	nop
 8013f32:	3728      	adds	r7, #40	; 0x28
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bdb0      	pop	{r4, r5, r7, pc}
 8013f38:	0802302c 	.word	0x0802302c
 8013f3c:	080239b0 	.word	0x080239b0

08013f40 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8013f40:	b5b0      	push	{r4, r5, r7, lr}
 8013f42:	b08c      	sub	sp, #48	; 0x30
 8013f44:	af02      	add	r7, sp, #8
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
 8013f4c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8013f4e:	f107 031c 	add.w	r3, r7, #28
 8013f52:	491a      	ldr	r1, [pc, #104]	; (8013fbc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7f6 ff58 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013f5a:	f107 0014 	add.w	r0, r7, #20
 8013f5e:	f107 031c 	add.w	r3, r7, #28
 8013f62:	9301      	str	r3, [sp, #4]
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	9300      	str	r3, [sp, #0]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	68ba      	ldr	r2, [r7, #8]
 8013f6c:	68f9      	ldr	r1, [r7, #12]
 8013f6e:	f7ff fdcd 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013f72:	f107 0514 	add.w	r5, r7, #20
 8013f76:	f240 123b 	movw	r2, #315	; 0x13b
 8013f7a:	4911      	ldr	r1, [pc, #68]	; (8013fc0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8013f7c:	2010      	movs	r0, #16
 8013f7e:	f7f4 fb81 	bl	8008684 <_ZnwjPKci>
 8013f82:	4604      	mov	r4, r0
 8013f84:	4629      	mov	r1, r5
 8013f86:	4620      	mov	r0, r4
 8013f88:	f009 fd7c 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8013f8c:	627c      	str	r4, [r7, #36]	; 0x24
 8013f8e:	f107 0314 	add.w	r3, r7, #20
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7f7 faf1 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8013f98:	f107 031c 	add.w	r3, r7, #28
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7f7 faec 	bl	800b57a <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013faa:	f009 fd8b 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8013fae:	4602      	mov	r2, r0
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013fb4:	bf00      	nop
 8013fb6:	3728      	adds	r7, #40	; 0x28
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bdb0      	pop	{r4, r5, r7, pc}
 8013fbc:	08023034 	.word	0x08023034
 8013fc0:	080239b0 	.word	0x080239b0

08013fc4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8013fc4:	b5b0      	push	{r4, r5, r7, lr}
 8013fc6:	b08c      	sub	sp, #48	; 0x30
 8013fc8:	af02      	add	r7, sp, #8
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
 8013fd0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8013fd2:	f107 031c 	add.w	r3, r7, #28
 8013fd6:	491c      	ldr	r1, [pc, #112]	; (8014048 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7f6 ff16 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8013fde:	f107 0014 	add.w	r0, r7, #20
 8013fe2:	f107 031c 	add.w	r3, r7, #28
 8013fe6:	9301      	str	r3, [sp, #4]
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	9300      	str	r3, [sp, #0]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	68ba      	ldr	r2, [r7, #8]
 8013ff0:	68f9      	ldr	r1, [r7, #12]
 8013ff2:	f7ff fd8b 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013ff6:	f107 0514 	add.w	r5, r7, #20
 8013ffa:	f240 1241 	movw	r2, #321	; 0x141
 8013ffe:	4913      	ldr	r1, [pc, #76]	; (801404c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8014000:	2010      	movs	r0, #16
 8014002:	f7f4 fb3f 	bl	8008684 <_ZnwjPKci>
 8014006:	4604      	mov	r4, r0
 8014008:	4629      	mov	r1, r5
 801400a:	4620      	mov	r0, r4
 801400c:	f009 fd3a 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8014010:	627c      	str	r4, [r7, #36]	; 0x24
 8014012:	f107 0314 	add.w	r3, r7, #20
 8014016:	4618      	mov	r0, r3
 8014018:	f7f7 faaf 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801401c:	f107 031c 	add.w	r3, r7, #28
 8014020:	4618      	mov	r0, r3
 8014022:	f7f7 faaa 	bl	800b57a <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8014026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014028:	f009 fd67 	bl	801dafa <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014030:	4619      	mov	r1, r3
 8014032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014034:	f009 fd46 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8014038:	4602      	mov	r2, r0
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801403e:	bf00      	nop
 8014040:	3728      	adds	r7, #40	; 0x28
 8014042:	46bd      	mov	sp, r7
 8014044:	bdb0      	pop	{r4, r5, r7, pc}
 8014046:	bf00      	nop
 8014048:	08023038 	.word	0x08023038
 801404c:	080239b0 	.word	0x080239b0

08014050 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8014050:	b5b0      	push	{r4, r5, r7, lr}
 8014052:	b08c      	sub	sp, #48	; 0x30
 8014054:	af02      	add	r7, sp, #8
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	60b9      	str	r1, [r7, #8]
 801405a:	607a      	str	r2, [r7, #4]
 801405c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 801405e:	f107 031c 	add.w	r3, r7, #28
 8014062:	491c      	ldr	r1, [pc, #112]	; (80140d4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8014064:	4618      	mov	r0, r3
 8014066:	f7f6 fed0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801406a:	f107 0014 	add.w	r0, r7, #20
 801406e:	f107 031c 	add.w	r3, r7, #28
 8014072:	9301      	str	r3, [sp, #4]
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	9300      	str	r3, [sp, #0]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	68ba      	ldr	r2, [r7, #8]
 801407c:	68f9      	ldr	r1, [r7, #12]
 801407e:	f7ff fd45 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014082:	f107 0514 	add.w	r5, r7, #20
 8014086:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801408a:	4913      	ldr	r1, [pc, #76]	; (80140d8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 801408c:	2010      	movs	r0, #16
 801408e:	f7f4 faf9 	bl	8008684 <_ZnwjPKci>
 8014092:	4604      	mov	r4, r0
 8014094:	4629      	mov	r1, r5
 8014096:	4620      	mov	r0, r4
 8014098:	f009 fcf4 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 801409c:	627c      	str	r4, [r7, #36]	; 0x24
 801409e:	f107 0314 	add.w	r3, r7, #20
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7f7 fa69 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80140a8:	f107 031c 	add.w	r3, r7, #28
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7f7 fa64 	bl	800b57a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80140b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140b4:	f009 fd2e 	bl	801db14 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140bc:	4619      	mov	r1, r3
 80140be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140c0:	f009 fd00 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 80140c4:	4602      	mov	r2, r0
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80140ca:	bf00      	nop
 80140cc:	3728      	adds	r7, #40	; 0x28
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bdb0      	pop	{r4, r5, r7, pc}
 80140d2:	bf00      	nop
 80140d4:	0802303c 	.word	0x0802303c
 80140d8:	080239b0 	.word	0x080239b0

080140dc <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 80140dc:	b5b0      	push	{r4, r5, r7, lr}
 80140de:	b08c      	sub	sp, #48	; 0x30
 80140e0:	af02      	add	r7, sp, #8
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
 80140e8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 80140ea:	f107 031c 	add.w	r3, r7, #28
 80140ee:	491d      	ldr	r1, [pc, #116]	; (8014164 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7f6 fe8a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80140f6:	f107 0014 	add.w	r0, r7, #20
 80140fa:	f107 031c 	add.w	r3, r7, #28
 80140fe:	9301      	str	r3, [sp, #4]
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	68ba      	ldr	r2, [r7, #8]
 8014108:	68f9      	ldr	r1, [r7, #12]
 801410a:	f7ff fcff 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801410e:	f107 0514 	add.w	r5, r7, #20
 8014112:	f240 124f 	movw	r2, #335	; 0x14f
 8014116:	4914      	ldr	r1, [pc, #80]	; (8014168 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8014118:	2010      	movs	r0, #16
 801411a:	f7f4 fab3 	bl	8008684 <_ZnwjPKci>
 801411e:	4604      	mov	r4, r0
 8014120:	4629      	mov	r1, r5
 8014122:	4620      	mov	r0, r4
 8014124:	f009 fcae 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8014128:	627c      	str	r4, [r7, #36]	; 0x24
 801412a:	f107 0314 	add.w	r3, r7, #20
 801412e:	4618      	mov	r0, r3
 8014130:	f7f7 fa23 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8014134:	f107 031c 	add.w	r3, r7, #28
 8014138:	4618      	mov	r0, r3
 801413a:	f7f7 fa1e 	bl	800b57a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801413e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014140:	f009 fce8 	bl	801db14 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8014144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014146:	f009 fcd8 	bl	801dafa <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801414e:	4619      	mov	r1, r3
 8014150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014152:	f009 fcb7 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 8014156:	4602      	mov	r2, r0
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801415c:	bf00      	nop
 801415e:	3728      	adds	r7, #40	; 0x28
 8014160:	46bd      	mov	sp, r7
 8014162:	bdb0      	pop	{r4, r5, r7, pc}
 8014164:	08023040 	.word	0x08023040
 8014168:	080239b0 	.word	0x080239b0

0801416c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 801416c:	b5b0      	push	{r4, r5, r7, lr}
 801416e:	b092      	sub	sp, #72	; 0x48
 8014170:	af02      	add	r7, sp, #8
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	60b9      	str	r1, [r7, #8]
 8014176:	607a      	str	r2, [r7, #4]
 8014178:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801417a:	f107 0320 	add.w	r3, r7, #32
 801417e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014180:	4618      	mov	r0, r3
 8014182:	f7f6 fe42 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8014186:	f107 0018 	add.w	r0, r7, #24
 801418a:	f107 0320 	add.w	r3, r7, #32
 801418e:	9301      	str	r3, [sp, #4]
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	9300      	str	r3, [sp, #0]
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	68ba      	ldr	r2, [r7, #8]
 8014198:	68f9      	ldr	r1, [r7, #12]
 801419a:	f7ff fcb7 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801419e:	f107 0320 	add.w	r3, r7, #32
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7f7 f9e9 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80141a8:	f107 0010 	add.w	r0, r7, #16
 80141ac:	f107 0118 	add.w	r1, r7, #24
 80141b0:	2329      	movs	r3, #41	; 0x29
 80141b2:	222c      	movs	r2, #44	; 0x2c
 80141b4:	f7f7 fb92 	bl	800b8dc <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 80141b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80141bc:	f107 0110 	add.w	r1, r7, #16
 80141c0:	2202      	movs	r2, #2
 80141c2:	4618      	mov	r0, r3
 80141c4:	f7f7 fb2c 	bl	800b820 <_ZNK12SimpleString9subStringEj>
 80141c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141cc:	f107 0310 	add.w	r3, r7, #16
 80141d0:	4611      	mov	r1, r2
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7f6 fe85 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 80141d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80141dc:	4618      	mov	r0, r3
 80141de:	f7f7 f9cc 	bl	800b57a <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 80141e2:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80141e6:	492a      	ldr	r1, [pc, #168]	; (8014290 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80141e8:	2010      	movs	r0, #16
 80141ea:	f7f4 fa4b 	bl	8008684 <_ZnwjPKci>
 80141ee:	4604      	mov	r4, r0
 80141f0:	f107 0310 	add.w	r3, r7, #16
 80141f4:	4619      	mov	r1, r3
 80141f6:	4620      	mov	r0, r4
 80141f8:	f009 fc44 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 80141fc:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 80141fe:	f107 0318 	add.w	r3, r7, #24
 8014202:	2100      	movs	r1, #0
 8014204:	4618      	mov	r0, r3
 8014206:	f7f7 fb1c 	bl	800b842 <_ZNK12SimpleString2atEj>
 801420a:	4603      	mov	r3, r0
 801420c:	461a      	mov	r2, r3
 801420e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014212:	f107 0118 	add.w	r1, r7, #24
 8014216:	232c      	movs	r3, #44	; 0x2c
 8014218:	f7f7 fb60 	bl	800b8dc <_ZNK12SimpleString17subStringFromTillEcc>
 801421c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8014220:	f240 125b 	movw	r2, #347	; 0x15b
 8014224:	491a      	ldr	r1, [pc, #104]	; (8014290 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8014226:	2010      	movs	r0, #16
 8014228:	f7f4 fa2c 	bl	8008684 <_ZnwjPKci>
 801422c:	4604      	mov	r4, r0
 801422e:	4629      	mov	r1, r5
 8014230:	4620      	mov	r0, r4
 8014232:	f009 fc27 	bl	801da84 <_ZN10TestFilterC1ERK12SimpleString>
 8014236:	63bc      	str	r4, [r7, #56]	; 0x38
 8014238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801423c:	4618      	mov	r0, r3
 801423e:	f7f7 f99c 	bl	800b57a <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8014242:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014244:	f009 fc59 	bl	801dafa <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8014248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801424a:	f009 fc56 	bl	801dafa <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014252:	4619      	mov	r1, r3
 8014254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014256:	f009 fc35 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 801425a:	4602      	mov	r2, r0
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014264:	4619      	mov	r1, r3
 8014266:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014268:	f009 fc2c 	bl	801dac4 <_ZN10TestFilter3addEPS_>
 801426c:	4602      	mov	r2, r0
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8014272:	f107 0310 	add.w	r3, r7, #16
 8014276:	4618      	mov	r0, r3
 8014278:	f7f7 f97f 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801427c:	f107 0318 	add.w	r3, r7, #24
 8014280:	4618      	mov	r0, r3
 8014282:	f7f7 f97a 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8014286:	bf00      	nop
 8014288:	3740      	adds	r7, #64	; 0x40
 801428a:	46bd      	mov	sp, r7
 801428c:	bdb0      	pop	{r4, r5, r7, pc}
 801428e:	bf00      	nop
 8014290:	080239b0 	.word	0x080239b0

08014294 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8014294:	b590      	push	{r4, r7, lr}
 8014296:	b08b      	sub	sp, #44	; 0x2c
 8014298:	af02      	add	r7, sp, #8
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
 80142a0:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80142a2:	f107 0318 	add.w	r3, r7, #24
 80142a6:	491b      	ldr	r1, [pc, #108]	; (8014314 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7f6 fdae 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80142ae:	f107 0010 	add.w	r0, r7, #16
 80142b2:	f107 0318 	add.w	r3, r7, #24
 80142b6:	9301      	str	r3, [sp, #4]
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	68ba      	ldr	r2, [r7, #8]
 80142c0:	68f9      	ldr	r1, [r7, #12]
 80142c2:	f7ff fc23 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80142c6:	f107 0318 	add.w	r3, r7, #24
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7f7 f955 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 80142d0:	f107 0310 	add.w	r3, r7, #16
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7f7 f92f 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 80142da:	4603      	mov	r3, r0
 80142dc:	2b00      	cmp	r3, #0
 80142de:	bf0c      	ite	eq
 80142e0:	2301      	moveq	r3, #1
 80142e2:	2300      	movne	r3, #0
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d001      	beq.n	80142ee <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 80142ea:	2400      	movs	r4, #0
 80142ec:	e008      	b.n	8014300 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	3330      	adds	r3, #48	; 0x30
 80142f2:	f107 0210 	add.w	r2, r7, #16
 80142f6:	4611      	mov	r1, r2
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7f6 fdf2 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80142fe:	2401      	movs	r4, #1
 8014300:	f107 0310 	add.w	r3, r7, #16
 8014304:	4618      	mov	r0, r3
 8014306:	f7f7 f938 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801430a:	2c01      	cmp	r4, #1
}
 801430c:	3724      	adds	r7, #36	; 0x24
 801430e:	46bd      	mov	sp, r7
 8014310:	bd90      	pop	{r4, r7, pc}
 8014312:	bf00      	nop
 8014314:	08023068 	.word	0x08023068

08014318 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8014318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801431a:	b093      	sub	sp, #76	; 0x4c
 801431c:	af02      	add	r7, sp, #8
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	60b9      	str	r1, [r7, #8]
 8014322:	607a      	str	r2, [r7, #4]
 8014324:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8014326:	f107 0318 	add.w	r3, r7, #24
 801432a:	4953      	ldr	r1, [pc, #332]	; (8014478 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 801432c:	4618      	mov	r0, r3
 801432e:	f7f6 fd6c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8014332:	f107 0010 	add.w	r0, r7, #16
 8014336:	f107 0318 	add.w	r3, r7, #24
 801433a:	9301      	str	r3, [sp, #4]
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	9300      	str	r3, [sp, #0]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	68ba      	ldr	r2, [r7, #8]
 8014344:	68f9      	ldr	r1, [r7, #12]
 8014346:	f7ff fbe1 	bl	8013b0c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801434a:	f107 0318 	add.w	r3, r7, #24
 801434e:	4618      	mov	r0, r3
 8014350:	f7f7 f913 	bl	800b57a <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8014354:	f107 0310 	add.w	r3, r7, #16
 8014358:	4618      	mov	r0, r3
 801435a:	f7f7 f8ed 	bl	800b538 <_ZNK12SimpleString4sizeEv>
 801435e:	4603      	mov	r3, r0
 8014360:	2b00      	cmp	r3, #0
 8014362:	bf0c      	ite	eq
 8014364:	2301      	moveq	r3, #1
 8014366:	2300      	movne	r3, #0
 8014368:	b2db      	uxtb	r3, r3
 801436a:	2b00      	cmp	r3, #0
 801436c:	d001      	beq.n	8014372 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 801436e:	2400      	movs	r4, #0
 8014370:	e078      	b.n	8014464 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8014372:	2500      	movs	r5, #0
 8014374:	f107 0320 	add.w	r3, r7, #32
 8014378:	4940      	ldr	r1, [pc, #256]	; (801447c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 801437a:	4618      	mov	r0, r3
 801437c:	f7f6 fd45 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8014380:	2601      	movs	r6, #1
 8014382:	f107 0220 	add.w	r2, r7, #32
 8014386:	f107 0310 	add.w	r3, r7, #16
 801438a:	4611      	mov	r1, r2
 801438c:	4618      	mov	r0, r3
 801438e:	f7f7 f900 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8014392:	4603      	mov	r3, r0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d111      	bne.n	80143bc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8014398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801439c:	4938      	ldr	r1, [pc, #224]	; (8014480 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 801439e:	4618      	mov	r0, r3
 80143a0:	f7f6 fd33 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80143a4:	2501      	movs	r5, #1
 80143a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143aa:	f107 0310 	add.w	r3, r7, #16
 80143ae:	4611      	mov	r1, r2
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7f7 f8ee 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 80143b6:	4603      	mov	r3, r0
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d001      	beq.n	80143c0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 80143bc:	2401      	movs	r4, #1
 80143be:	e000      	b.n	80143c2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 80143c0:	2400      	movs	r4, #0
 80143c2:	2d00      	cmp	r5, #0
 80143c4:	d004      	beq.n	80143d0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 80143c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80143ca:	4618      	mov	r0, r3
 80143cc:	f7f7 f8d5 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80143d0:	2e00      	cmp	r6, #0
 80143d2:	d004      	beq.n	80143de <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 80143d4:	f107 0320 	add.w	r3, r7, #32
 80143d8:	4618      	mov	r0, r3
 80143da:	f7f7 f8ce 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80143de:	2c00      	cmp	r4, #0
 80143e0:	d005      	beq.n	80143ee <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2200      	movs	r2, #0
 80143e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80143ea:	2401      	movs	r4, #1
 80143ec:	e03a      	b.n	8014464 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 80143ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80143f2:	4924      	ldr	r1, [pc, #144]	; (8014484 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7f6 fd08 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80143fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80143fe:	f107 0310 	add.w	r3, r7, #16
 8014402:	4611      	mov	r1, r2
 8014404:	4618      	mov	r0, r3
 8014406:	f7f7 f8c4 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801440a:	4603      	mov	r3, r0
 801440c:	461c      	mov	r4, r3
 801440e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014412:	4618      	mov	r0, r3
 8014414:	f7f7 f8b1 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8014418:	2c00      	cmp	r4, #0
 801441a:	d005      	beq.n	8014428 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	2201      	movs	r2, #1
 8014420:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014424:	2401      	movs	r4, #1
 8014426:	e01d      	b.n	8014464 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8014428:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801442c:	4916      	ldr	r1, [pc, #88]	; (8014488 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 801442e:	4618      	mov	r0, r3
 8014430:	f7f6 fceb 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8014434:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014438:	f107 0310 	add.w	r3, r7, #16
 801443c:	4611      	mov	r1, r2
 801443e:	4618      	mov	r0, r3
 8014440:	f7f7 f8a7 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8014444:	4603      	mov	r3, r0
 8014446:	461c      	mov	r4, r3
 8014448:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801444c:	4618      	mov	r0, r3
 801444e:	f7f7 f894 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8014452:	2c00      	cmp	r4, #0
 8014454:	d005      	beq.n	8014462 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	2202      	movs	r2, #2
 801445a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801445e:	2401      	movs	r4, #1
 8014460:	e000      	b.n	8014464 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8014462:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8014464:	f107 0310 	add.w	r3, r7, #16
 8014468:	4618      	mov	r0, r3
 801446a:	f7f7 f886 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801446e:	4623      	mov	r3, r4
}
 8014470:	4618      	mov	r0, r3
 8014472:	3744      	adds	r7, #68	; 0x44
 8014474:	46bd      	mov	sp, r7
 8014476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014478:	08023064 	.word	0x08023064
 801447c:	080239d4 	.word	0x080239d4
 8014480:	080239dc 	.word	0x080239dc
 8014484:	080239e4 	.word	0x080239e4
 8014488:	080239ec 	.word	0x080239ec

0801448c <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 801448c:	b480      	push	{r7}
 801448e:	b083      	sub	sp, #12
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801449a:	2b01      	cmp	r3, #1
 801449c:	bf0c      	ite	eq
 801449e:	2301      	moveq	r3, #1
 80144a0:	2300      	movne	r3, #0
 80144a2:	b2db      	uxtb	r3, r3
}
 80144a4:	4618      	mov	r0, r3
 80144a6:	370c      	adds	r7, #12
 80144a8:	46bd      	mov	sp, r7
 80144aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ae:	4770      	bx	lr

080144b0 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 80144b0:	b480      	push	{r7}
 80144b2:	b083      	sub	sp, #12
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80144be:	2b02      	cmp	r3, #2
 80144c0:	bf0c      	ite	eq
 80144c2:	2301      	moveq	r3, #1
 80144c4:	2300      	movne	r3, #0
 80144c6:	b2db      	uxtb	r3, r3
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	370c      	adds	r7, #12
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr

080144d4 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 80144d4:	b480      	push	{r7}
 80144d6:	b083      	sub	sp, #12
 80144d8:	af00      	add	r7, sp, #0
 80144da:	6078      	str	r0, [r7, #4]
    return packageName_;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	3330      	adds	r3, #48	; 0x30
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	370c      	adds	r7, #12
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr

080144ec <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 80144ec:	b480      	push	{r7}
 80144ee:	b083      	sub	sp, #12
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2200      	movs	r2, #0
 80144f8:	601a      	str	r2, [r3, #0]
    {}
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	4618      	mov	r0, r3
 80144fe:	370c      	adds	r7, #12
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr

08014508 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014516:	2200      	movs	r2, #0
 8014518:	601a      	str	r2, [r3, #0]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014520:	3304      	adds	r3, #4
 8014522:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014526:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2200      	movs	r2, #0
 801452c:	701a      	strb	r2, [r3, #0]
}
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	4618      	mov	r0, r3
 8014532:	370c      	adds	r7, #12
 8014534:	46bd      	mov	sp, r7
 8014536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453a:	4770      	bx	lr

0801453c <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 801453c:	b480      	push	{r7}
 801453e:	b083      	sub	sp, #12
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801454a:	2200      	movs	r2, #0
 801454c:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2200      	movs	r2, #0
 8014552:	701a      	strb	r2, [r3, #0]
}
 8014554:	bf00      	nop
 8014556:	370c      	adds	r7, #12
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr

08014560 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8014560:	b40e      	push	{r1, r2, r3}
 8014562:	b590      	push	{r4, r7, lr}
 8014564:	b086      	sub	sp, #24
 8014566:	af00      	add	r7, sp, #0
 8014568:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014570:	3304      	adds	r3, #4
 8014572:	681a      	ldr	r2, [r3, #0]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d032      	beq.n	80145ec <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8014586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801458a:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 801458c:	4b1b      	ldr	r3, [pc, #108]	; (80145fc <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 801458e:	681c      	ldr	r4, [r3, #0]
 8014590:	687a      	ldr	r2, [r7, #4]
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	18d0      	adds	r0, r2, r3
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	1c59      	adds	r1, r3, #1
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145a4:	47a0      	blx	r4
 80145a6:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	dd09      	ble.n	80145c2 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	441a      	add	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145c0:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145d0:	3304      	adds	r3, #4
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d90a      	bls.n	80145ee <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145de:	3304      	adds	r3, #4
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145e8:	601a      	str	r2, [r3, #0]
 80145ea:	e000      	b.n	80145ee <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 80145ec:	bf00      	nop
    va_end(arguments);
}
 80145ee:	3718      	adds	r7, #24
 80145f0:	46bd      	mov	sp, r7
 80145f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80145f6:	b003      	add	sp, #12
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop
 80145fc:	200000b0 	.word	0x200000b0

08014600 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b08c      	sub	sp, #48	; 0x30
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	60b9      	str	r1, [r7, #8]
 801460a:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8014610:	2310      	movs	r3, #16
 8014612:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8014614:	2300      	movs	r3, #0
 8014616:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8014618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	429a      	cmp	r2, r3
 801461e:	d273      	bcs.n	8014708 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8014620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014622:	493b      	ldr	r1, [pc, #236]	; (8014710 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8014624:	68f8      	ldr	r0, [r7, #12]
 8014626:	f7ff ff9b 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 801462a:	687a      	ldr	r2, [r7, #4]
 801462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801462e:	1ad3      	subs	r3, r2, r3
 8014630:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8014632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014634:	2b10      	cmp	r3, #16
 8014636:	d901      	bls.n	801463c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8014638:	2310      	movs	r3, #16
 801463a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 801463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463e:	f1c3 0310 	rsb	r3, r3, #16
 8014642:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8014644:	2300      	movs	r3, #0
 8014646:	62bb      	str	r3, [r7, #40]	; 0x28
 8014648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801464c:	429a      	cmp	r2, r3
 801464e:	d215      	bcs.n	801467c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8014650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014654:	4413      	add	r3, r2
 8014656:	69fa      	ldr	r2, [r7, #28]
 8014658:	4413      	add	r3, r2
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	461a      	mov	r2, r3
 801465e:	492d      	ldr	r1, [pc, #180]	; (8014714 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8014660:	68f8      	ldr	r0, [r7, #12]
 8014662:	f7ff ff7d 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8014666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014668:	2b07      	cmp	r3, #7
 801466a:	d103      	bne.n	8014674 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 801466c:	492a      	ldr	r1, [pc, #168]	; (8014718 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801466e:	68f8      	ldr	r0, [r7, #12]
 8014670:	f7ff ff76 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8014674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014676:	3301      	adds	r3, #1
 8014678:	62bb      	str	r3, [r7, #40]	; 0x28
 801467a:	e7e5      	b.n	8014648 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 801467c:	2300      	movs	r3, #0
 801467e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	429a      	cmp	r2, r3
 8014686:	d207      	bcs.n	8014698 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8014688:	4924      	ldr	r1, [pc, #144]	; (801471c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 801468a:	68f8      	ldr	r0, [r7, #12]
 801468c:	f7ff ff68 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8014690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014692:	3301      	adds	r3, #1
 8014694:	62bb      	str	r3, [r7, #40]	; 0x28
 8014696:	e7f3      	b.n	8014680 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8014698:	697b      	ldr	r3, [r7, #20]
 801469a:	2b08      	cmp	r3, #8
 801469c:	d903      	bls.n	80146a6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801469e:	491e      	ldr	r1, [pc, #120]	; (8014718 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80146a0:	68f8      	ldr	r0, [r7, #12]
 80146a2:	f7ff ff5d 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 80146a6:	491e      	ldr	r1, [pc, #120]	; (8014720 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 80146a8:	68f8      	ldr	r0, [r7, #12]
 80146aa:	f7ff ff59 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80146ae:	2300      	movs	r3, #0
 80146b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80146b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d21d      	bcs.n	80146f6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 80146ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146be:	4413      	add	r3, r2
 80146c0:	69fa      	ldr	r2, [r7, #28]
 80146c2:	4413      	add	r3, r2
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 80146ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146ce:	2b1f      	cmp	r3, #31
 80146d0:	d903      	bls.n	80146da <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 80146d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146d6:	2b7e      	cmp	r3, #126	; 0x7e
 80146d8:	d902      	bls.n	80146e0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 80146da:	232e      	movs	r3, #46	; 0x2e
 80146dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 80146e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146e4:	461a      	mov	r2, r3
 80146e6:	490f      	ldr	r1, [pc, #60]	; (8014724 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 80146e8:	68f8      	ldr	r0, [r7, #12]
 80146ea:	f7ff ff39 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80146ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f0:	3301      	adds	r3, #1
 80146f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80146f4:	e7dd      	b.n	80146b2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 80146f6:	490c      	ldr	r1, [pc, #48]	; (8014728 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80146f8:	68f8      	ldr	r0, [r7, #12]
 80146fa:	f7ff ff31 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80146fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	4413      	add	r3, r2
 8014704:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8014706:	e787      	b.n	8014618 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8014708:	bf00      	nop
 801470a:	3730      	adds	r7, #48	; 0x30
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}
 8014710:	08023a04 	.word	0x08023a04
 8014714:	08023a10 	.word	0x08023a10
 8014718:	08023a18 	.word	0x08023a18
 801471c:	08023a1c 	.word	0x08023a1c
 8014720:	08023a20 	.word	0x08023a20
 8014724:	08023a24 	.word	0x08023a24
 8014728:	08023a28 	.word	0x08023a28

0801472c <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
    return buffer_;
 8014734:	687b      	ldr	r3, [r7, #4]
}
 8014736:	4618      	mov	r0, r3
 8014738:	370c      	adds	r7, #12
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr

08014742 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8014742:	b480      	push	{r7}
 8014744:	b083      	sub	sp, #12
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
 801474a:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014752:	3304      	adds	r3, #4
 8014754:	683a      	ldr	r2, [r7, #0]
 8014756:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801475e:	3304      	adds	r3, #4
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014766:	d306      	bcc.n	8014776 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801476e:	3304      	adds	r3, #4
 8014770:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014774:	601a      	str	r2, [r3, #0]
}
 8014776:	bf00      	nop
 8014778:	370c      	adds	r7, #12
 801477a:	46bd      	mov	sp, r7
 801477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014780:	4770      	bx	lr

08014782 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8014782:	b480      	push	{r7}
 8014784:	b083      	sub	sp, #12
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014790:	3304      	adds	r3, #4
 8014792:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014796:	601a      	str	r2, [r3, #0]
}
 8014798:	bf00      	nop
 801479a:	370c      	adds	r7, #12
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr

080147a4 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 80147a4:	b480      	push	{r7}
 80147a6:	b083      	sub	sp, #12
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147ba:	3304      	adds	r3, #4
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	429a      	cmp	r2, r3
 80147c0:	bf2c      	ite	cs
 80147c2:	2301      	movcs	r3, #1
 80147c4:	2300      	movcc	r3, #0
 80147c6:	b2db      	uxtb	r3, r3
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr

080147d4 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2200      	movs	r2, #0
 80147e0:	601a      	str	r2, [r3, #0]
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2200      	movs	r2, #0
 80147e6:	711a      	strb	r2, [r3, #4]
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	3308      	adds	r3, #8
 80147ec:	4618      	mov	r0, r3
 80147ee:	f7ff fe8b 	bl	8014508 <_ZN18SimpleStringBufferC1Ev>
{
}
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4618      	mov	r0, r3
 80147f6:	3708      	adds	r7, #8
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}

080147fc <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80147fc:	b5b0      	push	{r4, r5, r7, lr}
 80147fe:	b086      	sub	sp, #24
 8014800:	af02      	add	r7, sp, #8
 8014802:	60f8      	str	r0, [r7, #12]
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
 8014808:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	f103 0408 	add.w	r4, r3, #8
 8014810:	687d      	ldr	r5, [r7, #4]
 8014812:	6a3b      	ldr	r3, [r7, #32]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	3314      	adds	r3, #20
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	6a38      	ldr	r0, [r7, #32]
 801481c:	4798      	blx	r3
 801481e:	4603      	mov	r3, r0
 8014820:	9301      	str	r3, [sp, #4]
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	9300      	str	r3, [sp, #0]
 8014826:	462b      	mov	r3, r5
 8014828:	68ba      	ldr	r2, [r7, #8]
 801482a:	4904      	ldr	r1, [pc, #16]	; (801483c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 801482c:	4620      	mov	r0, r4
 801482e:	f7ff fe97 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014832:	bf00      	nop
 8014834:	3710      	adds	r7, #16
 8014836:	46bd      	mov	sp, r7
 8014838:	bdb0      	pop	{r4, r5, r7, pc}
 801483a:	bf00      	nop
 801483c:	08023a2c 	.word	0x08023a2c

08014840 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8014840:	b5b0      	push	{r4, r5, r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af02      	add	r7, sp, #8
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
 801484c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	f103 0408 	add.w	r4, r3, #8
 8014854:	687d      	ldr	r5, [r7, #4]
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	3318      	adds	r3, #24
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	6838      	ldr	r0, [r7, #0]
 8014860:	4798      	blx	r3
 8014862:	4603      	mov	r3, r0
 8014864:	9300      	str	r3, [sp, #0]
 8014866:	462b      	mov	r3, r5
 8014868:	68ba      	ldr	r2, [r7, #8]
 801486a:	4904      	ldr	r1, [pc, #16]	; (801487c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 801486c:	4620      	mov	r0, r4
 801486e:	f7ff fe77 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014872:	bf00      	nop
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bdb0      	pop	{r4, r5, r7, pc}
 801487a:	bf00      	nop
 801487c:	08023a64 	.word	0x08023a64

08014880 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b082      	sub	sp, #8
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	3308      	adds	r3, #8
 801488c:	4903      	ldr	r1, [pc, #12]	; (801489c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff fe66 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014894:	bf00      	nop
 8014896:	3708      	adds	r7, #8
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}
 801489c:	08023a94 	.word	0x08023a94

080148a0 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2200      	movs	r2, #0
 80148ac:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2200      	movs	r2, #0
 80148b2:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 80148b4:	2367      	movs	r3, #103	; 0x67
 80148b6:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	f203 1311 	addw	r3, r3, #273	; 0x111
 80148be:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f103 0208 	add.w	r2, r3, #8
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80148cc:	4619      	mov	r1, r3
 80148ce:	4610      	mov	r0, r2
 80148d0:	f7ff ff37 	bl	8014742 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 80148d4:	bf00      	nop
 80148d6:	3710      	adds	r7, #16
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 80148dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148de:	b089      	sub	sp, #36	; 0x24
 80148e0:	af04      	add	r7, sp, #16
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d102      	bne.n	80148f4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 80148ee:	68f8      	ldr	r0, [r7, #12]
 80148f0:	f000 f882 	bl	80149f8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	1c5a      	adds	r2, r3, #1
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	f103 0508 	add.w	r5, r3, #8
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014916:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	695a      	ldr	r2, [r3, #20]
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	695b      	ldr	r3, [r3, #20]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	3314      	adds	r3, #20
 8014924:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014926:	4610      	mov	r0, r2
 8014928:	4798      	blx	r3
 801492a:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8014930:	9303      	str	r3, [sp, #12]
 8014932:	9202      	str	r2, [sp, #8]
 8014934:	683a      	ldr	r2, [r7, #0]
 8014936:	9201      	str	r2, [sp, #4]
 8014938:	9400      	str	r4, [sp, #0]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	4632      	mov	r2, r6
 801493e:	4915      	ldr	r1, [pc, #84]	; (8014994 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8014940:	4628      	mov	r0, r5
 8014942:	f7ff fe0d 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	f103 0008 	add.w	r0, r3, #8
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	6899      	ldr	r1, [r3, #8]
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	461a      	mov	r2, r3
 8014956:	f7ff fe53 	bl	8014600 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	695a      	ldr	r2, [r3, #20]
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	695b      	ldr	r3, [r3, #20]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	3314      	adds	r3, #20
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	4610      	mov	r0, r2
 801496a:	4798      	blx	r3
 801496c:	4603      	mov	r3, r0
 801496e:	490a      	ldr	r1, [pc, #40]	; (8014998 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8014970:	4618      	mov	r0, r3
 8014972:	f7f6 f887 	bl	800aa84 <_ZN12SimpleString6StrCmpEPKcS1_>
 8014976:	4603      	mov	r3, r0
 8014978:	2b00      	cmp	r3, #0
 801497a:	bf0c      	ite	eq
 801497c:	2301      	moveq	r3, #1
 801497e:	2300      	movne	r3, #0
 8014980:	b2db      	uxtb	r3, r3
 8014982:	2b00      	cmp	r3, #0
 8014984:	d002      	beq.n	801498c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2201      	movs	r2, #1
 801498a:	711a      	strb	r2, [r3, #4]
}
 801498c:	bf00      	nop
 801498e:	3714      	adds	r7, #20
 8014990:	46bd      	mov	sp, r7
 8014992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014994:	08023ab4 	.word	0x08023ab4
 8014998:	08023b14 	.word	0x08023b14

0801499c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d103      	bne.n	80149b4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7ff ff67 	bl	8014880 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 80149b2:	e01e      	b.n	80149f2 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	3308      	adds	r3, #8
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7ff fef3 	bl	80147a4 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 80149be:	4603      	mov	r3, r0
 80149c0:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	3308      	adds	r3, #8
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7ff fedb 	bl	8014782 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 80149cc:	7bfb      	ldrb	r3, [r7, #15]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d002      	beq.n	80149d8 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f000 f820 	bl	8014a18 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	4619      	mov	r1, r3
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	f000 f82a 	bl	8014a38 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	791b      	ldrb	r3, [r3, #4]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d002      	beq.n	80149f2 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 f839 	bl	8014a64 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 80149f2:	3710      	adds	r7, #16
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}

080149f8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	3308      	adds	r3, #8
 8014a04:	4903      	ldr	r1, [pc, #12]	; (8014a14 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7ff fdaa 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014a0c:	bf00      	nop
 8014a0e:	3708      	adds	r7, #8
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	08023b1c 	.word	0x08023b1c

08014a18 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	3308      	adds	r3, #8
 8014a24:	4903      	ldr	r1, [pc, #12]	; (8014a34 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7ff fd9a 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014a2c:	bf00      	nop
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	08023b34 	.word	0x08023b34

08014a38 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f103 0008 	add.w	r0, r3, #8
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	4a04      	ldr	r2, [pc, #16]	; (8014a5c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8014a4c:	4904      	ldr	r1, [pc, #16]	; (8014a60 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8014a4e:	f7ff fd87 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014a52:	bf00      	nop
 8014a54:	3708      	adds	r7, #8
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	08023b7c 	.word	0x08023b7c
 8014a60:	08023b94 	.word	0x08023b94

08014a64 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	3308      	adds	r3, #8
 8014a70:	4903      	ldr	r1, [pc, #12]	; (8014a80 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7ff fd74 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8014a78:	bf00      	nop
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	08023b9c 	.word	0x08023b9c

08014a84 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b08a      	sub	sp, #40	; 0x28
 8014a88:	af06      	add	r7, sp, #24
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
 8014a90:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8014a92:	f7f9 fe8d 	bl	800e7b0 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8014a96:	4602      	mov	r2, r0
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	9305      	str	r3, [sp, #20]
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	9304      	str	r3, [sp, #16]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	9303      	str	r3, [sp, #12]
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	9302      	str	r3, [sp, #8]
 8014aa8:	9201      	str	r2, [sp, #4]
 8014aaa:	2300      	movs	r3, #0
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	2300      	movs	r3, #0
 8014ab0:	4a04      	ldr	r2, [pc, #16]	; (8014ac4 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8014ab2:	4905      	ldr	r1, [pc, #20]	; (8014ac8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8014ab4:	68f8      	ldr	r0, [r7, #12]
 8014ab6:	f000 f855 	bl	8014b64 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8014aba:	bf00      	nop
 8014abc:	3710      	adds	r7, #16
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	080239f8 	.word	0x080239f8
 8014ac8:	08023cb0 	.word	0x08023cb0

08014acc <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014acc:	b590      	push	{r4, r7, lr}
 8014ace:	b08b      	sub	sp, #44	; 0x2c
 8014ad0:	af06      	add	r7, sp, #24
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
 8014ad8:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	68d8      	ldr	r0, [r3, #12]
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	691c      	ldr	r4, [r3, #16]
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	68ba      	ldr	r2, [r7, #8]
 8014ae8:	6952      	ldr	r2, [r2, #20]
 8014aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014aec:	9105      	str	r1, [sp, #20]
 8014aee:	6a39      	ldr	r1, [r7, #32]
 8014af0:	9104      	str	r1, [sp, #16]
 8014af2:	6839      	ldr	r1, [r7, #0]
 8014af4:	9103      	str	r1, [sp, #12]
 8014af6:	6879      	ldr	r1, [r7, #4]
 8014af8:	9102      	str	r1, [sp, #8]
 8014afa:	9201      	str	r2, [sp, #4]
 8014afc:	9300      	str	r3, [sp, #0]
 8014afe:	4623      	mov	r3, r4
 8014b00:	4602      	mov	r2, r0
 8014b02:	4904      	ldr	r1, [pc, #16]	; (8014b14 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8014b04:	68f8      	ldr	r0, [r7, #12]
 8014b06:	f000 f82d 	bl	8014b64 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8014b0a:	bf00      	nop
 8014b0c:	3714      	adds	r7, #20
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd90      	pop	{r4, r7, pc}
 8014b12:	bf00      	nop
 8014b14:	08023cd4 	.word	0x08023cd4

08014b18 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014b18:	b590      	push	{r4, r7, lr}
 8014b1a:	b08b      	sub	sp, #44	; 0x2c
 8014b1c:	af06      	add	r7, sp, #24
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	60b9      	str	r1, [r7, #8]
 8014b22:	607a      	str	r2, [r7, #4]
 8014b24:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	68d8      	ldr	r0, [r3, #12]
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	691c      	ldr	r4, [r3, #16]
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	68ba      	ldr	r2, [r7, #8]
 8014b34:	6952      	ldr	r2, [r2, #20]
 8014b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b38:	9105      	str	r1, [sp, #20]
 8014b3a:	6a39      	ldr	r1, [r7, #32]
 8014b3c:	9104      	str	r1, [sp, #16]
 8014b3e:	6839      	ldr	r1, [r7, #0]
 8014b40:	9103      	str	r1, [sp, #12]
 8014b42:	6879      	ldr	r1, [r7, #4]
 8014b44:	9102      	str	r1, [sp, #8]
 8014b46:	9201      	str	r2, [sp, #4]
 8014b48:	9300      	str	r3, [sp, #0]
 8014b4a:	4623      	mov	r3, r4
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	4904      	ldr	r1, [pc, #16]	; (8014b60 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8014b50:	68f8      	ldr	r0, [r7, #12]
 8014b52:	f000 f807 	bl	8014b64 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8014b56:	bf00      	nop
 8014b58:	3714      	adds	r7, #20
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd90      	pop	{r4, r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	08023cfc 	.word	0x08023cfc

08014b64 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8014b64:	b590      	push	{r4, r7, lr}
 8014b66:	b087      	sub	sp, #28
 8014b68:	af02      	add	r7, sp, #8
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	607a      	str	r2, [r7, #4]
 8014b70:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	3308      	adds	r3, #8
 8014b76:	68ba      	ldr	r2, [r7, #8]
 8014b78:	4910      	ldr	r1, [pc, #64]	; (8014bbc <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7ff fcf0 	bl	8014560 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8014b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b82:	9300      	str	r3, [sp, #0]
 8014b84:	6a3b      	ldr	r3, [r7, #32]
 8014b86:	683a      	ldr	r2, [r7, #0]
 8014b88:	6879      	ldr	r1, [r7, #4]
 8014b8a:	68f8      	ldr	r0, [r7, #12]
 8014b8c:	f7ff fe36 	bl	80147fc <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8014b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014b96:	68f8      	ldr	r0, [r7, #12]
 8014b98:	f7ff fe52 	bl	8014840 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8014b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	3308      	adds	r3, #8
 8014ba2:	681c      	ldr	r4, [r3, #0]
 8014ba4:	68f8      	ldr	r0, [r7, #12]
 8014ba6:	f000 f80b 	bl	8014bc0 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8014baa:	4603      	mov	r3, r0
 8014bac:	4619      	mov	r1, r3
 8014bae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014bb0:	47a0      	blx	r4
}
 8014bb2:	bf00      	nop
 8014bb4:	3714      	adds	r7, #20
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd90      	pop	{r4, r7, pc}
 8014bba:	bf00      	nop
 8014bbc:	08023d28 	.word	0x08023d28

08014bc0 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b082      	sub	sp, #8
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	3308      	adds	r3, #8
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7ff fdad 	bl	801472c <_ZN18SimpleStringBuffer8toStringEv>
 8014bd2:	4603      	mov	r3, r0
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3708      	adds	r7, #8
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}

08014bdc <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	3308      	adds	r3, #8
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7ff fca7 	bl	801453c <_ZN18SimpleStringBuffer5clearEv>
}
 8014bee:	bf00      	nop
 8014bf0:	3708      	adds	r7, #8
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}

08014bf6 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8014bf6:	b480      	push	{r7}
 8014bf8:	b085      	sub	sp, #20
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	60f8      	str	r0, [r7, #12]
 8014bfe:	60b9      	str	r1, [r7, #8]
 8014c00:	607a      	str	r2, [r7, #4]
 8014c02:	603b      	str	r3, [r7, #0]
    number_ = number;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	687a      	ldr	r2, [r7, #4]
 8014c08:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	68ba      	ldr	r2, [r7, #8]
 8014c0e:	609a      	str	r2, [r3, #8]
    size_ = size;
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	683a      	ldr	r2, [r7, #0]
 8014c14:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	69ba      	ldr	r2, [r7, #24]
 8014c1a:	615a      	str	r2, [r3, #20]
    period_ = period;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	7f3a      	ldrb	r2, [r7, #28]
 8014c20:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8014c28:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c2e:	60da      	str	r2, [r3, #12]
    line_ = line;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c34:	611a      	str	r2, [r3, #16]
}
 8014c36:	bf00      	nop
 8014c38:	3714      	adds	r7, #20
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c40:	4770      	bx	lr

08014c42 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014c42:	b480      	push	{r7}
 8014c44:	b085      	sub	sp, #20
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	60f8      	str	r0, [r7, #12]
 8014c4a:	60b9      	str	r1, [r7, #8]
 8014c4c:	4613      	mov	r3, r2
 8014c4e:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8014c50:	79fb      	ldrb	r3, [r7, #7]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d00b      	beq.n	8014c6e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	7e1b      	ldrb	r3, [r3, #24]
 8014c5a:	79fa      	ldrb	r2, [r7, #7]
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d006      	beq.n	8014c6e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	7e1b      	ldrb	r3, [r3, #24]
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d004      	beq.n	8014c72 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8014c68:	79fb      	ldrb	r3, [r7, #7]
 8014c6a:	2b02      	cmp	r3, #2
 8014c6c:	d101      	bne.n	8014c72 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8014c6e:	2301      	movs	r3, #1
 8014c70:	e000      	b.n	8014c74 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8014c72:	2300      	movs	r3, #0
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	3714      	adds	r7, #20
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7e:	4770      	bx	lr

08014c80 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8014c80:	b480      	push	{r7}
 8014c82:	b083      	sub	sp, #12
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
 8014c88:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681a      	ldr	r2, [r3, #0]
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	61da      	str	r2, [r3, #28]
    head_ = node;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	683a      	ldr	r2, [r7, #0]
 8014c96:	601a      	str	r2, [r3, #0]
}
 8014c98:	bf00      	nop
 8014c9a:	370c      	adds	r7, #12
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr

08014ca4 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b085      	sub	sp, #20
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d019      	beq.n	8014cf2 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	689b      	ldr	r3, [r3, #8]
 8014cc2:	683a      	ldr	r2, [r7, #0]
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d10e      	bne.n	8014ce6 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d005      	beq.n	8014cda <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	69da      	ldr	r2, [r3, #28]
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	61da      	str	r2, [r3, #28]
                return cur;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	e00c      	b.n	8014cf4 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	69da      	ldr	r2, [r3, #28]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	601a      	str	r2, [r3, #0]
                return cur;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	e006      	b.n	8014cf4 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	69db      	ldr	r3, [r3, #28]
 8014cee:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8014cf0:	e7e2      	b.n	8014cb8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8014cf2:	2300      	movs	r3, #0
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3714      	adds	r7, #20
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfe:	4770      	bx	lr

08014d00 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8014d00:	b480      	push	{r7}
 8014d02:	b085      	sub	sp, #20
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d00a      	beq.n	8014d2c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	689b      	ldr	r3, [r3, #8]
 8014d1a:	683a      	ldr	r2, [r7, #0]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d101      	bne.n	8014d24 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	e004      	b.n	8014d2e <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	69db      	ldr	r3, [r3, #28]
 8014d28:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8014d2a:	e7f1      	b.n	8014d10 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8014d2c:	2300      	movs	r3, #0
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr

08014d3a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014d3a:	b580      	push	{r7, lr}
 8014d3c:	b086      	sub	sp, #24
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	60f8      	str	r0, [r7, #12]
 8014d42:	60b9      	str	r1, [r7, #8]
 8014d44:	4613      	mov	r3, r2
 8014d46:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	617b      	str	r3, [r7, #20]
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d00e      	beq.n	8014d70 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8014d52:	79fb      	ldrb	r3, [r7, #7]
 8014d54:	461a      	mov	r2, r3
 8014d56:	6979      	ldr	r1, [r7, #20]
 8014d58:	68f8      	ldr	r0, [r7, #12]
 8014d5a:	f7ff ff72 	bl	8014c42 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d001      	beq.n	8014d68 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	e004      	b.n	8014d72 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	69db      	ldr	r3, [r3, #28]
 8014d6c:	617b      	str	r3, [r7, #20]
 8014d6e:	e7ed      	b.n	8014d4c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8014d70:	2300      	movs	r3, #0
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3718      	adds	r7, #24
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}

08014d7a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8014d7a:	b580      	push	{r7, lr}
 8014d7c:	b082      	sub	sp, #8
 8014d7e:	af00      	add	r7, sp, #0
 8014d80:	6078      	str	r0, [r7, #4]
 8014d82:	460b      	mov	r3, r1
 8014d84:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	78fa      	ldrb	r2, [r7, #3]
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7ff ffd3 	bl	8014d3a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014d94:	4603      	mov	r3, r0
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3708      	adds	r7, #8
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}

08014d9e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b084      	sub	sp, #16
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	60f8      	str	r0, [r7, #12]
 8014da6:	60b9      	str	r1, [r7, #8]
 8014da8:	4613      	mov	r3, r2
 8014daa:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	69db      	ldr	r3, [r3, #28]
 8014db0:	79fa      	ldrb	r2, [r7, #7]
 8014db2:	4619      	mov	r1, r3
 8014db4:	68f8      	ldr	r0, [r7, #12]
 8014db6:	f7ff ffc0 	bl	8014d3a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014dba:	4603      	mov	r3, r0
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3710      	adds	r7, #16
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}

08014dc4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b084      	sub	sp, #16
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	460b      	mov	r3, r1
 8014dce:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	60bb      	str	r3, [r7, #8]
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d00f      	beq.n	8014e00 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8014de0:	78fb      	ldrb	r3, [r7, #3]
 8014de2:	461a      	mov	r2, r3
 8014de4:	68b9      	ldr	r1, [r7, #8]
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f7ff ff2b 	bl	8014c42 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d002      	beq.n	8014df8 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	3301      	adds	r3, #1
 8014df6:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	69db      	ldr	r3, [r3, #28]
 8014dfc:	60bb      	str	r3, [r7, #8]
 8014dfe:	e7ec      	b.n	8014dda <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8014e00:	68fb      	ldr	r3, [r7, #12]
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3710      	adds	r7, #16
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}
	...

08014e0c <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8014e16:	6839      	ldr	r1, [r7, #0]
 8014e18:	4b09      	ldr	r3, [pc, #36]	; (8014e40 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8014e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8014e1e:	1aca      	subs	r2, r1, r3
 8014e20:	0852      	lsrs	r2, r2, #1
 8014e22:	4413      	add	r3, r2
 8014e24:	099a      	lsrs	r2, r3, #6
 8014e26:	4613      	mov	r3, r2
 8014e28:	00db      	lsls	r3, r3, #3
 8014e2a:	4413      	add	r3, r2
 8014e2c:	00db      	lsls	r3, r3, #3
 8014e2e:	4413      	add	r3, r2
 8014e30:	1aca      	subs	r2, r1, r3
 8014e32:	4613      	mov	r3, r2
}
 8014e34:	4618      	mov	r0, r3
 8014e36:	370c      	adds	r7, #12
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3e:	4770      	bx	lr
 8014e40:	c0e07039 	.word	0xc0e07039

08014e44 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b082      	sub	sp, #8
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	689b      	ldr	r3, [r3, #8]
 8014e52:	4619      	mov	r1, r3
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f7ff ffd9 	bl	8014e0c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	009b      	lsls	r3, r3, #2
 8014e5e:	687a      	ldr	r2, [r7, #4]
 8014e60:	4413      	add	r3, r2
 8014e62:	6839      	ldr	r1, [r7, #0]
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7ff ff0b 	bl	8014c80 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8014e6a:	bf00      	nop
 8014e6c:	3708      	adds	r7, #8
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}

08014e72 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8014e72:	b580      	push	{r7, lr}
 8014e74:	b082      	sub	sp, #8
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	6078      	str	r0, [r7, #4]
 8014e7a:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8014e7c:	6839      	ldr	r1, [r7, #0]
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f7ff ffc4 	bl	8014e0c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014e84:	4603      	mov	r3, r0
 8014e86:	009b      	lsls	r3, r3, #2
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	4413      	add	r3, r2
 8014e8c:	6839      	ldr	r1, [r7, #0]
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7ff ff08 	bl	8014ca4 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8014e94:	4603      	mov	r3, r0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3708      	adds	r7, #8
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b082      	sub	sp, #8
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
 8014ea6:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8014ea8:	6839      	ldr	r1, [r7, #0]
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7ff ffae 	bl	8014e0c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	009b      	lsls	r3, r3, #2
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	4413      	add	r3, r2
 8014eb8:	6839      	ldr	r1, [r7, #0]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7ff ff20 	bl	8014d00 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8014ec0:	4603      	mov	r3, r0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3708      	adds	r7, #8
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}

08014eca <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8014eca:	b580      	push	{r7, lr}
 8014ecc:	b084      	sub	sp, #16
 8014ece:	af00      	add	r7, sp, #0
 8014ed0:	6078      	str	r0, [r7, #4]
 8014ed2:	460b      	mov	r3, r1
 8014ed4:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8014eda:	2300      	movs	r3, #0
 8014edc:	60bb      	str	r3, [r7, #8]
 8014ede:	68bb      	ldr	r3, [r7, #8]
 8014ee0:	2b48      	cmp	r3, #72	; 0x48
 8014ee2:	dc10      	bgt.n	8014f06 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	009b      	lsls	r3, r3, #2
 8014ee8:	687a      	ldr	r2, [r7, #4]
 8014eea:	4413      	add	r3, r2
 8014eec:	78fa      	ldrb	r2, [r7, #3]
 8014eee:	4611      	mov	r1, r2
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7ff ff67 	bl	8014dc4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8014ef6:	4602      	mov	r2, r0
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	4413      	add	r3, r2
 8014efc:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8014efe:	68bb      	ldr	r3, [r7, #8]
 8014f00:	3301      	adds	r3, #1
 8014f02:	60bb      	str	r3, [r7, #8]
 8014f04:	e7eb      	b.n	8014ede <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8014f06:	68fb      	ldr	r3, [r7, #12]
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3710      	adds	r7, #16
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	460b      	mov	r3, r1
 8014f1a:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	60fb      	str	r3, [r7, #12]
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2b48      	cmp	r3, #72	; 0x48
 8014f24:	dc12      	bgt.n	8014f4c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	009b      	lsls	r3, r3, #2
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	78fa      	ldrb	r2, [r7, #3]
 8014f30:	4611      	mov	r1, r2
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7ff ff21 	bl	8014d7a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8014f38:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8014f3a:	68bb      	ldr	r3, [r7, #8]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d001      	beq.n	8014f44 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	e004      	b.n	8014f4e <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	3301      	adds	r3, #1
 8014f48:	60fb      	str	r3, [r7, #12]
 8014f4a:	e7e9      	b.n	8014f20 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8014f4c:	2300      	movs	r3, #0
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	3710      	adds	r7, #16
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd80      	pop	{r7, pc}

08014f56 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8014f56:	b580      	push	{r7, lr}
 8014f58:	b086      	sub	sp, #24
 8014f5a:	af00      	add	r7, sp, #0
 8014f5c:	60f8      	str	r0, [r7, #12]
 8014f5e:	60b9      	str	r1, [r7, #8]
 8014f60:	4613      	mov	r3, r2
 8014f62:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	689b      	ldr	r3, [r3, #8]
 8014f68:	4619      	mov	r1, r3
 8014f6a:	68f8      	ldr	r0, [r7, #12]
 8014f6c:	f7ff ff4e 	bl	8014e0c <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014f70:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8014f72:	697b      	ldr	r3, [r7, #20]
 8014f74:	009b      	lsls	r3, r3, #2
 8014f76:	68fa      	ldr	r2, [r7, #12]
 8014f78:	4413      	add	r3, r2
 8014f7a:	79fa      	ldrb	r2, [r7, #7]
 8014f7c:	68b9      	ldr	r1, [r7, #8]
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7ff ff0d 	bl	8014d9e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014f84:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d001      	beq.n	8014f90 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	e019      	b.n	8014fc4 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	3301      	adds	r3, #1
 8014f94:	617b      	str	r3, [r7, #20]
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	2b48      	cmp	r3, #72	; 0x48
 8014f9a:	d812      	bhi.n	8014fc2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	009b      	lsls	r3, r3, #2
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	4413      	add	r3, r2
 8014fa4:	79fa      	ldrb	r2, [r7, #7]
 8014fa6:	4611      	mov	r1, r2
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7ff fee6 	bl	8014d7a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8014fae:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8014fb0:	693b      	ldr	r3, [r7, #16]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d001      	beq.n	8014fba <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	e004      	b.n	8014fc4 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	617b      	str	r3, [r7, #20]
 8014fc0:	e7e9      	b.n	8014f96 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8014fc2:	2300      	movs	r3, #0
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	3718      	adds	r7, #24
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8014fcc:	b5b0      	push	{r4, r5, r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2448      	movs	r4, #72	; 0x48
 8014fd8:	461d      	mov	r5, r3
 8014fda:	2c00      	cmp	r4, #0
 8014fdc:	db05      	blt.n	8014fea <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8014fde:	4628      	mov	r0, r5
 8014fe0:	f7ff fa84 	bl	80144ec <_ZN22MemoryLeakDetectorListC1Ev>
 8014fe4:	3504      	adds	r5, #4
 8014fe6:	3c01      	subs	r4, #1
 8014fe8:	e7f7      	b.n	8014fda <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	4618      	mov	r0, r3
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bdb0      	pop	{r4, r5, r7, pc}

08014ff4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8014ff4:	b590      	push	{r4, r7, lr}
 8014ff6:	b083      	sub	sp, #12
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
 8014ffe:	4a1d      	ldr	r2, [pc, #116]	; (8015074 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	601a      	str	r2, [r3, #0]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	330c      	adds	r3, #12
 8015008:	4618      	mov	r0, r3
 801500a:	f7ff fbe3 	bl	80147d4 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015014:	331c      	adds	r3, #28
 8015016:	4618      	mov	r0, r3
 8015018:	f7ff ffd8 	bl	8014fcc <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015022:	2201      	movs	r2, #1
 8015024:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801502c:	3304      	adds	r3, #4
 801502e:	2201      	movs	r2, #1
 8015030:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2201      	movs	r2, #1
 8015036:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801503e:	3308      	adds	r3, #8
 8015040:	2200      	movs	r2, #0
 8015042:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	683a      	ldr	r2, [r7, #0]
 8015048:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 801504a:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 801504e:	490a      	ldr	r1, [pc, #40]	; (8015078 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8015050:	2004      	movs	r0, #4
 8015052:	f7f3 fb17 	bl	8008684 <_ZnwjPKci>
 8015056:	4604      	mov	r4, r0
 8015058:	4620      	mov	r0, r4
 801505a:	f7f5 fbe7 	bl	800a82c <_ZN11SimpleMutexC1Ev>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015064:	330c      	adds	r3, #12
 8015066:	601c      	str	r4, [r3, #0]
}
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	4618      	mov	r0, r3
 801506c:	370c      	adds	r7, #12
 801506e:	46bd      	mov	sp, r7
 8015070:	bd90      	pop	{r4, r7, pc}
 8015072:	bf00      	nop
 8015074:	08026098 	.word	0x08026098
 8015078:	08023d2c 	.word	0x08023d2c

0801507c <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 801507c:	b590      	push	{r4, r7, lr}
 801507e:	b083      	sub	sp, #12
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	4a0e      	ldr	r2, [pc, #56]	; (80150c0 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015090:	330c      	adds	r3, #12
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d00d      	beq.n	80150b4 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801509e:	330c      	adds	r3, #12
 80150a0:	681c      	ldr	r4, [r3, #0]
 80150a2:	2c00      	cmp	r4, #0
 80150a4:	d006      	beq.n	80150b4 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 80150a6:	4620      	mov	r0, r4
 80150a8:	f7f5 fbd2 	bl	800a850 <_ZN11SimpleMutexD1Ev>
 80150ac:	2104      	movs	r1, #4
 80150ae:	4620      	mov	r0, r4
 80150b0:	f7f3 fafc 	bl	80086ac <_ZdlPvj>
    }
}
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	4618      	mov	r0, r3
 80150b8:	370c      	adds	r7, #12
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd90      	pop	{r4, r7, pc}
 80150be:	bf00      	nop
 80150c0:	08026098 	.word	0x08026098

080150c4 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b082      	sub	sp, #8
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
}
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f7ff ffd5 	bl	801507c <_ZN18MemoryLeakDetectorD1Ev>
 80150d2:	f241 1150 	movw	r1, #4432	; 0x1150
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f7f3 fae8 	bl	80086ac <_ZdlPvj>
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	4618      	mov	r0, r3
 80150e0:	3708      	adds	r7, #8
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 80150e6:	b580      	push	{r7, lr}
 80150e8:	b082      	sub	sp, #8
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	330c      	adds	r3, #12
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7ff fd72 	bl	8014bdc <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2203      	movs	r2, #3
 80150fc:	721a      	strb	r2, [r3, #8]
}
 80150fe:	bf00      	nop
 8015100:	3708      	adds	r7, #8
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}

08015106 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8015106:	b480      	push	{r7}
 8015108:	b083      	sub	sp, #12
 801510a:	af00      	add	r7, sp, #0
 801510c:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2202      	movs	r2, #2
 8015112:	721a      	strb	r2, [r3, #8]
}
 8015114:	bf00      	nop
 8015116:	370c      	adds	r7, #12
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr

08015120 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8015120:	b480      	push	{r7}
 8015122:	b083      	sub	sp, #12
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2202      	movs	r2, #2
 801512c:	721a      	strb	r2, [r3, #8]
}
 801512e:	bf00      	nop
 8015130:	370c      	adds	r7, #12
 8015132:	46bd      	mov	sp, r7
 8015134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015138:	4770      	bx	lr

0801513a <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 801513a:	b480      	push	{r7}
 801513c:	b083      	sub	sp, #12
 801513e:	af00      	add	r7, sp, #0
 8015140:	6078      	str	r0, [r7, #4]
    return mutex_;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015148:	330c      	adds	r3, #12
 801514a:	681b      	ldr	r3, [r3, #0]
}
 801514c:	4618      	mov	r0, r3
 801514e:	370c      	adds	r7, #12
 8015150:	46bd      	mov	sp, r7
 8015152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015156:	4770      	bx	lr

08015158 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8015158:	b480      	push	{r7}
 801515a:	b083      	sub	sp, #12
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f023 0303 	bic.w	r3, r3, #3
 8015166:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8015168:	4618      	mov	r0, r3
 801516a:	370c      	adds	r7, #12
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr

08015174 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	3303      	adds	r3, #3
 8015182:	4618      	mov	r0, r3
 8015184:	f7ff ffe8 	bl	8015158 <_ZL31calculateVoidPointerAlignedSizej>
 8015188:	4603      	mov	r3, r0
}
 801518a:	4618      	mov	r0, r3
 801518c:	3708      	adds	r7, #8
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}

08015192 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8015192:	b580      	push	{r7, lr}
 8015194:	b084      	sub	sp, #16
 8015196:	af00      	add	r7, sp, #0
 8015198:	60f8      	str	r0, [r7, #12]
 801519a:	60b9      	str	r1, [r7, #8]
 801519c:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801519e:	6879      	ldr	r1, [r7, #4]
 80151a0:	68f8      	ldr	r0, [r7, #12]
 80151a2:	f7ff ffe7 	bl	8015174 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80151a6:	4602      	mov	r2, r0
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	4413      	add	r3, r2
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	3710      	adds	r7, #16
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b08a      	sub	sp, #40	; 0x28
 80151b8:	af06      	add	r7, sp, #24
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	60b9      	str	r1, [r7, #8]
 80151be:	607a      	str	r2, [r7, #4]
 80151c0:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80151c8:	3304      	adds	r3, #4
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	1c51      	adds	r1, r2, #1
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80151d4:	3304      	adds	r3, #4
 80151d6:	6019      	str	r1, [r3, #0]
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	7a19      	ldrb	r1, [r3, #8]
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80151e2:	3308      	adds	r3, #8
 80151e4:	781b      	ldrb	r3, [r3, #0]
 80151e6:	6a38      	ldr	r0, [r7, #32]
 80151e8:	9004      	str	r0, [sp, #16]
 80151ea:	69f8      	ldr	r0, [r7, #28]
 80151ec:	9003      	str	r0, [sp, #12]
 80151ee:	9302      	str	r3, [sp, #8]
 80151f0:	9101      	str	r1, [sp, #4]
 80151f2:	69bb      	ldr	r3, [r7, #24]
 80151f4:	9300      	str	r3, [sp, #0]
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	6879      	ldr	r1, [r7, #4]
 80151fa:	68b8      	ldr	r0, [r7, #8]
 80151fc:	f7ff fcfb 	bl	8014bf6 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	689a      	ldr	r2, [r3, #8]
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	4413      	add	r3, r2
 801520a:	4619      	mov	r1, r3
 801520c:	68f8      	ldr	r0, [r7, #12]
 801520e:	f000 f861 	bl	80152d4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015218:	331c      	adds	r3, #28
 801521a:	68b9      	ldr	r1, [r7, #8]
 801521c:	4618      	mov	r0, r3
 801521e:	f7ff fe11 	bl	8014e44 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8015222:	bf00      	nop
 8015224:	3710      	adds	r7, #16
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}

0801522a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801522a:	b580      	push	{r7, lr}
 801522c:	b08a      	sub	sp, #40	; 0x28
 801522e:	af04      	add	r7, sp, #16
 8015230:	60f8      	str	r0, [r7, #12]
 8015232:	60b9      	str	r1, [r7, #8]
 8015234:	607a      	str	r2, [r7, #4]
 8015236:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8015238:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801523c:	9302      	str	r3, [sp, #8]
 801523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015240:	9301      	str	r3, [sp, #4]
 8015242:	6a3b      	ldr	r3, [r7, #32]
 8015244:	9300      	str	r3, [sp, #0]
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	687a      	ldr	r2, [r7, #4]
 801524a:	68b9      	ldr	r1, [r7, #8]
 801524c:	68f8      	ldr	r0, [r7, #12]
 801524e:	f000 f96f 	bl	8015530 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8015252:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8015254:	697b      	ldr	r3, [r7, #20]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d101      	bne.n	801525e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 801525a:	2300      	movs	r3, #0
 801525c:	e017      	b.n	801528e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 801525e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015262:	9300      	str	r3, [sp, #0]
 8015264:	697b      	ldr	r3, [r7, #20]
 8015266:	683a      	ldr	r2, [r7, #0]
 8015268:	68b9      	ldr	r1, [r7, #8]
 801526a:	68f8      	ldr	r0, [r7, #12]
 801526c:	f000 f98a 	bl	8015584 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8015270:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8015272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015274:	9302      	str	r3, [sp, #8]
 8015276:	6a3b      	ldr	r3, [r7, #32]
 8015278:	9301      	str	r3, [sp, #4]
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	9300      	str	r3, [sp, #0]
 801527e:	683b      	ldr	r3, [r7, #0]
 8015280:	697a      	ldr	r2, [r7, #20]
 8015282:	6939      	ldr	r1, [r7, #16]
 8015284:	68f8      	ldr	r0, [r7, #12]
 8015286:	f7ff ff95 	bl	80151b4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	689b      	ldr	r3, [r3, #8]
}
 801528e:	4618      	mov	r0, r3
 8015290:	3718      	adds	r7, #24
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
	...

08015298 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b084      	sub	sp, #16
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80152a8:	331c      	adds	r3, #28
 80152aa:	6839      	ldr	r1, [r7, #0]
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7ff fdf6 	bl	8014e9e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 80152b2:	60f8      	str	r0, [r7, #12]
  if (node)
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d006      	beq.n	80152c8 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 80152ba:	4b05      	ldr	r3, [pc, #20]	; (80152d0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	6812      	ldr	r2, [r2, #0]
 80152c2:	21cd      	movs	r1, #205	; 0xcd
 80152c4:	6838      	ldr	r0, [r7, #0]
 80152c6:	4798      	blx	r3
#endif
}
 80152c8:	bf00      	nop
 80152ca:	3710      	adds	r7, #16
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	200000d8 	.word	0x200000d8

080152d4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80152de:	2300      	movs	r3, #0
 80152e0:	60fb      	str	r3, [r7, #12]
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2b02      	cmp	r3, #2
 80152e6:	d812      	bhi.n	801530e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 80152e8:	68f9      	ldr	r1, [r7, #12]
 80152ea:	4b0c      	ldr	r3, [pc, #48]	; (801531c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 80152ec:	fba3 2301 	umull	r2, r3, r3, r1
 80152f0:	085a      	lsrs	r2, r3, #1
 80152f2:	4613      	mov	r3, r2
 80152f4:	005b      	lsls	r3, r3, #1
 80152f6:	4413      	add	r3, r2
 80152f8:	1aca      	subs	r2, r1, r3
 80152fa:	6839      	ldr	r1, [r7, #0]
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	440b      	add	r3, r1
 8015300:	4907      	ldr	r1, [pc, #28]	; (8015320 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8015302:	5c8a      	ldrb	r2, [r1, r2]
 8015304:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	3301      	adds	r3, #1
 801530a:	60fb      	str	r3, [r7, #12]
 801530c:	e7e9      	b.n	80152e2 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 801530e:	bf00      	nop
 8015310:	3714      	adds	r7, #20
 8015312:	46bd      	mov	sp, r7
 8015314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	aaaaaaab 	.word	0xaaaaaaab
 8015320:	0802608c 	.word	0x0802608c

08015324 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8015324:	b480      	push	{r7}
 8015326:	b085      	sub	sp, #20
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801532e:	2300      	movs	r3, #0
 8015330:	60fb      	str	r3, [r7, #12]
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b02      	cmp	r3, #2
 8015336:	d816      	bhi.n	8015366 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8015338:	683a      	ldr	r2, [r7, #0]
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	4413      	add	r3, r2
 801533e:	7818      	ldrb	r0, [r3, #0]
 8015340:	68f9      	ldr	r1, [r7, #12]
 8015342:	4b0c      	ldr	r3, [pc, #48]	; (8015374 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8015344:	fba3 2301 	umull	r2, r3, r3, r1
 8015348:	085a      	lsrs	r2, r3, #1
 801534a:	4613      	mov	r3, r2
 801534c:	005b      	lsls	r3, r3, #1
 801534e:	4413      	add	r3, r2
 8015350:	1aca      	subs	r2, r1, r3
 8015352:	4b09      	ldr	r3, [pc, #36]	; (8015378 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8015354:	5c9b      	ldrb	r3, [r3, r2]
 8015356:	4298      	cmp	r0, r3
 8015358:	d001      	beq.n	801535e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 801535a:	2300      	movs	r3, #0
 801535c:	e004      	b.n	8015368 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	3301      	adds	r3, #1
 8015362:	60fb      	str	r3, [r7, #12]
 8015364:	e7e5      	b.n	8015332 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8015366:	2301      	movs	r3, #1
}
 8015368:	4618      	mov	r0, r3
 801536a:	3714      	adds	r7, #20
 801536c:	46bd      	mov	sp, r7
 801536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015372:	4770      	bx	lr
 8015374:	aaaaaaab 	.word	0xaaaaaaab
 8015378:	0802608c 	.word	0x0802608c

0801537c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	60b9      	str	r1, [r7, #8]
 8015386:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8015388:	68ba      	ldr	r2, [r7, #8]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	429a      	cmp	r2, r3
 801538e:	d101      	bne.n	8015394 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8015390:	2301      	movs	r3, #1
 8015392:	e013      	b.n	80153bc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	f083 0301 	eor.w	r3, r3, #1
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d001      	beq.n	80153aa <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 80153a6:	2301      	movs	r3, #1
 80153a8:	e008      	b.n	80153bc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	331c      	adds	r3, #28
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	68b9      	ldr	r1, [r7, #8]
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	4798      	blx	r3
 80153b8:	4603      	mov	r3, r0
 80153ba:	bf00      	nop
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3710      	adds	r7, #16
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}

080153c4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 80153c4:	b590      	push	{r4, r7, lr}
 80153c6:	b087      	sub	sp, #28
 80153c8:	af02      	add	r7, sp, #8
 80153ca:	60f8      	str	r0, [r7, #12]
 80153cc:	60b9      	str	r1, [r7, #8]
 80153ce:	607a      	str	r2, [r7, #4]
 80153d0:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	695a      	ldr	r2, [r3, #20]
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	695b      	ldr	r3, [r3, #20]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	3328      	adds	r3, #40	; 0x28
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	4610      	mov	r0, r2
 80153e2:	4798      	blx	r3
 80153e4:	4604      	mov	r4, r0
 80153e6:	6a3b      	ldr	r3, [r7, #32]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	3328      	adds	r3, #40	; 0x28
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	6a38      	ldr	r0, [r7, #32]
 80153f0:	4798      	blx	r3
 80153f2:	4603      	mov	r3, r0
 80153f4:	461a      	mov	r2, r3
 80153f6:	4621      	mov	r1, r4
 80153f8:	68f8      	ldr	r0, [r7, #12]
 80153fa:	f7ff ffbf 	bl	801537c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 80153fe:	4603      	mov	r3, r0
 8015400:	f083 0301 	eor.w	r3, r3, #1
 8015404:	b2db      	uxtb	r3, r3
 8015406:	2b00      	cmp	r3, #0
 8015408:	d014      	beq.n	8015434 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	f103 040c 	add.w	r4, r3, #12
 8015410:	6a3b      	ldr	r3, [r7, #32]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	3328      	adds	r3, #40	; 0x28
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	6a38      	ldr	r0, [r7, #32]
 801541a:	4798      	blx	r3
 801541c:	4602      	mov	r2, r0
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	9301      	str	r3, [sp, #4]
 8015424:	9200      	str	r2, [sp, #0]
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	687a      	ldr	r2, [r7, #4]
 801542a:	68b9      	ldr	r1, [r7, #8]
 801542c:	4620      	mov	r0, r4
 801542e:	f7ff fb4d 	bl	8014acc <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8015432:	e02e      	b.n	8015492 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	689a      	ldr	r2, [r3, #8]
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	4413      	add	r3, r2
 801543e:	4619      	mov	r1, r3
 8015440:	68f8      	ldr	r0, [r7, #12]
 8015442:	f7ff ff6f 	bl	8015324 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8015446:	4603      	mov	r3, r0
 8015448:	f083 0301 	eor.w	r3, r3, #1
 801544c:	b2db      	uxtb	r3, r3
 801544e:	2b00      	cmp	r3, #0
 8015450:	d014      	beq.n	801547c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	f103 040c 	add.w	r4, r3, #12
 8015458:	6a3b      	ldr	r3, [r7, #32]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	3328      	adds	r3, #40	; 0x28
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	6a38      	ldr	r0, [r7, #32]
 8015462:	4798      	blx	r3
 8015464:	4602      	mov	r2, r0
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	9301      	str	r3, [sp, #4]
 801546c:	9200      	str	r2, [sp, #0]
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	68b9      	ldr	r1, [r7, #8]
 8015474:	4620      	mov	r0, r4
 8015476:	f7ff fb4f 	bl	8014b18 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 801547a:	e00a      	b.n	8015492 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 801547c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015480:	2b00      	cmp	r3, #0
 8015482:	d006      	beq.n	8015492 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8015484:	6a3b      	ldr	r3, [r7, #32]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	3324      	adds	r3, #36	; 0x24
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	68b9      	ldr	r1, [r7, #8]
 801548e:	6a38      	ldr	r0, [r7, #32]
 8015490:	4798      	blx	r3
}
 8015492:	bf00      	nop
 8015494:	3714      	adds	r7, #20
 8015496:	46bd      	mov	sp, r7
 8015498:	bd90      	pop	{r4, r7, pc}
	...

0801549c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b086      	sub	sp, #24
 80154a0:	af02      	add	r7, sp, #8
 80154a2:	60f8      	str	r0, [r7, #12]
 80154a4:	60b9      	str	r1, [r7, #8]
 80154a6:	607a      	str	r2, [r7, #4]
 80154a8:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 80154aa:	4b08      	ldr	r3, [pc, #32]	; (80154cc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 80154ac:	681a      	ldr	r2, [r3, #0]
 80154ae:	78fb      	ldrb	r3, [r7, #3]
 80154b0:	9301      	str	r3, [sp, #4]
 80154b2:	2300      	movs	r3, #0
 80154b4:	9300      	str	r3, [sp, #0]
 80154b6:	4613      	mov	r3, r2
 80154b8:	687a      	ldr	r2, [r7, #4]
 80154ba:	68b9      	ldr	r1, [r7, #8]
 80154bc:	68f8      	ldr	r0, [r7, #12]
 80154be:	f000 f87f 	bl	80155c0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80154c2:	4603      	mov	r3, r0
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3710      	adds	r7, #16
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}
 80154cc:	20000100 	.word	0x20000100

080154d0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80154d0:	b590      	push	{r4, r7, lr}
 80154d2:	b085      	sub	sp, #20
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	607a      	str	r2, [r7, #4]
 80154dc:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 80154de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d00e      	beq.n	8015504 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	3308      	adds	r3, #8
 80154ec:	681c      	ldr	r4, [r3, #0]
 80154ee:	6879      	ldr	r1, [r7, #4]
 80154f0:	68f8      	ldr	r0, [r7, #12]
 80154f2:	f7ff fe3f 	bl	8015174 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80154f6:	4601      	mov	r1, r0
 80154f8:	6a3b      	ldr	r3, [r7, #32]
 80154fa:	683a      	ldr	r2, [r7, #0]
 80154fc:	68b8      	ldr	r0, [r7, #8]
 80154fe:	47a0      	blx	r4
 8015500:	4603      	mov	r3, r0
 8015502:	e010      	b.n	8015526 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	3308      	adds	r3, #8
 801550a:	681c      	ldr	r4, [r3, #0]
 801550c:	6879      	ldr	r1, [r7, #4]
 801550e:	68f8      	ldr	r0, [r7, #12]
 8015510:	f7ff fe30 	bl	8015174 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015514:	4603      	mov	r3, r0
 8015516:	f103 0120 	add.w	r1, r3, #32
 801551a:	6a3b      	ldr	r3, [r7, #32]
 801551c:	683a      	ldr	r2, [r7, #0]
 801551e:	68b8      	ldr	r0, [r7, #8]
 8015520:	47a0      	blx	r4
 8015522:	4603      	mov	r3, r0
 8015524:	bf00      	nop
}
 8015526:	4618      	mov	r0, r3
 8015528:	3714      	adds	r7, #20
 801552a:	46bd      	mov	sp, r7
 801552c:	bd90      	pop	{r4, r7, pc}
	...

08015530 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8015530:	b590      	push	{r4, r7, lr}
 8015532:	b085      	sub	sp, #20
 8015534:	af00      	add	r7, sp, #0
 8015536:	60f8      	str	r0, [r7, #12]
 8015538:	60b9      	str	r1, [r7, #8]
 801553a:	607a      	str	r2, [r7, #4]
 801553c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 801553e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015542:	2b00      	cmp	r3, #0
 8015544:	d00b      	beq.n	801555e <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8015546:	4b0e      	ldr	r3, [pc, #56]	; (8015580 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015548:	681c      	ldr	r4, [r3, #0]
 801554a:	6839      	ldr	r1, [r7, #0]
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f7ff fe11 	bl	8015174 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015552:	4603      	mov	r3, r0
 8015554:	4619      	mov	r1, r3
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	47a0      	blx	r4
 801555a:	4603      	mov	r3, r0
 801555c:	e00c      	b.n	8015578 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 801555e:	4b08      	ldr	r3, [pc, #32]	; (8015580 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015560:	681c      	ldr	r4, [r3, #0]
 8015562:	6839      	ldr	r1, [r7, #0]
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f7ff fe05 	bl	8015174 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801556a:	4603      	mov	r3, r0
 801556c:	3320      	adds	r3, #32
 801556e:	4619      	mov	r1, r3
 8015570:	6878      	ldr	r0, [r7, #4]
 8015572:	47a0      	blx	r4
 8015574:	4603      	mov	r3, r0
 8015576:	bf00      	nop
}
 8015578:	4618      	mov	r0, r3
 801557a:	3714      	adds	r7, #20
 801557c:	46bd      	mov	sp, r7
 801557e:	bd90      	pop	{r4, r7, pc}
 8015580:	200000cc 	.word	0x200000cc

08015584 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	60f8      	str	r0, [r7, #12]
 801558c:	60b9      	str	r1, [r7, #8]
 801558e:	607a      	str	r2, [r7, #4]
 8015590:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8015592:	7e3b      	ldrb	r3, [r7, #24]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d008      	beq.n	80155aa <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	3320      	adds	r3, #32
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	2120      	movs	r1, #32
 80155a2:	68b8      	ldr	r0, [r7, #8]
 80155a4:	4798      	blx	r3
 80155a6:	4603      	mov	r3, r0
 80155a8:	e006      	b.n	80155b8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 80155aa:	687a      	ldr	r2, [r7, #4]
 80155ac:	6839      	ldr	r1, [r7, #0]
 80155ae:	68f8      	ldr	r0, [r7, #12]
 80155b0:	f7ff fdef 	bl	8015192 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 80155b4:	4603      	mov	r3, r0
 80155b6:	bf00      	nop
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3710      	adds	r7, #16
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b08a      	sub	sp, #40	; 0x28
 80155c4:	af04      	add	r7, sp, #16
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	60b9      	str	r1, [r7, #8]
 80155ca:	607a      	str	r2, [r7, #4]
 80155cc:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 80155ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80155d2:	9301      	str	r3, [sp, #4]
 80155d4:	6a3b      	ldr	r3, [r7, #32]
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	687a      	ldr	r2, [r7, #4]
 80155dc:	68b9      	ldr	r1, [r7, #8]
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	f7ff ff76 	bl	80154d0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 80155e4:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d101      	bne.n	80155f0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 80155ec:	2300      	movs	r3, #0
 80155ee:	e017      	b.n	8015620 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 80155f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80155f4:	9300      	str	r3, [sp, #0]
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	68b9      	ldr	r1, [r7, #8]
 80155fc:	68f8      	ldr	r0, [r7, #12]
 80155fe:	f7ff ffc1 	bl	8015584 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8015602:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8015604:	6a3b      	ldr	r3, [r7, #32]
 8015606:	9302      	str	r3, [sp, #8]
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	9301      	str	r3, [sp, #4]
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	9300      	str	r3, [sp, #0]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	697a      	ldr	r2, [r7, #20]
 8015614:	6939      	ldr	r1, [r7, #16]
 8015616:	68f8      	ldr	r0, [r7, #12]
 8015618:	f7ff fdcc 	bl	80151b4 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	689b      	ldr	r3, [r3, #8]
}
 8015620:	4618      	mov	r0, r3
 8015622:	3718      	adds	r7, #24
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}

08015628 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015628:	b590      	push	{r4, r7, lr}
 801562a:	b089      	sub	sp, #36	; 0x24
 801562c:	af02      	add	r7, sp, #8
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
 8015634:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d03a      	beq.n	80156b2 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015642:	331c      	adds	r3, #28
 8015644:	6879      	ldr	r1, [r7, #4]
 8015646:	4618      	mov	r0, r3
 8015648:	f7ff fc13 	bl	8014e72 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 801564c:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d10b      	bne.n	801566c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	f103 000c 	add.w	r0, r3, #12
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	9300      	str	r3, [sp, #0]
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015664:	6839      	ldr	r1, [r7, #0]
 8015666:	f7ff fa0d 	bl	8014a84 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 801566a:	e023      	b.n	80156b4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 801566c:	68b8      	ldr	r0, [r7, #8]
 801566e:	f7f8 ff95 	bl	800e59c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8015672:	4603      	mov	r3, r0
 8015674:	f083 0301 	eor.w	r3, r3, #1
 8015678:	b2db      	uxtb	r3, r3
 801567a:	2b00      	cmp	r3, #0
 801567c:	d01a      	beq.n	80156b4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8015684:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015688:	9301      	str	r3, [sp, #4]
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	9300      	str	r3, [sp, #0]
 801568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015690:	683a      	ldr	r2, [r7, #0]
 8015692:	6979      	ldr	r1, [r7, #20]
 8015694:	68f8      	ldr	r0, [r7, #12]
 8015696:	f7ff fe95 	bl	80153c4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	330c      	adds	r3, #12
 80156a0:	681c      	ldr	r4, [r3, #0]
 80156a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	693a      	ldr	r2, [r7, #16]
 80156aa:	6879      	ldr	r1, [r7, #4]
 80156ac:	68b8      	ldr	r0, [r7, #8]
 80156ae:	47a0      	blx	r4
 80156b0:	e000      	b.n	80156b4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 80156b2:	bf00      	nop
    }
}
 80156b4:	371c      	adds	r7, #28
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd90      	pop	{r4, r7, pc}
	...

080156bc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b086      	sub	sp, #24
 80156c0:	af02      	add	r7, sp, #8
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
 80156c8:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 80156ca:	4b08      	ldr	r3, [pc, #32]	; (80156ec <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 80156cc:	681a      	ldr	r2, [r3, #0]
 80156ce:	78fb      	ldrb	r3, [r7, #3]
 80156d0:	9301      	str	r3, [sp, #4]
 80156d2:	2300      	movs	r3, #0
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	4613      	mov	r3, r2
 80156d8:	687a      	ldr	r2, [r7, #4]
 80156da:	68b9      	ldr	r1, [r7, #8]
 80156dc:	68f8      	ldr	r0, [r7, #12]
 80156de:	f7ff ffa3 	bl	8015628 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80156e2:	bf00      	nop
 80156e4:	3710      	adds	r7, #16
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	20000100 	.word	0x20000100

080156f0 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b08a      	sub	sp, #40	; 0x28
 80156f4:	af04      	add	r7, sp, #16
 80156f6:	60f8      	str	r0, [r7, #12]
 80156f8:	60b9      	str	r1, [r7, #8]
 80156fa:	607a      	str	r2, [r7, #4]
 80156fc:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d023      	beq.n	801574c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801570a:	331c      	adds	r3, #28
 801570c:	6879      	ldr	r1, [r7, #4]
 801570e:	4618      	mov	r0, r3
 8015710:	f7ff fbaf 	bl	8014e72 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8015714:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d10c      	bne.n	8015736 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	f103 000c 	add.w	r0, r3, #12
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	9300      	str	r3, [sp, #0]
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801572c:	6a39      	ldr	r1, [r7, #32]
 801572e:	f7ff f9a9 	bl	8014a84 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8015732:	2300      	movs	r3, #0
 8015734:	e019      	b.n	801576a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8015736:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801573a:	9301      	str	r3, [sp, #4]
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	9300      	str	r3, [sp, #0]
 8015740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015742:	6a3a      	ldr	r2, [r7, #32]
 8015744:	6979      	ldr	r1, [r7, #20]
 8015746:	68f8      	ldr	r0, [r7, #12]
 8015748:	f7ff fe3c 	bl	80153c4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 801574c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015750:	9302      	str	r3, [sp, #8]
 8015752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015754:	9301      	str	r3, [sp, #4]
 8015756:	6a3b      	ldr	r3, [r7, #32]
 8015758:	9300      	str	r3, [sp, #0]
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	68b9      	ldr	r1, [r7, #8]
 8015760:	68f8      	ldr	r0, [r7, #12]
 8015762:	f7ff fd62 	bl	801522a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8015766:	4603      	mov	r3, r0
 8015768:	bf00      	nop
}
 801576a:	4618      	mov	r0, r3
 801576c:	3718      	adds	r7, #24
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}

08015772 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8015772:	b580      	push	{r7, lr}
 8015774:	b084      	sub	sp, #16
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
 801577a:	460b      	mov	r3, r1
 801577c:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015784:	331c      	adds	r3, #28
 8015786:	78fa      	ldrb	r2, [r7, #3]
 8015788:	4611      	mov	r1, r2
 801578a:	4618      	mov	r0, r3
 801578c:	f7ff fbc0 	bl	8014f10 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8015790:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	330c      	adds	r3, #12
 8015796:	4618      	mov	r0, r3
 8015798:	f7ff f882 	bl	80148a0 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d010      	beq.n	80157c4 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	330c      	adds	r3, #12
 80157a6:	68f9      	ldr	r1, [r7, #12]
 80157a8:	4618      	mov	r0, r3
 80157aa:	f7ff f897 	bl	80148dc <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80157b4:	331c      	adds	r3, #28
 80157b6:	78fa      	ldrb	r2, [r7, #3]
 80157b8:	68f9      	ldr	r1, [r7, #12]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7ff fbcb 	bl	8014f56 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80157c0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80157c2:	e7eb      	b.n	801579c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	330c      	adds	r3, #12
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7ff f8e7 	bl	801499c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 80157ce:	bf00      	nop
 80157d0:	3710      	adds	r7, #16
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}

080157d6 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 80157d6:	b580      	push	{r7, lr}
 80157d8:	b082      	sub	sp, #8
 80157da:	af00      	add	r7, sp, #0
 80157dc:	6078      	str	r0, [r7, #4]
 80157de:	460b      	mov	r3, r1
 80157e0:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 80157e2:	78fb      	ldrb	r3, [r7, #3]
 80157e4:	4619      	mov	r1, r3
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f7ff ffc3 	bl	8015772 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	330c      	adds	r3, #12
 80157f0:	4618      	mov	r0, r3
 80157f2:	f7ff f9e5 	bl	8014bc0 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80157f6:	4603      	mov	r3, r0
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3708      	adds	r7, #8
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}

08015800 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b084      	sub	sp, #16
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801580e:	331c      	adds	r3, #28
 8015810:	2103      	movs	r1, #3
 8015812:	4618      	mov	r0, r3
 8015814:	f7ff fb7c 	bl	8014f10 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8015818:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d011      	beq.n	8015844 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	7e1b      	ldrb	r3, [r3, #24]
 8015824:	2b03      	cmp	r3, #3
 8015826:	d102      	bne.n	801582e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	2202      	movs	r2, #2
 801582c:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015834:	331c      	adds	r3, #28
 8015836:	2203      	movs	r2, #3
 8015838:	68f9      	ldr	r1, [r7, #12]
 801583a:	4618      	mov	r0, r3
 801583c:	f7ff fb8b 	bl	8014f56 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015840:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8015842:	e7ea      	b.n	801581a <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8015844:	bf00      	nop
 8015846:	3710      	adds	r7, #16
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	460b      	mov	r3, r1
 8015856:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801585e:	331c      	adds	r3, #28
 8015860:	78fa      	ldrb	r2, [r7, #3]
 8015862:	4611      	mov	r1, r2
 8015864:	4618      	mov	r0, r3
 8015866:	f7ff fb30 	bl	8014eca <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 801586a:	4603      	mov	r3, r0
}
 801586c:	4618      	mov	r0, r3
 801586e:	3708      	adds	r7, #8
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	60f8      	str	r0, [r7, #12]
 801587c:	60b9      	str	r1, [r7, #8]
 801587e:	607a      	str	r2, [r7, #4]
 8015880:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	68b9      	ldr	r1, [r7, #8]
 8015886:	4618      	mov	r0, r3
 8015888:	f7f5 fb13 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	3308      	adds	r3, #8
 8015890:	6879      	ldr	r1, [r7, #4]
 8015892:	4618      	mov	r0, r3
 8015894:	f7f5 fb0d 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	683a      	ldr	r2, [r7, #0]
 801589c:	611a      	str	r2, [r3, #16]
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	2200      	movs	r2, #0
 80158a2:	615a      	str	r2, [r3, #20]
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	4618      	mov	r0, r3
 80158a8:	3710      	adds	r7, #16
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}

080158ae <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 80158ae:	b480      	push	{r7}
 80158b0:	b083      	sub	sp, #12
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
 80158b6:	6039      	str	r1, [r7, #0]
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	4618      	mov	r0, r3
 80158bc:	370c      	adds	r7, #12
 80158be:	46bd      	mov	sp, r7
 80158c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c4:	4770      	bx	lr

080158c6 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 80158c6:	b480      	push	{r7}
 80158c8:	b083      	sub	sp, #12
 80158ca:	af00      	add	r7, sp, #0
 80158cc:	6078      	str	r0, [r7, #4]
 80158ce:	6039      	str	r1, [r7, #0]
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	4618      	mov	r0, r3
 80158d4:	370c      	adds	r7, #12
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr

080158de <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 80158de:	b480      	push	{r7}
 80158e0:	b085      	sub	sp, #20
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	60f8      	str	r0, [r7, #12]
 80158e6:	60b9      	str	r1, [r7, #8]
 80158e8:	4613      	mov	r3, r2
 80158ea:	71fb      	strb	r3, [r7, #7]
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	4618      	mov	r0, r3
 80158f0:	3714      	adds	r7, #20
 80158f2:	46bd      	mov	sp, r7
 80158f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f8:	4770      	bx	lr

080158fa <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80158fa:	b480      	push	{r7}
 80158fc:	b085      	sub	sp, #20
 80158fe:	af00      	add	r7, sp, #0
 8015900:	60f8      	str	r0, [r7, #12]
 8015902:	60b9      	str	r1, [r7, #8]
 8015904:	607a      	str	r2, [r7, #4]
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	4618      	mov	r0, r3
 801590a:	3714      	adds	r7, #20
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8015914:	b480      	push	{r7}
 8015916:	b085      	sub	sp, #20
 8015918:	af00      	add	r7, sp, #0
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	4618      	mov	r0, r3
 8015924:	3714      	adds	r7, #20
 8015926:	46bd      	mov	sp, r7
 8015928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592c:	4770      	bx	lr

0801592e <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801592e:	b480      	push	{r7}
 8015930:	b085      	sub	sp, #20
 8015932:	af00      	add	r7, sp, #0
 8015934:	60f8      	str	r0, [r7, #12]
 8015936:	60b9      	str	r1, [r7, #8]
 8015938:	607a      	str	r2, [r7, #4]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	4618      	mov	r0, r3
 801593e:	3714      	adds	r7, #20
 8015940:	46bd      	mov	sp, r7
 8015942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015946:	4770      	bx	lr

08015948 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8015948:	b480      	push	{r7}
 801594a:	b085      	sub	sp, #20
 801594c:	af00      	add	r7, sp, #0
 801594e:	60f8      	str	r0, [r7, #12]
 8015950:	60b9      	str	r1, [r7, #8]
 8015952:	607a      	str	r2, [r7, #4]
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	4618      	mov	r0, r3
 8015958:	3714      	adds	r7, #20
 801595a:	46bd      	mov	sp, r7
 801595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015960:	4770      	bx	lr

08015962 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8015962:	b480      	push	{r7}
 8015964:	b085      	sub	sp, #20
 8015966:	af00      	add	r7, sp, #0
 8015968:	60f8      	str	r0, [r7, #12]
 801596a:	60b9      	str	r1, [r7, #8]
 801596c:	4639      	mov	r1, r7
 801596e:	e881 000c 	stmia.w	r1, {r2, r3}
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	4618      	mov	r0, r3
 8015976:	3714      	adds	r7, #20
 8015978:	46bd      	mov	sp, r7
 801597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597e:	4770      	bx	lr

08015980 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8015980:	b480      	push	{r7}
 8015982:	b085      	sub	sp, #20
 8015984:	af00      	add	r7, sp, #0
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	4639      	mov	r1, r7
 801598c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	4618      	mov	r0, r3
 8015994:	3714      	adds	r7, #20
 8015996:	46bd      	mov	sp, r7
 8015998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599c:	4770      	bx	lr

0801599e <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801599e:	b480      	push	{r7}
 80159a0:	b085      	sub	sp, #20
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	60f8      	str	r0, [r7, #12]
 80159a6:	60b9      	str	r1, [r7, #8]
 80159a8:	ed87 0b00 	vstr	d0, [r7]
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	4618      	mov	r0, r3
 80159b0:	3714      	adds	r7, #20
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr

080159ba <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 80159ba:	b480      	push	{r7}
 80159bc:	b085      	sub	sp, #20
 80159be:	af00      	add	r7, sp, #0
 80159c0:	60f8      	str	r0, [r7, #12]
 80159c2:	60b9      	str	r1, [r7, #8]
 80159c4:	607a      	str	r2, [r7, #4]
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	4618      	mov	r0, r3
 80159ca:	3714      	adds	r7, #20
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr

080159d4 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80159d4:	b480      	push	{r7}
 80159d6:	b085      	sub	sp, #20
 80159d8:	af00      	add	r7, sp, #0
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	607a      	str	r2, [r7, #4]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	4618      	mov	r0, r3
 80159e4:	3714      	adds	r7, #20
 80159e6:	46bd      	mov	sp, r7
 80159e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ec:	4770      	bx	lr

080159ee <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80159ee:	b480      	push	{r7}
 80159f0:	b085      	sub	sp, #20
 80159f2:	af00      	add	r7, sp, #0
 80159f4:	60f8      	str	r0, [r7, #12]
 80159f6:	60b9      	str	r1, [r7, #8]
 80159f8:	607a      	str	r2, [r7, #4]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	4618      	mov	r0, r3
 80159fe:	3714      	adds	r7, #20
 8015a00:	46bd      	mov	sp, r7
 8015a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a06:	4770      	bx	lr

08015a08 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8015a08:	b480      	push	{r7}
 8015a0a:	b085      	sub	sp, #20
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	60f8      	str	r0, [r7, #12]
 8015a10:	60b9      	str	r1, [r7, #8]
 8015a12:	607a      	str	r2, [r7, #4]
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	4618      	mov	r0, r3
 8015a18:	3714      	adds	r7, #20
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a20:	4770      	bx	lr

08015a22 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8015a22:	b480      	push	{r7}
 8015a24:	b085      	sub	sp, #20
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	60f8      	str	r0, [r7, #12]
 8015a2a:	60b9      	str	r1, [r7, #8]
 8015a2c:	607a      	str	r2, [r7, #4]
 8015a2e:	603b      	str	r3, [r7, #0]
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	4618      	mov	r0, r3
 8015a34:	3714      	adds	r7, #20
 8015a36:	46bd      	mov	sp, r7
 8015a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3c:	4770      	bx	lr

08015a3e <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8015a3e:	b480      	push	{r7}
 8015a40:	b085      	sub	sp, #20
 8015a42:	af00      	add	r7, sp, #0
 8015a44:	60f8      	str	r0, [r7, #12]
 8015a46:	60b9      	str	r1, [r7, #8]
 8015a48:	607a      	str	r2, [r7, #4]
 8015a4a:	603b      	str	r3, [r7, #0]
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	3714      	adds	r7, #20
 8015a52:	46bd      	mov	sp, r7
 8015a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a58:	4770      	bx	lr

08015a5a <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8015a5a:	b480      	push	{r7}
 8015a5c:	b085      	sub	sp, #20
 8015a5e:	af00      	add	r7, sp, #0
 8015a60:	60f8      	str	r0, [r7, #12]
 8015a62:	60b9      	str	r1, [r7, #8]
 8015a64:	607a      	str	r2, [r7, #4]
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3714      	adds	r7, #20
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8015a74:	b480      	push	{r7}
 8015a76:	b085      	sub	sp, #20
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	60f8      	str	r0, [r7, #12]
 8015a7c:	60b9      	str	r1, [r7, #8]
 8015a7e:	607a      	str	r2, [r7, #4]
 8015a80:	603b      	str	r3, [r7, #0]
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	4618      	mov	r0, r3
 8015a86:	3714      	adds	r7, #20
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8e:	4770      	bx	lr

08015a90 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8015a90:	b480      	push	{r7}
 8015a92:	b083      	sub	sp, #12
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	2300      	movs	r3, #0
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	370c      	adds	r7, #12
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa4:	4770      	bx	lr
	...

08015aa8 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b084      	sub	sp, #16
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6039      	str	r1, [r7, #0]
 8015ab2:	f107 0308 	add.w	r3, r7, #8
 8015ab6:	4909      	ldr	r1, [pc, #36]	; (8015adc <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7f5 f9a6 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8015abe:	f107 0308 	add.w	r3, r7, #8
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f005 fec5 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 8015aca:	f107 0308 	add.w	r3, r7, #8
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7f5 fd53 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	3710      	adds	r7, #16
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	08023d4c 	.word	0x08023d4c

08015ae0 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8015ae0:	b480      	push	{r7}
 8015ae2:	b083      	sub	sp, #12
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	460b      	mov	r3, r1
 8015aea:	70fb      	strb	r3, [r7, #3]
 8015aec:	78fb      	ldrb	r3, [r7, #3]
 8015aee:	4618      	mov	r0, r3
 8015af0:	370c      	adds	r7, #12
 8015af2:	46bd      	mov	sp, r7
 8015af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af8:	4770      	bx	lr

08015afa <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8015afa:	b480      	push	{r7}
 8015afc:	b083      	sub	sp, #12
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	6078      	str	r0, [r7, #4]
 8015b02:	2300      	movs	r3, #0
 8015b04:	4618      	mov	r0, r3
 8015b06:	370c      	adds	r7, #12
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0e:	4770      	bx	lr

08015b10 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8015b10:	b480      	push	{r7}
 8015b12:	b083      	sub	sp, #12
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	2300      	movs	r3, #0
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	370c      	adds	r7, #12
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b24:	4770      	bx	lr

08015b26 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8015b26:	b480      	push	{r7}
 8015b28:	b083      	sub	sp, #12
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
 8015b2e:	6039      	str	r1, [r7, #0]
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	4618      	mov	r0, r3
 8015b34:	370c      	adds	r7, #12
 8015b36:	46bd      	mov	sp, r7
 8015b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3c:	4770      	bx	lr

08015b3e <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8015b3e:	b480      	push	{r7}
 8015b40:	b083      	sub	sp, #12
 8015b42:	af00      	add	r7, sp, #0
 8015b44:	6078      	str	r0, [r7, #4]
 8015b46:	2300      	movs	r3, #0
 8015b48:	4618      	mov	r0, r3
 8015b4a:	370c      	adds	r7, #12
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b52:	4770      	bx	lr

08015b54 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
 8015b5c:	6039      	str	r1, [r7, #0]
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	4618      	mov	r0, r3
 8015b62:	370c      	adds	r7, #12
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr

08015b6c <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8015b6c:	b480      	push	{r7}
 8015b6e:	b083      	sub	sp, #12
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	2300      	movs	r3, #0
 8015b76:	4618      	mov	r0, r3
 8015b78:	370c      	adds	r7, #12
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b80:	4770      	bx	lr

08015b82 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8015b82:	b480      	push	{r7}
 8015b84:	b083      	sub	sp, #12
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
 8015b8a:	6039      	str	r1, [r7, #0]
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	4618      	mov	r0, r3
 8015b90:	370c      	adds	r7, #12
 8015b92:	46bd      	mov	sp, r7
 8015b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b98:	4770      	bx	lr

08015b9a <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b082      	sub	sp, #8
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	6078      	str	r0, [r7, #4]
 8015ba2:	6039      	str	r1, [r7, #0]
 8015ba4:	2100      	movs	r1, #0
 8015ba6:	6878      	ldr	r0, [r7, #4]
 8015ba8:	f7f3 f972 	bl	8008e90 <_ZN18cpputest_ulonglongC1Ei>
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	3708      	adds	r7, #8
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}

08015bb4 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8015bb4:	b480      	push	{r7}
 8015bb6:	b085      	sub	sp, #20
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	60f8      	str	r0, [r7, #12]
 8015bbc:	60b9      	str	r1, [r7, #8]
 8015bbe:	4639      	mov	r1, r7
 8015bc0:	e881 000c 	stmia.w	r1, {r2, r3}
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	463b      	mov	r3, r7
 8015bca:	cb03      	ldmia	r3!, {r0, r1}
 8015bcc:	6010      	str	r0, [r2, #0]
 8015bce:	6051      	str	r1, [r2, #4]
 8015bd0:	68f8      	ldr	r0, [r7, #12]
 8015bd2:	3714      	adds	r7, #20
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bda:	4770      	bx	lr

08015bdc <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b082      	sub	sp, #8
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	6039      	str	r1, [r7, #0]
 8015be6:	2100      	movs	r1, #0
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f7f3 f945 	bl	8008e78 <_ZN17cpputest_longlongC1Ei>
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	3708      	adds	r7, #8
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}

08015bf6 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8015bf6:	b480      	push	{r7}
 8015bf8:	b085      	sub	sp, #20
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	60f8      	str	r0, [r7, #12]
 8015bfe:	60b9      	str	r1, [r7, #8]
 8015c00:	4639      	mov	r1, r7
 8015c02:	e881 000c 	stmia.w	r1, {r2, r3}
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	461a      	mov	r2, r3
 8015c0a:	463b      	mov	r3, r7
 8015c0c:	cb03      	ldmia	r3!, {r0, r1}
 8015c0e:	6010      	str	r0, [r2, #0]
 8015c10:	6051      	str	r1, [r2, #4]
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	3714      	adds	r7, #20
 8015c16:	46bd      	mov	sp, r7
 8015c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1c:	4770      	bx	lr

08015c1e <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8015c1e:	b480      	push	{r7}
 8015c20:	b083      	sub	sp, #12
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
 8015c26:	2300      	movs	r3, #0
 8015c28:	4618      	mov	r0, r3
 8015c2a:	370c      	adds	r7, #12
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c32:	4770      	bx	lr

08015c34 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8015c34:	b480      	push	{r7}
 8015c36:	b083      	sub	sp, #12
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	6039      	str	r1, [r7, #0]
 8015c3e:	683b      	ldr	r3, [r7, #0]
 8015c40:	4618      	mov	r0, r3
 8015c42:	370c      	adds	r7, #12
 8015c44:	46bd      	mov	sp, r7
 8015c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4a:	4770      	bx	lr

08015c4c <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8015c4c:	b480      	push	{r7}
 8015c4e:	b083      	sub	sp, #12
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	f04f 0200 	mov.w	r2, #0
 8015c58:	f04f 0300 	mov.w	r3, #0
 8015c5c:	ec43 2b17 	vmov	d7, r2, r3
 8015c60:	eeb0 0a47 	vmov.f32	s0, s14
 8015c64:	eef0 0a67 	vmov.f32	s1, s15
 8015c68:	370c      	adds	r7, #12
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c70:	4770      	bx	lr

08015c72 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8015c72:	b480      	push	{r7}
 8015c74:	b085      	sub	sp, #20
 8015c76:	af00      	add	r7, sp, #0
 8015c78:	60f8      	str	r0, [r7, #12]
 8015c7a:	ed87 0b00 	vstr	d0, [r7]
 8015c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c82:	ec43 2b17 	vmov	d7, r2, r3
 8015c86:	eeb0 0a47 	vmov.f32	s0, s14
 8015c8a:	eef0 0a67 	vmov.f32	s1, s15
 8015c8e:	3714      	adds	r7, #20
 8015c90:	46bd      	mov	sp, r7
 8015c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c96:	4770      	bx	lr

08015c98 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8015c98:	b480      	push	{r7}
 8015c9a:	b083      	sub	sp, #12
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
 8015ca0:	4b03      	ldr	r3, [pc, #12]	; (8015cb0 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	370c      	adds	r7, #12
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cac:	4770      	bx	lr
 8015cae:	bf00      	nop
 8015cb0:	08023d4c 	.word	0x08023d4c

08015cb4 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8015cb4:	b480      	push	{r7}
 8015cb6:	b083      	sub	sp, #12
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	6039      	str	r1, [r7, #0]
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	370c      	adds	r7, #12
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr

08015ccc <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8015ccc:	b480      	push	{r7}
 8015cce:	b083      	sub	sp, #12
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	370c      	adds	r7, #12
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce0:	4770      	bx	lr

08015ce2 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8015ce2:	b480      	push	{r7}
 8015ce4:	b083      	sub	sp, #12
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	6078      	str	r0, [r7, #4]
 8015cea:	6039      	str	r1, [r7, #0]
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	4618      	mov	r0, r3
 8015cf0:	370c      	adds	r7, #12
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf8:	4770      	bx	lr

08015cfa <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8015cfa:	b480      	push	{r7}
 8015cfc:	b083      	sub	sp, #12
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6078      	str	r0, [r7, #4]
 8015d02:	2300      	movs	r3, #0
 8015d04:	4618      	mov	r0, r3
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0e:	4770      	bx	lr

08015d10 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8015d10:	b480      	push	{r7}
 8015d12:	b083      	sub	sp, #12
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	370c      	adds	r7, #12
 8015d20:	46bd      	mov	sp, r7
 8015d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d26:	4770      	bx	lr

08015d28 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8015d28:	b480      	push	{r7}
 8015d2a:	b083      	sub	sp, #12
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
 8015d30:	2300      	movs	r3, #0
 8015d32:	4618      	mov	r0, r3
 8015d34:	370c      	adds	r7, #12
 8015d36:	46bd      	mov	sp, r7
 8015d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3c:	4770      	bx	lr

08015d3e <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8015d3e:	b480      	push	{r7}
 8015d40:	b083      	sub	sp, #12
 8015d42:	af00      	add	r7, sp, #0
 8015d44:	6078      	str	r0, [r7, #4]
 8015d46:	6039      	str	r1, [r7, #0]
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	370c      	adds	r7, #12
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d54:	4770      	bx	lr

08015d56 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8015d56:	b480      	push	{r7}
 8015d58:	b083      	sub	sp, #12
 8015d5a:	af00      	add	r7, sp, #0
 8015d5c:	6078      	str	r0, [r7, #4]
 8015d5e:	6039      	str	r1, [r7, #0]
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	4618      	mov	r0, r3
 8015d64:	370c      	adds	r7, #12
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr
	...

08015d70 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8015d70:	b480      	push	{r7}
 8015d72:	b083      	sub	sp, #12
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	4a04      	ldr	r2, [pc, #16]	; (8015d8c <_ZN14MockActualCallC1Ev+0x1c>)
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	601a      	str	r2, [r3, #0]
{
}
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	4618      	mov	r0, r3
 8015d82:	370c      	adds	r7, #12
 8015d84:	46bd      	mov	sp, r7
 8015d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8a:	4770      	bx	lr
 8015d8c:	08026490 	.word	0x08026490

08015d90 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8015d90:	b480      	push	{r7}
 8015d92:	b083      	sub	sp, #12
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
 8015d98:	4a04      	ldr	r2, [pc, #16]	; (8015dac <_ZN14MockActualCallD1Ev+0x1c>)
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	601a      	str	r2, [r3, #0]
{
}
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	4618      	mov	r0, r3
 8015da2:	370c      	adds	r7, #12
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr
 8015dac:	08026490 	.word	0x08026490

08015db0 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b082      	sub	sp, #8
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
 8015db8:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	3304      	adds	r3, #4
 8015dbe:	6839      	ldr	r1, [r7, #0]
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f7f5 f88e 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
}
 8015dc6:	bf00      	nop
 8015dc8:	3708      	adds	r7, #8
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}

08015dce <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8015dce:	b580      	push	{r7, lr}
 8015dd0:	b082      	sub	sp, #8
 8015dd2:	af00      	add	r7, sp, #0
 8015dd4:	6078      	str	r0, [r7, #4]
 8015dd6:	6039      	str	r1, [r7, #0]
    return functionName_;
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	3304      	adds	r3, #4
 8015ddc:	4619      	mov	r1, r3
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f7f5 f867 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	3708      	adds	r7, #8
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b084      	sub	sp, #16
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	60f8      	str	r0, [r7, #12]
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
 8015df8:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7ff ffb7 	bl	8015d70 <_ZN14MockActualCallC1Ev>
 8015e02:	4a17      	ldr	r2, [pc, #92]	; (8015e60 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	601a      	str	r2, [r3, #0]
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	4915      	ldr	r1, [pc, #84]	; (8015e64 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7f4 fffb 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	68ba      	ldr	r2, [r7, #8]
 8015e18:	60da      	str	r2, [r3, #12]
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	611a      	str	r2, [r3, #16]
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	2202      	movs	r2, #2
 8015e24:	751a      	strb	r2, [r3, #20]
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	755a      	strb	r2, [r3, #21]
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	619a      	str	r2, [r3, #24]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	331c      	adds	r3, #28
 8015e36:	4618      	mov	r0, r3
 8015e38:	f004 f814 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	683a      	ldr	r2, [r7, #0]
 8015e40:	625a      	str	r2, [r3, #36]	; 0x24
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	2200      	movs	r2, #0
 8015e46:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	331c      	adds	r3, #28
 8015e4c:	6839      	ldr	r1, [r7, #0]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f004 f986 	bl	801a160 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	4618      	mov	r0, r3
 8015e58:	3710      	adds	r7, #16
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}
 8015e5e:	bf00      	nop
 8015e60:	08026390 	.word	0x08026390
 8015e64:	08023d4c 	.word	0x08023d4c

08015e68 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	4a0c      	ldr	r2, [pc, #48]	; (8015ea4 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f001 fae4 	bl	8017444 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	331c      	adds	r3, #28
 8015e80:	4618      	mov	r0, r3
 8015e82:	f004 f803 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	3304      	adds	r3, #4
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7f5 fb75 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7ff ff7c 	bl	8015d90 <_ZN14MockActualCallD1Ev>
}
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3708      	adds	r7, #8
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}
 8015ea2:	bf00      	nop
 8015ea4:	08026390 	.word	0x08026390

08015ea8 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b082      	sub	sp, #8
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
}
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f7ff ffd9 	bl	8015e68 <_ZN21MockCheckedActualCallD1Ev>
 8015eb6:	212c      	movs	r1, #44	; 0x2c
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f7f2 fbf7 	bl	80086ac <_ZdlPvj>
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8015ec8:	b480      	push	{r7}
 8015eca:	b083      	sub	sp, #12
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	683a      	ldr	r2, [r7, #0]
 8015ed6:	611a      	str	r2, [r3, #16]
}
 8015ed8:	bf00      	nop
 8015eda:	370c      	adds	r7, #12
 8015edc:	46bd      	mov	sp, r7
 8015ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee2:	4770      	bx	lr

08015ee4 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b082      	sub	sp, #8
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	691a      	ldr	r2, [r3, #16]
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	691b      	ldr	r3, [r3, #16]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	330c      	adds	r3, #12
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	4610      	mov	r0, r2
 8015efc:	4798      	blx	r3
 8015efe:	4603      	mov	r3, r0
}
 8015f00:	4618      	mov	r0, r3
 8015f02:	3708      	adds	r7, #8
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	33c0      	adds	r3, #192	; 0xc0
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	4798      	blx	r3
 8015f1e:	4603      	mov	r3, r0
 8015f20:	f083 0301 	eor.w	r3, r3, #1
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d010      	beq.n	8015f4c <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	33ec      	adds	r3, #236	; 0xec
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	2101      	movs	r1, #1
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	4798      	blx	r3
        reporter_->failTest(failure);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	691a      	ldr	r2, [r3, #16]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	691b      	ldr	r3, [r3, #16]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	3308      	adds	r3, #8
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	6839      	ldr	r1, [r7, #0]
 8015f48:	4610      	mov	r0, r2
 8015f4a:	4798      	blx	r3
    }
}
 8015f4c:	bf00      	nop
 8015f4e:	3708      	adds	r7, #8
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8015f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f58:	b0bc      	sub	sp, #240	; 0xf0
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	6078      	str	r0, [r7, #4]
 8015f5e:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015f68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	f000 80f5 	beq.w	801615c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	339c      	adds	r3, #156	; 0x9c
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015f7e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8015f82:	6839      	ldr	r1, [r7, #0]
 8015f84:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8015f86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f006 fa6c 	bl	801c468 <_ZNK14MockNamedValue9getCopierEv>
 8015f90:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8015f94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d013      	beq.n	8015fc4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8015f9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	3308      	adds	r3, #8
 8015fa4:	681c      	ldr	r4, [r3, #0]
 8015fa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015faa:	691d      	ldr	r5, [r3, #16]
 8015fac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f006 fa29 	bl	801c408 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	461a      	mov	r2, r3
 8015fba:	4629      	mov	r1, r5
 8015fbc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015fc0:	47a0      	blx	r4
 8015fc2:	e0c0      	b.n	8016146 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8015fc4:	2500      	movs	r5, #0
 8015fc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015fca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015fce:	4611      	mov	r1, r2
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f005 ff0c 	bl	801bdee <_ZNK14MockNamedValue7getTypeEv>
 8015fd6:	2601      	movs	r6, #1
 8015fd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015fdc:	4962      	ldr	r1, [pc, #392]	; (8016168 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f7f4 ff13 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8015fe4:	f04f 0801 	mov.w	r8, #1
 8015fe8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8015fec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015ff0:	4611      	mov	r1, r2
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7f5 facd 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d015      	beq.n	801602a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8015ffe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016002:	f103 0408 	add.w	r4, r3, #8
 8016006:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801600a:	4958      	ldr	r1, [pc, #352]	; (801616c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 801600c:	4618      	mov	r0, r3
 801600e:	f7f4 fefc 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8016012:	2501      	movs	r5, #1
 8016014:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016018:	4619      	mov	r1, r3
 801601a:	4620      	mov	r0, r4
 801601c:	f7f5 fab9 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8016020:	4603      	mov	r3, r0
 8016022:	2b00      	cmp	r3, #0
 8016024:	d001      	beq.n	801602a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8016026:	2401      	movs	r4, #1
 8016028:	e000      	b.n	801602c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 801602a:	2400      	movs	r4, #0
 801602c:	2d00      	cmp	r5, #0
 801602e:	d004      	beq.n	801603a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8016030:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016034:	4618      	mov	r0, r3
 8016036:	f7f5 faa0 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801603a:	f1b8 0f00 	cmp.w	r8, #0
 801603e:	d004      	beq.n	801604a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8016040:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8016044:	4618      	mov	r0, r3
 8016046:	f7f5 fa98 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801604a:	2e00      	cmp	r6, #0
 801604c:	d004      	beq.n	8016058 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 801604e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016052:	4618      	mov	r0, r3
 8016054:	f7f5 fa91 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8016058:	2c00      	cmp	r4, #0
 801605a:	d018      	beq.n	801608e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 801605c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016060:	4618      	mov	r0, r3
 8016062:	f006 f959 	bl	801c318 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8016066:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 801606a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801606e:	4618      	mov	r0, r3
 8016070:	f006 f9e2 	bl	801c438 <_ZNK14MockNamedValue7getSizeEv>
 8016074:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8016078:	4b3d      	ldr	r3, [pc, #244]	; (8016170 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016080:	6910      	ldr	r0, [r2, #16]
 8016082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016086:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801608a:	4798      	blx	r3
 801608c:	e05b      	b.n	8016146 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801608e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016092:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016096:	4611      	mov	r1, r2
 8016098:	4618      	mov	r0, r3
 801609a:	f005 fe99 	bl	801bdd0 <_ZNK14MockNamedValue7getNameEv>
 801609e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80160a2:	4934      	ldr	r1, [pc, #208]	; (8016174 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 80160a4:	4618      	mov	r0, r3
 80160a6:	f7f4 feb0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80160aa:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80160ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80160b2:	4611      	mov	r1, r2
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7f5 fab1 	bl	800b61c <_ZneRK12SimpleStringS1_>
 80160ba:	4603      	mov	r3, r0
 80160bc:	461c      	mov	r4, r3
 80160be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7f5 fa59 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80160c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80160cc:	4618      	mov	r0, r3
 80160ce:	f7f5 fa54 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80160d2:	2c00      	cmp	r4, #0
 80160d4:	d037      	beq.n	8016146 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	339c      	adds	r3, #156	; 0x9c
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80160e2:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80160e6:	6839      	ldr	r1, [r7, #0]
 80160e8:	4798      	blx	r3
 80160ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80160ee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80160f2:	4611      	mov	r1, r2
 80160f4:	4618      	mov	r0, r3
 80160f6:	f005 fe7a 	bl	801bdee <_ZNK14MockNamedValue7getTypeEv>
 80160fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80160fe:	4618      	mov	r0, r3
 8016100:	f005 fbd2 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	33cc      	adds	r3, #204	; 0xcc
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	4798      	blx	r3
 8016110:	4601      	mov	r1, r0
 8016112:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8016116:	f107 030c 	add.w	r3, r7, #12
 801611a:	4618      	mov	r0, r3
 801611c:	f005 faee 	bl	801b6fc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	33dc      	adds	r3, #220	; 0xdc
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	f107 020c 	add.w	r2, r7, #12
 801612c:	4611      	mov	r1, r2
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016132:	f107 030c 	add.w	r3, r7, #12
 8016136:	4618      	mov	r0, r3
 8016138:	f001 ffe2 	bl	8018100 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801613c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016140:	4618      	mov	r0, r3
 8016142:	f7f5 fa1a 	bl	800b57a <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8016146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801614a:	4618      	mov	r0, r3
 801614c:	f005 fbac 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8016150:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016154:	695b      	ldr	r3, [r3, #20]
 8016156:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801615a:	e705      	b.n	8015f68 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 801615c:	bf00      	nop
 801615e:	37f0      	adds	r7, #240	; 0xf0
 8016160:	46bd      	mov	sp, r7
 8016162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016166:	bf00      	nop
 8016168:	08023d50 	.word	0x08023d50
 801616c:	08023d5c 	.word	0x08023d5c
 8016170:	200000d4 	.word	0x200000d4
 8016174:	08023d4c 	.word	0x08023d4c

08016178 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b084      	sub	sp, #16
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	331c      	adds	r3, #28
 8016184:	4618      	mov	r0, r3
 8016186:	f004 f9bb 	bl	801a500 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 801618a:	4602      	mov	r2, r0
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	699b      	ldr	r3, [r3, #24]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d00f      	beq.n	80161b8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	33d4      	adds	r3, #212	; 0xd4
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	687a      	ldr	r2, [r7, #4]
 80161a2:	6992      	ldr	r2, [r2, #24]
 80161a4:	4611      	mov	r1, r2
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	4798      	blx	r3
        callHasSucceeded();
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	33d0      	adds	r3, #208	; 0xd0
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 80161b6:	e00f      	b.n	80161d8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	331c      	adds	r3, #28
 80161bc:	4618      	mov	r0, r3
 80161be:	f004 f9cc 	bl	801a55a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 80161c2:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d006      	beq.n	80161d8 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	33d4      	adds	r3, #212	; 0xd4
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	68f9      	ldr	r1, [r7, #12]
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	4798      	blx	r3
}
 80161d8:	bf00      	nop
 80161da:	3710      	adds	r7, #16
 80161dc:	46bd      	mov	sp, r7
 80161de:	bd80      	pop	{r7, pc}

080161e0 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b082      	sub	sp, #8
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	33ec      	adds	r3, #236	; 0xec
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	2102      	movs	r1, #2
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	4798      	blx	r3
}
 80161f6:	bf00      	nop
 80161f8:	3708      	adds	r7, #8
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}

080161fe <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 80161fe:	b580      	push	{r7, lr}
 8016200:	b082      	sub	sp, #8
 8016202:	af00      	add	r7, sp, #0
 8016204:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	699b      	ldr	r3, [r3, #24]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d00b      	beq.n	8016226 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	699a      	ldr	r2, [r3, #24]
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	699b      	ldr	r3, [r3, #24]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	33ec      	adds	r3, #236	; 0xec
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	4610      	mov	r0, r2
 801621e:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2200      	movs	r2, #0
 8016224:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	331c      	adds	r3, #28
 801622a:	4618      	mov	r0, r3
 801622c:	f004 f85c 	bl	801a2e8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8016230:	bf00      	nop
 8016232:	3708      	adds	r7, #8
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8016238:	b590      	push	{r4, r7, lr}
 801623a:	b091      	sub	sp, #68	; 0x44
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	6039      	str	r1, [r7, #0]
    setName(name);
 8016242:	6839      	ldr	r1, [r7, #0]
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f7ff fdb3 	bl	8015db0 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	33ec      	adds	r3, #236	; 0xec
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	2100      	movs	r1, #0
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	331c      	adds	r3, #28
 801625c:	6839      	ldr	r1, [r7, #0]
 801625e:	4618      	mov	r0, r3
 8016260:	f003 ffec 	bl	801a23c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	331c      	adds	r3, #28
 8016268:	4618      	mov	r0, r3
 801626a:	f003 fe7c 	bl	8019f66 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801626e:	4603      	mov	r3, r0
 8016270:	2b00      	cmp	r3, #0
 8016272:	d01d      	beq.n	80162b0 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	33cc      	adds	r3, #204	; 0xcc
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	4798      	blx	r3
 8016280:	4601      	mov	r1, r0
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016286:	f107 000c 	add.w	r0, r7, #12
 801628a:	683a      	ldr	r2, [r7, #0]
 801628c:	f004 fe24 	bl	801aed8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	33dc      	adds	r3, #220	; 0xdc
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	f107 020c 	add.w	r2, r7, #12
 801629c:	4611      	mov	r1, r2
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	4798      	blx	r3
        return *this;
 80162a2:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80162a4:	f107 030c 	add.w	r3, r7, #12
 80162a8:	4618      	mov	r0, r3
 80162aa:	f001 ff4b 	bl	8018144 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 80162ae:	e006      	b.n	80162be <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	33d8      	adds	r3, #216	; 0xd8
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	6878      	ldr	r0, [r7, #4]
 80162ba:	4798      	blx	r3

    return *this;
 80162bc:	687c      	ldr	r4, [r7, #4]
 80162be:	4623      	mov	r3, r4
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3744      	adds	r7, #68	; 0x44
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd90      	pop	{r4, r7, pc}

080162c8 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 80162c8:	b480      	push	{r7}
 80162ca:	b083      	sub	sp, #12
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
 80162d0:	6039      	str	r1, [r7, #0]
    return *this;
 80162d2:	687b      	ldr	r3, [r7, #4]
}
 80162d4:	4618      	mov	r0, r3
 80162d6:	370c      	adds	r7, #12
 80162d8:	46bd      	mov	sp, r7
 80162da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162de:	4770      	bx	lr

080162e0 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 80162e0:	b590      	push	{r4, r7, lr}
 80162e2:	b097      	sub	sp, #92	; 0x5c
 80162e4:	af02      	add	r7, sp, #8
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	33c0      	adds	r3, #192	; 0xc0
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	4798      	blx	r3
 80162f6:	4603      	mov	r3, r0
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d164      	bne.n	80163c6 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	33ec      	adds	r3, #236	; 0xec
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	2100      	movs	r1, #0
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	33e8      	adds	r3, #232	; 0xe8
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	331c      	adds	r3, #28
 801631a:	6839      	ldr	r1, [r7, #0]
 801631c:	4618      	mov	r0, r3
 801631e:	f004 f86b 	bl	801a3f8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	331c      	adds	r3, #28
 8016326:	4618      	mov	r0, r3
 8016328:	f003 fe1d 	bl	8019f66 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801632c:	4603      	mov	r3, r0
 801632e:	2b00      	cmp	r3, #0
 8016330:	d02b      	beq.n	801638a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	33cc      	adds	r3, #204	; 0xcc
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	4798      	blx	r3
 801633e:	4604      	mov	r4, r0
 8016340:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016344:	6879      	ldr	r1, [r7, #4]
 8016346:	4618      	mov	r0, r3
 8016348:	f7ff fd41 	bl	8015dce <_ZNK21MockCheckedActualCall7getNameEv>
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016350:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016354:	f107 000c 	add.w	r0, r7, #12
 8016358:	9300      	str	r3, [sp, #0]
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	4621      	mov	r1, r4
 801635e:	f004 fe7f 	bl	801b060 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8016362:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016366:	4618      	mov	r0, r3
 8016368:	f7f5 f907 	bl	800b57a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	33dc      	adds	r3, #220	; 0xdc
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	f107 020c 	add.w	r2, r7, #12
 8016378:	4611      	mov	r1, r2
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801637e:	f107 030c 	add.w	r3, r7, #12
 8016382:	4618      	mov	r0, r3
 8016384:	f001 ff00 	bl	8018188 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8016388:	e01e      	b.n	80163c8 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f103 041c 	add.w	r4, r3, #28
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	335c      	adds	r3, #92	; 0x5c
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801639c:	6839      	ldr	r1, [r7, #0]
 801639e:	4610      	mov	r0, r2
 80163a0:	4798      	blx	r3
 80163a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80163a6:	4619      	mov	r1, r3
 80163a8:	4620      	mov	r0, r4
 80163aa:	f004 f9b8 	bl	801a71e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 80163ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7f5 f8e1 	bl	800b57a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	33d8      	adds	r3, #216	; 0xd8
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	4798      	blx	r3
 80163c4:	e000      	b.n	80163c8 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 80163c6:	bf00      	nop
}
 80163c8:	3754      	adds	r7, #84	; 0x54
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd90      	pop	{r4, r7, pc}

080163ce <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 80163ce:	b590      	push	{r4, r7, lr}
 80163d0:	b097      	sub	sp, #92	; 0x5c
 80163d2:	af02      	add	r7, sp, #8
 80163d4:	6078      	str	r0, [r7, #4]
 80163d6:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	33c0      	adds	r3, #192	; 0xc0
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	4798      	blx	r3
 80163e4:	4603      	mov	r3, r0
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d164      	bne.n	80164b4 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	33ec      	adds	r3, #236	; 0xec
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	2100      	movs	r1, #0
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	33e8      	adds	r3, #232	; 0xe8
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	331c      	adds	r3, #28
 8016408:	6839      	ldr	r1, [r7, #0]
 801640a:	4618      	mov	r0, r3
 801640c:	f004 f820 	bl	801a450 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	331c      	adds	r3, #28
 8016414:	4618      	mov	r0, r3
 8016416:	f003 fda6 	bl	8019f66 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801641a:	4603      	mov	r3, r0
 801641c:	2b00      	cmp	r3, #0
 801641e:	d02b      	beq.n	8016478 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	33cc      	adds	r3, #204	; 0xcc
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	6878      	ldr	r0, [r7, #4]
 801642a:	4798      	blx	r3
 801642c:	4604      	mov	r4, r0
 801642e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016432:	6879      	ldr	r1, [r7, #4]
 8016434:	4618      	mov	r0, r3
 8016436:	f7ff fcca 	bl	8015dce <_ZNK21MockCheckedActualCall7getNameEv>
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801643e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016442:	f107 000c 	add.w	r0, r7, #12
 8016446:	9300      	str	r3, [sp, #0]
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	4621      	mov	r1, r4
 801644c:	f004 ff6a 	bl	801b324 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8016450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016454:	4618      	mov	r0, r3
 8016456:	f7f5 f890 	bl	800b57a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	33dc      	adds	r3, #220	; 0xdc
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	f107 020c 	add.w	r2, r7, #12
 8016466:	4611      	mov	r1, r2
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801646c:	f107 030c 	add.w	r3, r7, #12
 8016470:	4618      	mov	r0, r3
 8016472:	f001 feab 	bl	80181cc <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8016476:	e01e      	b.n	80164b6 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f103 041c 	add.w	r4, r3, #28
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	335c      	adds	r3, #92	; 0x5c
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801648a:	6839      	ldr	r1, [r7, #0]
 801648c:	4610      	mov	r0, r2
 801648e:	4798      	blx	r3
 8016490:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016494:	4619      	mov	r1, r3
 8016496:	4620      	mov	r0, r4
 8016498:	f004 f95e 	bl	801a758 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 801649c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7f5 f86a 	bl	800b57a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	33d8      	adds	r3, #216	; 0xd8
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	4798      	blx	r3
 80164b2:	e000      	b.n	80164b6 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 80164b4:	bf00      	nop
}
 80164b6:	3754      	adds	r7, #84	; 0x54
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd90      	pop	{r4, r7, pc}

080164bc <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 80164bc:	b590      	push	{r4, r7, lr}
 80164be:	b093      	sub	sp, #76	; 0x4c
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	60b9      	str	r1, [r7, #8]
 80164c6:	4613      	mov	r3, r2
 80164c8:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 80164ca:	f107 0310 	add.w	r3, r7, #16
 80164ce:	68b9      	ldr	r1, [r7, #8]
 80164d0:	4618      	mov	r0, r3
 80164d2:	f005 f9bf 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80164d6:	79fa      	ldrb	r2, [r7, #7]
 80164d8:	f107 0310 	add.w	r3, r7, #16
 80164dc:	4611      	mov	r1, r2
 80164de:	4618      	mov	r0, r3
 80164e0:	f005 fa0a 	bl	801b8f8 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	33e0      	adds	r3, #224	; 0xe0
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	f107 0210 	add.w	r2, r7, #16
 80164f0:	4611      	mov	r1, r2
 80164f2:	68f8      	ldr	r0, [r7, #12]
 80164f4:	4798      	blx	r3
    return *this;
 80164f6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80164f8:	f107 0310 	add.w	r3, r7, #16
 80164fc:	4618      	mov	r0, r3
 80164fe:	f005 f9d3 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016502:	4623      	mov	r3, r4
}
 8016504:	4618      	mov	r0, r3
 8016506:	374c      	adds	r7, #76	; 0x4c
 8016508:	46bd      	mov	sp, r7
 801650a:	bd90      	pop	{r4, r7, pc}

0801650c <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801650c:	b590      	push	{r4, r7, lr}
 801650e:	b093      	sub	sp, #76	; 0x4c
 8016510:	af00      	add	r7, sp, #0
 8016512:	60f8      	str	r0, [r7, #12]
 8016514:	60b9      	str	r1, [r7, #8]
 8016516:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016518:	f107 0310 	add.w	r3, r7, #16
 801651c:	68b9      	ldr	r1, [r7, #8]
 801651e:	4618      	mov	r0, r3
 8016520:	f005 f998 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016524:	f107 0310 	add.w	r3, r7, #16
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	4618      	mov	r0, r3
 801652c:	f005 fa08 	bl	801b940 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	33e0      	adds	r3, #224	; 0xe0
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	f107 0210 	add.w	r2, r7, #16
 801653c:	4611      	mov	r1, r2
 801653e:	68f8      	ldr	r0, [r7, #12]
 8016540:	4798      	blx	r3
    return *this;
 8016542:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016544:	f107 0310 	add.w	r3, r7, #16
 8016548:	4618      	mov	r0, r3
 801654a:	f005 f9ad 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801654e:	4623      	mov	r3, r4
}
 8016550:	4618      	mov	r0, r3
 8016552:	374c      	adds	r7, #76	; 0x4c
 8016554:	46bd      	mov	sp, r7
 8016556:	bd90      	pop	{r4, r7, pc}

08016558 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8016558:	b590      	push	{r4, r7, lr}
 801655a:	b093      	sub	sp, #76	; 0x4c
 801655c:	af00      	add	r7, sp, #0
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016564:	f107 0310 	add.w	r3, r7, #16
 8016568:	68b9      	ldr	r1, [r7, #8]
 801656a:	4618      	mov	r0, r3
 801656c:	f005 f972 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016570:	f107 0310 	add.w	r3, r7, #16
 8016574:	6879      	ldr	r1, [r7, #4]
 8016576:	4618      	mov	r0, r3
 8016578:	f005 fa04 	bl	801b984 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	33e0      	adds	r3, #224	; 0xe0
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	f107 0210 	add.w	r2, r7, #16
 8016588:	4611      	mov	r1, r2
 801658a:	68f8      	ldr	r0, [r7, #12]
 801658c:	4798      	blx	r3
    return *this;
 801658e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016590:	f107 0310 	add.w	r3, r7, #16
 8016594:	4618      	mov	r0, r3
 8016596:	f005 f987 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801659a:	4623      	mov	r3, r4
}
 801659c:	4618      	mov	r0, r3
 801659e:	374c      	adds	r7, #76	; 0x4c
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd90      	pop	{r4, r7, pc}

080165a4 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80165a4:	b590      	push	{r4, r7, lr}
 80165a6:	b093      	sub	sp, #76	; 0x4c
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	60f8      	str	r0, [r7, #12]
 80165ac:	60b9      	str	r1, [r7, #8]
 80165ae:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80165b0:	f107 0310 	add.w	r3, r7, #16
 80165b4:	68b9      	ldr	r1, [r7, #8]
 80165b6:	4618      	mov	r0, r3
 80165b8:	f005 f94c 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80165bc:	f107 0310 	add.w	r3, r7, #16
 80165c0:	6879      	ldr	r1, [r7, #4]
 80165c2:	4618      	mov	r0, r3
 80165c4:	f005 fa22 	bl	801ba0c <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	33e0      	adds	r3, #224	; 0xe0
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	f107 0210 	add.w	r2, r7, #16
 80165d4:	4611      	mov	r1, r2
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	4798      	blx	r3
    return *this;
 80165da:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80165dc:	f107 0310 	add.w	r3, r7, #16
 80165e0:	4618      	mov	r0, r3
 80165e2:	f005 f961 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80165e6:	4623      	mov	r3, r4
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	374c      	adds	r7, #76	; 0x4c
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd90      	pop	{r4, r7, pc}

080165f0 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80165f0:	b590      	push	{r4, r7, lr}
 80165f2:	b093      	sub	sp, #76	; 0x4c
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	60f8      	str	r0, [r7, #12]
 80165f8:	60b9      	str	r1, [r7, #8]
 80165fa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80165fc:	f107 0310 	add.w	r3, r7, #16
 8016600:	68b9      	ldr	r1, [r7, #8]
 8016602:	4618      	mov	r0, r3
 8016604:	f005 f926 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016608:	f107 0310 	add.w	r3, r7, #16
 801660c:	6879      	ldr	r1, [r7, #4]
 801660e:	4618      	mov	r0, r3
 8016610:	f005 f9da 	bl	801b9c8 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	33e0      	adds	r3, #224	; 0xe0
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	f107 0210 	add.w	r2, r7, #16
 8016620:	4611      	mov	r1, r2
 8016622:	68f8      	ldr	r0, [r7, #12]
 8016624:	4798      	blx	r3
    return *this;
 8016626:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016628:	f107 0310 	add.w	r3, r7, #16
 801662c:	4618      	mov	r0, r3
 801662e:	f005 f93b 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016632:	4623      	mov	r3, r4
}
 8016634:	4618      	mov	r0, r3
 8016636:	374c      	adds	r7, #76	; 0x4c
 8016638:	46bd      	mov	sp, r7
 801663a:	bd90      	pop	{r4, r7, pc}

0801663c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801663c:	b5b0      	push	{r4, r5, r7, lr}
 801663e:	b086      	sub	sp, #24
 8016640:	af02      	add	r7, sp, #8
 8016642:	60f8      	str	r0, [r7, #12]
 8016644:	60b9      	str	r1, [r7, #8]
 8016646:	4639      	mov	r1, r7
 8016648:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801664c:	f7fb ffc0 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8016650:	4604      	mov	r4, r0
 8016652:	6823      	ldr	r3, [r4, #0]
 8016654:	3368      	adds	r3, #104	; 0x68
 8016656:	681d      	ldr	r5, [r3, #0]
 8016658:	f7fb ffca 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801665c:	4603      	mov	r3, r0
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8016664:	4a04      	ldr	r2, [pc, #16]	; (8016678 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8016666:	4905      	ldr	r1, [pc, #20]	; (801667c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8016668:	4620      	mov	r0, r4
 801666a:	47a8      	blx	r5
    return *this;
 801666c:	68fb      	ldr	r3, [r7, #12]
}
 801666e:	4618      	mov	r0, r3
 8016670:	3710      	adds	r7, #16
 8016672:	46bd      	mov	sp, r7
 8016674:	bdb0      	pop	{r4, r5, r7, pc}
 8016676:	bf00      	nop
 8016678:	08023d64 	.word	0x08023d64
 801667c:	08023d80 	.word	0x08023d80

08016680 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8016680:	b5b0      	push	{r4, r5, r7, lr}
 8016682:	b086      	sub	sp, #24
 8016684:	af02      	add	r7, sp, #8
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	4639      	mov	r1, r7
 801668c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016690:	f7fb ff9e 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8016694:	4604      	mov	r4, r0
 8016696:	6823      	ldr	r3, [r4, #0]
 8016698:	3368      	adds	r3, #104	; 0x68
 801669a:	681d      	ldr	r5, [r3, #0]
 801669c:	f7fb ffa8 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80166a0:	4603      	mov	r3, r0
 80166a2:	9300      	str	r3, [sp, #0]
 80166a4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80166a8:	4a04      	ldr	r2, [pc, #16]	; (80166bc <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80166aa:	4905      	ldr	r1, [pc, #20]	; (80166c0 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80166ac:	4620      	mov	r0, r4
 80166ae:	47a8      	blx	r5
    return *this;
 80166b0:	68fb      	ldr	r3, [r7, #12]
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3710      	adds	r7, #16
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bdb0      	pop	{r4, r5, r7, pc}
 80166ba:	bf00      	nop
 80166bc:	08023d64 	.word	0x08023d64
 80166c0:	08023dac 	.word	0x08023dac

080166c4 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 80166c4:	b590      	push	{r4, r7, lr}
 80166c6:	b093      	sub	sp, #76	; 0x4c
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	60f8      	str	r0, [r7, #12]
 80166cc:	60b9      	str	r1, [r7, #8]
 80166ce:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 80166d2:	f107 0310 	add.w	r3, r7, #16
 80166d6:	68b9      	ldr	r1, [r7, #8]
 80166d8:	4618      	mov	r0, r3
 80166da:	f005 f8bb 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80166de:	f107 0310 	add.w	r3, r7, #16
 80166e2:	ed97 0b00 	vldr	d0, [r7]
 80166e6:	4618      	mov	r0, r3
 80166e8:	f005 f9ee 	bl	801bac8 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	33e0      	adds	r3, #224	; 0xe0
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	f107 0210 	add.w	r2, r7, #16
 80166f8:	4611      	mov	r1, r2
 80166fa:	68f8      	ldr	r0, [r7, #12]
 80166fc:	4798      	blx	r3
    return *this;
 80166fe:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016700:	f107 0310 	add.w	r3, r7, #16
 8016704:	4618      	mov	r0, r3
 8016706:	f005 f8cf 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801670a:	4623      	mov	r3, r4
}
 801670c:	4618      	mov	r0, r3
 801670e:	374c      	adds	r7, #76	; 0x4c
 8016710:	46bd      	mov	sp, r7
 8016712:	bd90      	pop	{r4, r7, pc}

08016714 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8016714:	b590      	push	{r4, r7, lr}
 8016716:	b093      	sub	sp, #76	; 0x4c
 8016718:	af00      	add	r7, sp, #0
 801671a:	60f8      	str	r0, [r7, #12]
 801671c:	60b9      	str	r1, [r7, #8]
 801671e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016720:	f107 0310 	add.w	r3, r7, #16
 8016724:	68b9      	ldr	r1, [r7, #8]
 8016726:	4618      	mov	r0, r3
 8016728:	f005 f894 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801672c:	f107 0310 	add.w	r3, r7, #16
 8016730:	6879      	ldr	r1, [r7, #4]
 8016732:	4618      	mov	r0, r3
 8016734:	f005 fa72 	bl	801bc1c <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	33e0      	adds	r3, #224	; 0xe0
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	f107 0210 	add.w	r2, r7, #16
 8016744:	4611      	mov	r1, r2
 8016746:	68f8      	ldr	r0, [r7, #12]
 8016748:	4798      	blx	r3
    return *this;
 801674a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801674c:	f107 0310 	add.w	r3, r7, #16
 8016750:	4618      	mov	r0, r3
 8016752:	f005 f8a9 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016756:	4623      	mov	r3, r4
}
 8016758:	4618      	mov	r0, r3
 801675a:	374c      	adds	r7, #76	; 0x4c
 801675c:	46bd      	mov	sp, r7
 801675e:	bd90      	pop	{r4, r7, pc}

08016760 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8016760:	b590      	push	{r4, r7, lr}
 8016762:	b093      	sub	sp, #76	; 0x4c
 8016764:	af00      	add	r7, sp, #0
 8016766:	60f8      	str	r0, [r7, #12]
 8016768:	60b9      	str	r1, [r7, #8]
 801676a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801676c:	f107 0310 	add.w	r3, r7, #16
 8016770:	68b9      	ldr	r1, [r7, #8]
 8016772:	4618      	mov	r0, r3
 8016774:	f005 f86e 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016778:	f107 0310 	add.w	r3, r7, #16
 801677c:	6879      	ldr	r1, [r7, #4]
 801677e:	4618      	mov	r0, r3
 8016780:	f005 f9e6 	bl	801bb50 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	33e0      	adds	r3, #224	; 0xe0
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f107 0210 	add.w	r2, r7, #16
 8016790:	4611      	mov	r1, r2
 8016792:	68f8      	ldr	r0, [r7, #12]
 8016794:	4798      	blx	r3
    return *this;
 8016796:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016798:	f107 0310 	add.w	r3, r7, #16
 801679c:	4618      	mov	r0, r3
 801679e:	f005 f883 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80167a2:	4623      	mov	r3, r4
}
 80167a4:	4618      	mov	r0, r3
 80167a6:	374c      	adds	r7, #76	; 0x4c
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd90      	pop	{r4, r7, pc}

080167ac <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80167ac:	b590      	push	{r4, r7, lr}
 80167ae:	b093      	sub	sp, #76	; 0x4c
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	60f8      	str	r0, [r7, #12]
 80167b4:	60b9      	str	r1, [r7, #8]
 80167b6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80167b8:	f107 0310 	add.w	r3, r7, #16
 80167bc:	68b9      	ldr	r1, [r7, #8]
 80167be:	4618      	mov	r0, r3
 80167c0:	f005 f848 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80167c4:	f107 0310 	add.w	r3, r7, #16
 80167c8:	6879      	ldr	r1, [r7, #4]
 80167ca:	4618      	mov	r0, r3
 80167cc:	f005 f9e2 	bl	801bb94 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	33e0      	adds	r3, #224	; 0xe0
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	f107 0210 	add.w	r2, r7, #16
 80167dc:	4611      	mov	r1, r2
 80167de:	68f8      	ldr	r0, [r7, #12]
 80167e0:	4798      	blx	r3
    return *this;
 80167e2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80167e4:	f107 0310 	add.w	r3, r7, #16
 80167e8:	4618      	mov	r0, r3
 80167ea:	f005 f85d 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80167ee:	4623      	mov	r3, r4
}
 80167f0:	4618      	mov	r0, r3
 80167f2:	374c      	adds	r7, #76	; 0x4c
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd90      	pop	{r4, r7, pc}

080167f8 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80167f8:	b590      	push	{r4, r7, lr}
 80167fa:	b093      	sub	sp, #76	; 0x4c
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	60f8      	str	r0, [r7, #12]
 8016800:	60b9      	str	r1, [r7, #8]
 8016802:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016804:	f107 0310 	add.w	r3, r7, #16
 8016808:	68b9      	ldr	r1, [r7, #8]
 801680a:	4618      	mov	r0, r3
 801680c:	f005 f822 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016810:	f107 0310 	add.w	r3, r7, #16
 8016814:	6879      	ldr	r1, [r7, #4]
 8016816:	4618      	mov	r0, r3
 8016818:	f005 f9de 	bl	801bbd8 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	33e0      	adds	r3, #224	; 0xe0
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	f107 0210 	add.w	r2, r7, #16
 8016828:	4611      	mov	r1, r2
 801682a:	68f8      	ldr	r0, [r7, #12]
 801682c:	4798      	blx	r3
    return *this;
 801682e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016830:	f107 0310 	add.w	r3, r7, #16
 8016834:	4618      	mov	r0, r3
 8016836:	f005 f837 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801683a:	4623      	mov	r3, r4
}
 801683c:	4618      	mov	r0, r3
 801683e:	374c      	adds	r7, #76	; 0x4c
 8016840:	46bd      	mov	sp, r7
 8016842:	bd90      	pop	{r4, r7, pc}

08016844 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8016844:	b590      	push	{r4, r7, lr}
 8016846:	b093      	sub	sp, #76	; 0x4c
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	607a      	str	r2, [r7, #4]
 8016850:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8016852:	f107 0310 	add.w	r3, r7, #16
 8016856:	68b9      	ldr	r1, [r7, #8]
 8016858:	4618      	mov	r0, r3
 801685a:	f004 fffb 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 801685e:	f107 0310 	add.w	r3, r7, #16
 8016862:	683a      	ldr	r2, [r7, #0]
 8016864:	6879      	ldr	r1, [r7, #4]
 8016866:	4618      	mov	r0, r3
 8016868:	f005 f9fa 	bl	801bc60 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	33e0      	adds	r3, #224	; 0xe0
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	f107 0210 	add.w	r2, r7, #16
 8016878:	4611      	mov	r1, r2
 801687a:	68f8      	ldr	r0, [r7, #12]
 801687c:	4798      	blx	r3
    return *this;
 801687e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016880:	f107 0310 	add.w	r3, r7, #16
 8016884:	4618      	mov	r0, r3
 8016886:	f005 f80f 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 801688a:	4623      	mov	r3, r4
}
 801688c:	4618      	mov	r0, r3
 801688e:	374c      	adds	r7, #76	; 0x4c
 8016890:	46bd      	mov	sp, r7
 8016892:	bd90      	pop	{r4, r7, pc}

08016894 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8016894:	b590      	push	{r4, r7, lr}
 8016896:	b0a1      	sub	sp, #132	; 0x84
 8016898:	af00      	add	r7, sp, #0
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	60b9      	str	r1, [r7, #8]
 801689e:	607a      	str	r2, [r7, #4]
 80168a0:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80168a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80168a6:	6879      	ldr	r1, [r7, #4]
 80168a8:	4618      	mov	r0, r3
 80168aa:	f004 ffd3 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 80168ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80168b2:	683a      	ldr	r2, [r7, #0]
 80168b4:	68b9      	ldr	r1, [r7, #8]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f005 f9f8 	bl	801bcac <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 80168bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80168c0:	4618      	mov	r0, r3
 80168c2:	f005 fdc5 	bl	801c450 <_ZNK14MockNamedValue13getComparatorEv>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	bf0c      	ite	eq
 80168cc:	2301      	moveq	r3, #1
 80168ce:	2300      	movne	r3, #0
 80168d0:	b2db      	uxtb	r3, r3
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d01c      	beq.n	8016910 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	33cc      	adds	r3, #204	; 0xcc
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	68f8      	ldr	r0, [r7, #12]
 80168e0:	4798      	blx	r3
 80168e2:	4601      	mov	r1, r0
 80168e4:	f107 0314 	add.w	r3, r7, #20
 80168e8:	68ba      	ldr	r2, [r7, #8]
 80168ea:	4618      	mov	r0, r3
 80168ec:	f004 fed6 	bl	801b69c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	33dc      	adds	r3, #220	; 0xdc
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	f107 0214 	add.w	r2, r7, #20
 80168fc:	4611      	mov	r1, r2
 80168fe:	68f8      	ldr	r0, [r7, #12]
 8016900:	4798      	blx	r3
        return *this;
 8016902:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8016904:	f107 0314 	add.w	r3, r7, #20
 8016908:	4618      	mov	r0, r3
 801690a:	f001 fc81 	bl	8018210 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801690e:	e009      	b.n	8016924 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	33e0      	adds	r3, #224	; 0xe0
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801691c:	4611      	mov	r1, r2
 801691e:	68f8      	ldr	r0, [r7, #12]
 8016920:	4798      	blx	r3
    return *this;
 8016922:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016928:	4618      	mov	r0, r3
 801692a:	f004 ffbd 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 801692e:	4623      	mov	r3, r4
}
 8016930:	4618      	mov	r0, r3
 8016932:	3784      	adds	r7, #132	; 0x84
 8016934:	46bd      	mov	sp, r7
 8016936:	bd90      	pop	{r4, r7, pc}

08016938 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8016938:	b590      	push	{r4, r7, lr}
 801693a:	b095      	sub	sp, #84	; 0x54
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	60b9      	str	r1, [r7, #8]
 8016942:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	33f0      	adds	r3, #240	; 0xf0
 801694a:	681c      	ldr	r4, [r3, #0]
 801694c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016950:	4917      	ldr	r1, [pc, #92]	; (80169b0 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8016952:	4618      	mov	r0, r3
 8016954:	f7f4 fa59 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8016958:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	68b9      	ldr	r1, [r7, #8]
 8016960:	68f8      	ldr	r0, [r7, #12]
 8016962:	47a0      	blx	r4
 8016964:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016968:	4618      	mov	r0, r3
 801696a:	f7f4 fe06 	bl	800b57a <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801696e:	f107 0310 	add.w	r3, r7, #16
 8016972:	68b9      	ldr	r1, [r7, #8]
 8016974:	4618      	mov	r0, r3
 8016976:	f004 ff6d 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 801697a:	f107 0310 	add.w	r3, r7, #16
 801697e:	6879      	ldr	r1, [r7, #4]
 8016980:	4618      	mov	r0, r3
 8016982:	f005 f8e5 	bl	801bb50 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	33e4      	adds	r3, #228	; 0xe4
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	f107 0210 	add.w	r2, r7, #16
 8016992:	4611      	mov	r1, r2
 8016994:	68f8      	ldr	r0, [r7, #12]
 8016996:	4798      	blx	r3

    return *this;
 8016998:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801699a:	f107 0310 	add.w	r3, r7, #16
 801699e:	4618      	mov	r0, r3
 80169a0:	f004 ff82 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 80169a4:	4623      	mov	r3, r4
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3754      	adds	r7, #84	; 0x54
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd90      	pop	{r4, r7, pc}
 80169ae:	bf00      	nop
 80169b0:	08023d5c 	.word	0x08023d5c

080169b4 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 80169b4:	b590      	push	{r4, r7, lr}
 80169b6:	b093      	sub	sp, #76	; 0x4c
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
 80169c0:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	33f0      	adds	r3, #240	; 0xf0
 80169c8:	681c      	ldr	r4, [r3, #0]
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	68ba      	ldr	r2, [r7, #8]
 80169ce:	6879      	ldr	r1, [r7, #4]
 80169d0:	68f8      	ldr	r0, [r7, #12]
 80169d2:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 80169d4:	f107 0310 	add.w	r3, r7, #16
 80169d8:	6879      	ldr	r1, [r7, #4]
 80169da:	4618      	mov	r0, r3
 80169dc:	f004 ff3a 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 80169e0:	f107 0310 	add.w	r3, r7, #16
 80169e4:	683a      	ldr	r2, [r7, #0]
 80169e6:	68b9      	ldr	r1, [r7, #8]
 80169e8:	4618      	mov	r0, r3
 80169ea:	f005 f95f 	bl	801bcac <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	33e4      	adds	r3, #228	; 0xe4
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	f107 0210 	add.w	r2, r7, #16
 80169fa:	4611      	mov	r1, r2
 80169fc:	68f8      	ldr	r0, [r7, #12]
 80169fe:	4798      	blx	r3

    return *this;
 8016a00:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8016a02:	f107 0310 	add.w	r3, r7, #16
 8016a06:	4618      	mov	r0, r3
 8016a08:	f004 ff4e 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016a0c:	4623      	mov	r3, r4
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	374c      	adds	r7, #76	; 0x4c
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd90      	pop	{r4, r7, pc}

08016a16 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8016a16:	b480      	push	{r7}
 8016a18:	b083      	sub	sp, #12
 8016a1a:	af00      	add	r7, sp, #0
 8016a1c:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	7d1b      	ldrb	r3, [r3, #20]
 8016a22:	2b02      	cmp	r3, #2
 8016a24:	bf0c      	ite	eq
 8016a26:	2301      	moveq	r3, #1
 8016a28:	2300      	movne	r3, #0
 8016a2a:	b2db      	uxtb	r3, r3
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	370c      	adds	r7, #12
 8016a30:	46bd      	mov	sp, r7
 8016a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a36:	4770      	bx	lr

08016a38 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8016a38:	b480      	push	{r7}
 8016a3a:	b083      	sub	sp, #12
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	7d1b      	ldrb	r3, [r3, #20]
 8016a44:	2b01      	cmp	r3, #1
 8016a46:	bf0c      	ite	eq
 8016a48:	2301      	moveq	r3, #1
 8016a4a:	2300      	movne	r3, #0
 8016a4c:	b2db      	uxtb	r3, r3
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	370c      	adds	r7, #12
 8016a52:	46bd      	mov	sp, r7
 8016a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a58:	4770      	bx	lr
	...

08016a5c <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8016a5c:	b5b0      	push	{r4, r5, r7, lr}
 8016a5e:	b096      	sub	sp, #88	; 0x58
 8016a60:	af02      	add	r7, sp, #8
 8016a62:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	7d5b      	ldrb	r3, [r3, #21]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	f040 80bc 	bne.w	8016be6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2201      	movs	r2, #1
 8016a72:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	7d1b      	ldrb	r3, [r3, #20]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d014      	beq.n	8016aa6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	7d1b      	ldrb	r3, [r3, #20]
 8016a80:	2b02      	cmp	r3, #2
 8016a82:	d10a      	bne.n	8016a9a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	6998      	ldr	r0, [r3, #24]
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	699b      	ldr	r3, [r3, #24]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	33d8      	adds	r3, #216	; 0xd8
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	687a      	ldr	r2, [r7, #4]
 8016a94:	68d2      	ldr	r2, [r2, #12]
 8016a96:	4611      	mov	r1, r2
 8016a98:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	331c      	adds	r3, #28
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f003 fe07 	bl	801a6b2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8016aa4:	e0a0      	b.n	8016be8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	331c      	adds	r3, #28
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f003 fac3 	bl	801a036 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d00f      	beq.n	8016ad6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8016ab6:	f7fb fd8b 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8016aba:	4604      	mov	r4, r0
 8016abc:	6823      	ldr	r3, [r4, #0]
 8016abe:	3368      	adds	r3, #104	; 0x68
 8016ac0:	681d      	ldr	r5, [r3, #0]
 8016ac2:	f7fb fd95 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	9300      	str	r3, [sp, #0]
 8016aca:	f240 1385 	movw	r3, #389	; 0x185
 8016ace:	4a48      	ldr	r2, [pc, #288]	; (8016bf0 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8016ad0:	4948      	ldr	r1, [pc, #288]	; (8016bf4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	331c      	adds	r3, #28
 8016ada:	4618      	mov	r0, r3
 8016adc:	f003 fd5f 	bl	801a59e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8016ae0:	4602      	mov	r2, r0
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	699b      	ldr	r3, [r3, #24]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d01f      	beq.n	8016b2e <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	699a      	ldr	r2, [r3, #24]
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	699b      	ldr	r3, [r3, #24]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	33e4      	adds	r3, #228	; 0xe4
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	4610      	mov	r0, r2
 8016afe:	4798      	blx	r3
        callHasSucceeded();
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	33d0      	adds	r3, #208	; 0xd0
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6998      	ldr	r0, [r3, #24]
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	699b      	ldr	r3, [r3, #24]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	33d8      	adds	r3, #216	; 0xd8
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	687a      	ldr	r2, [r7, #4]
 8016b1c:	68d2      	ldr	r2, [r2, #12]
 8016b1e:	4611      	mov	r1, r2
 8016b20:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	331c      	adds	r3, #28
 8016b26:	4618      	mov	r0, r3
 8016b28:	f003 fdc3 	bl	801a6b2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8016b2c:	e05c      	b.n	8016be8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	331c      	adds	r3, #28
 8016b32:	4618      	mov	r0, r3
 8016b34:	f003 ffc4 	bl	801aac0 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d029      	beq.n	8016b92 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	33cc      	adds	r3, #204	; 0xcc
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	4798      	blx	r3
 8016b4a:	4604      	mov	r4, r0
 8016b4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b50:	6879      	ldr	r1, [r7, #4]
 8016b52:	4618      	mov	r0, r3
 8016b54:	f7ff f93b 	bl	8015dce <_ZNK21MockCheckedActualCall7getNameEv>
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b5c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016b60:	f107 000c 	add.w	r0, r7, #12
 8016b64:	4621      	mov	r1, r4
 8016b66:	f004 fd21 	bl	801b5ac <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8016b6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7f4 fd03 	bl	800b57a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	33dc      	adds	r3, #220	; 0xdc
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	f107 020c 	add.w	r2, r7, #12
 8016b80:	4611      	mov	r1, r2
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016b86:	f107 030c 	add.w	r3, r7, #12
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f001 fb62 	bl	8018254 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8016b90:	e02a      	b.n	8016be8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	33cc      	adds	r3, #204	; 0xcc
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	4798      	blx	r3
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016ba4:	6879      	ldr	r1, [r7, #4]
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7ff f911 	bl	8015dce <_ZNK21MockCheckedActualCall7getNameEv>
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016bb4:	f107 000c 	add.w	r0, r7, #12
 8016bb8:	4621      	mov	r1, r4
 8016bba:	f004 fe05 	bl	801b7c8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8016bbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7f4 fcd9 	bl	800b57a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	33dc      	adds	r3, #220	; 0xdc
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	f107 020c 	add.w	r2, r7, #12
 8016bd4:	4611      	mov	r1, r2
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8016bda:	f107 030c 	add.w	r3, r7, #12
 8016bde:	4618      	mov	r0, r3
 8016be0:	f001 fb5a 	bl	8018298 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8016be4:	e000      	b.n	8016be8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8016be6:	bf00      	nop
    }
}
 8016be8:	3750      	adds	r7, #80	; 0x50
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bdb0      	pop	{r4, r5, r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	08023d64 	.word	0x08023d64
 8016bf4:	08023dcc 	.word	0x08023dcc

08016bf8 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8016bf8:	b480      	push	{r7}
 8016bfa:	b083      	sub	sp, #12
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
 8016c00:	460b      	mov	r3, r1
 8016c02:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	78fa      	ldrb	r2, [r7, #3]
 8016c08:	751a      	strb	r2, [r3, #20]
}
 8016c0a:	bf00      	nop
 8016c0c:	370c      	adds	r7, #12
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c14:	4770      	bx	lr
	...

08016c18 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b084      	sub	sp, #16
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
 8016c20:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	33c4      	adds	r3, #196	; 0xc4
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	6838      	ldr	r0, [r7, #0]
 8016c2c:	4798      	blx	r3
    if (matchingExpectation_)
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	699b      	ldr	r3, [r3, #24]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d00a      	beq.n	8016c4c <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	6999      	ldr	r1, [r3, #24]
 8016c3a:	683b      	ldr	r3, [r7, #0]
 8016c3c:	699b      	ldr	r3, [r3, #24]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	3394      	adds	r3, #148	; 0x94
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	4610      	mov	r0, r2
 8016c48:	4798      	blx	r3
 8016c4a:	e010      	b.n	8016c6e <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8016c4c:	f107 0308 	add.w	r3, r7, #8
 8016c50:	4909      	ldr	r1, [pc, #36]	; (8016c78 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7f4 f8d9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8016c58:	f107 0308 	add.w	r3, r7, #8
 8016c5c:	4619      	mov	r1, r3
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f004 fdf8 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 8016c64:	f107 0308 	add.w	r3, r7, #8
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7f4 fc86 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	3710      	adds	r7, #16
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	08023e48 	.word	0x08023e48

08016c7c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
 8016c84:	460b      	mov	r3, r1
 8016c86:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	3350      	adds	r3, #80	; 0x50
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	4798      	blx	r3
 8016c94:	4603      	mov	r3, r0
 8016c96:	f083 0301 	eor.w	r3, r3, #1
 8016c9a:	b2db      	uxtb	r3, r3
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d001      	beq.n	8016ca4 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8016ca0:	78fb      	ldrb	r3, [r7, #3]
 8016ca2:	e007      	b.n	8016cb4 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	335c      	adds	r3, #92	; 0x5c
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	4798      	blx	r3
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	bf00      	nop
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3708      	adds	r7, #8
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}

08016cbc <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8016cbc:	b590      	push	{r4, r7, lr}
 8016cbe:	b091      	sub	sp, #68	; 0x44
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	3354      	adds	r3, #84	; 0x54
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	f107 0208 	add.w	r2, r7, #8
 8016cd0:	6879      	ldr	r1, [r7, #4]
 8016cd2:	4610      	mov	r0, r2
 8016cd4:	4798      	blx	r3
 8016cd6:	f107 0308 	add.w	r3, r7, #8
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f005 f896 	bl	801be0c <_ZNK14MockNamedValue12getBoolValueEv>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	461c      	mov	r4, r3
 8016ce4:	bf00      	nop
 8016ce6:	f107 0308 	add.w	r3, r7, #8
 8016cea:	4618      	mov	r0, r3
 8016cec:	f004 fddc 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8016cf0:	4623      	mov	r3, r4
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	3744      	adds	r7, #68	; 0x44
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd90      	pop	{r4, r7, pc}

08016cfa <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8016cfa:	b580      	push	{r7, lr}
 8016cfc:	b082      	sub	sp, #8
 8016cfe:	af00      	add	r7, sp, #0
 8016d00:	6078      	str	r0, [r7, #4]
 8016d02:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	3350      	adds	r3, #80	; 0x50
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	4798      	blx	r3
 8016d10:	4603      	mov	r3, r0
 8016d12:	f083 0301 	eor.w	r3, r3, #1
 8016d16:	b2db      	uxtb	r3, r3
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d001      	beq.n	8016d20 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	e007      	b.n	8016d30 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	3364      	adds	r3, #100	; 0x64
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	4798      	blx	r3
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	bf00      	nop
}
 8016d30:	4618      	mov	r0, r3
 8016d32:	3708      	adds	r7, #8
 8016d34:	46bd      	mov	sp, r7
 8016d36:	bd80      	pop	{r7, pc}

08016d38 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8016d38:	b590      	push	{r4, r7, lr}
 8016d3a:	b091      	sub	sp, #68	; 0x44
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	3354      	adds	r3, #84	; 0x54
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	f107 0208 	add.w	r2, r7, #8
 8016d4c:	6879      	ldr	r1, [r7, #4]
 8016d4e:	4610      	mov	r0, r2
 8016d50:	4798      	blx	r3
 8016d52:	f107 0308 	add.w	r3, r7, #8
 8016d56:	4618      	mov	r0, r3
 8016d58:	f005 f8d0 	bl	801befc <_ZNK14MockNamedValue11getIntValueEv>
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	bf00      	nop
 8016d60:	f107 0308 	add.w	r3, r7, #8
 8016d64:	4618      	mov	r0, r3
 8016d66:	f004 fd9f 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8016d6a:	4623      	mov	r3, r4
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3744      	adds	r7, #68	; 0x44
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd90      	pop	{r4, r7, pc}

08016d74 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8016d74:	b590      	push	{r4, r7, lr}
 8016d76:	b091      	sub	sp, #68	; 0x44
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	3354      	adds	r3, #84	; 0x54
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f107 0208 	add.w	r2, r7, #8
 8016d88:	6879      	ldr	r1, [r7, #4]
 8016d8a:	4610      	mov	r0, r2
 8016d8c:	4798      	blx	r3
 8016d8e:	f107 0308 	add.w	r3, r7, #8
 8016d92:	4618      	mov	r0, r3
 8016d94:	f005 f93c 	bl	801c010 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8016d98:	4604      	mov	r4, r0
 8016d9a:	bf00      	nop
 8016d9c:	f107 0308 	add.w	r3, r7, #8
 8016da0:	4618      	mov	r0, r3
 8016da2:	f004 fd81 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8016da6:	4623      	mov	r3, r4
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	3744      	adds	r7, #68	; 0x44
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd90      	pop	{r4, r7, pc}

08016db0 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
 8016db8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	3350      	adds	r3, #80	; 0x50
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	6878      	ldr	r0, [r7, #4]
 8016dc4:	4798      	blx	r3
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	f083 0301 	eor.w	r3, r3, #1
 8016dcc:	b2db      	uxtb	r3, r3
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d001      	beq.n	8016dd6 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	e007      	b.n	8016de6 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	3368      	adds	r3, #104	; 0x68
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	4798      	blx	r3
 8016de2:	4603      	mov	r3, r0
 8016de4:	bf00      	nop
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	3708      	adds	r7, #8
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}

08016dee <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8016dee:	b590      	push	{r4, r7, lr}
 8016df0:	b091      	sub	sp, #68	; 0x44
 8016df2:	af00      	add	r7, sp, #0
 8016df4:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	3354      	adds	r3, #84	; 0x54
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	f107 0208 	add.w	r2, r7, #8
 8016e02:	6879      	ldr	r1, [r7, #4]
 8016e04:	4610      	mov	r0, r2
 8016e06:	4798      	blx	r3
 8016e08:	f107 0308 	add.w	r3, r7, #8
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f005 f89d 	bl	801bf4c <_ZNK14MockNamedValue15getLongIntValueEv>
 8016e12:	4604      	mov	r4, r0
 8016e14:	bf00      	nop
 8016e16:	f107 0308 	add.w	r3, r7, #8
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	f004 fd44 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8016e20:	4623      	mov	r3, r4
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3744      	adds	r7, #68	; 0x44
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd90      	pop	{r4, r7, pc}

08016e2a <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8016e2a:	b580      	push	{r7, lr}
 8016e2c:	b082      	sub	sp, #8
 8016e2e:	af00      	add	r7, sp, #0
 8016e30:	6078      	str	r0, [r7, #4]
 8016e32:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	3350      	adds	r3, #80	; 0x50
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	6878      	ldr	r0, [r7, #4]
 8016e3e:	4798      	blx	r3
 8016e40:	4603      	mov	r3, r0
 8016e42:	f083 0301 	eor.w	r3, r3, #1
 8016e46:	b2db      	uxtb	r3, r3
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d001      	beq.n	8016e50 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	e007      	b.n	8016e60 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	3370      	adds	r3, #112	; 0x70
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	6878      	ldr	r0, [r7, #4]
 8016e5a:	4798      	blx	r3
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	bf00      	nop
}
 8016e60:	4618      	mov	r0, r3
 8016e62:	3708      	adds	r7, #8
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}

08016e68 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8016e68:	b5b0      	push	{r4, r5, r7, lr}
 8016e6a:	b084      	sub	sp, #16
 8016e6c:	af02      	add	r7, sp, #8
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8016e72:	f7fb fbad 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8016e76:	4604      	mov	r4, r0
 8016e78:	6823      	ldr	r3, [r4, #0]
 8016e7a:	3368      	adds	r3, #104	; 0x68
 8016e7c:	681d      	ldr	r5, [r3, #0]
 8016e7e:	f7fb fbb7 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016e82:	4603      	mov	r3, r0
 8016e84:	9300      	str	r3, [sp, #0]
 8016e86:	f240 13fb 	movw	r3, #507	; 0x1fb
 8016e8a:	4a06      	ldr	r2, [pc, #24]	; (8016ea4 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8016e8c:	4906      	ldr	r1, [pc, #24]	; (8016ea8 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8016e8e:	4620      	mov	r0, r4
 8016e90:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016e92:	2100      	movs	r1, #0
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f7f1 fffb 	bl	8008e90 <_ZN18cpputest_ulonglongC1Ei>
}
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	3708      	adds	r7, #8
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8016ea2:	bf00      	nop
 8016ea4:	08023d64 	.word	0x08023d64
 8016ea8:	08023d80 	.word	0x08023d80

08016eac <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8016eac:	b5b0      	push	{r4, r5, r7, lr}
 8016eae:	b086      	sub	sp, #24
 8016eb0:	af02      	add	r7, sp, #8
 8016eb2:	60f8      	str	r0, [r7, #12]
 8016eb4:	60b9      	str	r1, [r7, #8]
 8016eb6:	4639      	mov	r1, r7
 8016eb8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016ebc:	f7fb fb88 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8016ec0:	4604      	mov	r4, r0
 8016ec2:	6823      	ldr	r3, [r4, #0]
 8016ec4:	3368      	adds	r3, #104	; 0x68
 8016ec6:	681d      	ldr	r5, [r3, #0]
 8016ec8:	f7fb fb92 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	9300      	str	r3, [sp, #0]
 8016ed0:	f240 2301 	movw	r3, #513	; 0x201
 8016ed4:	4a06      	ldr	r2, [pc, #24]	; (8016ef0 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8016ed6:	4907      	ldr	r1, [pc, #28]	; (8016ef4 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8016ed8:	4620      	mov	r0, r4
 8016eda:	47a8      	blx	r5
    return default_value;
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	463b      	mov	r3, r7
 8016ee2:	cb03      	ldmia	r3!, {r0, r1}
 8016ee4:	6010      	str	r0, [r2, #0]
 8016ee6:	6051      	str	r1, [r2, #4]
}
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	3710      	adds	r7, #16
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bdb0      	pop	{r4, r5, r7, pc}
 8016ef0:	08023d64 	.word	0x08023d64
 8016ef4:	08023d80 	.word	0x08023d80

08016ef8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8016ef8:	b5b0      	push	{r4, r5, r7, lr}
 8016efa:	b084      	sub	sp, #16
 8016efc:	af02      	add	r7, sp, #8
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8016f02:	f7fb fb65 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8016f06:	4604      	mov	r4, r0
 8016f08:	6823      	ldr	r3, [r4, #0]
 8016f0a:	3368      	adds	r3, #104	; 0x68
 8016f0c:	681d      	ldr	r5, [r3, #0]
 8016f0e:	f7fb fb6f 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016f12:	4603      	mov	r3, r0
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	f240 2307 	movw	r3, #519	; 0x207
 8016f1a:	4a06      	ldr	r2, [pc, #24]	; (8016f34 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8016f1c:	4906      	ldr	r1, [pc, #24]	; (8016f38 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8016f1e:	4620      	mov	r0, r4
 8016f20:	47a8      	blx	r5
    return cpputest_longlong(0);
 8016f22:	2100      	movs	r1, #0
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f7f1 ffa7 	bl	8008e78 <_ZN17cpputest_longlongC1Ei>
}
 8016f2a:	6878      	ldr	r0, [r7, #4]
 8016f2c:	3708      	adds	r7, #8
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bdb0      	pop	{r4, r5, r7, pc}
 8016f32:	bf00      	nop
 8016f34:	08023d64 	.word	0x08023d64
 8016f38:	08023dac 	.word	0x08023dac

08016f3c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8016f3c:	b5b0      	push	{r4, r5, r7, lr}
 8016f3e:	b086      	sub	sp, #24
 8016f40:	af02      	add	r7, sp, #8
 8016f42:	60f8      	str	r0, [r7, #12]
 8016f44:	60b9      	str	r1, [r7, #8]
 8016f46:	4639      	mov	r1, r7
 8016f48:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016f4c:	f7fb fb40 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8016f50:	4604      	mov	r4, r0
 8016f52:	6823      	ldr	r3, [r4, #0]
 8016f54:	3368      	adds	r3, #104	; 0x68
 8016f56:	681d      	ldr	r5, [r3, #0]
 8016f58:	f7fb fb4a 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	9300      	str	r3, [sp, #0]
 8016f60:	f240 230d 	movw	r3, #525	; 0x20d
 8016f64:	4a06      	ldr	r2, [pc, #24]	; (8016f80 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8016f66:	4907      	ldr	r1, [pc, #28]	; (8016f84 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8016f68:	4620      	mov	r0, r4
 8016f6a:	47a8      	blx	r5
    return default_value;
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	461a      	mov	r2, r3
 8016f70:	463b      	mov	r3, r7
 8016f72:	cb03      	ldmia	r3!, {r0, r1}
 8016f74:	6010      	str	r0, [r2, #0]
 8016f76:	6051      	str	r1, [r2, #4]
}
 8016f78:	68f8      	ldr	r0, [r7, #12]
 8016f7a:	3710      	adds	r7, #16
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8016f80:	08023d64 	.word	0x08023d64
 8016f84:	08023dac 	.word	0x08023dac

08016f88 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	ed2d 8b02 	vpush	{d8}
 8016f8e:	b090      	sub	sp, #64	; 0x40
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	3354      	adds	r3, #84	; 0x54
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	f107 0208 	add.w	r2, r7, #8
 8016fa0:	6879      	ldr	r1, [r7, #4]
 8016fa2:	4610      	mov	r0, r2
 8016fa4:	4798      	blx	r3
 8016fa6:	f107 0308 	add.w	r3, r7, #8
 8016faa:	4618      	mov	r0, r3
 8016fac:	f005 f908 	bl	801c1c0 <_ZNK14MockNamedValue14getDoubleValueEv>
 8016fb0:	eeb0 8a40 	vmov.f32	s16, s0
 8016fb4:	eef0 8a60 	vmov.f32	s17, s1
 8016fb8:	bf00      	nop
 8016fba:	f107 0308 	add.w	r3, r7, #8
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f004 fc72 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8016fc4:	eeb0 7a48 	vmov.f32	s14, s16
 8016fc8:	eef0 7a68 	vmov.f32	s15, s17
}
 8016fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8016fd0:	eef0 0a67 	vmov.f32	s1, s15
 8016fd4:	3740      	adds	r7, #64	; 0x40
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	ecbd 8b02 	vpop	{d8}
 8016fdc:	bd80      	pop	{r7, pc}

08016fde <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8016fde:	b580      	push	{r7, lr}
 8016fe0:	b084      	sub	sp, #16
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	60f8      	str	r0, [r7, #12]
 8016fe6:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	3350      	adds	r3, #80	; 0x50
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	68f8      	ldr	r0, [r7, #12]
 8016ff4:	4798      	blx	r3
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	f083 0301 	eor.w	r3, r3, #1
 8016ffc:	b2db      	uxtb	r3, r3
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d002      	beq.n	8017008 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8017002:	ed97 7b00 	vldr	d7, [r7]
 8017006:	e00a      	b.n	801701e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	3398      	adds	r3, #152	; 0x98
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	68f8      	ldr	r0, [r7, #12]
 8017012:	4798      	blx	r3
 8017014:	eeb0 7a40 	vmov.f32	s14, s0
 8017018:	eef0 7a60 	vmov.f32	s15, s1
 801701c:	bf00      	nop
}
 801701e:	eeb0 0a47 	vmov.f32	s0, s14
 8017022:	eef0 0a67 	vmov.f32	s1, s15
 8017026:	3710      	adds	r7, #16
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}

0801702c <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 801702c:	b590      	push	{r4, r7, lr}
 801702e:	b091      	sub	sp, #68	; 0x44
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	3354      	adds	r3, #84	; 0x54
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	f107 0208 	add.w	r2, r7, #8
 8017040:	6879      	ldr	r1, [r7, #4]
 8017042:	4610      	mov	r0, r2
 8017044:	4798      	blx	r3
 8017046:	f107 0308 	add.w	r3, r7, #8
 801704a:	4618      	mov	r0, r3
 801704c:	f004 ff06 	bl	801be5c <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8017050:	4604      	mov	r4, r0
 8017052:	bf00      	nop
 8017054:	f107 0308 	add.w	r3, r7, #8
 8017058:	4618      	mov	r0, r3
 801705a:	f004 fc25 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 801705e:	4623      	mov	r3, r4
}
 8017060:	4618      	mov	r0, r3
 8017062:	3744      	adds	r7, #68	; 0x44
 8017064:	46bd      	mov	sp, r7
 8017066:	bd90      	pop	{r4, r7, pc}

08017068 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b082      	sub	sp, #8
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	3350      	adds	r3, #80	; 0x50
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	4798      	blx	r3
 801707e:	4603      	mov	r3, r0
 8017080:	f083 0301 	eor.w	r3, r3, #1
 8017084:	b2db      	uxtb	r3, r3
 8017086:	2b00      	cmp	r3, #0
 8017088:	d001      	beq.n	801708e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	e007      	b.n	801709e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	3388      	adds	r3, #136	; 0x88
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	4798      	blx	r3
 801709a:	4603      	mov	r3, r0
 801709c:	bf00      	nop
}
 801709e:	4618      	mov	r0, r3
 80170a0:	3708      	adds	r7, #8
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}

080170a6 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 80170a6:	b580      	push	{r7, lr}
 80170a8:	b082      	sub	sp, #8
 80170aa:	af00      	add	r7, sp, #0
 80170ac:	6078      	str	r0, [r7, #4]
 80170ae:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	3350      	adds	r3, #80	; 0x50
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	4798      	blx	r3
 80170bc:	4603      	mov	r3, r0
 80170be:	f083 0301 	eor.w	r3, r3, #1
 80170c2:	b2db      	uxtb	r3, r3
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d001      	beq.n	80170cc <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	e007      	b.n	80170dc <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	33a0      	adds	r3, #160	; 0xa0
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	4798      	blx	r3
 80170d8:	4603      	mov	r3, r0
 80170da:	bf00      	nop
}
 80170dc:	4618      	mov	r0, r3
 80170de:	3708      	adds	r7, #8
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}

080170e4 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 80170e4:	b590      	push	{r4, r7, lr}
 80170e6:	b091      	sub	sp, #68	; 0x44
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	3354      	adds	r3, #84	; 0x54
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	f107 0208 	add.w	r2, r7, #8
 80170f8:	6879      	ldr	r1, [r7, #4]
 80170fa:	4610      	mov	r0, r2
 80170fc:	4798      	blx	r3
 80170fe:	f107 0308 	add.w	r3, r7, #8
 8017102:	4618      	mov	r0, r3
 8017104:	f005 f8e0 	bl	801c2c8 <_ZNK14MockNamedValue15getPointerValueEv>
 8017108:	4604      	mov	r4, r0
 801710a:	bf00      	nop
 801710c:	f107 0308 	add.w	r3, r7, #8
 8017110:	4618      	mov	r0, r3
 8017112:	f004 fbc9 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8017116:	4623      	mov	r3, r4
}
 8017118:	4618      	mov	r0, r3
 801711a:	3744      	adds	r7, #68	; 0x44
 801711c:	46bd      	mov	sp, r7
 801711e:	bd90      	pop	{r4, r7, pc}

08017120 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8017120:	b590      	push	{r4, r7, lr}
 8017122:	b091      	sub	sp, #68	; 0x44
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	3354      	adds	r3, #84	; 0x54
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	f107 0208 	add.w	r2, r7, #8
 8017134:	6879      	ldr	r1, [r7, #4]
 8017136:	4610      	mov	r0, r2
 8017138:	4798      	blx	r3
 801713a:	f107 0308 	add.w	r3, r7, #8
 801713e:	4618      	mov	r0, r3
 8017140:	f005 f8ea 	bl	801c318 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8017144:	4604      	mov	r4, r0
 8017146:	bf00      	nop
 8017148:	f107 0308 	add.w	r3, r7, #8
 801714c:	4618      	mov	r0, r3
 801714e:	f004 fbab 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8017152:	4623      	mov	r3, r4
}
 8017154:	4618      	mov	r0, r3
 8017156:	3744      	adds	r7, #68	; 0x44
 8017158:	46bd      	mov	sp, r7
 801715a:	bd90      	pop	{r4, r7, pc}

0801715c <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b082      	sub	sp, #8
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	3350      	adds	r3, #80	; 0x50
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	6878      	ldr	r0, [r7, #4]
 8017170:	4798      	blx	r3
 8017172:	4603      	mov	r3, r0
 8017174:	f083 0301 	eor.w	r3, r3, #1
 8017178:	b2db      	uxtb	r3, r3
 801717a:	2b00      	cmp	r3, #0
 801717c:	d001      	beq.n	8017182 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	e007      	b.n	8017192 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	33a8      	adds	r3, #168	; 0xa8
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	6878      	ldr	r0, [r7, #4]
 801718c:	4798      	blx	r3
 801718e:	4603      	mov	r3, r0
 8017190:	bf00      	nop
}
 8017192:	4618      	mov	r0, r3
 8017194:	3708      	adds	r7, #8
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}

0801719a <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801719a:	b590      	push	{r4, r7, lr}
 801719c:	b091      	sub	sp, #68	; 0x44
 801719e:	af00      	add	r7, sp, #0
 80171a0:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	3354      	adds	r3, #84	; 0x54
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	f107 0208 	add.w	r2, r7, #8
 80171ae:	6879      	ldr	r1, [r7, #4]
 80171b0:	4610      	mov	r0, r2
 80171b2:	4798      	blx	r3
 80171b4:	f107 0308 	add.w	r3, r7, #8
 80171b8:	4618      	mov	r0, r3
 80171ba:	f005 f8d5 	bl	801c368 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 80171be:	4604      	mov	r4, r0
 80171c0:	bf00      	nop
 80171c2:	f107 0308 	add.w	r3, r7, #8
 80171c6:	4618      	mov	r0, r3
 80171c8:	f004 fb6e 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 80171cc:	4623      	mov	r3, r4
}
 80171ce:	4618      	mov	r0, r3
 80171d0:	3744      	adds	r7, #68	; 0x44
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd90      	pop	{r4, r7, pc}

080171d6 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 80171d6:	b580      	push	{r7, lr}
 80171d8:	b082      	sub	sp, #8
 80171da:	af00      	add	r7, sp, #0
 80171dc:	6078      	str	r0, [r7, #4]
 80171de:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	3350      	adds	r3, #80	; 0x50
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	4798      	blx	r3
 80171ec:	4603      	mov	r3, r0
 80171ee:	f083 0301 	eor.w	r3, r3, #1
 80171f2:	b2db      	uxtb	r3, r3
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d001      	beq.n	80171fc <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 80171f8:	683b      	ldr	r3, [r7, #0]
 80171fa:	e007      	b.n	801720c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	33b0      	adds	r3, #176	; 0xb0
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	6878      	ldr	r0, [r7, #4]
 8017206:	4798      	blx	r3
 8017208:	4603      	mov	r3, r0
 801720a:	bf00      	nop
}
 801720c:	4618      	mov	r0, r3
 801720e:	3708      	adds	r7, #8
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}

08017214 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b082      	sub	sp, #8
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
 801721c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	3350      	adds	r3, #80	; 0x50
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	6878      	ldr	r0, [r7, #4]
 8017228:	4798      	blx	r3
 801722a:	4603      	mov	r3, r0
 801722c:	f083 0301 	eor.w	r3, r3, #1
 8017230:	b2db      	uxtb	r3, r3
 8017232:	2b00      	cmp	r3, #0
 8017234:	d001      	beq.n	801723a <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	e007      	b.n	801724a <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	3394      	adds	r3, #148	; 0x94
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	4798      	blx	r3
 8017246:	4603      	mov	r3, r0
 8017248:	bf00      	nop
}
 801724a:	4618      	mov	r0, r3
 801724c:	3708      	adds	r7, #8
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}

08017252 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8017252:	b590      	push	{r4, r7, lr}
 8017254:	b091      	sub	sp, #68	; 0x44
 8017256:	af00      	add	r7, sp, #0
 8017258:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	3354      	adds	r3, #84	; 0x54
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	f107 0208 	add.w	r2, r7, #8
 8017266:	6879      	ldr	r1, [r7, #4]
 8017268:	4610      	mov	r0, r2
 801726a:	4798      	blx	r3
 801726c:	f107 0308 	add.w	r3, r7, #8
 8017270:	4618      	mov	r0, r3
 8017272:	f005 f801 	bl	801c278 <_ZNK14MockNamedValue14getStringValueEv>
 8017276:	4604      	mov	r4, r0
 8017278:	bf00      	nop
 801727a:	f107 0308 	add.w	r3, r7, #8
 801727e:	4618      	mov	r0, r3
 8017280:	f004 fb12 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8017284:	4623      	mov	r3, r4
}
 8017286:	4618      	mov	r0, r3
 8017288:	3744      	adds	r7, #68	; 0x44
 801728a:	46bd      	mov	sp, r7
 801728c:	bd90      	pop	{r4, r7, pc}

0801728e <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801728e:	b590      	push	{r4, r7, lr}
 8017290:	b093      	sub	sp, #76	; 0x4c
 8017292:	af00      	add	r7, sp, #0
 8017294:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	3354      	adds	r3, #84	; 0x54
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	f107 0210 	add.w	r2, r7, #16
 80172a2:	6879      	ldr	r1, [r7, #4]
 80172a4:	4610      	mov	r0, r2
 80172a6:	4798      	blx	r3
 80172a8:	f107 0308 	add.w	r3, r7, #8
 80172ac:	f107 0210 	add.w	r2, r7, #16
 80172b0:	4611      	mov	r1, r2
 80172b2:	4618      	mov	r0, r3
 80172b4:	f004 fd8c 	bl	801bdd0 <_ZNK14MockNamedValue7getNameEv>
 80172b8:	f107 0308 	add.w	r3, r7, #8
 80172bc:	4618      	mov	r0, r3
 80172be:	f7f4 f94b 	bl	800b558 <_ZNK12SimpleString7isEmptyEv>
 80172c2:	4603      	mov	r3, r0
 80172c4:	f083 0301 	eor.w	r3, r3, #1
 80172c8:	b2dc      	uxtb	r4, r3
 80172ca:	f107 0308 	add.w	r3, r7, #8
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7f4 f953 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80172d4:	f107 0310 	add.w	r3, r7, #16
 80172d8:	4618      	mov	r0, r3
 80172da:	f004 fae5 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 80172de:	4623      	mov	r3, r4
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	374c      	adds	r7, #76	; 0x4c
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd90      	pop	{r4, r7, pc}

080172e8 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 80172e8:	b590      	push	{r4, r7, lr}
 80172ea:	b095      	sub	sp, #84	; 0x54
 80172ec:	af02      	add	r7, sp, #8
 80172ee:	6078      	str	r0, [r7, #4]
 80172f0:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	33c0      	adds	r3, #192	; 0xc0
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	4798      	blx	r3
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8017304:	687c      	ldr	r4, [r7, #4]
 8017306:	e053      	b.n	80173b0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	331c      	adds	r3, #28
 801730c:	6839      	ldr	r1, [r7, #0]
 801730e:	4618      	mov	r0, r3
 8017310:	f003 f8ca 	bl	801a4a8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	699b      	ldr	r3, [r3, #24]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d109      	bne.n	8017330 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	331c      	adds	r3, #28
 8017320:	4618      	mov	r0, r3
 8017322:	f002 fe20 	bl	8019f66 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d001      	beq.n	8017330 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801732c:	2301      	movs	r3, #1
 801732e:	e000      	b.n	8017332 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8017330:	2300      	movs	r3, #0
 8017332:	2b00      	cmp	r3, #0
 8017334:	d02c      	beq.n	8017390 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	33cc      	adds	r3, #204	; 0xcc
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	4798      	blx	r3
 8017342:	4604      	mov	r4, r0
 8017344:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017348:	6879      	ldr	r1, [r7, #4]
 801734a:	4618      	mov	r0, r3
 801734c:	f7fe fd3f 	bl	8015dce <_ZNK21MockCheckedActualCall7getNameEv>
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017354:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017358:	f107 000c 	add.w	r0, r7, #12
 801735c:	9300      	str	r3, [sp, #0]
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	4621      	mov	r1, r4
 8017362:	f004 f9fb 	bl	801b75c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8017366:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801736a:	4618      	mov	r0, r3
 801736c:	f7f4 f905 	bl	800b57a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	33dc      	adds	r3, #220	; 0xdc
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	f107 020c 	add.w	r2, r7, #12
 801737c:	4611      	mov	r1, r2
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	4798      	blx	r3
        return *this;
 8017382:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8017384:	f107 030c 	add.w	r3, r7, #12
 8017388:	4618      	mov	r0, r3
 801738a:	f000 ffa7 	bl	80182dc <_ZN27MockUnexpectedObjectFailureD1Ev>
 801738e:	e00f      	b.n	80173b0 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	331c      	adds	r3, #28
 8017394:	4618      	mov	r0, r3
 8017396:	f003 f9a7 	bl	801a6e8 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	699b      	ldr	r3, [r3, #24]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d105      	bne.n	80173ae <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	33d8      	adds	r3, #216	; 0xd8
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	4798      	blx	r3
    }

    return *this;
 80173ae:	687c      	ldr	r4, [r7, #4]
 80173b0:	4623      	mov	r3, r4
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	374c      	adds	r7, #76	; 0x4c
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd90      	pop	{r4, r7, pc}
	...

080173bc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 80173bc:	b590      	push	{r4, r7, lr}
 80173be:	b087      	sub	sp, #28
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	607a      	str	r2, [r7, #4]
 80173c8:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 80173ca:	f240 2282 	movw	r2, #642	; 0x282
 80173ce:	4913      	ldr	r1, [pc, #76]	; (801741c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 80173d0:	2018      	movs	r0, #24
 80173d2:	f7f1 f957 	bl	8008684 <_ZnwjPKci>
 80173d6:	4604      	mov	r4, r0
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	687a      	ldr	r2, [r7, #4]
 80173dc:	68b9      	ldr	r1, [r7, #8]
 80173de:	4620      	mov	r0, r4
 80173e0:	f7fe fa48 	bl	8015874 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 80173e4:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d103      	bne.n	80173f6 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	693a      	ldr	r2, [r7, #16]
 80173f2:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 80173f4:	e00d      	b.n	8017412 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173fa:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 80173fc:	697b      	ldr	r3, [r7, #20]
 80173fe:	695b      	ldr	r3, [r3, #20]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d003      	beq.n	801740c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8017404:	697b      	ldr	r3, [r7, #20]
 8017406:	695b      	ldr	r3, [r3, #20]
 8017408:	617b      	str	r3, [r7, #20]
 801740a:	e7f7      	b.n	80173fc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 801740c:	697b      	ldr	r3, [r7, #20]
 801740e:	693a      	ldr	r2, [r7, #16]
 8017410:	615a      	str	r2, [r3, #20]
}
 8017412:	bf00      	nop
 8017414:	371c      	adds	r7, #28
 8017416:	46bd      	mov	sp, r7
 8017418:	bd90      	pop	{r4, r7, pc}
 801741a:	bf00      	nop
 801741c:	08023d64 	.word	0x08023d64

08017420 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8017420:	b580      	push	{r7, lr}
 8017422:	b082      	sub	sp, #8
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	3308      	adds	r3, #8
 801742c:	4618      	mov	r0, r3
 801742e:	f7f4 f8a4 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	4618      	mov	r0, r3
 8017436:	f7f4 f8a0 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	4618      	mov	r0, r3
 801743e:	3708      	adds	r7, #8
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8017444:	b590      	push	{r4, r7, lr}
 8017446:	b085      	sub	sp, #20
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017450:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8017452:	2300      	movs	r3, #0
 8017454:	60bb      	str	r3, [r7, #8]

    while (current) {
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d012      	beq.n	8017482 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	695b      	ldr	r3, [r3, #20]
 8017464:	60fb      	str	r3, [r7, #12]
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	68fa      	ldr	r2, [r7, #12]
 801746a:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 801746c:	68bc      	ldr	r4, [r7, #8]
 801746e:	2c00      	cmp	r4, #0
 8017470:	d0f1      	beq.n	8017456 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8017472:	4620      	mov	r0, r4
 8017474:	f7ff ffd4 	bl	8017420 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8017478:	2118      	movs	r1, #24
 801747a:	4620      	mov	r0, r4
 801747c:	f7f1 f916 	bl	80086ac <_ZdlPvj>
    while (current) {
 8017480:	e7e9      	b.n	8017456 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8017482:	bf00      	nop
 8017484:	3714      	adds	r7, #20
 8017486:	46bd      	mov	sp, r7
 8017488:	bd90      	pop	{r4, r7, pc}
	...

0801748c <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 801748c:	b580      	push	{r7, lr}
 801748e:	b082      	sub	sp, #8
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	4618      	mov	r0, r3
 8017498:	f7fe fc6a 	bl	8015d70 <_ZN14MockActualCallC1Ev>
 801749c:	4a06      	ldr	r2, [pc, #24]	; (80174b8 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	601a      	str	r2, [r3, #0]
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	3304      	adds	r3, #4
 80174a6:	4905      	ldr	r1, [pc, #20]	; (80174bc <_ZN19MockActualCallTraceC1Ev+0x30>)
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7f3 fcae 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
{
}
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	4618      	mov	r0, r3
 80174b2:	3708      	adds	r7, #8
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd80      	pop	{r7, pc}
 80174b8:	080262cc 	.word	0x080262cc
 80174bc:	08023d4c 	.word	0x08023d4c

080174c0 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b082      	sub	sp, #8
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
 80174c8:	4a08      	ldr	r2, [pc, #32]	; (80174ec <_ZN19MockActualCallTraceD1Ev+0x2c>)
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	601a      	str	r2, [r3, #0]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	3304      	adds	r3, #4
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7f4 f851 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	4618      	mov	r0, r3
 80174dc:	f7fe fc58 	bl	8015d90 <_ZN14MockActualCallD1Ev>
{
}
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	4618      	mov	r0, r3
 80174e4:	3708      	adds	r7, #8
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	bf00      	nop
 80174ec:	080262cc 	.word	0x080262cc

080174f0 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b082      	sub	sp, #8
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
}
 80174f8:	6878      	ldr	r0, [r7, #4]
 80174fa:	f7ff ffe1 	bl	80174c0 <_ZN19MockActualCallTraceD1Ev>
 80174fe:	210c      	movs	r1, #12
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f7f1 f8d3 	bl	80086ac <_ZdlPvj>
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	4618      	mov	r0, r3
 801750a:	3708      	adds	r7, #8
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}

08017510 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
 8017518:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	3304      	adds	r3, #4
 801751e:	4907      	ldr	r1, [pc, #28]	; (801753c <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8017520:	4618      	mov	r0, r3
 8017522:	f7f4 f8b9 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	3304      	adds	r3, #4
 801752a:	6839      	ldr	r1, [r7, #0]
 801752c:	4618      	mov	r0, r3
 801752e:	f7f4 f8a1 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    return *this;
 8017532:	687b      	ldr	r3, [r7, #4]
}
 8017534:	4618      	mov	r0, r3
 8017536:	3708      	adds	r7, #8
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	08023e58 	.word	0x08023e58

08017540 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8017540:	b590      	push	{r4, r7, lr}
 8017542:	b085      	sub	sp, #20
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	3304      	adds	r3, #4
 801754e:	490e      	ldr	r1, [pc, #56]	; (8017588 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8017550:	4618      	mov	r0, r3
 8017552:	f7f4 f8a1 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	1d1c      	adds	r4, r3, #4
 801755a:	f107 0308 	add.w	r3, r7, #8
 801755e:	6839      	ldr	r1, [r7, #0]
 8017560:	4618      	mov	r0, r3
 8017562:	f7f4 fd39 	bl	800bfd8 <_Z10StringFromj>
 8017566:	f107 0308 	add.w	r3, r7, #8
 801756a:	4619      	mov	r1, r3
 801756c:	4620      	mov	r0, r4
 801756e:	f7f4 f881 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017572:	f107 0308 	add.w	r3, r7, #8
 8017576:	4618      	mov	r0, r3
 8017578:	f7f3 ffff 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 801757c:	687b      	ldr	r3, [r7, #4]
}
 801757e:	4618      	mov	r0, r3
 8017580:	3714      	adds	r7, #20
 8017582:	46bd      	mov	sp, r7
 8017584:	bd90      	pop	{r4, r7, pc}
 8017586:	bf00      	nop
 8017588:	08023e68 	.word	0x08023e68

0801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
 8017594:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	3304      	adds	r3, #4
 801759a:	490a      	ldr	r1, [pc, #40]	; (80175c4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 801759c:	4618      	mov	r0, r3
 801759e:	f7f4 f87b 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	3304      	adds	r3, #4
 80175a6:	6839      	ldr	r1, [r7, #0]
 80175a8:	4618      	mov	r0, r3
 80175aa:	f7f4 f863 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	3304      	adds	r3, #4
 80175b2:	4905      	ldr	r1, [pc, #20]	; (80175c8 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 80175b4:	4618      	mov	r0, r3
 80175b6:	f7f4 f86f 	bl	800b698 <_ZN12SimpleStringpLEPKc>
}
 80175ba:	bf00      	nop
 80175bc:	3708      	adds	r7, #8
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	08023e78 	.word	0x08023e78
 80175c8:	08023e7c 	.word	0x08023e7c

080175cc <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 80175cc:	b590      	push	{r4, r7, lr}
 80175ce:	b087      	sub	sp, #28
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	60f8      	str	r0, [r7, #12]
 80175d4:	60b9      	str	r1, [r7, #8]
 80175d6:	4613      	mov	r3, r2
 80175d8:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 80175da:	68b9      	ldr	r1, [r7, #8]
 80175dc:	68f8      	ldr	r0, [r7, #12]
 80175de:	f7ff ffd5 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	1d1c      	adds	r4, r3, #4
 80175e6:	f107 0310 	add.w	r3, r7, #16
 80175ea:	79fa      	ldrb	r2, [r7, #7]
 80175ec:	4611      	mov	r1, r2
 80175ee:	4618      	mov	r0, r3
 80175f0:	f7f4 fa34 	bl	800ba5c <_Z10StringFromb>
 80175f4:	f107 0310 	add.w	r3, r7, #16
 80175f8:	4619      	mov	r1, r3
 80175fa:	4620      	mov	r0, r4
 80175fc:	f7f4 f83a 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017600:	f107 0310 	add.w	r3, r7, #16
 8017604:	4618      	mov	r0, r3
 8017606:	f7f3 ffb8 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 801760a:	68fb      	ldr	r3, [r7, #12]
}
 801760c:	4618      	mov	r0, r3
 801760e:	371c      	adds	r7, #28
 8017610:	46bd      	mov	sp, r7
 8017612:	bd90      	pop	{r4, r7, pc}

08017614 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017614:	b590      	push	{r4, r7, lr}
 8017616:	b08f      	sub	sp, #60	; 0x3c
 8017618:	af00      	add	r7, sp, #0
 801761a:	60f8      	str	r0, [r7, #12]
 801761c:	60b9      	str	r1, [r7, #8]
 801761e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017620:	68b9      	ldr	r1, [r7, #8]
 8017622:	68f8      	ldr	r0, [r7, #12]
 8017624:	f7ff ffb2 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	1d1c      	adds	r4, r3, #4
 801762c:	f107 0320 	add.w	r3, r7, #32
 8017630:	6879      	ldr	r1, [r7, #4]
 8017632:	4618      	mov	r0, r3
 8017634:	f7f4 fcd0 	bl	800bfd8 <_Z10StringFromj>
 8017638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801763c:	491f      	ldr	r1, [pc, #124]	; (80176bc <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 801763e:	4618      	mov	r0, r3
 8017640:	f7f3 fbe3 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8017644:	f107 0318 	add.w	r3, r7, #24
 8017648:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801764c:	f107 0120 	add.w	r1, r7, #32
 8017650:	4618      	mov	r0, r3
 8017652:	f7f3 fff4 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 8017656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801765a:	6879      	ldr	r1, [r7, #4]
 801765c:	4618      	mov	r0, r3
 801765e:	f7f4 fb5f 	bl	800bd20 <_Z30BracketsFormattedHexStringFromj>
 8017662:	f107 0310 	add.w	r3, r7, #16
 8017666:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801766a:	f107 0118 	add.w	r1, r7, #24
 801766e:	4618      	mov	r0, r3
 8017670:	f7f3 ffe5 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 8017674:	f107 0310 	add.w	r3, r7, #16
 8017678:	4619      	mov	r1, r3
 801767a:	4620      	mov	r0, r4
 801767c:	f7f3 fffa 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017680:	f107 0310 	add.w	r3, r7, #16
 8017684:	4618      	mov	r0, r3
 8017686:	f7f3 ff78 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801768a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801768e:	4618      	mov	r0, r3
 8017690:	f7f3 ff73 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8017694:	f107 0318 	add.w	r3, r7, #24
 8017698:	4618      	mov	r0, r3
 801769a:	f7f3 ff6e 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801769e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7f3 ff69 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80176a8:	f107 0320 	add.w	r3, r7, #32
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7f3 ff64 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 80176b2:	68fb      	ldr	r3, [r7, #12]
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	373c      	adds	r7, #60	; 0x3c
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd90      	pop	{r4, r7, pc}
 80176bc:	08023e78 	.word	0x08023e78

080176c0 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 80176c0:	b590      	push	{r4, r7, lr}
 80176c2:	b08f      	sub	sp, #60	; 0x3c
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	60b9      	str	r1, [r7, #8]
 80176ca:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80176cc:	68b9      	ldr	r1, [r7, #8]
 80176ce:	68f8      	ldr	r0, [r7, #12]
 80176d0:	f7ff ff5c 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	1d1c      	adds	r4, r3, #4
 80176d8:	f107 0320 	add.w	r3, r7, #32
 80176dc:	6879      	ldr	r1, [r7, #4]
 80176de:	4618      	mov	r0, r3
 80176e0:	f7f4 fa12 	bl	800bb08 <_Z10StringFromi>
 80176e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176e8:	491f      	ldr	r1, [pc, #124]	; (8017768 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7f3 fb8d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80176f0:	f107 0318 	add.w	r3, r7, #24
 80176f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80176f8:	f107 0120 	add.w	r1, r7, #32
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7f3 ff9e 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 8017702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017706:	6879      	ldr	r1, [r7, #4]
 8017708:	4618      	mov	r0, r3
 801770a:	f7f4 faed 	bl	800bce8 <_Z30BracketsFormattedHexStringFromi>
 801770e:	f107 0310 	add.w	r3, r7, #16
 8017712:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017716:	f107 0118 	add.w	r1, r7, #24
 801771a:	4618      	mov	r0, r3
 801771c:	f7f3 ff8f 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 8017720:	f107 0310 	add.w	r3, r7, #16
 8017724:	4619      	mov	r1, r3
 8017726:	4620      	mov	r0, r4
 8017728:	f7f3 ffa4 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801772c:	f107 0310 	add.w	r3, r7, #16
 8017730:	4618      	mov	r0, r3
 8017732:	f7f3 ff22 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8017736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801773a:	4618      	mov	r0, r3
 801773c:	f7f3 ff1d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8017740:	f107 0318 	add.w	r3, r7, #24
 8017744:	4618      	mov	r0, r3
 8017746:	f7f3 ff18 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801774a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801774e:	4618      	mov	r0, r3
 8017750:	f7f3 ff13 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8017754:	f107 0320 	add.w	r3, r7, #32
 8017758:	4618      	mov	r0, r3
 801775a:	f7f3 ff0e 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 801775e:	68fb      	ldr	r3, [r7, #12]
}
 8017760:	4618      	mov	r0, r3
 8017762:	373c      	adds	r7, #60	; 0x3c
 8017764:	46bd      	mov	sp, r7
 8017766:	bd90      	pop	{r4, r7, pc}
 8017768:	08023e78 	.word	0x08023e78

0801776c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801776c:	b590      	push	{r4, r7, lr}
 801776e:	b08f      	sub	sp, #60	; 0x3c
 8017770:	af00      	add	r7, sp, #0
 8017772:	60f8      	str	r0, [r7, #12]
 8017774:	60b9      	str	r1, [r7, #8]
 8017776:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017778:	68b9      	ldr	r1, [r7, #8]
 801777a:	68f8      	ldr	r0, [r7, #12]
 801777c:	f7ff ff06 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	1d1c      	adds	r4, r3, #4
 8017784:	f107 0320 	add.w	r3, r7, #32
 8017788:	6879      	ldr	r1, [r7, #4]
 801778a:	4618      	mov	r0, r3
 801778c:	f7f4 fc36 	bl	800bffc <_Z10StringFromm>
 8017790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017794:	491f      	ldr	r1, [pc, #124]	; (8017814 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8017796:	4618      	mov	r0, r3
 8017798:	f7f3 fb37 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801779c:	f107 0318 	add.w	r3, r7, #24
 80177a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80177a4:	f107 0120 	add.w	r1, r7, #32
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7f3 ff48 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 80177ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80177b2:	6879      	ldr	r1, [r7, #4]
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7f4 faeb 	bl	800bd90 <_Z30BracketsFormattedHexStringFromm>
 80177ba:	f107 0310 	add.w	r3, r7, #16
 80177be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80177c2:	f107 0118 	add.w	r1, r7, #24
 80177c6:	4618      	mov	r0, r3
 80177c8:	f7f3 ff39 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 80177cc:	f107 0310 	add.w	r3, r7, #16
 80177d0:	4619      	mov	r1, r3
 80177d2:	4620      	mov	r0, r4
 80177d4:	f7f3 ff4e 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 80177d8:	f107 0310 	add.w	r3, r7, #16
 80177dc:	4618      	mov	r0, r3
 80177de:	f7f3 fecc 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80177e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80177e6:	4618      	mov	r0, r3
 80177e8:	f7f3 fec7 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80177ec:	f107 0318 	add.w	r3, r7, #24
 80177f0:	4618      	mov	r0, r3
 80177f2:	f7f3 fec2 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80177f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7f3 febd 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8017800:	f107 0320 	add.w	r3, r7, #32
 8017804:	4618      	mov	r0, r3
 8017806:	f7f3 feb8 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 801780a:	68fb      	ldr	r3, [r7, #12]
}
 801780c:	4618      	mov	r0, r3
 801780e:	373c      	adds	r7, #60	; 0x3c
 8017810:	46bd      	mov	sp, r7
 8017812:	bd90      	pop	{r4, r7, pc}
 8017814:	08023e78 	.word	0x08023e78

08017818 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8017818:	b590      	push	{r4, r7, lr}
 801781a:	b08f      	sub	sp, #60	; 0x3c
 801781c:	af00      	add	r7, sp, #0
 801781e:	60f8      	str	r0, [r7, #12]
 8017820:	60b9      	str	r1, [r7, #8]
 8017822:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017824:	68b9      	ldr	r1, [r7, #8]
 8017826:	68f8      	ldr	r0, [r7, #12]
 8017828:	f7ff feb0 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	1d1c      	adds	r4, r3, #4
 8017830:	f107 0320 	add.w	r3, r7, #32
 8017834:	6879      	ldr	r1, [r7, #4]
 8017836:	4618      	mov	r0, r3
 8017838:	f7f4 f978 	bl	800bb2c <_Z10StringFroml>
 801783c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017840:	491f      	ldr	r1, [pc, #124]	; (80178c0 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8017842:	4618      	mov	r0, r3
 8017844:	f7f3 fae1 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8017848:	f107 0318 	add.w	r3, r7, #24
 801784c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017850:	f107 0120 	add.w	r1, r7, #32
 8017854:	4618      	mov	r0, r3
 8017856:	f7f3 fef2 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801785a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801785e:	6879      	ldr	r1, [r7, #4]
 8017860:	4618      	mov	r0, r3
 8017862:	f7f4 fa79 	bl	800bd58 <_Z30BracketsFormattedHexStringFroml>
 8017866:	f107 0310 	add.w	r3, r7, #16
 801786a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801786e:	f107 0118 	add.w	r1, r7, #24
 8017872:	4618      	mov	r0, r3
 8017874:	f7f3 fee3 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 8017878:	f107 0310 	add.w	r3, r7, #16
 801787c:	4619      	mov	r1, r3
 801787e:	4620      	mov	r0, r4
 8017880:	f7f3 fef8 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017884:	f107 0310 	add.w	r3, r7, #16
 8017888:	4618      	mov	r0, r3
 801788a:	f7f3 fe76 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801788e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017892:	4618      	mov	r0, r3
 8017894:	f7f3 fe71 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8017898:	f107 0318 	add.w	r3, r7, #24
 801789c:	4618      	mov	r0, r3
 801789e:	f7f3 fe6c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80178a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7f3 fe67 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80178ac:	f107 0320 	add.w	r3, r7, #32
 80178b0:	4618      	mov	r0, r3
 80178b2:	f7f3 fe62 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 80178b6:	68fb      	ldr	r3, [r7, #12]
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	373c      	adds	r7, #60	; 0x3c
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd90      	pop	{r4, r7, pc}
 80178c0:	08023e78 	.word	0x08023e78

080178c4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80178c4:	b5b0      	push	{r4, r5, r7, lr}
 80178c6:	b086      	sub	sp, #24
 80178c8:	af02      	add	r7, sp, #8
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	4639      	mov	r1, r7
 80178d0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80178d4:	f7fa fe7c 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 80178d8:	4604      	mov	r4, r0
 80178da:	6823      	ldr	r3, [r4, #0]
 80178dc:	3368      	adds	r3, #104	; 0x68
 80178de:	681d      	ldr	r5, [r3, #0]
 80178e0:	f7fa fe86 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80178e4:	4603      	mov	r3, r0
 80178e6:	9300      	str	r3, [sp, #0]
 80178e8:	f240 23ee 	movw	r3, #750	; 0x2ee
 80178ec:	4a04      	ldr	r2, [pc, #16]	; (8017900 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80178ee:	4905      	ldr	r1, [pc, #20]	; (8017904 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80178f0:	4620      	mov	r0, r4
 80178f2:	47a8      	blx	r5
    return *this;
 80178f4:	68fb      	ldr	r3, [r7, #12]
}
 80178f6:	4618      	mov	r0, r3
 80178f8:	3710      	adds	r7, #16
 80178fa:	46bd      	mov	sp, r7
 80178fc:	bdb0      	pop	{r4, r5, r7, pc}
 80178fe:	bf00      	nop
 8017900:	08023d64 	.word	0x08023d64
 8017904:	08023d80 	.word	0x08023d80

08017908 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017908:	b5b0      	push	{r4, r5, r7, lr}
 801790a:	b086      	sub	sp, #24
 801790c:	af02      	add	r7, sp, #8
 801790e:	60f8      	str	r0, [r7, #12]
 8017910:	60b9      	str	r1, [r7, #8]
 8017912:	4639      	mov	r1, r7
 8017914:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017918:	f7fa fe5a 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801791c:	4604      	mov	r4, r0
 801791e:	6823      	ldr	r3, [r4, #0]
 8017920:	3368      	adds	r3, #104	; 0x68
 8017922:	681d      	ldr	r5, [r3, #0]
 8017924:	f7fa fe64 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017928:	4603      	mov	r3, r0
 801792a:	9300      	str	r3, [sp, #0]
 801792c:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8017930:	4a04      	ldr	r2, [pc, #16]	; (8017944 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017932:	4905      	ldr	r1, [pc, #20]	; (8017948 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8017934:	4620      	mov	r0, r4
 8017936:	47a8      	blx	r5
    return *this;
 8017938:	68fb      	ldr	r3, [r7, #12]
}
 801793a:	4618      	mov	r0, r3
 801793c:	3710      	adds	r7, #16
 801793e:	46bd      	mov	sp, r7
 8017940:	bdb0      	pop	{r4, r5, r7, pc}
 8017942:	bf00      	nop
 8017944:	08023d64 	.word	0x08023d64
 8017948:	08023dac 	.word	0x08023dac

0801794c <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801794c:	b590      	push	{r4, r7, lr}
 801794e:	b087      	sub	sp, #28
 8017950:	af00      	add	r7, sp, #0
 8017952:	60f8      	str	r0, [r7, #12]
 8017954:	60b9      	str	r1, [r7, #8]
 8017956:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801795a:	68b9      	ldr	r1, [r7, #8]
 801795c:	68f8      	ldr	r0, [r7, #12]
 801795e:	f7ff fe15 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	1d1c      	adds	r4, r3, #4
 8017966:	f107 0310 	add.w	r3, r7, #16
 801796a:	2106      	movs	r1, #6
 801796c:	ed97 0b00 	vldr	d0, [r7]
 8017970:	4618      	mov	r0, r3
 8017972:	f7f4 fac7 	bl	800bf04 <_Z10StringFromdi>
 8017976:	f107 0310 	add.w	r3, r7, #16
 801797a:	4619      	mov	r1, r3
 801797c:	4620      	mov	r0, r4
 801797e:	f7f3 fe79 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017982:	f107 0310 	add.w	r3, r7, #16
 8017986:	4618      	mov	r0, r3
 8017988:	f7f3 fdf7 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 801798c:	68fb      	ldr	r3, [r7, #12]
}
 801798e:	4618      	mov	r0, r3
 8017990:	371c      	adds	r7, #28
 8017992:	46bd      	mov	sp, r7
 8017994:	bd90      	pop	{r4, r7, pc}

08017996 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8017996:	b590      	push	{r4, r7, lr}
 8017998:	b087      	sub	sp, #28
 801799a:	af00      	add	r7, sp, #0
 801799c:	60f8      	str	r0, [r7, #12]
 801799e:	60b9      	str	r1, [r7, #8]
 80179a0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80179a2:	68b9      	ldr	r1, [r7, #8]
 80179a4:	68f8      	ldr	r0, [r7, #12]
 80179a6:	f7ff fdf1 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	1d1c      	adds	r4, r3, #4
 80179ae:	f107 0310 	add.w	r3, r7, #16
 80179b2:	6879      	ldr	r1, [r7, #4]
 80179b4:	4618      	mov	r0, r3
 80179b6:	f7f4 f86d 	bl	800ba94 <_Z10StringFromPKc>
 80179ba:	f107 0310 	add.w	r3, r7, #16
 80179be:	4619      	mov	r1, r3
 80179c0:	4620      	mov	r0, r4
 80179c2:	f7f3 fe57 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 80179c6:	f107 0310 	add.w	r3, r7, #16
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7f3 fdd5 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 80179d0:	68fb      	ldr	r3, [r7, #12]
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	371c      	adds	r7, #28
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd90      	pop	{r4, r7, pc}

080179da <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 80179da:	b590      	push	{r4, r7, lr}
 80179dc:	b087      	sub	sp, #28
 80179de:	af00      	add	r7, sp, #0
 80179e0:	60f8      	str	r0, [r7, #12]
 80179e2:	60b9      	str	r1, [r7, #8]
 80179e4:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80179e6:	68b9      	ldr	r1, [r7, #8]
 80179e8:	68f8      	ldr	r0, [r7, #12]
 80179ea:	f7ff fdcf 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	1d1c      	adds	r4, r3, #4
 80179f2:	f107 0310 	add.w	r3, r7, #16
 80179f6:	6879      	ldr	r1, [r7, #4]
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7f4 f8a9 	bl	800bb50 <_Z10StringFromPKv>
 80179fe:	f107 0310 	add.w	r3, r7, #16
 8017a02:	4619      	mov	r1, r3
 8017a04:	4620      	mov	r0, r4
 8017a06:	f7f3 fe35 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017a0a:	f107 0310 	add.w	r3, r7, #16
 8017a0e:	4618      	mov	r0, r3
 8017a10:	f7f3 fdb3 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 8017a14:	68fb      	ldr	r3, [r7, #12]
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	371c      	adds	r7, #28
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd90      	pop	{r4, r7, pc}

08017a1e <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017a1e:	b590      	push	{r4, r7, lr}
 8017a20:	b087      	sub	sp, #28
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	60f8      	str	r0, [r7, #12]
 8017a26:	60b9      	str	r1, [r7, #8]
 8017a28:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017a2a:	68b9      	ldr	r1, [r7, #8]
 8017a2c:	68f8      	ldr	r0, [r7, #12]
 8017a2e:	f7ff fdad 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	1d1c      	adds	r4, r3, #4
 8017a36:	f107 0310 	add.w	r3, r7, #16
 8017a3a:	6879      	ldr	r1, [r7, #4]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7f4 f887 	bl	800bb50 <_Z10StringFromPKv>
 8017a42:	f107 0310 	add.w	r3, r7, #16
 8017a46:	4619      	mov	r1, r3
 8017a48:	4620      	mov	r0, r4
 8017a4a:	f7f3 fe13 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017a4e:	f107 0310 	add.w	r3, r7, #16
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7f3 fd91 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 8017a58:	68fb      	ldr	r3, [r7, #12]
}
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	371c      	adds	r7, #28
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd90      	pop	{r4, r7, pc}

08017a62 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8017a62:	b590      	push	{r4, r7, lr}
 8017a64:	b087      	sub	sp, #28
 8017a66:	af00      	add	r7, sp, #0
 8017a68:	60f8      	str	r0, [r7, #12]
 8017a6a:	60b9      	str	r1, [r7, #8]
 8017a6c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017a6e:	68b9      	ldr	r1, [r7, #8]
 8017a70:	68f8      	ldr	r0, [r7, #12]
 8017a72:	f7ff fd8b 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	1d1c      	adds	r4, r3, #4
 8017a7a:	f107 0310 	add.w	r3, r7, #16
 8017a7e:	6879      	ldr	r1, [r7, #4]
 8017a80:	4618      	mov	r0, r3
 8017a82:	f7f4 f88f 	bl	800bba4 <_Z10StringFromPFvvE>
 8017a86:	f107 0310 	add.w	r3, r7, #16
 8017a8a:	4619      	mov	r1, r3
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	f7f3 fdf1 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017a92:	f107 0310 	add.w	r3, r7, #16
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7f3 fd6f 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 8017a9c:	68fb      	ldr	r3, [r7, #12]
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	371c      	adds	r7, #28
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd90      	pop	{r4, r7, pc}

08017aa6 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8017aa6:	b590      	push	{r4, r7, lr}
 8017aa8:	b087      	sub	sp, #28
 8017aaa:	af00      	add	r7, sp, #0
 8017aac:	60f8      	str	r0, [r7, #12]
 8017aae:	60b9      	str	r1, [r7, #8]
 8017ab0:	607a      	str	r2, [r7, #4]
 8017ab2:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8017ab4:	68b9      	ldr	r1, [r7, #8]
 8017ab6:	68f8      	ldr	r0, [r7, #12]
 8017ab8:	f7ff fd68 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	1d1c      	adds	r4, r3, #4
 8017ac0:	f107 0310 	add.w	r3, r7, #16
 8017ac4:	683a      	ldr	r2, [r7, #0]
 8017ac6:	6879      	ldr	r1, [r7, #4]
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f7f4 fbaf 	bl	800c22c <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8017ace:	f107 0310 	add.w	r3, r7, #16
 8017ad2:	4619      	mov	r1, r3
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	f7f3 fdcd 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017ada:	f107 0310 	add.w	r3, r7, #16
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f7f3 fd4b 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 8017ae4:	68fb      	ldr	r3, [r7, #12]
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	371c      	adds	r7, #28
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd90      	pop	{r4, r7, pc}
	...

08017af0 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8017af0:	b590      	push	{r4, r7, lr}
 8017af2:	b087      	sub	sp, #28
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	60f8      	str	r0, [r7, #12]
 8017af8:	60b9      	str	r1, [r7, #8]
 8017afa:	607a      	str	r2, [r7, #4]
 8017afc:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	3304      	adds	r3, #4
 8017b02:	4913      	ldr	r1, [pc, #76]	; (8017b50 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8017b04:	4618      	mov	r0, r3
 8017b06:	f7f3 fdc7 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	3304      	adds	r3, #4
 8017b0e:	68b9      	ldr	r1, [r7, #8]
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7f3 fdaf 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8017b16:	6879      	ldr	r1, [r7, #4]
 8017b18:	68f8      	ldr	r0, [r7, #12]
 8017b1a:	f7ff fd37 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	1d1c      	adds	r4, r3, #4
 8017b22:	f107 0310 	add.w	r3, r7, #16
 8017b26:	6839      	ldr	r1, [r7, #0]
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7f4 f811 	bl	800bb50 <_Z10StringFromPKv>
 8017b2e:	f107 0310 	add.w	r3, r7, #16
 8017b32:	4619      	mov	r1, r3
 8017b34:	4620      	mov	r0, r4
 8017b36:	f7f3 fd9d 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017b3a:	f107 0310 	add.w	r3, r7, #16
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f7f3 fd1b 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 8017b44:	68fb      	ldr	r3, [r7, #12]
}
 8017b46:	4618      	mov	r0, r3
 8017b48:	371c      	adds	r7, #28
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	bd90      	pop	{r4, r7, pc}
 8017b4e:	bf00      	nop
 8017b50:	08023e78 	.word	0x08023e78

08017b54 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8017b54:	b590      	push	{r4, r7, lr}
 8017b56:	b087      	sub	sp, #28
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	60f8      	str	r0, [r7, #12]
 8017b5c:	60b9      	str	r1, [r7, #8]
 8017b5e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017b60:	68b9      	ldr	r1, [r7, #8]
 8017b62:	68f8      	ldr	r0, [r7, #12]
 8017b64:	f7ff fd12 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	1d1c      	adds	r4, r3, #4
 8017b6c:	f107 0310 	add.w	r3, r7, #16
 8017b70:	6879      	ldr	r1, [r7, #4]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7f3 ffec 	bl	800bb50 <_Z10StringFromPKv>
 8017b78:	f107 0310 	add.w	r3, r7, #16
 8017b7c:	4619      	mov	r1, r3
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f7f3 fd78 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017b84:	f107 0310 	add.w	r3, r7, #16
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7f3 fcf6 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 8017b8e:	68fb      	ldr	r3, [r7, #12]
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	371c      	adds	r7, #28
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd90      	pop	{r4, r7, pc}

08017b98 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8017b98:	b590      	push	{r4, r7, lr}
 8017b9a:	b087      	sub	sp, #28
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	60f8      	str	r0, [r7, #12]
 8017ba0:	60b9      	str	r1, [r7, #8]
 8017ba2:	607a      	str	r2, [r7, #4]
 8017ba4:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	3304      	adds	r3, #4
 8017baa:	4913      	ldr	r1, [pc, #76]	; (8017bf8 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8017bac:	4618      	mov	r0, r3
 8017bae:	f7f3 fd73 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	3304      	adds	r3, #4
 8017bb6:	68b9      	ldr	r1, [r7, #8]
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7f3 fd5b 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8017bbe:	6879      	ldr	r1, [r7, #4]
 8017bc0:	68f8      	ldr	r0, [r7, #12]
 8017bc2:	f7ff fce3 	bl	801758c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	1d1c      	adds	r4, r3, #4
 8017bca:	f107 0310 	add.w	r3, r7, #16
 8017bce:	6839      	ldr	r1, [r7, #0]
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f7f3 ffbd 	bl	800bb50 <_Z10StringFromPKv>
 8017bd6:	f107 0310 	add.w	r3, r7, #16
 8017bda:	4619      	mov	r1, r3
 8017bdc:	4620      	mov	r0, r4
 8017bde:	f7f3 fd49 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017be2:	f107 0310 	add.w	r3, r7, #16
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7f3 fcc7 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 8017bec:	68fb      	ldr	r3, [r7, #12]
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	371c      	adds	r7, #28
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd90      	pop	{r4, r7, pc}
 8017bf6:	bf00      	nop
 8017bf8:	08023e78 	.word	0x08023e78

08017bfc <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8017bfc:	b480      	push	{r7}
 8017bfe:	b083      	sub	sp, #12
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	6078      	str	r0, [r7, #4]
    return false;
 8017c04:	2300      	movs	r3, #0
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	370c      	adds	r7, #12
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c10:	4770      	bx	lr
	...

08017c14 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b084      	sub	sp, #16
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
 8017c1c:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8017c1e:	f107 0308 	add.w	r3, r7, #8
 8017c22:	4909      	ldr	r1, [pc, #36]	; (8017c48 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7f3 f8f0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8017c2a:	f107 0308 	add.w	r3, r7, #8
 8017c2e:	4619      	mov	r1, r3
 8017c30:	6878      	ldr	r0, [r7, #4]
 8017c32:	f003 fe0f 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017c36:	f107 0308 	add.w	r3, r7, #8
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7f3 fc9d 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8017c40:	6878      	ldr	r0, [r7, #4]
 8017c42:	3710      	adds	r7, #16
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}
 8017c48:	08023d4c 	.word	0x08023d4c

08017c4c <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8017c4c:	b480      	push	{r7}
 8017c4e:	b083      	sub	sp, #12
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
    return 0;
 8017c54:	2300      	movs	r3, #0
}
 8017c56:	4618      	mov	r0, r3
 8017c58:	370c      	adds	r7, #12
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c60:	4770      	bx	lr

08017c62 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8017c62:	b480      	push	{r7}
 8017c64:	b083      	sub	sp, #12
 8017c66:	af00      	add	r7, sp, #0
 8017c68:	6078      	str	r0, [r7, #4]
    return 0;
 8017c6a:	2300      	movs	r3, #0
}
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	370c      	adds	r7, #12
 8017c70:	46bd      	mov	sp, r7
 8017c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c76:	4770      	bx	lr

08017c78 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8017c78:	b480      	push	{r7}
 8017c7a:	b083      	sub	sp, #12
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
 8017c80:	6039      	str	r1, [r7, #0]
    return 0;
 8017c82:	2300      	movs	r3, #0
}
 8017c84:	4618      	mov	r0, r3
 8017c86:	370c      	adds	r7, #12
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8e:	4770      	bx	lr

08017c90 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8017c90:	b480      	push	{r7}
 8017c92:	b083      	sub	sp, #12
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
 8017c98:	6039      	str	r1, [r7, #0]
    return 0;
 8017c9a:	2300      	movs	r3, #0
}
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	370c      	adds	r7, #12
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca6:	4770      	bx	lr

08017ca8 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8017ca8:	b5b0      	push	{r4, r5, r7, lr}
 8017caa:	b084      	sub	sp, #16
 8017cac:	af02      	add	r7, sp, #8
 8017cae:	6078      	str	r0, [r7, #4]
 8017cb0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8017cb2:	f7fa fc8d 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	6823      	ldr	r3, [r4, #0]
 8017cba:	3368      	adds	r3, #104	; 0x68
 8017cbc:	681d      	ldr	r5, [r3, #0]
 8017cbe:	f7fa fc97 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	9300      	str	r3, [sp, #0]
 8017cc6:	f240 3375 	movw	r3, #885	; 0x375
 8017cca:	4a06      	ldr	r2, [pc, #24]	; (8017ce4 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8017ccc:	4906      	ldr	r1, [pc, #24]	; (8017ce8 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8017cce:	4620      	mov	r0, r4
 8017cd0:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017cd2:	2100      	movs	r1, #0
 8017cd4:	6878      	ldr	r0, [r7, #4]
 8017cd6:	f7f1 f8cf 	bl	8008e78 <_ZN17cpputest_longlongC1Ei>
}
 8017cda:	6878      	ldr	r0, [r7, #4]
 8017cdc:	3708      	adds	r7, #8
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	08023d64 	.word	0x08023d64
 8017ce8:	08023dac 	.word	0x08023dac

08017cec <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8017cec:	b5b0      	push	{r4, r5, r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af02      	add	r7, sp, #8
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8017cf6:	f7fa fc6b 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8017cfa:	4604      	mov	r4, r0
 8017cfc:	6823      	ldr	r3, [r4, #0]
 8017cfe:	3368      	adds	r3, #104	; 0x68
 8017d00:	681d      	ldr	r5, [r3, #0]
 8017d02:	f7fa fc75 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017d06:	4603      	mov	r3, r0
 8017d08:	9300      	str	r3, [sp, #0]
 8017d0a:	f240 337b 	movw	r3, #891	; 0x37b
 8017d0e:	4a06      	ldr	r2, [pc, #24]	; (8017d28 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8017d10:	4906      	ldr	r1, [pc, #24]	; (8017d2c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8017d12:	4620      	mov	r0, r4
 8017d14:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8017d16:	2100      	movs	r1, #0
 8017d18:	6878      	ldr	r0, [r7, #4]
 8017d1a:	f7f1 f8b9 	bl	8008e90 <_ZN18cpputest_ulonglongC1Ei>
}
 8017d1e:	6878      	ldr	r0, [r7, #4]
 8017d20:	3708      	adds	r7, #8
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bdb0      	pop	{r4, r5, r7, pc}
 8017d26:	bf00      	nop
 8017d28:	08023d64 	.word	0x08023d64
 8017d2c:	08023d80 	.word	0x08023d80

08017d30 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8017d30:	b5b0      	push	{r4, r5, r7, lr}
 8017d32:	b086      	sub	sp, #24
 8017d34:	af02      	add	r7, sp, #8
 8017d36:	60f8      	str	r0, [r7, #12]
 8017d38:	60b9      	str	r1, [r7, #8]
 8017d3a:	4639      	mov	r1, r7
 8017d3c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017d40:	f7fa fc46 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8017d44:	4604      	mov	r4, r0
 8017d46:	6823      	ldr	r3, [r4, #0]
 8017d48:	3368      	adds	r3, #104	; 0x68
 8017d4a:	681d      	ldr	r5, [r3, #0]
 8017d4c:	f7fa fc50 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017d50:	4603      	mov	r3, r0
 8017d52:	9300      	str	r3, [sp, #0]
 8017d54:	f240 3381 	movw	r3, #897	; 0x381
 8017d58:	4a05      	ldr	r2, [pc, #20]	; (8017d70 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8017d5a:	4906      	ldr	r1, [pc, #24]	; (8017d74 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8017d60:	2100      	movs	r1, #0
 8017d62:	68f8      	ldr	r0, [r7, #12]
 8017d64:	f7f1 f894 	bl	8008e90 <_ZN18cpputest_ulonglongC1Ei>
}
 8017d68:	68f8      	ldr	r0, [r7, #12]
 8017d6a:	3710      	adds	r7, #16
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8017d70:	08023d64 	.word	0x08023d64
 8017d74:	08023d80 	.word	0x08023d80

08017d78 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8017d78:	b5b0      	push	{r4, r5, r7, lr}
 8017d7a:	b086      	sub	sp, #24
 8017d7c:	af02      	add	r7, sp, #8
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	4639      	mov	r1, r7
 8017d84:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017d88:	f7fa fc22 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8017d8c:	4604      	mov	r4, r0
 8017d8e:	6823      	ldr	r3, [r4, #0]
 8017d90:	3368      	adds	r3, #104	; 0x68
 8017d92:	681d      	ldr	r5, [r3, #0]
 8017d94:	f7fa fc2c 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	9300      	str	r3, [sp, #0]
 8017d9c:	f240 3387 	movw	r3, #903	; 0x387
 8017da0:	4a05      	ldr	r2, [pc, #20]	; (8017db8 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8017da2:	4906      	ldr	r1, [pc, #24]	; (8017dbc <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8017da4:	4620      	mov	r0, r4
 8017da6:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017da8:	2100      	movs	r1, #0
 8017daa:	68f8      	ldr	r0, [r7, #12]
 8017dac:	f7f1 f864 	bl	8008e78 <_ZN17cpputest_longlongC1Ei>
}
 8017db0:	68f8      	ldr	r0, [r7, #12]
 8017db2:	3710      	adds	r7, #16
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bdb0      	pop	{r4, r5, r7, pc}
 8017db8:	08023d64 	.word	0x08023d64
 8017dbc:	08023dac 	.word	0x08023dac

08017dc0 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8017dc0:	b480      	push	{r7}
 8017dc2:	b083      	sub	sp, #12
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
    return false;
 8017dc8:	2300      	movs	r3, #0
}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	370c      	adds	r7, #12
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd4:	4770      	bx	lr

08017dd6 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8017dd6:	b480      	push	{r7}
 8017dd8:	b083      	sub	sp, #12
 8017dda:	af00      	add	r7, sp, #0
 8017ddc:	6078      	str	r0, [r7, #4]
 8017dde:	460b      	mov	r3, r1
 8017de0:	70fb      	strb	r3, [r7, #3]
    return false;
 8017de2:	2300      	movs	r3, #0
}
 8017de4:	4618      	mov	r0, r3
 8017de6:	370c      	adds	r7, #12
 8017de8:	46bd      	mov	sp, r7
 8017dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dee:	4770      	bx	lr

08017df0 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8017df0:	b480      	push	{r7}
 8017df2:	b083      	sub	sp, #12
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
    return 0;
 8017df8:	2300      	movs	r3, #0
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	370c      	adds	r7, #12
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e04:	4770      	bx	lr

08017e06 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8017e06:	b480      	push	{r7}
 8017e08:	b083      	sub	sp, #12
 8017e0a:	af00      	add	r7, sp, #0
 8017e0c:	6078      	str	r0, [r7, #4]
    return 0.0;
 8017e0e:	f04f 0200 	mov.w	r2, #0
 8017e12:	f04f 0300 	mov.w	r3, #0
 8017e16:	ec43 2b17 	vmov	d7, r2, r3
}
 8017e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8017e1e:	eef0 0a67 	vmov.f32	s1, s15
 8017e22:	370c      	adds	r7, #12
 8017e24:	46bd      	mov	sp, r7
 8017e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2a:	4770      	bx	lr

08017e2c <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b084      	sub	sp, #16
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	60f8      	str	r0, [r7, #12]
 8017e34:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	3398      	adds	r3, #152	; 0x98
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	68f8      	ldr	r0, [r7, #12]
 8017e42:	4798      	blx	r3
 8017e44:	eeb0 7a40 	vmov.f32	s14, s0
 8017e48:	eef0 7a60 	vmov.f32	s15, s1
}
 8017e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8017e50:	eef0 0a67 	vmov.f32	s1, s15
 8017e54:	3710      	adds	r7, #16
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}

08017e5a <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8017e5a:	b480      	push	{r7}
 8017e5c:	b083      	sub	sp, #12
 8017e5e:	af00      	add	r7, sp, #0
 8017e60:	6078      	str	r0, [r7, #4]
    return 0;
 8017e62:	2300      	movs	r3, #0
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	370c      	adds	r7, #12
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6e:	4770      	bx	lr

08017e70 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8017e70:	b480      	push	{r7}
 8017e72:	b083      	sub	sp, #12
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017e78:	2300      	movs	r3, #0
}
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	370c      	adds	r7, #12
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e84:	4770      	bx	lr

08017e86 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8017e86:	b480      	push	{r7}
 8017e88:	b083      	sub	sp, #12
 8017e8a:	af00      	add	r7, sp, #0
 8017e8c:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017e8e:	2300      	movs	r3, #0
}
 8017e90:	4618      	mov	r0, r3
 8017e92:	370c      	adds	r7, #12
 8017e94:	46bd      	mov	sp, r7
 8017e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9a:	4770      	bx	lr

08017e9c <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8017e9c:	b480      	push	{r7}
 8017e9e:	b083      	sub	sp, #12
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017ea4:	2300      	movs	r3, #0
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	370c      	adds	r7, #12
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8017eb2:	b580      	push	{r7, lr}
 8017eb4:	b082      	sub	sp, #8
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
 8017eba:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	33a8      	adds	r3, #168	; 0xa8
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	4798      	blx	r3
 8017ec8:	4603      	mov	r3, r0
}
 8017eca:	4618      	mov	r0, r3
 8017ecc:	3708      	adds	r7, #8
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	bd80      	pop	{r7, pc}

08017ed2 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8017ed2:	b580      	push	{r7, lr}
 8017ed4:	b082      	sub	sp, #8
 8017ed6:	af00      	add	r7, sp, #0
 8017ed8:	6078      	str	r0, [r7, #4]
 8017eda:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	33a0      	adds	r3, #160	; 0xa0
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	6878      	ldr	r0, [r7, #4]
 8017ee6:	4798      	blx	r3
 8017ee8:	4603      	mov	r3, r0
}
 8017eea:	4618      	mov	r0, r3
 8017eec:	3708      	adds	r7, #8
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}

08017ef2 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 8017ef2:	b580      	push	{r7, lr}
 8017ef4:	b082      	sub	sp, #8
 8017ef6:	af00      	add	r7, sp, #0
 8017ef8:	6078      	str	r0, [r7, #4]
 8017efa:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	33b0      	adds	r3, #176	; 0xb0
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	6878      	ldr	r0, [r7, #4]
 8017f06:	4798      	blx	r3
 8017f08:	4603      	mov	r3, r0
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	3708      	adds	r7, #8
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
	...

08017f14 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 8017f14:	b480      	push	{r7}
 8017f16:	b083      	sub	sp, #12
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
    return "";
 8017f1c:	4b03      	ldr	r3, [pc, #12]	; (8017f2c <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 8017f1e:	4618      	mov	r0, r3
 8017f20:	370c      	adds	r7, #12
 8017f22:	46bd      	mov	sp, r7
 8017f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f28:	4770      	bx	lr
 8017f2a:	bf00      	nop
 8017f2c:	08023d4c 	.word	0x08023d4c

08017f30 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b082      	sub	sp, #8
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
 8017f38:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	3394      	adds	r3, #148	; 0x94
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	6878      	ldr	r0, [r7, #4]
 8017f44:	4798      	blx	r3
 8017f46:	4603      	mov	r3, r0
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	3708      	adds	r7, #8
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}

08017f50 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8017f50:	b480      	push	{r7}
 8017f52:	b083      	sub	sp, #12
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	6039      	str	r1, [r7, #0]
    return 0;
 8017f5a:	2300      	movs	r3, #0
}
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	370c      	adds	r7, #12
 8017f60:	46bd      	mov	sp, r7
 8017f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f66:	4770      	bx	lr

08017f68 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b082      	sub	sp, #8
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
 8017f70:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	3388      	adds	r3, #136	; 0x88
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	4798      	blx	r3
 8017f7e:	4603      	mov	r3, r0
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3708      	adds	r7, #8
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}

08017f88 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8017f88:	b590      	push	{r4, r7, lr}
 8017f8a:	b085      	sub	sp, #20
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
 8017f90:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	3304      	adds	r3, #4
 8017f96:	490e      	ldr	r1, [pc, #56]	; (8017fd0 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f7f3 fb7d 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	1d1c      	adds	r4, r3, #4
 8017fa2:	f107 0308 	add.w	r3, r7, #8
 8017fa6:	6839      	ldr	r1, [r7, #0]
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f7f3 fdd1 	bl	800bb50 <_Z10StringFromPKv>
 8017fae:	f107 0308 	add.w	r3, r7, #8
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	f7f3 fb5d 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8017fba:	f107 0308 	add.w	r3, r7, #8
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f7f3 fadb 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return *this;
 8017fc4:	687b      	ldr	r3, [r7, #4]
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3714      	adds	r7, #20
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd90      	pop	{r4, r7, pc}
 8017fce:	bf00      	nop
 8017fd0:	08023e80 	.word	0x08023e80

08017fd4 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8017fd4:	b598      	push	{r3, r4, r7, lr}
 8017fd6:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8017fd8:	4b09      	ldr	r3, [pc, #36]	; (8018000 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d10b      	bne.n	8017ff8 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8017fe0:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8017fe4:	4907      	ldr	r1, [pc, #28]	; (8018004 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 8017fe6:	200c      	movs	r0, #12
 8017fe8:	f7f0 fb4c 	bl	8008684 <_ZnwjPKci>
 8017fec:	4604      	mov	r4, r0
 8017fee:	4620      	mov	r0, r4
 8017ff0:	f7ff fa4c 	bl	801748c <_ZN19MockActualCallTraceC1Ev>
 8017ff4:	4b02      	ldr	r3, [pc, #8]	; (8018000 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017ff6:	601c      	str	r4, [r3, #0]
    return *instance_;
 8017ff8:	4b01      	ldr	r3, [pc, #4]	; (8018000 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
}
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	bd98      	pop	{r3, r4, r7, pc}
 8018000:	20000d4c 	.word	0x20000d4c
 8018004:	08023d64 	.word	0x08023d64

08018008 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 8018008:	b580      	push	{r7, lr}
 801800a:	af00      	add	r7, sp, #0
    delete instance_;
 801800c:	4b06      	ldr	r3, [pc, #24]	; (8018028 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d004      	beq.n	801801e <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 8018014:	681a      	ldr	r2, [r3, #0]
 8018016:	3204      	adds	r2, #4
 8018018:	6812      	ldr	r2, [r2, #0]
 801801a:	4618      	mov	r0, r3
 801801c:	4790      	blx	r2
    instance_ = NULLPTR;
 801801e:	4b02      	ldr	r3, [pc, #8]	; (8018028 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 8018020:	2200      	movs	r2, #0
 8018022:	601a      	str	r2, [r3, #0]
}
 8018024:	bf00      	nop
 8018026:	bd80      	pop	{r7, pc}
 8018028:	20000d4c 	.word	0x20000d4c

0801802c <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801802c:	b580      	push	{r7, lr}
 801802e:	b082      	sub	sp, #8
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	4618      	mov	r0, r3
 8018038:	f7fd fe9a 	bl	8015d70 <_ZN14MockActualCallC1Ev>
 801803c:	4a03      	ldr	r2, [pc, #12]	; (801804c <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	601a      	str	r2, [r3, #0]
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	4618      	mov	r0, r3
 8018046:	3708      	adds	r7, #8
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}
 801804c:	08026208 	.word	0x08026208

08018050 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8018050:	b580      	push	{r7, lr}
 8018052:	af00      	add	r7, sp, #0
 8018054:	4801      	ldr	r0, [pc, #4]	; (801805c <__tcf_0+0xc>)
 8018056:	f000 f831 	bl	80180bc <_ZN21MockIgnoredActualCallD1Ev>
 801805a:	bd80      	pop	{r7, pc}
 801805c:	20000d50 	.word	0x20000d50

08018060 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8018060:	b580      	push	{r7, lr}
 8018062:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8018064:	4b12      	ldr	r3, [pc, #72]	; (80180b0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8018066:	781b      	ldrb	r3, [r3, #0]
 8018068:	f3bf 8f5b 	dmb	ish
 801806c:	b2db      	uxtb	r3, r3
 801806e:	f003 0301 	and.w	r3, r3, #1
 8018072:	2b00      	cmp	r3, #0
 8018074:	bf0c      	ite	eq
 8018076:	2301      	moveq	r3, #1
 8018078:	2300      	movne	r3, #0
 801807a:	b2db      	uxtb	r3, r3
 801807c:	2b00      	cmp	r3, #0
 801807e:	d013      	beq.n	80180a8 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8018080:	480b      	ldr	r0, [pc, #44]	; (80180b0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8018082:	f005 fd81 	bl	801db88 <__cxa_guard_acquire>
 8018086:	4603      	mov	r3, r0
 8018088:	2b00      	cmp	r3, #0
 801808a:	bf14      	ite	ne
 801808c:	2301      	movne	r3, #1
 801808e:	2300      	moveq	r3, #0
 8018090:	b2db      	uxtb	r3, r3
 8018092:	2b00      	cmp	r3, #0
 8018094:	d008      	beq.n	80180a8 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8018096:	4807      	ldr	r0, [pc, #28]	; (80180b4 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8018098:	f7ff ffc8 	bl	801802c <_ZN21MockIgnoredActualCallC1Ev>
 801809c:	4804      	ldr	r0, [pc, #16]	; (80180b0 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801809e:	f005 fd7f 	bl	801dba0 <__cxa_guard_release>
 80180a2:	4805      	ldr	r0, [pc, #20]	; (80180b8 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 80180a4:	f005 fda3 	bl	801dbee <atexit>
    return call;
 80180a8:	4b02      	ldr	r3, [pc, #8]	; (80180b4 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	bd80      	pop	{r7, pc}
 80180ae:	bf00      	nop
 80180b0:	20000d54 	.word	0x20000d54
 80180b4:	20000d50 	.word	0x20000d50
 80180b8:	08018051 	.word	0x08018051

080180bc <_ZN21MockIgnoredActualCallD1Ev>:
 80180bc:	b580      	push	{r7, lr}
 80180be:	b082      	sub	sp, #8
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
 80180c4:	4a05      	ldr	r2, [pc, #20]	; (80180dc <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	601a      	str	r2, [r3, #0]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7fd fe5f 	bl	8015d90 <_ZN14MockActualCallD1Ev>
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	4618      	mov	r0, r3
 80180d6:	3708      	adds	r7, #8
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}
 80180dc:	08026208 	.word	0x08026208

080180e0 <_ZN21MockIgnoredActualCallD0Ev>:
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b082      	sub	sp, #8
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f7ff ffe7 	bl	80180bc <_ZN21MockIgnoredActualCallD1Ev>
 80180ee:	2104      	movs	r1, #4
 80180f0:	6878      	ldr	r0, [r7, #4]
 80180f2:	f7f0 fadb 	bl	80086ac <_ZdlPvj>
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	4618      	mov	r0, r3
 80180fa:	3708      	adds	r7, #8
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}

08018100 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8018100:	b580      	push	{r7, lr}
 8018102:	b082      	sub	sp, #8
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
 8018108:	4a05      	ldr	r2, [pc, #20]	; (8018120 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	601a      	str	r2, [r3, #0]
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	4618      	mov	r0, r3
 8018112:	f7f0 fefd 	bl	8008f10 <_ZN11MockFailureD1Ev>
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	4618      	mov	r0, r3
 801811a:	3708      	adds	r7, #8
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}
 8018120:	08026100 	.word	0x08026100

08018124 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8018124:	b580      	push	{r7, lr}
 8018126:	b082      	sub	sp, #8
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
 801812c:	6878      	ldr	r0, [r7, #4]
 801812e:	f7ff ffe7 	bl	8018100 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8018132:	2134      	movs	r1, #52	; 0x34
 8018134:	6878      	ldr	r0, [r7, #4]
 8018136:	f7f0 fab9 	bl	80086ac <_ZdlPvj>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	4618      	mov	r0, r3
 801813e:	3708      	adds	r7, #8
 8018140:	46bd      	mov	sp, r7
 8018142:	bd80      	pop	{r7, pc}

08018144 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8018144:	b580      	push	{r7, lr}
 8018146:	b082      	sub	sp, #8
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
 801814c:	4a05      	ldr	r2, [pc, #20]	; (8018164 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	601a      	str	r2, [r3, #0]
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	4618      	mov	r0, r3
 8018156:	f7f0 fedb 	bl	8008f10 <_ZN11MockFailureD1Ev>
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	4618      	mov	r0, r3
 801815e:	3708      	adds	r7, #8
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}
 8018164:	080261dc 	.word	0x080261dc

08018168 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8018168:	b580      	push	{r7, lr}
 801816a:	b082      	sub	sp, #8
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
 8018170:	6878      	ldr	r0, [r7, #4]
 8018172:	f7ff ffe7 	bl	8018144 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8018176:	2134      	movs	r1, #52	; 0x34
 8018178:	6878      	ldr	r0, [r7, #4]
 801817a:	f7f0 fa97 	bl	80086ac <_ZdlPvj>
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	4618      	mov	r0, r3
 8018182:	3708      	adds	r7, #8
 8018184:	46bd      	mov	sp, r7
 8018186:	bd80      	pop	{r7, pc}

08018188 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8018188:	b580      	push	{r7, lr}
 801818a:	b082      	sub	sp, #8
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
 8018190:	4a05      	ldr	r2, [pc, #20]	; (80181a8 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	601a      	str	r2, [r3, #0]
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	4618      	mov	r0, r3
 801819a:	f7f0 feb9 	bl	8008f10 <_ZN11MockFailureD1Ev>
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	4618      	mov	r0, r3
 80181a2:	3708      	adds	r7, #8
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}
 80181a8:	080261b0 	.word	0x080261b0

080181ac <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b082      	sub	sp, #8
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
 80181b4:	6878      	ldr	r0, [r7, #4]
 80181b6:	f7ff ffe7 	bl	8018188 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 80181ba:	2134      	movs	r1, #52	; 0x34
 80181bc:	6878      	ldr	r0, [r7, #4]
 80181be:	f7f0 fa75 	bl	80086ac <_ZdlPvj>
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	4618      	mov	r0, r3
 80181c6:	3708      	adds	r7, #8
 80181c8:	46bd      	mov	sp, r7
 80181ca:	bd80      	pop	{r7, pc}

080181cc <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 80181cc:	b580      	push	{r7, lr}
 80181ce:	b082      	sub	sp, #8
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	4a05      	ldr	r2, [pc, #20]	; (80181ec <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	601a      	str	r2, [r3, #0]
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	4618      	mov	r0, r3
 80181de:	f7f0 fe97 	bl	8008f10 <_ZN11MockFailureD1Ev>
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	4618      	mov	r0, r3
 80181e6:	3708      	adds	r7, #8
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}
 80181ec:	08026184 	.word	0x08026184

080181f0 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
 80181f8:	6878      	ldr	r0, [r7, #4]
 80181fa:	f7ff ffe7 	bl	80181cc <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80181fe:	2134      	movs	r1, #52	; 0x34
 8018200:	6878      	ldr	r0, [r7, #4]
 8018202:	f7f0 fa53 	bl	80086ac <_ZdlPvj>
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	4618      	mov	r0, r3
 801820a:	3708      	adds	r7, #8
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}

08018210 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8018210:	b580      	push	{r7, lr}
 8018212:	b082      	sub	sp, #8
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
 8018218:	4a05      	ldr	r2, [pc, #20]	; (8018230 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	601a      	str	r2, [r3, #0]
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	4618      	mov	r0, r3
 8018222:	f7f0 fe75 	bl	8008f10 <_ZN11MockFailureD1Ev>
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	4618      	mov	r0, r3
 801822a:	3708      	adds	r7, #8
 801822c:	46bd      	mov	sp, r7
 801822e:	bd80      	pop	{r7, pc}
 8018230:	0802612c 	.word	0x0802612c

08018234 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8018234:	b580      	push	{r7, lr}
 8018236:	b082      	sub	sp, #8
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
 801823c:	6878      	ldr	r0, [r7, #4]
 801823e:	f7ff ffe7 	bl	8018210 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8018242:	2134      	movs	r1, #52	; 0x34
 8018244:	6878      	ldr	r0, [r7, #4]
 8018246:	f7f0 fa31 	bl	80086ac <_ZdlPvj>
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	4618      	mov	r0, r3
 801824e:	3708      	adds	r7, #8
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}

08018254 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8018254:	b580      	push	{r7, lr}
 8018256:	b082      	sub	sp, #8
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]
 801825c:	4a05      	ldr	r2, [pc, #20]	; (8018274 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	601a      	str	r2, [r3, #0]
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	4618      	mov	r0, r3
 8018266:	f7f0 fe53 	bl	8008f10 <_ZN11MockFailureD1Ev>
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	4618      	mov	r0, r3
 801826e:	3708      	adds	r7, #8
 8018270:	46bd      	mov	sp, r7
 8018272:	bd80      	pop	{r7, pc}
 8018274:	08026158 	.word	0x08026158

08018278 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8018278:	b580      	push	{r7, lr}
 801827a:	b082      	sub	sp, #8
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
 8018280:	6878      	ldr	r0, [r7, #4]
 8018282:	f7ff ffe7 	bl	8018254 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8018286:	2134      	movs	r1, #52	; 0x34
 8018288:	6878      	ldr	r0, [r7, #4]
 801828a:	f7f0 fa0f 	bl	80086ac <_ZdlPvj>
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	4618      	mov	r0, r3
 8018292:	3708      	adds	r7, #8
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}

08018298 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8018298:	b580      	push	{r7, lr}
 801829a:	b082      	sub	sp, #8
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
 80182a0:	4a05      	ldr	r2, [pc, #20]	; (80182b8 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	601a      	str	r2, [r3, #0]
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7f0 fe31 	bl	8008f10 <_ZN11MockFailureD1Ev>
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	4618      	mov	r0, r3
 80182b2:	3708      	adds	r7, #8
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}
 80182b8:	080260a8 	.word	0x080260a8

080182bc <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	f7ff ffe7 	bl	8018298 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 80182ca:	2134      	movs	r1, #52	; 0x34
 80182cc:	6878      	ldr	r0, [r7, #4]
 80182ce:	f7f0 f9ed 	bl	80086ac <_ZdlPvj>
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	4618      	mov	r0, r3
 80182d6:	3708      	adds	r7, #8
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}

080182dc <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 80182dc:	b580      	push	{r7, lr}
 80182de:	b082      	sub	sp, #8
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
 80182e4:	4a05      	ldr	r2, [pc, #20]	; (80182fc <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	601a      	str	r2, [r3, #0]
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7f0 fe0f 	bl	8008f10 <_ZN11MockFailureD1Ev>
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	4618      	mov	r0, r3
 80182f6:	3708      	adds	r7, #8
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	080260d4 	.word	0x080260d4

08018300 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8018300:	b580      	push	{r7, lr}
 8018302:	b082      	sub	sp, #8
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f7ff ffe7 	bl	80182dc <_ZN27MockUnexpectedObjectFailureD1Ev>
 801830e:	2134      	movs	r1, #52	; 0x34
 8018310:	6878      	ldr	r0, [r7, #4]
 8018312:	f7f0 f9cb 	bl	80086ac <_ZdlPvj>
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	4618      	mov	r0, r3
 801831a:	3708      	adds	r7, #8
 801831c:	46bd      	mov	sp, r7
 801831e:	bd80      	pop	{r7, pc}

08018320 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8018320:	b580      	push	{r7, lr}
 8018322:	b082      	sub	sp, #8
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
 8018328:	6039      	str	r1, [r7, #0]
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	3310      	adds	r3, #16
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	683a      	ldr	r2, [r7, #0]
 8018334:	6839      	ldr	r1, [r7, #0]
 8018336:	6878      	ldr	r0, [r7, #4]
 8018338:	4798      	blx	r3
 801833a:	4603      	mov	r3, r0
 801833c:	4618      	mov	r0, r3
 801833e:	3708      	adds	r7, #8
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}

08018344 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8018344:	b480      	push	{r7}
 8018346:	b083      	sub	sp, #12
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	6039      	str	r1, [r7, #0]
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	4618      	mov	r0, r3
 8018352:	370c      	adds	r7, #12
 8018354:	46bd      	mov	sp, r7
 8018356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835a:	4770      	bx	lr

0801835c <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801835c:	b480      	push	{r7}
 801835e:	b083      	sub	sp, #12
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
 8018364:	6039      	str	r1, [r7, #0]
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	4618      	mov	r0, r3
 801836a:	370c      	adds	r7, #12
 801836c:	46bd      	mov	sp, r7
 801836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018372:	4770      	bx	lr

08018374 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8018374:	b480      	push	{r7}
 8018376:	b085      	sub	sp, #20
 8018378:	af00      	add	r7, sp, #0
 801837a:	60f8      	str	r0, [r7, #12]
 801837c:	60b9      	str	r1, [r7, #8]
 801837e:	607a      	str	r2, [r7, #4]
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	4618      	mov	r0, r3
 8018384:	3714      	adds	r7, #20
 8018386:	46bd      	mov	sp, r7
 8018388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838c:	4770      	bx	lr

0801838e <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801838e:	b480      	push	{r7}
 8018390:	b085      	sub	sp, #20
 8018392:	af00      	add	r7, sp, #0
 8018394:	60f8      	str	r0, [r7, #12]
 8018396:	60b9      	str	r1, [r7, #8]
 8018398:	4613      	mov	r3, r2
 801839a:	71fb      	strb	r3, [r7, #7]
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	4618      	mov	r0, r3
 80183a0:	3714      	adds	r7, #20
 80183a2:	46bd      	mov	sp, r7
 80183a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a8:	4770      	bx	lr

080183aa <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80183aa:	b480      	push	{r7}
 80183ac:	b085      	sub	sp, #20
 80183ae:	af00      	add	r7, sp, #0
 80183b0:	60f8      	str	r0, [r7, #12]
 80183b2:	60b9      	str	r1, [r7, #8]
 80183b4:	607a      	str	r2, [r7, #4]
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	4618      	mov	r0, r3
 80183ba:	3714      	adds	r7, #20
 80183bc:	46bd      	mov	sp, r7
 80183be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c2:	4770      	bx	lr

080183c4 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 80183c4:	b480      	push	{r7}
 80183c6:	b085      	sub	sp, #20
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	60f8      	str	r0, [r7, #12]
 80183cc:	60b9      	str	r1, [r7, #8]
 80183ce:	607a      	str	r2, [r7, #4]
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	4618      	mov	r0, r3
 80183d4:	3714      	adds	r7, #20
 80183d6:	46bd      	mov	sp, r7
 80183d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183dc:	4770      	bx	lr

080183de <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80183de:	b480      	push	{r7}
 80183e0:	b085      	sub	sp, #20
 80183e2:	af00      	add	r7, sp, #0
 80183e4:	60f8      	str	r0, [r7, #12]
 80183e6:	60b9      	str	r1, [r7, #8]
 80183e8:	607a      	str	r2, [r7, #4]
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	4618      	mov	r0, r3
 80183ee:	3714      	adds	r7, #20
 80183f0:	46bd      	mov	sp, r7
 80183f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f6:	4770      	bx	lr

080183f8 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80183f8:	b480      	push	{r7}
 80183fa:	b085      	sub	sp, #20
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	60f8      	str	r0, [r7, #12]
 8018400:	60b9      	str	r1, [r7, #8]
 8018402:	607a      	str	r2, [r7, #4]
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	4618      	mov	r0, r3
 8018408:	3714      	adds	r7, #20
 801840a:	46bd      	mov	sp, r7
 801840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018410:	4770      	bx	lr

08018412 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8018412:	b480      	push	{r7}
 8018414:	b085      	sub	sp, #20
 8018416:	af00      	add	r7, sp, #0
 8018418:	60f8      	str	r0, [r7, #12]
 801841a:	60b9      	str	r1, [r7, #8]
 801841c:	4639      	mov	r1, r7
 801841e:	e881 000c 	stmia.w	r1, {r2, r3}
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	4618      	mov	r0, r3
 8018426:	3714      	adds	r7, #20
 8018428:	46bd      	mov	sp, r7
 801842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842e:	4770      	bx	lr

08018430 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8018430:	b480      	push	{r7}
 8018432:	b085      	sub	sp, #20
 8018434:	af00      	add	r7, sp, #0
 8018436:	60f8      	str	r0, [r7, #12]
 8018438:	60b9      	str	r1, [r7, #8]
 801843a:	4639      	mov	r1, r7
 801843c:	e881 000c 	stmia.w	r1, {r2, r3}
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	4618      	mov	r0, r3
 8018444:	3714      	adds	r7, #20
 8018446:	46bd      	mov	sp, r7
 8018448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844c:	4770      	bx	lr

0801844e <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801844e:	b480      	push	{r7}
 8018450:	b085      	sub	sp, #20
 8018452:	af00      	add	r7, sp, #0
 8018454:	60f8      	str	r0, [r7, #12]
 8018456:	60b9      	str	r1, [r7, #8]
 8018458:	ed87 0b00 	vstr	d0, [r7]
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	4618      	mov	r0, r3
 8018460:	3714      	adds	r7, #20
 8018462:	46bd      	mov	sp, r7
 8018464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018468:	4770      	bx	lr

0801846a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801846a:	b480      	push	{r7}
 801846c:	b087      	sub	sp, #28
 801846e:	af00      	add	r7, sp, #0
 8018470:	6178      	str	r0, [r7, #20]
 8018472:	6139      	str	r1, [r7, #16]
 8018474:	ed87 0b02 	vstr	d0, [r7, #8]
 8018478:	ed87 1b00 	vstr	d1, [r7]
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	4618      	mov	r0, r3
 8018480:	371c      	adds	r7, #28
 8018482:	46bd      	mov	sp, r7
 8018484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018488:	4770      	bx	lr

0801848a <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801848a:	b480      	push	{r7}
 801848c:	b085      	sub	sp, #20
 801848e:	af00      	add	r7, sp, #0
 8018490:	60f8      	str	r0, [r7, #12]
 8018492:	60b9      	str	r1, [r7, #8]
 8018494:	607a      	str	r2, [r7, #4]
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	4618      	mov	r0, r3
 801849a:	3714      	adds	r7, #20
 801849c:	46bd      	mov	sp, r7
 801849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a2:	4770      	bx	lr

080184a4 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 80184a4:	b480      	push	{r7}
 80184a6:	b085      	sub	sp, #20
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	60f8      	str	r0, [r7, #12]
 80184ac:	60b9      	str	r1, [r7, #8]
 80184ae:	607a      	str	r2, [r7, #4]
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	4618      	mov	r0, r3
 80184b4:	3714      	adds	r7, #20
 80184b6:	46bd      	mov	sp, r7
 80184b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184bc:	4770      	bx	lr

080184be <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 80184be:	b480      	push	{r7}
 80184c0:	b085      	sub	sp, #20
 80184c2:	af00      	add	r7, sp, #0
 80184c4:	60f8      	str	r0, [r7, #12]
 80184c6:	60b9      	str	r1, [r7, #8]
 80184c8:	607a      	str	r2, [r7, #4]
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	4618      	mov	r0, r3
 80184ce:	3714      	adds	r7, #20
 80184d0:	46bd      	mov	sp, r7
 80184d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d6:	4770      	bx	lr

080184d8 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 80184d8:	b480      	push	{r7}
 80184da:	b085      	sub	sp, #20
 80184dc:	af00      	add	r7, sp, #0
 80184de:	60f8      	str	r0, [r7, #12]
 80184e0:	60b9      	str	r1, [r7, #8]
 80184e2:	607a      	str	r2, [r7, #4]
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	4618      	mov	r0, r3
 80184e8:	3714      	adds	r7, #20
 80184ea:	46bd      	mov	sp, r7
 80184ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f0:	4770      	bx	lr

080184f2 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 80184f2:	b480      	push	{r7}
 80184f4:	b085      	sub	sp, #20
 80184f6:	af00      	add	r7, sp, #0
 80184f8:	60f8      	str	r0, [r7, #12]
 80184fa:	60b9      	str	r1, [r7, #8]
 80184fc:	607a      	str	r2, [r7, #4]
 80184fe:	603b      	str	r3, [r7, #0]
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	4618      	mov	r0, r3
 8018504:	3714      	adds	r7, #20
 8018506:	46bd      	mov	sp, r7
 8018508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850c:	4770      	bx	lr

0801850e <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801850e:	b480      	push	{r7}
 8018510:	b085      	sub	sp, #20
 8018512:	af00      	add	r7, sp, #0
 8018514:	60f8      	str	r0, [r7, #12]
 8018516:	60b9      	str	r1, [r7, #8]
 8018518:	607a      	str	r2, [r7, #4]
 801851a:	603b      	str	r3, [r7, #0]
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	4618      	mov	r0, r3
 8018520:	3714      	adds	r7, #20
 8018522:	46bd      	mov	sp, r7
 8018524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018528:	4770      	bx	lr

0801852a <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801852a:	b480      	push	{r7}
 801852c:	b085      	sub	sp, #20
 801852e:	af00      	add	r7, sp, #0
 8018530:	60f8      	str	r0, [r7, #12]
 8018532:	60b9      	str	r1, [r7, #8]
 8018534:	607a      	str	r2, [r7, #4]
 8018536:	603b      	str	r3, [r7, #0]
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	4618      	mov	r0, r3
 801853c:	3714      	adds	r7, #20
 801853e:	46bd      	mov	sp, r7
 8018540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018544:	4770      	bx	lr

08018546 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018546:	b480      	push	{r7}
 8018548:	b085      	sub	sp, #20
 801854a:	af00      	add	r7, sp, #0
 801854c:	60f8      	str	r0, [r7, #12]
 801854e:	60b9      	str	r1, [r7, #8]
 8018550:	607a      	str	r2, [r7, #4]
 8018552:	603b      	str	r3, [r7, #0]
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	4618      	mov	r0, r3
 8018558:	3714      	adds	r7, #20
 801855a:	46bd      	mov	sp, r7
 801855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018560:	4770      	bx	lr

08018562 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8018562:	b480      	push	{r7}
 8018564:	b083      	sub	sp, #12
 8018566:	af00      	add	r7, sp, #0
 8018568:	6078      	str	r0, [r7, #4]
 801856a:	6039      	str	r1, [r7, #0]
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	4618      	mov	r0, r3
 8018570:	370c      	adds	r7, #12
 8018572:	46bd      	mov	sp, r7
 8018574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018578:	4770      	bx	lr

0801857a <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801857a:	b480      	push	{r7}
 801857c:	b083      	sub	sp, #12
 801857e:	af00      	add	r7, sp, #0
 8018580:	6078      	str	r0, [r7, #4]
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	4618      	mov	r0, r3
 8018586:	370c      	adds	r7, #12
 8018588:	46bd      	mov	sp, r7
 801858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858e:	4770      	bx	lr

08018590 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8018590:	b480      	push	{r7}
 8018592:	b083      	sub	sp, #12
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	460b      	mov	r3, r1
 801859a:	70fb      	strb	r3, [r7, #3]
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	4618      	mov	r0, r3
 80185a0:	370c      	adds	r7, #12
 80185a2:	46bd      	mov	sp, r7
 80185a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a8:	4770      	bx	lr

080185aa <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 80185aa:	b480      	push	{r7}
 80185ac:	b083      	sub	sp, #12
 80185ae:	af00      	add	r7, sp, #0
 80185b0:	6078      	str	r0, [r7, #4]
 80185b2:	6039      	str	r1, [r7, #0]
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	4618      	mov	r0, r3
 80185b8:	370c      	adds	r7, #12
 80185ba:	46bd      	mov	sp, r7
 80185bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c0:	4770      	bx	lr

080185c2 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 80185c2:	b480      	push	{r7}
 80185c4:	b083      	sub	sp, #12
 80185c6:	af00      	add	r7, sp, #0
 80185c8:	6078      	str	r0, [r7, #4]
 80185ca:	6039      	str	r1, [r7, #0]
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	4618      	mov	r0, r3
 80185d0:	370c      	adds	r7, #12
 80185d2:	46bd      	mov	sp, r7
 80185d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d8:	4770      	bx	lr

080185da <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 80185da:	b480      	push	{r7}
 80185dc:	b083      	sub	sp, #12
 80185de:	af00      	add	r7, sp, #0
 80185e0:	6078      	str	r0, [r7, #4]
 80185e2:	6039      	str	r1, [r7, #0]
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	4618      	mov	r0, r3
 80185e8:	370c      	adds	r7, #12
 80185ea:	46bd      	mov	sp, r7
 80185ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f0:	4770      	bx	lr

080185f2 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 80185f2:	b480      	push	{r7}
 80185f4:	b083      	sub	sp, #12
 80185f6:	af00      	add	r7, sp, #0
 80185f8:	6078      	str	r0, [r7, #4]
 80185fa:	6039      	str	r1, [r7, #0]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	4618      	mov	r0, r3
 8018600:	370c      	adds	r7, #12
 8018602:	46bd      	mov	sp, r7
 8018604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018608:	4770      	bx	lr

0801860a <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801860a:	b480      	push	{r7}
 801860c:	b085      	sub	sp, #20
 801860e:	af00      	add	r7, sp, #0
 8018610:	60f8      	str	r0, [r7, #12]
 8018612:	1d3b      	adds	r3, r7, #4
 8018614:	e883 0006 	stmia.w	r3, {r1, r2}
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	4618      	mov	r0, r3
 801861c:	3714      	adds	r7, #20
 801861e:	46bd      	mov	sp, r7
 8018620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018624:	4770      	bx	lr

08018626 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8018626:	b480      	push	{r7}
 8018628:	b085      	sub	sp, #20
 801862a:	af00      	add	r7, sp, #0
 801862c:	60f8      	str	r0, [r7, #12]
 801862e:	1d3b      	adds	r3, r7, #4
 8018630:	e883 0006 	stmia.w	r3, {r1, r2}
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	4618      	mov	r0, r3
 8018638:	3714      	adds	r7, #20
 801863a:	46bd      	mov	sp, r7
 801863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018640:	4770      	bx	lr

08018642 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8018642:	b480      	push	{r7}
 8018644:	b085      	sub	sp, #20
 8018646:	af00      	add	r7, sp, #0
 8018648:	60f8      	str	r0, [r7, #12]
 801864a:	ed87 0b00 	vstr	d0, [r7]
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	4618      	mov	r0, r3
 8018652:	3714      	adds	r7, #20
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr

0801865c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801865c:	b480      	push	{r7}
 801865e:	b083      	sub	sp, #12
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
 8018664:	6039      	str	r1, [r7, #0]
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	4618      	mov	r0, r3
 801866a:	370c      	adds	r7, #12
 801866c:	46bd      	mov	sp, r7
 801866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018672:	4770      	bx	lr

08018674 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8018674:	b480      	push	{r7}
 8018676:	b083      	sub	sp, #12
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	6039      	str	r1, [r7, #0]
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	4618      	mov	r0, r3
 8018682:	370c      	adds	r7, #12
 8018684:	46bd      	mov	sp, r7
 8018686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868a:	4770      	bx	lr

0801868c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801868c:	b480      	push	{r7}
 801868e:	b083      	sub	sp, #12
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
 8018694:	6039      	str	r1, [r7, #0]
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	4618      	mov	r0, r3
 801869a:	370c      	adds	r7, #12
 801869c:	46bd      	mov	sp, r7
 801869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a2:	4770      	bx	lr

080186a4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 80186a4:	b480      	push	{r7}
 80186a6:	b083      	sub	sp, #12
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
 80186ac:	6039      	str	r1, [r7, #0]
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	4618      	mov	r0, r3
 80186b2:	370c      	adds	r7, #12
 80186b4:	46bd      	mov	sp, r7
 80186b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ba:	4770      	bx	lr

080186bc <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 80186bc:	b480      	push	{r7}
 80186be:	b083      	sub	sp, #12
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	6078      	str	r0, [r7, #4]
 80186c4:	6039      	str	r1, [r7, #0]
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	4618      	mov	r0, r3
 80186ca:	370c      	adds	r7, #12
 80186cc:	46bd      	mov	sp, r7
 80186ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d2:	4770      	bx	lr

080186d4 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 80186d4:	b480      	push	{r7}
 80186d6:	b083      	sub	sp, #12
 80186d8:	af00      	add	r7, sp, #0
 80186da:	6078      	str	r0, [r7, #4]
 80186dc:	4a04      	ldr	r2, [pc, #16]	; (80186f0 <_ZN16MockExpectedCallC1Ev+0x1c>)
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	601a      	str	r2, [r3, #0]
{
}
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	4618      	mov	r0, r3
 80186e6:	370c      	adds	r7, #12
 80186e8:	46bd      	mov	sp, r7
 80186ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ee:	4770      	bx	lr
 80186f0:	080267ac 	.word	0x080267ac

080186f4 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 80186f4:	b480      	push	{r7}
 80186f6:	b083      	sub	sp, #12
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
 80186fc:	4a04      	ldr	r2, [pc, #16]	; (8018710 <_ZN16MockExpectedCallD1Ev+0x1c>)
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	601a      	str	r2, [r3, #0]
{
}
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	4618      	mov	r0, r3
 8018706:	370c      	adds	r7, #12
 8018708:	46bd      	mov	sp, r7
 801870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801870e:	4770      	bx	lr
 8018710:	080267ac 	.word	0x080267ac

08018714 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b082      	sub	sp, #8
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	3358      	adds	r3, #88	; 0x58
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	687a      	ldr	r2, [r7, #4]
 8018728:	6839      	ldr	r1, [r7, #0]
 801872a:	4610      	mov	r0, r2
 801872c:	4798      	blx	r3
}
 801872e:	6878      	ldr	r0, [r7, #4]
 8018730:	3708      	adds	r7, #8
 8018732:	46bd      	mov	sp, r7
 8018734:	bd80      	pop	{r7, pc}

08018736 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8018736:	b580      	push	{r7, lr}
 8018738:	b082      	sub	sp, #8
 801873a:	af00      	add	r7, sp, #0
 801873c:	6078      	str	r0, [r7, #4]
 801873e:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	3304      	adds	r3, #4
 8018744:	6839      	ldr	r1, [r7, #0]
 8018746:	4618      	mov	r0, r3
 8018748:	f7f2 fbcb 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
}
 801874c:	bf00      	nop
 801874e:	3708      	adds	r7, #8
 8018750:	46bd      	mov	sp, r7
 8018752:	bd80      	pop	{r7, pc}

08018754 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b082      	sub	sp, #8
 8018758:	af00      	add	r7, sp, #0
 801875a:	6078      	str	r0, [r7, #4]
 801875c:	6039      	str	r1, [r7, #0]
    return functionName_;
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	3304      	adds	r3, #4
 8018762:	4619      	mov	r1, r3
 8018764:	6878      	ldr	r0, [r7, #4]
 8018766:	f7f2 fba4 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	3708      	adds	r7, #8
 801876e:	46bd      	mov	sp, r7
 8018770:	bd80      	pop	{r7, pc}
	...

08018774 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8018774:	b590      	push	{r4, r7, lr}
 8018776:	b085      	sub	sp, #20
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
 801877c:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	4618      	mov	r0, r3
 8018782:	f7ff ffa7 	bl	80186d4 <_ZN16MockExpectedCallC1Ev>
 8018786:	4a2c      	ldr	r2, [pc, #176]	; (8018838 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	601a      	str	r2, [r3, #0]
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	3304      	adds	r3, #4
 8018790:	492a      	ldr	r1, [pc, #168]	; (801883c <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8018792:	4618      	mov	r0, r3
 8018794:	f7f2 fb39 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	2200      	movs	r2, #0
 801879c:	731a      	strb	r2, [r3, #12]
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	2200      	movs	r2, #0
 80187a2:	735a      	strb	r2, [r3, #13]
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2200      	movs	r2, #0
 80187a8:	611a      	str	r2, [r3, #16]
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	2200      	movs	r2, #0
 80187ae:	615a      	str	r2, [r3, #20]
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	2200      	movs	r2, #0
 80187b4:	761a      	strb	r2, [r3, #24]
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80187bc:	f107 0308 	add.w	r3, r7, #8
 80187c0:	491e      	ldr	r1, [pc, #120]	; (801883c <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7f2 fb21 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80187c8:	f107 0308 	add.w	r3, r7, #8
 80187cc:	4619      	mov	r1, r3
 80187ce:	4620      	mov	r0, r4
 80187d0:	f003 f840 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 80187d4:	f107 0308 	add.w	r3, r7, #8
 80187d8:	4618      	mov	r0, r3
 80187da:	f7f2 fece 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	2200      	movs	r2, #0
 80187e2:	661a      	str	r2, [r3, #96]	; 0x60
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2200      	movs	r2, #0
 80187e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2201      	movs	r2, #1
 80187f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2200      	movs	r2, #0
 80187f8:	669a      	str	r2, [r3, #104]	; 0x68
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	683a      	ldr	r2, [r7, #0]
 80187fe:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8018800:	2246      	movs	r2, #70	; 0x46
 8018802:	490f      	ldr	r1, [pc, #60]	; (8018840 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8018804:	2004      	movs	r0, #4
 8018806:	f7ef ff3d 	bl	8008684 <_ZnwjPKci>
 801880a:	4604      	mov	r4, r0
 801880c:	4620      	mov	r0, r4
 801880e:	f004 ff34 	bl	801d67a <_ZN18MockNamedValueListC1Ev>
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8018816:	2247      	movs	r2, #71	; 0x47
 8018818:	4909      	ldr	r1, [pc, #36]	; (8018840 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801881a:	2004      	movs	r0, #4
 801881c:	f7ef ff32 	bl	8008684 <_ZnwjPKci>
 8018820:	4604      	mov	r4, r0
 8018822:	4620      	mov	r0, r4
 8018824:	f004 ff29 	bl	801d67a <_ZN18MockNamedValueListC1Ev>
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	621c      	str	r4, [r3, #32]
}
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	4618      	mov	r0, r3
 8018830:	3714      	adds	r7, #20
 8018832:	46bd      	mov	sp, r7
 8018834:	bd90      	pop	{r4, r7, pc}
 8018836:	bf00      	nop
 8018838:	080265f0 	.word	0x080265f0
 801883c:	08023e8c 	.word	0x08023e8c
 8018840:	08023e90 	.word	0x08023e90

08018844 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018844:	b580      	push	{r7, lr}
 8018846:	b082      	sub	sp, #8
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
 801884c:	4a17      	ldr	r2, [pc, #92]	; (80188ac <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	69db      	ldr	r3, [r3, #28]
 8018856:	4618      	mov	r0, r3
 8018858:	f004 ff1d 	bl	801d696 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	69db      	ldr	r3, [r3, #28]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d003      	beq.n	801886c <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8018864:	2104      	movs	r1, #4
 8018866:	4618      	mov	r0, r3
 8018868:	f7ef ff20 	bl	80086ac <_ZdlPvj>
    outputParameters_->clear();
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6a1b      	ldr	r3, [r3, #32]
 8018870:	4618      	mov	r0, r3
 8018872:	f004 ff10 	bl	801d696 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	6a1b      	ldr	r3, [r3, #32]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d003      	beq.n	8018886 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801887e:	2104      	movs	r1, #4
 8018880:	4618      	mov	r0, r3
 8018882:	f7ef ff13 	bl	80086ac <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	3328      	adds	r3, #40	; 0x28
 801888a:	4618      	mov	r0, r3
 801888c:	f003 f80c 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	3304      	adds	r3, #4
 8018894:	4618      	mov	r0, r3
 8018896:	f7f2 fe70 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	4618      	mov	r0, r3
 801889e:	f7ff ff29 	bl	80186f4 <_ZN16MockExpectedCallD1Ev>
}
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	4618      	mov	r0, r3
 80188a6:	3708      	adds	r7, #8
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	080265f0 	.word	0x080265f0

080188b0 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
}
 80188b8:	6878      	ldr	r0, [r7, #4]
 80188ba:	f7ff ffc3 	bl	8018844 <_ZN23MockCheckedExpectedCallD1Ev>
 80188be:	2170      	movs	r1, #112	; 0x70
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	f7ef fef3 	bl	80086ac <_ZdlPvj>
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	4618      	mov	r0, r3
 80188ca:	3708      	adds	r7, #8
 80188cc:	46bd      	mov	sp, r7
 80188ce:	bd80      	pop	{r7, pc}

080188d0 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b082      	sub	sp, #8
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
 80188d8:	6039      	str	r1, [r7, #0]
    setName(name);
 80188da:	6839      	ldr	r1, [r7, #0]
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f7ff ff2a 	bl	8018736 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 80188e2:	687b      	ldr	r3, [r7, #4]
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	3708      	adds	r7, #8
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 80188ec:	b590      	push	{r4, r7, lr}
 80188ee:	b087      	sub	sp, #28
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	60f8      	str	r0, [r7, #12]
 80188f4:	60b9      	str	r1, [r7, #8]
 80188f6:	4613      	mov	r3, r2
 80188f8:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80188fa:	225a      	movs	r2, #90	; 0x5a
 80188fc:	490e      	ldr	r1, [pc, #56]	; (8018938 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 80188fe:	2038      	movs	r0, #56	; 0x38
 8018900:	f7ef fec0 	bl	8008684 <_ZnwjPKci>
 8018904:	4604      	mov	r4, r0
 8018906:	68b9      	ldr	r1, [r7, #8]
 8018908:	4620      	mov	r0, r4
 801890a:	f001 f851 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801890e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	69db      	ldr	r3, [r3, #28]
 8018914:	6979      	ldr	r1, [r7, #20]
 8018916:	4618      	mov	r0, r3
 8018918:	f004 fee0 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801891c:	697b      	ldr	r3, [r7, #20]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	3308      	adds	r3, #8
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	79fa      	ldrb	r2, [r7, #7]
 8018926:	4611      	mov	r1, r2
 8018928:	6978      	ldr	r0, [r7, #20]
 801892a:	4798      	blx	r3
    return *this;
 801892c:	68fb      	ldr	r3, [r7, #12]
}
 801892e:	4618      	mov	r0, r3
 8018930:	371c      	adds	r7, #28
 8018932:	46bd      	mov	sp, r7
 8018934:	bd90      	pop	{r4, r7, pc}
 8018936:	bf00      	nop
 8018938:	08023e90 	.word	0x08023e90

0801893c <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801893c:	b590      	push	{r4, r7, lr}
 801893e:	b087      	sub	sp, #28
 8018940:	af00      	add	r7, sp, #0
 8018942:	60f8      	str	r0, [r7, #12]
 8018944:	60b9      	str	r1, [r7, #8]
 8018946:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018948:	2262      	movs	r2, #98	; 0x62
 801894a:	490e      	ldr	r1, [pc, #56]	; (8018984 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801894c:	2038      	movs	r0, #56	; 0x38
 801894e:	f7ef fe99 	bl	8008684 <_ZnwjPKci>
 8018952:	4604      	mov	r4, r0
 8018954:	68b9      	ldr	r1, [r7, #8]
 8018956:	4620      	mov	r0, r4
 8018958:	f001 f82a 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801895c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	69db      	ldr	r3, [r3, #28]
 8018962:	6979      	ldr	r1, [r7, #20]
 8018964:	4618      	mov	r0, r3
 8018966:	f004 feb9 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801896a:	697b      	ldr	r3, [r7, #20]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	3310      	adds	r3, #16
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	6879      	ldr	r1, [r7, #4]
 8018974:	6978      	ldr	r0, [r7, #20]
 8018976:	4798      	blx	r3
    return *this;
 8018978:	68fb      	ldr	r3, [r7, #12]
}
 801897a:	4618      	mov	r0, r3
 801897c:	371c      	adds	r7, #28
 801897e:	46bd      	mov	sp, r7
 8018980:	bd90      	pop	{r4, r7, pc}
 8018982:	bf00      	nop
 8018984:	08023e90 	.word	0x08023e90

08018988 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 8018988:	b590      	push	{r4, r7, lr}
 801898a:	b087      	sub	sp, #28
 801898c:	af00      	add	r7, sp, #0
 801898e:	60f8      	str	r0, [r7, #12]
 8018990:	60b9      	str	r1, [r7, #8]
 8018992:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018994:	226a      	movs	r2, #106	; 0x6a
 8018996:	490e      	ldr	r1, [pc, #56]	; (80189d0 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 8018998:	2038      	movs	r0, #56	; 0x38
 801899a:	f7ef fe73 	bl	8008684 <_ZnwjPKci>
 801899e:	4604      	mov	r4, r0
 80189a0:	68b9      	ldr	r1, [r7, #8]
 80189a2:	4620      	mov	r0, r4
 80189a4:	f001 f804 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80189a8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	69db      	ldr	r3, [r3, #28]
 80189ae:	6979      	ldr	r1, [r7, #20]
 80189b0:	4618      	mov	r0, r3
 80189b2:	f004 fe93 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80189b6:	697b      	ldr	r3, [r7, #20]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	330c      	adds	r3, #12
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	6879      	ldr	r1, [r7, #4]
 80189c0:	6978      	ldr	r0, [r7, #20]
 80189c2:	4798      	blx	r3
    return *this;
 80189c4:	68fb      	ldr	r3, [r7, #12]
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	371c      	adds	r7, #28
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd90      	pop	{r4, r7, pc}
 80189ce:	bf00      	nop
 80189d0:	08023e90 	.word	0x08023e90

080189d4 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80189d4:	b590      	push	{r4, r7, lr}
 80189d6:	b087      	sub	sp, #28
 80189d8:	af00      	add	r7, sp, #0
 80189da:	60f8      	str	r0, [r7, #12]
 80189dc:	60b9      	str	r1, [r7, #8]
 80189de:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80189e0:	2272      	movs	r2, #114	; 0x72
 80189e2:	490e      	ldr	r1, [pc, #56]	; (8018a1c <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 80189e4:	2038      	movs	r0, #56	; 0x38
 80189e6:	f7ef fe4d 	bl	8008684 <_ZnwjPKci>
 80189ea:	4604      	mov	r4, r0
 80189ec:	68b9      	ldr	r1, [r7, #8]
 80189ee:	4620      	mov	r0, r4
 80189f0:	f000 ffde 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80189f4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	69db      	ldr	r3, [r3, #28]
 80189fa:	6979      	ldr	r1, [r7, #20]
 80189fc:	4618      	mov	r0, r3
 80189fe:	f004 fe6d 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018a02:	697b      	ldr	r3, [r7, #20]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	3314      	adds	r3, #20
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	6879      	ldr	r1, [r7, #4]
 8018a0c:	6978      	ldr	r0, [r7, #20]
 8018a0e:	4798      	blx	r3
    return *this;
 8018a10:	68fb      	ldr	r3, [r7, #12]
}
 8018a12:	4618      	mov	r0, r3
 8018a14:	371c      	adds	r7, #28
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bd90      	pop	{r4, r7, pc}
 8018a1a:	bf00      	nop
 8018a1c:	08023e90 	.word	0x08023e90

08018a20 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018a20:	b590      	push	{r4, r7, lr}
 8018a22:	b087      	sub	sp, #28
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	60f8      	str	r0, [r7, #12]
 8018a28:	60b9      	str	r1, [r7, #8]
 8018a2a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018a2c:	227a      	movs	r2, #122	; 0x7a
 8018a2e:	490e      	ldr	r1, [pc, #56]	; (8018a68 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 8018a30:	2038      	movs	r0, #56	; 0x38
 8018a32:	f7ef fe27 	bl	8008684 <_ZnwjPKci>
 8018a36:	4604      	mov	r4, r0
 8018a38:	68b9      	ldr	r1, [r7, #8]
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f000 ffb8 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018a40:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	69db      	ldr	r3, [r3, #28]
 8018a46:	6979      	ldr	r1, [r7, #20]
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f004 fe47 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018a4e:	697b      	ldr	r3, [r7, #20]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	3318      	adds	r3, #24
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	6879      	ldr	r1, [r7, #4]
 8018a58:	6978      	ldr	r0, [r7, #20]
 8018a5a:	4798      	blx	r3
    return *this;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	371c      	adds	r7, #28
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd90      	pop	{r4, r7, pc}
 8018a66:	bf00      	nop
 8018a68:	08023e90 	.word	0x08023e90

08018a6c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018a6c:	b5b0      	push	{r4, r5, r7, lr}
 8018a6e:	b086      	sub	sp, #24
 8018a70:	af02      	add	r7, sp, #8
 8018a72:	60f8      	str	r0, [r7, #12]
 8018a74:	60b9      	str	r1, [r7, #8]
 8018a76:	4639      	mov	r1, r7
 8018a78:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018a7c:	f7f9 fda8 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8018a80:	4604      	mov	r4, r0
 8018a82:	6823      	ldr	r3, [r4, #0]
 8018a84:	3368      	adds	r3, #104	; 0x68
 8018a86:	681d      	ldr	r5, [r3, #0]
 8018a88:	f7f9 fdb2 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	9300      	str	r3, [sp, #0]
 8018a90:	2396      	movs	r3, #150	; 0x96
 8018a92:	4a04      	ldr	r2, [pc, #16]	; (8018aa4 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 8018a94:	4904      	ldr	r1, [pc, #16]	; (8018aa8 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018a96:	4620      	mov	r0, r4
 8018a98:	47a8      	blx	r5
    return *this;
 8018a9a:	68fb      	ldr	r3, [r7, #12]
}
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	3710      	adds	r7, #16
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8018aa4:	08023e90 	.word	0x08023e90
 8018aa8:	08023eac 	.word	0x08023eac

08018aac <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018aac:	b5b0      	push	{r4, r5, r7, lr}
 8018aae:	b086      	sub	sp, #24
 8018ab0:	af02      	add	r7, sp, #8
 8018ab2:	60f8      	str	r0, [r7, #12]
 8018ab4:	60b9      	str	r1, [r7, #8]
 8018ab6:	4639      	mov	r1, r7
 8018ab8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018abc:	f7f9 fd88 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8018ac0:	4604      	mov	r4, r0
 8018ac2:	6823      	ldr	r3, [r4, #0]
 8018ac4:	3368      	adds	r3, #104	; 0x68
 8018ac6:	681d      	ldr	r5, [r3, #0]
 8018ac8:	f7f9 fd92 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018acc:	4603      	mov	r3, r0
 8018ace:	9300      	str	r3, [sp, #0]
 8018ad0:	239c      	movs	r3, #156	; 0x9c
 8018ad2:	4a04      	ldr	r2, [pc, #16]	; (8018ae4 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8018ad4:	4904      	ldr	r1, [pc, #16]	; (8018ae8 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	47a8      	blx	r5
    return *this;
 8018ada:	68fb      	ldr	r3, [r7, #12]
}
 8018adc:	4618      	mov	r0, r3
 8018ade:	3710      	adds	r7, #16
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8018ae4:	08023e90 	.word	0x08023e90
 8018ae8:	08023ecc 	.word	0x08023ecc

08018aec <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 8018aec:	b590      	push	{r4, r7, lr}
 8018aee:	b087      	sub	sp, #28
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	60f8      	str	r0, [r7, #12]
 8018af4:	60b9      	str	r1, [r7, #8]
 8018af6:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018afa:	22a4      	movs	r2, #164	; 0xa4
 8018afc:	490e      	ldr	r1, [pc, #56]	; (8018b38 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 8018afe:	2038      	movs	r0, #56	; 0x38
 8018b00:	f7ef fdc0 	bl	8008684 <_ZnwjPKci>
 8018b04:	4604      	mov	r4, r0
 8018b06:	68b9      	ldr	r1, [r7, #8]
 8018b08:	4620      	mov	r0, r4
 8018b0a:	f000 ff51 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018b0e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	69db      	ldr	r3, [r3, #28]
 8018b14:	6979      	ldr	r1, [r7, #20]
 8018b16:	4618      	mov	r0, r3
 8018b18:	f004 fde0 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018b1c:	697b      	ldr	r3, [r7, #20]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	3324      	adds	r3, #36	; 0x24
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	ed97 0b00 	vldr	d0, [r7]
 8018b28:	6978      	ldr	r0, [r7, #20]
 8018b2a:	4798      	blx	r3
    return *this;
 8018b2c:	68fb      	ldr	r3, [r7, #12]
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	371c      	adds	r7, #28
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd90      	pop	{r4, r7, pc}
 8018b36:	bf00      	nop
 8018b38:	08023e90 	.word	0x08023e90

08018b3c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 8018b3c:	b590      	push	{r4, r7, lr}
 8018b3e:	b089      	sub	sp, #36	; 0x24
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6178      	str	r0, [r7, #20]
 8018b44:	6139      	str	r1, [r7, #16]
 8018b46:	ed87 0b02 	vstr	d0, [r7, #8]
 8018b4a:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018b4e:	22ac      	movs	r2, #172	; 0xac
 8018b50:	490f      	ldr	r1, [pc, #60]	; (8018b90 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 8018b52:	2038      	movs	r0, #56	; 0x38
 8018b54:	f7ef fd96 	bl	8008684 <_ZnwjPKci>
 8018b58:	4604      	mov	r4, r0
 8018b5a:	6939      	ldr	r1, [r7, #16]
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	f000 ff27 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018b62:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 8018b64:	697b      	ldr	r3, [r7, #20]
 8018b66:	69db      	ldr	r3, [r3, #28]
 8018b68:	69f9      	ldr	r1, [r7, #28]
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f004 fdb6 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 8018b70:	69fb      	ldr	r3, [r7, #28]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	3328      	adds	r3, #40	; 0x28
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	ed97 1b00 	vldr	d1, [r7]
 8018b7c:	ed97 0b02 	vldr	d0, [r7, #8]
 8018b80:	69f8      	ldr	r0, [r7, #28]
 8018b82:	4798      	blx	r3
    return *this;
 8018b84:	697b      	ldr	r3, [r7, #20]
}
 8018b86:	4618      	mov	r0, r3
 8018b88:	3724      	adds	r7, #36	; 0x24
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd90      	pop	{r4, r7, pc}
 8018b8e:	bf00      	nop
 8018b90:	08023e90 	.word	0x08023e90

08018b94 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 8018b94:	b590      	push	{r4, r7, lr}
 8018b96:	b087      	sub	sp, #28
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	60f8      	str	r0, [r7, #12]
 8018b9c:	60b9      	str	r1, [r7, #8]
 8018b9e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018ba0:	22b4      	movs	r2, #180	; 0xb4
 8018ba2:	490e      	ldr	r1, [pc, #56]	; (8018bdc <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 8018ba4:	2038      	movs	r0, #56	; 0x38
 8018ba6:	f7ef fd6d 	bl	8008684 <_ZnwjPKci>
 8018baa:	4604      	mov	r4, r0
 8018bac:	68b9      	ldr	r1, [r7, #8]
 8018bae:	4620      	mov	r0, r4
 8018bb0:	f000 fefe 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018bb4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	69db      	ldr	r3, [r3, #28]
 8018bba:	6979      	ldr	r1, [r7, #20]
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	f004 fd8d 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018bc2:	697b      	ldr	r3, [r7, #20]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	3338      	adds	r3, #56	; 0x38
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	6879      	ldr	r1, [r7, #4]
 8018bcc:	6978      	ldr	r0, [r7, #20]
 8018bce:	4798      	blx	r3
    return *this;
 8018bd0:	68fb      	ldr	r3, [r7, #12]
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	371c      	adds	r7, #28
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd90      	pop	{r4, r7, pc}
 8018bda:	bf00      	nop
 8018bdc:	08023e90 	.word	0x08023e90

08018be0 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8018be0:	b590      	push	{r4, r7, lr}
 8018be2:	b087      	sub	sp, #28
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	60f8      	str	r0, [r7, #12]
 8018be8:	60b9      	str	r1, [r7, #8]
 8018bea:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018bec:	22bc      	movs	r2, #188	; 0xbc
 8018bee:	490e      	ldr	r1, [pc, #56]	; (8018c28 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8018bf0:	2038      	movs	r0, #56	; 0x38
 8018bf2:	f7ef fd47 	bl	8008684 <_ZnwjPKci>
 8018bf6:	4604      	mov	r4, r0
 8018bf8:	68b9      	ldr	r1, [r7, #8]
 8018bfa:	4620      	mov	r0, r4
 8018bfc:	f000 fed8 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018c00:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	69db      	ldr	r3, [r3, #28]
 8018c06:	6979      	ldr	r1, [r7, #20]
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f004 fd67 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018c0e:	697b      	ldr	r3, [r7, #20]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	332c      	adds	r3, #44	; 0x2c
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	6879      	ldr	r1, [r7, #4]
 8018c18:	6978      	ldr	r0, [r7, #20]
 8018c1a:	4798      	blx	r3
    return *this;
 8018c1c:	68fb      	ldr	r3, [r7, #12]
}
 8018c1e:	4618      	mov	r0, r3
 8018c20:	371c      	adds	r7, #28
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd90      	pop	{r4, r7, pc}
 8018c26:	bf00      	nop
 8018c28:	08023e90 	.word	0x08023e90

08018c2c <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8018c2c:	b590      	push	{r4, r7, lr}
 8018c2e:	b087      	sub	sp, #28
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	60f8      	str	r0, [r7, #12]
 8018c34:	60b9      	str	r1, [r7, #8]
 8018c36:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018c38:	22c4      	movs	r2, #196	; 0xc4
 8018c3a:	490e      	ldr	r1, [pc, #56]	; (8018c74 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 8018c3c:	2038      	movs	r0, #56	; 0x38
 8018c3e:	f7ef fd21 	bl	8008684 <_ZnwjPKci>
 8018c42:	4604      	mov	r4, r0
 8018c44:	68b9      	ldr	r1, [r7, #8]
 8018c46:	4620      	mov	r0, r4
 8018c48:	f000 feb2 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018c4c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	69db      	ldr	r3, [r3, #28]
 8018c52:	6979      	ldr	r1, [r7, #20]
 8018c54:	4618      	mov	r0, r3
 8018c56:	f004 fd41 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018c5a:	697b      	ldr	r3, [r7, #20]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	3330      	adds	r3, #48	; 0x30
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	6879      	ldr	r1, [r7, #4]
 8018c64:	6978      	ldr	r0, [r7, #20]
 8018c66:	4798      	blx	r3
    return *this;
 8018c68:	68fb      	ldr	r3, [r7, #12]
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	371c      	adds	r7, #28
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd90      	pop	{r4, r7, pc}
 8018c72:	bf00      	nop
 8018c74:	08023e90 	.word	0x08023e90

08018c78 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8018c78:	b590      	push	{r4, r7, lr}
 8018c7a:	b087      	sub	sp, #28
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	60f8      	str	r0, [r7, #12]
 8018c80:	60b9      	str	r1, [r7, #8]
 8018c82:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018c84:	22cc      	movs	r2, #204	; 0xcc
 8018c86:	490e      	ldr	r1, [pc, #56]	; (8018cc0 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 8018c88:	2038      	movs	r0, #56	; 0x38
 8018c8a:	f7ef fcfb 	bl	8008684 <_ZnwjPKci>
 8018c8e:	4604      	mov	r4, r0
 8018c90:	68b9      	ldr	r1, [r7, #8]
 8018c92:	4620      	mov	r0, r4
 8018c94:	f000 fe8c 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018c98:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	69db      	ldr	r3, [r3, #28]
 8018c9e:	6979      	ldr	r1, [r7, #20]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f004 fd1b 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018ca6:	697b      	ldr	r3, [r7, #20]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	3334      	adds	r3, #52	; 0x34
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	6879      	ldr	r1, [r7, #4]
 8018cb0:	6978      	ldr	r0, [r7, #20]
 8018cb2:	4798      	blx	r3
    return *this;
 8018cb4:	68fb      	ldr	r3, [r7, #12]
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	371c      	adds	r7, #28
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd90      	pop	{r4, r7, pc}
 8018cbe:	bf00      	nop
 8018cc0:	08023e90 	.word	0x08023e90

08018cc4 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018cc4:	b590      	push	{r4, r7, lr}
 8018cc6:	b087      	sub	sp, #28
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	60f8      	str	r0, [r7, #12]
 8018ccc:	60b9      	str	r1, [r7, #8]
 8018cce:	607a      	str	r2, [r7, #4]
 8018cd0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018cd2:	22d4      	movs	r2, #212	; 0xd4
 8018cd4:	490e      	ldr	r1, [pc, #56]	; (8018d10 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 8018cd6:	2038      	movs	r0, #56	; 0x38
 8018cd8:	f7ef fcd4 	bl	8008684 <_ZnwjPKci>
 8018cdc:	4604      	mov	r4, r0
 8018cde:	68b9      	ldr	r1, [r7, #8]
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	f000 fe65 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018ce6:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	69db      	ldr	r3, [r3, #28]
 8018cec:	6979      	ldr	r1, [r7, #20]
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f004 fcf4 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 8018cf4:	697b      	ldr	r3, [r7, #20]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	333c      	adds	r3, #60	; 0x3c
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	683a      	ldr	r2, [r7, #0]
 8018cfe:	6879      	ldr	r1, [r7, #4]
 8018d00:	6978      	ldr	r0, [r7, #20]
 8018d02:	4798      	blx	r3
    return *this;
 8018d04:	68fb      	ldr	r3, [r7, #12]
}
 8018d06:	4618      	mov	r0, r3
 8018d08:	371c      	adds	r7, #28
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	bd90      	pop	{r4, r7, pc}
 8018d0e:	bf00      	nop
 8018d10:	08023e90 	.word	0x08023e90

08018d14 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018d14:	b590      	push	{r4, r7, lr}
 8018d16:	b087      	sub	sp, #28
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	60f8      	str	r0, [r7, #12]
 8018d1c:	60b9      	str	r1, [r7, #8]
 8018d1e:	607a      	str	r2, [r7, #4]
 8018d20:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018d22:	22dc      	movs	r2, #220	; 0xdc
 8018d24:	490e      	ldr	r1, [pc, #56]	; (8018d60 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 8018d26:	2038      	movs	r0, #56	; 0x38
 8018d28:	f7ef fcac 	bl	8008684 <_ZnwjPKci>
 8018d2c:	4604      	mov	r4, r0
 8018d2e:	6879      	ldr	r1, [r7, #4]
 8018d30:	4620      	mov	r0, r4
 8018d32:	f000 fe3d 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018d36:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	69db      	ldr	r3, [r3, #28]
 8018d3c:	6979      	ldr	r1, [r7, #20]
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f004 fccc 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	3340      	adds	r3, #64	; 0x40
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	683a      	ldr	r2, [r7, #0]
 8018d4e:	68b9      	ldr	r1, [r7, #8]
 8018d50:	6978      	ldr	r0, [r7, #20]
 8018d52:	4798      	blx	r3
    return *this;
 8018d54:	68fb      	ldr	r3, [r7, #12]
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	371c      	adds	r7, #28
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd90      	pop	{r4, r7, pc}
 8018d5e:	bf00      	nop
 8018d60:	08023e90 	.word	0x08023e90

08018d64 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8018d64:	b590      	push	{r4, r7, lr}
 8018d66:	b087      	sub	sp, #28
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	60f8      	str	r0, [r7, #12]
 8018d6c:	60b9      	str	r1, [r7, #8]
 8018d6e:	607a      	str	r2, [r7, #4]
 8018d70:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018d72:	22e4      	movs	r2, #228	; 0xe4
 8018d74:	4911      	ldr	r1, [pc, #68]	; (8018dbc <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 8018d76:	2038      	movs	r0, #56	; 0x38
 8018d78:	f7ef fc84 	bl	8008684 <_ZnwjPKci>
 8018d7c:	4604      	mov	r4, r0
 8018d7e:	68b9      	ldr	r1, [r7, #8]
 8018d80:	4620      	mov	r0, r4
 8018d82:	f000 fe15 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018d86:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	6a1b      	ldr	r3, [r3, #32]
 8018d8c:	6979      	ldr	r1, [r7, #20]
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f004 fca4 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018d94:	697b      	ldr	r3, [r7, #20]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	3330      	adds	r3, #48	; 0x30
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	6879      	ldr	r1, [r7, #4]
 8018d9e:	6978      	ldr	r0, [r7, #20]
 8018da0:	4798      	blx	r3
    newParameter->setSize(size);
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	3348      	adds	r3, #72	; 0x48
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	6839      	ldr	r1, [r7, #0]
 8018dac:	6978      	ldr	r0, [r7, #20]
 8018dae:	4798      	blx	r3
    return *this;
 8018db0:	68fb      	ldr	r3, [r7, #12]
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	371c      	adds	r7, #28
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd90      	pop	{r4, r7, pc}
 8018dba:	bf00      	nop
 8018dbc:	08023e90 	.word	0x08023e90

08018dc0 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018dc0:	b590      	push	{r4, r7, lr}
 8018dc2:	b087      	sub	sp, #28
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	60f8      	str	r0, [r7, #12]
 8018dc8:	60b9      	str	r1, [r7, #8]
 8018dca:	607a      	str	r2, [r7, #4]
 8018dcc:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018dce:	22ed      	movs	r2, #237	; 0xed
 8018dd0:	490e      	ldr	r1, [pc, #56]	; (8018e0c <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 8018dd2:	2038      	movs	r0, #56	; 0x38
 8018dd4:	f7ef fc56 	bl	8008684 <_ZnwjPKci>
 8018dd8:	4604      	mov	r4, r0
 8018dda:	6879      	ldr	r1, [r7, #4]
 8018ddc:	4620      	mov	r0, r4
 8018dde:	f000 fde7 	bl	80199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018de2:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	6a1b      	ldr	r3, [r3, #32]
 8018de8:	6979      	ldr	r1, [r7, #20]
 8018dea:	4618      	mov	r0, r3
 8018dec:	f004 fc76 	bl	801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8018df0:	697b      	ldr	r3, [r7, #20]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	3340      	adds	r3, #64	; 0x40
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	683a      	ldr	r2, [r7, #0]
 8018dfa:	68b9      	ldr	r1, [r7, #8]
 8018dfc:	6978      	ldr	r0, [r7, #20]
 8018dfe:	4798      	blx	r3
    return *this;
 8018e00:	68fb      	ldr	r3, [r7, #12]
}
 8018e02:	4618      	mov	r0, r3
 8018e04:	371c      	adds	r7, #28
 8018e06:	46bd      	mov	sp, r7
 8018e08:	bd90      	pop	{r4, r7, pc}
 8018e0a:	bf00      	nop
 8018e0c:	08023e90 	.word	0x08023e90

08018e10 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 8018e10:	b590      	push	{r4, r7, lr}
 8018e12:	b083      	sub	sp, #12
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	3318      	adds	r3, #24
 8018e20:	681c      	ldr	r4, [r3, #0]
 8018e22:	2300      	movs	r3, #0
 8018e24:	2200      	movs	r2, #0
 8018e26:	6839      	ldr	r1, [r7, #0]
 8018e28:	6878      	ldr	r0, [r7, #4]
 8018e2a:	47a0      	blx	r4
 8018e2c:	4603      	mov	r3, r0
}
 8018e2e:	4618      	mov	r0, r3
 8018e30:	370c      	adds	r7, #12
 8018e32:	46bd      	mov	sp, r7
 8018e34:	bd90      	pop	{r4, r7, pc}
	...

08018e38 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b086      	sub	sp, #24
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	60f8      	str	r0, [r7, #12]
 8018e40:	60b9      	str	r1, [r7, #8]
 8018e42:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018e44:	68bb      	ldr	r3, [r7, #8]
 8018e46:	69db      	ldr	r3, [r3, #28]
 8018e48:	6879      	ldr	r1, [r7, #4]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f004 fc7c 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018e50:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 8018e52:	697b      	ldr	r3, [r7, #20]
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d008      	beq.n	8018e6a <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	3360      	adds	r3, #96	; 0x60
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	68fa      	ldr	r2, [r7, #12]
 8018e62:	6979      	ldr	r1, [r7, #20]
 8018e64:	4610      	mov	r0, r2
 8018e66:	4798      	blx	r3
 8018e68:	e004      	b.n	8018e74 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	4903      	ldr	r1, [pc, #12]	; (8018e7c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f7f2 fe10 	bl	800ba94 <_Z10StringFromPKc>
}
 8018e74:	68f8      	ldr	r0, [r7, #12]
 8018e76:	3718      	adds	r7, #24
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	08023e8c 	.word	0x08023e8c

08018e80 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b084      	sub	sp, #16
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
 8018e88:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	69db      	ldr	r3, [r3, #28]
 8018e8e:	6839      	ldr	r1, [r7, #0]
 8018e90:	4618      	mov	r0, r3
 8018e92:	f004 fc59 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018e96:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	bf14      	ite	ne
 8018e9e:	2301      	movne	r3, #1
 8018ea0:	2300      	moveq	r3, #0
 8018ea2:	b2db      	uxtb	r3, r3
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3710      	adds	r7, #16
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b084      	sub	sp, #16
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	6a1b      	ldr	r3, [r3, #32]
 8018eba:	6839      	ldr	r1, [r7, #0]
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f004 fc43 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018ec2:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	bf14      	ite	ne
 8018eca:	2301      	movne	r3, #1
 8018ecc:	2300      	moveq	r3, #0
 8018ece:	b2db      	uxtb	r3, r3
}
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	3710      	adds	r7, #16
 8018ed4:	46bd      	mov	sp, r7
 8018ed6:	bd80      	pop	{r7, pc}

08018ed8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8018ed8:	b590      	push	{r4, r7, lr}
 8018eda:	b089      	sub	sp, #36	; 0x24
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	60f8      	str	r0, [r7, #12]
 8018ee0:	60b9      	str	r1, [r7, #8]
 8018ee2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	69db      	ldr	r3, [r3, #28]
 8018ee8:	6879      	ldr	r1, [r7, #4]
 8018eea:	4618      	mov	r0, r3
 8018eec:	f004 fc2c 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018ef0:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018ef2:	2400      	movs	r4, #0
 8018ef4:	69fb      	ldr	r3, [r7, #28]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d004      	beq.n	8018f04 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 8018efa:	69f9      	ldr	r1, [r7, #28]
 8018efc:	68f8      	ldr	r0, [r7, #12]
 8018efe:	f7f0 f829 	bl	8008f54 <_ZN14MockNamedValueC1ERKS_>
 8018f02:	e00c      	b.n	8018f1e <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 8018f04:	f107 0314 	add.w	r3, r7, #20
 8018f08:	490a      	ldr	r1, [pc, #40]	; (8018f34 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7f1 ff7d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8018f10:	2401      	movs	r4, #1
 8018f12:	f107 0314 	add.w	r3, r7, #20
 8018f16:	4619      	mov	r1, r3
 8018f18:	68f8      	ldr	r0, [r7, #12]
 8018f1a:	f002 fc9b 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018f1e:	2c00      	cmp	r4, #0
 8018f20:	d004      	beq.n	8018f2c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 8018f22:	f107 0314 	add.w	r3, r7, #20
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7f2 fb27 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8018f2c:	68f8      	ldr	r0, [r7, #12]
 8018f2e:	3724      	adds	r7, #36	; 0x24
 8018f30:	46bd      	mov	sp, r7
 8018f32:	bd90      	pop	{r4, r7, pc}
 8018f34:	08023e8c 	.word	0x08023e8c

08018f38 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 8018f38:	b590      	push	{r4, r7, lr}
 8018f3a:	b089      	sub	sp, #36	; 0x24
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	60f8      	str	r0, [r7, #12]
 8018f40:	60b9      	str	r1, [r7, #8]
 8018f42:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8018f44:	68bb      	ldr	r3, [r7, #8]
 8018f46:	6a1b      	ldr	r3, [r3, #32]
 8018f48:	6879      	ldr	r1, [r7, #4]
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f004 fbfc 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018f50:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018f52:	2400      	movs	r4, #0
 8018f54:	69fb      	ldr	r3, [r7, #28]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d004      	beq.n	8018f64 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 8018f5a:	69f9      	ldr	r1, [r7, #28]
 8018f5c:	68f8      	ldr	r0, [r7, #12]
 8018f5e:	f7ef fff9 	bl	8008f54 <_ZN14MockNamedValueC1ERKS_>
 8018f62:	e00c      	b.n	8018f7e <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8018f64:	f107 0314 	add.w	r3, r7, #20
 8018f68:	490a      	ldr	r1, [pc, #40]	; (8018f94 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f7f1 ff4d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8018f70:	2401      	movs	r4, #1
 8018f72:	f107 0314 	add.w	r3, r7, #20
 8018f76:	4619      	mov	r1, r3
 8018f78:	68f8      	ldr	r0, [r7, #12]
 8018f7a:	f002 fc6b 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018f7e:	2c00      	cmp	r4, #0
 8018f80:	d004      	beq.n	8018f8c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8018f82:	f107 0314 	add.w	r3, r7, #20
 8018f86:	4618      	mov	r0, r3
 8018f88:	f7f2 faf7 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 8018f8c:	68f8      	ldr	r0, [r7, #12]
 8018f8e:	3724      	adds	r7, #36	; 0x24
 8018f90:	46bd      	mov	sp, r7
 8018f92:	bd90      	pop	{r4, r7, pc}
 8018f94:	08023e8c 	.word	0x08023e8c

08018f98 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b084      	sub	sp, #16
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	69db      	ldr	r3, [r3, #28]
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f004 fbfe 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8018faa:	60f8      	str	r0, [r7, #12]
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d014      	beq.n	8018fdc <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8018fb2:	68f9      	ldr	r1, [r7, #12]
 8018fb4:	6878      	ldr	r0, [r7, #4]
 8018fb6:	f000 fced 	bl	8019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f000 fd1f 	bl	8019a00 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	f083 0301 	eor.w	r3, r3, #1
 8018fc8:	b2db      	uxtb	r3, r3
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d001      	beq.n	8018fd2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	e023      	b.n	801901a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8018fd2:	68f8      	ldr	r0, [r7, #12]
 8018fd4:	f004 faf0 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8018fd8:	60f8      	str	r0, [r7, #12]
 8018fda:	e7e7      	b.n	8018fac <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	6a1b      	ldr	r3, [r3, #32]
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f004 fbe0 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8018fe6:	60f8      	str	r0, [r7, #12]
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d014      	beq.n	8019018 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 8018fee:	68f9      	ldr	r1, [r7, #12]
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f000 fccf 	bl	8019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f000 fd01 	bl	8019a00 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018ffe:	4603      	mov	r3, r0
 8019000:	f083 0301 	eor.w	r3, r3, #1
 8019004:	b2db      	uxtb	r3, r3
 8019006:	2b00      	cmp	r3, #0
 8019008:	d001      	beq.n	801900e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801900a:	2300      	movs	r3, #0
 801900c:	e005      	b.n	801901a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801900e:	68f8      	ldr	r0, [r7, #12]
 8019010:	f004 fad2 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 8019014:	60f8      	str	r0, [r7, #12]
 8019016:	e7e7      	b.n	8018fe8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 8019018:	2301      	movs	r3, #1
}
 801901a:	4618      	mov	r0, r3
 801901c:	3710      	adds	r7, #16
 801901e:	46bd      	mov	sp, r7
 8019020:	bd80      	pop	{r7, pc}

08019022 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 8019022:	b480      	push	{r7}
 8019024:	b083      	sub	sp, #12
 8019026:	af00      	add	r7, sp, #0
 8019028:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	2201      	movs	r2, #1
 801902e:	731a      	strb	r2, [r3, #12]
    return *this;
 8019030:	687b      	ldr	r3, [r7, #4]
}
 8019032:	4618      	mov	r0, r3
 8019034:	370c      	adds	r7, #12
 8019036:	46bd      	mov	sp, r7
 8019038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903c:	4770      	bx	lr

0801903e <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801903e:	b480      	push	{r7}
 8019040:	b083      	sub	sp, #12
 8019042:	af00      	add	r7, sp, #0
 8019044:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801904e:	429a      	cmp	r2, r3
 8019050:	bf0c      	ite	eq
 8019052:	2301      	moveq	r3, #1
 8019054:	2300      	movne	r3, #0
 8019056:	b2db      	uxtb	r3, r3
}
 8019058:	4618      	mov	r0, r3
 801905a:	370c      	adds	r7, #12
 801905c:	46bd      	mov	sp, r7
 801905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019062:	4770      	bx	lr

08019064 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8019064:	b480      	push	{r7}
 8019066:	b083      	sub	sp, #12
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019074:	429a      	cmp	r2, r3
 8019076:	bf34      	ite	cc
 8019078:	2301      	movcc	r3, #1
 801907a:	2300      	movcs	r3, #0
 801907c:	b2db      	uxtb	r3, r3
}
 801907e:	4618      	mov	r0, r3
 8019080:	370c      	adds	r7, #12
 8019082:	46bd      	mov	sp, r7
 8019084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019088:	4770      	bx	lr

0801908a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801908a:	b580      	push	{r7, lr}
 801908c:	b082      	sub	sp, #8
 801908e:	af00      	add	r7, sp, #0
 8019090:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	33cc      	adds	r3, #204	; 0xcc
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	4798      	blx	r3
 801909e:	4603      	mov	r3, r0
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d00c      	beq.n	80190be <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	7b1b      	ldrb	r3, [r3, #12]
 80190a8:	f083 0301 	eor.w	r3, r3, #1
 80190ac:	b2db      	uxtb	r3, r3
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d103      	bne.n	80190ba <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	7b5b      	ldrb	r3, [r3, #13]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d001      	beq.n	80190be <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 80190ba:	2301      	movs	r3, #1
 80190bc:	e000      	b.n	80190c0 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 80190be:	2300      	movs	r3, #0
}
 80190c0:	4618      	mov	r0, r3
 80190c2:	3708      	adds	r7, #8
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bd80      	pop	{r7, pc}

080190c8 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	33d0      	adds	r3, #208	; 0xd0
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	6878      	ldr	r0, [r7, #4]
 80190da:	4798      	blx	r3
 80190dc:	4603      	mov	r3, r0
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d006      	beq.n	80190f0 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d001      	beq.n	80190f0 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 80190ec:	2301      	movs	r3, #1
 80190ee:	e000      	b.n	80190f2 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 80190f0:	2300      	movs	r3, #0
}
 80190f2:	4618      	mov	r0, r3
 80190f4:	3708      	adds	r7, #8
 80190f6:	46bd      	mov	sp, r7
 80190f8:	bd80      	pop	{r7, pc}

080190fa <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 80190fa:	b580      	push	{r7, lr}
 80190fc:	b082      	sub	sp, #8
 80190fe:	af00      	add	r7, sp, #0
 8019100:	6078      	str	r0, [r7, #4]
 8019102:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019108:	1c5a      	adds	r2, r3, #1
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	691b      	ldr	r3, [r3, #16]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d00c      	beq.n	8019130 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801911a:	683a      	ldr	r2, [r7, #0]
 801911c:	429a      	cmp	r2, r3
 801911e:	d304      	bcc.n	801912a <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	695b      	ldr	r3, [r3, #20]
 8019124:	683a      	ldr	r2, [r7, #0]
 8019126:	429a      	cmp	r2, r3
 8019128:	d902      	bls.n	8019130 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	2201      	movs	r2, #1
 801912e:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	33ec      	adds	r3, #236	; 0xec
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	6878      	ldr	r0, [r7, #4]
 801913a:	4798      	blx	r3
}
 801913c:	bf00      	nop
 801913e:	3708      	adds	r7, #8
 8019140:	46bd      	mov	sp, r7
 8019142:	bd80      	pop	{r7, pc}

08019144 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 8019144:	b480      	push	{r7}
 8019146:	b083      	sub	sp, #12
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	2201      	movs	r2, #1
 8019150:	735a      	strb	r2, [r3, #13]
}
 8019152:	bf00      	nop
 8019154:	370c      	adds	r7, #12
 8019156:	46bd      	mov	sp, r7
 8019158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801915c:	4770      	bx	lr

0801915e <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801915e:	b480      	push	{r7}
 8019160:	b083      	sub	sp, #12
 8019162:	af00      	add	r7, sp, #0
 8019164:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	2201      	movs	r2, #1
 801916a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801916e:	bf00      	nop
 8019170:	370c      	adds	r7, #12
 8019172:	46bd      	mov	sp, r7
 8019174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019178:	4770      	bx	lr

0801917a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801917a:	b580      	push	{r7, lr}
 801917c:	b084      	sub	sp, #16
 801917e:	af00      	add	r7, sp, #0
 8019180:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019188:	f083 0301 	eor.w	r3, r3, #1
 801918c:	b2da      	uxtb	r2, r3
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2200      	movs	r2, #0
 8019198:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	69db      	ldr	r3, [r3, #28]
 801919e:	4618      	mov	r0, r3
 80191a0:	f004 fb01 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 80191a4:	60f8      	str	r0, [r7, #12]
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d00d      	beq.n	80191c8 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 80191ac:	68f9      	ldr	r1, [r7, #12]
 80191ae:	6878      	ldr	r0, [r7, #4]
 80191b0:	f000 fbf0 	bl	8019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80191b4:	4603      	mov	r3, r0
 80191b6:	2100      	movs	r1, #0
 80191b8:	4618      	mov	r0, r3
 80191ba:	f000 fc11 	bl	80199e0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 80191be:	68f8      	ldr	r0, [r7, #12]
 80191c0:	f004 f9fa 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80191c4:	60f8      	str	r0, [r7, #12]
 80191c6:	e7ee      	b.n	80191a6 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6a1b      	ldr	r3, [r3, #32]
 80191cc:	4618      	mov	r0, r3
 80191ce:	f004 faea 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 80191d2:	60f8      	str	r0, [r7, #12]
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d00d      	beq.n	80191f6 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 80191da:	68f9      	ldr	r1, [r7, #12]
 80191dc:	6878      	ldr	r0, [r7, #4]
 80191de:	f000 fbd9 	bl	8019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80191e2:	4603      	mov	r3, r0
 80191e4:	2100      	movs	r1, #0
 80191e6:	4618      	mov	r0, r3
 80191e8:	f000 fbfa 	bl	80199e0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 80191ec:	68f8      	ldr	r0, [r7, #12]
 80191ee:	f004 f9e3 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80191f2:	60f8      	str	r0, [r7, #12]
 80191f4:	e7ee      	b.n	80191d4 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 80191f6:	bf00      	nop
 80191f8:	3710      	adds	r7, #16
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd80      	pop	{r7, pc}

080191fe <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 80191fe:	b590      	push	{r4, r7, lr}
 8019200:	b087      	sub	sp, #28
 8019202:	af00      	add	r7, sp, #0
 8019204:	6078      	str	r0, [r7, #4]
 8019206:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	69db      	ldr	r3, [r3, #28]
 801920c:	4618      	mov	r0, r3
 801920e:	f004 faca 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8019212:	6178      	str	r0, [r7, #20]
 8019214:	697b      	ldr	r3, [r7, #20]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d022      	beq.n	8019260 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801921a:	f107 030c 	add.w	r3, r7, #12
 801921e:	6979      	ldr	r1, [r7, #20]
 8019220:	4618      	mov	r0, r3
 8019222:	f004 fa04 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 8019226:	f107 030c 	add.w	r3, r7, #12
 801922a:	6839      	ldr	r1, [r7, #0]
 801922c:	4618      	mov	r0, r3
 801922e:	f7f2 f9b0 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8019232:	4603      	mov	r3, r0
 8019234:	461c      	mov	r4, r3
 8019236:	f107 030c 	add.w	r3, r7, #12
 801923a:	4618      	mov	r0, r3
 801923c:	f7f2 f99d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8019240:	2c00      	cmp	r4, #0
 8019242:	d008      	beq.n	8019256 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8019244:	6979      	ldr	r1, [r7, #20]
 8019246:	6878      	ldr	r0, [r7, #4]
 8019248:	f000 fba4 	bl	8019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801924c:	4603      	mov	r3, r0
 801924e:	2101      	movs	r1, #1
 8019250:	4618      	mov	r0, r3
 8019252:	f000 fbc5 	bl	80199e0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8019256:	6978      	ldr	r0, [r7, #20]
 8019258:	f004 f9ae 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 801925c:	6178      	str	r0, [r7, #20]
 801925e:	e7d9      	b.n	8019214 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8019260:	bf00      	nop
 8019262:	371c      	adds	r7, #28
 8019264:	46bd      	mov	sp, r7
 8019266:	bd90      	pop	{r4, r7, pc}

08019268 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 8019268:	b590      	push	{r4, r7, lr}
 801926a:	b087      	sub	sp, #28
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
 8019270:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	6a1b      	ldr	r3, [r3, #32]
 8019276:	4618      	mov	r0, r3
 8019278:	f004 fa95 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 801927c:	6178      	str	r0, [r7, #20]
 801927e:	697b      	ldr	r3, [r7, #20]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d022      	beq.n	80192ca <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8019284:	f107 030c 	add.w	r3, r7, #12
 8019288:	6979      	ldr	r1, [r7, #20]
 801928a:	4618      	mov	r0, r3
 801928c:	f004 f9cf 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 8019290:	f107 030c 	add.w	r3, r7, #12
 8019294:	6839      	ldr	r1, [r7, #0]
 8019296:	4618      	mov	r0, r3
 8019298:	f7f2 f97b 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801929c:	4603      	mov	r3, r0
 801929e:	461c      	mov	r4, r3
 80192a0:	f107 030c 	add.w	r3, r7, #12
 80192a4:	4618      	mov	r0, r3
 80192a6:	f7f2 f968 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80192aa:	2c00      	cmp	r4, #0
 80192ac:	d008      	beq.n	80192c0 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 80192ae:	6979      	ldr	r1, [r7, #20]
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	f000 fb6f 	bl	8019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80192b6:	4603      	mov	r3, r0
 80192b8:	2101      	movs	r1, #1
 80192ba:	4618      	mov	r0, r3
 80192bc:	f000 fb90 	bl	80199e0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 80192c0:	6978      	ldr	r0, [r7, #20]
 80192c2:	f004 f979 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80192c6:	6178      	str	r0, [r7, #20]
 80192c8:	e7d9      	b.n	801927e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 80192ca:	bf00      	nop
 80192cc:	371c      	adds	r7, #28
 80192ce:	46bd      	mov	sp, r7
 80192d0:	bd90      	pop	{r4, r7, pc}
	...

080192d4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b086      	sub	sp, #24
 80192d8:	af00      	add	r7, sp, #0
 80192da:	60f8      	str	r0, [r7, #12]
 80192dc:	60b9      	str	r1, [r7, #8]
 80192de:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80192e0:	68bb      	ldr	r3, [r7, #8]
 80192e2:	69db      	ldr	r3, [r3, #28]
 80192e4:	6879      	ldr	r1, [r7, #4]
 80192e6:	4618      	mov	r0, r3
 80192e8:	f004 fa2e 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80192ec:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 80192ee:	697b      	ldr	r3, [r7, #20]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d005      	beq.n	8019300 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	6979      	ldr	r1, [r7, #20]
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7ff fa0b 	bl	8018714 <_Z10StringFromRK14MockNamedValue>
 80192fe:	e003      	b.n	8019308 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8019300:	4903      	ldr	r1, [pc, #12]	; (8019310 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8019302:	68f8      	ldr	r0, [r7, #12]
 8019304:	f7f1 fd81 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
}
 8019308:	68f8      	ldr	r0, [r7, #12]
 801930a:	3718      	adds	r7, #24
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}
 8019310:	08023ef8 	.word	0x08023ef8

08019314 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8019314:	b590      	push	{r4, r7, lr}
 8019316:	b087      	sub	sp, #28
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
 801931c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	69dc      	ldr	r4, [r3, #28]
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	335c      	adds	r3, #92	; 0x5c
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	f107 020c 	add.w	r2, r7, #12
 801932e:	6839      	ldr	r1, [r7, #0]
 8019330:	4610      	mov	r0, r2
 8019332:	4798      	blx	r3
 8019334:	f107 030c 	add.w	r3, r7, #12
 8019338:	4619      	mov	r1, r3
 801933a:	4620      	mov	r0, r4
 801933c:	f004 fa04 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019340:	6178      	str	r0, [r7, #20]
 8019342:	f107 030c 	add.w	r3, r7, #12
 8019346:	4618      	mov	r0, r3
 8019348:	f7f2 f917 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801934c:	697b      	ldr	r3, [r7, #20]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d00d      	beq.n	801936e <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8019352:	697b      	ldr	r3, [r7, #20]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	3350      	adds	r3, #80	; 0x50
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	6839      	ldr	r1, [r7, #0]
 801935c:	6978      	ldr	r0, [r7, #20]
 801935e:	4798      	blx	r3
 8019360:	4603      	mov	r3, r0
 8019362:	2b00      	cmp	r3, #0
 8019364:	bf14      	ite	ne
 8019366:	2301      	movne	r3, #1
 8019368:	2300      	moveq	r3, #0
 801936a:	b2db      	uxtb	r3, r3
 801936c:	e006      	b.n	801937c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	7b1b      	ldrb	r3, [r3, #12]
 8019372:	2b00      	cmp	r3, #0
 8019374:	bf14      	ite	ne
 8019376:	2301      	movne	r3, #1
 8019378:	2300      	moveq	r3, #0
 801937a:	b2db      	uxtb	r3, r3
}
 801937c:	4618      	mov	r0, r3
 801937e:	371c      	adds	r7, #28
 8019380:	46bd      	mov	sp, r7
 8019382:	bd90      	pop	{r4, r7, pc}

08019384 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 8019384:	b590      	push	{r4, r7, lr}
 8019386:	b087      	sub	sp, #28
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
 801938c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	6a1c      	ldr	r4, [r3, #32]
 8019392:	683b      	ldr	r3, [r7, #0]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	335c      	adds	r3, #92	; 0x5c
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	f107 020c 	add.w	r2, r7, #12
 801939e:	6839      	ldr	r1, [r7, #0]
 80193a0:	4610      	mov	r0, r2
 80193a2:	4798      	blx	r3
 80193a4:	f107 030c 	add.w	r3, r7, #12
 80193a8:	4619      	mov	r1, r3
 80193aa:	4620      	mov	r0, r4
 80193ac:	f004 f9cc 	bl	801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80193b0:	6178      	str	r0, [r7, #20]
 80193b2:	f107 030c 	add.w	r3, r7, #12
 80193b6:	4618      	mov	r0, r3
 80193b8:	f7f2 f8df 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 80193bc:	697b      	ldr	r3, [r7, #20]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d00d      	beq.n	80193de <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 80193c2:	697b      	ldr	r3, [r7, #20]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	3354      	adds	r3, #84	; 0x54
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	6839      	ldr	r1, [r7, #0]
 80193cc:	6978      	ldr	r0, [r7, #20]
 80193ce:	4798      	blx	r3
 80193d0:	4603      	mov	r3, r0
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	bf14      	ite	ne
 80193d6:	2301      	movne	r3, #1
 80193d8:	2300      	moveq	r3, #0
 80193da:	b2db      	uxtb	r3, r3
 80193dc:	e006      	b.n	80193ec <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	7b1b      	ldrb	r3, [r3, #12]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	bf14      	ite	ne
 80193e6:	2301      	movne	r3, #1
 80193e8:	2300      	moveq	r3, #0
 80193ea:	b2db      	uxtb	r3, r3
}
 80193ec:	4618      	mov	r0, r3
 80193ee:	371c      	adds	r7, #28
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bd90      	pop	{r4, r7, pc}

080193f4 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 80193f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193f6:	b0a1      	sub	sp, #132	; 0x84
 80193f8:	af02      	add	r7, sp, #8
 80193fa:	6078      	str	r0, [r7, #4]
 80193fc:	6039      	str	r1, [r7, #0]
    SimpleString str;
 80193fe:	49bc      	ldr	r1, [pc, #752]	; (80196f0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019400:	6878      	ldr	r0, [r7, #4]
 8019402:	f7f1 fd02 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801940c:	2b00      	cmp	r3, #0
 801940e:	d012      	beq.n	8019436 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8019410:	683b      	ldr	r3, [r7, #0]
 8019412:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8019414:	f107 030c 	add.w	r3, r7, #12
 8019418:	49b6      	ldr	r1, [pc, #728]	; (80196f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801941a:	4618      	mov	r0, r3
 801941c:	f7f2 fdb4 	bl	800bf88 <_Z16StringFromFormatPKcz>
 8019420:	f107 030c 	add.w	r3, r7, #12
 8019424:	4619      	mov	r1, r3
 8019426:	6878      	ldr	r0, [r7, #4]
 8019428:	f7f1 fd5b 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801942c:	f107 030c 	add.w	r3, r7, #12
 8019430:	4618      	mov	r0, r3
 8019432:	f7f2 f8a2 	bl	800b57a <_ZN12SimpleStringD1Ev>

    str += getName();
 8019436:	f107 0314 	add.w	r3, r7, #20
 801943a:	6839      	ldr	r1, [r7, #0]
 801943c:	4618      	mov	r0, r3
 801943e:	f7ff f989 	bl	8018754 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8019442:	f107 0314 	add.w	r3, r7, #20
 8019446:	4619      	mov	r1, r3
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f7f2 f913 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801944e:	f107 0314 	add.w	r3, r7, #20
 8019452:	4618      	mov	r0, r3
 8019454:	f7f2 f891 	bl	800b57a <_ZN12SimpleStringD1Ev>
    str += " -> ";
 8019458:	49a7      	ldr	r1, [pc, #668]	; (80196f8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f7f2 f91c 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 8019460:	683b      	ldr	r3, [r7, #0]
 8019462:	691b      	ldr	r3, [r3, #16]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d02d      	beq.n	80194c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 8019468:	683b      	ldr	r3, [r7, #0]
 801946a:	691a      	ldr	r2, [r3, #16]
 801946c:	683b      	ldr	r3, [r7, #0]
 801946e:	695b      	ldr	r3, [r3, #20]
 8019470:	429a      	cmp	r2, r3
 8019472:	d113      	bne.n	801949c <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 8019474:	683b      	ldr	r3, [r7, #0]
 8019476:	691a      	ldr	r2, [r3, #16]
 8019478:	f107 031c 	add.w	r3, r7, #28
 801947c:	499f      	ldr	r1, [pc, #636]	; (80196fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801947e:	4618      	mov	r0, r3
 8019480:	f7f2 fd82 	bl	800bf88 <_Z16StringFromFormatPKcz>
 8019484:	f107 031c 	add.w	r3, r7, #28
 8019488:	4619      	mov	r1, r3
 801948a:	6878      	ldr	r0, [r7, #4]
 801948c:	f7f2 f8f2 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8019490:	f107 031c 	add.w	r3, r7, #28
 8019494:	4618      	mov	r0, r3
 8019496:	f7f2 f870 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801949a:	e013      	b.n	80194c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	691a      	ldr	r2, [r3, #16]
 80194a0:	683b      	ldr	r3, [r7, #0]
 80194a2:	695b      	ldr	r3, [r3, #20]
 80194a4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80194a8:	4995      	ldr	r1, [pc, #596]	; (8019700 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 80194aa:	f7f2 fd6d 	bl	800bf88 <_Z16StringFromFormatPKcz>
 80194ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80194b2:	4619      	mov	r1, r3
 80194b4:	6878      	ldr	r0, [r7, #4]
 80194b6:	f7f2 f8dd 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 80194ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80194be:	4618      	mov	r0, r3
 80194c0:	f7f2 f85b 	bl	800b57a <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 80194c4:	683b      	ldr	r3, [r7, #0]
 80194c6:	69db      	ldr	r3, [r3, #28]
 80194c8:	4618      	mov	r0, r3
 80194ca:	f004 f96c 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 80194ce:	4603      	mov	r3, r0
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d109      	bne.n	80194e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	6a1b      	ldr	r3, [r3, #32]
 80194d8:	4618      	mov	r0, r3
 80194da:	f004 f964 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 80194de:	4603      	mov	r3, r0
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d101      	bne.n	80194e8 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 80194e4:	2301      	movs	r3, #1
 80194e6:	e000      	b.n	80194ea <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 80194e8:	2300      	movs	r3, #0
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d00b      	beq.n	8019506 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 80194ee:	683b      	ldr	r3, [r7, #0]
 80194f0:	7b1b      	ldrb	r3, [r3, #12]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d001      	beq.n	80194fa <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 80194f6:	4b83      	ldr	r3, [pc, #524]	; (8019704 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 80194f8:	e000      	b.n	80194fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 80194fa:	4b83      	ldr	r3, [pc, #524]	; (8019708 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 80194fc:	4619      	mov	r1, r3
 80194fe:	6878      	ldr	r0, [r7, #4]
 8019500:	f7f2 f8ca 	bl	800b698 <_ZN12SimpleStringpLEPKc>
 8019504:	e0e3      	b.n	80196ce <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019506:	683b      	ldr	r3, [r7, #0]
 8019508:	69db      	ldr	r3, [r3, #28]
 801950a:	4618      	mov	r0, r3
 801950c:	f004 f94b 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8019510:	6778      	str	r0, [r7, #116]	; 0x74
 8019512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019514:	2b00      	cmp	r3, #0
 8019516:	d069      	beq.n	80195ec <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 8019518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801951c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801951e:	4618      	mov	r0, r3
 8019520:	f004 f898 	bl	801d654 <_ZNK22MockNamedValueListNode7getTypeEv>
 8019524:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019528:	4618      	mov	r0, r3
 801952a:	f7f1 fff9 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801952e:	4605      	mov	r5, r0
 8019530:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019534:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019536:	4618      	mov	r0, r3
 8019538:	f004 f879 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 801953c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019540:	4618      	mov	r0, r3
 8019542:	f7f1 ffed 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8019546:	4606      	mov	r6, r0
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	33a4      	adds	r3, #164	; 0xa4
 801954e:	681c      	ldr	r4, [r3, #0]
 8019550:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019554:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019556:	4618      	mov	r0, r3
 8019558:	f004 f869 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 801955c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019560:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019564:	6839      	ldr	r1, [r7, #0]
 8019566:	4618      	mov	r0, r3
 8019568:	47a0      	blx	r4
 801956a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801956e:	4618      	mov	r0, r3
 8019570:	f7f1 ffd6 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8019574:	4603      	mov	r3, r0
 8019576:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801957a:	9300      	str	r3, [sp, #0]
 801957c:	4633      	mov	r3, r6
 801957e:	462a      	mov	r2, r5
 8019580:	4962      	ldr	r1, [pc, #392]	; (801970c <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 8019582:	f7f2 fd01 	bl	800bf88 <_Z16StringFromFormatPKcz>
 8019586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801958a:	4619      	mov	r1, r3
 801958c:	6878      	ldr	r0, [r7, #4]
 801958e:	f7f2 f871 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8019592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019596:	4618      	mov	r0, r3
 8019598:	f7f1 ffef 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801959c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80195a0:	4618      	mov	r0, r3
 80195a2:	f7f1 ffea 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80195a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80195aa:	4618      	mov	r0, r3
 80195ac:	f7f1 ffe5 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80195b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80195b4:	4618      	mov	r0, r3
 80195b6:	f7f1 ffe0 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80195ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80195be:	4618      	mov	r0, r3
 80195c0:	f7f1 ffdb 	bl	800b57a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 80195c4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80195c6:	f003 fff7 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80195ca:	4603      	mov	r3, r0
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	bf14      	ite	ne
 80195d0:	2301      	movne	r3, #1
 80195d2:	2300      	moveq	r3, #0
 80195d4:	b2db      	uxtb	r3, r3
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d003      	beq.n	80195e2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 80195da:	494d      	ldr	r1, [pc, #308]	; (8019710 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 80195dc:	6878      	ldr	r0, [r7, #4]
 80195de:	f7f2 f85b 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 80195e2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80195e4:	f003 ffe8 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80195e8:	6778      	str	r0, [r7, #116]	; 0x74
 80195ea:	e792      	b.n	8019512 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	69db      	ldr	r3, [r3, #28]
 80195f0:	4618      	mov	r0, r3
 80195f2:	f004 f8d8 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 80195f6:	4603      	mov	r3, r0
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d009      	beq.n	8019610 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80195fc:	683b      	ldr	r3, [r7, #0]
 80195fe:	6a1b      	ldr	r3, [r3, #32]
 8019600:	4618      	mov	r0, r3
 8019602:	f004 f8d0 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8019606:	4603      	mov	r3, r0
 8019608:	2b00      	cmp	r3, #0
 801960a:	d001      	beq.n	8019610 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801960c:	2301      	movs	r3, #1
 801960e:	e000      	b.n	8019612 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 8019610:	2300      	movs	r3, #0
 8019612:	2b00      	cmp	r3, #0
 8019614:	d003      	beq.n	801961e <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 8019616:	493e      	ldr	r1, [pc, #248]	; (8019710 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019618:	6878      	ldr	r0, [r7, #4]
 801961a:	f7f2 f83d 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	6a1b      	ldr	r3, [r3, #32]
 8019622:	4618      	mov	r0, r3
 8019624:	f004 f8bf 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8019628:	6778      	str	r0, [r7, #116]	; 0x74
 801962a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801962c:	2b00      	cmp	r3, #0
 801962e:	d046      	beq.n	80196be <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 8019630:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019634:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019636:	4618      	mov	r0, r3
 8019638:	f004 f80c 	bl	801d654 <_ZNK22MockNamedValueListNode7getTypeEv>
 801963c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019640:	4618      	mov	r0, r3
 8019642:	f7f1 ff6d 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 8019646:	4604      	mov	r4, r0
 8019648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801964c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801964e:	4618      	mov	r0, r3
 8019650:	f003 ffed 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 8019654:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019658:	4618      	mov	r0, r3
 801965a:	f7f1 ff61 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801965e:	4603      	mov	r3, r0
 8019660:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8019664:	4622      	mov	r2, r4
 8019666:	492b      	ldr	r1, [pc, #172]	; (8019714 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 8019668:	f7f2 fc8e 	bl	800bf88 <_Z16StringFromFormatPKcz>
 801966c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019670:	4619      	mov	r1, r3
 8019672:	6878      	ldr	r0, [r7, #4]
 8019674:	f7f1 fffe 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8019678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801967c:	4618      	mov	r0, r3
 801967e:	f7f1 ff7c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8019682:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019686:	4618      	mov	r0, r3
 8019688:	f7f1 ff77 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801968c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019690:	4618      	mov	r0, r3
 8019692:	f7f1 ff72 	bl	800b57a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8019696:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019698:	f003 ff8e 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 801969c:	4603      	mov	r3, r0
 801969e:	2b00      	cmp	r3, #0
 80196a0:	bf14      	ite	ne
 80196a2:	2301      	movne	r3, #1
 80196a4:	2300      	moveq	r3, #0
 80196a6:	b2db      	uxtb	r3, r3
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d003      	beq.n	80196b4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 80196ac:	4918      	ldr	r1, [pc, #96]	; (8019710 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 80196ae:	6878      	ldr	r0, [r7, #4]
 80196b0:	f7f1 fff2 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 80196b4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80196b6:	f003 ff7f 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 80196ba:	6778      	str	r0, [r7, #116]	; 0x74
 80196bc:	e7b5      	b.n	801962a <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	7b1b      	ldrb	r3, [r3, #12]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d003      	beq.n	80196ce <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 80196c6:	4914      	ldr	r1, [pc, #80]	; (8019718 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 80196c8:	6878      	ldr	r0, [r7, #4]
 80196ca:	f7f1 ffe5 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 80196d6:	2b01      	cmp	r3, #1
 80196d8:	d101      	bne.n	80196de <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 80196da:	4c05      	ldr	r4, [pc, #20]	; (80196f0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 80196dc:	e000      	b.n	80196e0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 80196de:	4c0f      	ldr	r4, [pc, #60]	; (801971c <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 80196e4:	683a      	ldr	r2, [r7, #0]
 80196e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 80196e8:	2a01      	cmp	r2, #1
 80196ea:	d119      	bne.n	8019720 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 80196ec:	4a00      	ldr	r2, [pc, #0]	; (80196f0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 80196ee:	e018      	b.n	8019722 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 80196f0:	08023e8c 	.word	0x08023e8c
 80196f4:	08023f00 	.word	0x08023f00
 80196f8:	08023f18 	.word	0x08023f18
 80196fc:	08023f20 	.word	0x08023f20
 8019700:	08023f40 	.word	0x08023f40
 8019704:	08023f64 	.word	0x08023f64
 8019708:	08023f7c 	.word	0x08023f7c
 801970c:	08023f8c 	.word	0x08023f8c
 8019710:	08023f98 	.word	0x08023f98
 8019714:	08023f9c 	.word	0x08023f9c
 8019718:	08023fac 	.word	0x08023fac
 801971c:	08023fcc 	.word	0x08023fcc
 8019720:	4a0c      	ldr	r2, [pc, #48]	; (8019754 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 8019722:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8019726:	9201      	str	r2, [sp, #4]
 8019728:	9300      	str	r3, [sp, #0]
 801972a:	4623      	mov	r3, r4
 801972c:	460a      	mov	r2, r1
 801972e:	490a      	ldr	r1, [pc, #40]	; (8019758 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 8019730:	f7f2 fc2a 	bl	800bf88 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8019734:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019738:	4619      	mov	r1, r3
 801973a:	6878      	ldr	r0, [r7, #4]
 801973c:	f7f1 ff9a 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8019740:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019744:	4618      	mov	r0, r3
 8019746:	f7f1 ff18 	bl	800b57a <_ZN12SimpleStringD1Ev>

    return str;
 801974a:	bf00      	nop
}
 801974c:	6878      	ldr	r0, [r7, #4]
 801974e:	377c      	adds	r7, #124	; 0x7c
 8019750:	46bd      	mov	sp, r7
 8019752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019754:	08023fcc 	.word	0x08023fcc
 8019758:	08023fd0 	.word	0x08023fd0

0801975c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801975c:	b590      	push	{r4, r7, lr}
 801975e:	b095      	sub	sp, #84	; 0x54
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
 8019764:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8019766:	496c      	ldr	r1, [pc, #432]	; (8019918 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019768:	6878      	ldr	r0, [r7, #4]
 801976a:	f7f1 fb4e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	69db      	ldr	r3, [r3, #28]
 8019772:	4618      	mov	r0, r3
 8019774:	f004 f817 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8019778:	64f8      	str	r0, [r7, #76]	; 0x4c
 801977a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801977c:	2b00      	cmp	r3, #0
 801977e:	d05e      	beq.n	801983e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 8019780:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019782:	6838      	ldr	r0, [r7, #0]
 8019784:	f000 f906 	bl	8019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019788:	4603      	mov	r3, r0
 801978a:	4618      	mov	r0, r3
 801978c:	f000 f938 	bl	8019a00 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019790:	4603      	mov	r3, r0
 8019792:	f083 0301 	eor.w	r3, r3, #1
 8019796:	b2db      	uxtb	r3, r3
 8019798:	2b00      	cmp	r3, #0
 801979a:	d04b      	beq.n	8019834 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801979c:	f107 030c 	add.w	r3, r7, #12
 80197a0:	495d      	ldr	r1, [pc, #372]	; (8019918 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 80197a2:	4618      	mov	r0, r3
 80197a4:	f7f1 fb31 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 80197a8:	f107 030c 	add.w	r3, r7, #12
 80197ac:	4619      	mov	r1, r3
 80197ae:	6878      	ldr	r0, [r7, #4]
 80197b0:	f7f1 ff34 	bl	800b61c <_ZneRK12SimpleStringS1_>
 80197b4:	4603      	mov	r3, r0
 80197b6:	461c      	mov	r4, r3
 80197b8:	f107 030c 	add.w	r3, r7, #12
 80197bc:	4618      	mov	r0, r3
 80197be:	f7f1 fedc 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80197c2:	2c00      	cmp	r4, #0
 80197c4:	d003      	beq.n	80197ce <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 80197c6:	4955      	ldr	r1, [pc, #340]	; (801991c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 80197c8:	6878      	ldr	r0, [r7, #4]
 80197ca:	f7f1 ff65 	bl	800b698 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 80197ce:	f107 031c 	add.w	r3, r7, #28
 80197d2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80197d4:	4618      	mov	r0, r3
 80197d6:	f003 ff3d 	bl	801d654 <_ZNK22MockNamedValueListNode7getTypeEv>
 80197da:	f107 031c 	add.w	r3, r7, #28
 80197de:	4618      	mov	r0, r3
 80197e0:	f7f1 fe9e 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 80197e4:	4604      	mov	r4, r0
 80197e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80197ec:	4618      	mov	r0, r3
 80197ee:	f003 ff1e 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 80197f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80197f6:	4618      	mov	r0, r3
 80197f8:	f7f1 fe92 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 80197fc:	4603      	mov	r3, r0
 80197fe:	f107 0014 	add.w	r0, r7, #20
 8019802:	4622      	mov	r2, r4
 8019804:	4946      	ldr	r1, [pc, #280]	; (8019920 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8019806:	f7f2 fbbf 	bl	800bf88 <_Z16StringFromFormatPKcz>
 801980a:	f107 0314 	add.w	r3, r7, #20
 801980e:	4619      	mov	r1, r3
 8019810:	6878      	ldr	r0, [r7, #4]
 8019812:	f7f1 ff2f 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 8019816:	f107 0314 	add.w	r3, r7, #20
 801981a:	4618      	mov	r0, r3
 801981c:	f7f1 fead 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8019820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019824:	4618      	mov	r0, r3
 8019826:	f7f1 fea8 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801982a:	f107 031c 	add.w	r3, r7, #28
 801982e:	4618      	mov	r0, r3
 8019830:	f7f1 fea3 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 8019834:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019836:	f003 febf 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 801983a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801983c:	e79d      	b.n	801977a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	6a1b      	ldr	r3, [r3, #32]
 8019842:	4618      	mov	r0, r3
 8019844:	f003 ffaf 	bl	801d7a6 <_ZN18MockNamedValueList5beginEv>
 8019848:	64f8      	str	r0, [r7, #76]	; 0x4c
 801984a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801984c:	2b00      	cmp	r3, #0
 801984e:	d05e      	beq.n	801990e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 8019850:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8019852:	6838      	ldr	r0, [r7, #0]
 8019854:	f000 f89e 	bl	8019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019858:	4603      	mov	r3, r0
 801985a:	4618      	mov	r0, r3
 801985c:	f000 f8d0 	bl	8019a00 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8019860:	4603      	mov	r3, r0
 8019862:	f083 0301 	eor.w	r3, r3, #1
 8019866:	b2db      	uxtb	r3, r3
 8019868:	2b00      	cmp	r3, #0
 801986a:	d04b      	beq.n	8019904 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801986c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019870:	4929      	ldr	r1, [pc, #164]	; (8019918 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8019872:	4618      	mov	r0, r3
 8019874:	f7f1 fac9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 8019878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801987c:	4619      	mov	r1, r3
 801987e:	6878      	ldr	r0, [r7, #4]
 8019880:	f7f1 fecc 	bl	800b61c <_ZneRK12SimpleStringS1_>
 8019884:	4603      	mov	r3, r0
 8019886:	461c      	mov	r4, r3
 8019888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801988c:	4618      	mov	r0, r3
 801988e:	f7f1 fe74 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8019892:	2c00      	cmp	r4, #0
 8019894:	d003      	beq.n	801989e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 8019896:	4921      	ldr	r1, [pc, #132]	; (801991c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	f7f1 fefd 	bl	800b698 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801989e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80198a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80198a4:	4618      	mov	r0, r3
 80198a6:	f003 fed5 	bl	801d654 <_ZNK22MockNamedValueListNode7getTypeEv>
 80198aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7f1 fe36 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 80198b4:	4604      	mov	r4, r0
 80198b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80198ba:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80198bc:	4618      	mov	r0, r3
 80198be:	f003 feb6 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 80198c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80198c6:	4618      	mov	r0, r3
 80198c8:	f7f1 fe2a 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 80198cc:	4603      	mov	r3, r0
 80198ce:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80198d2:	4622      	mov	r2, r4
 80198d4:	4912      	ldr	r1, [pc, #72]	; (8019920 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 80198d6:	f7f2 fb57 	bl	800bf88 <_Z16StringFromFormatPKcz>
 80198da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80198de:	4619      	mov	r1, r3
 80198e0:	6878      	ldr	r0, [r7, #4]
 80198e2:	f7f1 fec7 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 80198e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80198ea:	4618      	mov	r0, r3
 80198ec:	f7f1 fe45 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80198f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80198f4:	4618      	mov	r0, r3
 80198f6:	f7f1 fe40 	bl	800b57a <_ZN12SimpleStringD1Ev>
 80198fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80198fe:	4618      	mov	r0, r3
 8019900:	f7f1 fe3b 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8019904:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8019906:	f003 fe57 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 801990a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801990c:	e79d      	b.n	801984a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801990e:	bf00      	nop
}
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	3754      	adds	r7, #84	; 0x54
 8019914:	46bd      	mov	sp, r7
 8019916:	bd90      	pop	{r4, r7, pc}
 8019918:	08023e8c 	.word	0x08023e8c
 801991c:	08023f98 	.word	0x08023f98
 8019920:	08023ff8 	.word	0x08023ff8

08019924 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 8019924:	b590      	push	{r4, r7, lr}
 8019926:	b085      	sub	sp, #20
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
 801992c:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801992e:	f107 0308 	add.w	r3, r7, #8
 8019932:	6879      	ldr	r1, [r7, #4]
 8019934:	4618      	mov	r0, r3
 8019936:	f7fe ff0d 	bl	8018754 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801993a:	f107 0308 	add.w	r3, r7, #8
 801993e:	4619      	mov	r1, r3
 8019940:	6838      	ldr	r0, [r7, #0]
 8019942:	f7f1 fe26 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 8019946:	4603      	mov	r3, r0
 8019948:	461c      	mov	r4, r3
 801994a:	f107 0308 	add.w	r3, r7, #8
 801994e:	4618      	mov	r0, r3
 8019950:	f7f1 fe13 	bl	800b57a <_ZN12SimpleStringD1Ev>
 8019954:	4623      	mov	r3, r4
}
 8019956:	4618      	mov	r0, r3
 8019958:	3714      	adds	r7, #20
 801995a:	46bd      	mov	sp, r7
 801995c:	bd90      	pop	{r4, r7, pc}

0801995e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801995e:	b480      	push	{r7}
 8019960:	b083      	sub	sp, #12
 8019962:	af00      	add	r7, sp, #0
 8019964:	6078      	str	r0, [r7, #4]
 8019966:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801996e:	f083 0301 	eor.w	r3, r3, #1
 8019972:	b2db      	uxtb	r3, r3
 8019974:	2b00      	cmp	r3, #0
 8019976:	d104      	bne.n	8019982 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801997c:	683a      	ldr	r2, [r7, #0]
 801997e:	429a      	cmp	r2, r3
 8019980:	d101      	bne.n	8019986 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 8019982:	2301      	movs	r3, #1
 8019984:	e000      	b.n	8019988 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 8019986:	2300      	movs	r3, #0
}
 8019988:	4618      	mov	r0, r3
 801998a:	370c      	adds	r7, #12
 801998c:	46bd      	mov	sp, r7
 801998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019992:	4770      	bx	lr

08019994 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 8019994:	b580      	push	{r7, lr}
 8019996:	b082      	sub	sp, #8
 8019998:	af00      	add	r7, sp, #0
 801999a:	6078      	str	r0, [r7, #4]
 801999c:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801999e:	6838      	ldr	r0, [r7, #0]
 80199a0:	f003 fe16 	bl	801d5d0 <_ZN22MockNamedValueListNode4itemEv>
 80199a4:	4603      	mov	r3, r0
}
 80199a6:	4618      	mov	r0, r3
 80199a8:	3708      	adds	r7, #8
 80199aa:	46bd      	mov	sp, r7
 80199ac:	bd80      	pop	{r7, pc}
	...

080199b0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	6839      	ldr	r1, [r7, #0]
 80199be:	4618      	mov	r0, r3
 80199c0:	f001 ff48 	bl	801b854 <_ZN14MockNamedValueC1ERK12SimpleString>
 80199c4:	4a05      	ldr	r2, [pc, #20]	; (80199dc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	601a      	str	r2, [r3, #0]
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	2200      	movs	r2, #0
 80199ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	4618      	mov	r0, r3
 80199d6:	3708      	adds	r7, #8
 80199d8:	46bd      	mov	sp, r7
 80199da:	bd80      	pop	{r7, pc}
 80199dc:	080266f4 	.word	0x080266f4

080199e0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 80199e0:	b480      	push	{r7}
 80199e2:	b083      	sub	sp, #12
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
 80199e8:	460b      	mov	r3, r1
 80199ea:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	78fa      	ldrb	r2, [r7, #3]
 80199f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80199f4:	bf00      	nop
 80199f6:	370c      	adds	r7, #12
 80199f8:	46bd      	mov	sp, r7
 80199fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199fe:	4770      	bx	lr

08019a00 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 8019a00:	b480      	push	{r7}
 8019a02:	b083      	sub	sp, #12
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	370c      	adds	r7, #12
 8019a12:	46bd      	mov	sp, r7
 8019a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a18:	4770      	bx	lr
	...

08019a1c <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b082      	sub	sp, #8
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
 8019a24:	460b      	mov	r3, r1
 8019a26:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	3328      	adds	r3, #40	; 0x28
 8019a2c:	4907      	ldr	r1, [pc, #28]	; (8019a4c <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f002 f9b2 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	3328      	adds	r3, #40	; 0x28
 8019a38:	78fa      	ldrb	r2, [r7, #3]
 8019a3a:	4611      	mov	r1, r2
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f001 ff5b 	bl	801b8f8 <_ZN14MockNamedValue8setValueEb>
    return *this;
 8019a42:	687b      	ldr	r3, [r7, #4]
}
 8019a44:	4618      	mov	r0, r3
 8019a46:	3708      	adds	r7, #8
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	bd80      	pop	{r7, pc}
 8019a4c:	08024000 	.word	0x08024000

08019a50 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b082      	sub	sp, #8
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
 8019a58:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	3328      	adds	r3, #40	; 0x28
 8019a5e:	4907      	ldr	r1, [pc, #28]	; (8019a7c <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 8019a60:	4618      	mov	r0, r3
 8019a62:	f002 f999 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	3328      	adds	r3, #40	; 0x28
 8019a6a:	6839      	ldr	r1, [r7, #0]
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	f001 ff67 	bl	801b940 <_ZN14MockNamedValue8setValueEj>
    return *this;
 8019a72:	687b      	ldr	r3, [r7, #4]
}
 8019a74:	4618      	mov	r0, r3
 8019a76:	3708      	adds	r7, #8
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}
 8019a7c:	08024000 	.word	0x08024000

08019a80 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b082      	sub	sp, #8
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	3328      	adds	r3, #40	; 0x28
 8019a8e:	4907      	ldr	r1, [pc, #28]	; (8019aac <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 8019a90:	4618      	mov	r0, r3
 8019a92:	f002 f981 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	3328      	adds	r3, #40	; 0x28
 8019a9a:	6839      	ldr	r1, [r7, #0]
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	f001 ff71 	bl	801b984 <_ZN14MockNamedValue8setValueEi>
    return *this;
 8019aa2:	687b      	ldr	r3, [r7, #4]
}
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	3708      	adds	r7, #8
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}
 8019aac:	08024000 	.word	0x08024000

08019ab0 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b082      	sub	sp, #8
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
 8019ab8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	3328      	adds	r3, #40	; 0x28
 8019abe:	4907      	ldr	r1, [pc, #28]	; (8019adc <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f002 f969 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	3328      	adds	r3, #40	; 0x28
 8019aca:	6839      	ldr	r1, [r7, #0]
 8019acc:	4618      	mov	r0, r3
 8019ace:	f001 ff7b 	bl	801b9c8 <_ZN14MockNamedValue8setValueEl>
    return *this;
 8019ad2:	687b      	ldr	r3, [r7, #4]
}
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	3708      	adds	r7, #8
 8019ad8:	46bd      	mov	sp, r7
 8019ada:	bd80      	pop	{r7, pc}
 8019adc:	08024000 	.word	0x08024000

08019ae0 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b082      	sub	sp, #8
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	6078      	str	r0, [r7, #4]
 8019ae8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	3328      	adds	r3, #40	; 0x28
 8019aee:	4907      	ldr	r1, [pc, #28]	; (8019b0c <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 8019af0:	4618      	mov	r0, r3
 8019af2:	f002 f951 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	3328      	adds	r3, #40	; 0x28
 8019afa:	6839      	ldr	r1, [r7, #0]
 8019afc:	4618      	mov	r0, r3
 8019afe:	f001 ff85 	bl	801ba0c <_ZN14MockNamedValue8setValueEm>
    return *this;
 8019b02:	687b      	ldr	r3, [r7, #4]
}
 8019b04:	4618      	mov	r0, r3
 8019b06:	3708      	adds	r7, #8
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}
 8019b0c:	08024000 	.word	0x08024000

08019b10 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 8019b10:	b5b0      	push	{r4, r5, r7, lr}
 8019b12:	b086      	sub	sp, #24
 8019b14:	af02      	add	r7, sp, #8
 8019b16:	60f8      	str	r0, [r7, #12]
 8019b18:	1d3b      	adds	r3, r7, #4
 8019b1a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 8019b1e:	f7f8 fd57 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8019b22:	4604      	mov	r4, r0
 8019b24:	6823      	ldr	r3, [r4, #0]
 8019b26:	3368      	adds	r3, #104	; 0x68
 8019b28:	681d      	ldr	r5, [r3, #0]
 8019b2a:	f7f8 fd61 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019b2e:	4603      	mov	r3, r0
 8019b30:	9300      	str	r3, [sp, #0]
 8019b32:	f240 2319 	movw	r3, #537	; 0x219
 8019b36:	4a04      	ldr	r2, [pc, #16]	; (8019b48 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 8019b38:	4904      	ldr	r1, [pc, #16]	; (8019b4c <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	47a8      	blx	r5
    return *this;
 8019b3e:	68fb      	ldr	r3, [r7, #12]
}
 8019b40:	4618      	mov	r0, r3
 8019b42:	3710      	adds	r7, #16
 8019b44:	46bd      	mov	sp, r7
 8019b46:	bdb0      	pop	{r4, r5, r7, pc}
 8019b48:	08023e90 	.word	0x08023e90
 8019b4c:	08023eac 	.word	0x08023eac

08019b50 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 8019b50:	b5b0      	push	{r4, r5, r7, lr}
 8019b52:	b086      	sub	sp, #24
 8019b54:	af02      	add	r7, sp, #8
 8019b56:	60f8      	str	r0, [r7, #12]
 8019b58:	1d3b      	adds	r3, r7, #4
 8019b5a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 8019b5e:	f7f8 fd37 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 8019b62:	4604      	mov	r4, r0
 8019b64:	6823      	ldr	r3, [r4, #0]
 8019b66:	3368      	adds	r3, #104	; 0x68
 8019b68:	681d      	ldr	r5, [r3, #0]
 8019b6a:	f7f8 fd41 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	9300      	str	r3, [sp, #0]
 8019b72:	f240 231f 	movw	r3, #543	; 0x21f
 8019b76:	4a04      	ldr	r2, [pc, #16]	; (8019b88 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 8019b78:	4904      	ldr	r1, [pc, #16]	; (8019b8c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 8019b7a:	4620      	mov	r0, r4
 8019b7c:	47a8      	blx	r5
    return *this;
 8019b7e:	68fb      	ldr	r3, [r7, #12]
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3710      	adds	r7, #16
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bdb0      	pop	{r4, r5, r7, pc}
 8019b88:	08023e90 	.word	0x08023e90
 8019b8c:	08023ecc 	.word	0x08023ecc

08019b90 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b082      	sub	sp, #8
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
 8019b98:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	3328      	adds	r3, #40	; 0x28
 8019b9e:	4907      	ldr	r1, [pc, #28]	; (8019bbc <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f002 f8f9 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	3328      	adds	r3, #40	; 0x28
 8019baa:	6839      	ldr	r1, [r7, #0]
 8019bac:	4618      	mov	r0, r3
 8019bae:	f002 f835 	bl	801bc1c <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 8019bb2:	687b      	ldr	r3, [r7, #4]
}
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	3708      	adds	r7, #8
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	bd80      	pop	{r7, pc}
 8019bbc:	08024000 	.word	0x08024000

08019bc0 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b084      	sub	sp, #16
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	60f8      	str	r0, [r7, #12]
 8019bc8:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	3328      	adds	r3, #40	; 0x28
 8019bd0:	4907      	ldr	r1, [pc, #28]	; (8019bf0 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	f002 f8e0 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	3328      	adds	r3, #40	; 0x28
 8019bdc:	ed97 0b00 	vldr	d0, [r7]
 8019be0:	4618      	mov	r0, r3
 8019be2:	f001 ff71 	bl	801bac8 <_ZN14MockNamedValue8setValueEd>
    return *this;
 8019be6:	68fb      	ldr	r3, [r7, #12]
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	3710      	adds	r7, #16
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}
 8019bf0:	08024000 	.word	0x08024000

08019bf4 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b082      	sub	sp, #8
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
 8019bfc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	3328      	adds	r3, #40	; 0x28
 8019c02:	4907      	ldr	r1, [pc, #28]	; (8019c20 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 8019c04:	4618      	mov	r0, r3
 8019c06:	f002 f8c7 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	3328      	adds	r3, #40	; 0x28
 8019c0e:	6839      	ldr	r1, [r7, #0]
 8019c10:	4618      	mov	r0, r3
 8019c12:	f001 ff9d 	bl	801bb50 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 8019c16:	687b      	ldr	r3, [r7, #4]
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3708      	adds	r7, #8
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	bd80      	pop	{r7, pc}
 8019c20:	08024000 	.word	0x08024000

08019c24 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b082      	sub	sp, #8
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
 8019c2c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	3328      	adds	r3, #40	; 0x28
 8019c32:	4907      	ldr	r1, [pc, #28]	; (8019c50 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 8019c34:	4618      	mov	r0, r3
 8019c36:	f002 f8af 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	3328      	adds	r3, #40	; 0x28
 8019c3e:	6839      	ldr	r1, [r7, #0]
 8019c40:	4618      	mov	r0, r3
 8019c42:	f001 ffa7 	bl	801bb94 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 8019c46:	687b      	ldr	r3, [r7, #4]
}
 8019c48:	4618      	mov	r0, r3
 8019c4a:	3708      	adds	r7, #8
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	bd80      	pop	{r7, pc}
 8019c50:	08024000 	.word	0x08024000

08019c54 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b082      	sub	sp, #8
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
 8019c5c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	3328      	adds	r3, #40	; 0x28
 8019c62:	4907      	ldr	r1, [pc, #28]	; (8019c80 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 8019c64:	4618      	mov	r0, r3
 8019c66:	f002 f897 	bl	801bd98 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	3328      	adds	r3, #40	; 0x28
 8019c6e:	6839      	ldr	r1, [r7, #0]
 8019c70:	4618      	mov	r0, r3
 8019c72:	f001 ffb1 	bl	801bbd8 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 8019c76:	687b      	ldr	r3, [r7, #4]
}
 8019c78:	4618      	mov	r0, r3
 8019c7a:	3708      	adds	r7, #8
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd80      	pop	{r7, pc}
 8019c80:	08024000 	.word	0x08024000

08019c84 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 8019c84:	b480      	push	{r7}
 8019c86:	b083      	sub	sp, #12
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
 8019c8c:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	2201      	movs	r2, #1
 8019c92:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	2200      	movs	r2, #0
 8019c9a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	683a      	ldr	r2, [r7, #0]
 8019ca2:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 8019ca4:	687b      	ldr	r3, [r7, #4]
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	370c      	adds	r7, #12
 8019caa:	46bd      	mov	sp, r7
 8019cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb0:	4770      	bx	lr

08019cb2 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 8019cb2:	b580      	push	{r7, lr}
 8019cb4:	b082      	sub	sp, #8
 8019cb6:	af00      	add	r7, sp, #0
 8019cb8:	6078      	str	r0, [r7, #4]
 8019cba:	6039      	str	r1, [r7, #0]
    return returnValue_;
 8019cbc:	683b      	ldr	r3, [r7, #0]
 8019cbe:	3328      	adds	r3, #40	; 0x28
 8019cc0:	4619      	mov	r1, r3
 8019cc2:	6878      	ldr	r0, [r7, #4]
 8019cc4:	f7ef f946 	bl	8008f54 <_ZN14MockNamedValueC1ERKS_>
}
 8019cc8:	6878      	ldr	r0, [r7, #4]
 8019cca:	3708      	adds	r7, #8
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}

08019cd0 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 8019cd0:	b480      	push	{r7}
 8019cd2:	b085      	sub	sp, #20
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	60f8      	str	r0, [r7, #12]
 8019cd8:	60b9      	str	r1, [r7, #8]
 8019cda:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	68ba      	ldr	r2, [r7, #8]
 8019ce0:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	687a      	ldr	r2, [r7, #4]
 8019ce6:	615a      	str	r2, [r3, #20]
    return *this;
 8019ce8:	68fb      	ldr	r3, [r7, #12]
}
 8019cea:	4618      	mov	r0, r3
 8019cec:	3714      	adds	r7, #20
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf4:	4770      	bx	lr

08019cf6 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 8019cf6:	b480      	push	{r7}
 8019cf8:	b083      	sub	sp, #12
 8019cfa:	af00      	add	r7, sp, #0
 8019cfc:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	7e1b      	ldrb	r3, [r3, #24]
}
 8019d02:	4618      	mov	r0, r3
 8019d04:	370c      	adds	r7, #12
 8019d06:	46bd      	mov	sp, r7
 8019d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0c:	4770      	bx	lr

08019d0e <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 8019d0e:	b480      	push	{r7}
 8019d10:	b083      	sub	sp, #12
 8019d12:	af00      	add	r7, sp, #0
 8019d14:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	370c      	adds	r7, #12
 8019d1e:	46bd      	mov	sp, r7
 8019d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d24:	4770      	bx	lr
	...

08019d28 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b082      	sub	sp, #8
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7fe fcce 	bl	80186d4 <_ZN16MockExpectedCallC1Ev>
 8019d38:	4a03      	ldr	r2, [pc, #12]	; (8019d48 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	601a      	str	r2, [r3, #0]
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	4618      	mov	r0, r3
 8019d42:	3708      	adds	r7, #8
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}
 8019d48:	08026554 	.word	0x08026554

08019d4c <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	af00      	add	r7, sp, #0
 8019d50:	4801      	ldr	r0, [pc, #4]	; (8019d58 <__tcf_0+0xc>)
 8019d52:	f000 f831 	bl	8019db8 <_ZN23MockIgnoredExpectedCallD1Ev>
 8019d56:	bd80      	pop	{r7, pc}
 8019d58:	20000d58 	.word	0x20000d58

08019d5c <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 8019d60:	4b12      	ldr	r3, [pc, #72]	; (8019dac <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019d62:	781b      	ldrb	r3, [r3, #0]
 8019d64:	f3bf 8f5b 	dmb	ish
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	f003 0301 	and.w	r3, r3, #1
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	bf0c      	ite	eq
 8019d72:	2301      	moveq	r3, #1
 8019d74:	2300      	movne	r3, #0
 8019d76:	b2db      	uxtb	r3, r3
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d013      	beq.n	8019da4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019d7c:	480b      	ldr	r0, [pc, #44]	; (8019dac <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019d7e:	f003 ff03 	bl	801db88 <__cxa_guard_acquire>
 8019d82:	4603      	mov	r3, r0
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	bf14      	ite	ne
 8019d88:	2301      	movne	r3, #1
 8019d8a:	2300      	moveq	r3, #0
 8019d8c:	b2db      	uxtb	r3, r3
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d008      	beq.n	8019da4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019d92:	4807      	ldr	r0, [pc, #28]	; (8019db0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 8019d94:	f7ff ffc8 	bl	8019d28 <_ZN23MockIgnoredExpectedCallC1Ev>
 8019d98:	4804      	ldr	r0, [pc, #16]	; (8019dac <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019d9a:	f003 ff01 	bl	801dba0 <__cxa_guard_release>
 8019d9e:	4805      	ldr	r0, [pc, #20]	; (8019db4 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 8019da0:	f003 ff25 	bl	801dbee <atexit>
    return call;
 8019da4:	4b02      	ldr	r3, [pc, #8]	; (8019db0 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 8019da6:	4618      	mov	r0, r3
 8019da8:	bd80      	pop	{r7, pc}
 8019daa:	bf00      	nop
 8019dac:	20000d5c 	.word	0x20000d5c
 8019db0:	20000d58 	.word	0x20000d58
 8019db4:	08019d4d 	.word	0x08019d4d

08019db8 <_ZN23MockIgnoredExpectedCallD1Ev>:
 8019db8:	b580      	push	{r7, lr}
 8019dba:	b082      	sub	sp, #8
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
 8019dc0:	4a05      	ldr	r2, [pc, #20]	; (8019dd8 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	601a      	str	r2, [r3, #0]
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	4618      	mov	r0, r3
 8019dca:	f7fe fc93 	bl	80186f4 <_ZN16MockExpectedCallD1Ev>
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	3708      	adds	r7, #8
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}
 8019dd8:	08026554 	.word	0x08026554

08019ddc <_ZN23MockIgnoredExpectedCallD0Ev>:
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
 8019de4:	6878      	ldr	r0, [r7, #4]
 8019de6:	f7ff ffe7 	bl	8019db8 <_ZN23MockIgnoredExpectedCallD1Ev>
 8019dea:	2104      	movs	r1, #4
 8019dec:	6878      	ldr	r0, [r7, #4]
 8019dee:	f7ee fc5d 	bl	80086ac <_ZdlPvj>
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	4618      	mov	r0, r3
 8019df6:	3708      	adds	r7, #8
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	bd80      	pop	{r7, pc}

08019dfc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	b082      	sub	sp, #8
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]
 8019e04:	4a05      	ldr	r2, [pc, #20]	; (8019e1c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	601a      	str	r2, [r3, #0]
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f001 fd4b 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	4618      	mov	r0, r3
 8019e16:	3708      	adds	r7, #8
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}
 8019e1c:	080266f4 	.word	0x080266f4

08019e20 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b082      	sub	sp, #8
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
 8019e28:	6878      	ldr	r0, [r7, #4]
 8019e2a:	f7ff ffe7 	bl	8019dfc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 8019e2e:	2138      	movs	r1, #56	; 0x38
 8019e30:	6878      	ldr	r0, [r7, #4]
 8019e32:	f7ee fc3b 	bl	80086ac <_ZdlPvj>
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	4618      	mov	r0, r3
 8019e3a:	3708      	adds	r7, #8
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	bd80      	pop	{r7, pc}

08019e40 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 8019e40:	b480      	push	{r7}
 8019e42:	b083      	sub	sp, #12
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
 8019e48:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	683a      	ldr	r2, [r7, #0]
 8019e4e:	601a      	str	r2, [r3, #0]
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	2200      	movs	r2, #0
 8019e54:	605a      	str	r2, [r3, #4]
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	4618      	mov	r0, r3
 8019e5a:	370c      	adds	r7, #12
 8019e5c:	46bd      	mov	sp, r7
 8019e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e62:	4770      	bx	lr

08019e64 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 8019e64:	b480      	push	{r7}
 8019e66:	b083      	sub	sp, #12
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	6078      	str	r0, [r7, #4]
 8019e6c:	4a06      	ldr	r2, [pc, #24]	; (8019e88 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	601a      	str	r2, [r3, #0]
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	2200      	movs	r2, #0
 8019e76:	605a      	str	r2, [r3, #4]
{
}
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	370c      	adds	r7, #12
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e84:	4770      	bx	lr
 8019e86:	bf00      	nop
 8019e88:	08026848 	.word	0x08026848

08019e8c <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b084      	sub	sp, #16
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
 8019e94:	4a0d      	ldr	r2, [pc, #52]	; (8019ecc <_ZN21MockExpectedCallsListD1Ev+0x40>)
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	685b      	ldr	r3, [r3, #4]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d00f      	beq.n	8019ec2 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	685b      	ldr	r3, [r3, #4]
 8019ea6:	685b      	ldr	r3, [r3, #4]
 8019ea8:	60fb      	str	r3, [r7, #12]
        delete head_;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d003      	beq.n	8019eba <_ZN21MockExpectedCallsListD1Ev+0x2e>
 8019eb2:	2108      	movs	r1, #8
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f7ee fbf9 	bl	80086ac <_ZdlPvj>
        head_ = next;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	68fa      	ldr	r2, [r7, #12]
 8019ebe:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019ec0:	e7eb      	b.n	8019e9a <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	3710      	adds	r7, #16
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}
 8019ecc:	08026848 	.word	0x08026848

08019ed0 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b082      	sub	sp, #8
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
}
 8019ed8:	6878      	ldr	r0, [r7, #4]
 8019eda:	f7ff ffd7 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
 8019ede:	2108      	movs	r1, #8
 8019ee0:	6878      	ldr	r0, [r7, #4]
 8019ee2:	f7ee fbe3 	bl	80086ac <_ZdlPvj>
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	3708      	adds	r7, #8
 8019eec:	46bd      	mov	sp, r7
 8019eee:	bd80      	pop	{r7, pc}

08019ef0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b084      	sub	sp, #16
 8019ef4:	af00      	add	r7, sp, #0
 8019ef6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	685b      	ldr	r3, [r3, #4]
 8019efc:	60fb      	str	r3, [r7, #12]
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d011      	beq.n	8019f28 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	681a      	ldr	r2, [r3, #0]
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	33d4      	adds	r3, #212	; 0xd4
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	4610      	mov	r0, r2
 8019f14:	4798      	blx	r3
 8019f16:	4603      	mov	r3, r0
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d001      	beq.n	8019f20 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 8019f1c:	2301      	movs	r3, #1
 8019f1e:	e004      	b.n	8019f2a <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	685b      	ldr	r3, [r3, #4]
 8019f24:	60fb      	str	r3, [r7, #12]
 8019f26:	e7ea      	b.n	8019efe <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 8019f28:	2300      	movs	r3, #0
}
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	3710      	adds	r7, #16
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}

08019f32 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 8019f32:	b480      	push	{r7}
 8019f34:	b085      	sub	sp, #20
 8019f36:	af00      	add	r7, sp, #0
 8019f38:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	60bb      	str	r3, [r7, #8]
 8019f44:	68bb      	ldr	r3, [r7, #8]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d006      	beq.n	8019f58 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	3301      	adds	r3, #1
 8019f4e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	60bb      	str	r3, [r7, #8]
 8019f56:	e7f5      	b.n	8019f44 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 8019f58:	68fb      	ldr	r3, [r7, #12]
}
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	3714      	adds	r7, #20
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f64:	4770      	bx	lr

08019f66 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 8019f66:	b480      	push	{r7}
 8019f68:	b083      	sub	sp, #12
 8019f6a:	af00      	add	r7, sp, #0
 8019f6c:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	685b      	ldr	r3, [r3, #4]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	bf0c      	ite	eq
 8019f76:	2301      	moveq	r3, #1
 8019f78:	2300      	movne	r3, #0
 8019f7a:	b2db      	uxtb	r3, r3
}
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	370c      	adds	r7, #12
 8019f80:	46bd      	mov	sp, r7
 8019f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f86:	4770      	bx	lr

08019f88 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b084      	sub	sp, #16
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
 8019f90:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 8019f92:	2300      	movs	r3, #0
 8019f94:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	685b      	ldr	r3, [r3, #4]
 8019f9a:	60bb      	str	r3, [r7, #8]
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d01d      	beq.n	8019fde <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 8019fa2:	68bb      	ldr	r3, [r7, #8]
 8019fa4:	681a      	ldr	r2, [r3, #0]
 8019fa6:	68bb      	ldr	r3, [r7, #8]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	33b8      	adds	r3, #184	; 0xb8
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	6839      	ldr	r1, [r7, #0]
 8019fb2:	4610      	mov	r0, r2
 8019fb4:	4798      	blx	r3
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d00c      	beq.n	8019fd6 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	681a      	ldr	r2, [r3, #0]
 8019fc0:	68bb      	ldr	r3, [r7, #8]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	33f8      	adds	r3, #248	; 0xf8
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	4610      	mov	r0, r2
 8019fcc:	4798      	blx	r3
 8019fce:	4602      	mov	r2, r0
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	4413      	add	r3, r2
 8019fd4:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019fd6:	68bb      	ldr	r3, [r7, #8]
 8019fd8:	685b      	ldr	r3, [r3, #4]
 8019fda:	60bb      	str	r3, [r7, #8]
 8019fdc:	e7de      	b.n	8019f9c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 8019fde:	68fb      	ldr	r3, [r7, #12]
}
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	3710      	adds	r7, #16
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	bd80      	pop	{r7, pc}

08019fe8 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 8019fe8:	b580      	push	{r7, lr}
 8019fea:	b084      	sub	sp, #16
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	685b      	ldr	r3, [r3, #4]
 8019ff8:	60bb      	str	r3, [r7, #8]
 8019ffa:	68bb      	ldr	r3, [r7, #8]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d015      	beq.n	801a02c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801a000:	68bb      	ldr	r3, [r7, #8]
 801a002:	681a      	ldr	r2, [r3, #0]
 801a004:	68bb      	ldr	r3, [r7, #8]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	33c0      	adds	r3, #192	; 0xc0
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	4610      	mov	r0, r2
 801a010:	4798      	blx	r3
 801a012:	4603      	mov	r3, r0
 801a014:	f083 0301 	eor.w	r3, r3, #1
 801a018:	b2db      	uxtb	r3, r3
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d002      	beq.n	801a024 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	3301      	adds	r3, #1
 801a022:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a024:	68bb      	ldr	r3, [r7, #8]
 801a026:	685b      	ldr	r3, [r3, #4]
 801a028:	60bb      	str	r3, [r7, #8]
 801a02a:	e7e6      	b.n	8019ffa <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801a02c:	68fb      	ldr	r3, [r7, #12]
}
 801a02e:	4618      	mov	r0, r3
 801a030:	3710      	adds	r7, #16
 801a032:	46bd      	mov	sp, r7
 801a034:	bd80      	pop	{r7, pc}

0801a036 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801a036:	b580      	push	{r7, lr}
 801a038:	b084      	sub	sp, #16
 801a03a:	af00      	add	r7, sp, #0
 801a03c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	685b      	ldr	r3, [r3, #4]
 801a042:	60fb      	str	r3, [r7, #12]
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	2b00      	cmp	r3, #0
 801a048:	d011      	beq.n	801a06e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	681a      	ldr	r2, [r3, #0]
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	33c8      	adds	r3, #200	; 0xc8
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	4610      	mov	r0, r2
 801a05a:	4798      	blx	r3
 801a05c:	4603      	mov	r3, r0
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d001      	beq.n	801a066 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801a062:	2301      	movs	r3, #1
 801a064:	e004      	b.n	801a070 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	60fb      	str	r3, [r7, #12]
 801a06c:	e7ea      	b.n	801a044 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801a06e:	2300      	movs	r3, #0
}
 801a070:	4618      	mov	r0, r3
 801a072:	3710      	adds	r7, #16
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}

0801a078 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b084      	sub	sp, #16
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	685b      	ldr	r3, [r3, #4]
 801a084:	60fb      	str	r3, [r7, #12]
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d014      	beq.n	801a0b6 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	681a      	ldr	r2, [r3, #0]
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	33c0      	adds	r3, #192	; 0xc0
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	4610      	mov	r0, r2
 801a09c:	4798      	blx	r3
 801a09e:	4603      	mov	r3, r0
 801a0a0:	f083 0301 	eor.w	r3, r3, #1
 801a0a4:	b2db      	uxtb	r3, r3
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d001      	beq.n	801a0ae <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	e004      	b.n	801a0b8 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	685b      	ldr	r3, [r3, #4]
 801a0b2:	60fb      	str	r3, [r7, #12]
 801a0b4:	e7e7      	b.n	801a086 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801a0b6:	2300      	movs	r3, #0
}
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	3710      	adds	r7, #16
 801a0bc:	46bd      	mov	sp, r7
 801a0be:	bd80      	pop	{r7, pc}

0801a0c0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b084      	sub	sp, #16
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
 801a0c8:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	685b      	ldr	r3, [r3, #4]
 801a0ce:	60fb      	str	r3, [r7, #12]
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d012      	beq.n	801a0fc <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	681a      	ldr	r2, [r3, #0]
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	33b8      	adds	r3, #184	; 0xb8
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	6839      	ldr	r1, [r7, #0]
 801a0e6:	4610      	mov	r0, r2
 801a0e8:	4798      	blx	r3
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d001      	beq.n	801a0f4 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801a0f0:	2301      	movs	r3, #1
 801a0f2:	e004      	b.n	801a0fe <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	685b      	ldr	r3, [r3, #4]
 801a0f8:	60fb      	str	r3, [r7, #12]
 801a0fa:	e7e9      	b.n	801a0d0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801a0fc:	2300      	movs	r3, #0
}
 801a0fe:	4618      	mov	r0, r3
 801a100:	3710      	adds	r7, #16
 801a102:	46bd      	mov	sp, r7
 801a104:	bd80      	pop	{r7, pc}
	...

0801a108 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801a108:	b590      	push	{r4, r7, lr}
 801a10a:	b085      	sub	sp, #20
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
 801a110:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801a112:	2273      	movs	r2, #115	; 0x73
 801a114:	4911      	ldr	r1, [pc, #68]	; (801a15c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801a116:	2008      	movs	r0, #8
 801a118:	f7ee fab4 	bl	8008684 <_ZnwjPKci>
 801a11c:	4604      	mov	r4, r0
 801a11e:	6839      	ldr	r1, [r7, #0]
 801a120:	4620      	mov	r0, r4
 801a122:	f7ff fe8d 	bl	8019e40 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801a126:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	685b      	ldr	r3, [r3, #4]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d103      	bne.n	801a138 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	68ba      	ldr	r2, [r7, #8]
 801a134:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801a136:	e00d      	b.n	801a154 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	685b      	ldr	r3, [r3, #4]
 801a13c:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	685b      	ldr	r3, [r3, #4]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d003      	beq.n	801a14e <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	685b      	ldr	r3, [r3, #4]
 801a14a:	60fb      	str	r3, [r7, #12]
 801a14c:	e7f7      	b.n	801a13e <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	68ba      	ldr	r2, [r7, #8]
 801a152:	605a      	str	r2, [r3, #4]
}
 801a154:	bf00      	nop
 801a156:	3714      	adds	r7, #20
 801a158:	46bd      	mov	sp, r7
 801a15a:	bd90      	pop	{r4, r7, pc}
 801a15c:	0802400c 	.word	0x0802400c

0801a160 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b084      	sub	sp, #16
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
 801a168:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a16a:	683b      	ldr	r3, [r7, #0]
 801a16c:	685b      	ldr	r3, [r3, #4]
 801a16e:	60fb      	str	r3, [r7, #12]
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d018      	beq.n	801a1a8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	681a      	ldr	r2, [r3, #0]
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	33c4      	adds	r3, #196	; 0xc4
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	4610      	mov	r0, r2
 801a186:	4798      	blx	r3
 801a188:	4603      	mov	r3, r0
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d008      	beq.n	801a1a0 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	3330      	adds	r3, #48	; 0x30
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	68fa      	ldr	r2, [r7, #12]
 801a198:	6812      	ldr	r2, [r2, #0]
 801a19a:	4611      	mov	r1, r2
 801a19c:	6878      	ldr	r0, [r7, #4]
 801a19e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	685b      	ldr	r3, [r3, #4]
 801a1a4:	60fb      	str	r3, [r7, #12]
 801a1a6:	e7e3      	b.n	801a170 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801a1a8:	bf00      	nop
 801a1aa:	3710      	adds	r7, #16
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}

0801a1b0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b086      	sub	sp, #24
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	60f8      	str	r0, [r7, #12]
 801a1b8:	60b9      	str	r1, [r7, #8]
 801a1ba:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	685b      	ldr	r3, [r3, #4]
 801a1c0:	617b      	str	r3, [r7, #20]
 801a1c2:	697b      	ldr	r3, [r7, #20]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d019      	beq.n	801a1fc <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801a1c8:	697b      	ldr	r3, [r7, #20]
 801a1ca:	681a      	ldr	r2, [r3, #0]
 801a1cc:	697b      	ldr	r3, [r7, #20]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	33b8      	adds	r3, #184	; 0xb8
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	68b9      	ldr	r1, [r7, #8]
 801a1d8:	4610      	mov	r0, r2
 801a1da:	4798      	blx	r3
 801a1dc:	4603      	mov	r3, r0
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d008      	beq.n	801a1f4 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	3330      	adds	r3, #48	; 0x30
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	697a      	ldr	r2, [r7, #20]
 801a1ec:	6812      	ldr	r2, [r2, #0]
 801a1ee:	4611      	mov	r1, r2
 801a1f0:	68f8      	ldr	r0, [r7, #12]
 801a1f2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a1f4:	697b      	ldr	r3, [r7, #20]
 801a1f6:	685b      	ldr	r3, [r3, #4]
 801a1f8:	617b      	str	r3, [r7, #20]
 801a1fa:	e7e2      	b.n	801a1c2 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801a1fc:	bf00      	nop
 801a1fe:	3718      	adds	r7, #24
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}

0801a204 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801a204:	b580      	push	{r7, lr}
 801a206:	b084      	sub	sp, #16
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
 801a20c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	685b      	ldr	r3, [r3, #4]
 801a212:	60fb      	str	r3, [r7, #12]
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	2b00      	cmp	r3, #0
 801a218:	d00c      	beq.n	801a234 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	3330      	adds	r3, #48	; 0x30
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	68fa      	ldr	r2, [r7, #12]
 801a224:	6812      	ldr	r2, [r2, #0]
 801a226:	4611      	mov	r1, r2
 801a228:	6878      	ldr	r0, [r7, #4]
 801a22a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	685b      	ldr	r3, [r3, #4]
 801a230:	60fb      	str	r3, [r7, #12]
 801a232:	e7ef      	b.n	801a214 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801a234:	bf00      	nop
 801a236:	3710      	adds	r7, #16
 801a238:	46bd      	mov	sp, r7
 801a23a:	bd80      	pop	{r7, pc}

0801a23c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b084      	sub	sp, #16
 801a240:	af00      	add	r7, sp, #0
 801a242:	6078      	str	r0, [r7, #4]
 801a244:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	685b      	ldr	r3, [r3, #4]
 801a24a:	60fb      	str	r3, [r7, #12]
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d016      	beq.n	801a280 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	33b8      	adds	r3, #184	; 0xb8
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	6839      	ldr	r1, [r7, #0]
 801a262:	4610      	mov	r0, r2
 801a264:	4798      	blx	r3
 801a266:	4603      	mov	r3, r0
 801a268:	f083 0301 	eor.w	r3, r3, #1
 801a26c:	b2db      	uxtb	r3, r3
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d002      	beq.n	801a278 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	2200      	movs	r2, #0
 801a276:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	685b      	ldr	r3, [r3, #4]
 801a27c:	60fb      	str	r3, [r7, #12]
 801a27e:	e7e5      	b.n	801a24c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	3388      	adds	r3, #136	; 0x88
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	4798      	blx	r3
}
 801a28c:	bf00      	nop
 801a28e:	3710      	adds	r7, #16
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}

0801a294 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b084      	sub	sp, #16
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	685b      	ldr	r3, [r3, #4]
 801a2a0:	60fb      	str	r3, [r7, #12]
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d015      	beq.n	801a2d4 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	681a      	ldr	r2, [r3, #0]
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	33d4      	adds	r3, #212	; 0xd4
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	4610      	mov	r0, r2
 801a2b8:	4798      	blx	r3
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	f083 0301 	eor.w	r3, r3, #1
 801a2c0:	b2db      	uxtb	r3, r3
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d002      	beq.n	801a2cc <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801a2c6:	68fb      	ldr	r3, [r7, #12]
 801a2c8:	2200      	movs	r2, #0
 801a2ca:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	60fb      	str	r3, [r7, #12]
 801a2d2:	e7e6      	b.n	801a2a2 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	3388      	adds	r3, #136	; 0x88
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	6878      	ldr	r0, [r7, #4]
 801a2de:	4798      	blx	r3
}
 801a2e0:	bf00      	nop
 801a2e2:	3710      	adds	r7, #16
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}

0801a2e8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b084      	sub	sp, #16
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	685b      	ldr	r3, [r3, #4]
 801a2f4:	60fb      	str	r3, [r7, #12]
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d01b      	beq.n	801a334 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	681a      	ldr	r2, [r3, #0]
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	33c8      	adds	r3, #200	; 0xc8
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	4610      	mov	r0, r2
 801a30c:	4798      	blx	r3
 801a30e:	4603      	mov	r3, r0
 801a310:	2b00      	cmp	r3, #0
 801a312:	d00b      	beq.n	801a32c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	681a      	ldr	r2, [r3, #0]
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	33ec      	adds	r3, #236	; 0xec
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	4610      	mov	r0, r2
 801a324:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	2200      	movs	r2, #0
 801a32a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	685b      	ldr	r3, [r3, #4]
 801a330:	60fb      	str	r3, [r7, #12]
 801a332:	e7e0      	b.n	801a2f6 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	3388      	adds	r3, #136	; 0x88
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	6878      	ldr	r0, [r7, #4]
 801a33e:	4798      	blx	r3
}
 801a340:	bf00      	nop
 801a342:	3710      	adds	r7, #16
 801a344:	46bd      	mov	sp, r7
 801a346:	bd80      	pop	{r7, pc}

0801a348 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801a348:	b580      	push	{r7, lr}
 801a34a:	b084      	sub	sp, #16
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	6078      	str	r0, [r7, #4]
 801a350:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	685b      	ldr	r3, [r3, #4]
 801a356:	60fb      	str	r3, [r7, #12]
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d016      	beq.n	801a38c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	681a      	ldr	r2, [r3, #0]
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	33a8      	adds	r3, #168	; 0xa8
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	6839      	ldr	r1, [r7, #0]
 801a36e:	4610      	mov	r0, r2
 801a370:	4798      	blx	r3
 801a372:	4603      	mov	r3, r0
 801a374:	f083 0301 	eor.w	r3, r3, #1
 801a378:	b2db      	uxtb	r3, r3
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d002      	beq.n	801a384 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	2200      	movs	r2, #0
 801a382:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	685b      	ldr	r3, [r3, #4]
 801a388:	60fb      	str	r3, [r7, #12]
 801a38a:	e7e5      	b.n	801a358 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	3388      	adds	r3, #136	; 0x88
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	6878      	ldr	r0, [r7, #4]
 801a396:	4798      	blx	r3
}
 801a398:	bf00      	nop
 801a39a:	3710      	adds	r7, #16
 801a39c:	46bd      	mov	sp, r7
 801a39e:	bd80      	pop	{r7, pc}

0801a3a0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b084      	sub	sp, #16
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
 801a3a8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	685b      	ldr	r3, [r3, #4]
 801a3ae:	60fb      	str	r3, [r7, #12]
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d016      	beq.n	801a3e4 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	681a      	ldr	r2, [r3, #0]
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	33b0      	adds	r3, #176	; 0xb0
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	6839      	ldr	r1, [r7, #0]
 801a3c6:	4610      	mov	r0, r2
 801a3c8:	4798      	blx	r3
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	f083 0301 	eor.w	r3, r3, #1
 801a3d0:	b2db      	uxtb	r3, r3
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d002      	beq.n	801a3dc <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	2200      	movs	r2, #0
 801a3da:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	685b      	ldr	r3, [r3, #4]
 801a3e0:	60fb      	str	r3, [r7, #12]
 801a3e2:	e7e5      	b.n	801a3b0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	3388      	adds	r3, #136	; 0x88
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	6878      	ldr	r0, [r7, #4]
 801a3ee:	4798      	blx	r3
}
 801a3f0:	bf00      	nop
 801a3f2:	3710      	adds	r7, #16
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	bd80      	pop	{r7, pc}

0801a3f8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801a3f8:	b580      	push	{r7, lr}
 801a3fa:	b084      	sub	sp, #16
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
 801a400:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	685b      	ldr	r3, [r3, #4]
 801a406:	60fb      	str	r3, [r7, #12]
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d016      	beq.n	801a43c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	681a      	ldr	r2, [r3, #0]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	33ac      	adds	r3, #172	; 0xac
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	6839      	ldr	r1, [r7, #0]
 801a41e:	4610      	mov	r0, r2
 801a420:	4798      	blx	r3
 801a422:	4603      	mov	r3, r0
 801a424:	f083 0301 	eor.w	r3, r3, #1
 801a428:	b2db      	uxtb	r3, r3
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d002      	beq.n	801a434 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	2200      	movs	r2, #0
 801a432:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	685b      	ldr	r3, [r3, #4]
 801a438:	60fb      	str	r3, [r7, #12]
 801a43a:	e7e5      	b.n	801a408 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	3388      	adds	r3, #136	; 0x88
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	6878      	ldr	r0, [r7, #4]
 801a446:	4798      	blx	r3
}
 801a448:	bf00      	nop
 801a44a:	3710      	adds	r7, #16
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	685b      	ldr	r3, [r3, #4]
 801a45e:	60fb      	str	r3, [r7, #12]
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d016      	beq.n	801a494 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	681a      	ldr	r2, [r3, #0]
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	33b4      	adds	r3, #180	; 0xb4
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	6839      	ldr	r1, [r7, #0]
 801a476:	4610      	mov	r0, r2
 801a478:	4798      	blx	r3
 801a47a:	4603      	mov	r3, r0
 801a47c:	f083 0301 	eor.w	r3, r3, #1
 801a480:	b2db      	uxtb	r3, r3
 801a482:	2b00      	cmp	r3, #0
 801a484:	d002      	beq.n	801a48c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	2200      	movs	r2, #0
 801a48a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	685b      	ldr	r3, [r3, #4]
 801a490:	60fb      	str	r3, [r7, #12]
 801a492:	e7e5      	b.n	801a460 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	3388      	adds	r3, #136	; 0x88
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	6878      	ldr	r0, [r7, #4]
 801a49e:	4798      	blx	r3
}
 801a4a0:	bf00      	nop
 801a4a2:	3710      	adds	r7, #16
 801a4a4:	46bd      	mov	sp, r7
 801a4a6:	bd80      	pop	{r7, pc}

0801a4a8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b084      	sub	sp, #16
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	6078      	str	r0, [r7, #4]
 801a4b0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	685b      	ldr	r3, [r3, #4]
 801a4b6:	60fb      	str	r3, [r7, #12]
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d016      	beq.n	801a4ec <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	681a      	ldr	r2, [r3, #0]
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	33bc      	adds	r3, #188	; 0xbc
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	6839      	ldr	r1, [r7, #0]
 801a4ce:	4610      	mov	r0, r2
 801a4d0:	4798      	blx	r3
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	f083 0301 	eor.w	r3, r3, #1
 801a4d8:	b2db      	uxtb	r3, r3
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d002      	beq.n	801a4e4 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	2200      	movs	r2, #0
 801a4e2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	685b      	ldr	r3, [r3, #4]
 801a4e8:	60fb      	str	r3, [r7, #12]
 801a4ea:	e7e5      	b.n	801a4b8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	3388      	adds	r3, #136	; 0x88
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	6878      	ldr	r0, [r7, #4]
 801a4f6:	4798      	blx	r3
}
 801a4f8:	bf00      	nop
 801a4fa:	3710      	adds	r7, #16
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	bd80      	pop	{r7, pc}

0801a500 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801a500:	b580      	push	{r7, lr}
 801a502:	b084      	sub	sp, #16
 801a504:	af00      	add	r7, sp, #0
 801a506:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	685b      	ldr	r3, [r3, #4]
 801a50c:	60fb      	str	r3, [r7, #12]
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d01d      	beq.n	801a550 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	681a      	ldr	r2, [r3, #0]
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	33c8      	adds	r3, #200	; 0xc8
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	4610      	mov	r0, r2
 801a524:	4798      	blx	r3
 801a526:	4603      	mov	r3, r0
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d00d      	beq.n	801a548 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	2200      	movs	r2, #0
 801a536:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	3388      	adds	r3, #136	; 0x88
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	6878      	ldr	r0, [r7, #4]
 801a542:	4798      	blx	r3
            return matchingCall;
 801a544:	68bb      	ldr	r3, [r7, #8]
 801a546:	e004      	b.n	801a552 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	685b      	ldr	r3, [r3, #4]
 801a54c:	60fb      	str	r3, [r7, #12]
 801a54e:	e7de      	b.n	801a50e <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a550:	2300      	movs	r3, #0
}
 801a552:	4618      	mov	r0, r3
 801a554:	3710      	adds	r7, #16
 801a556:	46bd      	mov	sp, r7
 801a558:	bd80      	pop	{r7, pc}

0801a55a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801a55a:	b580      	push	{r7, lr}
 801a55c:	b084      	sub	sp, #16
 801a55e:	af00      	add	r7, sp, #0
 801a560:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	685b      	ldr	r3, [r3, #4]
 801a566:	60fb      	str	r3, [r7, #12]
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d012      	beq.n	801a594 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	681a      	ldr	r2, [r3, #0]
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	33cc      	adds	r3, #204	; 0xcc
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	4610      	mov	r0, r2
 801a57e:	4798      	blx	r3
 801a580:	4603      	mov	r3, r0
 801a582:	2b00      	cmp	r3, #0
 801a584:	d002      	beq.n	801a58c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	e004      	b.n	801a596 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	685b      	ldr	r3, [r3, #4]
 801a590:	60fb      	str	r3, [r7, #12]
 801a592:	e7e9      	b.n	801a568 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a594:	2300      	movs	r3, #0
}
 801a596:	4618      	mov	r0, r3
 801a598:	3710      	adds	r7, #16
 801a59a:	46bd      	mov	sp, r7
 801a59c:	bd80      	pop	{r7, pc}

0801a59e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801a59e:	b580      	push	{r7, lr}
 801a5a0:	b084      	sub	sp, #16
 801a5a2:	af00      	add	r7, sp, #0
 801a5a4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	685b      	ldr	r3, [r3, #4]
 801a5aa:	60fb      	str	r3, [r7, #12]
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d01d      	beq.n	801a5ee <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	681a      	ldr	r2, [r3, #0]
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	33cc      	adds	r3, #204	; 0xcc
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	4610      	mov	r0, r2
 801a5c2:	4798      	blx	r3
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d00d      	beq.n	801a5e6 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	3388      	adds	r3, #136	; 0x88
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	6878      	ldr	r0, [r7, #4]
 801a5e0:	4798      	blx	r3
            return matchingCall;
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	e004      	b.n	801a5f0 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	685b      	ldr	r3, [r3, #4]
 801a5ea:	60fb      	str	r3, [r7, #12]
 801a5ec:	e7de      	b.n	801a5ac <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801a5ee:	2300      	movs	r3, #0
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3710      	adds	r7, #16
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd80      	pop	{r7, pc}

0801a5f8 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b086      	sub	sp, #24
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	685b      	ldr	r3, [r3, #4]
 801a604:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801a606:	2300      	movs	r3, #0
 801a608:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801a60a:	2300      	movs	r3, #0
 801a60c:	60fb      	str	r3, [r7, #12]

    while (current) {
 801a60e:	697b      	ldr	r3, [r7, #20]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d024      	beq.n	801a65e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801a614:	697b      	ldr	r3, [r7, #20]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d11a      	bne.n	801a652 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801a61c:	697b      	ldr	r3, [r7, #20]
 801a61e:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801a620:	693b      	ldr	r3, [r7, #16]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d106      	bne.n	801a634 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801a626:	697b      	ldr	r3, [r7, #20]
 801a628:	685b      	ldr	r3, [r3, #4]
 801a62a:	617b      	str	r3, [r7, #20]
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	697a      	ldr	r2, [r7, #20]
 801a630:	605a      	str	r2, [r3, #4]
 801a632:	e006      	b.n	801a642 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801a634:	697b      	ldr	r3, [r7, #20]
 801a636:	685a      	ldr	r2, [r3, #4]
 801a638:	693b      	ldr	r3, [r7, #16]
 801a63a:	605a      	str	r2, [r3, #4]
 801a63c:	693b      	ldr	r3, [r7, #16]
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801a642:	68fb      	ldr	r3, [r7, #12]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d0e2      	beq.n	801a60e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801a648:	2108      	movs	r1, #8
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7ee f82e 	bl	80086ac <_ZdlPvj>
 801a650:	e7dd      	b.n	801a60e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801a656:	697b      	ldr	r3, [r7, #20]
 801a658:	685b      	ldr	r3, [r3, #4]
 801a65a:	617b      	str	r3, [r7, #20]
    while (current) {
 801a65c:	e7d7      	b.n	801a60e <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801a65e:	bf00      	nop
 801a660:	3718      	adds	r7, #24
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}

0801a666 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801a666:	b580      	push	{r7, lr}
 801a668:	b084      	sub	sp, #16
 801a66a:	af00      	add	r7, sp, #0
 801a66c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	685b      	ldr	r3, [r3, #4]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d019      	beq.n	801a6aa <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	685b      	ldr	r3, [r3, #4]
 801a67c:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	685b      	ldr	r3, [r3, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d004      	beq.n	801a692 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801a688:	681a      	ldr	r2, [r3, #0]
 801a68a:	3204      	adds	r2, #4
 801a68c:	6812      	ldr	r2, [r2, #0]
 801a68e:	4618      	mov	r0, r3
 801a690:	4790      	blx	r2
        delete head_;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	685b      	ldr	r3, [r3, #4]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d003      	beq.n	801a6a2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801a69a:	2108      	movs	r1, #8
 801a69c:	4618      	mov	r0, r3
 801a69e:	f7ee f805 	bl	80086ac <_ZdlPvj>
        head_ = next;
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	68fa      	ldr	r2, [r7, #12]
 801a6a6:	605a      	str	r2, [r3, #4]
    while (head_) {
 801a6a8:	e7e1      	b.n	801a66e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801a6aa:	bf00      	nop
 801a6ac:	3710      	adds	r7, #16
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	bd80      	pop	{r7, pc}

0801a6b2 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801a6b2:	b580      	push	{r7, lr}
 801a6b4:	b084      	sub	sp, #16
 801a6b6:	af00      	add	r7, sp, #0
 801a6b8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	685b      	ldr	r3, [r3, #4]
 801a6be:	60fb      	str	r3, [r7, #12]
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d00c      	beq.n	801a6e0 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	681a      	ldr	r2, [r3, #0]
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	33ec      	adds	r3, #236	; 0xec
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	4610      	mov	r0, r2
 801a6d6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	685b      	ldr	r3, [r3, #4]
 801a6dc:	60fb      	str	r3, [r7, #12]
 801a6de:	e7ef      	b.n	801a6c0 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801a6e0:	bf00      	nop
 801a6e2:	3710      	adds	r7, #16
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}

0801a6e8 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b084      	sub	sp, #16
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	685b      	ldr	r3, [r3, #4]
 801a6f4:	60fb      	str	r3, [r7, #12]
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d00c      	beq.n	801a716 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	681a      	ldr	r2, [r3, #0]
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	33e8      	adds	r3, #232	; 0xe8
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	4610      	mov	r0, r2
 801a70c:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	685b      	ldr	r3, [r3, #4]
 801a712:	60fb      	str	r3, [r7, #12]
 801a714:	e7ef      	b.n	801a6f6 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801a716:	bf00      	nop
 801a718:	3710      	adds	r7, #16
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}

0801a71e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801a71e:	b580      	push	{r7, lr}
 801a720:	b084      	sub	sp, #16
 801a722:	af00      	add	r7, sp, #0
 801a724:	6078      	str	r0, [r7, #4]
 801a726:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	685b      	ldr	r3, [r3, #4]
 801a72c:	60fb      	str	r3, [r7, #12]
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d00d      	beq.n	801a750 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	681a      	ldr	r2, [r3, #0]
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	33dc      	adds	r3, #220	; 0xdc
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	6839      	ldr	r1, [r7, #0]
 801a744:	4610      	mov	r0, r2
 801a746:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	685b      	ldr	r3, [r3, #4]
 801a74c:	60fb      	str	r3, [r7, #12]
 801a74e:	e7ee      	b.n	801a72e <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801a750:	bf00      	nop
 801a752:	3710      	adds	r7, #16
 801a754:	46bd      	mov	sp, r7
 801a756:	bd80      	pop	{r7, pc}

0801a758 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b084      	sub	sp, #16
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
 801a760:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	685b      	ldr	r3, [r3, #4]
 801a766:	60fb      	str	r3, [r7, #12]
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d00d      	beq.n	801a78a <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	681a      	ldr	r2, [r3, #0]
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	33e0      	adds	r3, #224	; 0xe0
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	6839      	ldr	r1, [r7, #0]
 801a77e:	4610      	mov	r0, r2
 801a780:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	685b      	ldr	r3, [r3, #4]
 801a786:	60fb      	str	r3, [r7, #12]
 801a788:	e7ee      	b.n	801a768 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801a78a:	bf00      	nop
 801a78c:	3710      	adds	r7, #16
 801a78e:	46bd      	mov	sp, r7
 801a790:	bd80      	pop	{r7, pc}
	...

0801a794 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801a794:	b590      	push	{r4, r7, lr}
 801a796:	b087      	sub	sp, #28
 801a798:	af00      	add	r7, sp, #0
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	60b9      	str	r1, [r7, #8]
 801a79e:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801a7a0:	68b9      	ldr	r1, [r7, #8]
 801a7a2:	68f8      	ldr	r0, [r7, #12]
 801a7a4:	f7f0 fb85 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801a7a8:	f107 0310 	add.w	r3, r7, #16
 801a7ac:	490f      	ldr	r1, [pc, #60]	; (801a7ec <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	f7f0 fb2b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801a7b4:	f107 0310 	add.w	r3, r7, #16
 801a7b8:	4619      	mov	r1, r3
 801a7ba:	68f8      	ldr	r0, [r7, #12]
 801a7bc:	f7f0 fee9 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801a7c0:	4603      	mov	r3, r0
 801a7c2:	461c      	mov	r4, r3
 801a7c4:	f107 0310 	add.w	r3, r7, #16
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f7f0 fed6 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801a7ce:	2c00      	cmp	r4, #0
 801a7d0:	d007      	beq.n	801a7e2 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801a7d2:	6879      	ldr	r1, [r7, #4]
 801a7d4:	68f8      	ldr	r0, [r7, #12]
 801a7d6:	f7f0 ff4d 	bl	800b674 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801a7da:	4905      	ldr	r1, [pc, #20]	; (801a7f0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801a7dc:	68f8      	ldr	r0, [r7, #12]
 801a7de:	f7f0 ff5b 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801a7e2:	bf00      	nop
}
 801a7e4:	68f8      	ldr	r0, [r7, #12]
 801a7e6:	371c      	adds	r7, #28
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	bd90      	pop	{r4, r7, pc}
 801a7ec:	08024030 	.word	0x08024030
 801a7f0:	08024034 	.word	0x08024034

0801a7f4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801a7f4:	b590      	push	{r4, r7, lr}
 801a7f6:	b087      	sub	sp, #28
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	60f8      	str	r0, [r7, #12]
 801a7fc:	60b9      	str	r1, [r7, #8]
 801a7fe:	607a      	str	r2, [r7, #4]
 801a800:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801a802:	68b9      	ldr	r1, [r7, #8]
 801a804:	68f8      	ldr	r0, [r7, #12]
 801a806:	f7f0 fb54 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801a80a:	f107 0310 	add.w	r3, r7, #16
 801a80e:	4912      	ldr	r1, [pc, #72]	; (801a858 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801a810:	4618      	mov	r0, r3
 801a812:	f7f0 fafa 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801a816:	f107 0310 	add.w	r3, r7, #16
 801a81a:	4619      	mov	r1, r3
 801a81c:	68f8      	ldr	r0, [r7, #12]
 801a81e:	f7f0 fefd 	bl	800b61c <_ZneRK12SimpleStringS1_>
 801a822:	4603      	mov	r3, r0
 801a824:	461c      	mov	r4, r3
 801a826:	f107 0310 	add.w	r3, r7, #16
 801a82a:	4618      	mov	r0, r3
 801a82c:	f7f0 fea5 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801a830:	2c00      	cmp	r4, #0
 801a832:	d003      	beq.n	801a83c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801a834:	4909      	ldr	r1, [pc, #36]	; (801a85c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801a836:	68f8      	ldr	r0, [r7, #12]
 801a838:	f7f0 ff2e 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801a83c:	6879      	ldr	r1, [r7, #4]
 801a83e:	68f8      	ldr	r0, [r7, #12]
 801a840:	f7f0 ff18 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801a844:	6839      	ldr	r1, [r7, #0]
 801a846:	68f8      	ldr	r0, [r7, #12]
 801a848:	f7f0 ff14 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    return str;
 801a84c:	bf00      	nop
}
 801a84e:	68f8      	ldr	r0, [r7, #12]
 801a850:	371c      	adds	r7, #28
 801a852:	46bd      	mov	sp, r7
 801a854:	bd90      	pop	{r4, r7, pc}
 801a856:	bf00      	nop
 801a858:	08024030 	.word	0x08024030
 801a85c:	0802403c 	.word	0x0802403c

0801a860 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b08c      	sub	sp, #48	; 0x30
 801a864:	af00      	add	r7, sp, #0
 801a866:	60f8      	str	r0, [r7, #12]
 801a868:	60b9      	str	r1, [r7, #8]
 801a86a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801a86c:	f107 0314 	add.w	r3, r7, #20
 801a870:	4929      	ldr	r1, [pc, #164]	; (801a918 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801a872:	4618      	mov	r0, r3
 801a874:	f7f0 fac9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a878:	68bb      	ldr	r3, [r7, #8]
 801a87a:	685b      	ldr	r3, [r3, #4]
 801a87c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a880:	2b00      	cmp	r3, #0
 801a882:	d038      	beq.n	801a8f6 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a886:	681a      	ldr	r2, [r3, #0]
 801a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	33c0      	adds	r3, #192	; 0xc0
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	4610      	mov	r0, r2
 801a894:	4798      	blx	r3
 801a896:	4603      	mov	r3, r0
 801a898:	f083 0301 	eor.w	r3, r3, #1
 801a89c:	b2db      	uxtb	r3, r3
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d025      	beq.n	801a8ee <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8a4:	6819      	ldr	r1, [r3, #0]
 801a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	33f0      	adds	r3, #240	; 0xf0
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a8b4:	4610      	mov	r0, r2
 801a8b6:	4798      	blx	r3
 801a8b8:	f107 001c 	add.w	r0, r7, #28
 801a8bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a8c0:	f107 0114 	add.w	r1, r7, #20
 801a8c4:	687a      	ldr	r2, [r7, #4]
 801a8c6:	f7ff ff95 	bl	801a7f4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a8ca:	f107 021c 	add.w	r2, r7, #28
 801a8ce:	f107 0314 	add.w	r3, r7, #20
 801a8d2:	4611      	mov	r1, r2
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f7f0 fb04 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801a8da:	f107 031c 	add.w	r3, r7, #28
 801a8de:	4618      	mov	r0, r3
 801a8e0:	f7f0 fe4b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801a8e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	f7f0 fe46 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8f0:	685b      	ldr	r3, [r3, #4]
 801a8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a8f4:	e7c3      	b.n	801a87e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	f107 0114 	add.w	r1, r7, #20
 801a8fc:	687a      	ldr	r2, [r7, #4]
 801a8fe:	4618      	mov	r0, r3
 801a900:	f7ff ff48 	bl	801a794 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801a904:	f107 0314 	add.w	r3, r7, #20
 801a908:	4618      	mov	r0, r3
 801a90a:	f7f0 fe36 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a90e:	bf00      	nop
}
 801a910:	68f8      	ldr	r0, [r7, #12]
 801a912:	3730      	adds	r7, #48	; 0x30
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}
 801a918:	08024030 	.word	0x08024030

0801a91c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b08c      	sub	sp, #48	; 0x30
 801a920:	af00      	add	r7, sp, #0
 801a922:	60f8      	str	r0, [r7, #12]
 801a924:	60b9      	str	r1, [r7, #8]
 801a926:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801a928:	f107 0314 	add.w	r3, r7, #20
 801a92c:	4928      	ldr	r1, [pc, #160]	; (801a9d0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801a92e:	4618      	mov	r0, r3
 801a930:	f7f0 fa6b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	685b      	ldr	r3, [r3, #4]
 801a938:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d035      	beq.n	801a9ac <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a942:	681a      	ldr	r2, [r3, #0]
 801a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	33c0      	adds	r3, #192	; 0xc0
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	4610      	mov	r0, r2
 801a950:	4798      	blx	r3
 801a952:	4603      	mov	r3, r0
 801a954:	2b00      	cmp	r3, #0
 801a956:	d025      	beq.n	801a9a4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a95a:	6819      	ldr	r1, [r3, #0]
 801a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	33f0      	adds	r3, #240	; 0xf0
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801a96a:	4610      	mov	r0, r2
 801a96c:	4798      	blx	r3
 801a96e:	f107 001c 	add.w	r0, r7, #28
 801a972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a976:	f107 0114 	add.w	r1, r7, #20
 801a97a:	687a      	ldr	r2, [r7, #4]
 801a97c:	f7ff ff3a 	bl	801a7f4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801a980:	f107 021c 	add.w	r2, r7, #28
 801a984:	f107 0314 	add.w	r3, r7, #20
 801a988:	4611      	mov	r1, r2
 801a98a:	4618      	mov	r0, r3
 801a98c:	f7f0 faa9 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801a990:	f107 031c 	add.w	r3, r7, #28
 801a994:	4618      	mov	r0, r3
 801a996:	f7f0 fdf0 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801a99a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a99e:	4618      	mov	r0, r3
 801a9a0:	f7f0 fdeb 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9a6:	685b      	ldr	r3, [r3, #4]
 801a9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a9aa:	e7c6      	b.n	801a93a <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	f107 0114 	add.w	r1, r7, #20
 801a9b2:	687a      	ldr	r2, [r7, #4]
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	f7ff feed 	bl	801a794 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801a9ba:	f107 0314 	add.w	r3, r7, #20
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f7f0 fddb 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801a9c4:	bf00      	nop
}
 801a9c6:	68f8      	ldr	r0, [r7, #12]
 801a9c8:	3730      	adds	r7, #48	; 0x30
 801a9ca:	46bd      	mov	sp, r7
 801a9cc:	bd80      	pop	{r7, pc}
 801a9ce:	bf00      	nop
 801a9d0:	08024030 	.word	0x08024030

0801a9d4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b08e      	sub	sp, #56	; 0x38
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
 801a9dc:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801a9de:	f107 030c 	add.w	r3, r7, #12
 801a9e2:	4936      	ldr	r1, [pc, #216]	; (801aabc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	f7f0 fa10 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a9ea:	683b      	ldr	r3, [r7, #0]
 801a9ec:	685b      	ldr	r3, [r3, #4]
 801a9ee:	637b      	str	r3, [r7, #52]	; 0x34
 801a9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d044      	beq.n	801aa80 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801a9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9f8:	681a      	ldr	r2, [r3, #0]
 801a9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	33cc      	adds	r3, #204	; 0xcc
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4610      	mov	r0, r2
 801aa06:	4798      	blx	r3
 801aa08:	4603      	mov	r3, r0
 801aa0a:	f083 0301 	eor.w	r3, r3, #1
 801aa0e:	b2db      	uxtb	r3, r3
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d031      	beq.n	801aa78 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801aa14:	f107 031c 	add.w	r3, r7, #28
 801aa18:	4928      	ldr	r1, [pc, #160]	; (801aabc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	f7f0 f9f5 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa22:	6819      	ldr	r1, [r3, #0]
 801aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	33f4      	adds	r3, #244	; 0xf4
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801aa32:	4610      	mov	r0, r2
 801aa34:	4798      	blx	r3
 801aa36:	f107 0014 	add.w	r0, r7, #20
 801aa3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aa3e:	f107 021c 	add.w	r2, r7, #28
 801aa42:	f107 010c 	add.w	r1, r7, #12
 801aa46:	f7ff fed5 	bl	801a7f4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801aa4a:	f107 0214 	add.w	r2, r7, #20
 801aa4e:	f107 030c 	add.w	r3, r7, #12
 801aa52:	4611      	mov	r1, r2
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7f0 fa44 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801aa5a:	f107 0314 	add.w	r3, r7, #20
 801aa5e:	4618      	mov	r0, r3
 801aa60:	f7f0 fd8b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801aa64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aa68:	4618      	mov	r0, r3
 801aa6a:	f7f0 fd86 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801aa6e:	f107 031c 	add.w	r3, r7, #28
 801aa72:	4618      	mov	r0, r3
 801aa74:	f7f0 fd81 	bl	800b57a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa7a:	685b      	ldr	r3, [r3, #4]
 801aa7c:	637b      	str	r3, [r7, #52]	; 0x34
 801aa7e:	e7b7      	b.n	801a9f0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801aa80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aa84:	490d      	ldr	r1, [pc, #52]	; (801aabc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801aa86:	4618      	mov	r0, r3
 801aa88:	f7f0 f9bf 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801aa92:	f107 010c 	add.w	r1, r7, #12
 801aa96:	4618      	mov	r0, r3
 801aa98:	f7ff fe7c 	bl	801a794 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801aa9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	f7f0 fd6a 	bl	800b57a <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801aaa6:	f107 030c 	add.w	r3, r7, #12
 801aaaa:	4618      	mov	r0, r3
 801aaac:	f7f0 fd65 	bl	800b57a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801aab0:	bf00      	nop
}
 801aab2:	6878      	ldr	r0, [r7, #4]
 801aab4:	3738      	adds	r7, #56	; 0x38
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}
 801aaba:	bf00      	nop
 801aabc:	08024030 	.word	0x08024030

0801aac0 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b084      	sub	sp, #16
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	685b      	ldr	r3, [r3, #4]
 801aacc:	60fb      	str	r3, [r7, #12]
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d014      	beq.n	801aafe <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	681a      	ldr	r2, [r3, #0]
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	33d0      	adds	r3, #208	; 0xd0
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	4610      	mov	r0, r2
 801aae4:	4798      	blx	r3
 801aae6:	4603      	mov	r3, r0
 801aae8:	f083 0301 	eor.w	r3, r3, #1
 801aaec:	b2db      	uxtb	r3, r3
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d001      	beq.n	801aaf6 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	e004      	b.n	801ab00 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	685b      	ldr	r3, [r3, #4]
 801aafa:	60fb      	str	r3, [r7, #12]
 801aafc:	e7e7      	b.n	801aace <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801aafe:	2300      	movs	r3, #0
}
 801ab00:	4618      	mov	r0, r3
 801ab02:	3710      	adds	r7, #16
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}

0801ab08 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801ab08:	b480      	push	{r7}
 801ab0a:	b083      	sub	sp, #12
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
 801ab10:	460b      	mov	r3, r1
 801ab12:	70fb      	strb	r3, [r7, #3]
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	78fa      	ldrb	r2, [r7, #3]
 801ab18:	711a      	strb	r2, [r3, #4]
 801ab1a:	bf00      	nop
 801ab1c:	370c      	adds	r7, #12
 801ab1e:	46bd      	mov	sp, r7
 801ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab24:	4770      	bx	lr
	...

0801ab28 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b082      	sub	sp, #8
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	6078      	str	r0, [r7, #4]
 801ab30:	460b      	mov	r3, r1
 801ab32:	70fb      	strb	r3, [r7, #3]
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	4618      	mov	r0, r3
 801ab38:	f7ed ff6a 	bl	8008a10 <_ZN14TestTerminatorC1Ev>
 801ab3c:	4a05      	ldr	r2, [pc, #20]	; (801ab54 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	601a      	str	r2, [r3, #0]
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	78fa      	ldrb	r2, [r7, #3]
 801ab46:	711a      	strb	r2, [r3, #4]
    {
    }
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	3708      	adds	r7, #8
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	bd80      	pop	{r7, pc}
 801ab52:	bf00      	nop
 801ab54:	080268dc 	.word	0x080268dc

0801ab58 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b082      	sub	sp, #8
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	791b      	ldrb	r3, [r3, #4]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d001      	beq.n	801ab6c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801ab68:	f7f6 f9fe 	bl	8010f68 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801ab6c:	f7f7 fd40 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ab70:	4603      	mov	r3, r0
 801ab72:	681a      	ldr	r2, [r3, #0]
 801ab74:	6812      	ldr	r2, [r2, #0]
 801ab76:	4618      	mov	r0, r3
 801ab78:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801ab7a:	bf00      	nop
 801ab7c:	3708      	adds	r7, #8
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	bd80      	pop	{r7, pc}
	...

0801ab84 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b082      	sub	sp, #8
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
    {
 801ab8c:	4a05      	ldr	r2, [pc, #20]	; (801aba4 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	601a      	str	r2, [r3, #0]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	4618      	mov	r0, r3
 801ab96:	f7f7 fdbb 	bl	8012710 <_ZN14TestTerminatorD1Ev>
    }
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	3708      	adds	r7, #8
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}
 801aba4:	080268dc 	.word	0x080268dc

0801aba8 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801aba8:	b580      	push	{r7, lr}
 801abaa:	b082      	sub	sp, #8
 801abac:	af00      	add	r7, sp, #0
 801abae:	6078      	str	r0, [r7, #4]
    }
 801abb0:	6878      	ldr	r0, [r7, #4]
 801abb2:	f7ff ffe7 	bl	801ab84 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801abb6:	2108      	movs	r1, #8
 801abb8:	6878      	ldr	r0, [r7, #4]
 801abba:	f7ed fd77 	bl	80086ac <_ZdlPvj>
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	4618      	mov	r0, r3
 801abc2:	3708      	adds	r7, #8
 801abc4:	46bd      	mov	sp, r7
 801abc6:	bd80      	pop	{r7, pc}

0801abc8 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abca:	b085      	sub	sp, #20
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
 801abd0:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	330c      	adds	r3, #12
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	6878      	ldr	r0, [r7, #4]
 801abdc:	4798      	blx	r3
 801abde:	4603      	mov	r3, r0
 801abe0:	681a      	ldr	r2, [r3, #0]
 801abe2:	321c      	adds	r2, #28
 801abe4:	6812      	ldr	r2, [r2, #0]
 801abe6:	4618      	mov	r0, r3
 801abe8:	4790      	blx	r2
 801abea:	4603      	mov	r3, r0
 801abec:	f083 0301 	eor.w	r3, r3, #1
 801abf0:	b2db      	uxtb	r3, r3
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d01d      	beq.n	801ac32 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	330c      	adds	r3, #12
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	6878      	ldr	r0, [r7, #4]
 801ac00:	4798      	blx	r3
 801ac02:	4604      	mov	r4, r0
 801ac04:	6823      	ldr	r3, [r4, #0]
 801ac06:	339c      	adds	r3, #156	; 0x9c
 801ac08:	681d      	ldr	r5, [r3, #0]
 801ac0a:	683e      	ldr	r6, [r7, #0]
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	791a      	ldrb	r2, [r3, #4]
 801ac10:	f107 0308 	add.w	r3, r7, #8
 801ac14:	4611      	mov	r1, r2
 801ac16:	4618      	mov	r0, r3
 801ac18:	f7ff ff86 	bl	801ab28 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801ac1c:	f107 0308 	add.w	r3, r7, #8
 801ac20:	461a      	mov	r2, r3
 801ac22:	4631      	mov	r1, r6
 801ac24:	4620      	mov	r0, r4
 801ac26:	47a8      	blx	r5
 801ac28:	f107 0308 	add.w	r3, r7, #8
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	f7ff ffa9 	bl	801ab84 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801ac32:	bf00      	nop
 801ac34:	3714      	adds	r7, #20
 801ac36:	46bd      	mov	sp, r7
 801ac38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ac3a <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801ac3a:	b580      	push	{r7, lr}
 801ac3c:	b082      	sub	sp, #8
 801ac3e:	af00      	add	r7, sp, #0
 801ac40:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801ac42:	f7f7 fcc5 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801ac46:	4603      	mov	r3, r0
}
 801ac48:	4618      	mov	r0, r3
 801ac4a:	3708      	adds	r7, #8
 801ac4c:	46bd      	mov	sp, r7
 801ac4e:	bd80      	pop	{r7, pc}

0801ac50 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801ac50:	b590      	push	{r4, r7, lr}
 801ac52:	b085      	sub	sp, #20
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	6078      	str	r0, [r7, #4]
 801ac58:	6039      	str	r1, [r7, #0]
 801ac5a:	687c      	ldr	r4, [r7, #4]
 801ac5c:	f107 0308 	add.w	r3, r7, #8
 801ac60:	490b      	ldr	r1, [pc, #44]	; (801ac90 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801ac62:	4618      	mov	r0, r3
 801ac64:	f7f0 f8d1 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ac68:	f107 0308 	add.w	r3, r7, #8
 801ac6c:	461a      	mov	r2, r3
 801ac6e:	6839      	ldr	r1, [r7, #0]
 801ac70:	4620      	mov	r0, r4
 801ac72:	f7f1 ff29 	bl	800cac8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801ac76:	f107 0308 	add.w	r3, r7, #8
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7f0 fc7d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ac80:	4a04      	ldr	r2, [pc, #16]	; (801ac94 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	601a      	str	r2, [r3, #0]
{
}
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	4618      	mov	r0, r3
 801ac8a:	3714      	adds	r7, #20
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd90      	pop	{r4, r7, pc}
 801ac90:	08024040 	.word	0x08024040
 801ac94:	08025868 	.word	0x08025868

0801ac98 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801ac98:	b5b0      	push	{r4, r5, r7, lr}
 801ac9a:	b08a      	sub	sp, #40	; 0x28
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	6078      	str	r0, [r7, #4]
 801aca0:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	332c      	adds	r3, #44	; 0x2c
 801aca6:	492b      	ldr	r1, [pc, #172]	; (801ad54 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801aca8:	4618      	mov	r0, r3
 801acaa:	f7f0 fcf5 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801acb4:	683b      	ldr	r3, [r7, #0]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	337c      	adds	r3, #124	; 0x7c
 801acba:	681c      	ldr	r4, [r3, #0]
 801acbc:	f107 0310 	add.w	r3, r7, #16
 801acc0:	4925      	ldr	r1, [pc, #148]	; (801ad58 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801acc2:	4618      	mov	r0, r3
 801acc4:	f7f0 f8a1 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801acc8:	f107 0308 	add.w	r3, r7, #8
 801accc:	f107 0210 	add.w	r2, r7, #16
 801acd0:	6839      	ldr	r1, [r7, #0]
 801acd2:	4618      	mov	r0, r3
 801acd4:	47a0      	blx	r4
 801acd6:	f107 0308 	add.w	r3, r7, #8
 801acda:	4619      	mov	r1, r3
 801acdc:	4628      	mov	r0, r5
 801acde:	f7f0 fcc9 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801ace2:	f107 0308 	add.w	r3, r7, #8
 801ace6:	4618      	mov	r0, r3
 801ace8:	f7f0 fc47 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801acec:	f107 0310 	add.w	r3, r7, #16
 801acf0:	4618      	mov	r0, r3
 801acf2:	f7f0 fc42 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	332c      	adds	r3, #44	; 0x2c
 801acfa:	4918      	ldr	r1, [pc, #96]	; (801ad5c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801acfc:	4618      	mov	r0, r3
 801acfe:	f7f0 fccb 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801ad08:	683b      	ldr	r3, [r7, #0]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	3380      	adds	r3, #128	; 0x80
 801ad0e:	681c      	ldr	r4, [r3, #0]
 801ad10:	f107 0320 	add.w	r3, r7, #32
 801ad14:	4910      	ldr	r1, [pc, #64]	; (801ad58 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801ad16:	4618      	mov	r0, r3
 801ad18:	f7f0 f877 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ad1c:	f107 0318 	add.w	r3, r7, #24
 801ad20:	f107 0220 	add.w	r2, r7, #32
 801ad24:	6839      	ldr	r1, [r7, #0]
 801ad26:	4618      	mov	r0, r3
 801ad28:	47a0      	blx	r4
 801ad2a:	f107 0318 	add.w	r3, r7, #24
 801ad2e:	4619      	mov	r1, r3
 801ad30:	4628      	mov	r0, r5
 801ad32:	f7f0 fc9f 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801ad36:	f107 0318 	add.w	r3, r7, #24
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	f7f0 fc1d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ad40:	f107 0320 	add.w	r3, r7, #32
 801ad44:	4618      	mov	r0, r3
 801ad46:	f7f0 fc18 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 801ad4a:	bf00      	nop
 801ad4c:	3728      	adds	r7, #40	; 0x28
 801ad4e:	46bd      	mov	sp, r7
 801ad50:	bdb0      	pop	{r4, r5, r7, pc}
 801ad52:	bf00      	nop
 801ad54:	08024090 	.word	0x08024090
 801ad58:	080240bc 	.word	0x080240bc
 801ad5c:	080240c0 	.word	0x080240c0

0801ad60 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801ad60:	b590      	push	{r4, r7, lr}
 801ad62:	b08f      	sub	sp, #60	; 0x3c
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	60f8      	str	r0, [r7, #12]
 801ad68:	60b9      	str	r1, [r7, #8]
 801ad6a:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801ad6c:	f107 0310 	add.w	r3, r7, #16
 801ad70:	4618      	mov	r0, r3
 801ad72:	f7ff f877 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801ad76:	f107 0310 	add.w	r3, r7, #16
 801ad7a:	687a      	ldr	r2, [r7, #4]
 801ad7c:	68b9      	ldr	r1, [r7, #8]
 801ad7e:	4618      	mov	r0, r3
 801ad80:	f7ff fa16 	bl	801a1b0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	332c      	adds	r3, #44	; 0x2c
 801ad88:	4937      	ldr	r1, [pc, #220]	; (801ae68 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f7f0 fc84 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801ad90:	68fb      	ldr	r3, [r7, #12]
 801ad92:	332c      	adds	r3, #44	; 0x2c
 801ad94:	68b9      	ldr	r1, [r7, #8]
 801ad96:	4618      	mov	r0, r3
 801ad98:	f7f0 fc6c 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	332c      	adds	r3, #44	; 0x2c
 801ada0:	4932      	ldr	r1, [pc, #200]	; (801ae6c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801ada2:	4618      	mov	r0, r3
 801ada4:	f7f0 fc78 	bl	800b698 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801adae:	f107 0320 	add.w	r3, r7, #32
 801adb2:	492f      	ldr	r1, [pc, #188]	; (801ae70 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801adb4:	4618      	mov	r0, r3
 801adb6:	f7f0 f828 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801adba:	f107 0318 	add.w	r3, r7, #24
 801adbe:	f107 0220 	add.w	r2, r7, #32
 801adc2:	f107 0110 	add.w	r1, r7, #16
 801adc6:	4618      	mov	r0, r3
 801adc8:	f7ff fd4a 	bl	801a860 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801adcc:	f107 0318 	add.w	r3, r7, #24
 801add0:	4619      	mov	r1, r3
 801add2:	4620      	mov	r0, r4
 801add4:	f7f0 fc4e 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801add8:	f107 0318 	add.w	r3, r7, #24
 801addc:	4618      	mov	r0, r3
 801adde:	f7f0 fbcc 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ade2:	f107 0320 	add.w	r3, r7, #32
 801ade6:	4618      	mov	r0, r3
 801ade8:	f7f0 fbc7 	bl	800b57a <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	332c      	adds	r3, #44	; 0x2c
 801adf0:	4920      	ldr	r1, [pc, #128]	; (801ae74 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801adf2:	4618      	mov	r0, r3
 801adf4:	f7f0 fc50 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	332c      	adds	r3, #44	; 0x2c
 801adfc:	68b9      	ldr	r1, [r7, #8]
 801adfe:	4618      	mov	r0, r3
 801ae00:	f7f0 fc38 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	332c      	adds	r3, #44	; 0x2c
 801ae08:	4918      	ldr	r1, [pc, #96]	; (801ae6c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	f7f0 fc44 	bl	800b698 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801ae10:	68fb      	ldr	r3, [r7, #12]
 801ae12:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ae16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ae1a:	4915      	ldr	r1, [pc, #84]	; (801ae70 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	f7ef fff4 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ae22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ae26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801ae2a:	f107 0110 	add.w	r1, r7, #16
 801ae2e:	4618      	mov	r0, r3
 801ae30:	f7ff fd74 	bl	801a91c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801ae34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ae38:	4619      	mov	r1, r3
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	f7f0 fc1a 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801ae40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ae44:	4618      	mov	r0, r3
 801ae46:	f7f0 fb98 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ae4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ae4e:	4618      	mov	r0, r3
 801ae50:	f7f0 fb93 	bl	800b57a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801ae54:	f107 0310 	add.w	r3, r7, #16
 801ae58:	4618      	mov	r0, r3
 801ae5a:	f7ff f817 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
}
 801ae5e:	bf00      	nop
 801ae60:	373c      	adds	r7, #60	; 0x3c
 801ae62:	46bd      	mov	sp, r7
 801ae64:	bd90      	pop	{r4, r7, pc}
 801ae66:	bf00      	nop
 801ae68:	080240e8 	.word	0x080240e8
 801ae6c:	08024128 	.word	0x08024128
 801ae70:	080240bc 	.word	0x080240bc
 801ae74:	0802412c 	.word	0x0802412c

0801ae78 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ae78:	b590      	push	{r4, r7, lr}
 801ae7a:	b087      	sub	sp, #28
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	60f8      	str	r0, [r7, #12]
 801ae80:	60b9      	str	r1, [r7, #8]
 801ae82:	607a      	str	r2, [r7, #4]
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	68b9      	ldr	r1, [r7, #8]
 801ae88:	4618      	mov	r0, r3
 801ae8a:	f7ff fee1 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801ae8e:	4a10      	ldr	r2, [pc, #64]	; (801aed0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ae9a:	f107 0310 	add.w	r3, r7, #16
 801ae9e:	490d      	ldr	r1, [pc, #52]	; (801aed4 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801aea0:	4618      	mov	r0, r3
 801aea2:	f7ef ffb2 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801aea6:	f107 0310 	add.w	r3, r7, #16
 801aeaa:	4619      	mov	r1, r3
 801aeac:	4620      	mov	r0, r4
 801aeae:	f7f0 f818 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801aeb2:	f107 0310 	add.w	r3, r7, #16
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	f7f0 fb5f 	bl	800b57a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	6879      	ldr	r1, [r7, #4]
 801aec0:	4618      	mov	r0, r3
 801aec2:	f7ff fee9 	bl	801ac98 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	4618      	mov	r0, r3
 801aeca:	371c      	adds	r7, #28
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd90      	pop	{r4, r7, pc}
 801aed0:	0802583c 	.word	0x0802583c
 801aed4:	08024168 	.word	0x08024168

0801aed8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801aed8:	b590      	push	{r4, r7, lr}
 801aeda:	b08d      	sub	sp, #52	; 0x34
 801aedc:	af00      	add	r7, sp, #0
 801aede:	60f8      	str	r0, [r7, #12]
 801aee0:	60b9      	str	r1, [r7, #8]
 801aee2:	607a      	str	r2, [r7, #4]
 801aee4:	603b      	str	r3, [r7, #0]
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	68b9      	ldr	r1, [r7, #8]
 801aeea:	4618      	mov	r0, r3
 801aeec:	f7ff feb0 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801aef0:	4a2f      	ldr	r2, [pc, #188]	; (801afb0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801aef6:	683b      	ldr	r3, [r7, #0]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	3310      	adds	r3, #16
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	6879      	ldr	r1, [r7, #4]
 801af00:	6838      	ldr	r0, [r7, #0]
 801af02:	4798      	blx	r3
 801af04:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d027      	beq.n	801af5c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af0e:	1c5a      	adds	r2, r3, #1
 801af10:	f107 0314 	add.w	r3, r7, #20
 801af14:	4611      	mov	r1, r2
 801af16:	4618      	mov	r0, r3
 801af18:	f7f1 fa00 	bl	800c31c <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801af22:	f107 0314 	add.w	r3, r7, #20
 801af26:	4618      	mov	r0, r3
 801af28:	f7f0 fafa 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801af2c:	4602      	mov	r2, r0
 801af2e:	f107 031c 	add.w	r3, r7, #28
 801af32:	4920      	ldr	r1, [pc, #128]	; (801afb4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801af34:	4618      	mov	r0, r3
 801af36:	f7f1 f827 	bl	800bf88 <_Z16StringFromFormatPKcz>
 801af3a:	f107 031c 	add.w	r3, r7, #28
 801af3e:	4619      	mov	r1, r3
 801af40:	4620      	mov	r0, r4
 801af42:	f7ef ffce 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801af46:	f107 031c 	add.w	r3, r7, #28
 801af4a:	4618      	mov	r0, r3
 801af4c:	f7f0 fb15 	bl	800b57a <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801af50:	f107 0314 	add.w	r3, r7, #20
 801af54:	4618      	mov	r0, r3
 801af56:	f7f0 fb10 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801af5a:	e013      	b.n	801af84 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801af62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af66:	4914      	ldr	r1, [pc, #80]	; (801afb8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801af68:	4618      	mov	r0, r3
 801af6a:	f7ef ff4e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801af6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af72:	4619      	mov	r1, r3
 801af74:	4620      	mov	r0, r4
 801af76:	f7ef ffb4 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801af7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801af7e:	4618      	mov	r0, r3
 801af80:	f7f0 fafb 	bl	800b57a <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	332c      	adds	r3, #44	; 0x2c
 801af88:	6879      	ldr	r1, [r7, #4]
 801af8a:	4618      	mov	r0, r3
 801af8c:	f7f0 fb72 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	332c      	adds	r3, #44	; 0x2c
 801af94:	4909      	ldr	r1, [pc, #36]	; (801afbc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801af96:	4618      	mov	r0, r3
 801af98:	f7f0 fb7e 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	6839      	ldr	r1, [r7, #0]
 801afa0:	4618      	mov	r0, r3
 801afa2:	f7ff fe79 	bl	801ac98 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	4618      	mov	r0, r3
 801afaa:	3734      	adds	r7, #52	; 0x34
 801afac:	46bd      	mov	sp, r7
 801afae:	bd90      	pop	{r4, r7, pc}
 801afb0:	080261dc 	.word	0x080261dc
 801afb4:	08024198 	.word	0x08024198
 801afb8:	080241d4 	.word	0x080241d4
 801afbc:	08024128 	.word	0x08024128

0801afc0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801afc0:	b590      	push	{r4, r7, lr}
 801afc2:	b089      	sub	sp, #36	; 0x24
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	60f8      	str	r0, [r7, #12]
 801afc8:	60b9      	str	r1, [r7, #8]
 801afca:	607a      	str	r2, [r7, #4]
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	68b9      	ldr	r1, [r7, #8]
 801afd0:	4618      	mov	r0, r3
 801afd2:	f7ff fe3d 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801afd6:	4a1f      	ldr	r2, [pc, #124]	; (801b054 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801afdc:	f107 0310 	add.w	r3, r7, #16
 801afe0:	4618      	mov	r0, r3
 801afe2:	f7fe ff3f 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801afe6:	f107 0310 	add.w	r3, r7, #16
 801afea:	6879      	ldr	r1, [r7, #4]
 801afec:	4618      	mov	r0, r3
 801afee:	f7ff f909 	bl	801a204 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801aff2:	f107 0310 	add.w	r3, r7, #16
 801aff6:	4618      	mov	r0, r3
 801aff8:	f7ff f94c 	bl	801a294 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b002:	f107 0318 	add.w	r3, r7, #24
 801b006:	4914      	ldr	r1, [pc, #80]	; (801b058 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801b008:	4618      	mov	r0, r3
 801b00a:	f7ef fefe 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b00e:	f107 0318 	add.w	r3, r7, #24
 801b012:	4619      	mov	r1, r3
 801b014:	4620      	mov	r0, r4
 801b016:	f7ef ff64 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b01a:	f107 0318 	add.w	r3, r7, #24
 801b01e:	4618      	mov	r0, r3
 801b020:	f7f0 faab 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	332c      	adds	r3, #44	; 0x2c
 801b028:	490c      	ldr	r1, [pc, #48]	; (801b05c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7f0 fb34 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801b030:	68fb      	ldr	r3, [r7, #12]
 801b032:	f107 0210 	add.w	r2, r7, #16
 801b036:	4611      	mov	r1, r2
 801b038:	4618      	mov	r0, r3
 801b03a:	f7ff fe2d 	bl	801ac98 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801b03e:	f107 0310 	add.w	r3, r7, #16
 801b042:	4618      	mov	r0, r3
 801b044:	f7fe ff22 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
}
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	4618      	mov	r0, r3
 801b04c:	3724      	adds	r7, #36	; 0x24
 801b04e:	46bd      	mov	sp, r7
 801b050:	bd90      	pop	{r4, r7, pc}
 801b052:	bf00      	nop
 801b054:	08025810 	.word	0x08025810
 801b058:	08024200 	.word	0x08024200
 801b05c:	08024128 	.word	0x08024128

0801b060 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801b060:	b590      	push	{r4, r7, lr}
 801b062:	b099      	sub	sp, #100	; 0x64
 801b064:	af00      	add	r7, sp, #0
 801b066:	60f8      	str	r0, [r7, #12]
 801b068:	60b9      	str	r1, [r7, #8]
 801b06a:	607a      	str	r2, [r7, #4]
 801b06c:	603b      	str	r3, [r7, #0]
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	68b9      	ldr	r1, [r7, #8]
 801b072:	4618      	mov	r0, r3
 801b074:	f7ff fdec 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801b078:	4a9e      	ldr	r2, [pc, #632]	; (801b2f4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b07e:	f107 0310 	add.w	r3, r7, #16
 801b082:	4618      	mov	r0, r3
 801b084:	f7fe feee 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801b088:	f107 0310 	add.w	r3, r7, #16
 801b08c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b08e:	6879      	ldr	r1, [r7, #4]
 801b090:	4618      	mov	r0, r3
 801b092:	f7ff f88d 	bl	801a1b0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	335c      	adds	r3, #92	; 0x5c
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	f107 0218 	add.w	r2, r7, #24
 801b0a2:	6839      	ldr	r1, [r7, #0]
 801b0a4:	4610      	mov	r0, r2
 801b0a6:	4798      	blx	r3
 801b0a8:	f107 0218 	add.w	r2, r7, #24
 801b0ac:	f107 0310 	add.w	r3, r7, #16
 801b0b0:	4611      	mov	r1, r2
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	f7ff f948 	bl	801a348 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801b0b8:	f107 0318 	add.w	r3, r7, #24
 801b0bc:	4618      	mov	r0, r3
 801b0be:	f7f0 fa5c 	bl	800b57a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801b0c2:	f107 0310 	add.w	r3, r7, #16
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	f7fe ff4d 	bl	8019f66 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b0cc:	4603      	mov	r3, r0
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d037      	beq.n	801b142 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b0d8:	f107 0320 	add.w	r3, r7, #32
 801b0dc:	4986      	ldr	r1, [pc, #536]	; (801b2f8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801b0de:	4618      	mov	r0, r3
 801b0e0:	f7ef fe93 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b0e4:	f107 0320 	add.w	r3, r7, #32
 801b0e8:	4619      	mov	r1, r3
 801b0ea:	4620      	mov	r0, r4
 801b0ec:	f7ef fef9 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b0f0:	f107 0320 	add.w	r3, r7, #32
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	f7f0 fa40 	bl	800b57a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	332c      	adds	r3, #44	; 0x2c
 801b0fe:	6879      	ldr	r1, [r7, #4]
 801b100:	4618      	mov	r0, r3
 801b102:	f7f0 fab7 	bl	800b674 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	332c      	adds	r3, #44	; 0x2c
 801b10a:	497c      	ldr	r1, [pc, #496]	; (801b2fc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801b10c:	4618      	mov	r0, r3
 801b10e:	f7f0 fac3 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b118:	683b      	ldr	r3, [r7, #0]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	335c      	adds	r3, #92	; 0x5c
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b124:	6839      	ldr	r1, [r7, #0]
 801b126:	4610      	mov	r0, r2
 801b128:	4798      	blx	r3
 801b12a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b12e:	4619      	mov	r1, r3
 801b130:	4620      	mov	r0, r4
 801b132:	f7f0 fa9f 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b13a:	4618      	mov	r0, r3
 801b13c:	f7f0 fa1d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801b140:	e056      	b.n	801b1f0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b148:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b14c:	496c      	ldr	r1, [pc, #432]	; (801b300 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801b14e:	4618      	mov	r0, r3
 801b150:	f7ef fe5b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b158:	4619      	mov	r1, r3
 801b15a:	4620      	mov	r0, r4
 801b15c:	f7ef fec1 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b164:	4618      	mov	r0, r3
 801b166:	f7f0 fa08 	bl	800b57a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b170:	683b      	ldr	r3, [r7, #0]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	335c      	adds	r3, #92	; 0x5c
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b17c:	6839      	ldr	r1, [r7, #0]
 801b17e:	4610      	mov	r0, r2
 801b180:	4798      	blx	r3
 801b182:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b186:	4619      	mov	r1, r3
 801b188:	4620      	mov	r0, r4
 801b18a:	f7f0 fa73 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b18e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b192:	4618      	mov	r0, r3
 801b194:	f7f0 f9f1 	bl	800b57a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	332c      	adds	r3, #44	; 0x2c
 801b19c:	4959      	ldr	r1, [pc, #356]	; (801b304 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f7f0 fa7a 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	332c      	adds	r3, #44	; 0x2c
 801b1a8:	6879      	ldr	r1, [r7, #4]
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f7f0 fa62 	bl	800b674 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	332c      	adds	r3, #44	; 0x2c
 801b1b4:	4954      	ldr	r1, [pc, #336]	; (801b308 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	f7f0 fa6e 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b1c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b1c6:	6839      	ldr	r1, [r7, #0]
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	f7fd faa3 	bl	8018714 <_Z10StringFromRK14MockNamedValue>
 801b1ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b1d2:	4619      	mov	r1, r3
 801b1d4:	4620      	mov	r0, r4
 801b1d6:	f7f0 fa4d 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b1da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f7f0 f9cb 	bl	800b57a <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	332c      	adds	r3, #44	; 0x2c
 801b1e8:	4948      	ldr	r1, [pc, #288]	; (801b30c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801b1ea:	4618      	mov	r0, r3
 801b1ec:	f7f0 fa54 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	332c      	adds	r3, #44	; 0x2c
 801b1f4:	4946      	ldr	r1, [pc, #280]	; (801b310 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801b1f6:	4618      	mov	r0, r3
 801b1f8:	f7f0 fa4e 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b200:	6879      	ldr	r1, [r7, #4]
 801b202:	4618      	mov	r0, r3
 801b204:	f7ff fdac 	bl	801ad60 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	332c      	adds	r3, #44	; 0x2c
 801b20c:	4941      	ldr	r1, [pc, #260]	; (801b314 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801b20e:	4618      	mov	r0, r3
 801b210:	f7f0 fa42 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	332c      	adds	r3, #44	; 0x2c
 801b218:	6879      	ldr	r1, [r7, #4]
 801b21a:	4618      	mov	r0, r3
 801b21c:	f7f0 fa2a 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	332c      	adds	r3, #44	; 0x2c
 801b224:	493a      	ldr	r1, [pc, #232]	; (801b310 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801b226:	4618      	mov	r0, r3
 801b228:	f7f0 fa36 	bl	800b698 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801b22c:	68fb      	ldr	r3, [r7, #12]
 801b22e:	332c      	adds	r3, #44	; 0x2c
 801b230:	4939      	ldr	r1, [pc, #228]	; (801b318 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801b232:	4618      	mov	r0, r3
 801b234:	f7f0 fa30 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b23e:	683b      	ldr	r3, [r7, #0]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	3360      	adds	r3, #96	; 0x60
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b24a:	6839      	ldr	r1, [r7, #0]
 801b24c:	4610      	mov	r0, r2
 801b24e:	4798      	blx	r3
 801b250:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b254:	4619      	mov	r1, r3
 801b256:	4620      	mov	r0, r4
 801b258:	f7f0 fa0c 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b25c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b260:	4618      	mov	r0, r3
 801b262:	f7f0 f98a 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	332c      	adds	r3, #44	; 0x2c
 801b26a:	492c      	ldr	r1, [pc, #176]	; (801b31c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801b26c:	4618      	mov	r0, r3
 801b26e:	f7f0 fa13 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b278:	683b      	ldr	r3, [r7, #0]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	335c      	adds	r3, #92	; 0x5c
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b284:	6839      	ldr	r1, [r7, #0]
 801b286:	4610      	mov	r0, r2
 801b288:	4798      	blx	r3
 801b28a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b28e:	4619      	mov	r1, r3
 801b290:	4620      	mov	r0, r4
 801b292:	f7f0 f9ef 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b296:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b29a:	4618      	mov	r0, r3
 801b29c:	f7f0 f96d 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	332c      	adds	r3, #44	; 0x2c
 801b2a4:	491e      	ldr	r1, [pc, #120]	; (801b320 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	f7f0 f9f6 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b2b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b2b6:	6839      	ldr	r1, [r7, #0]
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7fd fa2b 	bl	8018714 <_Z10StringFromRK14MockNamedValue>
 801b2be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b2c2:	4619      	mov	r1, r3
 801b2c4:	4620      	mov	r0, r4
 801b2c6:	f7f0 f9d5 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b2ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	f7f0 f953 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	332c      	adds	r3, #44	; 0x2c
 801b2d8:	490c      	ldr	r1, [pc, #48]	; (801b30c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7f0 f9dc 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b2e0:	f107 0310 	add.w	r3, r7, #16
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	f7fe fdd1 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
}
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	3764      	adds	r7, #100	; 0x64
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd90      	pop	{r4, r7, pc}
 801b2f4:	080261b0 	.word	0x080261b0
 801b2f8:	08024224 	.word	0x08024224
 801b2fc:	0802425c 	.word	0x0802425c
 801b300:	08024260 	.word	0x08024260
 801b304:	08024298 	.word	0x08024298
 801b308:	080242a8 	.word	0x080242a8
 801b30c:	080242b0 	.word	0x080242b0
 801b310:	08024128 	.word	0x08024128
 801b314:	080242b4 	.word	0x080242b4
 801b318:	080240bc 	.word	0x080240bc
 801b31c:	080242e8 	.word	0x080242e8
 801b320:	080242ec 	.word	0x080242ec

0801b324 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801b324:	b590      	push	{r4, r7, lr}
 801b326:	b097      	sub	sp, #92	; 0x5c
 801b328:	af00      	add	r7, sp, #0
 801b32a:	60f8      	str	r0, [r7, #12]
 801b32c:	60b9      	str	r1, [r7, #8]
 801b32e:	607a      	str	r2, [r7, #4]
 801b330:	603b      	str	r3, [r7, #0]
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	68b9      	ldr	r1, [r7, #8]
 801b336:	4618      	mov	r0, r3
 801b338:	f7ff fc8a 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801b33c:	4a90      	ldr	r2, [pc, #576]	; (801b580 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b342:	f107 0310 	add.w	r3, r7, #16
 801b346:	4618      	mov	r0, r3
 801b348:	f7fe fd8c 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801b34c:	f107 0310 	add.w	r3, r7, #16
 801b350:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b352:	6879      	ldr	r1, [r7, #4]
 801b354:	4618      	mov	r0, r3
 801b356:	f7fe ff2b 	bl	801a1b0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801b35a:	683b      	ldr	r3, [r7, #0]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	335c      	adds	r3, #92	; 0x5c
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	f107 0218 	add.w	r2, r7, #24
 801b366:	6839      	ldr	r1, [r7, #0]
 801b368:	4610      	mov	r0, r2
 801b36a:	4798      	blx	r3
 801b36c:	f107 0218 	add.w	r2, r7, #24
 801b370:	f107 0310 	add.w	r3, r7, #16
 801b374:	4611      	mov	r1, r2
 801b376:	4618      	mov	r0, r3
 801b378:	f7ff f812 	bl	801a3a0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801b37c:	f107 0318 	add.w	r3, r7, #24
 801b380:	4618      	mov	r0, r3
 801b382:	f7f0 f8fa 	bl	800b57a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801b386:	f107 0310 	add.w	r3, r7, #16
 801b38a:	4618      	mov	r0, r3
 801b38c:	f7fe fdeb 	bl	8019f66 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b390:	4603      	mov	r3, r0
 801b392:	2b00      	cmp	r3, #0
 801b394:	d037      	beq.n	801b406 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b39c:	f107 0320 	add.w	r3, r7, #32
 801b3a0:	4978      	ldr	r1, [pc, #480]	; (801b584 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	f7ef fd31 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b3a8:	f107 0320 	add.w	r3, r7, #32
 801b3ac:	4619      	mov	r1, r3
 801b3ae:	4620      	mov	r0, r4
 801b3b0:	f7ef fd97 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b3b4:	f107 0320 	add.w	r3, r7, #32
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7f0 f8de 	bl	800b57a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	332c      	adds	r3, #44	; 0x2c
 801b3c2:	6879      	ldr	r1, [r7, #4]
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f7f0 f955 	bl	800b674 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	332c      	adds	r3, #44	; 0x2c
 801b3ce:	496e      	ldr	r1, [pc, #440]	; (801b588 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	f7f0 f961 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b3dc:	683b      	ldr	r3, [r7, #0]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	335c      	adds	r3, #92	; 0x5c
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b3e8:	6839      	ldr	r1, [r7, #0]
 801b3ea:	4610      	mov	r0, r2
 801b3ec:	4798      	blx	r3
 801b3ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b3f2:	4619      	mov	r1, r3
 801b3f4:	4620      	mov	r0, r4
 801b3f6:	f7f0 f93d 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b3fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b3fe:	4618      	mov	r0, r3
 801b400:	f7f0 f8bb 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801b404:	e059      	b.n	801b4ba <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801b406:	68fb      	ldr	r3, [r7, #12]
 801b408:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b40c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b410:	495e      	ldr	r1, [pc, #376]	; (801b58c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801b412:	4618      	mov	r0, r3
 801b414:	f7ef fcf9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b41c:	4619      	mov	r1, r3
 801b41e:	4620      	mov	r0, r4
 801b420:	f7ef fd5f 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b424:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b428:	4618      	mov	r0, r3
 801b42a:	f7f0 f8a6 	bl	800b57a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b434:	683b      	ldr	r3, [r7, #0]
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	3360      	adds	r3, #96	; 0x60
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b440:	6839      	ldr	r1, [r7, #0]
 801b442:	4610      	mov	r0, r2
 801b444:	4798      	blx	r3
 801b446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b44a:	4619      	mov	r1, r3
 801b44c:	4620      	mov	r0, r4
 801b44e:	f7f0 f911 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b452:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b456:	4618      	mov	r0, r3
 801b458:	f7f0 f88f 	bl	800b57a <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	332c      	adds	r3, #44	; 0x2c
 801b460:	494b      	ldr	r1, [pc, #300]	; (801b590 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801b462:	4618      	mov	r0, r3
 801b464:	f7f0 f918 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b46e:	683b      	ldr	r3, [r7, #0]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	335c      	adds	r3, #92	; 0x5c
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b47a:	6839      	ldr	r1, [r7, #0]
 801b47c:	4610      	mov	r0, r2
 801b47e:	4798      	blx	r3
 801b480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b484:	4619      	mov	r1, r3
 801b486:	4620      	mov	r0, r4
 801b488:	f7f0 f8f4 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b48c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b490:	4618      	mov	r0, r3
 801b492:	f7f0 f872 	bl	800b57a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	332c      	adds	r3, #44	; 0x2c
 801b49a:	493e      	ldr	r1, [pc, #248]	; (801b594 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801b49c:	4618      	mov	r0, r3
 801b49e:	f7f0 f8fb 	bl	800b698 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	332c      	adds	r3, #44	; 0x2c
 801b4a6:	6879      	ldr	r1, [r7, #4]
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	f7f0 f8e3 	bl	800b674 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	332c      	adds	r3, #44	; 0x2c
 801b4b2:	4939      	ldr	r1, [pc, #228]	; (801b598 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f7f0 f8ef 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	332c      	adds	r3, #44	; 0x2c
 801b4be:	4937      	ldr	r1, [pc, #220]	; (801b59c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	f7f0 f8e9 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b4ca:	6879      	ldr	r1, [r7, #4]
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	f7ff fc47 	bl	801ad60 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	332c      	adds	r3, #44	; 0x2c
 801b4d6:	4932      	ldr	r1, [pc, #200]	; (801b5a0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801b4d8:	4618      	mov	r0, r3
 801b4da:	f7f0 f8dd 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801b4de:	68fb      	ldr	r3, [r7, #12]
 801b4e0:	332c      	adds	r3, #44	; 0x2c
 801b4e2:	6879      	ldr	r1, [r7, #4]
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	f7f0 f8c5 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	332c      	adds	r3, #44	; 0x2c
 801b4ee:	492b      	ldr	r1, [pc, #172]	; (801b59c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	f7f0 f8d1 	bl	800b698 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	332c      	adds	r3, #44	; 0x2c
 801b4fa:	492a      	ldr	r1, [pc, #168]	; (801b5a4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	f7f0 f8cb 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	3360      	adds	r3, #96	; 0x60
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b514:	6839      	ldr	r1, [r7, #0]
 801b516:	4610      	mov	r0, r2
 801b518:	4798      	blx	r3
 801b51a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b51e:	4619      	mov	r1, r3
 801b520:	4620      	mov	r0, r4
 801b522:	f7f0 f8a7 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b526:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b52a:	4618      	mov	r0, r3
 801b52c:	f7f0 f825 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	332c      	adds	r3, #44	; 0x2c
 801b534:	491c      	ldr	r1, [pc, #112]	; (801b5a8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801b536:	4618      	mov	r0, r3
 801b538:	f7f0 f8ae 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b542:	683b      	ldr	r3, [r7, #0]
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	335c      	adds	r3, #92	; 0x5c
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801b54e:	6839      	ldr	r1, [r7, #0]
 801b550:	4610      	mov	r0, r2
 801b552:	4798      	blx	r3
 801b554:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b558:	4619      	mov	r1, r3
 801b55a:	4620      	mov	r0, r4
 801b55c:	f7f0 f88a 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b560:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b564:	4618      	mov	r0, r3
 801b566:	f7f0 f808 	bl	800b57a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801b56a:	f107 0310 	add.w	r3, r7, #16
 801b56e:	4618      	mov	r0, r3
 801b570:	f7fe fc8c 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
}
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	4618      	mov	r0, r3
 801b578:	375c      	adds	r7, #92	; 0x5c
 801b57a:	46bd      	mov	sp, r7
 801b57c:	bd90      	pop	{r4, r7, pc}
 801b57e:	bf00      	nop
 801b580:	08026184 	.word	0x08026184
 801b584:	080242f0 	.word	0x080242f0
 801b588:	0802425c 	.word	0x0802425c
 801b58c:	08024330 	.word	0x08024330
 801b590:	0802435c 	.word	0x0802435c
 801b594:	08024298 	.word	0x08024298
 801b598:	08024374 	.word	0x08024374
 801b59c:	08024128 	.word	0x08024128
 801b5a0:	08024378 	.word	0x08024378
 801b5a4:	080240bc 	.word	0x080240bc
 801b5a8:	080242e8 	.word	0x080242e8

0801b5ac <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b5ac:	b590      	push	{r4, r7, lr}
 801b5ae:	b08b      	sub	sp, #44	; 0x2c
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	60f8      	str	r0, [r7, #12]
 801b5b4:	60b9      	str	r1, [r7, #8]
 801b5b6:	607a      	str	r2, [r7, #4]
 801b5b8:	603b      	str	r3, [r7, #0]
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	68b9      	ldr	r1, [r7, #8]
 801b5be:	4618      	mov	r0, r3
 801b5c0:	f7ff fb46 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801b5c4:	4a30      	ldr	r2, [pc, #192]	; (801b688 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801b5ca:	f107 0310 	add.w	r3, r7, #16
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7fe fc48 	bl	8019e64 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801b5d4:	f107 0310 	add.w	r3, r7, #16
 801b5d8:	683a      	ldr	r2, [r7, #0]
 801b5da:	6879      	ldr	r1, [r7, #4]
 801b5dc:	4618      	mov	r0, r3
 801b5de:	f7fe fde7 	bl	801a1b0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b5e8:	f107 0318 	add.w	r3, r7, #24
 801b5ec:	4927      	ldr	r1, [pc, #156]	; (801b68c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801b5ee:	4618      	mov	r0, r3
 801b5f0:	f7ef fc0b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b5f4:	f107 0318 	add.w	r3, r7, #24
 801b5f8:	4619      	mov	r1, r3
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	f7ef fc71 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b600:	f107 0318 	add.w	r3, r7, #24
 801b604:	4618      	mov	r0, r3
 801b606:	f7ef ffb8 	bl	800b57a <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	332c      	adds	r3, #44	; 0x2c
 801b60e:	6879      	ldr	r1, [r7, #4]
 801b610:	4618      	mov	r0, r3
 801b612:	f7f0 f82f 	bl	800b674 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	332c      	adds	r3, #44	; 0x2c
 801b61a:	491d      	ldr	r1, [pc, #116]	; (801b690 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801b61c:	4618      	mov	r0, r3
 801b61e:	f7f0 f83b 	bl	800b698 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	683a      	ldr	r2, [r7, #0]
 801b626:	6879      	ldr	r1, [r7, #4]
 801b628:	4618      	mov	r0, r3
 801b62a:	f7ff fb99 	bl	801ad60 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	332c      	adds	r3, #44	; 0x2c
 801b632:	4918      	ldr	r1, [pc, #96]	; (801b694 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801b634:	4618      	mov	r0, r3
 801b636:	f7f0 f82f 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801b63a:	68fb      	ldr	r3, [r7, #12]
 801b63c:	332c      	adds	r3, #44	; 0x2c
 801b63e:	4916      	ldr	r1, [pc, #88]	; (801b698 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801b640:	4618      	mov	r0, r3
 801b642:	f7f0 f829 	bl	800b698 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b64c:	f107 0320 	add.w	r3, r7, #32
 801b650:	f107 0210 	add.w	r2, r7, #16
 801b654:	4611      	mov	r1, r2
 801b656:	4618      	mov	r0, r3
 801b658:	f7ff f9bc 	bl	801a9d4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801b65c:	f107 0320 	add.w	r3, r7, #32
 801b660:	4619      	mov	r1, r3
 801b662:	4620      	mov	r0, r4
 801b664:	f7f0 f806 	bl	800b674 <_ZN12SimpleStringpLERKS_>
 801b668:	f107 0320 	add.w	r3, r7, #32
 801b66c:	4618      	mov	r0, r3
 801b66e:	f7ef ff84 	bl	800b57a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801b672:	f107 0310 	add.w	r3, r7, #16
 801b676:	4618      	mov	r0, r3
 801b678:	f7fe fc08 	bl	8019e8c <_ZN21MockExpectedCallsListD1Ev>
}
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	4618      	mov	r0, r3
 801b680:	372c      	adds	r7, #44	; 0x2c
 801b682:	46bd      	mov	sp, r7
 801b684:	bd90      	pop	{r4, r7, pc}
 801b686:	bf00      	nop
 801b688:	08026158 	.word	0x08026158
 801b68c:	080243b4 	.word	0x080243b4
 801b690:	080243e4 	.word	0x080243e4
 801b694:	080243f8 	.word	0x080243f8
 801b698:	080240bc 	.word	0x080240bc

0801b69c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801b69c:	b590      	push	{r4, r7, lr}
 801b69e:	b087      	sub	sp, #28
 801b6a0:	af00      	add	r7, sp, #0
 801b6a2:	60f8      	str	r0, [r7, #12]
 801b6a4:	60b9      	str	r1, [r7, #8]
 801b6a6:	607a      	str	r2, [r7, #4]
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	68b9      	ldr	r1, [r7, #8]
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7ff facf 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801b6b2:	4a10      	ldr	r2, [pc, #64]	; (801b6f4 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b6be:	6878      	ldr	r0, [r7, #4]
 801b6c0:	f7ef ff2e 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801b6c4:	4602      	mov	r2, r0
 801b6c6:	f107 0310 	add.w	r3, r7, #16
 801b6ca:	490b      	ldr	r1, [pc, #44]	; (801b6f8 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f7f0 fc5b 	bl	800bf88 <_Z16StringFromFormatPKcz>
 801b6d2:	f107 0310 	add.w	r3, r7, #16
 801b6d6:	4619      	mov	r1, r3
 801b6d8:	4620      	mov	r0, r4
 801b6da:	f7ef fc02 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b6de:	f107 0310 	add.w	r3, r7, #16
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7ef ff49 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	371c      	adds	r7, #28
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd90      	pop	{r4, r7, pc}
 801b6f2:	bf00      	nop
 801b6f4:	0802612c 	.word	0x0802612c
 801b6f8:	08024424 	.word	0x08024424

0801b6fc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801b6fc:	b590      	push	{r4, r7, lr}
 801b6fe:	b087      	sub	sp, #28
 801b700:	af00      	add	r7, sp, #0
 801b702:	60f8      	str	r0, [r7, #12]
 801b704:	60b9      	str	r1, [r7, #8]
 801b706:	607a      	str	r2, [r7, #4]
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	68b9      	ldr	r1, [r7, #8]
 801b70c:	4618      	mov	r0, r3
 801b70e:	f7ff fa9f 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801b712:	4a10      	ldr	r2, [pc, #64]	; (801b754 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b71e:	6878      	ldr	r0, [r7, #4]
 801b720:	f7ef fefe 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801b724:	4602      	mov	r2, r0
 801b726:	f107 0310 	add.w	r3, r7, #16
 801b72a:	490b      	ldr	r1, [pc, #44]	; (801b758 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801b72c:	4618      	mov	r0, r3
 801b72e:	f7f0 fc2b 	bl	800bf88 <_Z16StringFromFormatPKcz>
 801b732:	f107 0310 	add.w	r3, r7, #16
 801b736:	4619      	mov	r1, r3
 801b738:	4620      	mov	r0, r4
 801b73a:	f7ef fbd2 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b73e:	f107 0310 	add.w	r3, r7, #16
 801b742:	4618      	mov	r0, r3
 801b744:	f7ef ff19 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	4618      	mov	r0, r3
 801b74c:	371c      	adds	r7, #28
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd90      	pop	{r4, r7, pc}
 801b752:	bf00      	nop
 801b754:	08026100 	.word	0x08026100
 801b758:	0802447c 	.word	0x0802447c

0801b75c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b75c:	b590      	push	{r4, r7, lr}
 801b75e:	b087      	sub	sp, #28
 801b760:	af00      	add	r7, sp, #0
 801b762:	60f8      	str	r0, [r7, #12]
 801b764:	60b9      	str	r1, [r7, #8]
 801b766:	607a      	str	r2, [r7, #4]
 801b768:	603b      	str	r3, [r7, #0]
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	68b9      	ldr	r1, [r7, #8]
 801b76e:	4618      	mov	r0, r3
 801b770:	f7ff fa6e 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801b774:	4a12      	ldr	r2, [pc, #72]	; (801b7c0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	f7ef fecd 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801b786:	4602      	mov	r2, r0
 801b788:	f107 0010 	add.w	r0, r7, #16
 801b78c:	683b      	ldr	r3, [r7, #0]
 801b78e:	490d      	ldr	r1, [pc, #52]	; (801b7c4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801b790:	f7f0 fbfa 	bl	800bf88 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801b794:	f107 0310 	add.w	r3, r7, #16
 801b798:	4619      	mov	r1, r3
 801b79a:	4620      	mov	r0, r4
 801b79c:	f7ef fba1 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b7a0:	f107 0310 	add.w	r3, r7, #16
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f7ef fee8 	bl	800b57a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b7ae:	6879      	ldr	r1, [r7, #4]
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	f7ff fad5 	bl	801ad60 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	371c      	adds	r7, #28
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	bd90      	pop	{r4, r7, pc}
 801b7c0:	080260d4 	.word	0x080260d4
 801b7c4:	080244cc 	.word	0x080244cc

0801b7c8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b7c8:	b590      	push	{r4, r7, lr}
 801b7ca:	b087      	sub	sp, #28
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	60f8      	str	r0, [r7, #12]
 801b7d0:	60b9      	str	r1, [r7, #8]
 801b7d2:	607a      	str	r2, [r7, #4]
 801b7d4:	603b      	str	r3, [r7, #0]
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	68b9      	ldr	r1, [r7, #8]
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f7ff fa38 	bl	801ac50 <_ZN11MockFailureC1EP10UtestShell>
 801b7e0:	4a12      	ldr	r2, [pc, #72]	; (801b82c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b7ec:	6878      	ldr	r0, [r7, #4]
 801b7ee:	f7ef fe97 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801b7f2:	4602      	mov	r2, r0
 801b7f4:	f107 0310 	add.w	r3, r7, #16
 801b7f8:	490d      	ldr	r1, [pc, #52]	; (801b830 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7f0 fbc4 	bl	800bf88 <_Z16StringFromFormatPKcz>
 801b800:	f107 0310 	add.w	r3, r7, #16
 801b804:	4619      	mov	r1, r3
 801b806:	4620      	mov	r0, r4
 801b808:	f7ef fb6b 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b80c:	f107 0310 	add.w	r3, r7, #16
 801b810:	4618      	mov	r0, r3
 801b812:	f7ef feb2 	bl	800b57a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	683a      	ldr	r2, [r7, #0]
 801b81a:	6879      	ldr	r1, [r7, #4]
 801b81c:	4618      	mov	r0, r3
 801b81e:	f7ff fa9f 	bl	801ad60 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	4618      	mov	r0, r3
 801b826:	371c      	adds	r7, #28
 801b828:	46bd      	mov	sp, r7
 801b82a:	bd90      	pop	{r4, r7, pc}
 801b82c:	080260a8 	.word	0x080260a8
 801b830:	08024530 	.word	0x08024530

0801b834 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801b834:	b480      	push	{r7}
 801b836:	b083      	sub	sp, #12
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801b83c:	4a04      	ldr	r2, [pc, #16]	; (801b850 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	6013      	str	r3, [r2, #0]
}
 801b842:	bf00      	nop
 801b844:	370c      	adds	r7, #12
 801b846:	46bd      	mov	sp, r7
 801b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b84c:	4770      	bx	lr
 801b84e:	bf00      	nop
 801b850:	20000d60 	.word	0x20000d60

0801b854 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801b854:	b580      	push	{r7, lr}
 801b856:	b082      	sub	sp, #8
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
 801b85c:	6039      	str	r1, [r7, #0]
 801b85e:	4a10      	ldr	r2, [pc, #64]	; (801b8a0 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	601a      	str	r2, [r3, #0]
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	3304      	adds	r3, #4
 801b868:	6839      	ldr	r1, [r7, #0]
 801b86a:	4618      	mov	r0, r3
 801b86c:	f7ef fb21 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	330c      	adds	r3, #12
 801b874:	490b      	ldr	r1, [pc, #44]	; (801b8a4 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801b876:	4618      	mov	r0, r3
 801b878:	f7ef fac7 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	2200      	movs	r2, #0
 801b880:	629a      	str	r2, [r3, #40]	; 0x28
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	2200      	movs	r2, #0
 801b886:	62da      	str	r2, [r3, #44]	; 0x2c
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	2200      	movs	r2, #0
 801b88c:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	2200      	movs	r2, #0
 801b892:	619a      	str	r2, [r3, #24]
}
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	4618      	mov	r0, r3
 801b898:	3708      	adds	r7, #8
 801b89a:	46bd      	mov	sp, r7
 801b89c:	bd80      	pop	{r7, pc}
 801b89e:	bf00      	nop
 801b8a0:	08026930 	.word	0x08026930
 801b8a4:	08024580 	.word	0x08024580

0801b8a8 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b082      	sub	sp, #8
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	6078      	str	r0, [r7, #4]
 801b8b0:	4a08      	ldr	r2, [pc, #32]	; (801b8d4 <_ZN14MockNamedValueD1Ev+0x2c>)
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	601a      	str	r2, [r3, #0]
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	330c      	adds	r3, #12
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7ef fe5d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	3304      	adds	r3, #4
 801b8c4:	4618      	mov	r0, r3
 801b8c6:	f7ef fe58 	bl	800b57a <_ZN12SimpleStringD1Ev>
{
}
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	3708      	adds	r7, #8
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	bd80      	pop	{r7, pc}
 801b8d4:	08026930 	.word	0x08026930

0801b8d8 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	b082      	sub	sp, #8
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	6078      	str	r0, [r7, #4]
}
 801b8e0:	6878      	ldr	r0, [r7, #4]
 801b8e2:	f7ff ffe1 	bl	801b8a8 <_ZN14MockNamedValueD1Ev>
 801b8e6:	2138      	movs	r1, #56	; 0x38
 801b8e8:	6878      	ldr	r0, [r7, #4]
 801b8ea:	f7ec fedf 	bl	80086ac <_ZdlPvj>
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	3708      	adds	r7, #8
 801b8f4:	46bd      	mov	sp, r7
 801b8f6:	bd80      	pop	{r7, pc}

0801b8f8 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801b8f8:	b590      	push	{r4, r7, lr}
 801b8fa:	b085      	sub	sp, #20
 801b8fc:	af00      	add	r7, sp, #0
 801b8fe:	6078      	str	r0, [r7, #4]
 801b900:	460b      	mov	r3, r1
 801b902:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	f103 040c 	add.w	r4, r3, #12
 801b90a:	f107 0308 	add.w	r3, r7, #8
 801b90e:	490b      	ldr	r1, [pc, #44]	; (801b93c <_ZN14MockNamedValue8setValueEb+0x44>)
 801b910:	4618      	mov	r0, r3
 801b912:	f7ef fa7a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b916:	f107 0308 	add.w	r3, r7, #8
 801b91a:	4619      	mov	r1, r3
 801b91c:	4620      	mov	r0, r4
 801b91e:	f7ef fae0 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b922:	f107 0308 	add.w	r3, r7, #8
 801b926:	4618      	mov	r0, r3
 801b928:	f7ef fe27 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	78fa      	ldrb	r2, [r7, #3]
 801b930:	761a      	strb	r2, [r3, #24]
}
 801b932:	bf00      	nop
 801b934:	3714      	adds	r7, #20
 801b936:	46bd      	mov	sp, r7
 801b938:	bd90      	pop	{r4, r7, pc}
 801b93a:	bf00      	nop
 801b93c:	08024584 	.word	0x08024584

0801b940 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801b940:	b590      	push	{r4, r7, lr}
 801b942:	b085      	sub	sp, #20
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
 801b948:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	f103 040c 	add.w	r4, r3, #12
 801b950:	f107 0308 	add.w	r3, r7, #8
 801b954:	490a      	ldr	r1, [pc, #40]	; (801b980 <_ZN14MockNamedValue8setValueEj+0x40>)
 801b956:	4618      	mov	r0, r3
 801b958:	f7ef fa57 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b95c:	f107 0308 	add.w	r3, r7, #8
 801b960:	4619      	mov	r1, r3
 801b962:	4620      	mov	r0, r4
 801b964:	f7ef fabd 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b968:	f107 0308 	add.w	r3, r7, #8
 801b96c:	4618      	mov	r0, r3
 801b96e:	f7ef fe04 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	683a      	ldr	r2, [r7, #0]
 801b976:	619a      	str	r2, [r3, #24]
}
 801b978:	bf00      	nop
 801b97a:	3714      	adds	r7, #20
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bd90      	pop	{r4, r7, pc}
 801b980:	0802458c 	.word	0x0802458c

0801b984 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801b984:	b590      	push	{r4, r7, lr}
 801b986:	b085      	sub	sp, #20
 801b988:	af00      	add	r7, sp, #0
 801b98a:	6078      	str	r0, [r7, #4]
 801b98c:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	f103 040c 	add.w	r4, r3, #12
 801b994:	f107 0308 	add.w	r3, r7, #8
 801b998:	490a      	ldr	r1, [pc, #40]	; (801b9c4 <_ZN14MockNamedValue8setValueEi+0x40>)
 801b99a:	4618      	mov	r0, r3
 801b99c:	f7ef fa35 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b9a0:	f107 0308 	add.w	r3, r7, #8
 801b9a4:	4619      	mov	r1, r3
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f7ef fa9b 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b9ac:	f107 0308 	add.w	r3, r7, #8
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	f7ef fde2 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	683a      	ldr	r2, [r7, #0]
 801b9ba:	619a      	str	r2, [r3, #24]
}
 801b9bc:	bf00      	nop
 801b9be:	3714      	adds	r7, #20
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	bd90      	pop	{r4, r7, pc}
 801b9c4:	08024580 	.word	0x08024580

0801b9c8 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801b9c8:	b590      	push	{r4, r7, lr}
 801b9ca:	b085      	sub	sp, #20
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
 801b9d0:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	f103 040c 	add.w	r4, r3, #12
 801b9d8:	f107 0308 	add.w	r3, r7, #8
 801b9dc:	490a      	ldr	r1, [pc, #40]	; (801ba08 <_ZN14MockNamedValue8setValueEl+0x40>)
 801b9de:	4618      	mov	r0, r3
 801b9e0:	f7ef fa13 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801b9e4:	f107 0308 	add.w	r3, r7, #8
 801b9e8:	4619      	mov	r1, r3
 801b9ea:	4620      	mov	r0, r4
 801b9ec:	f7ef fa79 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801b9f0:	f107 0308 	add.w	r3, r7, #8
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f7ef fdc0 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	683a      	ldr	r2, [r7, #0]
 801b9fe:	619a      	str	r2, [r3, #24]
}
 801ba00:	bf00      	nop
 801ba02:	3714      	adds	r7, #20
 801ba04:	46bd      	mov	sp, r7
 801ba06:	bd90      	pop	{r4, r7, pc}
 801ba08:	0802459c 	.word	0x0802459c

0801ba0c <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801ba0c:	b590      	push	{r4, r7, lr}
 801ba0e:	b085      	sub	sp, #20
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	6078      	str	r0, [r7, #4]
 801ba14:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	f103 040c 	add.w	r4, r3, #12
 801ba1c:	f107 0308 	add.w	r3, r7, #8
 801ba20:	490a      	ldr	r1, [pc, #40]	; (801ba4c <_ZN14MockNamedValue8setValueEm+0x40>)
 801ba22:	4618      	mov	r0, r3
 801ba24:	f7ef f9f1 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ba28:	f107 0308 	add.w	r3, r7, #8
 801ba2c:	4619      	mov	r1, r3
 801ba2e:	4620      	mov	r0, r4
 801ba30:	f7ef fa57 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801ba34:	f107 0308 	add.w	r3, r7, #8
 801ba38:	4618      	mov	r0, r3
 801ba3a:	f7ef fd9e 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	683a      	ldr	r2, [r7, #0]
 801ba42:	619a      	str	r2, [r3, #24]
}
 801ba44:	bf00      	nop
 801ba46:	3714      	adds	r7, #20
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	bd90      	pop	{r4, r7, pc}
 801ba4c:	080245a8 	.word	0x080245a8

0801ba50 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801ba50:	b5b0      	push	{r4, r5, r7, lr}
 801ba52:	b086      	sub	sp, #24
 801ba54:	af02      	add	r7, sp, #8
 801ba56:	60f8      	str	r0, [r7, #12]
 801ba58:	1d3b      	adds	r3, r7, #4
 801ba5a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801ba5e:	f7f6 fdb7 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801ba62:	4604      	mov	r4, r0
 801ba64:	6823      	ldr	r3, [r4, #0]
 801ba66:	3368      	adds	r3, #104	; 0x68
 801ba68:	681d      	ldr	r5, [r3, #0]
 801ba6a:	f7f6 fdc1 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ba6e:	4603      	mov	r3, r0
 801ba70:	9300      	str	r3, [sp, #0]
 801ba72:	2367      	movs	r3, #103	; 0x67
 801ba74:	4a03      	ldr	r2, [pc, #12]	; (801ba84 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801ba76:	4904      	ldr	r1, [pc, #16]	; (801ba88 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801ba78:	4620      	mov	r0, r4
 801ba7a:	47a8      	blx	r5
}
 801ba7c:	bf00      	nop
 801ba7e:	3710      	adds	r7, #16
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bdb0      	pop	{r4, r5, r7, pc}
 801ba84:	080245bc 	.word	0x080245bc
 801ba88:	080245d8 	.word	0x080245d8

0801ba8c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801ba8c:	b5b0      	push	{r4, r5, r7, lr}
 801ba8e:	b086      	sub	sp, #24
 801ba90:	af02      	add	r7, sp, #8
 801ba92:	60f8      	str	r0, [r7, #12]
 801ba94:	1d3b      	adds	r3, r7, #4
 801ba96:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801ba9a:	f7f6 fd99 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801ba9e:	4604      	mov	r4, r0
 801baa0:	6823      	ldr	r3, [r4, #0]
 801baa2:	3368      	adds	r3, #104	; 0x68
 801baa4:	681d      	ldr	r5, [r3, #0]
 801baa6:	f7f6 fda3 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801baaa:	4603      	mov	r3, r0
 801baac:	9300      	str	r3, [sp, #0]
 801baae:	236c      	movs	r3, #108	; 0x6c
 801bab0:	4a03      	ldr	r2, [pc, #12]	; (801bac0 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801bab2:	4904      	ldr	r1, [pc, #16]	; (801bac4 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801bab4:	4620      	mov	r0, r4
 801bab6:	47a8      	blx	r5
}
 801bab8:	bf00      	nop
 801baba:	3710      	adds	r7, #16
 801babc:	46bd      	mov	sp, r7
 801babe:	bdb0      	pop	{r4, r5, r7, pc}
 801bac0:	080245bc 	.word	0x080245bc
 801bac4:	080245f8 	.word	0x080245f8

0801bac8 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801bac8:	b580      	push	{r7, lr}
 801baca:	b084      	sub	sp, #16
 801bacc:	af00      	add	r7, sp, #0
 801bace:	60f8      	str	r0, [r7, #12]
 801bad0:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	3328      	adds	r3, #40	; 0x28
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801baf0 <_ZN14MockNamedValue8setValueEd+0x28>
 801bae0:	ed97 0b00 	vldr	d0, [r7]
 801bae4:	68f8      	ldr	r0, [r7, #12]
 801bae6:	4798      	blx	r3
}
 801bae8:	bf00      	nop
 801baea:	3710      	adds	r7, #16
 801baec:	46bd      	mov	sp, r7
 801baee:	bd80      	pop	{r7, pc}
 801baf0:	47ae147b 	.word	0x47ae147b
 801baf4:	3f747ae1 	.word	0x3f747ae1

0801baf8 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801baf8:	b590      	push	{r4, r7, lr}
 801bafa:	b089      	sub	sp, #36	; 0x24
 801bafc:	af00      	add	r7, sp, #0
 801bafe:	6178      	str	r0, [r7, #20]
 801bb00:	ed87 0b02 	vstr	d0, [r7, #8]
 801bb04:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801bb08:	697b      	ldr	r3, [r7, #20]
 801bb0a:	f103 040c 	add.w	r4, r3, #12
 801bb0e:	f107 0318 	add.w	r3, r7, #24
 801bb12:	490e      	ldr	r1, [pc, #56]	; (801bb4c <_ZN14MockNamedValue8setValueEdd+0x54>)
 801bb14:	4618      	mov	r0, r3
 801bb16:	f7ef f978 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bb1a:	f107 0318 	add.w	r3, r7, #24
 801bb1e:	4619      	mov	r1, r3
 801bb20:	4620      	mov	r0, r4
 801bb22:	f7ef f9de 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801bb26:	f107 0318 	add.w	r3, r7, #24
 801bb2a:	4618      	mov	r0, r3
 801bb2c:	f7ef fd25 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801bb30:	6979      	ldr	r1, [r7, #20]
 801bb32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801bb36:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801bb3a:	6979      	ldr	r1, [r7, #20]
 801bb3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb40:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801bb44:	bf00      	nop
 801bb46:	3724      	adds	r7, #36	; 0x24
 801bb48:	46bd      	mov	sp, r7
 801bb4a:	bd90      	pop	{r4, r7, pc}
 801bb4c:	08024624 	.word	0x08024624

0801bb50 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801bb50:	b590      	push	{r4, r7, lr}
 801bb52:	b085      	sub	sp, #20
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	6078      	str	r0, [r7, #4]
 801bb58:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	f103 040c 	add.w	r4, r3, #12
 801bb60:	f107 0308 	add.w	r3, r7, #8
 801bb64:	490a      	ldr	r1, [pc, #40]	; (801bb90 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801bb66:	4618      	mov	r0, r3
 801bb68:	f7ef f94f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bb6c:	f107 0308 	add.w	r3, r7, #8
 801bb70:	4619      	mov	r1, r3
 801bb72:	4620      	mov	r0, r4
 801bb74:	f7ef f9b5 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801bb78:	f107 0308 	add.w	r3, r7, #8
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	f7ef fcfc 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	683a      	ldr	r2, [r7, #0]
 801bb86:	619a      	str	r2, [r3, #24]
}
 801bb88:	bf00      	nop
 801bb8a:	3714      	adds	r7, #20
 801bb8c:	46bd      	mov	sp, r7
 801bb8e:	bd90      	pop	{r4, r7, pc}
 801bb90:	0802462c 	.word	0x0802462c

0801bb94 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801bb94:	b590      	push	{r4, r7, lr}
 801bb96:	b085      	sub	sp, #20
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	6078      	str	r0, [r7, #4]
 801bb9c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	f103 040c 	add.w	r4, r3, #12
 801bba4:	f107 0308 	add.w	r3, r7, #8
 801bba8:	490a      	ldr	r1, [pc, #40]	; (801bbd4 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801bbaa:	4618      	mov	r0, r3
 801bbac:	f7ef f92d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bbb0:	f107 0308 	add.w	r3, r7, #8
 801bbb4:	4619      	mov	r1, r3
 801bbb6:	4620      	mov	r0, r4
 801bbb8:	f7ef f993 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801bbbc:	f107 0308 	add.w	r3, r7, #8
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	f7ef fcda 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	683a      	ldr	r2, [r7, #0]
 801bbca:	619a      	str	r2, [r3, #24]
}
 801bbcc:	bf00      	nop
 801bbce:	3714      	adds	r7, #20
 801bbd0:	46bd      	mov	sp, r7
 801bbd2:	bd90      	pop	{r4, r7, pc}
 801bbd4:	08024634 	.word	0x08024634

0801bbd8 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801bbd8:	b590      	push	{r4, r7, lr}
 801bbda:	b085      	sub	sp, #20
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
 801bbe0:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	f103 040c 	add.w	r4, r3, #12
 801bbe8:	f107 0308 	add.w	r3, r7, #8
 801bbec:	490a      	ldr	r1, [pc, #40]	; (801bc18 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801bbee:	4618      	mov	r0, r3
 801bbf0:	f7ef f90b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bbf4:	f107 0308 	add.w	r3, r7, #8
 801bbf8:	4619      	mov	r1, r3
 801bbfa:	4620      	mov	r0, r4
 801bbfc:	f7ef f971 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801bc00:	f107 0308 	add.w	r3, r7, #8
 801bc04:	4618      	mov	r0, r3
 801bc06:	f7ef fcb8 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	683a      	ldr	r2, [r7, #0]
 801bc0e:	619a      	str	r2, [r3, #24]
}
 801bc10:	bf00      	nop
 801bc12:	3714      	adds	r7, #20
 801bc14:	46bd      	mov	sp, r7
 801bc16:	bd90      	pop	{r4, r7, pc}
 801bc18:	08024640 	.word	0x08024640

0801bc1c <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801bc1c:	b590      	push	{r4, r7, lr}
 801bc1e:	b085      	sub	sp, #20
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
 801bc24:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	f103 040c 	add.w	r4, r3, #12
 801bc2c:	f107 0308 	add.w	r3, r7, #8
 801bc30:	490a      	ldr	r1, [pc, #40]	; (801bc5c <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801bc32:	4618      	mov	r0, r3
 801bc34:	f7ef f8e9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bc38:	f107 0308 	add.w	r3, r7, #8
 801bc3c:	4619      	mov	r1, r3
 801bc3e:	4620      	mov	r0, r4
 801bc40:	f7ef f94f 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801bc44:	f107 0308 	add.w	r3, r7, #8
 801bc48:	4618      	mov	r0, r3
 801bc4a:	f7ef fc96 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	683a      	ldr	r2, [r7, #0]
 801bc52:	619a      	str	r2, [r3, #24]
}
 801bc54:	bf00      	nop
 801bc56:	3714      	adds	r7, #20
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	bd90      	pop	{r4, r7, pc}
 801bc5c:	0802464c 	.word	0x0802464c

0801bc60 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801bc60:	b590      	push	{r4, r7, lr}
 801bc62:	b087      	sub	sp, #28
 801bc64:	af00      	add	r7, sp, #0
 801bc66:	60f8      	str	r0, [r7, #12]
 801bc68:	60b9      	str	r1, [r7, #8]
 801bc6a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	f103 040c 	add.w	r4, r3, #12
 801bc72:	f107 0310 	add.w	r3, r7, #16
 801bc76:	490c      	ldr	r1, [pc, #48]	; (801bca8 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801bc78:	4618      	mov	r0, r3
 801bc7a:	f7ef f8c6 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bc7e:	f107 0310 	add.w	r3, r7, #16
 801bc82:	4619      	mov	r1, r3
 801bc84:	4620      	mov	r0, r4
 801bc86:	f7ef f92c 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801bc8a:	f107 0310 	add.w	r3, r7, #16
 801bc8e:	4618      	mov	r0, r3
 801bc90:	f7ef fc73 	bl	800b57a <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	68ba      	ldr	r2, [r7, #8]
 801bc98:	619a      	str	r2, [r3, #24]
    size_ = size;
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	687a      	ldr	r2, [r7, #4]
 801bc9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bca0:	bf00      	nop
 801bca2:	371c      	adds	r7, #28
 801bca4:	46bd      	mov	sp, r7
 801bca6:	bd90      	pop	{r4, r7, pc}
 801bca8:	08024658 	.word	0x08024658

0801bcac <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b084      	sub	sp, #16
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	60f8      	str	r0, [r7, #12]
 801bcb4:	60b9      	str	r1, [r7, #8]
 801bcb6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	330c      	adds	r3, #12
 801bcbc:	68b9      	ldr	r1, [r7, #8]
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	f7ef f90f 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	687a      	ldr	r2, [r7, #4]
 801bcc8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801bcca:	4b11      	ldr	r3, [pc, #68]	; (801bd10 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d019      	beq.n	801bd06 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801bcd2:	4b0f      	ldr	r3, [pc, #60]	; (801bd10 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bcd4:	681a      	ldr	r2, [r3, #0]
 801bcd6:	4b0e      	ldr	r3, [pc, #56]	; (801bd10 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	3314      	adds	r3, #20
 801bcde:	681b      	ldr	r3, [r3, #0]
 801bce0:	68b9      	ldr	r1, [r7, #8]
 801bce2:	4610      	mov	r0, r2
 801bce4:	4798      	blx	r3
 801bce6:	4602      	mov	r2, r0
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801bcec:	4b08      	ldr	r3, [pc, #32]	; (801bd10 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bcee:	681a      	ldr	r2, [r3, #0]
 801bcf0:	4b07      	ldr	r3, [pc, #28]	; (801bd10 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	3318      	adds	r3, #24
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	68b9      	ldr	r1, [r7, #8]
 801bcfc:	4610      	mov	r0, r2
 801bcfe:	4798      	blx	r3
 801bd00:	4602      	mov	r2, r0
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801bd06:	bf00      	nop
 801bd08:	3710      	adds	r7, #16
 801bd0a:	46bd      	mov	sp, r7
 801bd0c:	bd80      	pop	{r7, pc}
 801bd0e:	bf00      	nop
 801bd10:	20000d60 	.word	0x20000d60

0801bd14 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801bd14:	b580      	push	{r7, lr}
 801bd16:	b084      	sub	sp, #16
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	60f8      	str	r0, [r7, #12]
 801bd1c:	60b9      	str	r1, [r7, #8]
 801bd1e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	330c      	adds	r3, #12
 801bd24:	68b9      	ldr	r1, [r7, #8]
 801bd26:	4618      	mov	r0, r3
 801bd28:	f7ef f8db 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	687a      	ldr	r2, [r7, #4]
 801bd30:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801bd32:	4b11      	ldr	r3, [pc, #68]	; (801bd78 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bd34:	681b      	ldr	r3, [r3, #0]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d019      	beq.n	801bd6e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801bd3a:	4b0f      	ldr	r3, [pc, #60]	; (801bd78 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bd3c:	681a      	ldr	r2, [r3, #0]
 801bd3e:	4b0e      	ldr	r3, [pc, #56]	; (801bd78 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	3314      	adds	r3, #20
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	68b9      	ldr	r1, [r7, #8]
 801bd4a:	4610      	mov	r0, r2
 801bd4c:	4798      	blx	r3
 801bd4e:	4602      	mov	r2, r0
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801bd54:	4b08      	ldr	r3, [pc, #32]	; (801bd78 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bd56:	681a      	ldr	r2, [r3, #0]
 801bd58:	4b07      	ldr	r3, [pc, #28]	; (801bd78 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	3318      	adds	r3, #24
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	68b9      	ldr	r1, [r7, #8]
 801bd64:	4610      	mov	r0, r2
 801bd66:	4798      	blx	r3
 801bd68:	4602      	mov	r2, r0
 801bd6a:	68fb      	ldr	r3, [r7, #12]
 801bd6c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801bd6e:	bf00      	nop
 801bd70:	3710      	adds	r7, #16
 801bd72:	46bd      	mov	sp, r7
 801bd74:	bd80      	pop	{r7, pc}
 801bd76:	bf00      	nop
 801bd78:	20000d60 	.word	0x20000d60

0801bd7c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801bd7c:	b480      	push	{r7}
 801bd7e:	b083      	sub	sp, #12
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
 801bd84:	6039      	str	r1, [r7, #0]
    size_ = size;
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	683a      	ldr	r2, [r7, #0]
 801bd8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bd8c:	bf00      	nop
 801bd8e:	370c      	adds	r7, #12
 801bd90:	46bd      	mov	sp, r7
 801bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd96:	4770      	bx	lr

0801bd98 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801bd98:	b590      	push	{r4, r7, lr}
 801bd9a:	b085      	sub	sp, #20
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
 801bda0:	6039      	str	r1, [r7, #0]
    name_ = name;
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	1d1c      	adds	r4, r3, #4
 801bda6:	f107 0308 	add.w	r3, r7, #8
 801bdaa:	6839      	ldr	r1, [r7, #0]
 801bdac:	4618      	mov	r0, r3
 801bdae:	f7ef f82c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bdb2:	f107 0308 	add.w	r3, r7, #8
 801bdb6:	4619      	mov	r1, r3
 801bdb8:	4620      	mov	r0, r4
 801bdba:	f7ef f892 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
 801bdbe:	f107 0308 	add.w	r3, r7, #8
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	f7ef fbd9 	bl	800b57a <_ZN12SimpleStringD1Ev>
}
 801bdc8:	bf00      	nop
 801bdca:	3714      	adds	r7, #20
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd90      	pop	{r4, r7, pc}

0801bdd0 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b082      	sub	sp, #8
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
 801bdd8:	6039      	str	r1, [r7, #0]
    return name_;
 801bdda:	683b      	ldr	r3, [r7, #0]
 801bddc:	3304      	adds	r3, #4
 801bdde:	4619      	mov	r1, r3
 801bde0:	6878      	ldr	r0, [r7, #4]
 801bde2:	f7ef f866 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 801bde6:	6878      	ldr	r0, [r7, #4]
 801bde8:	3708      	adds	r7, #8
 801bdea:	46bd      	mov	sp, r7
 801bdec:	bd80      	pop	{r7, pc}

0801bdee <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801bdee:	b580      	push	{r7, lr}
 801bdf0:	b082      	sub	sp, #8
 801bdf2:	af00      	add	r7, sp, #0
 801bdf4:	6078      	str	r0, [r7, #4]
 801bdf6:	6039      	str	r1, [r7, #0]
    return type_;
 801bdf8:	683b      	ldr	r3, [r7, #0]
 801bdfa:	330c      	adds	r3, #12
 801bdfc:	4619      	mov	r1, r3
 801bdfe:	6878      	ldr	r0, [r7, #4]
 801be00:	f7ef f857 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
}
 801be04:	6878      	ldr	r0, [r7, #4]
 801be06:	3708      	adds	r7, #8
 801be08:	46bd      	mov	sp, r7
 801be0a:	bd80      	pop	{r7, pc}

0801be0c <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801be0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be0e:	b087      	sub	sp, #28
 801be10:	af04      	add	r7, sp, #16
 801be12:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801be14:	f7f6 fbdc 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801be18:	4604      	mov	r4, r0
 801be1a:	6823      	ldr	r3, [r4, #0]
 801be1c:	3324      	adds	r3, #36	; 0x24
 801be1e:	681d      	ldr	r5, [r3, #0]
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	330c      	adds	r3, #12
 801be24:	4618      	mov	r0, r3
 801be26:	f7ef fb7b 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801be2a:	4606      	mov	r6, r0
 801be2c:	f7f6 fbe0 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801be30:	4603      	mov	r3, r0
 801be32:	9302      	str	r3, [sp, #8]
 801be34:	23c8      	movs	r3, #200	; 0xc8
 801be36:	9301      	str	r3, [sp, #4]
 801be38:	4b06      	ldr	r3, [pc, #24]	; (801be54 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801be3a:	9300      	str	r3, [sp, #0]
 801be3c:	2300      	movs	r3, #0
 801be3e:	4632      	mov	r2, r6
 801be40:	4905      	ldr	r1, [pc, #20]	; (801be58 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801be42:	4620      	mov	r0, r4
 801be44:	47a8      	blx	r5
    return value_.boolValue_;
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	7e1b      	ldrb	r3, [r3, #24]
}
 801be4a:	4618      	mov	r0, r3
 801be4c:	370c      	adds	r7, #12
 801be4e:	46bd      	mov	sp, r7
 801be50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be52:	bf00      	nop
 801be54:	080245bc 	.word	0x080245bc
 801be58:	08024584 	.word	0x08024584

0801be5c <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801be5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be5e:	b089      	sub	sp, #36	; 0x24
 801be60:	af04      	add	r7, sp, #16
 801be62:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	f103 040c 	add.w	r4, r3, #12
 801be6a:	f107 0308 	add.w	r3, r7, #8
 801be6e:	4920      	ldr	r1, [pc, #128]	; (801bef0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801be70:	4618      	mov	r0, r3
 801be72:	f7ee ffca 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801be76:	2501      	movs	r5, #1
 801be78:	f107 0308 	add.w	r3, r7, #8
 801be7c:	4619      	mov	r1, r3
 801be7e:	4620      	mov	r0, r4
 801be80:	f7ef fb87 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801be84:	4603      	mov	r3, r0
 801be86:	2b00      	cmp	r3, #0
 801be88:	d005      	beq.n	801be96 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	699b      	ldr	r3, [r3, #24]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	db01      	blt.n	801be96 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801be92:	2401      	movs	r4, #1
 801be94:	e000      	b.n	801be98 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801be96:	2400      	movs	r4, #0
 801be98:	2d00      	cmp	r5, #0
 801be9a:	d004      	beq.n	801bea6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801be9c:	f107 0308 	add.w	r3, r7, #8
 801bea0:	4618      	mov	r0, r3
 801bea2:	f7ef fb6a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801bea6:	2c00      	cmp	r4, #0
 801bea8:	d002      	beq.n	801beb0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	699b      	ldr	r3, [r3, #24]
 801beae:	e01a      	b.n	801bee6 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801beb0:	f7f6 fb8e 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801beb4:	4604      	mov	r4, r0
 801beb6:	6823      	ldr	r3, [r4, #0]
 801beb8:	3324      	adds	r3, #36	; 0x24
 801beba:	681d      	ldr	r5, [r3, #0]
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	330c      	adds	r3, #12
 801bec0:	4618      	mov	r0, r3
 801bec2:	f7ef fb2d 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801bec6:	4606      	mov	r6, r0
 801bec8:	f7f6 fb92 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801becc:	4603      	mov	r3, r0
 801bece:	9302      	str	r3, [sp, #8]
 801bed0:	23d2      	movs	r3, #210	; 0xd2
 801bed2:	9301      	str	r3, [sp, #4]
 801bed4:	4b07      	ldr	r3, [pc, #28]	; (801bef4 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801bed6:	9300      	str	r3, [sp, #0]
 801bed8:	2300      	movs	r3, #0
 801beda:	4632      	mov	r2, r6
 801bedc:	4906      	ldr	r1, [pc, #24]	; (801bef8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801bede:	4620      	mov	r0, r4
 801bee0:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	699b      	ldr	r3, [r3, #24]
    }
}
 801bee6:	4618      	mov	r0, r3
 801bee8:	3714      	adds	r7, #20
 801beea:	46bd      	mov	sp, r7
 801beec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801beee:	bf00      	nop
 801bef0:	08024580 	.word	0x08024580
 801bef4:	080245bc 	.word	0x080245bc
 801bef8:	0802458c 	.word	0x0802458c

0801befc <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801befc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801befe:	b087      	sub	sp, #28
 801bf00:	af04      	add	r7, sp, #16
 801bf02:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801bf04:	f7f6 fb64 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801bf08:	4604      	mov	r4, r0
 801bf0a:	6823      	ldr	r3, [r4, #0]
 801bf0c:	3324      	adds	r3, #36	; 0x24
 801bf0e:	681d      	ldr	r5, [r3, #0]
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	330c      	adds	r3, #12
 801bf14:	4618      	mov	r0, r3
 801bf16:	f7ef fb03 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801bf1a:	4606      	mov	r6, r0
 801bf1c:	f7f6 fb68 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bf20:	4603      	mov	r3, r0
 801bf22:	9302      	str	r3, [sp, #8]
 801bf24:	23d9      	movs	r3, #217	; 0xd9
 801bf26:	9301      	str	r3, [sp, #4]
 801bf28:	4b06      	ldr	r3, [pc, #24]	; (801bf44 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801bf2a:	9300      	str	r3, [sp, #0]
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	4632      	mov	r2, r6
 801bf30:	4905      	ldr	r1, [pc, #20]	; (801bf48 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801bf32:	4620      	mov	r0, r4
 801bf34:	47a8      	blx	r5
    return value_.intValue_;
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	699b      	ldr	r3, [r3, #24]
}
 801bf3a:	4618      	mov	r0, r3
 801bf3c:	370c      	adds	r7, #12
 801bf3e:	46bd      	mov	sp, r7
 801bf40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf42:	bf00      	nop
 801bf44:	080245bc 	.word	0x080245bc
 801bf48:	08024580 	.word	0x08024580

0801bf4c <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf4e:	b08b      	sub	sp, #44	; 0x2c
 801bf50:	af04      	add	r7, sp, #16
 801bf52:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	f103 040c 	add.w	r4, r3, #12
 801bf5a:	f107 0308 	add.w	r3, r7, #8
 801bf5e:	4928      	ldr	r1, [pc, #160]	; (801c000 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801bf60:	4618      	mov	r0, r3
 801bf62:	f7ee ff52 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bf66:	f107 0308 	add.w	r3, r7, #8
 801bf6a:	4619      	mov	r1, r3
 801bf6c:	4620      	mov	r0, r4
 801bf6e:	f7ef fb10 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801bf72:	4603      	mov	r3, r0
 801bf74:	461c      	mov	r4, r3
 801bf76:	f107 0308 	add.w	r3, r7, #8
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	f7ef fafd 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801bf80:	2c00      	cmp	r4, #0
 801bf82:	d002      	beq.n	801bf8a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	699b      	ldr	r3, [r3, #24]
 801bf88:	e035      	b.n	801bff6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	f103 040c 	add.w	r4, r3, #12
 801bf90:	f107 0310 	add.w	r3, r7, #16
 801bf94:	491b      	ldr	r1, [pc, #108]	; (801c004 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801bf96:	4618      	mov	r0, r3
 801bf98:	f7ee ff37 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801bf9c:	f107 0310 	add.w	r3, r7, #16
 801bfa0:	4619      	mov	r1, r3
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f7ef faf5 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801bfa8:	4603      	mov	r3, r0
 801bfaa:	461c      	mov	r4, r3
 801bfac:	f107 0310 	add.w	r3, r7, #16
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7ef fae2 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801bfb6:	2c00      	cmp	r4, #0
 801bfb8:	d002      	beq.n	801bfc0 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	699b      	ldr	r3, [r3, #24]
 801bfbe:	e01a      	b.n	801bff6 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801bfc0:	f7f6 fb06 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801bfc4:	4604      	mov	r4, r0
 801bfc6:	6823      	ldr	r3, [r4, #0]
 801bfc8:	3324      	adds	r3, #36	; 0x24
 801bfca:	681d      	ldr	r5, [r3, #0]
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	330c      	adds	r3, #12
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	f7ef faa5 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801bfd6:	4606      	mov	r6, r0
 801bfd8:	f7f6 fb0a 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bfdc:	4603      	mov	r3, r0
 801bfde:	9302      	str	r3, [sp, #8]
 801bfe0:	23e5      	movs	r3, #229	; 0xe5
 801bfe2:	9301      	str	r3, [sp, #4]
 801bfe4:	4b08      	ldr	r3, [pc, #32]	; (801c008 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801bfe6:	9300      	str	r3, [sp, #0]
 801bfe8:	2300      	movs	r3, #0
 801bfea:	4632      	mov	r2, r6
 801bfec:	4907      	ldr	r1, [pc, #28]	; (801c00c <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801bfee:	4620      	mov	r0, r4
 801bff0:	47a8      	blx	r5
        return value_.longIntValue_;
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	699b      	ldr	r3, [r3, #24]
    }
}
 801bff6:	4618      	mov	r0, r3
 801bff8:	371c      	adds	r7, #28
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bffe:	bf00      	nop
 801c000:	08024580 	.word	0x08024580
 801c004:	0802458c 	.word	0x0802458c
 801c008:	080245bc 	.word	0x080245bc
 801c00c:	0802459c 	.word	0x0802459c

0801c010 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801c010:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c012:	b08d      	sub	sp, #52	; 0x34
 801c014:	af04      	add	r7, sp, #16
 801c016:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	f103 040c 	add.w	r4, r3, #12
 801c01e:	f107 0308 	add.w	r3, r7, #8
 801c022:	4940      	ldr	r1, [pc, #256]	; (801c124 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801c024:	4618      	mov	r0, r3
 801c026:	f7ee fef0 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c02a:	f107 0308 	add.w	r3, r7, #8
 801c02e:	4619      	mov	r1, r3
 801c030:	4620      	mov	r0, r4
 801c032:	f7ef faae 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c036:	4603      	mov	r3, r0
 801c038:	461c      	mov	r4, r3
 801c03a:	f107 0308 	add.w	r3, r7, #8
 801c03e:	4618      	mov	r0, r3
 801c040:	f7ef fa9b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c044:	2c00      	cmp	r4, #0
 801c046:	d002      	beq.n	801c04e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	699b      	ldr	r3, [r3, #24]
 801c04c:	e066      	b.n	801c11c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	f103 040c 	add.w	r4, r3, #12
 801c054:	f107 0310 	add.w	r3, r7, #16
 801c058:	4933      	ldr	r1, [pc, #204]	; (801c128 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7ee fed5 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c060:	2501      	movs	r5, #1
 801c062:	f107 0310 	add.w	r3, r7, #16
 801c066:	4619      	mov	r1, r3
 801c068:	4620      	mov	r0, r4
 801c06a:	f7ef fa92 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c06e:	4603      	mov	r3, r0
 801c070:	2b00      	cmp	r3, #0
 801c072:	d005      	beq.n	801c080 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	699b      	ldr	r3, [r3, #24]
 801c078:	2b00      	cmp	r3, #0
 801c07a:	db01      	blt.n	801c080 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801c07c:	2401      	movs	r4, #1
 801c07e:	e000      	b.n	801c082 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801c080:	2400      	movs	r4, #0
 801c082:	2d00      	cmp	r5, #0
 801c084:	d004      	beq.n	801c090 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801c086:	f107 0310 	add.w	r3, r7, #16
 801c08a:	4618      	mov	r0, r3
 801c08c:	f7ef fa75 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c090:	2c00      	cmp	r4, #0
 801c092:	d002      	beq.n	801c09a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	699b      	ldr	r3, [r3, #24]
 801c098:	e040      	b.n	801c11c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	f103 040c 	add.w	r4, r3, #12
 801c0a0:	f107 0318 	add.w	r3, r7, #24
 801c0a4:	4921      	ldr	r1, [pc, #132]	; (801c12c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7ee feaf 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c0ac:	2501      	movs	r5, #1
 801c0ae:	f107 0318 	add.w	r3, r7, #24
 801c0b2:	4619      	mov	r1, r3
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	f7ef fa6c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d005      	beq.n	801c0cc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	699b      	ldr	r3, [r3, #24]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	db01      	blt.n	801c0cc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801c0c8:	2401      	movs	r4, #1
 801c0ca:	e000      	b.n	801c0ce <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801c0cc:	2400      	movs	r4, #0
 801c0ce:	2d00      	cmp	r5, #0
 801c0d0:	d004      	beq.n	801c0dc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801c0d2:	f107 0318 	add.w	r3, r7, #24
 801c0d6:	4618      	mov	r0, r3
 801c0d8:	f7ef fa4f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c0dc:	2c00      	cmp	r4, #0
 801c0de:	d002      	beq.n	801c0e6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	699b      	ldr	r3, [r3, #24]
 801c0e4:	e01a      	b.n	801c11c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801c0e6:	f7f6 fa73 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c0ea:	4604      	mov	r4, r0
 801c0ec:	6823      	ldr	r3, [r4, #0]
 801c0ee:	3324      	adds	r3, #36	; 0x24
 801c0f0:	681d      	ldr	r5, [r3, #0]
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	330c      	adds	r3, #12
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	f7ef fa12 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801c0fc:	4606      	mov	r6, r0
 801c0fe:	f7f6 fa77 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c102:	4603      	mov	r3, r0
 801c104:	9302      	str	r3, [sp, #8]
 801c106:	23f4      	movs	r3, #244	; 0xf4
 801c108:	9301      	str	r3, [sp, #4]
 801c10a:	4b09      	ldr	r3, [pc, #36]	; (801c130 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801c10c:	9300      	str	r3, [sp, #0]
 801c10e:	2300      	movs	r3, #0
 801c110:	4632      	mov	r2, r6
 801c112:	4908      	ldr	r1, [pc, #32]	; (801c134 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801c114:	4620      	mov	r0, r4
 801c116:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	699b      	ldr	r3, [r3, #24]
    }
}
 801c11c:	4618      	mov	r0, r3
 801c11e:	3724      	adds	r7, #36	; 0x24
 801c120:	46bd      	mov	sp, r7
 801c122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c124:	0802458c 	.word	0x0802458c
 801c128:	08024580 	.word	0x08024580
 801c12c:	0802459c 	.word	0x0802459c
 801c130:	080245bc 	.word	0x080245bc
 801c134:	080245a8 	.word	0x080245a8

0801c138 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801c138:	b5b0      	push	{r4, r5, r7, lr}
 801c13a:	b084      	sub	sp, #16
 801c13c:	af02      	add	r7, sp, #8
 801c13e:	6078      	str	r0, [r7, #4]
 801c140:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801c142:	f7f6 fa45 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c146:	4604      	mov	r4, r0
 801c148:	6823      	ldr	r3, [r4, #0]
 801c14a:	3368      	adds	r3, #104	; 0x68
 801c14c:	681d      	ldr	r5, [r3, #0]
 801c14e:	f7f6 fa4f 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c152:	4603      	mov	r3, r0
 801c154:	9300      	str	r3, [sp, #0]
 801c156:	f240 1323 	movw	r3, #291	; 0x123
 801c15a:	4a06      	ldr	r2, [pc, #24]	; (801c174 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801c15c:	4906      	ldr	r1, [pc, #24]	; (801c178 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801c15e:	4620      	mov	r0, r4
 801c160:	47a8      	blx	r5
    return cpputest_longlong(0);
 801c162:	2100      	movs	r1, #0
 801c164:	6878      	ldr	r0, [r7, #4]
 801c166:	f7ec fe87 	bl	8008e78 <_ZN17cpputest_longlongC1Ei>
}
 801c16a:	6878      	ldr	r0, [r7, #4]
 801c16c:	3708      	adds	r7, #8
 801c16e:	46bd      	mov	sp, r7
 801c170:	bdb0      	pop	{r4, r5, r7, pc}
 801c172:	bf00      	nop
 801c174:	080245bc 	.word	0x080245bc
 801c178:	080245d8 	.word	0x080245d8

0801c17c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801c17c:	b5b0      	push	{r4, r5, r7, lr}
 801c17e:	b084      	sub	sp, #16
 801c180:	af02      	add	r7, sp, #8
 801c182:	6078      	str	r0, [r7, #4]
 801c184:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801c186:	f7f6 fa23 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c18a:	4604      	mov	r4, r0
 801c18c:	6823      	ldr	r3, [r4, #0]
 801c18e:	3368      	adds	r3, #104	; 0x68
 801c190:	681d      	ldr	r5, [r3, #0]
 801c192:	f7f6 fa2d 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c196:	4603      	mov	r3, r0
 801c198:	9300      	str	r3, [sp, #0]
 801c19a:	f240 1329 	movw	r3, #297	; 0x129
 801c19e:	4a06      	ldr	r2, [pc, #24]	; (801c1b8 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801c1a0:	4906      	ldr	r1, [pc, #24]	; (801c1bc <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801c1a2:	4620      	mov	r0, r4
 801c1a4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801c1a6:	2100      	movs	r1, #0
 801c1a8:	6878      	ldr	r0, [r7, #4]
 801c1aa:	f7ec fe71 	bl	8008e90 <_ZN18cpputest_ulonglongC1Ei>
}
 801c1ae:	6878      	ldr	r0, [r7, #4]
 801c1b0:	3708      	adds	r7, #8
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	bdb0      	pop	{r4, r5, r7, pc}
 801c1b6:	bf00      	nop
 801c1b8:	080245bc 	.word	0x080245bc
 801c1bc:	080245f8 	.word	0x080245f8

0801c1c0 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801c1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1c2:	b087      	sub	sp, #28
 801c1c4:	af04      	add	r7, sp, #16
 801c1c6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801c1c8:	f7f6 fa02 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c1cc:	4604      	mov	r4, r0
 801c1ce:	6823      	ldr	r3, [r4, #0]
 801c1d0:	3324      	adds	r3, #36	; 0x24
 801c1d2:	681d      	ldr	r5, [r3, #0]
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	330c      	adds	r3, #12
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f7ef f9a1 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801c1de:	4606      	mov	r6, r0
 801c1e0:	f7f6 fa06 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c1e4:	4603      	mov	r3, r0
 801c1e6:	9302      	str	r3, [sp, #8]
 801c1e8:	f240 1331 	movw	r3, #305	; 0x131
 801c1ec:	9301      	str	r3, [sp, #4]
 801c1ee:	4b09      	ldr	r3, [pc, #36]	; (801c214 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801c1f0:	9300      	str	r3, [sp, #0]
 801c1f2:	2300      	movs	r3, #0
 801c1f4:	4632      	mov	r2, r6
 801c1f6:	4908      	ldr	r1, [pc, #32]	; (801c218 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801c1f8:	4620      	mov	r0, r4
 801c1fa:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801c202:	ec43 2b17 	vmov	d7, r2, r3
}
 801c206:	eeb0 0a47 	vmov.f32	s0, s14
 801c20a:	eef0 0a67 	vmov.f32	s1, s15
 801c20e:	370c      	adds	r7, #12
 801c210:	46bd      	mov	sp, r7
 801c212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c214:	080245bc 	.word	0x080245bc
 801c218:	08024624 	.word	0x08024624

0801c21c <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801c21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c21e:	b087      	sub	sp, #28
 801c220:	af04      	add	r7, sp, #16
 801c222:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801c224:	f7f6 f9d4 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c228:	4604      	mov	r4, r0
 801c22a:	6823      	ldr	r3, [r4, #0]
 801c22c:	3324      	adds	r3, #36	; 0x24
 801c22e:	681d      	ldr	r5, [r3, #0]
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	330c      	adds	r3, #12
 801c234:	4618      	mov	r0, r3
 801c236:	f7ef f973 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801c23a:	4606      	mov	r6, r0
 801c23c:	f7f6 f9d8 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c240:	4603      	mov	r3, r0
 801c242:	9302      	str	r3, [sp, #8]
 801c244:	f240 1337 	movw	r3, #311	; 0x137
 801c248:	9301      	str	r3, [sp, #4]
 801c24a:	4b09      	ldr	r3, [pc, #36]	; (801c270 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801c24c:	9300      	str	r3, [sp, #0]
 801c24e:	2300      	movs	r3, #0
 801c250:	4632      	mov	r2, r6
 801c252:	4908      	ldr	r1, [pc, #32]	; (801c274 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801c254:	4620      	mov	r0, r4
 801c256:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c25e:	ec43 2b17 	vmov	d7, r2, r3
}
 801c262:	eeb0 0a47 	vmov.f32	s0, s14
 801c266:	eef0 0a67 	vmov.f32	s1, s15
 801c26a:	370c      	adds	r7, #12
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c270:	080245bc 	.word	0x080245bc
 801c274:	08024624 	.word	0x08024624

0801c278 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c27a:	b087      	sub	sp, #28
 801c27c:	af04      	add	r7, sp, #16
 801c27e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801c280:	f7f6 f9a6 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c284:	4604      	mov	r4, r0
 801c286:	6823      	ldr	r3, [r4, #0]
 801c288:	3324      	adds	r3, #36	; 0x24
 801c28a:	681d      	ldr	r5, [r3, #0]
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	330c      	adds	r3, #12
 801c290:	4618      	mov	r0, r3
 801c292:	f7ef f945 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801c296:	4606      	mov	r6, r0
 801c298:	f7f6 f9aa 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c29c:	4603      	mov	r3, r0
 801c29e:	9302      	str	r3, [sp, #8]
 801c2a0:	f240 133d 	movw	r3, #317	; 0x13d
 801c2a4:	9301      	str	r3, [sp, #4]
 801c2a6:	4b06      	ldr	r3, [pc, #24]	; (801c2c0 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801c2a8:	9300      	str	r3, [sp, #0]
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	4632      	mov	r2, r6
 801c2ae:	4905      	ldr	r1, [pc, #20]	; (801c2c4 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	47a8      	blx	r5
    return value_.stringValue_;
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	699b      	ldr	r3, [r3, #24]
}
 801c2b8:	4618      	mov	r0, r3
 801c2ba:	370c      	adds	r7, #12
 801c2bc:	46bd      	mov	sp, r7
 801c2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2c0:	080245bc 	.word	0x080245bc
 801c2c4:	0802464c 	.word	0x0802464c

0801c2c8 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2ca:	b087      	sub	sp, #28
 801c2cc:	af04      	add	r7, sp, #16
 801c2ce:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801c2d0:	f7f6 f97e 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	6823      	ldr	r3, [r4, #0]
 801c2d8:	3324      	adds	r3, #36	; 0x24
 801c2da:	681d      	ldr	r5, [r3, #0]
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	330c      	adds	r3, #12
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	f7ef f91d 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801c2e6:	4606      	mov	r6, r0
 801c2e8:	f7f6 f982 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c2ec:	4603      	mov	r3, r0
 801c2ee:	9302      	str	r3, [sp, #8]
 801c2f0:	f240 1343 	movw	r3, #323	; 0x143
 801c2f4:	9301      	str	r3, [sp, #4]
 801c2f6:	4b06      	ldr	r3, [pc, #24]	; (801c310 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801c2f8:	9300      	str	r3, [sp, #0]
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	4632      	mov	r2, r6
 801c2fe:	4905      	ldr	r1, [pc, #20]	; (801c314 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801c300:	4620      	mov	r0, r4
 801c302:	47a8      	blx	r5
    return value_.pointerValue_;
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	699b      	ldr	r3, [r3, #24]
}
 801c308:	4618      	mov	r0, r3
 801c30a:	370c      	adds	r7, #12
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c310:	080245bc 	.word	0x080245bc
 801c314:	0802462c 	.word	0x0802462c

0801c318 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801c318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c31a:	b087      	sub	sp, #28
 801c31c:	af04      	add	r7, sp, #16
 801c31e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801c320:	f7f6 f956 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c324:	4604      	mov	r4, r0
 801c326:	6823      	ldr	r3, [r4, #0]
 801c328:	3324      	adds	r3, #36	; 0x24
 801c32a:	681d      	ldr	r5, [r3, #0]
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	330c      	adds	r3, #12
 801c330:	4618      	mov	r0, r3
 801c332:	f7ef f8f5 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801c336:	4606      	mov	r6, r0
 801c338:	f7f6 f95a 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c33c:	4603      	mov	r3, r0
 801c33e:	9302      	str	r3, [sp, #8]
 801c340:	f240 1349 	movw	r3, #329	; 0x149
 801c344:	9301      	str	r3, [sp, #4]
 801c346:	4b06      	ldr	r3, [pc, #24]	; (801c360 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801c348:	9300      	str	r3, [sp, #0]
 801c34a:	2300      	movs	r3, #0
 801c34c:	4632      	mov	r2, r6
 801c34e:	4905      	ldr	r1, [pc, #20]	; (801c364 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801c350:	4620      	mov	r0, r4
 801c352:	47a8      	blx	r5
    return value_.pointerValue_;
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	699b      	ldr	r3, [r3, #24]
}
 801c358:	4618      	mov	r0, r3
 801c35a:	370c      	adds	r7, #12
 801c35c:	46bd      	mov	sp, r7
 801c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c360:	080245bc 	.word	0x080245bc
 801c364:	08024634 	.word	0x08024634

0801c368 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801c368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c36a:	b087      	sub	sp, #28
 801c36c:	af04      	add	r7, sp, #16
 801c36e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801c370:	f7f6 f92e 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c374:	4604      	mov	r4, r0
 801c376:	6823      	ldr	r3, [r4, #0]
 801c378:	3324      	adds	r3, #36	; 0x24
 801c37a:	681d      	ldr	r5, [r3, #0]
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	330c      	adds	r3, #12
 801c380:	4618      	mov	r0, r3
 801c382:	f7ef f8cd 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801c386:	4606      	mov	r6, r0
 801c388:	f7f6 f932 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c38c:	4603      	mov	r3, r0
 801c38e:	9302      	str	r3, [sp, #8]
 801c390:	f240 134f 	movw	r3, #335	; 0x14f
 801c394:	9301      	str	r3, [sp, #4]
 801c396:	4b06      	ldr	r3, [pc, #24]	; (801c3b0 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801c398:	9300      	str	r3, [sp, #0]
 801c39a:	2300      	movs	r3, #0
 801c39c:	4632      	mov	r2, r6
 801c39e:	4905      	ldr	r1, [pc, #20]	; (801c3b4 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801c3a0:	4620      	mov	r0, r4
 801c3a2:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	699b      	ldr	r3, [r3, #24]
}
 801c3a8:	4618      	mov	r0, r3
 801c3aa:	370c      	adds	r7, #12
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3b0:	080245bc 	.word	0x080245bc
 801c3b4:	08024640 	.word	0x08024640

0801c3b8 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801c3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3ba:	b087      	sub	sp, #28
 801c3bc:	af04      	add	r7, sp, #16
 801c3be:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801c3c0:	f7f6 f906 	bl	80125d0 <_ZN10UtestShell10getCurrentEv>
 801c3c4:	4604      	mov	r4, r0
 801c3c6:	6823      	ldr	r3, [r4, #0]
 801c3c8:	3324      	adds	r3, #36	; 0x24
 801c3ca:	681d      	ldr	r5, [r3, #0]
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	330c      	adds	r3, #12
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	f7ef f8a5 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801c3d6:	4606      	mov	r6, r0
 801c3d8:	f7f6 f90a 	bl	80125f0 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c3dc:	4603      	mov	r3, r0
 801c3de:	9302      	str	r3, [sp, #8]
 801c3e0:	f240 1355 	movw	r3, #341	; 0x155
 801c3e4:	9301      	str	r3, [sp, #4]
 801c3e6:	4b06      	ldr	r3, [pc, #24]	; (801c400 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801c3e8:	9300      	str	r3, [sp, #0]
 801c3ea:	2300      	movs	r3, #0
 801c3ec:	4632      	mov	r2, r6
 801c3ee:	4905      	ldr	r1, [pc, #20]	; (801c404 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	699b      	ldr	r3, [r3, #24]
}
 801c3f8:	4618      	mov	r0, r3
 801c3fa:	370c      	adds	r7, #12
 801c3fc:	46bd      	mov	sp, r7
 801c3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c400:	080245bc 	.word	0x080245bc
 801c404:	08024658 	.word	0x08024658

0801c408 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801c408:	b480      	push	{r7}
 801c40a:	b083      	sub	sp, #12
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	699b      	ldr	r3, [r3, #24]
}
 801c414:	4618      	mov	r0, r3
 801c416:	370c      	adds	r7, #12
 801c418:	46bd      	mov	sp, r7
 801c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c41e:	4770      	bx	lr

0801c420 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801c420:	b480      	push	{r7}
 801c422:	b083      	sub	sp, #12
 801c424:	af00      	add	r7, sp, #0
 801c426:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	699b      	ldr	r3, [r3, #24]
}
 801c42c:	4618      	mov	r0, r3
 801c42e:	370c      	adds	r7, #12
 801c430:	46bd      	mov	sp, r7
 801c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c436:	4770      	bx	lr

0801c438 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801c438:	b480      	push	{r7}
 801c43a:	b083      	sub	sp, #12
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	6078      	str	r0, [r7, #4]
    return size_;
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801c444:	4618      	mov	r0, r3
 801c446:	370c      	adds	r7, #12
 801c448:	46bd      	mov	sp, r7
 801c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c44e:	4770      	bx	lr

0801c450 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801c450:	b480      	push	{r7}
 801c452:	b083      	sub	sp, #12
 801c454:	af00      	add	r7, sp, #0
 801c456:	6078      	str	r0, [r7, #4]
    return comparator_;
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801c45c:	4618      	mov	r0, r3
 801c45e:	370c      	adds	r7, #12
 801c460:	46bd      	mov	sp, r7
 801c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c466:	4770      	bx	lr

0801c468 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801c468:	b480      	push	{r7}
 801c46a:	b083      	sub	sp, #12
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
    return copier_;
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801c474:	4618      	mov	r0, r3
 801c476:	370c      	adds	r7, #12
 801c478:	46bd      	mov	sp, r7
 801c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c47e:	4770      	bx	lr

0801c480 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801c480:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c482:	b0cd      	sub	sp, #308	; 0x134
 801c484:	af00      	add	r7, sp, #0
 801c486:	1d3b      	adds	r3, r7, #4
 801c488:	6018      	str	r0, [r3, #0]
 801c48a:	463b      	mov	r3, r7
 801c48c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801c48e:	2500      	movs	r5, #0
 801c490:	1d3b      	adds	r3, r7, #4
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	f103 040c 	add.w	r4, r3, #12
 801c498:	f107 0308 	add.w	r3, r7, #8
 801c49c:	49bb      	ldr	r1, [pc, #748]	; (801c78c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801c49e:	4618      	mov	r0, r3
 801c4a0:	f7ee fcb3 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c4a4:	2601      	movs	r6, #1
 801c4a6:	f107 0308 	add.w	r3, r7, #8
 801c4aa:	4619      	mov	r1, r3
 801c4ac:	4620      	mov	r0, r4
 801c4ae:	f7ef f870 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d015      	beq.n	801c4e4 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801c4b8:	463b      	mov	r3, r7
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	f103 040c 	add.w	r4, r3, #12
 801c4c0:	f107 0310 	add.w	r3, r7, #16
 801c4c4:	49b2      	ldr	r1, [pc, #712]	; (801c790 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c4c6:	4618      	mov	r0, r3
 801c4c8:	f7ee fc9f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c4cc:	2501      	movs	r5, #1
 801c4ce:	f107 0310 	add.w	r3, r7, #16
 801c4d2:	4619      	mov	r1, r3
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f7ef f85c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c4da:	4603      	mov	r3, r0
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d001      	beq.n	801c4e4 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801c4e0:	2401      	movs	r4, #1
 801c4e2:	e000      	b.n	801c4e6 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801c4e4:	2400      	movs	r4, #0
 801c4e6:	2d00      	cmp	r5, #0
 801c4e8:	d004      	beq.n	801c4f4 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801c4ea:	f107 0310 	add.w	r3, r7, #16
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	f7ef f843 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c4f4:	2e00      	cmp	r6, #0
 801c4f6:	d004      	beq.n	801c502 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801c4f8:	f107 0308 	add.w	r3, r7, #8
 801c4fc:	4618      	mov	r0, r3
 801c4fe:	f7ef f83c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c502:	2c00      	cmp	r4, #0
 801c504:	d00c      	beq.n	801c520 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801c506:	1d3b      	adds	r3, r7, #4
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	699a      	ldr	r2, [r3, #24]
 801c50c:	463b      	mov	r3, r7
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	699b      	ldr	r3, [r3, #24]
 801c512:	429a      	cmp	r2, r3
 801c514:	bf0c      	ite	eq
 801c516:	2301      	moveq	r3, #1
 801c518:	2300      	movne	r3, #0
 801c51a:	b2dc      	uxtb	r4, r3
 801c51c:	f000 bd60 	b.w	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801c520:	2500      	movs	r5, #0
 801c522:	1d3b      	adds	r3, r7, #4
 801c524:	681b      	ldr	r3, [r3, #0]
 801c526:	f103 040c 	add.w	r4, r3, #12
 801c52a:	f107 0318 	add.w	r3, r7, #24
 801c52e:	4998      	ldr	r1, [pc, #608]	; (801c790 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c530:	4618      	mov	r0, r3
 801c532:	f7ee fc6a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c536:	2601      	movs	r6, #1
 801c538:	f107 0318 	add.w	r3, r7, #24
 801c53c:	4619      	mov	r1, r3
 801c53e:	4620      	mov	r0, r4
 801c540:	f7ef f827 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c544:	4603      	mov	r3, r0
 801c546:	2b00      	cmp	r3, #0
 801c548:	d015      	beq.n	801c576 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801c54a:	463b      	mov	r3, r7
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	f103 040c 	add.w	r4, r3, #12
 801c552:	f107 0320 	add.w	r3, r7, #32
 801c556:	498d      	ldr	r1, [pc, #564]	; (801c78c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801c558:	4618      	mov	r0, r3
 801c55a:	f7ee fc56 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c55e:	2501      	movs	r5, #1
 801c560:	f107 0320 	add.w	r3, r7, #32
 801c564:	4619      	mov	r1, r3
 801c566:	4620      	mov	r0, r4
 801c568:	f7ef f813 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c56c:	4603      	mov	r3, r0
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d001      	beq.n	801c576 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801c572:	2401      	movs	r4, #1
 801c574:	e000      	b.n	801c578 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801c576:	2400      	movs	r4, #0
 801c578:	2d00      	cmp	r5, #0
 801c57a:	d004      	beq.n	801c586 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801c57c:	f107 0320 	add.w	r3, r7, #32
 801c580:	4618      	mov	r0, r3
 801c582:	f7ee fffa 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c586:	2e00      	cmp	r6, #0
 801c588:	d004      	beq.n	801c594 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801c58a:	f107 0318 	add.w	r3, r7, #24
 801c58e:	4618      	mov	r0, r3
 801c590:	f7ee fff3 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c594:	2c00      	cmp	r4, #0
 801c596:	d00c      	beq.n	801c5b2 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801c598:	1d3b      	adds	r3, r7, #4
 801c59a:	681b      	ldr	r3, [r3, #0]
 801c59c:	699a      	ldr	r2, [r3, #24]
 801c59e:	463b      	mov	r3, r7
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	699b      	ldr	r3, [r3, #24]
 801c5a4:	429a      	cmp	r2, r3
 801c5a6:	bf0c      	ite	eq
 801c5a8:	2301      	moveq	r3, #1
 801c5aa:	2300      	movne	r3, #0
 801c5ac:	b2dc      	uxtb	r4, r3
 801c5ae:	f000 bd17 	b.w	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801c5b2:	2500      	movs	r5, #0
 801c5b4:	1d3b      	adds	r3, r7, #4
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	f103 040c 	add.w	r4, r3, #12
 801c5bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c5c0:	4974      	ldr	r1, [pc, #464]	; (801c794 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	f7ee fc21 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c5c8:	2601      	movs	r6, #1
 801c5ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c5ce:	4619      	mov	r1, r3
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	f7ee ffde 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c5d6:	4603      	mov	r3, r0
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d015      	beq.n	801c608 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801c5dc:	463b      	mov	r3, r7
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	f103 040c 	add.w	r4, r3, #12
 801c5e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c5e8:	4969      	ldr	r1, [pc, #420]	; (801c790 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c5ea:	4618      	mov	r0, r3
 801c5ec:	f7ee fc0d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c5f0:	2501      	movs	r5, #1
 801c5f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c5f6:	4619      	mov	r1, r3
 801c5f8:	4620      	mov	r0, r4
 801c5fa:	f7ee ffca 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c5fe:	4603      	mov	r3, r0
 801c600:	2b00      	cmp	r3, #0
 801c602:	d001      	beq.n	801c608 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801c604:	2401      	movs	r4, #1
 801c606:	e000      	b.n	801c60a <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801c608:	2400      	movs	r4, #0
 801c60a:	2d00      	cmp	r5, #0
 801c60c:	d004      	beq.n	801c618 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801c60e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c612:	4618      	mov	r0, r3
 801c614:	f7ee ffb1 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c618:	2e00      	cmp	r6, #0
 801c61a:	d004      	beq.n	801c626 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801c61c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c620:	4618      	mov	r0, r3
 801c622:	f7ee ffaa 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c626:	2c00      	cmp	r4, #0
 801c628:	d012      	beq.n	801c650 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801c62a:	463b      	mov	r3, r7
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	699b      	ldr	r3, [r3, #24]
 801c630:	2b00      	cmp	r3, #0
 801c632:	db0a      	blt.n	801c64a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801c634:	1d3b      	adds	r3, r7, #4
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	699b      	ldr	r3, [r3, #24]
 801c63a:	463a      	mov	r2, r7
 801c63c:	6812      	ldr	r2, [r2, #0]
 801c63e:	6992      	ldr	r2, [r2, #24]
 801c640:	4293      	cmp	r3, r2
 801c642:	d102      	bne.n	801c64a <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801c644:	2401      	movs	r4, #1
 801c646:	f000 bccb 	b.w	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c64a:	2400      	movs	r4, #0
 801c64c:	f000 bcc8 	b.w	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801c650:	2500      	movs	r5, #0
 801c652:	1d3b      	adds	r3, r7, #4
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	f103 040c 	add.w	r4, r3, #12
 801c65a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c65e:	494c      	ldr	r1, [pc, #304]	; (801c790 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c660:	4618      	mov	r0, r3
 801c662:	f7ee fbd2 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c666:	2601      	movs	r6, #1
 801c668:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c66c:	4619      	mov	r1, r3
 801c66e:	4620      	mov	r0, r4
 801c670:	f7ee ff8f 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c674:	4603      	mov	r3, r0
 801c676:	2b00      	cmp	r3, #0
 801c678:	d015      	beq.n	801c6a6 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801c67a:	463b      	mov	r3, r7
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	f103 040c 	add.w	r4, r3, #12
 801c682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c686:	4943      	ldr	r1, [pc, #268]	; (801c794 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801c688:	4618      	mov	r0, r3
 801c68a:	f7ee fbbe 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c68e:	2501      	movs	r5, #1
 801c690:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c694:	4619      	mov	r1, r3
 801c696:	4620      	mov	r0, r4
 801c698:	f7ee ff7b 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c69c:	4603      	mov	r3, r0
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d001      	beq.n	801c6a6 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801c6a2:	2401      	movs	r4, #1
 801c6a4:	e000      	b.n	801c6a8 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801c6a6:	2400      	movs	r4, #0
 801c6a8:	2d00      	cmp	r5, #0
 801c6aa:	d004      	beq.n	801c6b6 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801c6ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	f7ee ff62 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c6b6:	2e00      	cmp	r6, #0
 801c6b8:	d004      	beq.n	801c6c4 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801c6ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c6be:	4618      	mov	r0, r3
 801c6c0:	f7ee ff5b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c6c4:	2c00      	cmp	r4, #0
 801c6c6:	d012      	beq.n	801c6ee <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801c6c8:	1d3b      	adds	r3, r7, #4
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	699b      	ldr	r3, [r3, #24]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	db0a      	blt.n	801c6e8 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801c6d2:	1d3b      	adds	r3, r7, #4
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	699b      	ldr	r3, [r3, #24]
 801c6d8:	463a      	mov	r2, r7
 801c6da:	6812      	ldr	r2, [r2, #0]
 801c6dc:	6992      	ldr	r2, [r2, #24]
 801c6de:	4293      	cmp	r3, r2
 801c6e0:	d102      	bne.n	801c6e8 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801c6e2:	2401      	movs	r4, #1
 801c6e4:	f000 bc7c 	b.w	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c6e8:	2400      	movs	r4, #0
 801c6ea:	f000 bc79 	b.w	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801c6ee:	2500      	movs	r5, #0
 801c6f0:	1d3b      	adds	r3, r7, #4
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	f103 040c 	add.w	r4, r3, #12
 801c6f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c6fc:	4926      	ldr	r1, [pc, #152]	; (801c798 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7ee fb83 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c704:	2601      	movs	r6, #1
 801c706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c70a:	4619      	mov	r1, r3
 801c70c:	4620      	mov	r0, r4
 801c70e:	f7ee ff40 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c712:	4603      	mov	r3, r0
 801c714:	2b00      	cmp	r3, #0
 801c716:	d015      	beq.n	801c744 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801c718:	463b      	mov	r3, r7
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	f103 040c 	add.w	r4, r3, #12
 801c720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c724:	491a      	ldr	r1, [pc, #104]	; (801c790 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801c726:	4618      	mov	r0, r3
 801c728:	f7ee fb6f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c72c:	2501      	movs	r5, #1
 801c72e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c732:	4619      	mov	r1, r3
 801c734:	4620      	mov	r0, r4
 801c736:	f7ee ff2c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c73a:	4603      	mov	r3, r0
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d001      	beq.n	801c744 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801c740:	2401      	movs	r4, #1
 801c742:	e000      	b.n	801c746 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801c744:	2400      	movs	r4, #0
 801c746:	2d00      	cmp	r5, #0
 801c748:	d004      	beq.n	801c754 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801c74a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c74e:	4618      	mov	r0, r3
 801c750:	f7ee ff13 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c754:	2e00      	cmp	r6, #0
 801c756:	d004      	beq.n	801c762 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801c758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c75c:	4618      	mov	r0, r3
 801c75e:	f7ee ff0c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c762:	2c00      	cmp	r4, #0
 801c764:	d01a      	beq.n	801c79c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801c766:	463b      	mov	r3, r7
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	699b      	ldr	r3, [r3, #24]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	db0a      	blt.n	801c786 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801c770:	1d3b      	adds	r3, r7, #4
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	699b      	ldr	r3, [r3, #24]
 801c776:	463a      	mov	r2, r7
 801c778:	6812      	ldr	r2, [r2, #0]
 801c77a:	6992      	ldr	r2, [r2, #24]
 801c77c:	4293      	cmp	r3, r2
 801c77e:	d102      	bne.n	801c786 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801c780:	2401      	movs	r4, #1
 801c782:	f000 bc2d 	b.w	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c786:	2400      	movs	r4, #0
 801c788:	f000 bc2a 	b.w	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c78c:	0802459c 	.word	0x0802459c
 801c790:	08024580 	.word	0x08024580
 801c794:	0802458c 	.word	0x0802458c
 801c798:	080245a8 	.word	0x080245a8
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801c79c:	2500      	movs	r5, #0
 801c79e:	1d3b      	adds	r3, r7, #4
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	f103 040c 	add.w	r4, r3, #12
 801c7a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c7aa:	49b8      	ldr	r1, [pc, #736]	; (801ca8c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801c7ac:	4618      	mov	r0, r3
 801c7ae:	f7ee fb2c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c7b2:	2601      	movs	r6, #1
 801c7b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c7b8:	4619      	mov	r1, r3
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	f7ee fee9 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c7c0:	4603      	mov	r3, r0
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d015      	beq.n	801c7f2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801c7c6:	463b      	mov	r3, r7
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	f103 040c 	add.w	r4, r3, #12
 801c7ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c7d2:	49af      	ldr	r1, [pc, #700]	; (801ca90 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	f7ee fb18 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c7da:	2501      	movs	r5, #1
 801c7dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c7e0:	4619      	mov	r1, r3
 801c7e2:	4620      	mov	r0, r4
 801c7e4:	f7ee fed5 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	d001      	beq.n	801c7f2 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801c7ee:	2401      	movs	r4, #1
 801c7f0:	e000      	b.n	801c7f4 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801c7f2:	2400      	movs	r4, #0
 801c7f4:	2d00      	cmp	r5, #0
 801c7f6:	d004      	beq.n	801c802 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801c7f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c7fc:	4618      	mov	r0, r3
 801c7fe:	f7ee febc 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c802:	2e00      	cmp	r6, #0
 801c804:	d004      	beq.n	801c810 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801c806:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c80a:	4618      	mov	r0, r3
 801c80c:	f7ee feb5 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c810:	2c00      	cmp	r4, #0
 801c812:	d010      	beq.n	801c836 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801c814:	1d3b      	adds	r3, r7, #4
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	699b      	ldr	r3, [r3, #24]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	db09      	blt.n	801c832 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801c81e:	1d3b      	adds	r3, r7, #4
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	699b      	ldr	r3, [r3, #24]
 801c824:	463a      	mov	r2, r7
 801c826:	6812      	ldr	r2, [r2, #0]
 801c828:	6992      	ldr	r2, [r2, #24]
 801c82a:	4293      	cmp	r3, r2
 801c82c:	d101      	bne.n	801c832 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801c82e:	2401      	movs	r4, #1
 801c830:	e3d6      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c832:	2400      	movs	r4, #0
 801c834:	e3d4      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801c836:	2500      	movs	r5, #0
 801c838:	1d3b      	adds	r3, r7, #4
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	f103 040c 	add.w	r4, r3, #12
 801c840:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c844:	4993      	ldr	r1, [pc, #588]	; (801ca94 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c846:	4618      	mov	r0, r3
 801c848:	f7ee fadf 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c84c:	2601      	movs	r6, #1
 801c84e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c852:	4619      	mov	r1, r3
 801c854:	4620      	mov	r0, r4
 801c856:	f7ee fe9c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c85a:	4603      	mov	r3, r0
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d015      	beq.n	801c88c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801c860:	463b      	mov	r3, r7
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	f103 040c 	add.w	r4, r3, #12
 801c868:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c86c:	498a      	ldr	r1, [pc, #552]	; (801ca98 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801c86e:	4618      	mov	r0, r3
 801c870:	f7ee facb 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c874:	2501      	movs	r5, #1
 801c876:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c87a:	4619      	mov	r1, r3
 801c87c:	4620      	mov	r0, r4
 801c87e:	f7ee fe88 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c882:	4603      	mov	r3, r0
 801c884:	2b00      	cmp	r3, #0
 801c886:	d001      	beq.n	801c88c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801c888:	2401      	movs	r4, #1
 801c88a:	e000      	b.n	801c88e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801c88c:	2400      	movs	r4, #0
 801c88e:	2d00      	cmp	r5, #0
 801c890:	d004      	beq.n	801c89c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801c892:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c896:	4618      	mov	r0, r3
 801c898:	f7ee fe6f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c89c:	2e00      	cmp	r6, #0
 801c89e:	d004      	beq.n	801c8aa <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801c8a0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	f7ee fe68 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c8aa:	2c00      	cmp	r4, #0
 801c8ac:	d010      	beq.n	801c8d0 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801c8ae:	463b      	mov	r3, r7
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	699b      	ldr	r3, [r3, #24]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	db09      	blt.n	801c8cc <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801c8b8:	1d3b      	adds	r3, r7, #4
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	699b      	ldr	r3, [r3, #24]
 801c8be:	463a      	mov	r2, r7
 801c8c0:	6812      	ldr	r2, [r2, #0]
 801c8c2:	6992      	ldr	r2, [r2, #24]
 801c8c4:	4293      	cmp	r3, r2
 801c8c6:	d101      	bne.n	801c8cc <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801c8c8:	2401      	movs	r4, #1
 801c8ca:	e389      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c8cc:	2400      	movs	r4, #0
 801c8ce:	e387      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801c8d0:	2500      	movs	r5, #0
 801c8d2:	1d3b      	adds	r3, r7, #4
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	f103 040c 	add.w	r4, r3, #12
 801c8da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c8de:	496e      	ldr	r1, [pc, #440]	; (801ca98 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	f7ee fa92 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c8e6:	2601      	movs	r6, #1
 801c8e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c8ec:	4619      	mov	r1, r3
 801c8ee:	4620      	mov	r0, r4
 801c8f0:	f7ee fe4f 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d015      	beq.n	801c926 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801c8fa:	463b      	mov	r3, r7
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	f103 040c 	add.w	r4, r3, #12
 801c902:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c906:	4963      	ldr	r1, [pc, #396]	; (801ca94 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c908:	4618      	mov	r0, r3
 801c90a:	f7ee fa7e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c90e:	2501      	movs	r5, #1
 801c910:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c914:	4619      	mov	r1, r3
 801c916:	4620      	mov	r0, r4
 801c918:	f7ee fe3b 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c91c:	4603      	mov	r3, r0
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d001      	beq.n	801c926 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801c922:	2401      	movs	r4, #1
 801c924:	e000      	b.n	801c928 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801c926:	2400      	movs	r4, #0
 801c928:	2d00      	cmp	r5, #0
 801c92a:	d004      	beq.n	801c936 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801c92c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c930:	4618      	mov	r0, r3
 801c932:	f7ee fe22 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c936:	2e00      	cmp	r6, #0
 801c938:	d004      	beq.n	801c944 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801c93a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c93e:	4618      	mov	r0, r3
 801c940:	f7ee fe1b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c944:	2c00      	cmp	r4, #0
 801c946:	d010      	beq.n	801c96a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801c948:	1d3b      	adds	r3, r7, #4
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	699b      	ldr	r3, [r3, #24]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	db09      	blt.n	801c966 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801c952:	1d3b      	adds	r3, r7, #4
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	699b      	ldr	r3, [r3, #24]
 801c958:	463a      	mov	r2, r7
 801c95a:	6812      	ldr	r2, [r2, #0]
 801c95c:	6992      	ldr	r2, [r2, #24]
 801c95e:	4293      	cmp	r3, r2
 801c960:	d101      	bne.n	801c966 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801c962:	2401      	movs	r4, #1
 801c964:	e33c      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c966:	2400      	movs	r4, #0
 801c968:	e33a      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801c96a:	2500      	movs	r5, #0
 801c96c:	1d3b      	adds	r3, r7, #4
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	f103 040c 	add.w	r4, r3, #12
 801c974:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c978:	4946      	ldr	r1, [pc, #280]	; (801ca94 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801c97a:	4618      	mov	r0, r3
 801c97c:	f7ee fa45 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c980:	2601      	movs	r6, #1
 801c982:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c986:	4619      	mov	r1, r3
 801c988:	4620      	mov	r0, r4
 801c98a:	f7ee fe02 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c98e:	4603      	mov	r3, r0
 801c990:	2b00      	cmp	r3, #0
 801c992:	d015      	beq.n	801c9c0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801c994:	463b      	mov	r3, r7
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	f103 040c 	add.w	r4, r3, #12
 801c99c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c9a0:	493b      	ldr	r1, [pc, #236]	; (801ca90 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f7ee fa31 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801c9a8:	2501      	movs	r5, #1
 801c9aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c9ae:	4619      	mov	r1, r3
 801c9b0:	4620      	mov	r0, r4
 801c9b2:	f7ee fdee 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d001      	beq.n	801c9c0 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801c9bc:	2401      	movs	r4, #1
 801c9be:	e000      	b.n	801c9c2 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801c9c0:	2400      	movs	r4, #0
 801c9c2:	2d00      	cmp	r5, #0
 801c9c4:	d004      	beq.n	801c9d0 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801c9c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c9ca:	4618      	mov	r0, r3
 801c9cc:	f7ee fdd5 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c9d0:	2e00      	cmp	r6, #0
 801c9d2:	d004      	beq.n	801c9de <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801c9d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c9d8:	4618      	mov	r0, r3
 801c9da:	f7ee fdce 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801c9de:	2c00      	cmp	r4, #0
 801c9e0:	d00b      	beq.n	801c9fa <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801c9e2:	1d3b      	adds	r3, r7, #4
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	699a      	ldr	r2, [r3, #24]
 801c9e8:	463b      	mov	r3, r7
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	699b      	ldr	r3, [r3, #24]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	bf0c      	ite	eq
 801c9f2:	2301      	moveq	r3, #1
 801c9f4:	2300      	movne	r3, #0
 801c9f6:	b2dc      	uxtb	r4, r3
 801c9f8:	e2f2      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801c9fa:	2500      	movs	r5, #0
 801c9fc:	1d3b      	adds	r3, r7, #4
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	f103 040c 	add.w	r4, r3, #12
 801ca04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ca08:	4921      	ldr	r1, [pc, #132]	; (801ca90 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801ca0a:	4618      	mov	r0, r3
 801ca0c:	f7ee f9fd 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ca10:	2601      	movs	r6, #1
 801ca12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ca16:	4619      	mov	r1, r3
 801ca18:	4620      	mov	r0, r4
 801ca1a:	f7ee fdba 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801ca1e:	4603      	mov	r3, r0
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d015      	beq.n	801ca50 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801ca24:	463b      	mov	r3, r7
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	f103 040c 	add.w	r4, r3, #12
 801ca2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ca30:	4918      	ldr	r1, [pc, #96]	; (801ca94 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ca32:	4618      	mov	r0, r3
 801ca34:	f7ee f9e9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ca38:	2501      	movs	r5, #1
 801ca3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ca3e:	4619      	mov	r1, r3
 801ca40:	4620      	mov	r0, r4
 801ca42:	f7ee fda6 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801ca46:	4603      	mov	r3, r0
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	d001      	beq.n	801ca50 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801ca4c:	2401      	movs	r4, #1
 801ca4e:	e000      	b.n	801ca52 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801ca50:	2400      	movs	r4, #0
 801ca52:	2d00      	cmp	r5, #0
 801ca54:	d004      	beq.n	801ca60 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801ca56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	f7ee fd8d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ca60:	2e00      	cmp	r6, #0
 801ca62:	d004      	beq.n	801ca6e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801ca64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ca68:	4618      	mov	r0, r3
 801ca6a:	f7ee fd86 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ca6e:	2c00      	cmp	r4, #0
 801ca70:	d014      	beq.n	801ca9c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801ca72:	1d3b      	adds	r3, r7, #4
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	699a      	ldr	r2, [r3, #24]
 801ca78:	463b      	mov	r3, r7
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	699b      	ldr	r3, [r3, #24]
 801ca7e:	429a      	cmp	r2, r3
 801ca80:	bf0c      	ite	eq
 801ca82:	2301      	moveq	r3, #1
 801ca84:	2300      	movne	r3, #0
 801ca86:	b2dc      	uxtb	r4, r3
 801ca88:	e2aa      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ca8a:	bf00      	nop
 801ca8c:	08024580 	.word	0x08024580
 801ca90:	080245a8 	.word	0x080245a8
 801ca94:	0802458c 	.word	0x0802458c
 801ca98:	0802459c 	.word	0x0802459c
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801ca9c:	2500      	movs	r5, #0
 801ca9e:	1d3b      	adds	r3, r7, #4
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	f103 040c 	add.w	r4, r3, #12
 801caa6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801caaa:	49ae      	ldr	r1, [pc, #696]	; (801cd64 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801caac:	4618      	mov	r0, r3
 801caae:	f7ee f9ac 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cab2:	2601      	movs	r6, #1
 801cab4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cab8:	4619      	mov	r1, r3
 801caba:	4620      	mov	r0, r4
 801cabc:	f7ee fd69 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cac0:	4603      	mov	r3, r0
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d015      	beq.n	801caf2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801cac6:	463b      	mov	r3, r7
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	f103 040c 	add.w	r4, r3, #12
 801cace:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cad2:	49a5      	ldr	r1, [pc, #660]	; (801cd68 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801cad4:	4618      	mov	r0, r3
 801cad6:	f7ee f998 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cada:	2501      	movs	r5, #1
 801cadc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cae0:	4619      	mov	r1, r3
 801cae2:	4620      	mov	r0, r4
 801cae4:	f7ee fd55 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cae8:	4603      	mov	r3, r0
 801caea:	2b00      	cmp	r3, #0
 801caec:	d001      	beq.n	801caf2 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801caee:	2401      	movs	r4, #1
 801caf0:	e000      	b.n	801caf4 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801caf2:	2400      	movs	r4, #0
 801caf4:	2d00      	cmp	r5, #0
 801caf6:	d004      	beq.n	801cb02 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801caf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cafc:	4618      	mov	r0, r3
 801cafe:	f7ee fd3c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cb02:	2e00      	cmp	r6, #0
 801cb04:	d004      	beq.n	801cb10 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801cb06:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f7ee fd35 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cb10:	2c00      	cmp	r4, #0
 801cb12:	d010      	beq.n	801cb36 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801cb14:	1d3b      	adds	r3, r7, #4
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	699b      	ldr	r3, [r3, #24]
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	db09      	blt.n	801cb32 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801cb1e:	1d3b      	adds	r3, r7, #4
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	699b      	ldr	r3, [r3, #24]
 801cb24:	463a      	mov	r2, r7
 801cb26:	6812      	ldr	r2, [r2, #0]
 801cb28:	6992      	ldr	r2, [r2, #24]
 801cb2a:	4293      	cmp	r3, r2
 801cb2c:	d101      	bne.n	801cb32 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801cb2e:	2401      	movs	r4, #1
 801cb30:	e256      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cb32:	2400      	movs	r4, #0
 801cb34:	e254      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801cb36:	2500      	movs	r5, #0
 801cb38:	1d3b      	adds	r3, r7, #4
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	f103 040c 	add.w	r4, r3, #12
 801cb40:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cb44:	4988      	ldr	r1, [pc, #544]	; (801cd68 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801cb46:	4618      	mov	r0, r3
 801cb48:	f7ee f95f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cb4c:	2601      	movs	r6, #1
 801cb4e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cb52:	4619      	mov	r1, r3
 801cb54:	4620      	mov	r0, r4
 801cb56:	f7ee fd1c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cb5a:	4603      	mov	r3, r0
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d015      	beq.n	801cb8c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801cb60:	463b      	mov	r3, r7
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	f103 040c 	add.w	r4, r3, #12
 801cb68:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cb6c:	497d      	ldr	r1, [pc, #500]	; (801cd64 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801cb6e:	4618      	mov	r0, r3
 801cb70:	f7ee f94b 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cb74:	2501      	movs	r5, #1
 801cb76:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cb7a:	4619      	mov	r1, r3
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	f7ee fd08 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cb82:	4603      	mov	r3, r0
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d001      	beq.n	801cb8c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801cb88:	2401      	movs	r4, #1
 801cb8a:	e000      	b.n	801cb8e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801cb8c:	2400      	movs	r4, #0
 801cb8e:	2d00      	cmp	r5, #0
 801cb90:	d004      	beq.n	801cb9c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801cb92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801cb96:	4618      	mov	r0, r3
 801cb98:	f7ee fcef 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cb9c:	2e00      	cmp	r6, #0
 801cb9e:	d004      	beq.n	801cbaa <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801cba0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801cba4:	4618      	mov	r0, r3
 801cba6:	f7ee fce8 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cbaa:	2c00      	cmp	r4, #0
 801cbac:	d010      	beq.n	801cbd0 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801cbae:	463b      	mov	r3, r7
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	699b      	ldr	r3, [r3, #24]
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	db09      	blt.n	801cbcc <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801cbb8:	1d3b      	adds	r3, r7, #4
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	699b      	ldr	r3, [r3, #24]
 801cbbe:	463a      	mov	r2, r7
 801cbc0:	6812      	ldr	r2, [r2, #0]
 801cbc2:	6992      	ldr	r2, [r2, #24]
 801cbc4:	4293      	cmp	r3, r2
 801cbc6:	d101      	bne.n	801cbcc <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801cbc8:	2401      	movs	r4, #1
 801cbca:	e209      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cbcc:	2400      	movs	r4, #0
 801cbce:	e207      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801cbd0:	1d3b      	adds	r3, r7, #4
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	f103 020c 	add.w	r2, r3, #12
 801cbd8:	463b      	mov	r3, r7
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	330c      	adds	r3, #12
 801cbde:	4619      	mov	r1, r3
 801cbe0:	4610      	mov	r0, r2
 801cbe2:	f7ee fd1b 	bl	800b61c <_ZneRK12SimpleStringS1_>
 801cbe6:	4603      	mov	r3, r0
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d001      	beq.n	801cbf0 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801cbec:	2400      	movs	r4, #0
 801cbee:	e1f7      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801cbf0:	1d3b      	adds	r3, r7, #4
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	f103 040c 	add.w	r4, r3, #12
 801cbf8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cbfc:	495b      	ldr	r1, [pc, #364]	; (801cd6c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801cbfe:	4618      	mov	r0, r3
 801cc00:	f7ee f903 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cc04:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cc08:	4619      	mov	r1, r3
 801cc0a:	4620      	mov	r0, r4
 801cc0c:	f7ee fcc1 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cc10:	4603      	mov	r3, r0
 801cc12:	461c      	mov	r4, r3
 801cc14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f7ee fcae 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cc1e:	2c00      	cmp	r4, #0
 801cc20:	d00b      	beq.n	801cc3a <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801cc22:	1d3b      	adds	r3, r7, #4
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	7e1a      	ldrb	r2, [r3, #24]
 801cc28:	463b      	mov	r3, r7
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	7e1b      	ldrb	r3, [r3, #24]
 801cc2e:	429a      	cmp	r2, r3
 801cc30:	bf0c      	ite	eq
 801cc32:	2301      	moveq	r3, #1
 801cc34:	2300      	movne	r3, #0
 801cc36:	b2dc      	uxtb	r4, r3
 801cc38:	e1d2      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801cc3a:	1d3b      	adds	r3, r7, #4
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	f103 040c 	add.w	r4, r3, #12
 801cc42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cc46:	494a      	ldr	r1, [pc, #296]	; (801cd70 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801cc48:	4618      	mov	r0, r3
 801cc4a:	f7ee f8de 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cc4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cc52:	4619      	mov	r1, r3
 801cc54:	4620      	mov	r0, r4
 801cc56:	f7ee fc9c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	461c      	mov	r4, r3
 801cc5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801cc62:	4618      	mov	r0, r3
 801cc64:	f7ee fc89 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cc68:	2c00      	cmp	r4, #0
 801cc6a:	d00b      	beq.n	801cc84 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801cc6c:	1d3b      	adds	r3, r7, #4
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	699a      	ldr	r2, [r3, #24]
 801cc72:	463b      	mov	r3, r7
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	699b      	ldr	r3, [r3, #24]
 801cc78:	429a      	cmp	r2, r3
 801cc7a:	bf0c      	ite	eq
 801cc7c:	2301      	moveq	r3, #1
 801cc7e:	2300      	movne	r3, #0
 801cc80:	b2dc      	uxtb	r4, r3
 801cc82:	e1ad      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801cc84:	1d3b      	adds	r3, r7, #4
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	f103 040c 	add.w	r4, r3, #12
 801cc8c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801cc90:	4938      	ldr	r1, [pc, #224]	; (801cd74 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801cc92:	4618      	mov	r0, r3
 801cc94:	f7ee f8b9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cc98:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801cc9c:	4619      	mov	r1, r3
 801cc9e:	4620      	mov	r0, r4
 801cca0:	f7ee fc77 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cca4:	4603      	mov	r3, r0
 801cca6:	461c      	mov	r4, r3
 801cca8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ccac:	4618      	mov	r0, r3
 801ccae:	f7ee fc64 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ccb2:	2c00      	cmp	r4, #0
 801ccb4:	d00b      	beq.n	801ccce <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801ccb6:	1d3b      	adds	r3, r7, #4
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	699a      	ldr	r2, [r3, #24]
 801ccbc:	463b      	mov	r3, r7
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	699b      	ldr	r3, [r3, #24]
 801ccc2:	429a      	cmp	r2, r3
 801ccc4:	bf0c      	ite	eq
 801ccc6:	2301      	moveq	r3, #1
 801ccc8:	2300      	movne	r3, #0
 801ccca:	b2dc      	uxtb	r4, r3
 801cccc:	e188      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801ccce:	1d3b      	adds	r3, r7, #4
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	f103 040c 	add.w	r4, r3, #12
 801ccd6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ccda:	4922      	ldr	r1, [pc, #136]	; (801cd64 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ccdc:	4618      	mov	r0, r3
 801ccde:	f7ee f894 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cce2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801cce6:	4619      	mov	r1, r3
 801cce8:	4620      	mov	r0, r4
 801ccea:	f7ee fc52 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801ccee:	4603      	mov	r3, r0
 801ccf0:	461c      	mov	r4, r3
 801ccf2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	f7ee fc3f 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ccfc:	2c00      	cmp	r4, #0
 801ccfe:	d00b      	beq.n	801cd18 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801cd00:	1d3b      	adds	r3, r7, #4
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	699a      	ldr	r2, [r3, #24]
 801cd06:	463b      	mov	r3, r7
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	699b      	ldr	r3, [r3, #24]
 801cd0c:	429a      	cmp	r2, r3
 801cd0e:	bf0c      	ite	eq
 801cd10:	2301      	moveq	r3, #1
 801cd12:	2300      	movne	r3, #0
 801cd14:	b2dc      	uxtb	r4, r3
 801cd16:	e163      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801cd18:	1d3b      	adds	r3, r7, #4
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	f103 040c 	add.w	r4, r3, #12
 801cd20:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801cd24:	4910      	ldr	r1, [pc, #64]	; (801cd68 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801cd26:	4618      	mov	r0, r3
 801cd28:	f7ee f86f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cd2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801cd30:	4619      	mov	r1, r3
 801cd32:	4620      	mov	r0, r4
 801cd34:	f7ee fc2d 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cd38:	4603      	mov	r3, r0
 801cd3a:	461c      	mov	r4, r3
 801cd3c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801cd40:	4618      	mov	r0, r3
 801cd42:	f7ee fc1a 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cd46:	2c00      	cmp	r4, #0
 801cd48:	d016      	beq.n	801cd78 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801cd4a:	1d3b      	adds	r3, r7, #4
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	699a      	ldr	r2, [r3, #24]
 801cd50:	463b      	mov	r3, r7
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	699b      	ldr	r3, [r3, #24]
 801cd56:	429a      	cmp	r2, r3
 801cd58:	bf0c      	ite	eq
 801cd5a:	2301      	moveq	r3, #1
 801cd5c:	2300      	movne	r3, #0
 801cd5e:	b2dc      	uxtb	r4, r3
 801cd60:	e13e      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cd62:	bf00      	nop
 801cd64:	0802459c 	.word	0x0802459c
 801cd68:	080245a8 	.word	0x080245a8
 801cd6c:	08024584 	.word	0x08024584
 801cd70:	08024580 	.word	0x08024580
 801cd74:	0802458c 	.word	0x0802458c
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801cd78:	1d3b      	adds	r3, r7, #4
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	f103 040c 	add.w	r4, r3, #12
 801cd80:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801cd84:	4999      	ldr	r1, [pc, #612]	; (801cfec <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801cd86:	4618      	mov	r0, r3
 801cd88:	f7ee f83f 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cd8c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801cd90:	4619      	mov	r1, r3
 801cd92:	4620      	mov	r0, r4
 801cd94:	f7ee fbfd 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cd98:	4603      	mov	r3, r0
 801cd9a:	461c      	mov	r4, r3
 801cd9c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801cda0:	4618      	mov	r0, r3
 801cda2:	f7ee fbea 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cda6:	2c00      	cmp	r4, #0
 801cda8:	d026      	beq.n	801cdf8 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801cdaa:	1d3b      	adds	r3, r7, #4
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	699a      	ldr	r2, [r3, #24]
 801cdb0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801cdb4:	4611      	mov	r1, r2
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	f7ee f827 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cdbc:	463b      	mov	r3, r7
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	699a      	ldr	r2, [r3, #24]
 801cdc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801cdc6:	4611      	mov	r1, r2
 801cdc8:	4618      	mov	r0, r3
 801cdca:	f7ee f81e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cdce:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801cdd2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801cdd6:	4611      	mov	r1, r2
 801cdd8:	4618      	mov	r0, r3
 801cdda:	f7ee fbda 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cdde:	4603      	mov	r3, r0
 801cde0:	461c      	mov	r4, r3
 801cde2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801cde6:	4618      	mov	r0, r3
 801cde8:	f7ee fbc7 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cdec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	f7ee fbc2 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cdf6:	e0f3      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801cdf8:	1d3b      	adds	r3, r7, #4
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	f103 040c 	add.w	r4, r3, #12
 801ce00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ce04:	497a      	ldr	r1, [pc, #488]	; (801cff0 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801ce06:	4618      	mov	r0, r3
 801ce08:	f7ed ffff 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ce0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ce10:	4619      	mov	r1, r3
 801ce12:	4620      	mov	r0, r4
 801ce14:	f7ee fbbd 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801ce18:	4603      	mov	r3, r0
 801ce1a:	461c      	mov	r4, r3
 801ce1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ce20:	4618      	mov	r0, r3
 801ce22:	f7ee fbaa 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ce26:	2c00      	cmp	r4, #0
 801ce28:	d00b      	beq.n	801ce42 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801ce2a:	1d3b      	adds	r3, r7, #4
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	699a      	ldr	r2, [r3, #24]
 801ce30:	463b      	mov	r3, r7
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	699b      	ldr	r3, [r3, #24]
 801ce36:	429a      	cmp	r2, r3
 801ce38:	bf0c      	ite	eq
 801ce3a:	2301      	moveq	r3, #1
 801ce3c:	2300      	movne	r3, #0
 801ce3e:	b2dc      	uxtb	r4, r3
 801ce40:	e0ce      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801ce42:	1d3b      	adds	r3, r7, #4
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	f103 040c 	add.w	r4, r3, #12
 801ce4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ce4e:	4969      	ldr	r1, [pc, #420]	; (801cff4 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801ce50:	4618      	mov	r0, r3
 801ce52:	f7ed ffda 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ce56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ce5a:	4619      	mov	r1, r3
 801ce5c:	4620      	mov	r0, r4
 801ce5e:	f7ee fb98 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801ce62:	4603      	mov	r3, r0
 801ce64:	461c      	mov	r4, r3
 801ce66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f7ee fb85 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ce70:	2c00      	cmp	r4, #0
 801ce72:	d00b      	beq.n	801ce8c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801ce74:	1d3b      	adds	r3, r7, #4
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	699a      	ldr	r2, [r3, #24]
 801ce7a:	463b      	mov	r3, r7
 801ce7c:	681b      	ldr	r3, [r3, #0]
 801ce7e:	699b      	ldr	r3, [r3, #24]
 801ce80:	429a      	cmp	r2, r3
 801ce82:	bf0c      	ite	eq
 801ce84:	2301      	moveq	r3, #1
 801ce86:	2300      	movne	r3, #0
 801ce88:	b2dc      	uxtb	r4, r3
 801ce8a:	e0a9      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801ce8c:	1d3b      	adds	r3, r7, #4
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	f103 040c 	add.w	r4, r3, #12
 801ce94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ce98:	4957      	ldr	r1, [pc, #348]	; (801cff8 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	f7ed ffb5 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cea0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801cea4:	4619      	mov	r1, r3
 801cea6:	4620      	mov	r0, r4
 801cea8:	f7ee fb73 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801ceac:	4603      	mov	r3, r0
 801ceae:	461c      	mov	r4, r3
 801ceb0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f7ee fb60 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801ceba:	2c00      	cmp	r4, #0
 801cebc:	d00b      	beq.n	801ced6 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801cebe:	1d3b      	adds	r3, r7, #4
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	699a      	ldr	r2, [r3, #24]
 801cec4:	463b      	mov	r3, r7
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	699b      	ldr	r3, [r3, #24]
 801ceca:	429a      	cmp	r2, r3
 801cecc:	bf0c      	ite	eq
 801cece:	2301      	moveq	r3, #1
 801ced0:	2300      	movne	r3, #0
 801ced2:	b2dc      	uxtb	r4, r3
 801ced4:	e084      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801ced6:	1d3b      	adds	r3, r7, #4
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	f103 040c 	add.w	r4, r3, #12
 801cede:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cee2:	4946      	ldr	r1, [pc, #280]	; (801cffc <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7ed ff90 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801ceea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801ceee:	4619      	mov	r1, r3
 801cef0:	4620      	mov	r0, r4
 801cef2:	f7ee fb4e 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cef6:	4603      	mov	r3, r0
 801cef8:	461c      	mov	r4, r3
 801cefa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801cefe:	4618      	mov	r0, r3
 801cf00:	f7ee fb3b 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cf04:	2c00      	cmp	r4, #0
 801cf06:	d01c      	beq.n	801cf42 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801cf08:	1d3b      	adds	r3, r7, #4
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	ed93 7b06 	vldr	d7, [r3, #24]
 801cf10:	463b      	mov	r3, r7
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	ed93 6b06 	vldr	d6, [r3, #24]
 801cf18:	1d3b      	adds	r3, r7, #4
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	ed93 5b08 	vldr	d5, [r3, #32]
 801cf20:	eeb0 2a45 	vmov.f32	s4, s10
 801cf24:	eef0 2a65 	vmov.f32	s5, s11
 801cf28:	eeb0 1a46 	vmov.f32	s2, s12
 801cf2c:	eef0 1a66 	vmov.f32	s3, s13
 801cf30:	eeb0 0a47 	vmov.f32	s0, s14
 801cf34:	eef0 0a67 	vmov.f32	s1, s15
 801cf38:	f7f3 fe1a 	bl	8010b70 <_Z13doubles_equalddd>
 801cf3c:	4603      	mov	r3, r0
 801cf3e:	461c      	mov	r4, r3
 801cf40:	e04e      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801cf42:	1d3b      	adds	r3, r7, #4
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	f103 040c 	add.w	r4, r3, #12
 801cf4a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801cf4e:	492c      	ldr	r1, [pc, #176]	; (801d000 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801cf50:	4618      	mov	r0, r3
 801cf52:	f7ed ff5a 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801cf56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801cf5a:	4619      	mov	r1, r3
 801cf5c:	4620      	mov	r0, r4
 801cf5e:	f7ee fb18 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801cf62:	4603      	mov	r3, r0
 801cf64:	461c      	mov	r4, r3
 801cf66:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7ee fb05 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801cf70:	2c00      	cmp	r4, #0
 801cf72:	d01c      	beq.n	801cfae <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801cf74:	1d3b      	adds	r3, r7, #4
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801cf7a:	463b      	mov	r3, r7
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf80:	429a      	cmp	r2, r3
 801cf82:	d001      	beq.n	801cf88 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801cf84:	2400      	movs	r4, #0
 801cf86:	e02b      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801cf88:	1d3b      	adds	r3, r7, #4
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	6998      	ldr	r0, [r3, #24]
 801cf8e:	463b      	mov	r3, r7
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	6999      	ldr	r1, [r3, #24]
 801cf94:	1d3b      	adds	r3, r7, #4
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf9a:	461a      	mov	r2, r3
 801cf9c:	f7ed fe54 	bl	800ac48 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801cfa0:	4603      	mov	r3, r0
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	bf0c      	ite	eq
 801cfa6:	2301      	moveq	r3, #1
 801cfa8:	2300      	movne	r3, #0
 801cfaa:	b2dc      	uxtb	r4, r3
 801cfac:	e018      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801cfae:	1d3b      	adds	r3, r7, #4
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d012      	beq.n	801cfde <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801cfb8:	1d3b      	adds	r3, r7, #4
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801cfbe:	1d3b      	adds	r3, r7, #4
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	3308      	adds	r3, #8
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	1d3a      	adds	r2, r7, #4
 801cfcc:	6812      	ldr	r2, [r2, #0]
 801cfce:	6991      	ldr	r1, [r2, #24]
 801cfd0:	463a      	mov	r2, r7
 801cfd2:	6812      	ldr	r2, [r2, #0]
 801cfd4:	6992      	ldr	r2, [r2, #24]
 801cfd6:	4798      	blx	r3
 801cfd8:	4603      	mov	r3, r0
 801cfda:	461c      	mov	r4, r3
 801cfdc:	e000      	b.n	801cfe0 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801cfde:	2400      	movs	r4, #0
 801cfe0:	4623      	mov	r3, r4
}
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfec:	0802464c 	.word	0x0802464c
 801cff0:	0802462c 	.word	0x0802462c
 801cff4:	08024634 	.word	0x08024634
 801cff8:	08024640 	.word	0x08024640
 801cffc:	08024624 	.word	0x08024624
 801d000:	08024658 	.word	0x08024658

0801d004 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801d004:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d006:	b087      	sub	sp, #28
 801d008:	af00      	add	r7, sp, #0
 801d00a:	6078      	str	r0, [r7, #4]
 801d00c:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	f103 020c 	add.w	r2, r3, #12
 801d014:	683b      	ldr	r3, [r7, #0]
 801d016:	330c      	adds	r3, #12
 801d018:	4619      	mov	r1, r3
 801d01a:	4610      	mov	r0, r2
 801d01c:	f7ee fab9 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d020:	4603      	mov	r3, r0
 801d022:	2b00      	cmp	r3, #0
 801d024:	d001      	beq.n	801d02a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801d026:	2301      	movs	r3, #1
 801d028:	e03c      	b.n	801d0a4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801d02a:	2500      	movs	r5, #0
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	f103 040c 	add.w	r4, r3, #12
 801d032:	f107 0308 	add.w	r3, r7, #8
 801d036:	491d      	ldr	r1, [pc, #116]	; (801d0ac <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801d038:	4618      	mov	r0, r3
 801d03a:	f7ed fee6 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d03e:	2601      	movs	r6, #1
 801d040:	f107 0308 	add.w	r3, r7, #8
 801d044:	4619      	mov	r1, r3
 801d046:	4620      	mov	r0, r4
 801d048:	f7ee faa3 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d04c:	4603      	mov	r3, r0
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d014      	beq.n	801d07c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801d052:	683b      	ldr	r3, [r7, #0]
 801d054:	f103 040c 	add.w	r4, r3, #12
 801d058:	f107 0310 	add.w	r3, r7, #16
 801d05c:	4914      	ldr	r1, [pc, #80]	; (801d0b0 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801d05e:	4618      	mov	r0, r3
 801d060:	f7ed fed3 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d064:	2501      	movs	r5, #1
 801d066:	f107 0310 	add.w	r3, r7, #16
 801d06a:	4619      	mov	r1, r3
 801d06c:	4620      	mov	r0, r4
 801d06e:	f7ee fa90 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d072:	4603      	mov	r3, r0
 801d074:	2b00      	cmp	r3, #0
 801d076:	d001      	beq.n	801d07c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801d078:	2401      	movs	r4, #1
 801d07a:	e000      	b.n	801d07e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801d07c:	2400      	movs	r4, #0
 801d07e:	2d00      	cmp	r5, #0
 801d080:	d004      	beq.n	801d08c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801d082:	f107 0310 	add.w	r3, r7, #16
 801d086:	4618      	mov	r0, r3
 801d088:	f7ee fa77 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d08c:	2e00      	cmp	r6, #0
 801d08e:	d004      	beq.n	801d09a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801d090:	f107 0308 	add.w	r3, r7, #8
 801d094:	4618      	mov	r0, r3
 801d096:	f7ee fa70 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d09a:	2c00      	cmp	r4, #0
 801d09c:	d001      	beq.n	801d0a2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801d09e:	2301      	movs	r3, #1
 801d0a0:	e000      	b.n	801d0a4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801d0a2:	2300      	movs	r3, #0
}
 801d0a4:	4618      	mov	r0, r3
 801d0a6:	371c      	adds	r7, #28
 801d0a8:	46bd      	mov	sp, r7
 801d0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0ac:	08024634 	.word	0x08024634
 801d0b0:	0802462c 	.word	0x0802462c

0801d0b4 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801d0b4:	b590      	push	{r4, r7, lr}
 801d0b6:	b0b9      	sub	sp, #228	; 0xe4
 801d0b8:	af00      	add	r7, sp, #0
 801d0ba:	6078      	str	r0, [r7, #4]
 801d0bc:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801d0be:	683b      	ldr	r3, [r7, #0]
 801d0c0:	f103 040c 	add.w	r4, r3, #12
 801d0c4:	f107 0308 	add.w	r3, r7, #8
 801d0c8:	49d4      	ldr	r1, [pc, #848]	; (801d41c <_ZNK14MockNamedValue8toStringEv+0x368>)
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	f7ed fe9d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d0d0:	f107 0308 	add.w	r3, r7, #8
 801d0d4:	4619      	mov	r1, r3
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	f7ee fa5b 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d0dc:	4603      	mov	r3, r0
 801d0de:	461c      	mov	r4, r3
 801d0e0:	f107 0308 	add.w	r3, r7, #8
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	f7ee fa48 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d0ea:	2c00      	cmp	r4, #0
 801d0ec:	d007      	beq.n	801d0fe <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801d0ee:	683b      	ldr	r3, [r7, #0]
 801d0f0:	7e1a      	ldrb	r2, [r3, #24]
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	4611      	mov	r1, r2
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f7ee fcb0 	bl	800ba5c <_Z10StringFromb>
 801d0fc:	e23f      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801d0fe:	683b      	ldr	r3, [r7, #0]
 801d100:	f103 040c 	add.w	r4, r3, #12
 801d104:	f107 0310 	add.w	r3, r7, #16
 801d108:	49c5      	ldr	r1, [pc, #788]	; (801d420 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801d10a:	4618      	mov	r0, r3
 801d10c:	f7ed fe7d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d110:	f107 0310 	add.w	r3, r7, #16
 801d114:	4619      	mov	r1, r3
 801d116:	4620      	mov	r0, r4
 801d118:	f7ee fa3b 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d11c:	4603      	mov	r3, r0
 801d11e:	461c      	mov	r4, r3
 801d120:	f107 0310 	add.w	r3, r7, #16
 801d124:	4618      	mov	r0, r3
 801d126:	f7ee fa28 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d12a:	2c00      	cmp	r4, #0
 801d12c:	d03b      	beq.n	801d1a6 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801d12e:	683b      	ldr	r3, [r7, #0]
 801d130:	699a      	ldr	r2, [r3, #24]
 801d132:	f107 0320 	add.w	r3, r7, #32
 801d136:	4611      	mov	r1, r2
 801d138:	4618      	mov	r0, r3
 801d13a:	f7ee fce5 	bl	800bb08 <_Z10StringFromi>
 801d13e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d142:	49b8      	ldr	r1, [pc, #736]	; (801d424 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d144:	4618      	mov	r0, r3
 801d146:	f7ed fe60 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d14a:	f107 0318 	add.w	r3, r7, #24
 801d14e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d152:	f107 0120 	add.w	r1, r7, #32
 801d156:	4618      	mov	r0, r3
 801d158:	f7ee fa71 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801d15c:	683b      	ldr	r3, [r7, #0]
 801d15e:	699a      	ldr	r2, [r3, #24]
 801d160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d164:	4611      	mov	r1, r2
 801d166:	4618      	mov	r0, r3
 801d168:	f7ee fdbe 	bl	800bce8 <_Z30BracketsFormattedHexStringFromi>
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d172:	f107 0118 	add.w	r1, r7, #24
 801d176:	4618      	mov	r0, r3
 801d178:	f7ee fa61 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801d17c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d180:	4618      	mov	r0, r3
 801d182:	f7ee f9fa 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d186:	f107 0318 	add.w	r3, r7, #24
 801d18a:	4618      	mov	r0, r3
 801d18c:	f7ee f9f5 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d194:	4618      	mov	r0, r3
 801d196:	f7ee f9f0 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d19a:	f107 0320 	add.w	r3, r7, #32
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f7ee f9eb 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d1a4:	e1eb      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801d1a6:	683b      	ldr	r3, [r7, #0]
 801d1a8:	f103 040c 	add.w	r4, r3, #12
 801d1ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d1b0:	499d      	ldr	r1, [pc, #628]	; (801d428 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	f7ed fe29 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d1b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d1bc:	4619      	mov	r1, r3
 801d1be:	4620      	mov	r0, r4
 801d1c0:	f7ee f9e7 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	461c      	mov	r4, r3
 801d1c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d1cc:	4618      	mov	r0, r3
 801d1ce:	f7ee f9d4 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d1d2:	2c00      	cmp	r4, #0
 801d1d4:	d03b      	beq.n	801d24e <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	699a      	ldr	r2, [r3, #24]
 801d1da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d1de:	4611      	mov	r1, r2
 801d1e0:	4618      	mov	r0, r3
 801d1e2:	f7ee fef9 	bl	800bfd8 <_Z10StringFromj>
 801d1e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d1ea:	498e      	ldr	r1, [pc, #568]	; (801d424 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	f7ed fe0c 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d1f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d1f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d1fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801d1fe:	4618      	mov	r0, r3
 801d200:	f7ee fa1d 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	699a      	ldr	r2, [r3, #24]
 801d208:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d20c:	4611      	mov	r1, r2
 801d20e:	4618      	mov	r0, r3
 801d210:	f7ee fd86 	bl	800bd20 <_Z30BracketsFormattedHexStringFromj>
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801d21a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801d21e:	4618      	mov	r0, r3
 801d220:	f7ee fa0d 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801d224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d228:	4618      	mov	r0, r3
 801d22a:	f7ee f9a6 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d22e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d232:	4618      	mov	r0, r3
 801d234:	f7ee f9a1 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d238:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d23c:	4618      	mov	r0, r3
 801d23e:	f7ee f99c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d242:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d246:	4618      	mov	r0, r3
 801d248:	f7ee f997 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d24c:	e197      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801d24e:	683b      	ldr	r3, [r7, #0]
 801d250:	f103 040c 	add.w	r4, r3, #12
 801d254:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d258:	4974      	ldr	r1, [pc, #464]	; (801d42c <_ZNK14MockNamedValue8toStringEv+0x378>)
 801d25a:	4618      	mov	r0, r3
 801d25c:	f7ed fdd5 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d260:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d264:	4619      	mov	r1, r3
 801d266:	4620      	mov	r0, r4
 801d268:	f7ee f993 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d26c:	4603      	mov	r3, r0
 801d26e:	461c      	mov	r4, r3
 801d270:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d274:	4618      	mov	r0, r3
 801d276:	f7ee f980 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d27a:	2c00      	cmp	r4, #0
 801d27c:	d03b      	beq.n	801d2f6 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	699a      	ldr	r2, [r3, #24]
 801d282:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d286:	4611      	mov	r1, r2
 801d288:	4618      	mov	r0, r3
 801d28a:	f7ee fc4f 	bl	800bb2c <_Z10StringFroml>
 801d28e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d292:	4964      	ldr	r1, [pc, #400]	; (801d424 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d294:	4618      	mov	r0, r3
 801d296:	f7ed fdb8 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d29a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d29e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801d2a2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	f7ee f9c9 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801d2ac:	683b      	ldr	r3, [r7, #0]
 801d2ae:	699a      	ldr	r2, [r3, #24]
 801d2b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d2b4:	4611      	mov	r1, r2
 801d2b6:	4618      	mov	r0, r3
 801d2b8:	f7ee fd4e 	bl	800bd58 <_Z30BracketsFormattedHexStringFroml>
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d2c2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f7ee f9b9 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801d2cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	f7ee f952 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d2d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7ee f94d 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d2e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d2e4:	4618      	mov	r0, r3
 801d2e6:	f7ee f948 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d2ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f7ee f943 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d2f4:	e143      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801d2f6:	683b      	ldr	r3, [r7, #0]
 801d2f8:	f103 040c 	add.w	r4, r3, #12
 801d2fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d300:	494b      	ldr	r1, [pc, #300]	; (801d430 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801d302:	4618      	mov	r0, r3
 801d304:	f7ed fd81 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d308:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d30c:	4619      	mov	r1, r3
 801d30e:	4620      	mov	r0, r4
 801d310:	f7ee f93f 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d314:	4603      	mov	r3, r0
 801d316:	461c      	mov	r4, r3
 801d318:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d31c:	4618      	mov	r0, r3
 801d31e:	f7ee f92c 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d322:	2c00      	cmp	r4, #0
 801d324:	d03b      	beq.n	801d39e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801d326:	683b      	ldr	r3, [r7, #0]
 801d328:	699a      	ldr	r2, [r3, #24]
 801d32a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d32e:	4611      	mov	r1, r2
 801d330:	4618      	mov	r0, r3
 801d332:	f7ee fe63 	bl	800bffc <_Z10StringFromm>
 801d336:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d33a:	493a      	ldr	r1, [pc, #232]	; (801d424 <_ZNK14MockNamedValue8toStringEv+0x370>)
 801d33c:	4618      	mov	r0, r3
 801d33e:	f7ed fd64 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d342:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d346:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801d34a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801d34e:	4618      	mov	r0, r3
 801d350:	f7ee f975 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801d354:	683b      	ldr	r3, [r7, #0]
 801d356:	699a      	ldr	r2, [r3, #24]
 801d358:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d35c:	4611      	mov	r1, r2
 801d35e:	4618      	mov	r0, r3
 801d360:	f7ee fd16 	bl	800bd90 <_Z30BracketsFormattedHexStringFromm>
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801d36a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801d36e:	4618      	mov	r0, r3
 801d370:	f7ee f965 	bl	800b63e <_ZNK12SimpleStringplERKS_>
 801d374:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d378:	4618      	mov	r0, r3
 801d37a:	f7ee f8fe 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d37e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d382:	4618      	mov	r0, r3
 801d384:	f7ee f8f9 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d388:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d38c:	4618      	mov	r0, r3
 801d38e:	f7ee f8f4 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d392:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d396:	4618      	mov	r0, r3
 801d398:	f7ee f8ef 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d39c:	e0ef      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801d39e:	683b      	ldr	r3, [r7, #0]
 801d3a0:	f103 040c 	add.w	r4, r3, #12
 801d3a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d3a8:	4922      	ldr	r1, [pc, #136]	; (801d434 <_ZNK14MockNamedValue8toStringEv+0x380>)
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	f7ed fd2d 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d3b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d3b4:	4619      	mov	r1, r3
 801d3b6:	4620      	mov	r0, r4
 801d3b8:	f7ee f8eb 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	461c      	mov	r4, r3
 801d3c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	f7ee f8d8 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d3ca:	2c00      	cmp	r4, #0
 801d3cc:	d006      	beq.n	801d3dc <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801d3ce:	683b      	ldr	r3, [r7, #0]
 801d3d0:	699b      	ldr	r3, [r3, #24]
 801d3d2:	4619      	mov	r1, r3
 801d3d4:	6878      	ldr	r0, [r7, #4]
 801d3d6:	f7ed fd18 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d3da:	e0d0      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801d3dc:	683b      	ldr	r3, [r7, #0]
 801d3de:	f103 040c 	add.w	r4, r3, #12
 801d3e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d3e6:	4914      	ldr	r1, [pc, #80]	; (801d438 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801d3e8:	4618      	mov	r0, r3
 801d3ea:	f7ed fd0e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d3ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d3f2:	4619      	mov	r1, r3
 801d3f4:	4620      	mov	r0, r4
 801d3f6:	f7ee f8cc 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d3fa:	4603      	mov	r3, r0
 801d3fc:	461c      	mov	r4, r3
 801d3fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d402:	4618      	mov	r0, r3
 801d404:	f7ee f8b9 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d408:	2c00      	cmp	r4, #0
 801d40a:	d017      	beq.n	801d43c <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801d40c:	683b      	ldr	r3, [r7, #0]
 801d40e:	699a      	ldr	r2, [r3, #24]
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	4611      	mov	r1, r2
 801d414:	4618      	mov	r0, r3
 801d416:	f7ee fb9b 	bl	800bb50 <_Z10StringFromPKv>
 801d41a:	e0b0      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801d41c:	08024584 	.word	0x08024584
 801d420:	08024580 	.word	0x08024580
 801d424:	08024670 	.word	0x08024670
 801d428:	0802458c 	.word	0x0802458c
 801d42c:	0802459c 	.word	0x0802459c
 801d430:	080245a8 	.word	0x080245a8
 801d434:	0802464c 	.word	0x0802464c
 801d438:	0802462c 	.word	0x0802462c
    else if (type_ == "void (*)()")
 801d43c:	683b      	ldr	r3, [r7, #0]
 801d43e:	f103 040c 	add.w	r4, r3, #12
 801d442:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d446:	4950      	ldr	r1, [pc, #320]	; (801d588 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801d448:	4618      	mov	r0, r3
 801d44a:	f7ed fcde 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d44e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d452:	4619      	mov	r1, r3
 801d454:	4620      	mov	r0, r4
 801d456:	f7ee f89c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d45a:	4603      	mov	r3, r0
 801d45c:	461c      	mov	r4, r3
 801d45e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d462:	4618      	mov	r0, r3
 801d464:	f7ee f889 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d468:	2c00      	cmp	r4, #0
 801d46a:	d007      	beq.n	801d47c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801d46c:	683b      	ldr	r3, [r7, #0]
 801d46e:	699a      	ldr	r2, [r3, #24]
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	4611      	mov	r1, r2
 801d474:	4618      	mov	r0, r3
 801d476:	f7ee fb95 	bl	800bba4 <_Z10StringFromPFvvE>
 801d47a:	e080      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801d47c:	683b      	ldr	r3, [r7, #0]
 801d47e:	f103 040c 	add.w	r4, r3, #12
 801d482:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d486:	4941      	ldr	r1, [pc, #260]	; (801d58c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801d488:	4618      	mov	r0, r3
 801d48a:	f7ed fcbe 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d48e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d492:	4619      	mov	r1, r3
 801d494:	4620      	mov	r0, r4
 801d496:	f7ee f87c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d49a:	4603      	mov	r3, r0
 801d49c:	461c      	mov	r4, r3
 801d49e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	f7ee f869 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d4a8:	2c00      	cmp	r4, #0
 801d4aa:	d007      	beq.n	801d4bc <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801d4ac:	683b      	ldr	r3, [r7, #0]
 801d4ae:	699a      	ldr	r2, [r3, #24]
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	4611      	mov	r1, r2
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	f7ee fb4b 	bl	800bb50 <_Z10StringFromPKv>
 801d4ba:	e060      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801d4bc:	683b      	ldr	r3, [r7, #0]
 801d4be:	f103 040c 	add.w	r4, r3, #12
 801d4c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d4c6:	4932      	ldr	r1, [pc, #200]	; (801d590 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7ed fc9e 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d4ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d4d2:	4619      	mov	r1, r3
 801d4d4:	4620      	mov	r0, r4
 801d4d6:	f7ee f85c 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d4da:	4603      	mov	r3, r0
 801d4dc:	461c      	mov	r4, r3
 801d4de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	f7ee f849 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d4e8:	2c00      	cmp	r4, #0
 801d4ea:	d00c      	beq.n	801d506 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801d4ec:	683b      	ldr	r3, [r7, #0]
 801d4ee:	ed93 7b06 	vldr	d7, [r3, #24]
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	2106      	movs	r1, #6
 801d4f6:	eeb0 0a47 	vmov.f32	s0, s14
 801d4fa:	eef0 0a67 	vmov.f32	s1, s15
 801d4fe:	4618      	mov	r0, r3
 801d500:	f7ee fd00 	bl	800bf04 <_Z10StringFromdi>
 801d504:	e03b      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801d506:	683b      	ldr	r3, [r7, #0]
 801d508:	f103 040c 	add.w	r4, r3, #12
 801d50c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d510:	4920      	ldr	r1, [pc, #128]	; (801d594 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801d512:	4618      	mov	r0, r3
 801d514:	f7ed fc79 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801d518:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d51c:	4619      	mov	r1, r3
 801d51e:	4620      	mov	r0, r4
 801d520:	f7ee f837 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d524:	4603      	mov	r3, r0
 801d526:	461c      	mov	r4, r3
 801d528:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d52c:	4618      	mov	r0, r3
 801d52e:	f7ee f824 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d532:	2c00      	cmp	r4, #0
 801d534:	d008      	beq.n	801d548 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801d536:	683b      	ldr	r3, [r7, #0]
 801d538:	6999      	ldr	r1, [r3, #24]
 801d53a:	683b      	ldr	r3, [r7, #0]
 801d53c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	4618      	mov	r0, r3
 801d542:	f7ee fe73 	bl	800c22c <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801d546:	e01a      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801d548:	683b      	ldr	r3, [r7, #0]
 801d54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d00b      	beq.n	801d568 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801d550:	683b      	ldr	r3, [r7, #0]
 801d552:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801d554:	683b      	ldr	r3, [r7, #0]
 801d556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d558:	681b      	ldr	r3, [r3, #0]
 801d55a:	330c      	adds	r3, #12
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	683a      	ldr	r2, [r7, #0]
 801d560:	6992      	ldr	r2, [r2, #24]
 801d562:	6878      	ldr	r0, [r7, #4]
 801d564:	4798      	blx	r3
 801d566:	e00a      	b.n	801d57e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801d568:	683b      	ldr	r3, [r7, #0]
 801d56a:	330c      	adds	r3, #12
 801d56c:	4618      	mov	r0, r3
 801d56e:	f7ed ffd7 	bl	800b520 <_ZNK12SimpleString12asCharStringEv>
 801d572:	4602      	mov	r2, r0
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	4908      	ldr	r1, [pc, #32]	; (801d598 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801d578:	4618      	mov	r0, r3
 801d57a:	f7ee fd05 	bl	800bf88 <_Z16StringFromFormatPKcz>

}
 801d57e:	6878      	ldr	r0, [r7, #4]
 801d580:	37e4      	adds	r7, #228	; 0xe4
 801d582:	46bd      	mov	sp, r7
 801d584:	bd90      	pop	{r4, r7, pc}
 801d586:	bf00      	nop
 801d588:	08024640 	.word	0x08024640
 801d58c:	08024634 	.word	0x08024634
 801d590:	08024624 	.word	0x08024624
 801d594:	08024658 	.word	0x08024658
 801d598:	08024674 	.word	0x08024674

0801d59c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801d59c:	b480      	push	{r7}
 801d59e:	b083      	sub	sp, #12
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
 801d5a4:	6039      	str	r1, [r7, #0]
    next_ = node;
 801d5a6:	687b      	ldr	r3, [r7, #4]
 801d5a8:	683a      	ldr	r2, [r7, #0]
 801d5aa:	605a      	str	r2, [r3, #4]
}
 801d5ac:	bf00      	nop
 801d5ae:	370c      	adds	r7, #12
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5b6:	4770      	bx	lr

0801d5b8 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801d5b8:	b480      	push	{r7}
 801d5ba:	b083      	sub	sp, #12
 801d5bc:	af00      	add	r7, sp, #0
 801d5be:	6078      	str	r0, [r7, #4]
    return next_;
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	685b      	ldr	r3, [r3, #4]
}
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	370c      	adds	r7, #12
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5ce:	4770      	bx	lr

0801d5d0 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801d5d0:	b480      	push	{r7}
 801d5d2:	b083      	sub	sp, #12
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	6078      	str	r0, [r7, #4]
    return data_;
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	681b      	ldr	r3, [r3, #0]
}
 801d5dc:	4618      	mov	r0, r3
 801d5de:	370c      	adds	r7, #12
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5e6:	4770      	bx	lr

0801d5e8 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801d5e8:	b580      	push	{r7, lr}
 801d5ea:	b082      	sub	sp, #8
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	6078      	str	r0, [r7, #4]
    delete data_;
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d004      	beq.n	801d602 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801d5f8:	681a      	ldr	r2, [r3, #0]
 801d5fa:	3204      	adds	r2, #4
 801d5fc:	6812      	ldr	r2, [r2, #0]
 801d5fe:	4618      	mov	r0, r3
 801d600:	4790      	blx	r2
}
 801d602:	bf00      	nop
 801d604:	3708      	adds	r7, #8
 801d606:	46bd      	mov	sp, r7
 801d608:	bd80      	pop	{r7, pc}

0801d60a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801d60a:	b480      	push	{r7}
 801d60c:	b083      	sub	sp, #12
 801d60e:	af00      	add	r7, sp, #0
 801d610:	6078      	str	r0, [r7, #4]
 801d612:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	683a      	ldr	r2, [r7, #0]
 801d618:	601a      	str	r2, [r3, #0]
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	2200      	movs	r2, #0
 801d61e:	605a      	str	r2, [r3, #4]
{
}
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	4618      	mov	r0, r3
 801d624:	370c      	adds	r7, #12
 801d626:	46bd      	mov	sp, r7
 801d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d62c:	4770      	bx	lr

0801d62e <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801d62e:	b580      	push	{r7, lr}
 801d630:	b082      	sub	sp, #8
 801d632:	af00      	add	r7, sp, #0
 801d634:	6078      	str	r0, [r7, #4]
 801d636:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801d638:	683b      	ldr	r3, [r7, #0]
 801d63a:	6819      	ldr	r1, [r3, #0]
 801d63c:	683b      	ldr	r3, [r7, #0]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	335c      	adds	r3, #92	; 0x5c
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	687a      	ldr	r2, [r7, #4]
 801d648:	4610      	mov	r0, r2
 801d64a:	4798      	blx	r3
}
 801d64c:	6878      	ldr	r0, [r7, #4]
 801d64e:	3708      	adds	r7, #8
 801d650:	46bd      	mov	sp, r7
 801d652:	bd80      	pop	{r7, pc}

0801d654 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b082      	sub	sp, #8
 801d658:	af00      	add	r7, sp, #0
 801d65a:	6078      	str	r0, [r7, #4]
 801d65c:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801d65e:	683b      	ldr	r3, [r7, #0]
 801d660:	6819      	ldr	r1, [r3, #0]
 801d662:	683b      	ldr	r3, [r7, #0]
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	3360      	adds	r3, #96	; 0x60
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	687a      	ldr	r2, [r7, #4]
 801d66e:	4610      	mov	r0, r2
 801d670:	4798      	blx	r3
}
 801d672:	6878      	ldr	r0, [r7, #4]
 801d674:	3708      	adds	r7, #8
 801d676:	46bd      	mov	sp, r7
 801d678:	bd80      	pop	{r7, pc}

0801d67a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801d67a:	b480      	push	{r7}
 801d67c:	b083      	sub	sp, #12
 801d67e:	af00      	add	r7, sp, #0
 801d680:	6078      	str	r0, [r7, #4]
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	2200      	movs	r2, #0
 801d686:	601a      	str	r2, [r3, #0]
{
}
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	4618      	mov	r0, r3
 801d68c:	370c      	adds	r7, #12
 801d68e:	46bd      	mov	sp, r7
 801d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d694:	4770      	bx	lr

0801d696 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801d696:	b580      	push	{r7, lr}
 801d698:	b084      	sub	sp, #16
 801d69a:	af00      	add	r7, sp, #0
 801d69c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d016      	beq.n	801d6d4 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	681b      	ldr	r3, [r3, #0]
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	f7ff ff84 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 801d6b0:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7ff ff96 	bl	801d5e8 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d003      	beq.n	801d6cc <_ZN18MockNamedValueList5clearEv+0x36>
 801d6c4:	2108      	movs	r1, #8
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	f7ea fff0 	bl	80086ac <_ZdlPvj>
        head_ = n;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	68fa      	ldr	r2, [r7, #12]
 801d6d0:	601a      	str	r2, [r3, #0]
    while (head_) {
 801d6d2:	e7e4      	b.n	801d69e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801d6d4:	bf00      	nop
 801d6d6:	3710      	adds	r7, #16
 801d6d8:	46bd      	mov	sp, r7
 801d6da:	bd80      	pop	{r7, pc}

0801d6dc <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801d6dc:	b590      	push	{r4, r7, lr}
 801d6de:	b085      	sub	sp, #20
 801d6e0:	af00      	add	r7, sp, #0
 801d6e2:	6078      	str	r0, [r7, #4]
 801d6e4:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801d6e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 801d6ea:	4916      	ldr	r1, [pc, #88]	; (801d744 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801d6ec:	2008      	movs	r0, #8
 801d6ee:	f7ea ffc9 	bl	8008684 <_ZnwjPKci>
 801d6f2:	4604      	mov	r4, r0
 801d6f4:	6839      	ldr	r1, [r7, #0]
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	f7ff ff87 	bl	801d60a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801d6fc:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	2b00      	cmp	r3, #0
 801d704:	d103      	bne.n	801d70e <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	68ba      	ldr	r2, [r7, #8]
 801d70a:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801d70c:	e016      	b.n	801d73c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801d714:	68f8      	ldr	r0, [r7, #12]
 801d716:	f7ff ff4f 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 801d71a:	4603      	mov	r3, r0
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	bf14      	ite	ne
 801d720:	2301      	movne	r3, #1
 801d722:	2300      	moveq	r3, #0
 801d724:	b2db      	uxtb	r3, r3
 801d726:	2b00      	cmp	r3, #0
 801d728:	d004      	beq.n	801d734 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801d72a:	68f8      	ldr	r0, [r7, #12]
 801d72c:	f7ff ff44 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 801d730:	60f8      	str	r0, [r7, #12]
 801d732:	e7ef      	b.n	801d714 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801d734:	68b9      	ldr	r1, [r7, #8]
 801d736:	68f8      	ldr	r0, [r7, #12]
 801d738:	f7ff ff30 	bl	801d59c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801d73c:	bf00      	nop
 801d73e:	3714      	adds	r7, #20
 801d740:	46bd      	mov	sp, r7
 801d742:	bd90      	pop	{r4, r7, pc}
 801d744:	080245bc 	.word	0x080245bc

0801d748 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801d748:	b590      	push	{r4, r7, lr}
 801d74a:	b087      	sub	sp, #28
 801d74c:	af00      	add	r7, sp, #0
 801d74e:	6078      	str	r0, [r7, #4]
 801d750:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	617b      	str	r3, [r7, #20]
 801d758:	697b      	ldr	r3, [r7, #20]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d01e      	beq.n	801d79c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801d75e:	f107 030c 	add.w	r3, r7, #12
 801d762:	6979      	ldr	r1, [r7, #20]
 801d764:	4618      	mov	r0, r3
 801d766:	f7ff ff62 	bl	801d62e <_ZNK22MockNamedValueListNode7getNameEv>
 801d76a:	f107 030c 	add.w	r3, r7, #12
 801d76e:	6839      	ldr	r1, [r7, #0]
 801d770:	4618      	mov	r0, r3
 801d772:	f7ed ff0e 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d776:	4603      	mov	r3, r0
 801d778:	461c      	mov	r4, r3
 801d77a:	f107 030c 	add.w	r3, r7, #12
 801d77e:	4618      	mov	r0, r3
 801d780:	f7ed fefb 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d784:	2c00      	cmp	r4, #0
 801d786:	d004      	beq.n	801d792 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801d788:	6978      	ldr	r0, [r7, #20]
 801d78a:	f7ff ff21 	bl	801d5d0 <_ZN22MockNamedValueListNode4itemEv>
 801d78e:	4603      	mov	r3, r0
 801d790:	e005      	b.n	801d79e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801d792:	6978      	ldr	r0, [r7, #20]
 801d794:	f7ff ff10 	bl	801d5b8 <_ZN22MockNamedValueListNode4nextEv>
 801d798:	6178      	str	r0, [r7, #20]
 801d79a:	e7dd      	b.n	801d758 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801d79c:	2300      	movs	r3, #0
}
 801d79e:	4618      	mov	r0, r3
 801d7a0:	371c      	adds	r7, #28
 801d7a2:	46bd      	mov	sp, r7
 801d7a4:	bd90      	pop	{r4, r7, pc}

0801d7a6 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801d7a6:	b480      	push	{r7}
 801d7a8:	b083      	sub	sp, #12
 801d7aa:	af00      	add	r7, sp, #0
 801d7ac:	6078      	str	r0, [r7, #4]
    return head_;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	681b      	ldr	r3, [r3, #0]
}
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	370c      	adds	r7, #12
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7bc:	4770      	bx	lr

0801d7be <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d7be:	b580      	push	{r7, lr}
 801d7c0:	b084      	sub	sp, #16
 801d7c2:	af00      	add	r7, sp, #0
 801d7c4:	60f8      	str	r0, [r7, #12]
 801d7c6:	60b9      	str	r1, [r7, #8]
 801d7c8:	607a      	str	r2, [r7, #4]
 801d7ca:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	68b9      	ldr	r1, [r7, #8]
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	f7ed fb6e 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	687a      	ldr	r2, [r7, #4]
 801d7da:	609a      	str	r2, [r3, #8]
 801d7dc:	68fb      	ldr	r3, [r7, #12]
 801d7de:	2200      	movs	r2, #0
 801d7e0:	60da      	str	r2, [r3, #12]
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	683a      	ldr	r2, [r7, #0]
 801d7e6:	611a      	str	r2, [r3, #16]
 801d7e8:	68fb      	ldr	r3, [r7, #12]
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	3710      	adds	r7, #16
 801d7ee:	46bd      	mov	sp, r7
 801d7f0:	bd80      	pop	{r7, pc}

0801d7f2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d7f2:	b580      	push	{r7, lr}
 801d7f4:	b084      	sub	sp, #16
 801d7f6:	af00      	add	r7, sp, #0
 801d7f8:	60f8      	str	r0, [r7, #12]
 801d7fa:	60b9      	str	r1, [r7, #8]
 801d7fc:	607a      	str	r2, [r7, #4]
 801d7fe:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	68b9      	ldr	r1, [r7, #8]
 801d804:	4618      	mov	r0, r3
 801d806:	f7ed fb54 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	2200      	movs	r2, #0
 801d80e:	609a      	str	r2, [r3, #8]
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	687a      	ldr	r2, [r7, #4]
 801d814:	60da      	str	r2, [r3, #12]
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	683a      	ldr	r2, [r7, #0]
 801d81a:	611a      	str	r2, [r3, #16]
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	4618      	mov	r0, r3
 801d820:	3710      	adds	r7, #16
 801d822:	46bd      	mov	sp, r7
 801d824:	bd80      	pop	{r7, pc}

0801d826 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801d826:	b580      	push	{r7, lr}
 801d828:	b084      	sub	sp, #16
 801d82a:	af00      	add	r7, sp, #0
 801d82c:	60f8      	str	r0, [r7, #12]
 801d82e:	60b9      	str	r1, [r7, #8]
 801d830:	607a      	str	r2, [r7, #4]
 801d832:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	68b9      	ldr	r1, [r7, #8]
 801d838:	4618      	mov	r0, r3
 801d83a:	f7ed fb3a 	bl	800aeb2 <_ZN12SimpleStringC1ERKS_>
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	687a      	ldr	r2, [r7, #4]
 801d842:	609a      	str	r2, [r3, #8]
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	683a      	ldr	r2, [r7, #0]
 801d848:	60da      	str	r2, [r3, #12]
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	69ba      	ldr	r2, [r7, #24]
 801d84e:	611a      	str	r2, [r3, #16]
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	4618      	mov	r0, r3
 801d854:	3710      	adds	r7, #16
 801d856:	46bd      	mov	sp, r7
 801d858:	bd80      	pop	{r7, pc}
	...

0801d85c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801d85c:	b480      	push	{r7}
 801d85e:	b083      	sub	sp, #12
 801d860:	af00      	add	r7, sp, #0
 801d862:	6078      	str	r0, [r7, #4]
 801d864:	4a06      	ldr	r2, [pc, #24]	; (801d880 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	601a      	str	r2, [r3, #0]
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	2200      	movs	r2, #0
 801d86e:	605a      	str	r2, [r3, #4]
{

}
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	4618      	mov	r0, r3
 801d874:	370c      	adds	r7, #12
 801d876:	46bd      	mov	sp, r7
 801d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d87c:	4770      	bx	lr
 801d87e:	bf00      	nop
 801d880:	0802690c 	.word	0x0802690c

0801d884 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801d884:	b580      	push	{r7, lr}
 801d886:	b082      	sub	sp, #8
 801d888:	af00      	add	r7, sp, #0
 801d88a:	6078      	str	r0, [r7, #4]
 801d88c:	4a05      	ldr	r2, [pc, #20]	; (801d8a4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	601a      	str	r2, [r3, #0]
{
    clear();
 801d892:	6878      	ldr	r0, [r7, #4]
 801d894:	f000 f825 	bl	801d8e2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	4618      	mov	r0, r3
 801d89c:	3708      	adds	r7, #8
 801d89e:	46bd      	mov	sp, r7
 801d8a0:	bd80      	pop	{r7, pc}
 801d8a2:	bf00      	nop
 801d8a4:	0802690c 	.word	0x0802690c

0801d8a8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801d8a8:	b580      	push	{r7, lr}
 801d8aa:	b082      	sub	sp, #8
 801d8ac:	af00      	add	r7, sp, #0
 801d8ae:	6078      	str	r0, [r7, #4]
}
 801d8b0:	6878      	ldr	r0, [r7, #4]
 801d8b2:	f7ff ffe7 	bl	801d884 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801d8b6:	2108      	movs	r1, #8
 801d8b8:	6878      	ldr	r0, [r7, #4]
 801d8ba:	f7ea fef7 	bl	80086ac <_ZdlPvj>
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	3708      	adds	r7, #8
 801d8c4:	46bd      	mov	sp, r7
 801d8c6:	bd80      	pop	{r7, pc}

0801d8c8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801d8c8:	b580      	push	{r7, lr}
 801d8ca:	b082      	sub	sp, #8
 801d8cc:	af00      	add	r7, sp, #0
 801d8ce:	6078      	str	r0, [r7, #4]
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	4618      	mov	r0, r3
 801d8d4:	f7ed fe51 	bl	800b57a <_ZN12SimpleStringD1Ev>
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	4618      	mov	r0, r3
 801d8dc:	3708      	adds	r7, #8
 801d8de:	46bd      	mov	sp, r7
 801d8e0:	bd80      	pop	{r7, pc}

0801d8e2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801d8e2:	b590      	push	{r4, r7, lr}
 801d8e4:	b085      	sub	sp, #20
 801d8e6:	af00      	add	r7, sp, #0
 801d8e8:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	685b      	ldr	r3, [r3, #4]
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d012      	beq.n	801d918 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	685b      	ldr	r3, [r3, #4]
 801d8f6:	691b      	ldr	r3, [r3, #16]
 801d8f8:	60fb      	str	r3, [r7, #12]
        delete head_;
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	685c      	ldr	r4, [r3, #4]
 801d8fe:	2c00      	cmp	r4, #0
 801d900:	d006      	beq.n	801d910 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801d902:	4620      	mov	r0, r4
 801d904:	f7ff ffe0 	bl	801d8c8 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801d908:	2114      	movs	r1, #20
 801d90a:	4620      	mov	r0, r4
 801d90c:	f7ea fece 	bl	80086ac <_ZdlPvj>
        head_ = next;
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	68fa      	ldr	r2, [r7, #12]
 801d914:	605a      	str	r2, [r3, #4]
    while (head_) {
 801d916:	e7e8      	b.n	801d8ea <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801d918:	bf00      	nop
 801d91a:	3714      	adds	r7, #20
 801d91c:	46bd      	mov	sp, r7
 801d91e:	bd90      	pop	{r4, r7, pc}

0801d920 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801d920:	b590      	push	{r4, r7, lr}
 801d922:	b085      	sub	sp, #20
 801d924:	af00      	add	r7, sp, #0
 801d926:	60f8      	str	r0, [r7, #12]
 801d928:	60b9      	str	r1, [r7, #8]
 801d92a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801d92c:	f240 227a 	movw	r2, #634	; 0x27a
 801d930:	4908      	ldr	r1, [pc, #32]	; (801d954 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801d932:	2014      	movs	r0, #20
 801d934:	f7ea fea6 	bl	8008684 <_ZnwjPKci>
 801d938:	4604      	mov	r4, r0
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	685b      	ldr	r3, [r3, #4]
 801d93e:	687a      	ldr	r2, [r7, #4]
 801d940:	68b9      	ldr	r1, [r7, #8]
 801d942:	4620      	mov	r0, r4
 801d944:	f7ff ff3b 	bl	801d7be <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801d948:	68fb      	ldr	r3, [r7, #12]
 801d94a:	605c      	str	r4, [r3, #4]
}
 801d94c:	bf00      	nop
 801d94e:	3714      	adds	r7, #20
 801d950:	46bd      	mov	sp, r7
 801d952:	bd90      	pop	{r4, r7, pc}
 801d954:	080245bc 	.word	0x080245bc

0801d958 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801d958:	b590      	push	{r4, r7, lr}
 801d95a:	b085      	sub	sp, #20
 801d95c:	af00      	add	r7, sp, #0
 801d95e:	60f8      	str	r0, [r7, #12]
 801d960:	60b9      	str	r1, [r7, #8]
 801d962:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801d964:	f240 227f 	movw	r2, #639	; 0x27f
 801d968:	4908      	ldr	r1, [pc, #32]	; (801d98c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801d96a:	2014      	movs	r0, #20
 801d96c:	f7ea fe8a 	bl	8008684 <_ZnwjPKci>
 801d970:	4604      	mov	r4, r0
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	685b      	ldr	r3, [r3, #4]
 801d976:	687a      	ldr	r2, [r7, #4]
 801d978:	68b9      	ldr	r1, [r7, #8]
 801d97a:	4620      	mov	r0, r4
 801d97c:	f7ff ff39 	bl	801d7f2 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801d980:	68fb      	ldr	r3, [r7, #12]
 801d982:	605c      	str	r4, [r3, #4]
}
 801d984:	bf00      	nop
 801d986:	3714      	adds	r7, #20
 801d988:	46bd      	mov	sp, r7
 801d98a:	bd90      	pop	{r4, r7, pc}
 801d98c:	080245bc 	.word	0x080245bc

0801d990 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801d990:	b580      	push	{r7, lr}
 801d992:	b084      	sub	sp, #16
 801d994:	af00      	add	r7, sp, #0
 801d996:	6078      	str	r0, [r7, #4]
 801d998:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	685b      	ldr	r3, [r3, #4]
 801d99e:	60fb      	str	r3, [r7, #12]
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d017      	beq.n	801d9d6 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	6839      	ldr	r1, [r7, #0]
 801d9aa:	4618      	mov	r0, r3
 801d9ac:	f7ed fdf1 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801d9b0:	4603      	mov	r3, r0
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d005      	beq.n	801d9c2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801d9b6:	68fb      	ldr	r3, [r7, #12]
 801d9b8:	689b      	ldr	r3, [r3, #8]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d001      	beq.n	801d9c2 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801d9be:	2301      	movs	r3, #1
 801d9c0:	e000      	b.n	801d9c4 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d002      	beq.n	801d9ce <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	689b      	ldr	r3, [r3, #8]
 801d9cc:	e004      	b.n	801d9d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	691b      	ldr	r3, [r3, #16]
 801d9d2:	60fb      	str	r3, [r7, #12]
 801d9d4:	e7e4      	b.n	801d9a0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801d9d6:	2300      	movs	r3, #0
}
 801d9d8:	4618      	mov	r0, r3
 801d9da:	3710      	adds	r7, #16
 801d9dc:	46bd      	mov	sp, r7
 801d9de:	bd80      	pop	{r7, pc}

0801d9e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801d9e0:	b580      	push	{r7, lr}
 801d9e2:	b084      	sub	sp, #16
 801d9e4:	af00      	add	r7, sp, #0
 801d9e6:	6078      	str	r0, [r7, #4]
 801d9e8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	685b      	ldr	r3, [r3, #4]
 801d9ee:	60fb      	str	r3, [r7, #12]
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d017      	beq.n	801da26 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	6839      	ldr	r1, [r7, #0]
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f7ed fdc9 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801da00:	4603      	mov	r3, r0
 801da02:	2b00      	cmp	r3, #0
 801da04:	d005      	beq.n	801da12 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	68db      	ldr	r3, [r3, #12]
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d001      	beq.n	801da12 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801da0e:	2301      	movs	r3, #1
 801da10:	e000      	b.n	801da14 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801da12:	2300      	movs	r3, #0
 801da14:	2b00      	cmp	r3, #0
 801da16:	d002      	beq.n	801da1e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	68db      	ldr	r3, [r3, #12]
 801da1c:	e004      	b.n	801da28 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	691b      	ldr	r3, [r3, #16]
 801da22:	60fb      	str	r3, [r7, #12]
 801da24:	e7e4      	b.n	801d9f0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801da26:	2300      	movs	r3, #0
}
 801da28:	4618      	mov	r0, r3
 801da2a:	3710      	adds	r7, #16
 801da2c:	46bd      	mov	sp, r7
 801da2e:	bd80      	pop	{r7, pc}

0801da30 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801da30:	b590      	push	{r4, r7, lr}
 801da32:	b087      	sub	sp, #28
 801da34:	af02      	add	r7, sp, #8
 801da36:	6078      	str	r0, [r7, #4]
 801da38:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801da3a:	683b      	ldr	r3, [r7, #0]
 801da3c:	685b      	ldr	r3, [r3, #4]
 801da3e:	60fb      	str	r3, [r7, #12]
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	2b00      	cmp	r3, #0
 801da44:	d018      	beq.n	801da78 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801da46:	f240 2293 	movw	r2, #659	; 0x293
 801da4a:	490d      	ldr	r1, [pc, #52]	; (801da80 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801da4c:	2014      	movs	r0, #20
 801da4e:	f7ea fe19 	bl	8008684 <_ZnwjPKci>
 801da52:	4604      	mov	r4, r0
 801da54:	68f9      	ldr	r1, [r7, #12]
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	689a      	ldr	r2, [r3, #8]
 801da5a:	68fb      	ldr	r3, [r7, #12]
 801da5c:	68d8      	ldr	r0, [r3, #12]
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	685b      	ldr	r3, [r3, #4]
 801da62:	9300      	str	r3, [sp, #0]
 801da64:	4603      	mov	r3, r0
 801da66:	4620      	mov	r0, r4
 801da68:	f7ff fedd 	bl	801d826 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	691b      	ldr	r3, [r3, #16]
 801da74:	60fb      	str	r3, [r7, #12]
 801da76:	e7e3      	b.n	801da40 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801da78:	bf00      	nop
 801da7a:	3714      	adds	r7, #20
 801da7c:	46bd      	mov	sp, r7
 801da7e:	bd90      	pop	{r4, r7, pc}
 801da80:	080245bc 	.word	0x080245bc

0801da84 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801da84:	b580      	push	{r7, lr}
 801da86:	b082      	sub	sp, #8
 801da88:	af00      	add	r7, sp, #0
 801da8a:	6078      	str	r0, [r7, #4]
 801da8c:	6039      	str	r1, [r7, #0]
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	490b      	ldr	r1, [pc, #44]	; (801dac0 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801da92:	4618      	mov	r0, r3
 801da94:	f7ed f9b9 	bl	800ae0a <_ZN12SimpleStringC1EPKc>
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	2200      	movs	r2, #0
 801da9c:	721a      	strb	r2, [r3, #8]
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	2200      	movs	r2, #0
 801daa2:	725a      	strb	r2, [r3, #9]
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	2200      	movs	r2, #0
 801daa8:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	6839      	ldr	r1, [r7, #0]
 801daae:	4618      	mov	r0, r3
 801dab0:	f7ed fa17 	bl	800aee2 <_ZN12SimpleStringaSERKS_>
}
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	4618      	mov	r0, r3
 801dab8:	3708      	adds	r7, #8
 801daba:	46bd      	mov	sp, r7
 801dabc:	bd80      	pop	{r7, pc}
 801dabe:	bf00      	nop
 801dac0:	08024698 	.word	0x08024698

0801dac4 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801dac4:	b480      	push	{r7}
 801dac6:	b083      	sub	sp, #12
 801dac8:	af00      	add	r7, sp, #0
 801daca:	6078      	str	r0, [r7, #4]
 801dacc:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	683a      	ldr	r2, [r7, #0]
 801dad2:	60da      	str	r2, [r3, #12]
    return this;
 801dad4:	687b      	ldr	r3, [r7, #4]
}
 801dad6:	4618      	mov	r0, r3
 801dad8:	370c      	adds	r7, #12
 801dada:	46bd      	mov	sp, r7
 801dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dae0:	4770      	bx	lr

0801dae2 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801dae2:	b480      	push	{r7}
 801dae4:	b083      	sub	sp, #12
 801dae6:	af00      	add	r7, sp, #0
 801dae8:	6078      	str	r0, [r7, #4]
    return next_;
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	68db      	ldr	r3, [r3, #12]
}
 801daee:	4618      	mov	r0, r3
 801daf0:	370c      	adds	r7, #12
 801daf2:	46bd      	mov	sp, r7
 801daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daf8:	4770      	bx	lr

0801dafa <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801dafa:	b480      	push	{r7}
 801dafc:	b083      	sub	sp, #12
 801dafe:	af00      	add	r7, sp, #0
 801db00:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	2201      	movs	r2, #1
 801db06:	721a      	strb	r2, [r3, #8]
}
 801db08:	bf00      	nop
 801db0a:	370c      	adds	r7, #12
 801db0c:	46bd      	mov	sp, r7
 801db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db12:	4770      	bx	lr

0801db14 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801db14:	b480      	push	{r7}
 801db16:	b083      	sub	sp, #12
 801db18:	af00      	add	r7, sp, #0
 801db1a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	2201      	movs	r2, #1
 801db20:	725a      	strb	r2, [r3, #9]
}
 801db22:	bf00      	nop
 801db24:	370c      	adds	r7, #12
 801db26:	46bd      	mov	sp, r7
 801db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db2c:	4770      	bx	lr

0801db2e <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801db2e:	b580      	push	{r7, lr}
 801db30:	b084      	sub	sp, #16
 801db32:	af00      	add	r7, sp, #0
 801db34:	6078      	str	r0, [r7, #4]
 801db36:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801db38:	2300      	movs	r3, #0
 801db3a:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	7a1b      	ldrb	r3, [r3, #8]
 801db40:	2b00      	cmp	r3, #0
 801db42:	d007      	beq.n	801db54 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	4619      	mov	r1, r3
 801db48:	6838      	ldr	r0, [r7, #0]
 801db4a:	f7ed fd22 	bl	800b592 <_ZeqRK12SimpleStringS1_>
 801db4e:	4603      	mov	r3, r0
 801db50:	73fb      	strb	r3, [r7, #15]
 801db52:	e006      	b.n	801db62 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	4619      	mov	r1, r3
 801db58:	6838      	ldr	r0, [r7, #0]
 801db5a:	f7ed f9d4 	bl	800af06 <_ZNK12SimpleString8containsERKS_>
 801db5e:	4603      	mov	r3, r0
 801db60:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	7a5b      	ldrb	r3, [r3, #9]
 801db66:	2b00      	cmp	r3, #0
 801db68:	d004      	beq.n	801db74 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801db6a:	7bfb      	ldrb	r3, [r7, #15]
 801db6c:	f083 0301 	eor.w	r3, r3, #1
 801db70:	b2db      	uxtb	r3, r3
 801db72:	e005      	b.n	801db80 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801db74:	7bfb      	ldrb	r3, [r7, #15]
 801db76:	2b00      	cmp	r3, #0
 801db78:	bf14      	ite	ne
 801db7a:	2301      	movne	r3, #1
 801db7c:	2300      	moveq	r3, #0
 801db7e:	b2db      	uxtb	r3, r3
}
 801db80:	4618      	mov	r0, r3
 801db82:	3710      	adds	r7, #16
 801db84:	46bd      	mov	sp, r7
 801db86:	bd80      	pop	{r7, pc}

0801db88 <__cxa_guard_acquire>:
 801db88:	6803      	ldr	r3, [r0, #0]
 801db8a:	07db      	lsls	r3, r3, #31
 801db8c:	d406      	bmi.n	801db9c <__cxa_guard_acquire+0x14>
 801db8e:	7843      	ldrb	r3, [r0, #1]
 801db90:	b103      	cbz	r3, 801db94 <__cxa_guard_acquire+0xc>
 801db92:	deff      	udf	#255	; 0xff
 801db94:	2301      	movs	r3, #1
 801db96:	7043      	strb	r3, [r0, #1]
 801db98:	4618      	mov	r0, r3
 801db9a:	4770      	bx	lr
 801db9c:	2000      	movs	r0, #0
 801db9e:	4770      	bx	lr

0801dba0 <__cxa_guard_release>:
 801dba0:	2301      	movs	r3, #1
 801dba2:	6003      	str	r3, [r0, #0]
 801dba4:	4770      	bx	lr

0801dba6 <__cxa_pure_virtual>:
 801dba6:	b508      	push	{r3, lr}
 801dba8:	f000 f80c 	bl	801dbc4 <_ZSt9terminatev>

0801dbac <_ZN10__cxxabiv111__terminateEPFvvE>:
 801dbac:	b508      	push	{r3, lr}
 801dbae:	4780      	blx	r0
 801dbb0:	f000 f816 	bl	801dbe0 <abort>

0801dbb4 <_ZSt13get_terminatev>:
 801dbb4:	4b02      	ldr	r3, [pc, #8]	; (801dbc0 <_ZSt13get_terminatev+0xc>)
 801dbb6:	6818      	ldr	r0, [r3, #0]
 801dbb8:	f3bf 8f5b 	dmb	ish
 801dbbc:	4770      	bx	lr
 801dbbe:	bf00      	nop
 801dbc0:	20000104 	.word	0x20000104

0801dbc4 <_ZSt9terminatev>:
 801dbc4:	b508      	push	{r3, lr}
 801dbc6:	f7ff fff5 	bl	801dbb4 <_ZSt13get_terminatev>
 801dbca:	f7ff ffef 	bl	801dbac <_ZN10__cxxabiv111__terminateEPFvvE>

0801dbce <fabs>:
 801dbce:	ec51 0b10 	vmov	r0, r1, d0
 801dbd2:	ee10 2a10 	vmov	r2, s0
 801dbd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801dbda:	ec43 2b10 	vmov	d0, r2, r3
 801dbde:	4770      	bx	lr

0801dbe0 <abort>:
 801dbe0:	b508      	push	{r3, lr}
 801dbe2:	2006      	movs	r0, #6
 801dbe4:	f000 ff88 	bl	801eaf8 <raise>
 801dbe8:	2001      	movs	r0, #1
 801dbea:	f7e3 f8ca 	bl	8000d82 <_exit>

0801dbee <atexit>:
 801dbee:	2300      	movs	r3, #0
 801dbf0:	4601      	mov	r1, r0
 801dbf2:	461a      	mov	r2, r3
 801dbf4:	4618      	mov	r0, r3
 801dbf6:	f002 b93f 	b.w	801fe78 <__register_exitproc>
	...

0801dbfc <calloc>:
 801dbfc:	4b02      	ldr	r3, [pc, #8]	; (801dc08 <calloc+0xc>)
 801dbfe:	460a      	mov	r2, r1
 801dc00:	4601      	mov	r1, r0
 801dc02:	6818      	ldr	r0, [r3, #0]
 801dc04:	f000 bde8 	b.w	801e7d8 <_calloc_r>
 801dc08:	20000108 	.word	0x20000108

0801dc0c <__errno>:
 801dc0c:	4b01      	ldr	r3, [pc, #4]	; (801dc14 <__errno+0x8>)
 801dc0e:	6818      	ldr	r0, [r3, #0]
 801dc10:	4770      	bx	lr
 801dc12:	bf00      	nop
 801dc14:	20000108 	.word	0x20000108

0801dc18 <_fclose_r>:
 801dc18:	b570      	push	{r4, r5, r6, lr}
 801dc1a:	4605      	mov	r5, r0
 801dc1c:	460c      	mov	r4, r1
 801dc1e:	b911      	cbnz	r1, 801dc26 <_fclose_r+0xe>
 801dc20:	2600      	movs	r6, #0
 801dc22:	4630      	mov	r0, r6
 801dc24:	bd70      	pop	{r4, r5, r6, pc}
 801dc26:	b118      	cbz	r0, 801dc30 <_fclose_r+0x18>
 801dc28:	6983      	ldr	r3, [r0, #24]
 801dc2a:	b90b      	cbnz	r3, 801dc30 <_fclose_r+0x18>
 801dc2c:	f000 f994 	bl	801df58 <__sinit>
 801dc30:	4b2c      	ldr	r3, [pc, #176]	; (801dce4 <_fclose_r+0xcc>)
 801dc32:	429c      	cmp	r4, r3
 801dc34:	d114      	bne.n	801dc60 <_fclose_r+0x48>
 801dc36:	686c      	ldr	r4, [r5, #4]
 801dc38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc3a:	07d8      	lsls	r0, r3, #31
 801dc3c:	d405      	bmi.n	801dc4a <_fclose_r+0x32>
 801dc3e:	89a3      	ldrh	r3, [r4, #12]
 801dc40:	0599      	lsls	r1, r3, #22
 801dc42:	d402      	bmi.n	801dc4a <_fclose_r+0x32>
 801dc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc46:	f000 fd3a 	bl	801e6be <__retarget_lock_acquire_recursive>
 801dc4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc4e:	b98b      	cbnz	r3, 801dc74 <_fclose_r+0x5c>
 801dc50:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801dc52:	f016 0601 	ands.w	r6, r6, #1
 801dc56:	d1e3      	bne.n	801dc20 <_fclose_r+0x8>
 801dc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc5a:	f000 fd32 	bl	801e6c2 <__retarget_lock_release_recursive>
 801dc5e:	e7e0      	b.n	801dc22 <_fclose_r+0xa>
 801dc60:	4b21      	ldr	r3, [pc, #132]	; (801dce8 <_fclose_r+0xd0>)
 801dc62:	429c      	cmp	r4, r3
 801dc64:	d101      	bne.n	801dc6a <_fclose_r+0x52>
 801dc66:	68ac      	ldr	r4, [r5, #8]
 801dc68:	e7e6      	b.n	801dc38 <_fclose_r+0x20>
 801dc6a:	4b20      	ldr	r3, [pc, #128]	; (801dcec <_fclose_r+0xd4>)
 801dc6c:	429c      	cmp	r4, r3
 801dc6e:	bf08      	it	eq
 801dc70:	68ec      	ldreq	r4, [r5, #12]
 801dc72:	e7e1      	b.n	801dc38 <_fclose_r+0x20>
 801dc74:	4621      	mov	r1, r4
 801dc76:	4628      	mov	r0, r5
 801dc78:	f000 f842 	bl	801dd00 <__sflush_r>
 801dc7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801dc7e:	4606      	mov	r6, r0
 801dc80:	b133      	cbz	r3, 801dc90 <_fclose_r+0x78>
 801dc82:	6a21      	ldr	r1, [r4, #32]
 801dc84:	4628      	mov	r0, r5
 801dc86:	4798      	blx	r3
 801dc88:	2800      	cmp	r0, #0
 801dc8a:	bfb8      	it	lt
 801dc8c:	f04f 36ff 	movlt.w	r6, #4294967295
 801dc90:	89a3      	ldrh	r3, [r4, #12]
 801dc92:	061a      	lsls	r2, r3, #24
 801dc94:	d503      	bpl.n	801dc9e <_fclose_r+0x86>
 801dc96:	6921      	ldr	r1, [r4, #16]
 801dc98:	4628      	mov	r0, r5
 801dc9a:	f000 fdad 	bl	801e7f8 <_free_r>
 801dc9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dca0:	b141      	cbz	r1, 801dcb4 <_fclose_r+0x9c>
 801dca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dca6:	4299      	cmp	r1, r3
 801dca8:	d002      	beq.n	801dcb0 <_fclose_r+0x98>
 801dcaa:	4628      	mov	r0, r5
 801dcac:	f000 fda4 	bl	801e7f8 <_free_r>
 801dcb0:	2300      	movs	r3, #0
 801dcb2:	6363      	str	r3, [r4, #52]	; 0x34
 801dcb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801dcb6:	b121      	cbz	r1, 801dcc2 <_fclose_r+0xaa>
 801dcb8:	4628      	mov	r0, r5
 801dcba:	f000 fd9d 	bl	801e7f8 <_free_r>
 801dcbe:	2300      	movs	r3, #0
 801dcc0:	64a3      	str	r3, [r4, #72]	; 0x48
 801dcc2:	f000 f931 	bl	801df28 <__sfp_lock_acquire>
 801dcc6:	2300      	movs	r3, #0
 801dcc8:	81a3      	strh	r3, [r4, #12]
 801dcca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dccc:	07db      	lsls	r3, r3, #31
 801dcce:	d402      	bmi.n	801dcd6 <_fclose_r+0xbe>
 801dcd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcd2:	f000 fcf6 	bl	801e6c2 <__retarget_lock_release_recursive>
 801dcd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcd8:	f000 fcef 	bl	801e6ba <__retarget_lock_close_recursive>
 801dcdc:	f000 f92a 	bl	801df34 <__sfp_lock_release>
 801dce0:	e79f      	b.n	801dc22 <_fclose_r+0xa>
 801dce2:	bf00      	nop
 801dce4:	08026a00 	.word	0x08026a00
 801dce8:	08026a20 	.word	0x08026a20
 801dcec:	080269e0 	.word	0x080269e0

0801dcf0 <fclose>:
 801dcf0:	4b02      	ldr	r3, [pc, #8]	; (801dcfc <fclose+0xc>)
 801dcf2:	4601      	mov	r1, r0
 801dcf4:	6818      	ldr	r0, [r3, #0]
 801dcf6:	f7ff bf8f 	b.w	801dc18 <_fclose_r>
 801dcfa:	bf00      	nop
 801dcfc:	20000108 	.word	0x20000108

0801dd00 <__sflush_r>:
 801dd00:	898a      	ldrh	r2, [r1, #12]
 801dd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd06:	4605      	mov	r5, r0
 801dd08:	0710      	lsls	r0, r2, #28
 801dd0a:	460c      	mov	r4, r1
 801dd0c:	d458      	bmi.n	801ddc0 <__sflush_r+0xc0>
 801dd0e:	684b      	ldr	r3, [r1, #4]
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	dc05      	bgt.n	801dd20 <__sflush_r+0x20>
 801dd14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	dc02      	bgt.n	801dd20 <__sflush_r+0x20>
 801dd1a:	2000      	movs	r0, #0
 801dd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dd22:	2e00      	cmp	r6, #0
 801dd24:	d0f9      	beq.n	801dd1a <__sflush_r+0x1a>
 801dd26:	2300      	movs	r3, #0
 801dd28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dd2c:	682f      	ldr	r7, [r5, #0]
 801dd2e:	602b      	str	r3, [r5, #0]
 801dd30:	d032      	beq.n	801dd98 <__sflush_r+0x98>
 801dd32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dd34:	89a3      	ldrh	r3, [r4, #12]
 801dd36:	075a      	lsls	r2, r3, #29
 801dd38:	d505      	bpl.n	801dd46 <__sflush_r+0x46>
 801dd3a:	6863      	ldr	r3, [r4, #4]
 801dd3c:	1ac0      	subs	r0, r0, r3
 801dd3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dd40:	b10b      	cbz	r3, 801dd46 <__sflush_r+0x46>
 801dd42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dd44:	1ac0      	subs	r0, r0, r3
 801dd46:	2300      	movs	r3, #0
 801dd48:	4602      	mov	r2, r0
 801dd4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dd4c:	6a21      	ldr	r1, [r4, #32]
 801dd4e:	4628      	mov	r0, r5
 801dd50:	47b0      	blx	r6
 801dd52:	1c43      	adds	r3, r0, #1
 801dd54:	89a3      	ldrh	r3, [r4, #12]
 801dd56:	d106      	bne.n	801dd66 <__sflush_r+0x66>
 801dd58:	6829      	ldr	r1, [r5, #0]
 801dd5a:	291d      	cmp	r1, #29
 801dd5c:	d82c      	bhi.n	801ddb8 <__sflush_r+0xb8>
 801dd5e:	4a2a      	ldr	r2, [pc, #168]	; (801de08 <__sflush_r+0x108>)
 801dd60:	40ca      	lsrs	r2, r1
 801dd62:	07d6      	lsls	r6, r2, #31
 801dd64:	d528      	bpl.n	801ddb8 <__sflush_r+0xb8>
 801dd66:	2200      	movs	r2, #0
 801dd68:	6062      	str	r2, [r4, #4]
 801dd6a:	04d9      	lsls	r1, r3, #19
 801dd6c:	6922      	ldr	r2, [r4, #16]
 801dd6e:	6022      	str	r2, [r4, #0]
 801dd70:	d504      	bpl.n	801dd7c <__sflush_r+0x7c>
 801dd72:	1c42      	adds	r2, r0, #1
 801dd74:	d101      	bne.n	801dd7a <__sflush_r+0x7a>
 801dd76:	682b      	ldr	r3, [r5, #0]
 801dd78:	b903      	cbnz	r3, 801dd7c <__sflush_r+0x7c>
 801dd7a:	6560      	str	r0, [r4, #84]	; 0x54
 801dd7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dd7e:	602f      	str	r7, [r5, #0]
 801dd80:	2900      	cmp	r1, #0
 801dd82:	d0ca      	beq.n	801dd1a <__sflush_r+0x1a>
 801dd84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dd88:	4299      	cmp	r1, r3
 801dd8a:	d002      	beq.n	801dd92 <__sflush_r+0x92>
 801dd8c:	4628      	mov	r0, r5
 801dd8e:	f000 fd33 	bl	801e7f8 <_free_r>
 801dd92:	2000      	movs	r0, #0
 801dd94:	6360      	str	r0, [r4, #52]	; 0x34
 801dd96:	e7c1      	b.n	801dd1c <__sflush_r+0x1c>
 801dd98:	6a21      	ldr	r1, [r4, #32]
 801dd9a:	2301      	movs	r3, #1
 801dd9c:	4628      	mov	r0, r5
 801dd9e:	47b0      	blx	r6
 801dda0:	1c41      	adds	r1, r0, #1
 801dda2:	d1c7      	bne.n	801dd34 <__sflush_r+0x34>
 801dda4:	682b      	ldr	r3, [r5, #0]
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d0c4      	beq.n	801dd34 <__sflush_r+0x34>
 801ddaa:	2b1d      	cmp	r3, #29
 801ddac:	d001      	beq.n	801ddb2 <__sflush_r+0xb2>
 801ddae:	2b16      	cmp	r3, #22
 801ddb0:	d101      	bne.n	801ddb6 <__sflush_r+0xb6>
 801ddb2:	602f      	str	r7, [r5, #0]
 801ddb4:	e7b1      	b.n	801dd1a <__sflush_r+0x1a>
 801ddb6:	89a3      	ldrh	r3, [r4, #12]
 801ddb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ddbc:	81a3      	strh	r3, [r4, #12]
 801ddbe:	e7ad      	b.n	801dd1c <__sflush_r+0x1c>
 801ddc0:	690f      	ldr	r7, [r1, #16]
 801ddc2:	2f00      	cmp	r7, #0
 801ddc4:	d0a9      	beq.n	801dd1a <__sflush_r+0x1a>
 801ddc6:	0793      	lsls	r3, r2, #30
 801ddc8:	680e      	ldr	r6, [r1, #0]
 801ddca:	bf08      	it	eq
 801ddcc:	694b      	ldreq	r3, [r1, #20]
 801ddce:	600f      	str	r7, [r1, #0]
 801ddd0:	bf18      	it	ne
 801ddd2:	2300      	movne	r3, #0
 801ddd4:	eba6 0807 	sub.w	r8, r6, r7
 801ddd8:	608b      	str	r3, [r1, #8]
 801ddda:	f1b8 0f00 	cmp.w	r8, #0
 801ddde:	dd9c      	ble.n	801dd1a <__sflush_r+0x1a>
 801dde0:	6a21      	ldr	r1, [r4, #32]
 801dde2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dde4:	4643      	mov	r3, r8
 801dde6:	463a      	mov	r2, r7
 801dde8:	4628      	mov	r0, r5
 801ddea:	47b0      	blx	r6
 801ddec:	2800      	cmp	r0, #0
 801ddee:	dc06      	bgt.n	801ddfe <__sflush_r+0xfe>
 801ddf0:	89a3      	ldrh	r3, [r4, #12]
 801ddf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ddf6:	81a3      	strh	r3, [r4, #12]
 801ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddfc:	e78e      	b.n	801dd1c <__sflush_r+0x1c>
 801ddfe:	4407      	add	r7, r0
 801de00:	eba8 0800 	sub.w	r8, r8, r0
 801de04:	e7e9      	b.n	801ddda <__sflush_r+0xda>
 801de06:	bf00      	nop
 801de08:	20400001 	.word	0x20400001

0801de0c <_fflush_r>:
 801de0c:	b538      	push	{r3, r4, r5, lr}
 801de0e:	690b      	ldr	r3, [r1, #16]
 801de10:	4605      	mov	r5, r0
 801de12:	460c      	mov	r4, r1
 801de14:	b913      	cbnz	r3, 801de1c <_fflush_r+0x10>
 801de16:	2500      	movs	r5, #0
 801de18:	4628      	mov	r0, r5
 801de1a:	bd38      	pop	{r3, r4, r5, pc}
 801de1c:	b118      	cbz	r0, 801de26 <_fflush_r+0x1a>
 801de1e:	6983      	ldr	r3, [r0, #24]
 801de20:	b90b      	cbnz	r3, 801de26 <_fflush_r+0x1a>
 801de22:	f000 f899 	bl	801df58 <__sinit>
 801de26:	4b14      	ldr	r3, [pc, #80]	; (801de78 <_fflush_r+0x6c>)
 801de28:	429c      	cmp	r4, r3
 801de2a:	d11b      	bne.n	801de64 <_fflush_r+0x58>
 801de2c:	686c      	ldr	r4, [r5, #4]
 801de2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de32:	2b00      	cmp	r3, #0
 801de34:	d0ef      	beq.n	801de16 <_fflush_r+0xa>
 801de36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801de38:	07d0      	lsls	r0, r2, #31
 801de3a:	d404      	bmi.n	801de46 <_fflush_r+0x3a>
 801de3c:	0599      	lsls	r1, r3, #22
 801de3e:	d402      	bmi.n	801de46 <_fflush_r+0x3a>
 801de40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801de42:	f000 fc3c 	bl	801e6be <__retarget_lock_acquire_recursive>
 801de46:	4628      	mov	r0, r5
 801de48:	4621      	mov	r1, r4
 801de4a:	f7ff ff59 	bl	801dd00 <__sflush_r>
 801de4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801de50:	07da      	lsls	r2, r3, #31
 801de52:	4605      	mov	r5, r0
 801de54:	d4e0      	bmi.n	801de18 <_fflush_r+0xc>
 801de56:	89a3      	ldrh	r3, [r4, #12]
 801de58:	059b      	lsls	r3, r3, #22
 801de5a:	d4dd      	bmi.n	801de18 <_fflush_r+0xc>
 801de5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801de5e:	f000 fc30 	bl	801e6c2 <__retarget_lock_release_recursive>
 801de62:	e7d9      	b.n	801de18 <_fflush_r+0xc>
 801de64:	4b05      	ldr	r3, [pc, #20]	; (801de7c <_fflush_r+0x70>)
 801de66:	429c      	cmp	r4, r3
 801de68:	d101      	bne.n	801de6e <_fflush_r+0x62>
 801de6a:	68ac      	ldr	r4, [r5, #8]
 801de6c:	e7df      	b.n	801de2e <_fflush_r+0x22>
 801de6e:	4b04      	ldr	r3, [pc, #16]	; (801de80 <_fflush_r+0x74>)
 801de70:	429c      	cmp	r4, r3
 801de72:	bf08      	it	eq
 801de74:	68ec      	ldreq	r4, [r5, #12]
 801de76:	e7da      	b.n	801de2e <_fflush_r+0x22>
 801de78:	08026a00 	.word	0x08026a00
 801de7c:	08026a20 	.word	0x08026a20
 801de80:	080269e0 	.word	0x080269e0

0801de84 <fflush>:
 801de84:	4601      	mov	r1, r0
 801de86:	b920      	cbnz	r0, 801de92 <fflush+0xe>
 801de88:	4b04      	ldr	r3, [pc, #16]	; (801de9c <fflush+0x18>)
 801de8a:	4905      	ldr	r1, [pc, #20]	; (801dea0 <fflush+0x1c>)
 801de8c:	6818      	ldr	r0, [r3, #0]
 801de8e:	f000 babb 	b.w	801e408 <_fwalk_reent>
 801de92:	4b04      	ldr	r3, [pc, #16]	; (801dea4 <fflush+0x20>)
 801de94:	6818      	ldr	r0, [r3, #0]
 801de96:	f7ff bfb9 	b.w	801de0c <_fflush_r>
 801de9a:	bf00      	nop
 801de9c:	08026a40 	.word	0x08026a40
 801dea0:	0801de0d 	.word	0x0801de0d
 801dea4:	20000108 	.word	0x20000108

0801dea8 <std>:
 801dea8:	2300      	movs	r3, #0
 801deaa:	b510      	push	{r4, lr}
 801deac:	4604      	mov	r4, r0
 801deae:	e9c0 3300 	strd	r3, r3, [r0]
 801deb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801deb6:	6083      	str	r3, [r0, #8]
 801deb8:	8181      	strh	r1, [r0, #12]
 801deba:	6643      	str	r3, [r0, #100]	; 0x64
 801debc:	81c2      	strh	r2, [r0, #14]
 801debe:	6183      	str	r3, [r0, #24]
 801dec0:	4619      	mov	r1, r3
 801dec2:	2208      	movs	r2, #8
 801dec4:	305c      	adds	r0, #92	; 0x5c
 801dec6:	f000 fc7f 	bl	801e7c8 <memset>
 801deca:	4b05      	ldr	r3, [pc, #20]	; (801dee0 <std+0x38>)
 801decc:	6263      	str	r3, [r4, #36]	; 0x24
 801dece:	4b05      	ldr	r3, [pc, #20]	; (801dee4 <std+0x3c>)
 801ded0:	62a3      	str	r3, [r4, #40]	; 0x28
 801ded2:	4b05      	ldr	r3, [pc, #20]	; (801dee8 <std+0x40>)
 801ded4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ded6:	4b05      	ldr	r3, [pc, #20]	; (801deec <std+0x44>)
 801ded8:	6224      	str	r4, [r4, #32]
 801deda:	6323      	str	r3, [r4, #48]	; 0x30
 801dedc:	bd10      	pop	{r4, pc}
 801dede:	bf00      	nop
 801dee0:	0801eb71 	.word	0x0801eb71
 801dee4:	0801eb97 	.word	0x0801eb97
 801dee8:	0801ebcf 	.word	0x0801ebcf
 801deec:	0801ebf3 	.word	0x0801ebf3

0801def0 <_cleanup_r>:
 801def0:	4901      	ldr	r1, [pc, #4]	; (801def8 <_cleanup_r+0x8>)
 801def2:	f000 ba89 	b.w	801e408 <_fwalk_reent>
 801def6:	bf00      	nop
 801def8:	0801de0d 	.word	0x0801de0d

0801defc <__sfmoreglue>:
 801defc:	b570      	push	{r4, r5, r6, lr}
 801defe:	1e4a      	subs	r2, r1, #1
 801df00:	2568      	movs	r5, #104	; 0x68
 801df02:	4355      	muls	r5, r2
 801df04:	460e      	mov	r6, r1
 801df06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801df0a:	f000 fcc5 	bl	801e898 <_malloc_r>
 801df0e:	4604      	mov	r4, r0
 801df10:	b140      	cbz	r0, 801df24 <__sfmoreglue+0x28>
 801df12:	2100      	movs	r1, #0
 801df14:	e9c0 1600 	strd	r1, r6, [r0]
 801df18:	300c      	adds	r0, #12
 801df1a:	60a0      	str	r0, [r4, #8]
 801df1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801df20:	f000 fc52 	bl	801e7c8 <memset>
 801df24:	4620      	mov	r0, r4
 801df26:	bd70      	pop	{r4, r5, r6, pc}

0801df28 <__sfp_lock_acquire>:
 801df28:	4801      	ldr	r0, [pc, #4]	; (801df30 <__sfp_lock_acquire+0x8>)
 801df2a:	f000 bbc8 	b.w	801e6be <__retarget_lock_acquire_recursive>
 801df2e:	bf00      	nop
 801df30:	20000e2c 	.word	0x20000e2c

0801df34 <__sfp_lock_release>:
 801df34:	4801      	ldr	r0, [pc, #4]	; (801df3c <__sfp_lock_release+0x8>)
 801df36:	f000 bbc4 	b.w	801e6c2 <__retarget_lock_release_recursive>
 801df3a:	bf00      	nop
 801df3c:	20000e2c 	.word	0x20000e2c

0801df40 <__sinit_lock_acquire>:
 801df40:	4801      	ldr	r0, [pc, #4]	; (801df48 <__sinit_lock_acquire+0x8>)
 801df42:	f000 bbbc 	b.w	801e6be <__retarget_lock_acquire_recursive>
 801df46:	bf00      	nop
 801df48:	20000e27 	.word	0x20000e27

0801df4c <__sinit_lock_release>:
 801df4c:	4801      	ldr	r0, [pc, #4]	; (801df54 <__sinit_lock_release+0x8>)
 801df4e:	f000 bbb8 	b.w	801e6c2 <__retarget_lock_release_recursive>
 801df52:	bf00      	nop
 801df54:	20000e27 	.word	0x20000e27

0801df58 <__sinit>:
 801df58:	b510      	push	{r4, lr}
 801df5a:	4604      	mov	r4, r0
 801df5c:	f7ff fff0 	bl	801df40 <__sinit_lock_acquire>
 801df60:	69a3      	ldr	r3, [r4, #24]
 801df62:	b11b      	cbz	r3, 801df6c <__sinit+0x14>
 801df64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df68:	f7ff bff0 	b.w	801df4c <__sinit_lock_release>
 801df6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801df70:	6523      	str	r3, [r4, #80]	; 0x50
 801df72:	4b13      	ldr	r3, [pc, #76]	; (801dfc0 <__sinit+0x68>)
 801df74:	4a13      	ldr	r2, [pc, #76]	; (801dfc4 <__sinit+0x6c>)
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	62a2      	str	r2, [r4, #40]	; 0x28
 801df7a:	42a3      	cmp	r3, r4
 801df7c:	bf04      	itt	eq
 801df7e:	2301      	moveq	r3, #1
 801df80:	61a3      	streq	r3, [r4, #24]
 801df82:	4620      	mov	r0, r4
 801df84:	f000 f820 	bl	801dfc8 <__sfp>
 801df88:	6060      	str	r0, [r4, #4]
 801df8a:	4620      	mov	r0, r4
 801df8c:	f000 f81c 	bl	801dfc8 <__sfp>
 801df90:	60a0      	str	r0, [r4, #8]
 801df92:	4620      	mov	r0, r4
 801df94:	f000 f818 	bl	801dfc8 <__sfp>
 801df98:	2200      	movs	r2, #0
 801df9a:	60e0      	str	r0, [r4, #12]
 801df9c:	2104      	movs	r1, #4
 801df9e:	6860      	ldr	r0, [r4, #4]
 801dfa0:	f7ff ff82 	bl	801dea8 <std>
 801dfa4:	68a0      	ldr	r0, [r4, #8]
 801dfa6:	2201      	movs	r2, #1
 801dfa8:	2109      	movs	r1, #9
 801dfaa:	f7ff ff7d 	bl	801dea8 <std>
 801dfae:	68e0      	ldr	r0, [r4, #12]
 801dfb0:	2202      	movs	r2, #2
 801dfb2:	2112      	movs	r1, #18
 801dfb4:	f7ff ff78 	bl	801dea8 <std>
 801dfb8:	2301      	movs	r3, #1
 801dfba:	61a3      	str	r3, [r4, #24]
 801dfbc:	e7d2      	b.n	801df64 <__sinit+0xc>
 801dfbe:	bf00      	nop
 801dfc0:	08026a40 	.word	0x08026a40
 801dfc4:	0801def1 	.word	0x0801def1

0801dfc8 <__sfp>:
 801dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfca:	4607      	mov	r7, r0
 801dfcc:	f7ff ffac 	bl	801df28 <__sfp_lock_acquire>
 801dfd0:	4b1e      	ldr	r3, [pc, #120]	; (801e04c <__sfp+0x84>)
 801dfd2:	681e      	ldr	r6, [r3, #0]
 801dfd4:	69b3      	ldr	r3, [r6, #24]
 801dfd6:	b913      	cbnz	r3, 801dfde <__sfp+0x16>
 801dfd8:	4630      	mov	r0, r6
 801dfda:	f7ff ffbd 	bl	801df58 <__sinit>
 801dfde:	3648      	adds	r6, #72	; 0x48
 801dfe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dfe4:	3b01      	subs	r3, #1
 801dfe6:	d503      	bpl.n	801dff0 <__sfp+0x28>
 801dfe8:	6833      	ldr	r3, [r6, #0]
 801dfea:	b30b      	cbz	r3, 801e030 <__sfp+0x68>
 801dfec:	6836      	ldr	r6, [r6, #0]
 801dfee:	e7f7      	b.n	801dfe0 <__sfp+0x18>
 801dff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dff4:	b9d5      	cbnz	r5, 801e02c <__sfp+0x64>
 801dff6:	4b16      	ldr	r3, [pc, #88]	; (801e050 <__sfp+0x88>)
 801dff8:	60e3      	str	r3, [r4, #12]
 801dffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dffe:	6665      	str	r5, [r4, #100]	; 0x64
 801e000:	f000 fb5a 	bl	801e6b8 <__retarget_lock_init_recursive>
 801e004:	f7ff ff96 	bl	801df34 <__sfp_lock_release>
 801e008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e010:	6025      	str	r5, [r4, #0]
 801e012:	61a5      	str	r5, [r4, #24]
 801e014:	2208      	movs	r2, #8
 801e016:	4629      	mov	r1, r5
 801e018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e01c:	f000 fbd4 	bl	801e7c8 <memset>
 801e020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e028:	4620      	mov	r0, r4
 801e02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e02c:	3468      	adds	r4, #104	; 0x68
 801e02e:	e7d9      	b.n	801dfe4 <__sfp+0x1c>
 801e030:	2104      	movs	r1, #4
 801e032:	4638      	mov	r0, r7
 801e034:	f7ff ff62 	bl	801defc <__sfmoreglue>
 801e038:	4604      	mov	r4, r0
 801e03a:	6030      	str	r0, [r6, #0]
 801e03c:	2800      	cmp	r0, #0
 801e03e:	d1d5      	bne.n	801dfec <__sfp+0x24>
 801e040:	f7ff ff78 	bl	801df34 <__sfp_lock_release>
 801e044:	230c      	movs	r3, #12
 801e046:	603b      	str	r3, [r7, #0]
 801e048:	e7ee      	b.n	801e028 <__sfp+0x60>
 801e04a:	bf00      	nop
 801e04c:	08026a40 	.word	0x08026a40
 801e050:	ffff0001 	.word	0xffff0001

0801e054 <_fopen_r>:
 801e054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e056:	460f      	mov	r7, r1
 801e058:	4611      	mov	r1, r2
 801e05a:	aa01      	add	r2, sp, #4
 801e05c:	4605      	mov	r5, r0
 801e05e:	f001 ff9f 	bl	801ffa0 <__sflags>
 801e062:	4606      	mov	r6, r0
 801e064:	b918      	cbnz	r0, 801e06e <_fopen_r+0x1a>
 801e066:	2400      	movs	r4, #0
 801e068:	4620      	mov	r0, r4
 801e06a:	b003      	add	sp, #12
 801e06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e06e:	4628      	mov	r0, r5
 801e070:	f7ff ffaa 	bl	801dfc8 <__sfp>
 801e074:	4604      	mov	r4, r0
 801e076:	2800      	cmp	r0, #0
 801e078:	d0f5      	beq.n	801e066 <_fopen_r+0x12>
 801e07a:	4639      	mov	r1, r7
 801e07c:	9a01      	ldr	r2, [sp, #4]
 801e07e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801e082:	4628      	mov	r0, r5
 801e084:	f000 fc62 	bl	801e94c <_open_r>
 801e088:	1e07      	subs	r7, r0, #0
 801e08a:	da09      	bge.n	801e0a0 <_fopen_r+0x4c>
 801e08c:	2500      	movs	r5, #0
 801e08e:	f7ff ff4b 	bl	801df28 <__sfp_lock_acquire>
 801e092:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e094:	81a5      	strh	r5, [r4, #12]
 801e096:	f000 fb10 	bl	801e6ba <__retarget_lock_close_recursive>
 801e09a:	f7ff ff4b 	bl	801df34 <__sfp_lock_release>
 801e09e:	e7e2      	b.n	801e066 <_fopen_r+0x12>
 801e0a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e0a2:	07db      	lsls	r3, r3, #31
 801e0a4:	d405      	bmi.n	801e0b2 <_fopen_r+0x5e>
 801e0a6:	89a3      	ldrh	r3, [r4, #12]
 801e0a8:	0598      	lsls	r0, r3, #22
 801e0aa:	d402      	bmi.n	801e0b2 <_fopen_r+0x5e>
 801e0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0ae:	f000 fb06 	bl	801e6be <__retarget_lock_acquire_recursive>
 801e0b2:	4b0e      	ldr	r3, [pc, #56]	; (801e0ec <_fopen_r+0x98>)
 801e0b4:	6263      	str	r3, [r4, #36]	; 0x24
 801e0b6:	4b0e      	ldr	r3, [pc, #56]	; (801e0f0 <_fopen_r+0x9c>)
 801e0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e0ba:	4b0e      	ldr	r3, [pc, #56]	; (801e0f4 <_fopen_r+0xa0>)
 801e0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e0be:	05f1      	lsls	r1, r6, #23
 801e0c0:	4b0d      	ldr	r3, [pc, #52]	; (801e0f8 <_fopen_r+0xa4>)
 801e0c2:	81e7      	strh	r7, [r4, #14]
 801e0c4:	81a6      	strh	r6, [r4, #12]
 801e0c6:	6224      	str	r4, [r4, #32]
 801e0c8:	6323      	str	r3, [r4, #48]	; 0x30
 801e0ca:	d505      	bpl.n	801e0d8 <_fopen_r+0x84>
 801e0cc:	2302      	movs	r3, #2
 801e0ce:	2200      	movs	r2, #0
 801e0d0:	4621      	mov	r1, r4
 801e0d2:	4628      	mov	r0, r5
 801e0d4:	f000 f888 	bl	801e1e8 <_fseek_r>
 801e0d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e0da:	07da      	lsls	r2, r3, #31
 801e0dc:	d4c4      	bmi.n	801e068 <_fopen_r+0x14>
 801e0de:	89a3      	ldrh	r3, [r4, #12]
 801e0e0:	059b      	lsls	r3, r3, #22
 801e0e2:	d4c1      	bmi.n	801e068 <_fopen_r+0x14>
 801e0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0e6:	f000 faec 	bl	801e6c2 <__retarget_lock_release_recursive>
 801e0ea:	e7bd      	b.n	801e068 <_fopen_r+0x14>
 801e0ec:	0801eb71 	.word	0x0801eb71
 801e0f0:	0801eb97 	.word	0x0801eb97
 801e0f4:	0801ebcf 	.word	0x0801ebcf
 801e0f8:	0801ebf3 	.word	0x0801ebf3

0801e0fc <fopen>:
 801e0fc:	4b02      	ldr	r3, [pc, #8]	; (801e108 <fopen+0xc>)
 801e0fe:	460a      	mov	r2, r1
 801e100:	4601      	mov	r1, r0
 801e102:	6818      	ldr	r0, [r3, #0]
 801e104:	f7ff bfa6 	b.w	801e054 <_fopen_r>
 801e108:	20000108 	.word	0x20000108

0801e10c <_fputs_r>:
 801e10c:	b570      	push	{r4, r5, r6, lr}
 801e10e:	460e      	mov	r6, r1
 801e110:	4614      	mov	r4, r2
 801e112:	4605      	mov	r5, r0
 801e114:	b118      	cbz	r0, 801e11e <_fputs_r+0x12>
 801e116:	6983      	ldr	r3, [r0, #24]
 801e118:	b90b      	cbnz	r3, 801e11e <_fputs_r+0x12>
 801e11a:	f7ff ff1d 	bl	801df58 <__sinit>
 801e11e:	4b2b      	ldr	r3, [pc, #172]	; (801e1cc <_fputs_r+0xc0>)
 801e120:	429c      	cmp	r4, r3
 801e122:	d11e      	bne.n	801e162 <_fputs_r+0x56>
 801e124:	686c      	ldr	r4, [r5, #4]
 801e126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e128:	07da      	lsls	r2, r3, #31
 801e12a:	d405      	bmi.n	801e138 <_fputs_r+0x2c>
 801e12c:	89a3      	ldrh	r3, [r4, #12]
 801e12e:	059b      	lsls	r3, r3, #22
 801e130:	d402      	bmi.n	801e138 <_fputs_r+0x2c>
 801e132:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e134:	f000 fac3 	bl	801e6be <__retarget_lock_acquire_recursive>
 801e138:	89a3      	ldrh	r3, [r4, #12]
 801e13a:	0718      	lsls	r0, r3, #28
 801e13c:	d51b      	bpl.n	801e176 <_fputs_r+0x6a>
 801e13e:	6923      	ldr	r3, [r4, #16]
 801e140:	b1cb      	cbz	r3, 801e176 <_fputs_r+0x6a>
 801e142:	3e01      	subs	r6, #1
 801e144:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e148:	bb39      	cbnz	r1, 801e19a <_fputs_r+0x8e>
 801e14a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801e14c:	f015 0501 	ands.w	r5, r5, #1
 801e150:	d139      	bne.n	801e1c6 <_fputs_r+0xba>
 801e152:	89a3      	ldrh	r3, [r4, #12]
 801e154:	0599      	lsls	r1, r3, #22
 801e156:	d402      	bmi.n	801e15e <_fputs_r+0x52>
 801e158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e15a:	f000 fab2 	bl	801e6c2 <__retarget_lock_release_recursive>
 801e15e:	4628      	mov	r0, r5
 801e160:	bd70      	pop	{r4, r5, r6, pc}
 801e162:	4b1b      	ldr	r3, [pc, #108]	; (801e1d0 <_fputs_r+0xc4>)
 801e164:	429c      	cmp	r4, r3
 801e166:	d101      	bne.n	801e16c <_fputs_r+0x60>
 801e168:	68ac      	ldr	r4, [r5, #8]
 801e16a:	e7dc      	b.n	801e126 <_fputs_r+0x1a>
 801e16c:	4b19      	ldr	r3, [pc, #100]	; (801e1d4 <_fputs_r+0xc8>)
 801e16e:	429c      	cmp	r4, r3
 801e170:	bf08      	it	eq
 801e172:	68ec      	ldreq	r4, [r5, #12]
 801e174:	e7d7      	b.n	801e126 <_fputs_r+0x1a>
 801e176:	4621      	mov	r1, r4
 801e178:	4628      	mov	r0, r5
 801e17a:	f001 fe0f 	bl	801fd9c <__swsetup_r>
 801e17e:	2800      	cmp	r0, #0
 801e180:	d0df      	beq.n	801e142 <_fputs_r+0x36>
 801e182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e184:	07da      	lsls	r2, r3, #31
 801e186:	d405      	bmi.n	801e194 <_fputs_r+0x88>
 801e188:	89a3      	ldrh	r3, [r4, #12]
 801e18a:	059b      	lsls	r3, r3, #22
 801e18c:	d402      	bmi.n	801e194 <_fputs_r+0x88>
 801e18e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e190:	f000 fa97 	bl	801e6c2 <__retarget_lock_release_recursive>
 801e194:	f04f 35ff 	mov.w	r5, #4294967295
 801e198:	e7e1      	b.n	801e15e <_fputs_r+0x52>
 801e19a:	68a3      	ldr	r3, [r4, #8]
 801e19c:	3b01      	subs	r3, #1
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	60a3      	str	r3, [r4, #8]
 801e1a2:	da04      	bge.n	801e1ae <_fputs_r+0xa2>
 801e1a4:	69a2      	ldr	r2, [r4, #24]
 801e1a6:	4293      	cmp	r3, r2
 801e1a8:	db06      	blt.n	801e1b8 <_fputs_r+0xac>
 801e1aa:	290a      	cmp	r1, #10
 801e1ac:	d004      	beq.n	801e1b8 <_fputs_r+0xac>
 801e1ae:	6823      	ldr	r3, [r4, #0]
 801e1b0:	1c5a      	adds	r2, r3, #1
 801e1b2:	6022      	str	r2, [r4, #0]
 801e1b4:	7019      	strb	r1, [r3, #0]
 801e1b6:	e7c5      	b.n	801e144 <_fputs_r+0x38>
 801e1b8:	4622      	mov	r2, r4
 801e1ba:	4628      	mov	r0, r5
 801e1bc:	f001 fd8a 	bl	801fcd4 <__swbuf_r>
 801e1c0:	3001      	adds	r0, #1
 801e1c2:	d1bf      	bne.n	801e144 <_fputs_r+0x38>
 801e1c4:	e7dd      	b.n	801e182 <_fputs_r+0x76>
 801e1c6:	460d      	mov	r5, r1
 801e1c8:	e7c9      	b.n	801e15e <_fputs_r+0x52>
 801e1ca:	bf00      	nop
 801e1cc:	08026a00 	.word	0x08026a00
 801e1d0:	08026a20 	.word	0x08026a20
 801e1d4:	080269e0 	.word	0x080269e0

0801e1d8 <fputs>:
 801e1d8:	4b02      	ldr	r3, [pc, #8]	; (801e1e4 <fputs+0xc>)
 801e1da:	460a      	mov	r2, r1
 801e1dc:	4601      	mov	r1, r0
 801e1de:	6818      	ldr	r0, [r3, #0]
 801e1e0:	f7ff bf94 	b.w	801e10c <_fputs_r>
 801e1e4:	20000108 	.word	0x20000108

0801e1e8 <_fseek_r>:
 801e1e8:	f000 b800 	b.w	801e1ec <_fseeko_r>

0801e1ec <_fseeko_r>:
 801e1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1f0:	460c      	mov	r4, r1
 801e1f2:	4617      	mov	r7, r2
 801e1f4:	461e      	mov	r6, r3
 801e1f6:	4605      	mov	r5, r0
 801e1f8:	b118      	cbz	r0, 801e202 <_fseeko_r+0x16>
 801e1fa:	6983      	ldr	r3, [r0, #24]
 801e1fc:	b90b      	cbnz	r3, 801e202 <_fseeko_r+0x16>
 801e1fe:	f7ff feab 	bl	801df58 <__sinit>
 801e202:	4b44      	ldr	r3, [pc, #272]	; (801e314 <_fseeko_r+0x128>)
 801e204:	429c      	cmp	r4, r3
 801e206:	d122      	bne.n	801e24e <_fseeko_r+0x62>
 801e208:	686c      	ldr	r4, [r5, #4]
 801e20a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e20c:	07d9      	lsls	r1, r3, #31
 801e20e:	d405      	bmi.n	801e21c <_fseeko_r+0x30>
 801e210:	89a3      	ldrh	r3, [r4, #12]
 801e212:	059a      	lsls	r2, r3, #22
 801e214:	d402      	bmi.n	801e21c <_fseeko_r+0x30>
 801e216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e218:	f000 fa51 	bl	801e6be <__retarget_lock_acquire_recursive>
 801e21c:	89a3      	ldrh	r3, [r4, #12]
 801e21e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801e222:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801e226:	d103      	bne.n	801e230 <_fseeko_r+0x44>
 801e228:	4621      	mov	r1, r4
 801e22a:	4628      	mov	r0, r5
 801e22c:	f7ff fdee 	bl	801de0c <_fflush_r>
 801e230:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801e234:	f1b8 0f00 	cmp.w	r8, #0
 801e238:	d113      	bne.n	801e262 <_fseeko_r+0x76>
 801e23a:	231d      	movs	r3, #29
 801e23c:	602b      	str	r3, [r5, #0]
 801e23e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e240:	07d9      	lsls	r1, r3, #31
 801e242:	d55d      	bpl.n	801e300 <_fseeko_r+0x114>
 801e244:	f04f 36ff 	mov.w	r6, #4294967295
 801e248:	4630      	mov	r0, r6
 801e24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e24e:	4b32      	ldr	r3, [pc, #200]	; (801e318 <_fseeko_r+0x12c>)
 801e250:	429c      	cmp	r4, r3
 801e252:	d101      	bne.n	801e258 <_fseeko_r+0x6c>
 801e254:	68ac      	ldr	r4, [r5, #8]
 801e256:	e7d8      	b.n	801e20a <_fseeko_r+0x1e>
 801e258:	4b30      	ldr	r3, [pc, #192]	; (801e31c <_fseeko_r+0x130>)
 801e25a:	429c      	cmp	r4, r3
 801e25c:	bf08      	it	eq
 801e25e:	68ec      	ldreq	r4, [r5, #12]
 801e260:	e7d3      	b.n	801e20a <_fseeko_r+0x1e>
 801e262:	2e01      	cmp	r6, #1
 801e264:	d036      	beq.n	801e2d4 <_fseeko_r+0xe8>
 801e266:	f036 0302 	bics.w	r3, r6, #2
 801e26a:	d147      	bne.n	801e2fc <_fseeko_r+0x110>
 801e26c:	6923      	ldr	r3, [r4, #16]
 801e26e:	b91b      	cbnz	r3, 801e278 <_fseeko_r+0x8c>
 801e270:	4621      	mov	r1, r4
 801e272:	4628      	mov	r0, r5
 801e274:	f000 fa4a 	bl	801e70c <__smakebuf_r>
 801e278:	4621      	mov	r1, r4
 801e27a:	4628      	mov	r0, r5
 801e27c:	f7ff fdc6 	bl	801de0c <_fflush_r>
 801e280:	2800      	cmp	r0, #0
 801e282:	d1dc      	bne.n	801e23e <_fseeko_r+0x52>
 801e284:	6a21      	ldr	r1, [r4, #32]
 801e286:	4633      	mov	r3, r6
 801e288:	463a      	mov	r2, r7
 801e28a:	4628      	mov	r0, r5
 801e28c:	47c0      	blx	r8
 801e28e:	3001      	adds	r0, #1
 801e290:	d0d5      	beq.n	801e23e <_fseeko_r+0x52>
 801e292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e294:	b141      	cbz	r1, 801e2a8 <_fseeko_r+0xbc>
 801e296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e29a:	4299      	cmp	r1, r3
 801e29c:	d002      	beq.n	801e2a4 <_fseeko_r+0xb8>
 801e29e:	4628      	mov	r0, r5
 801e2a0:	f000 faaa 	bl	801e7f8 <_free_r>
 801e2a4:	2300      	movs	r3, #0
 801e2a6:	6363      	str	r3, [r4, #52]	; 0x34
 801e2a8:	6923      	ldr	r3, [r4, #16]
 801e2aa:	6023      	str	r3, [r4, #0]
 801e2ac:	89a3      	ldrh	r3, [r4, #12]
 801e2ae:	2500      	movs	r5, #0
 801e2b0:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801e2b4:	6065      	str	r5, [r4, #4]
 801e2b6:	81a3      	strh	r3, [r4, #12]
 801e2b8:	2208      	movs	r2, #8
 801e2ba:	4629      	mov	r1, r5
 801e2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e2c0:	f000 fa82 	bl	801e7c8 <memset>
 801e2c4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801e2c6:	f016 0601 	ands.w	r6, r6, #1
 801e2ca:	d120      	bne.n	801e30e <_fseeko_r+0x122>
 801e2cc:	89a3      	ldrh	r3, [r4, #12]
 801e2ce:	059b      	lsls	r3, r3, #22
 801e2d0:	d4ba      	bmi.n	801e248 <_fseeko_r+0x5c>
 801e2d2:	e00c      	b.n	801e2ee <_fseeko_r+0x102>
 801e2d4:	4621      	mov	r1, r4
 801e2d6:	4628      	mov	r0, r5
 801e2d8:	f000 f822 	bl	801e320 <_ftello_r>
 801e2dc:	1c43      	adds	r3, r0, #1
 801e2de:	4606      	mov	r6, r0
 801e2e0:	d109      	bne.n	801e2f6 <_fseeko_r+0x10a>
 801e2e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e2e4:	07dd      	lsls	r5, r3, #31
 801e2e6:	d4ad      	bmi.n	801e244 <_fseeko_r+0x58>
 801e2e8:	89a3      	ldrh	r3, [r4, #12]
 801e2ea:	0598      	lsls	r0, r3, #22
 801e2ec:	d4aa      	bmi.n	801e244 <_fseeko_r+0x58>
 801e2ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e2f0:	f000 f9e7 	bl	801e6c2 <__retarget_lock_release_recursive>
 801e2f4:	e7a8      	b.n	801e248 <_fseeko_r+0x5c>
 801e2f6:	4407      	add	r7, r0
 801e2f8:	2600      	movs	r6, #0
 801e2fa:	e7b7      	b.n	801e26c <_fseeko_r+0x80>
 801e2fc:	2316      	movs	r3, #22
 801e2fe:	e79d      	b.n	801e23c <_fseeko_r+0x50>
 801e300:	89a3      	ldrh	r3, [r4, #12]
 801e302:	059a      	lsls	r2, r3, #22
 801e304:	d49e      	bmi.n	801e244 <_fseeko_r+0x58>
 801e306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e308:	f000 f9db 	bl	801e6c2 <__retarget_lock_release_recursive>
 801e30c:	e79a      	b.n	801e244 <_fseeko_r+0x58>
 801e30e:	462e      	mov	r6, r5
 801e310:	e79a      	b.n	801e248 <_fseeko_r+0x5c>
 801e312:	bf00      	nop
 801e314:	08026a00 	.word	0x08026a00
 801e318:	08026a20 	.word	0x08026a20
 801e31c:	080269e0 	.word	0x080269e0

0801e320 <_ftello_r>:
 801e320:	b570      	push	{r4, r5, r6, lr}
 801e322:	460c      	mov	r4, r1
 801e324:	4605      	mov	r5, r0
 801e326:	b118      	cbz	r0, 801e330 <_ftello_r+0x10>
 801e328:	6983      	ldr	r3, [r0, #24]
 801e32a:	b90b      	cbnz	r3, 801e330 <_ftello_r+0x10>
 801e32c:	f7ff fe14 	bl	801df58 <__sinit>
 801e330:	4b32      	ldr	r3, [pc, #200]	; (801e3fc <_ftello_r+0xdc>)
 801e332:	429c      	cmp	r4, r3
 801e334:	d114      	bne.n	801e360 <_ftello_r+0x40>
 801e336:	686c      	ldr	r4, [r5, #4]
 801e338:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e33a:	07da      	lsls	r2, r3, #31
 801e33c:	d405      	bmi.n	801e34a <_ftello_r+0x2a>
 801e33e:	89a3      	ldrh	r3, [r4, #12]
 801e340:	059b      	lsls	r3, r3, #22
 801e342:	d402      	bmi.n	801e34a <_ftello_r+0x2a>
 801e344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e346:	f000 f9ba 	bl	801e6be <__retarget_lock_acquire_recursive>
 801e34a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e34c:	b9ce      	cbnz	r6, 801e382 <_ftello_r+0x62>
 801e34e:	231d      	movs	r3, #29
 801e350:	602b      	str	r3, [r5, #0]
 801e352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e354:	07de      	lsls	r6, r3, #31
 801e356:	d50d      	bpl.n	801e374 <_ftello_r+0x54>
 801e358:	f04f 35ff 	mov.w	r5, #4294967295
 801e35c:	4628      	mov	r0, r5
 801e35e:	bd70      	pop	{r4, r5, r6, pc}
 801e360:	4b27      	ldr	r3, [pc, #156]	; (801e400 <_ftello_r+0xe0>)
 801e362:	429c      	cmp	r4, r3
 801e364:	d101      	bne.n	801e36a <_ftello_r+0x4a>
 801e366:	68ac      	ldr	r4, [r5, #8]
 801e368:	e7e6      	b.n	801e338 <_ftello_r+0x18>
 801e36a:	4b26      	ldr	r3, [pc, #152]	; (801e404 <_ftello_r+0xe4>)
 801e36c:	429c      	cmp	r4, r3
 801e36e:	bf08      	it	eq
 801e370:	68ec      	ldreq	r4, [r5, #12]
 801e372:	e7e1      	b.n	801e338 <_ftello_r+0x18>
 801e374:	89a3      	ldrh	r3, [r4, #12]
 801e376:	059d      	lsls	r5, r3, #22
 801e378:	d4ee      	bmi.n	801e358 <_ftello_r+0x38>
 801e37a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e37c:	f000 f9a1 	bl	801e6c2 <__retarget_lock_release_recursive>
 801e380:	e7ea      	b.n	801e358 <_ftello_r+0x38>
 801e382:	89a2      	ldrh	r2, [r4, #12]
 801e384:	f002 030c 	and.w	r3, r2, #12
 801e388:	2b08      	cmp	r3, #8
 801e38a:	d119      	bne.n	801e3c0 <_ftello_r+0xa0>
 801e38c:	6823      	ldr	r3, [r4, #0]
 801e38e:	b1bb      	cbz	r3, 801e3c0 <_ftello_r+0xa0>
 801e390:	6921      	ldr	r1, [r4, #16]
 801e392:	1a5b      	subs	r3, r3, r1
 801e394:	2b00      	cmp	r3, #0
 801e396:	dd13      	ble.n	801e3c0 <_ftello_r+0xa0>
 801e398:	05d0      	lsls	r0, r2, #23
 801e39a:	d511      	bpl.n	801e3c0 <_ftello_r+0xa0>
 801e39c:	2302      	movs	r3, #2
 801e39e:	2200      	movs	r2, #0
 801e3a0:	6a21      	ldr	r1, [r4, #32]
 801e3a2:	4628      	mov	r0, r5
 801e3a4:	47b0      	blx	r6
 801e3a6:	1c41      	adds	r1, r0, #1
 801e3a8:	4605      	mov	r5, r0
 801e3aa:	d10d      	bne.n	801e3c8 <_ftello_r+0xa8>
 801e3ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3ae:	07da      	lsls	r2, r3, #31
 801e3b0:	d4d2      	bmi.n	801e358 <_ftello_r+0x38>
 801e3b2:	89a3      	ldrh	r3, [r4, #12]
 801e3b4:	059b      	lsls	r3, r3, #22
 801e3b6:	d4cf      	bmi.n	801e358 <_ftello_r+0x38>
 801e3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3ba:	f000 f982 	bl	801e6c2 <__retarget_lock_release_recursive>
 801e3be:	e7cd      	b.n	801e35c <_ftello_r+0x3c>
 801e3c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e3c4:	d00f      	beq.n	801e3e6 <_ftello_r+0xc6>
 801e3c6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801e3c8:	89a2      	ldrh	r2, [r4, #12]
 801e3ca:	0756      	lsls	r6, r2, #29
 801e3cc:	d50d      	bpl.n	801e3ea <_ftello_r+0xca>
 801e3ce:	6863      	ldr	r3, [r4, #4]
 801e3d0:	1aed      	subs	r5, r5, r3
 801e3d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e3d4:	b10b      	cbz	r3, 801e3da <_ftello_r+0xba>
 801e3d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e3d8:	1aed      	subs	r5, r5, r3
 801e3da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3dc:	07d9      	lsls	r1, r3, #31
 801e3de:	d4bd      	bmi.n	801e35c <_ftello_r+0x3c>
 801e3e0:	0593      	lsls	r3, r2, #22
 801e3e2:	d4bb      	bmi.n	801e35c <_ftello_r+0x3c>
 801e3e4:	e7e8      	b.n	801e3b8 <_ftello_r+0x98>
 801e3e6:	2301      	movs	r3, #1
 801e3e8:	e7da      	b.n	801e3a0 <_ftello_r+0x80>
 801e3ea:	0710      	lsls	r0, r2, #28
 801e3ec:	d5f5      	bpl.n	801e3da <_ftello_r+0xba>
 801e3ee:	6823      	ldr	r3, [r4, #0]
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d0f2      	beq.n	801e3da <_ftello_r+0xba>
 801e3f4:	6921      	ldr	r1, [r4, #16]
 801e3f6:	1a5b      	subs	r3, r3, r1
 801e3f8:	441d      	add	r5, r3
 801e3fa:	e7ee      	b.n	801e3da <_ftello_r+0xba>
 801e3fc:	08026a00 	.word	0x08026a00
 801e400:	08026a20 	.word	0x08026a20
 801e404:	080269e0 	.word	0x080269e0

0801e408 <_fwalk_reent>:
 801e408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e40c:	4606      	mov	r6, r0
 801e40e:	4688      	mov	r8, r1
 801e410:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e414:	2700      	movs	r7, #0
 801e416:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e41a:	f1b9 0901 	subs.w	r9, r9, #1
 801e41e:	d505      	bpl.n	801e42c <_fwalk_reent+0x24>
 801e420:	6824      	ldr	r4, [r4, #0]
 801e422:	2c00      	cmp	r4, #0
 801e424:	d1f7      	bne.n	801e416 <_fwalk_reent+0xe>
 801e426:	4638      	mov	r0, r7
 801e428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e42c:	89ab      	ldrh	r3, [r5, #12]
 801e42e:	2b01      	cmp	r3, #1
 801e430:	d907      	bls.n	801e442 <_fwalk_reent+0x3a>
 801e432:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e436:	3301      	adds	r3, #1
 801e438:	d003      	beq.n	801e442 <_fwalk_reent+0x3a>
 801e43a:	4629      	mov	r1, r5
 801e43c:	4630      	mov	r0, r6
 801e43e:	47c0      	blx	r8
 801e440:	4307      	orrs	r7, r0
 801e442:	3568      	adds	r5, #104	; 0x68
 801e444:	e7e9      	b.n	801e41a <_fwalk_reent+0x12>
	...

0801e448 <__libc_init_array>:
 801e448:	b570      	push	{r4, r5, r6, lr}
 801e44a:	4d0d      	ldr	r5, [pc, #52]	; (801e480 <__libc_init_array+0x38>)
 801e44c:	4c0d      	ldr	r4, [pc, #52]	; (801e484 <__libc_init_array+0x3c>)
 801e44e:	1b64      	subs	r4, r4, r5
 801e450:	10a4      	asrs	r4, r4, #2
 801e452:	2600      	movs	r6, #0
 801e454:	42a6      	cmp	r6, r4
 801e456:	d109      	bne.n	801e46c <__libc_init_array+0x24>
 801e458:	4d0b      	ldr	r5, [pc, #44]	; (801e488 <__libc_init_array+0x40>)
 801e45a:	4c0c      	ldr	r4, [pc, #48]	; (801e48c <__libc_init_array+0x44>)
 801e45c:	f003 f8cc 	bl	80215f8 <_init>
 801e460:	1b64      	subs	r4, r4, r5
 801e462:	10a4      	asrs	r4, r4, #2
 801e464:	2600      	movs	r6, #0
 801e466:	42a6      	cmp	r6, r4
 801e468:	d105      	bne.n	801e476 <__libc_init_array+0x2e>
 801e46a:	bd70      	pop	{r4, r5, r6, pc}
 801e46c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e470:	4798      	blx	r3
 801e472:	3601      	adds	r6, #1
 801e474:	e7ee      	b.n	801e454 <__libc_init_array+0xc>
 801e476:	f855 3b04 	ldr.w	r3, [r5], #4
 801e47a:	4798      	blx	r3
 801e47c:	3601      	adds	r6, #1
 801e47e:	e7f2      	b.n	801e466 <__libc_init_array+0x1e>
 801e480:	08026fd8 	.word	0x08026fd8
 801e484:	08026fd8 	.word	0x08026fd8
 801e488:	08026fd8 	.word	0x08026fd8
 801e48c:	08026fe8 	.word	0x08026fe8

0801e490 <localtime>:
 801e490:	b538      	push	{r3, r4, r5, lr}
 801e492:	4b0b      	ldr	r3, [pc, #44]	; (801e4c0 <localtime+0x30>)
 801e494:	681d      	ldr	r5, [r3, #0]
 801e496:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801e498:	4604      	mov	r4, r0
 801e49a:	b953      	cbnz	r3, 801e4b2 <localtime+0x22>
 801e49c:	2024      	movs	r0, #36	; 0x24
 801e49e:	f000 f975 	bl	801e78c <malloc>
 801e4a2:	4602      	mov	r2, r0
 801e4a4:	63e8      	str	r0, [r5, #60]	; 0x3c
 801e4a6:	b920      	cbnz	r0, 801e4b2 <localtime+0x22>
 801e4a8:	4b06      	ldr	r3, [pc, #24]	; (801e4c4 <localtime+0x34>)
 801e4aa:	4807      	ldr	r0, [pc, #28]	; (801e4c8 <localtime+0x38>)
 801e4ac:	2132      	movs	r1, #50	; 0x32
 801e4ae:	f001 fd49 	bl	801ff44 <__assert_func>
 801e4b2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801e4b4:	4620      	mov	r0, r4
 801e4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e4ba:	f000 b807 	b.w	801e4cc <localtime_r>
 801e4be:	bf00      	nop
 801e4c0:	20000108 	.word	0x20000108
 801e4c4:	08026a44 	.word	0x08026a44
 801e4c8:	08026a5b 	.word	0x08026a5b

0801e4cc <localtime_r>:
 801e4cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801e4d0:	4607      	mov	r7, r0
 801e4d2:	9101      	str	r1, [sp, #4]
 801e4d4:	f001 fe00 	bl	80200d8 <__gettzinfo>
 801e4d8:	9901      	ldr	r1, [sp, #4]
 801e4da:	4680      	mov	r8, r0
 801e4dc:	4638      	mov	r0, r7
 801e4de:	f001 fdff 	bl	80200e0 <gmtime_r>
 801e4e2:	6943      	ldr	r3, [r0, #20]
 801e4e4:	079a      	lsls	r2, r3, #30
 801e4e6:	4604      	mov	r4, r0
 801e4e8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801e4ec:	d105      	bne.n	801e4fa <localtime_r+0x2e>
 801e4ee:	2264      	movs	r2, #100	; 0x64
 801e4f0:	fb96 f3f2 	sdiv	r3, r6, r2
 801e4f4:	fb02 6313 	mls	r3, r2, r3, r6
 801e4f8:	bb7b      	cbnz	r3, 801e55a <localtime_r+0x8e>
 801e4fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e4fe:	fb96 f5f3 	sdiv	r5, r6, r3
 801e502:	fb03 6515 	mls	r5, r3, r5, r6
 801e506:	fab5 f585 	clz	r5, r5
 801e50a:	096d      	lsrs	r5, r5, #5
 801e50c:	4b68      	ldr	r3, [pc, #416]	; (801e6b0 <localtime_r+0x1e4>)
 801e50e:	2230      	movs	r2, #48	; 0x30
 801e510:	fb02 3505 	mla	r5, r2, r5, r3
 801e514:	f001 fa16 	bl	801f944 <__tz_lock>
 801e518:	f001 fa20 	bl	801f95c <_tzset_unlocked>
 801e51c:	4b65      	ldr	r3, [pc, #404]	; (801e6b4 <localtime_r+0x1e8>)
 801e51e:	681b      	ldr	r3, [r3, #0]
 801e520:	b353      	cbz	r3, 801e578 <localtime_r+0xac>
 801e522:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e526:	42b3      	cmp	r3, r6
 801e528:	d119      	bne.n	801e55e <localtime_r+0x92>
 801e52a:	f8d8 1000 	ldr.w	r1, [r8]
 801e52e:	e9d7 6700 	ldrd	r6, r7, [r7]
 801e532:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801e536:	b9d1      	cbnz	r1, 801e56e <localtime_r+0xa2>
 801e538:	4296      	cmp	r6, r2
 801e53a:	eb77 0303 	sbcs.w	r3, r7, r3
 801e53e:	da23      	bge.n	801e588 <localtime_r+0xbc>
 801e540:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801e544:	4296      	cmp	r6, r2
 801e546:	eb77 0303 	sbcs.w	r3, r7, r3
 801e54a:	bfb4      	ite	lt
 801e54c:	2301      	movlt	r3, #1
 801e54e:	2300      	movge	r3, #0
 801e550:	6223      	str	r3, [r4, #32]
 801e552:	db1b      	blt.n	801e58c <localtime_r+0xc0>
 801e554:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801e558:	e01a      	b.n	801e590 <localtime_r+0xc4>
 801e55a:	2501      	movs	r5, #1
 801e55c:	e7d6      	b.n	801e50c <localtime_r+0x40>
 801e55e:	4630      	mov	r0, r6
 801e560:	f001 f948 	bl	801f7f4 <__tzcalc_limits>
 801e564:	2800      	cmp	r0, #0
 801e566:	d1e0      	bne.n	801e52a <localtime_r+0x5e>
 801e568:	f04f 33ff 	mov.w	r3, #4294967295
 801e56c:	e004      	b.n	801e578 <localtime_r+0xac>
 801e56e:	4296      	cmp	r6, r2
 801e570:	eb77 0303 	sbcs.w	r3, r7, r3
 801e574:	da02      	bge.n	801e57c <localtime_r+0xb0>
 801e576:	2300      	movs	r3, #0
 801e578:	6223      	str	r3, [r4, #32]
 801e57a:	e7eb      	b.n	801e554 <localtime_r+0x88>
 801e57c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801e580:	4296      	cmp	r6, r2
 801e582:	eb77 0303 	sbcs.w	r3, r7, r3
 801e586:	daf6      	bge.n	801e576 <localtime_r+0xaa>
 801e588:	2301      	movs	r3, #1
 801e58a:	6223      	str	r3, [r4, #32]
 801e58c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801e590:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801e594:	203c      	movs	r0, #60	; 0x3c
 801e596:	fb91 f6f3 	sdiv	r6, r1, r3
 801e59a:	fb03 1316 	mls	r3, r3, r6, r1
 801e59e:	6861      	ldr	r1, [r4, #4]
 801e5a0:	fb93 f2f0 	sdiv	r2, r3, r0
 801e5a4:	fb00 3012 	mls	r0, r0, r2, r3
 801e5a8:	6823      	ldr	r3, [r4, #0]
 801e5aa:	1a89      	subs	r1, r1, r2
 801e5ac:	68a2      	ldr	r2, [r4, #8]
 801e5ae:	6061      	str	r1, [r4, #4]
 801e5b0:	1a1b      	subs	r3, r3, r0
 801e5b2:	1b92      	subs	r2, r2, r6
 801e5b4:	2b3b      	cmp	r3, #59	; 0x3b
 801e5b6:	6023      	str	r3, [r4, #0]
 801e5b8:	60a2      	str	r2, [r4, #8]
 801e5ba:	dd35      	ble.n	801e628 <localtime_r+0x15c>
 801e5bc:	3101      	adds	r1, #1
 801e5be:	6061      	str	r1, [r4, #4]
 801e5c0:	3b3c      	subs	r3, #60	; 0x3c
 801e5c2:	6023      	str	r3, [r4, #0]
 801e5c4:	6863      	ldr	r3, [r4, #4]
 801e5c6:	2b3b      	cmp	r3, #59	; 0x3b
 801e5c8:	dd34      	ble.n	801e634 <localtime_r+0x168>
 801e5ca:	3201      	adds	r2, #1
 801e5cc:	60a2      	str	r2, [r4, #8]
 801e5ce:	3b3c      	subs	r3, #60	; 0x3c
 801e5d0:	6063      	str	r3, [r4, #4]
 801e5d2:	68a3      	ldr	r3, [r4, #8]
 801e5d4:	2b17      	cmp	r3, #23
 801e5d6:	dd33      	ble.n	801e640 <localtime_r+0x174>
 801e5d8:	69e2      	ldr	r2, [r4, #28]
 801e5da:	3201      	adds	r2, #1
 801e5dc:	61e2      	str	r2, [r4, #28]
 801e5de:	69a2      	ldr	r2, [r4, #24]
 801e5e0:	3201      	adds	r2, #1
 801e5e2:	2a06      	cmp	r2, #6
 801e5e4:	bfc8      	it	gt
 801e5e6:	2200      	movgt	r2, #0
 801e5e8:	61a2      	str	r2, [r4, #24]
 801e5ea:	68e2      	ldr	r2, [r4, #12]
 801e5ec:	3b18      	subs	r3, #24
 801e5ee:	3201      	adds	r2, #1
 801e5f0:	60a3      	str	r3, [r4, #8]
 801e5f2:	6923      	ldr	r3, [r4, #16]
 801e5f4:	60e2      	str	r2, [r4, #12]
 801e5f6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801e5fa:	428a      	cmp	r2, r1
 801e5fc:	dd0e      	ble.n	801e61c <localtime_r+0x150>
 801e5fe:	2b0b      	cmp	r3, #11
 801e600:	eba2 0201 	sub.w	r2, r2, r1
 801e604:	60e2      	str	r2, [r4, #12]
 801e606:	f103 0201 	add.w	r2, r3, #1
 801e60a:	bf09      	itett	eq
 801e60c:	6963      	ldreq	r3, [r4, #20]
 801e60e:	6122      	strne	r2, [r4, #16]
 801e610:	2200      	moveq	r2, #0
 801e612:	3301      	addeq	r3, #1
 801e614:	bf02      	ittt	eq
 801e616:	6122      	streq	r2, [r4, #16]
 801e618:	6163      	streq	r3, [r4, #20]
 801e61a:	61e2      	streq	r2, [r4, #28]
 801e61c:	f001 f998 	bl	801f950 <__tz_unlock>
 801e620:	4620      	mov	r0, r4
 801e622:	b002      	add	sp, #8
 801e624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e628:	2b00      	cmp	r3, #0
 801e62a:	dacb      	bge.n	801e5c4 <localtime_r+0xf8>
 801e62c:	3901      	subs	r1, #1
 801e62e:	6061      	str	r1, [r4, #4]
 801e630:	333c      	adds	r3, #60	; 0x3c
 801e632:	e7c6      	b.n	801e5c2 <localtime_r+0xf6>
 801e634:	2b00      	cmp	r3, #0
 801e636:	dacc      	bge.n	801e5d2 <localtime_r+0x106>
 801e638:	3a01      	subs	r2, #1
 801e63a:	60a2      	str	r2, [r4, #8]
 801e63c:	333c      	adds	r3, #60	; 0x3c
 801e63e:	e7c7      	b.n	801e5d0 <localtime_r+0x104>
 801e640:	2b00      	cmp	r3, #0
 801e642:	daeb      	bge.n	801e61c <localtime_r+0x150>
 801e644:	69e2      	ldr	r2, [r4, #28]
 801e646:	3a01      	subs	r2, #1
 801e648:	61e2      	str	r2, [r4, #28]
 801e64a:	69a2      	ldr	r2, [r4, #24]
 801e64c:	3a01      	subs	r2, #1
 801e64e:	bf48      	it	mi
 801e650:	2206      	movmi	r2, #6
 801e652:	61a2      	str	r2, [r4, #24]
 801e654:	68e2      	ldr	r2, [r4, #12]
 801e656:	3318      	adds	r3, #24
 801e658:	3a01      	subs	r2, #1
 801e65a:	60e2      	str	r2, [r4, #12]
 801e65c:	60a3      	str	r3, [r4, #8]
 801e65e:	2a00      	cmp	r2, #0
 801e660:	d1dc      	bne.n	801e61c <localtime_r+0x150>
 801e662:	6923      	ldr	r3, [r4, #16]
 801e664:	3b01      	subs	r3, #1
 801e666:	d405      	bmi.n	801e674 <localtime_r+0x1a8>
 801e668:	6123      	str	r3, [r4, #16]
 801e66a:	6923      	ldr	r3, [r4, #16]
 801e66c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e670:	60e3      	str	r3, [r4, #12]
 801e672:	e7d3      	b.n	801e61c <localtime_r+0x150>
 801e674:	230b      	movs	r3, #11
 801e676:	6123      	str	r3, [r4, #16]
 801e678:	6963      	ldr	r3, [r4, #20]
 801e67a:	1e5a      	subs	r2, r3, #1
 801e67c:	6162      	str	r2, [r4, #20]
 801e67e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801e682:	0793      	lsls	r3, r2, #30
 801e684:	d105      	bne.n	801e692 <localtime_r+0x1c6>
 801e686:	2164      	movs	r1, #100	; 0x64
 801e688:	fb92 f3f1 	sdiv	r3, r2, r1
 801e68c:	fb01 2313 	mls	r3, r1, r3, r2
 801e690:	b963      	cbnz	r3, 801e6ac <localtime_r+0x1e0>
 801e692:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e696:	fb92 f3f1 	sdiv	r3, r2, r1
 801e69a:	fb01 2313 	mls	r3, r1, r3, r2
 801e69e:	fab3 f383 	clz	r3, r3
 801e6a2:	095b      	lsrs	r3, r3, #5
 801e6a4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801e6a8:	61e3      	str	r3, [r4, #28]
 801e6aa:	e7de      	b.n	801e66a <localtime_r+0x19e>
 801e6ac:	2301      	movs	r3, #1
 801e6ae:	e7f9      	b.n	801e6a4 <localtime_r+0x1d8>
 801e6b0:	08026abc 	.word	0x08026abc
 801e6b4:	20000d88 	.word	0x20000d88

0801e6b8 <__retarget_lock_init_recursive>:
 801e6b8:	4770      	bx	lr

0801e6ba <__retarget_lock_close_recursive>:
 801e6ba:	4770      	bx	lr

0801e6bc <__retarget_lock_acquire>:
 801e6bc:	4770      	bx	lr

0801e6be <__retarget_lock_acquire_recursive>:
 801e6be:	4770      	bx	lr

0801e6c0 <__retarget_lock_release>:
 801e6c0:	4770      	bx	lr

0801e6c2 <__retarget_lock_release_recursive>:
 801e6c2:	4770      	bx	lr

0801e6c4 <__swhatbuf_r>:
 801e6c4:	b570      	push	{r4, r5, r6, lr}
 801e6c6:	460e      	mov	r6, r1
 801e6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6cc:	2900      	cmp	r1, #0
 801e6ce:	b096      	sub	sp, #88	; 0x58
 801e6d0:	4614      	mov	r4, r2
 801e6d2:	461d      	mov	r5, r3
 801e6d4:	da07      	bge.n	801e6e6 <__swhatbuf_r+0x22>
 801e6d6:	2300      	movs	r3, #0
 801e6d8:	602b      	str	r3, [r5, #0]
 801e6da:	89b3      	ldrh	r3, [r6, #12]
 801e6dc:	061a      	lsls	r2, r3, #24
 801e6de:	d410      	bmi.n	801e702 <__swhatbuf_r+0x3e>
 801e6e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e6e4:	e00e      	b.n	801e704 <__swhatbuf_r+0x40>
 801e6e6:	466a      	mov	r2, sp
 801e6e8:	f001 fca2 	bl	8020030 <_fstat_r>
 801e6ec:	2800      	cmp	r0, #0
 801e6ee:	dbf2      	blt.n	801e6d6 <__swhatbuf_r+0x12>
 801e6f0:	9a01      	ldr	r2, [sp, #4]
 801e6f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e6f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e6fa:	425a      	negs	r2, r3
 801e6fc:	415a      	adcs	r2, r3
 801e6fe:	602a      	str	r2, [r5, #0]
 801e700:	e7ee      	b.n	801e6e0 <__swhatbuf_r+0x1c>
 801e702:	2340      	movs	r3, #64	; 0x40
 801e704:	2000      	movs	r0, #0
 801e706:	6023      	str	r3, [r4, #0]
 801e708:	b016      	add	sp, #88	; 0x58
 801e70a:	bd70      	pop	{r4, r5, r6, pc}

0801e70c <__smakebuf_r>:
 801e70c:	898b      	ldrh	r3, [r1, #12]
 801e70e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e710:	079d      	lsls	r5, r3, #30
 801e712:	4606      	mov	r6, r0
 801e714:	460c      	mov	r4, r1
 801e716:	d507      	bpl.n	801e728 <__smakebuf_r+0x1c>
 801e718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e71c:	6023      	str	r3, [r4, #0]
 801e71e:	6123      	str	r3, [r4, #16]
 801e720:	2301      	movs	r3, #1
 801e722:	6163      	str	r3, [r4, #20]
 801e724:	b002      	add	sp, #8
 801e726:	bd70      	pop	{r4, r5, r6, pc}
 801e728:	ab01      	add	r3, sp, #4
 801e72a:	466a      	mov	r2, sp
 801e72c:	f7ff ffca 	bl	801e6c4 <__swhatbuf_r>
 801e730:	9900      	ldr	r1, [sp, #0]
 801e732:	4605      	mov	r5, r0
 801e734:	4630      	mov	r0, r6
 801e736:	f000 f8af 	bl	801e898 <_malloc_r>
 801e73a:	b948      	cbnz	r0, 801e750 <__smakebuf_r+0x44>
 801e73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e740:	059a      	lsls	r2, r3, #22
 801e742:	d4ef      	bmi.n	801e724 <__smakebuf_r+0x18>
 801e744:	f023 0303 	bic.w	r3, r3, #3
 801e748:	f043 0302 	orr.w	r3, r3, #2
 801e74c:	81a3      	strh	r3, [r4, #12]
 801e74e:	e7e3      	b.n	801e718 <__smakebuf_r+0xc>
 801e750:	4b0d      	ldr	r3, [pc, #52]	; (801e788 <__smakebuf_r+0x7c>)
 801e752:	62b3      	str	r3, [r6, #40]	; 0x28
 801e754:	89a3      	ldrh	r3, [r4, #12]
 801e756:	6020      	str	r0, [r4, #0]
 801e758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e75c:	81a3      	strh	r3, [r4, #12]
 801e75e:	9b00      	ldr	r3, [sp, #0]
 801e760:	6163      	str	r3, [r4, #20]
 801e762:	9b01      	ldr	r3, [sp, #4]
 801e764:	6120      	str	r0, [r4, #16]
 801e766:	b15b      	cbz	r3, 801e780 <__smakebuf_r+0x74>
 801e768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e76c:	4630      	mov	r0, r6
 801e76e:	f001 fd67 	bl	8020240 <_isatty_r>
 801e772:	b128      	cbz	r0, 801e780 <__smakebuf_r+0x74>
 801e774:	89a3      	ldrh	r3, [r4, #12]
 801e776:	f023 0303 	bic.w	r3, r3, #3
 801e77a:	f043 0301 	orr.w	r3, r3, #1
 801e77e:	81a3      	strh	r3, [r4, #12]
 801e780:	89a0      	ldrh	r0, [r4, #12]
 801e782:	4305      	orrs	r5, r0
 801e784:	81a5      	strh	r5, [r4, #12]
 801e786:	e7cd      	b.n	801e724 <__smakebuf_r+0x18>
 801e788:	0801def1 	.word	0x0801def1

0801e78c <malloc>:
 801e78c:	4b02      	ldr	r3, [pc, #8]	; (801e798 <malloc+0xc>)
 801e78e:	4601      	mov	r1, r0
 801e790:	6818      	ldr	r0, [r3, #0]
 801e792:	f000 b881 	b.w	801e898 <_malloc_r>
 801e796:	bf00      	nop
 801e798:	20000108 	.word	0x20000108

0801e79c <free>:
 801e79c:	4b02      	ldr	r3, [pc, #8]	; (801e7a8 <free+0xc>)
 801e79e:	4601      	mov	r1, r0
 801e7a0:	6818      	ldr	r0, [r3, #0]
 801e7a2:	f000 b829 	b.w	801e7f8 <_free_r>
 801e7a6:	bf00      	nop
 801e7a8:	20000108 	.word	0x20000108

0801e7ac <memcpy>:
 801e7ac:	440a      	add	r2, r1
 801e7ae:	4291      	cmp	r1, r2
 801e7b0:	f100 33ff 	add.w	r3, r0, #4294967295
 801e7b4:	d100      	bne.n	801e7b8 <memcpy+0xc>
 801e7b6:	4770      	bx	lr
 801e7b8:	b510      	push	{r4, lr}
 801e7ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e7be:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e7c2:	4291      	cmp	r1, r2
 801e7c4:	d1f9      	bne.n	801e7ba <memcpy+0xe>
 801e7c6:	bd10      	pop	{r4, pc}

0801e7c8 <memset>:
 801e7c8:	4402      	add	r2, r0
 801e7ca:	4603      	mov	r3, r0
 801e7cc:	4293      	cmp	r3, r2
 801e7ce:	d100      	bne.n	801e7d2 <memset+0xa>
 801e7d0:	4770      	bx	lr
 801e7d2:	f803 1b01 	strb.w	r1, [r3], #1
 801e7d6:	e7f9      	b.n	801e7cc <memset+0x4>

0801e7d8 <_calloc_r>:
 801e7d8:	b513      	push	{r0, r1, r4, lr}
 801e7da:	434a      	muls	r2, r1
 801e7dc:	4611      	mov	r1, r2
 801e7de:	9201      	str	r2, [sp, #4]
 801e7e0:	f000 f85a 	bl	801e898 <_malloc_r>
 801e7e4:	4604      	mov	r4, r0
 801e7e6:	b118      	cbz	r0, 801e7f0 <_calloc_r+0x18>
 801e7e8:	9a01      	ldr	r2, [sp, #4]
 801e7ea:	2100      	movs	r1, #0
 801e7ec:	f7ff ffec 	bl	801e7c8 <memset>
 801e7f0:	4620      	mov	r0, r4
 801e7f2:	b002      	add	sp, #8
 801e7f4:	bd10      	pop	{r4, pc}
	...

0801e7f8 <_free_r>:
 801e7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e7fa:	2900      	cmp	r1, #0
 801e7fc:	d048      	beq.n	801e890 <_free_r+0x98>
 801e7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e802:	9001      	str	r0, [sp, #4]
 801e804:	2b00      	cmp	r3, #0
 801e806:	f1a1 0404 	sub.w	r4, r1, #4
 801e80a:	bfb8      	it	lt
 801e80c:	18e4      	addlt	r4, r4, r3
 801e80e:	f001 fd4f 	bl	80202b0 <__malloc_lock>
 801e812:	4a20      	ldr	r2, [pc, #128]	; (801e894 <_free_r+0x9c>)
 801e814:	9801      	ldr	r0, [sp, #4]
 801e816:	6813      	ldr	r3, [r2, #0]
 801e818:	4615      	mov	r5, r2
 801e81a:	b933      	cbnz	r3, 801e82a <_free_r+0x32>
 801e81c:	6063      	str	r3, [r4, #4]
 801e81e:	6014      	str	r4, [r2, #0]
 801e820:	b003      	add	sp, #12
 801e822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e826:	f001 bd49 	b.w	80202bc <__malloc_unlock>
 801e82a:	42a3      	cmp	r3, r4
 801e82c:	d90b      	bls.n	801e846 <_free_r+0x4e>
 801e82e:	6821      	ldr	r1, [r4, #0]
 801e830:	1862      	adds	r2, r4, r1
 801e832:	4293      	cmp	r3, r2
 801e834:	bf04      	itt	eq
 801e836:	681a      	ldreq	r2, [r3, #0]
 801e838:	685b      	ldreq	r3, [r3, #4]
 801e83a:	6063      	str	r3, [r4, #4]
 801e83c:	bf04      	itt	eq
 801e83e:	1852      	addeq	r2, r2, r1
 801e840:	6022      	streq	r2, [r4, #0]
 801e842:	602c      	str	r4, [r5, #0]
 801e844:	e7ec      	b.n	801e820 <_free_r+0x28>
 801e846:	461a      	mov	r2, r3
 801e848:	685b      	ldr	r3, [r3, #4]
 801e84a:	b10b      	cbz	r3, 801e850 <_free_r+0x58>
 801e84c:	42a3      	cmp	r3, r4
 801e84e:	d9fa      	bls.n	801e846 <_free_r+0x4e>
 801e850:	6811      	ldr	r1, [r2, #0]
 801e852:	1855      	adds	r5, r2, r1
 801e854:	42a5      	cmp	r5, r4
 801e856:	d10b      	bne.n	801e870 <_free_r+0x78>
 801e858:	6824      	ldr	r4, [r4, #0]
 801e85a:	4421      	add	r1, r4
 801e85c:	1854      	adds	r4, r2, r1
 801e85e:	42a3      	cmp	r3, r4
 801e860:	6011      	str	r1, [r2, #0]
 801e862:	d1dd      	bne.n	801e820 <_free_r+0x28>
 801e864:	681c      	ldr	r4, [r3, #0]
 801e866:	685b      	ldr	r3, [r3, #4]
 801e868:	6053      	str	r3, [r2, #4]
 801e86a:	4421      	add	r1, r4
 801e86c:	6011      	str	r1, [r2, #0]
 801e86e:	e7d7      	b.n	801e820 <_free_r+0x28>
 801e870:	d902      	bls.n	801e878 <_free_r+0x80>
 801e872:	230c      	movs	r3, #12
 801e874:	6003      	str	r3, [r0, #0]
 801e876:	e7d3      	b.n	801e820 <_free_r+0x28>
 801e878:	6825      	ldr	r5, [r4, #0]
 801e87a:	1961      	adds	r1, r4, r5
 801e87c:	428b      	cmp	r3, r1
 801e87e:	bf04      	itt	eq
 801e880:	6819      	ldreq	r1, [r3, #0]
 801e882:	685b      	ldreq	r3, [r3, #4]
 801e884:	6063      	str	r3, [r4, #4]
 801e886:	bf04      	itt	eq
 801e888:	1949      	addeq	r1, r1, r5
 801e88a:	6021      	streq	r1, [r4, #0]
 801e88c:	6054      	str	r4, [r2, #4]
 801e88e:	e7c7      	b.n	801e820 <_free_r+0x28>
 801e890:	b003      	add	sp, #12
 801e892:	bd30      	pop	{r4, r5, pc}
 801e894:	20000d64 	.word	0x20000d64

0801e898 <_malloc_r>:
 801e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e89a:	1ccd      	adds	r5, r1, #3
 801e89c:	f025 0503 	bic.w	r5, r5, #3
 801e8a0:	3508      	adds	r5, #8
 801e8a2:	2d0c      	cmp	r5, #12
 801e8a4:	bf38      	it	cc
 801e8a6:	250c      	movcc	r5, #12
 801e8a8:	2d00      	cmp	r5, #0
 801e8aa:	4606      	mov	r6, r0
 801e8ac:	db01      	blt.n	801e8b2 <_malloc_r+0x1a>
 801e8ae:	42a9      	cmp	r1, r5
 801e8b0:	d903      	bls.n	801e8ba <_malloc_r+0x22>
 801e8b2:	230c      	movs	r3, #12
 801e8b4:	6033      	str	r3, [r6, #0]
 801e8b6:	2000      	movs	r0, #0
 801e8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8ba:	f001 fcf9 	bl	80202b0 <__malloc_lock>
 801e8be:	4921      	ldr	r1, [pc, #132]	; (801e944 <_malloc_r+0xac>)
 801e8c0:	680a      	ldr	r2, [r1, #0]
 801e8c2:	4614      	mov	r4, r2
 801e8c4:	b99c      	cbnz	r4, 801e8ee <_malloc_r+0x56>
 801e8c6:	4f20      	ldr	r7, [pc, #128]	; (801e948 <_malloc_r+0xb0>)
 801e8c8:	683b      	ldr	r3, [r7, #0]
 801e8ca:	b923      	cbnz	r3, 801e8d6 <_malloc_r+0x3e>
 801e8cc:	4621      	mov	r1, r4
 801e8ce:	4630      	mov	r0, r6
 801e8d0:	f000 f8da 	bl	801ea88 <_sbrk_r>
 801e8d4:	6038      	str	r0, [r7, #0]
 801e8d6:	4629      	mov	r1, r5
 801e8d8:	4630      	mov	r0, r6
 801e8da:	f000 f8d5 	bl	801ea88 <_sbrk_r>
 801e8de:	1c43      	adds	r3, r0, #1
 801e8e0:	d123      	bne.n	801e92a <_malloc_r+0x92>
 801e8e2:	230c      	movs	r3, #12
 801e8e4:	6033      	str	r3, [r6, #0]
 801e8e6:	4630      	mov	r0, r6
 801e8e8:	f001 fce8 	bl	80202bc <__malloc_unlock>
 801e8ec:	e7e3      	b.n	801e8b6 <_malloc_r+0x1e>
 801e8ee:	6823      	ldr	r3, [r4, #0]
 801e8f0:	1b5b      	subs	r3, r3, r5
 801e8f2:	d417      	bmi.n	801e924 <_malloc_r+0x8c>
 801e8f4:	2b0b      	cmp	r3, #11
 801e8f6:	d903      	bls.n	801e900 <_malloc_r+0x68>
 801e8f8:	6023      	str	r3, [r4, #0]
 801e8fa:	441c      	add	r4, r3
 801e8fc:	6025      	str	r5, [r4, #0]
 801e8fe:	e004      	b.n	801e90a <_malloc_r+0x72>
 801e900:	6863      	ldr	r3, [r4, #4]
 801e902:	42a2      	cmp	r2, r4
 801e904:	bf0c      	ite	eq
 801e906:	600b      	streq	r3, [r1, #0]
 801e908:	6053      	strne	r3, [r2, #4]
 801e90a:	4630      	mov	r0, r6
 801e90c:	f001 fcd6 	bl	80202bc <__malloc_unlock>
 801e910:	f104 000b 	add.w	r0, r4, #11
 801e914:	1d23      	adds	r3, r4, #4
 801e916:	f020 0007 	bic.w	r0, r0, #7
 801e91a:	1ac2      	subs	r2, r0, r3
 801e91c:	d0cc      	beq.n	801e8b8 <_malloc_r+0x20>
 801e91e:	1a1b      	subs	r3, r3, r0
 801e920:	50a3      	str	r3, [r4, r2]
 801e922:	e7c9      	b.n	801e8b8 <_malloc_r+0x20>
 801e924:	4622      	mov	r2, r4
 801e926:	6864      	ldr	r4, [r4, #4]
 801e928:	e7cc      	b.n	801e8c4 <_malloc_r+0x2c>
 801e92a:	1cc4      	adds	r4, r0, #3
 801e92c:	f024 0403 	bic.w	r4, r4, #3
 801e930:	42a0      	cmp	r0, r4
 801e932:	d0e3      	beq.n	801e8fc <_malloc_r+0x64>
 801e934:	1a21      	subs	r1, r4, r0
 801e936:	4630      	mov	r0, r6
 801e938:	f000 f8a6 	bl	801ea88 <_sbrk_r>
 801e93c:	3001      	adds	r0, #1
 801e93e:	d1dd      	bne.n	801e8fc <_malloc_r+0x64>
 801e940:	e7cf      	b.n	801e8e2 <_malloc_r+0x4a>
 801e942:	bf00      	nop
 801e944:	20000d64 	.word	0x20000d64
 801e948:	20000d68 	.word	0x20000d68

0801e94c <_open_r>:
 801e94c:	b538      	push	{r3, r4, r5, lr}
 801e94e:	4d07      	ldr	r5, [pc, #28]	; (801e96c <_open_r+0x20>)
 801e950:	4604      	mov	r4, r0
 801e952:	4608      	mov	r0, r1
 801e954:	4611      	mov	r1, r2
 801e956:	2200      	movs	r2, #0
 801e958:	602a      	str	r2, [r5, #0]
 801e95a:	461a      	mov	r2, r3
 801e95c:	f7e2 fa88 	bl	8000e70 <_open>
 801e960:	1c43      	adds	r3, r0, #1
 801e962:	d102      	bne.n	801e96a <_open_r+0x1e>
 801e964:	682b      	ldr	r3, [r5, #0]
 801e966:	b103      	cbz	r3, 801e96a <_open_r+0x1e>
 801e968:	6023      	str	r3, [r4, #0]
 801e96a:	bd38      	pop	{r3, r4, r5, pc}
 801e96c:	20000e30 	.word	0x20000e30

0801e970 <putchar>:
 801e970:	4b09      	ldr	r3, [pc, #36]	; (801e998 <putchar+0x28>)
 801e972:	b513      	push	{r0, r1, r4, lr}
 801e974:	681c      	ldr	r4, [r3, #0]
 801e976:	4601      	mov	r1, r0
 801e978:	b134      	cbz	r4, 801e988 <putchar+0x18>
 801e97a:	69a3      	ldr	r3, [r4, #24]
 801e97c:	b923      	cbnz	r3, 801e988 <putchar+0x18>
 801e97e:	9001      	str	r0, [sp, #4]
 801e980:	4620      	mov	r0, r4
 801e982:	f7ff fae9 	bl	801df58 <__sinit>
 801e986:	9901      	ldr	r1, [sp, #4]
 801e988:	68a2      	ldr	r2, [r4, #8]
 801e98a:	4620      	mov	r0, r4
 801e98c:	b002      	add	sp, #8
 801e98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e992:	f002 b909 	b.w	8020ba8 <_putc_r>
 801e996:	bf00      	nop
 801e998:	20000108 	.word	0x20000108

0801e99c <srand>:
 801e99c:	b538      	push	{r3, r4, r5, lr}
 801e99e:	4b10      	ldr	r3, [pc, #64]	; (801e9e0 <srand+0x44>)
 801e9a0:	681d      	ldr	r5, [r3, #0]
 801e9a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e9a4:	4604      	mov	r4, r0
 801e9a6:	b9b3      	cbnz	r3, 801e9d6 <srand+0x3a>
 801e9a8:	2018      	movs	r0, #24
 801e9aa:	f7ff feef 	bl	801e78c <malloc>
 801e9ae:	4602      	mov	r2, r0
 801e9b0:	63a8      	str	r0, [r5, #56]	; 0x38
 801e9b2:	b920      	cbnz	r0, 801e9be <srand+0x22>
 801e9b4:	4b0b      	ldr	r3, [pc, #44]	; (801e9e4 <srand+0x48>)
 801e9b6:	480c      	ldr	r0, [pc, #48]	; (801e9e8 <srand+0x4c>)
 801e9b8:	2142      	movs	r1, #66	; 0x42
 801e9ba:	f001 fac3 	bl	801ff44 <__assert_func>
 801e9be:	490b      	ldr	r1, [pc, #44]	; (801e9ec <srand+0x50>)
 801e9c0:	4b0b      	ldr	r3, [pc, #44]	; (801e9f0 <srand+0x54>)
 801e9c2:	e9c0 1300 	strd	r1, r3, [r0]
 801e9c6:	4b0b      	ldr	r3, [pc, #44]	; (801e9f4 <srand+0x58>)
 801e9c8:	6083      	str	r3, [r0, #8]
 801e9ca:	230b      	movs	r3, #11
 801e9cc:	8183      	strh	r3, [r0, #12]
 801e9ce:	2100      	movs	r1, #0
 801e9d0:	2001      	movs	r0, #1
 801e9d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e9d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801e9d8:	2200      	movs	r2, #0
 801e9da:	611c      	str	r4, [r3, #16]
 801e9dc:	615a      	str	r2, [r3, #20]
 801e9de:	bd38      	pop	{r3, r4, r5, pc}
 801e9e0:	20000108 	.word	0x20000108
 801e9e4:	08026a44 	.word	0x08026a44
 801e9e8:	08026b1c 	.word	0x08026b1c
 801e9ec:	abcd330e 	.word	0xabcd330e
 801e9f0:	e66d1234 	.word	0xe66d1234
 801e9f4:	0005deec 	.word	0x0005deec

0801e9f8 <rand>:
 801e9f8:	4b17      	ldr	r3, [pc, #92]	; (801ea58 <rand+0x60>)
 801e9fa:	b510      	push	{r4, lr}
 801e9fc:	681c      	ldr	r4, [r3, #0]
 801e9fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ea00:	b9b3      	cbnz	r3, 801ea30 <rand+0x38>
 801ea02:	2018      	movs	r0, #24
 801ea04:	f7ff fec2 	bl	801e78c <malloc>
 801ea08:	63a0      	str	r0, [r4, #56]	; 0x38
 801ea0a:	b928      	cbnz	r0, 801ea18 <rand+0x20>
 801ea0c:	4602      	mov	r2, r0
 801ea0e:	4b13      	ldr	r3, [pc, #76]	; (801ea5c <rand+0x64>)
 801ea10:	4813      	ldr	r0, [pc, #76]	; (801ea60 <rand+0x68>)
 801ea12:	214e      	movs	r1, #78	; 0x4e
 801ea14:	f001 fa96 	bl	801ff44 <__assert_func>
 801ea18:	4a12      	ldr	r2, [pc, #72]	; (801ea64 <rand+0x6c>)
 801ea1a:	4b13      	ldr	r3, [pc, #76]	; (801ea68 <rand+0x70>)
 801ea1c:	e9c0 2300 	strd	r2, r3, [r0]
 801ea20:	4b12      	ldr	r3, [pc, #72]	; (801ea6c <rand+0x74>)
 801ea22:	6083      	str	r3, [r0, #8]
 801ea24:	230b      	movs	r3, #11
 801ea26:	8183      	strh	r3, [r0, #12]
 801ea28:	2201      	movs	r2, #1
 801ea2a:	2300      	movs	r3, #0
 801ea2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ea30:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ea32:	480f      	ldr	r0, [pc, #60]	; (801ea70 <rand+0x78>)
 801ea34:	690a      	ldr	r2, [r1, #16]
 801ea36:	694b      	ldr	r3, [r1, #20]
 801ea38:	4c0e      	ldr	r4, [pc, #56]	; (801ea74 <rand+0x7c>)
 801ea3a:	4350      	muls	r0, r2
 801ea3c:	fb04 0003 	mla	r0, r4, r3, r0
 801ea40:	fba2 3404 	umull	r3, r4, r2, r4
 801ea44:	1c5a      	adds	r2, r3, #1
 801ea46:	4404      	add	r4, r0
 801ea48:	f144 0000 	adc.w	r0, r4, #0
 801ea4c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ea50:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ea54:	bd10      	pop	{r4, pc}
 801ea56:	bf00      	nop
 801ea58:	20000108 	.word	0x20000108
 801ea5c:	08026a44 	.word	0x08026a44
 801ea60:	08026b1c 	.word	0x08026b1c
 801ea64:	abcd330e 	.word	0xabcd330e
 801ea68:	e66d1234 	.word	0xe66d1234
 801ea6c:	0005deec 	.word	0x0005deec
 801ea70:	5851f42d 	.word	0x5851f42d
 801ea74:	4c957f2d 	.word	0x4c957f2d

0801ea78 <realloc>:
 801ea78:	4b02      	ldr	r3, [pc, #8]	; (801ea84 <realloc+0xc>)
 801ea7a:	460a      	mov	r2, r1
 801ea7c:	4601      	mov	r1, r0
 801ea7e:	6818      	ldr	r0, [r3, #0]
 801ea80:	f001 bc22 	b.w	80202c8 <_realloc_r>
 801ea84:	20000108 	.word	0x20000108

0801ea88 <_sbrk_r>:
 801ea88:	b538      	push	{r3, r4, r5, lr}
 801ea8a:	4d06      	ldr	r5, [pc, #24]	; (801eaa4 <_sbrk_r+0x1c>)
 801ea8c:	2300      	movs	r3, #0
 801ea8e:	4604      	mov	r4, r0
 801ea90:	4608      	mov	r0, r1
 801ea92:	602b      	str	r3, [r5, #0]
 801ea94:	f7e2 f9fa 	bl	8000e8c <_sbrk>
 801ea98:	1c43      	adds	r3, r0, #1
 801ea9a:	d102      	bne.n	801eaa2 <_sbrk_r+0x1a>
 801ea9c:	682b      	ldr	r3, [r5, #0]
 801ea9e:	b103      	cbz	r3, 801eaa2 <_sbrk_r+0x1a>
 801eaa0:	6023      	str	r3, [r4, #0]
 801eaa2:	bd38      	pop	{r3, r4, r5, pc}
 801eaa4:	20000e30 	.word	0x20000e30

0801eaa8 <_raise_r>:
 801eaa8:	291f      	cmp	r1, #31
 801eaaa:	b538      	push	{r3, r4, r5, lr}
 801eaac:	4604      	mov	r4, r0
 801eaae:	460d      	mov	r5, r1
 801eab0:	d904      	bls.n	801eabc <_raise_r+0x14>
 801eab2:	2316      	movs	r3, #22
 801eab4:	6003      	str	r3, [r0, #0]
 801eab6:	f04f 30ff 	mov.w	r0, #4294967295
 801eaba:	bd38      	pop	{r3, r4, r5, pc}
 801eabc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801eabe:	b112      	cbz	r2, 801eac6 <_raise_r+0x1e>
 801eac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eac4:	b94b      	cbnz	r3, 801eada <_raise_r+0x32>
 801eac6:	4620      	mov	r0, r4
 801eac8:	f000 f830 	bl	801eb2c <_getpid_r>
 801eacc:	462a      	mov	r2, r5
 801eace:	4601      	mov	r1, r0
 801ead0:	4620      	mov	r0, r4
 801ead2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ead6:	f000 b817 	b.w	801eb08 <_kill_r>
 801eada:	2b01      	cmp	r3, #1
 801eadc:	d00a      	beq.n	801eaf4 <_raise_r+0x4c>
 801eade:	1c59      	adds	r1, r3, #1
 801eae0:	d103      	bne.n	801eaea <_raise_r+0x42>
 801eae2:	2316      	movs	r3, #22
 801eae4:	6003      	str	r3, [r0, #0]
 801eae6:	2001      	movs	r0, #1
 801eae8:	e7e7      	b.n	801eaba <_raise_r+0x12>
 801eaea:	2400      	movs	r4, #0
 801eaec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801eaf0:	4628      	mov	r0, r5
 801eaf2:	4798      	blx	r3
 801eaf4:	2000      	movs	r0, #0
 801eaf6:	e7e0      	b.n	801eaba <_raise_r+0x12>

0801eaf8 <raise>:
 801eaf8:	4b02      	ldr	r3, [pc, #8]	; (801eb04 <raise+0xc>)
 801eafa:	4601      	mov	r1, r0
 801eafc:	6818      	ldr	r0, [r3, #0]
 801eafe:	f7ff bfd3 	b.w	801eaa8 <_raise_r>
 801eb02:	bf00      	nop
 801eb04:	20000108 	.word	0x20000108

0801eb08 <_kill_r>:
 801eb08:	b538      	push	{r3, r4, r5, lr}
 801eb0a:	4d07      	ldr	r5, [pc, #28]	; (801eb28 <_kill_r+0x20>)
 801eb0c:	2300      	movs	r3, #0
 801eb0e:	4604      	mov	r4, r0
 801eb10:	4608      	mov	r0, r1
 801eb12:	4611      	mov	r1, r2
 801eb14:	602b      	str	r3, [r5, #0]
 801eb16:	f7e2 f924 	bl	8000d62 <_kill>
 801eb1a:	1c43      	adds	r3, r0, #1
 801eb1c:	d102      	bne.n	801eb24 <_kill_r+0x1c>
 801eb1e:	682b      	ldr	r3, [r5, #0]
 801eb20:	b103      	cbz	r3, 801eb24 <_kill_r+0x1c>
 801eb22:	6023      	str	r3, [r4, #0]
 801eb24:	bd38      	pop	{r3, r4, r5, pc}
 801eb26:	bf00      	nop
 801eb28:	20000e30 	.word	0x20000e30

0801eb2c <_getpid_r>:
 801eb2c:	f7e2 b911 	b.w	8000d52 <_getpid>

0801eb30 <siprintf>:
 801eb30:	b40e      	push	{r1, r2, r3}
 801eb32:	b500      	push	{lr}
 801eb34:	b09c      	sub	sp, #112	; 0x70
 801eb36:	ab1d      	add	r3, sp, #116	; 0x74
 801eb38:	9002      	str	r0, [sp, #8]
 801eb3a:	9006      	str	r0, [sp, #24]
 801eb3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801eb40:	4809      	ldr	r0, [pc, #36]	; (801eb68 <siprintf+0x38>)
 801eb42:	9107      	str	r1, [sp, #28]
 801eb44:	9104      	str	r1, [sp, #16]
 801eb46:	4909      	ldr	r1, [pc, #36]	; (801eb6c <siprintf+0x3c>)
 801eb48:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb4c:	9105      	str	r1, [sp, #20]
 801eb4e:	6800      	ldr	r0, [r0, #0]
 801eb50:	9301      	str	r3, [sp, #4]
 801eb52:	a902      	add	r1, sp, #8
 801eb54:	f001 fc3a 	bl	80203cc <_svfiprintf_r>
 801eb58:	9b02      	ldr	r3, [sp, #8]
 801eb5a:	2200      	movs	r2, #0
 801eb5c:	701a      	strb	r2, [r3, #0]
 801eb5e:	b01c      	add	sp, #112	; 0x70
 801eb60:	f85d eb04 	ldr.w	lr, [sp], #4
 801eb64:	b003      	add	sp, #12
 801eb66:	4770      	bx	lr
 801eb68:	20000108 	.word	0x20000108
 801eb6c:	ffff0208 	.word	0xffff0208

0801eb70 <__sread>:
 801eb70:	b510      	push	{r4, lr}
 801eb72:	460c      	mov	r4, r1
 801eb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb78:	f002 f85e 	bl	8020c38 <_read_r>
 801eb7c:	2800      	cmp	r0, #0
 801eb7e:	bfab      	itete	ge
 801eb80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801eb82:	89a3      	ldrhlt	r3, [r4, #12]
 801eb84:	181b      	addge	r3, r3, r0
 801eb86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801eb8a:	bfac      	ite	ge
 801eb8c:	6563      	strge	r3, [r4, #84]	; 0x54
 801eb8e:	81a3      	strhlt	r3, [r4, #12]
 801eb90:	bd10      	pop	{r4, pc}

0801eb92 <__seofread>:
 801eb92:	2000      	movs	r0, #0
 801eb94:	4770      	bx	lr

0801eb96 <__swrite>:
 801eb96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb9a:	461f      	mov	r7, r3
 801eb9c:	898b      	ldrh	r3, [r1, #12]
 801eb9e:	05db      	lsls	r3, r3, #23
 801eba0:	4605      	mov	r5, r0
 801eba2:	460c      	mov	r4, r1
 801eba4:	4616      	mov	r6, r2
 801eba6:	d505      	bpl.n	801ebb4 <__swrite+0x1e>
 801eba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebac:	2302      	movs	r3, #2
 801ebae:	2200      	movs	r2, #0
 801ebb0:	f001 fb5a 	bl	8020268 <_lseek_r>
 801ebb4:	89a3      	ldrh	r3, [r4, #12]
 801ebb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ebba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ebbe:	81a3      	strh	r3, [r4, #12]
 801ebc0:	4632      	mov	r2, r6
 801ebc2:	463b      	mov	r3, r7
 801ebc4:	4628      	mov	r0, r5
 801ebc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ebca:	f001 b8d5 	b.w	801fd78 <_write_r>

0801ebce <__sseek>:
 801ebce:	b510      	push	{r4, lr}
 801ebd0:	460c      	mov	r4, r1
 801ebd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebd6:	f001 fb47 	bl	8020268 <_lseek_r>
 801ebda:	1c43      	adds	r3, r0, #1
 801ebdc:	89a3      	ldrh	r3, [r4, #12]
 801ebde:	bf15      	itete	ne
 801ebe0:	6560      	strne	r0, [r4, #84]	; 0x54
 801ebe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ebe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ebea:	81a3      	strheq	r3, [r4, #12]
 801ebec:	bf18      	it	ne
 801ebee:	81a3      	strhne	r3, [r4, #12]
 801ebf0:	bd10      	pop	{r4, pc}

0801ebf2 <__sclose>:
 801ebf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebf6:	f001 b9c3 	b.w	801ff80 <_close_r>
	...

0801ebfc <iso_year_adjust>:
 801ebfc:	6941      	ldr	r1, [r0, #20]
 801ebfe:	2900      	cmp	r1, #0
 801ec00:	f240 736c 	movw	r3, #1900	; 0x76c
 801ec04:	bfa8      	it	ge
 801ec06:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801ec0a:	18ca      	adds	r2, r1, r3
 801ec0c:	078b      	lsls	r3, r1, #30
 801ec0e:	d105      	bne.n	801ec1c <iso_year_adjust+0x20>
 801ec10:	2164      	movs	r1, #100	; 0x64
 801ec12:	fb92 f3f1 	sdiv	r3, r2, r1
 801ec16:	fb01 2313 	mls	r3, r1, r3, r2
 801ec1a:	b9db      	cbnz	r3, 801ec54 <iso_year_adjust+0x58>
 801ec1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801ec20:	fb92 f3f1 	sdiv	r3, r2, r1
 801ec24:	fb01 2313 	mls	r3, r1, r3, r2
 801ec28:	fab3 f383 	clz	r3, r3
 801ec2c:	095b      	lsrs	r3, r3, #5
 801ec2e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801ec32:	0040      	lsls	r0, r0, #1
 801ec34:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801ec38:	4418      	add	r0, r3
 801ec3a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801ec3e:	4298      	cmp	r0, r3
 801ec40:	d03a      	beq.n	801ecb8 <iso_year_adjust+0xbc>
 801ec42:	dc21      	bgt.n	801ec88 <iso_year_adjust+0x8c>
 801ec44:	2801      	cmp	r0, #1
 801ec46:	dc1a      	bgt.n	801ec7e <iso_year_adjust+0x82>
 801ec48:	2800      	cmp	r0, #0
 801ec4a:	bfb4      	ite	lt
 801ec4c:	2000      	movlt	r0, #0
 801ec4e:	f04f 30ff 	movge.w	r0, #4294967295
 801ec52:	4770      	bx	lr
 801ec54:	2301      	movs	r3, #1
 801ec56:	e7ea      	b.n	801ec2e <iso_year_adjust+0x32>
 801ec58:	2817      	cmp	r0, #23
 801ec5a:	d813      	bhi.n	801ec84 <iso_year_adjust+0x88>
 801ec5c:	e8df f000 	tbb	[pc, r0]
 801ec60:	0c0c0c0c 	.word	0x0c0c0c0c
 801ec64:	0c0c1212 	.word	0x0c0c1212
 801ec68:	12121212 	.word	0x12121212
 801ec6c:	12121212 	.word	0x12121212
 801ec70:	0c0c1212 	.word	0x0c0c1212
 801ec74:	0c0c1212 	.word	0x0c0c1212
 801ec78:	f04f 30ff 	mov.w	r0, #4294967295
 801ec7c:	4770      	bx	lr
 801ec7e:	380a      	subs	r0, #10
 801ec80:	2817      	cmp	r0, #23
 801ec82:	d9e9      	bls.n	801ec58 <iso_year_adjust+0x5c>
 801ec84:	2000      	movs	r0, #0
 801ec86:	4770      	bx	lr
 801ec88:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801ec8c:	4298      	cmp	r0, r3
 801ec8e:	dc06      	bgt.n	801ec9e <iso_year_adjust+0xa2>
 801ec90:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801ec94:	4298      	cmp	r0, r3
 801ec96:	bfd4      	ite	le
 801ec98:	2000      	movle	r0, #0
 801ec9a:	2001      	movgt	r0, #1
 801ec9c:	4770      	bx	lr
 801ec9e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801eca2:	3802      	subs	r0, #2
 801eca4:	2815      	cmp	r0, #21
 801eca6:	d8ed      	bhi.n	801ec84 <iso_year_adjust+0x88>
 801eca8:	2301      	movs	r3, #1
 801ecaa:	4083      	lsls	r3, r0
 801ecac:	4803      	ldr	r0, [pc, #12]	; (801ecbc <iso_year_adjust+0xc0>)
 801ecae:	4018      	ands	r0, r3
 801ecb0:	3800      	subs	r0, #0
 801ecb2:	bf18      	it	ne
 801ecb4:	2001      	movne	r0, #1
 801ecb6:	4770      	bx	lr
 801ecb8:	2001      	movs	r0, #1
 801ecba:	4770      	bx	lr
 801ecbc:	002a001f 	.word	0x002a001f

0801ecc0 <__strftime>:
 801ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecc4:	b091      	sub	sp, #68	; 0x44
 801ecc6:	461d      	mov	r5, r3
 801ecc8:	2300      	movs	r3, #0
 801ecca:	4681      	mov	r9, r0
 801eccc:	4688      	mov	r8, r1
 801ecce:	9304      	str	r3, [sp, #16]
 801ecd0:	461c      	mov	r4, r3
 801ecd2:	7813      	ldrb	r3, [r2, #0]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	f000 84d1 	beq.w	801f67c <__strftime+0x9bc>
 801ecda:	2b25      	cmp	r3, #37	; 0x25
 801ecdc:	d11b      	bne.n	801ed16 <__strftime+0x56>
 801ecde:	7857      	ldrb	r7, [r2, #1]
 801ece0:	2f30      	cmp	r7, #48	; 0x30
 801ece2:	d024      	beq.n	801ed2e <__strftime+0x6e>
 801ece4:	2f2b      	cmp	r7, #43	; 0x2b
 801ece6:	d022      	beq.n	801ed2e <__strftime+0x6e>
 801ece8:	f102 0b01 	add.w	fp, r2, #1
 801ecec:	2700      	movs	r7, #0
 801ecee:	f89b 3000 	ldrb.w	r3, [fp]
 801ecf2:	3b31      	subs	r3, #49	; 0x31
 801ecf4:	2b08      	cmp	r3, #8
 801ecf6:	d81d      	bhi.n	801ed34 <__strftime+0x74>
 801ecf8:	4658      	mov	r0, fp
 801ecfa:	220a      	movs	r2, #10
 801ecfc:	a908      	add	r1, sp, #32
 801ecfe:	f000 fd6f 	bl	801f7e0 <strtoul>
 801ed02:	f8dd b020 	ldr.w	fp, [sp, #32]
 801ed06:	4606      	mov	r6, r0
 801ed08:	f89b 3000 	ldrb.w	r3, [fp]
 801ed0c:	2b45      	cmp	r3, #69	; 0x45
 801ed0e:	d113      	bne.n	801ed38 <__strftime+0x78>
 801ed10:	f10b 0b01 	add.w	fp, fp, #1
 801ed14:	e012      	b.n	801ed3c <__strftime+0x7c>
 801ed16:	f108 31ff 	add.w	r1, r8, #4294967295
 801ed1a:	42a1      	cmp	r1, r4
 801ed1c:	d802      	bhi.n	801ed24 <__strftime+0x64>
 801ed1e:	2400      	movs	r4, #0
 801ed20:	f000 bcb2 	b.w	801f688 <__strftime+0x9c8>
 801ed24:	f809 3004 	strb.w	r3, [r9, r4]
 801ed28:	3201      	adds	r2, #1
 801ed2a:	3401      	adds	r4, #1
 801ed2c:	e7d1      	b.n	801ecd2 <__strftime+0x12>
 801ed2e:	f102 0b02 	add.w	fp, r2, #2
 801ed32:	e7dc      	b.n	801ecee <__strftime+0x2e>
 801ed34:	2600      	movs	r6, #0
 801ed36:	e7e7      	b.n	801ed08 <__strftime+0x48>
 801ed38:	2b4f      	cmp	r3, #79	; 0x4f
 801ed3a:	d0e9      	beq.n	801ed10 <__strftime+0x50>
 801ed3c:	f89b 0000 	ldrb.w	r0, [fp]
 801ed40:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801ed44:	2b55      	cmp	r3, #85	; 0x55
 801ed46:	d8ea      	bhi.n	801ed1e <__strftime+0x5e>
 801ed48:	a201      	add	r2, pc, #4	; (adr r2, 801ed50 <__strftime+0x90>)
 801ed4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ed4e:	bf00      	nop
 801ed50:	0801f66f 	.word	0x0801f66f
 801ed54:	0801ed1f 	.word	0x0801ed1f
 801ed58:	0801ed1f 	.word	0x0801ed1f
 801ed5c:	0801ed1f 	.word	0x0801ed1f
 801ed60:	0801ed1f 	.word	0x0801ed1f
 801ed64:	0801ed1f 	.word	0x0801ed1f
 801ed68:	0801ed1f 	.word	0x0801ed1f
 801ed6c:	0801ed1f 	.word	0x0801ed1f
 801ed70:	0801ed1f 	.word	0x0801ed1f
 801ed74:	0801ed1f 	.word	0x0801ed1f
 801ed78:	0801ed1f 	.word	0x0801ed1f
 801ed7c:	0801ed1f 	.word	0x0801ed1f
 801ed80:	0801ed1f 	.word	0x0801ed1f
 801ed84:	0801ed1f 	.word	0x0801ed1f
 801ed88:	0801ed1f 	.word	0x0801ed1f
 801ed8c:	0801ed1f 	.word	0x0801ed1f
 801ed90:	0801ed1f 	.word	0x0801ed1f
 801ed94:	0801ed1f 	.word	0x0801ed1f
 801ed98:	0801ed1f 	.word	0x0801ed1f
 801ed9c:	0801ed1f 	.word	0x0801ed1f
 801eda0:	0801ed1f 	.word	0x0801ed1f
 801eda4:	0801ed1f 	.word	0x0801ed1f
 801eda8:	0801ed1f 	.word	0x0801ed1f
 801edac:	0801ed1f 	.word	0x0801ed1f
 801edb0:	0801ed1f 	.word	0x0801ed1f
 801edb4:	0801ed1f 	.word	0x0801ed1f
 801edb8:	0801ed1f 	.word	0x0801ed1f
 801edbc:	0801ed1f 	.word	0x0801ed1f
 801edc0:	0801eee7 	.word	0x0801eee7
 801edc4:	0801ef41 	.word	0x0801ef41
 801edc8:	0801efb7 	.word	0x0801efb7
 801edcc:	0801f051 	.word	0x0801f051
 801edd0:	0801ed1f 	.word	0x0801ed1f
 801edd4:	0801f09d 	.word	0x0801f09d
 801edd8:	0801f17d 	.word	0x0801f17d
 801eddc:	0801f27f 	.word	0x0801f27f
 801ede0:	0801f28d 	.word	0x0801f28d
 801ede4:	0801ed1f 	.word	0x0801ed1f
 801ede8:	0801ed1f 	.word	0x0801ed1f
 801edec:	0801ed1f 	.word	0x0801ed1f
 801edf0:	0801f2bd 	.word	0x0801f2bd
 801edf4:	0801ed1f 	.word	0x0801ed1f
 801edf8:	0801ed1f 	.word	0x0801ed1f
 801edfc:	0801f2d5 	.word	0x0801f2d5
 801ee00:	0801ed1f 	.word	0x0801ed1f
 801ee04:	0801f323 	.word	0x0801f323
 801ee08:	0801f439 	.word	0x0801f439
 801ee0c:	0801f44b 	.word	0x0801f44b
 801ee10:	0801f4a3 	.word	0x0801f4a3
 801ee14:	0801f4b3 	.word	0x0801f4b3
 801ee18:	0801f529 	.word	0x0801f529
 801ee1c:	0801efaf 	.word	0x0801efaf
 801ee20:	0801f55d 	.word	0x0801f55d
 801ee24:	0801f61b 	.word	0x0801f61b
 801ee28:	0801ed1f 	.word	0x0801ed1f
 801ee2c:	0801ed1f 	.word	0x0801ed1f
 801ee30:	0801ed1f 	.word	0x0801ed1f
 801ee34:	0801ed1f 	.word	0x0801ed1f
 801ee38:	0801ed1f 	.word	0x0801ed1f
 801ee3c:	0801ed1f 	.word	0x0801ed1f
 801ee40:	0801eea9 	.word	0x0801eea9
 801ee44:	0801ef15 	.word	0x0801ef15
 801ee48:	0801ef6f 	.word	0x0801ef6f
 801ee4c:	0801f029 	.word	0x0801f029
 801ee50:	0801f029 	.word	0x0801f029
 801ee54:	0801ed1f 	.word	0x0801ed1f
 801ee58:	0801f0e5 	.word	0x0801f0e5
 801ee5c:	0801ef15 	.word	0x0801ef15
 801ee60:	0801ed1f 	.word	0x0801ed1f
 801ee64:	0801f2af 	.word	0x0801f2af
 801ee68:	0801f27f 	.word	0x0801f27f
 801ee6c:	0801f28d 	.word	0x0801f28d
 801ee70:	0801f2b7 	.word	0x0801f2b7
 801ee74:	0801f2c1 	.word	0x0801f2c1
 801ee78:	0801ed1f 	.word	0x0801ed1f
 801ee7c:	0801f2d5 	.word	0x0801f2d5
 801ee80:	0801ed1f 	.word	0x0801ed1f
 801ee84:	0801ef9f 	.word	0x0801ef9f
 801ee88:	0801f339 	.word	0x0801f339
 801ee8c:	0801f43d 	.word	0x0801f43d
 801ee90:	0801f485 	.word	0x0801f485
 801ee94:	0801ed1f 	.word	0x0801ed1f
 801ee98:	0801f519 	.word	0x0801f519
 801ee9c:	0801efa7 	.word	0x0801efa7
 801eea0:	0801f541 	.word	0x0801f541
 801eea4:	0801f5ad 	.word	0x0801f5ad
 801eea8:	69ab      	ldr	r3, [r5, #24]
 801eeaa:	4aa7      	ldr	r2, [pc, #668]	; (801f148 <__strftime+0x488>)
 801eeac:	3318      	adds	r3, #24
 801eeae:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801eeb2:	4630      	mov	r0, r6
 801eeb4:	f7e1 f9c2 	bl	800023c <strlen>
 801eeb8:	3e01      	subs	r6, #1
 801eeba:	4420      	add	r0, r4
 801eebc:	f108 33ff 	add.w	r3, r8, #4294967295
 801eec0:	42a0      	cmp	r0, r4
 801eec2:	d107      	bne.n	801eed4 <__strftime+0x214>
 801eec4:	f89b 3000 	ldrb.w	r3, [fp]
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	f000 83d7 	beq.w	801f67c <__strftime+0x9bc>
 801eece:	f10b 0201 	add.w	r2, fp, #1
 801eed2:	e6fe      	b.n	801ecd2 <__strftime+0x12>
 801eed4:	42a3      	cmp	r3, r4
 801eed6:	f67f af22 	bls.w	801ed1e <__strftime+0x5e>
 801eeda:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801eede:	f809 2004 	strb.w	r2, [r9, r4]
 801eee2:	3401      	adds	r4, #1
 801eee4:	e7ec      	b.n	801eec0 <__strftime+0x200>
 801eee6:	69aa      	ldr	r2, [r5, #24]
 801eee8:	4b97      	ldr	r3, [pc, #604]	; (801f148 <__strftime+0x488>)
 801eeea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801eeee:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801eef0:	4630      	mov	r0, r6
 801eef2:	f7e1 f9a3 	bl	800023c <strlen>
 801eef6:	3e01      	subs	r6, #1
 801eef8:	4420      	add	r0, r4
 801eefa:	f108 33ff 	add.w	r3, r8, #4294967295
 801eefe:	42a0      	cmp	r0, r4
 801ef00:	d0e0      	beq.n	801eec4 <__strftime+0x204>
 801ef02:	42a3      	cmp	r3, r4
 801ef04:	f67f af0b 	bls.w	801ed1e <__strftime+0x5e>
 801ef08:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801ef0c:	f809 2004 	strb.w	r2, [r9, r4]
 801ef10:	3401      	adds	r4, #1
 801ef12:	e7f4      	b.n	801eefe <__strftime+0x23e>
 801ef14:	4b8c      	ldr	r3, [pc, #560]	; (801f148 <__strftime+0x488>)
 801ef16:	692a      	ldr	r2, [r5, #16]
 801ef18:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ef1c:	4630      	mov	r0, r6
 801ef1e:	f7e1 f98d 	bl	800023c <strlen>
 801ef22:	3e01      	subs	r6, #1
 801ef24:	4420      	add	r0, r4
 801ef26:	f108 33ff 	add.w	r3, r8, #4294967295
 801ef2a:	42a0      	cmp	r0, r4
 801ef2c:	d0ca      	beq.n	801eec4 <__strftime+0x204>
 801ef2e:	42a3      	cmp	r3, r4
 801ef30:	f67f aef5 	bls.w	801ed1e <__strftime+0x5e>
 801ef34:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801ef38:	f809 2004 	strb.w	r2, [r9, r4]
 801ef3c:	3401      	adds	r4, #1
 801ef3e:	e7f4      	b.n	801ef2a <__strftime+0x26a>
 801ef40:	692b      	ldr	r3, [r5, #16]
 801ef42:	4a81      	ldr	r2, [pc, #516]	; (801f148 <__strftime+0x488>)
 801ef44:	330c      	adds	r3, #12
 801ef46:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801ef4a:	4630      	mov	r0, r6
 801ef4c:	f7e1 f976 	bl	800023c <strlen>
 801ef50:	3e01      	subs	r6, #1
 801ef52:	4420      	add	r0, r4
 801ef54:	f108 33ff 	add.w	r3, r8, #4294967295
 801ef58:	42a0      	cmp	r0, r4
 801ef5a:	d0b3      	beq.n	801eec4 <__strftime+0x204>
 801ef5c:	42a3      	cmp	r3, r4
 801ef5e:	f67f aede 	bls.w	801ed1e <__strftime+0x5e>
 801ef62:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801ef66:	f809 2004 	strb.w	r2, [r9, r4]
 801ef6a:	3401      	adds	r4, #1
 801ef6c:	e7f4      	b.n	801ef58 <__strftime+0x298>
 801ef6e:	4b76      	ldr	r3, [pc, #472]	; (801f148 <__strftime+0x488>)
 801ef70:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801ef74:	4630      	mov	r0, r6
 801ef76:	f7e1 f961 	bl	800023c <strlen>
 801ef7a:	7833      	ldrb	r3, [r6, #0]
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d0a1      	beq.n	801eec4 <__strftime+0x204>
 801ef80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ef82:	9300      	str	r3, [sp, #0]
 801ef84:	4632      	mov	r2, r6
 801ef86:	462b      	mov	r3, r5
 801ef88:	eba8 0104 	sub.w	r1, r8, r4
 801ef8c:	eb09 0004 	add.w	r0, r9, r4
 801ef90:	f7ff fe96 	bl	801ecc0 <__strftime>
 801ef94:	2800      	cmp	r0, #0
 801ef96:	f77f aec2 	ble.w	801ed1e <__strftime+0x5e>
 801ef9a:	4404      	add	r4, r0
 801ef9c:	e792      	b.n	801eec4 <__strftime+0x204>
 801ef9e:	4b6a      	ldr	r3, [pc, #424]	; (801f148 <__strftime+0x488>)
 801efa0:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801efa4:	e7e6      	b.n	801ef74 <__strftime+0x2b4>
 801efa6:	4b68      	ldr	r3, [pc, #416]	; (801f148 <__strftime+0x488>)
 801efa8:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801efac:	e7e2      	b.n	801ef74 <__strftime+0x2b4>
 801efae:	4b66      	ldr	r3, [pc, #408]	; (801f148 <__strftime+0x488>)
 801efb0:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801efb4:	e7de      	b.n	801ef74 <__strftime+0x2b4>
 801efb6:	4965      	ldr	r1, [pc, #404]	; (801f14c <__strftime+0x48c>)
 801efb8:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801efbc:	458a      	cmp	sl, r1
 801efbe:	bfac      	ite	ge
 801efc0:	2100      	movge	r1, #0
 801efc2:	2101      	movlt	r1, #1
 801efc4:	f1ba 0f00 	cmp.w	sl, #0
 801efc8:	db0e      	blt.n	801efe8 <__strftime+0x328>
 801efca:	2064      	movs	r0, #100	; 0x64
 801efcc:	fb9a f0f0 	sdiv	r0, sl, r0
 801efd0:	3013      	adds	r0, #19
 801efd2:	b19f      	cbz	r7, 801effc <__strftime+0x33c>
 801efd4:	2863      	cmp	r0, #99	; 0x63
 801efd6:	dd25      	ble.n	801f024 <__strftime+0x364>
 801efd8:	4a5d      	ldr	r2, [pc, #372]	; (801f150 <__strftime+0x490>)
 801efda:	4b5e      	ldr	r3, [pc, #376]	; (801f154 <__strftime+0x494>)
 801efdc:	2f2b      	cmp	r7, #43	; 0x2b
 801efde:	bf14      	ite	ne
 801efe0:	4617      	movne	r7, r2
 801efe2:	461f      	moveq	r7, r3
 801efe4:	4a5c      	ldr	r2, [pc, #368]	; (801f158 <__strftime+0x498>)
 801efe6:	e00b      	b.n	801f000 <__strftime+0x340>
 801efe8:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801efec:	9105      	str	r1, [sp, #20]
 801efee:	f000 ffa5 	bl	801ff3c <abs>
 801eff2:	2364      	movs	r3, #100	; 0x64
 801eff4:	9905      	ldr	r1, [sp, #20]
 801eff6:	fb90 f0f3 	sdiv	r0, r0, r3
 801effa:	e7ea      	b.n	801efd2 <__strftime+0x312>
 801effc:	4f54      	ldr	r7, [pc, #336]	; (801f150 <__strftime+0x490>)
 801effe:	4a57      	ldr	r2, [pc, #348]	; (801f15c <__strftime+0x49c>)
 801f000:	4b57      	ldr	r3, [pc, #348]	; (801f160 <__strftime+0x4a0>)
 801f002:	9001      	str	r0, [sp, #4]
 801f004:	2e02      	cmp	r6, #2
 801f006:	bf2c      	ite	cs
 801f008:	ebc1 0606 	rsbcs	r6, r1, r6
 801f00c:	f1c1 0602 	rsbcc	r6, r1, #2
 801f010:	494e      	ldr	r1, [pc, #312]	; (801f14c <__strftime+0x48c>)
 801f012:	9600      	str	r6, [sp, #0]
 801f014:	458a      	cmp	sl, r1
 801f016:	bfa8      	it	ge
 801f018:	463b      	movge	r3, r7
 801f01a:	eba8 0104 	sub.w	r1, r8, r4
 801f01e:	eb09 0004 	add.w	r0, r9, r4
 801f022:	e02a      	b.n	801f07a <__strftime+0x3ba>
 801f024:	4f4a      	ldr	r7, [pc, #296]	; (801f150 <__strftime+0x490>)
 801f026:	e7dd      	b.n	801efe4 <__strftime+0x324>
 801f028:	494e      	ldr	r1, [pc, #312]	; (801f164 <__strftime+0x4a4>)
 801f02a:	4a4f      	ldr	r2, [pc, #316]	; (801f168 <__strftime+0x4a8>)
 801f02c:	68eb      	ldr	r3, [r5, #12]
 801f02e:	2864      	cmp	r0, #100	; 0x64
 801f030:	bf08      	it	eq
 801f032:	460a      	moveq	r2, r1
 801f034:	eba8 0104 	sub.w	r1, r8, r4
 801f038:	eb09 0004 	add.w	r0, r9, r4
 801f03c:	f001 fe0e 	bl	8020c5c <sniprintf>
 801f040:	2800      	cmp	r0, #0
 801f042:	f6ff ae6c 	blt.w	801ed1e <__strftime+0x5e>
 801f046:	4404      	add	r4, r0
 801f048:	45a0      	cmp	r8, r4
 801f04a:	f63f af3b 	bhi.w	801eec4 <__strftime+0x204>
 801f04e:	e666      	b.n	801ed1e <__strftime+0x5e>
 801f050:	6968      	ldr	r0, [r5, #20]
 801f052:	692b      	ldr	r3, [r5, #16]
 801f054:	68ef      	ldr	r7, [r5, #12]
 801f056:	2800      	cmp	r0, #0
 801f058:	eb09 0604 	add.w	r6, r9, r4
 801f05c:	eba8 0104 	sub.w	r1, r8, r4
 801f060:	f103 0301 	add.w	r3, r3, #1
 801f064:	db0c      	blt.n	801f080 <__strftime+0x3c0>
 801f066:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f06a:	fb90 f2fc 	sdiv	r2, r0, ip
 801f06e:	fb0c 0212 	mls	r2, ip, r2, r0
 801f072:	e9cd 7200 	strd	r7, r2, [sp]
 801f076:	4a3d      	ldr	r2, [pc, #244]	; (801f16c <__strftime+0x4ac>)
 801f078:	4630      	mov	r0, r6
 801f07a:	f001 fdef 	bl	8020c5c <sniprintf>
 801f07e:	e7df      	b.n	801f040 <__strftime+0x380>
 801f080:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f084:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801f088:	f000 ff58 	bl	801ff3c <abs>
 801f08c:	2264      	movs	r2, #100	; 0x64
 801f08e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801f092:	fb90 fcf2 	sdiv	ip, r0, r2
 801f096:	fb0c 0212 	mls	r2, ip, r2, r0
 801f09a:	e7ea      	b.n	801f072 <__strftime+0x3b2>
 801f09c:	2325      	movs	r3, #37	; 0x25
 801f09e:	f88d 3020 	strb.w	r3, [sp, #32]
 801f0a2:	b187      	cbz	r7, 801f0c6 <__strftime+0x406>
 801f0a4:	2e06      	cmp	r6, #6
 801f0a6:	bf38      	it	cc
 801f0a8:	2606      	movcc	r6, #6
 801f0aa:	1fb3      	subs	r3, r6, #6
 801f0ac:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801f0b0:	d10c      	bne.n	801f0cc <__strftime+0x40c>
 801f0b2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801f0b6:	492e      	ldr	r1, [pc, #184]	; (801f170 <__strftime+0x4b0>)
 801f0b8:	f001 fe30 	bl	8020d1c <strcpy>
 801f0bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f0be:	9300      	str	r3, [sp, #0]
 801f0c0:	aa08      	add	r2, sp, #32
 801f0c2:	462b      	mov	r3, r5
 801f0c4:	e760      	b.n	801ef88 <__strftime+0x2c8>
 801f0c6:	272b      	movs	r7, #43	; 0x2b
 801f0c8:	260a      	movs	r6, #10
 801f0ca:	e7ee      	b.n	801f0aa <__strftime+0x3ea>
 801f0cc:	4a29      	ldr	r2, [pc, #164]	; (801f174 <__strftime+0x4b4>)
 801f0ce:	211e      	movs	r1, #30
 801f0d0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801f0d4:	f001 fdc2 	bl	8020c5c <sniprintf>
 801f0d8:	2800      	cmp	r0, #0
 801f0da:	ddea      	ble.n	801f0b2 <__strftime+0x3f2>
 801f0dc:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801f0e0:	4418      	add	r0, r3
 801f0e2:	e7e8      	b.n	801f0b6 <__strftime+0x3f6>
 801f0e4:	4628      	mov	r0, r5
 801f0e6:	f7ff fd89 	bl	801ebfc <iso_year_adjust>
 801f0ea:	4606      	mov	r6, r0
 801f0ec:	6968      	ldr	r0, [r5, #20]
 801f0ee:	2800      	cmp	r0, #0
 801f0f0:	db11      	blt.n	801f116 <__strftime+0x456>
 801f0f2:	2264      	movs	r2, #100	; 0x64
 801f0f4:	fb90 f3f2 	sdiv	r3, r0, r2
 801f0f8:	fb02 0313 	mls	r3, r2, r3, r0
 801f0fc:	441e      	add	r6, r3
 801f0fe:	2364      	movs	r3, #100	; 0x64
 801f100:	fb96 f0f3 	sdiv	r0, r6, r3
 801f104:	fb03 6610 	mls	r6, r3, r0, r6
 801f108:	441e      	add	r6, r3
 801f10a:	fbb6 f2f3 	udiv	r2, r6, r3
 801f10e:	fb03 6312 	mls	r3, r3, r2, r6
 801f112:	4a14      	ldr	r2, [pc, #80]	; (801f164 <__strftime+0x4a4>)
 801f114:	e78e      	b.n	801f034 <__strftime+0x374>
 801f116:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f11a:	f000 ff0f 	bl	801ff3c <abs>
 801f11e:	2364      	movs	r3, #100	; 0x64
 801f120:	2e00      	cmp	r6, #0
 801f122:	fb90 f2f3 	sdiv	r2, r0, r3
 801f126:	fb02 0313 	mls	r3, r2, r3, r0
 801f12a:	da05      	bge.n	801f138 <__strftime+0x478>
 801f12c:	6969      	ldr	r1, [r5, #20]
 801f12e:	4a12      	ldr	r2, [pc, #72]	; (801f178 <__strftime+0x4b8>)
 801f130:	4291      	cmp	r1, r2
 801f132:	bfb8      	it	lt
 801f134:	2601      	movlt	r6, #1
 801f136:	e7e1      	b.n	801f0fc <__strftime+0x43c>
 801f138:	d0e0      	beq.n	801f0fc <__strftime+0x43c>
 801f13a:	6969      	ldr	r1, [r5, #20]
 801f13c:	4a03      	ldr	r2, [pc, #12]	; (801f14c <__strftime+0x48c>)
 801f13e:	4291      	cmp	r1, r2
 801f140:	bfb8      	it	lt
 801f142:	f04f 36ff 	movlt.w	r6, #4294967295
 801f146:	e7d9      	b.n	801f0fc <__strftime+0x43c>
 801f148:	08026d00 	.word	0x08026d00
 801f14c:	fffff894 	.word	0xfffff894
 801f150:	08026e73 	.word	0x08026e73
 801f154:	08026b8a 	.word	0x08026b8a
 801f158:	08026b82 	.word	0x08026b82
 801f15c:	08026b7b 	.word	0x08026b7b
 801f160:	08026fb3 	.word	0x08026fb3
 801f164:	08026b9a 	.word	0x08026b9a
 801f168:	08026b8c 	.word	0x08026b8c
 801f16c:	08026b90 	.word	0x08026b90
 801f170:	08026ba3 	.word	0x08026ba3
 801f174:	08026b9f 	.word	0x08026b9f
 801f178:	fffff895 	.word	0xfffff895
 801f17c:	4bb6      	ldr	r3, [pc, #728]	; (801f458 <__strftime+0x798>)
 801f17e:	6969      	ldr	r1, [r5, #20]
 801f180:	4299      	cmp	r1, r3
 801f182:	bfac      	ite	ge
 801f184:	2300      	movge	r3, #0
 801f186:	2301      	movlt	r3, #1
 801f188:	4628      	mov	r0, r5
 801f18a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801f18e:	f7ff fd35 	bl	801ebfc <iso_year_adjust>
 801f192:	9906      	ldr	r1, [sp, #24]
 801f194:	2900      	cmp	r1, #0
 801f196:	4682      	mov	sl, r0
 801f198:	db27      	blt.n	801f1ea <__strftime+0x52a>
 801f19a:	2264      	movs	r2, #100	; 0x64
 801f19c:	fb91 f2f2 	sdiv	r2, r1, r2
 801f1a0:	3213      	adds	r2, #19
 801f1a2:	6968      	ldr	r0, [r5, #20]
 801f1a4:	2800      	cmp	r0, #0
 801f1a6:	db2b      	blt.n	801f200 <__strftime+0x540>
 801f1a8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f1ac:	fb90 fefc 	sdiv	lr, r0, ip
 801f1b0:	fb0c 001e 	mls	r0, ip, lr, r0
 801f1b4:	f1ba 0f00 	cmp.w	sl, #0
 801f1b8:	da31      	bge.n	801f21e <__strftime+0x55e>
 801f1ba:	6969      	ldr	r1, [r5, #20]
 801f1bc:	4ba7      	ldr	r3, [pc, #668]	; (801f45c <__strftime+0x79c>)
 801f1be:	4299      	cmp	r1, r3
 801f1c0:	db38      	blt.n	801f234 <__strftime+0x574>
 801f1c2:	eb0a 0300 	add.w	r3, sl, r0
 801f1c6:	1c59      	adds	r1, r3, #1
 801f1c8:	d139      	bne.n	801f23e <__strftime+0x57e>
 801f1ca:	3a01      	subs	r2, #1
 801f1cc:	2363      	movs	r3, #99	; 0x63
 801f1ce:	2064      	movs	r0, #100	; 0x64
 801f1d0:	fb00 3202 	mla	r2, r0, r2, r3
 801f1d4:	9b05      	ldr	r3, [sp, #20]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d036      	beq.n	801f248 <__strftime+0x588>
 801f1da:	232d      	movs	r3, #45	; 0x2d
 801f1dc:	f88d 3020 	strb.w	r3, [sp, #32]
 801f1e0:	b106      	cbz	r6, 801f1e4 <__strftime+0x524>
 801f1e2:	3e01      	subs	r6, #1
 801f1e4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801f1e8:	e038      	b.n	801f25c <__strftime+0x59c>
 801f1ea:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801f1ee:	9106      	str	r1, [sp, #24]
 801f1f0:	f000 fea4 	bl	801ff3c <abs>
 801f1f4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f1f8:	9906      	ldr	r1, [sp, #24]
 801f1fa:	fb90 f2fc 	sdiv	r2, r0, ip
 801f1fe:	e7d0      	b.n	801f1a2 <__strftime+0x4e2>
 801f200:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f204:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801f208:	f000 fe98 	bl	801ff3c <abs>
 801f20c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801f210:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801f214:	fb90 fefc 	sdiv	lr, r0, ip
 801f218:	fb0e 001c 	mls	r0, lr, ip, r0
 801f21c:	e7ca      	b.n	801f1b4 <__strftime+0x4f4>
 801f21e:	d0d0      	beq.n	801f1c2 <__strftime+0x502>
 801f220:	4b8d      	ldr	r3, [pc, #564]	; (801f458 <__strftime+0x798>)
 801f222:	4299      	cmp	r1, r3
 801f224:	bfb4      	ite	lt
 801f226:	2301      	movlt	r3, #1
 801f228:	2300      	movge	r3, #0
 801f22a:	9305      	str	r3, [sp, #20]
 801f22c:	bfb8      	it	lt
 801f22e:	f04f 3aff 	movlt.w	sl, #4294967295
 801f232:	e7c6      	b.n	801f1c2 <__strftime+0x502>
 801f234:	f04f 0a01 	mov.w	sl, #1
 801f238:	f8cd a014 	str.w	sl, [sp, #20]
 801f23c:	e7c1      	b.n	801f1c2 <__strftime+0x502>
 801f23e:	2b64      	cmp	r3, #100	; 0x64
 801f240:	bf04      	itt	eq
 801f242:	3201      	addeq	r2, #1
 801f244:	2300      	moveq	r3, #0
 801f246:	e7c2      	b.n	801f1ce <__strftime+0x50e>
 801f248:	2f2b      	cmp	r7, #43	; 0x2b
 801f24a:	d106      	bne.n	801f25a <__strftime+0x59a>
 801f24c:	f242 730f 	movw	r3, #9999	; 0x270f
 801f250:	429a      	cmp	r2, r3
 801f252:	d902      	bls.n	801f25a <__strftime+0x59a>
 801f254:	f88d 7020 	strb.w	r7, [sp, #32]
 801f258:	e7c2      	b.n	801f1e0 <__strftime+0x520>
 801f25a:	ab08      	add	r3, sp, #32
 801f25c:	2125      	movs	r1, #37	; 0x25
 801f25e:	7019      	strb	r1, [r3, #0]
 801f260:	b94f      	cbnz	r7, 801f276 <__strftime+0x5b6>
 801f262:	1c58      	adds	r0, r3, #1
 801f264:	497e      	ldr	r1, [pc, #504]	; (801f460 <__strftime+0x7a0>)
 801f266:	9205      	str	r2, [sp, #20]
 801f268:	f001 fd58 	bl	8020d1c <strcpy>
 801f26c:	9a05      	ldr	r2, [sp, #20]
 801f26e:	9200      	str	r2, [sp, #0]
 801f270:	4633      	mov	r3, r6
 801f272:	aa08      	add	r2, sp, #32
 801f274:	e059      	b.n	801f32a <__strftime+0x66a>
 801f276:	2130      	movs	r1, #48	; 0x30
 801f278:	1c98      	adds	r0, r3, #2
 801f27a:	7059      	strb	r1, [r3, #1]
 801f27c:	e7f2      	b.n	801f264 <__strftime+0x5a4>
 801f27e:	4979      	ldr	r1, [pc, #484]	; (801f464 <__strftime+0x7a4>)
 801f280:	4a79      	ldr	r2, [pc, #484]	; (801f468 <__strftime+0x7a8>)
 801f282:	68ab      	ldr	r3, [r5, #8]
 801f284:	286b      	cmp	r0, #107	; 0x6b
 801f286:	bf08      	it	eq
 801f288:	460a      	moveq	r2, r1
 801f28a:	e6d3      	b.n	801f034 <__strftime+0x374>
 801f28c:	68ab      	ldr	r3, [r5, #8]
 801f28e:	b163      	cbz	r3, 801f2aa <__strftime+0x5ea>
 801f290:	2b0c      	cmp	r3, #12
 801f292:	d004      	beq.n	801f29e <__strftime+0x5de>
 801f294:	210c      	movs	r1, #12
 801f296:	fb93 f2f1 	sdiv	r2, r3, r1
 801f29a:	fb01 3312 	mls	r3, r1, r2, r3
 801f29e:	4972      	ldr	r1, [pc, #456]	; (801f468 <__strftime+0x7a8>)
 801f2a0:	4a70      	ldr	r2, [pc, #448]	; (801f464 <__strftime+0x7a4>)
 801f2a2:	2849      	cmp	r0, #73	; 0x49
 801f2a4:	bf08      	it	eq
 801f2a6:	460a      	moveq	r2, r1
 801f2a8:	e6c4      	b.n	801f034 <__strftime+0x374>
 801f2aa:	230c      	movs	r3, #12
 801f2ac:	e7f7      	b.n	801f29e <__strftime+0x5de>
 801f2ae:	69eb      	ldr	r3, [r5, #28]
 801f2b0:	4a6e      	ldr	r2, [pc, #440]	; (801f46c <__strftime+0x7ac>)
 801f2b2:	3301      	adds	r3, #1
 801f2b4:	e6be      	b.n	801f034 <__strftime+0x374>
 801f2b6:	692b      	ldr	r3, [r5, #16]
 801f2b8:	3301      	adds	r3, #1
 801f2ba:	e72a      	b.n	801f112 <__strftime+0x452>
 801f2bc:	686b      	ldr	r3, [r5, #4]
 801f2be:	e728      	b.n	801f112 <__strftime+0x452>
 801f2c0:	f108 33ff 	add.w	r3, r8, #4294967295
 801f2c4:	42a3      	cmp	r3, r4
 801f2c6:	f67f ad2a 	bls.w	801ed1e <__strftime+0x5e>
 801f2ca:	230a      	movs	r3, #10
 801f2cc:	f809 3004 	strb.w	r3, [r9, r4]
 801f2d0:	3401      	adds	r4, #1
 801f2d2:	e5f7      	b.n	801eec4 <__strftime+0x204>
 801f2d4:	68ab      	ldr	r3, [r5, #8]
 801f2d6:	2b0b      	cmp	r3, #11
 801f2d8:	bfcc      	ite	gt
 801f2da:	22a4      	movgt	r2, #164	; 0xa4
 801f2dc:	22a0      	movle	r2, #160	; 0xa0
 801f2de:	4b64      	ldr	r3, [pc, #400]	; (801f470 <__strftime+0x7b0>)
 801f2e0:	4413      	add	r3, r2
 801f2e2:	685e      	ldr	r6, [r3, #4]
 801f2e4:	4630      	mov	r0, r6
 801f2e6:	f7e0 ffa9 	bl	800023c <strlen>
 801f2ea:	1e72      	subs	r2, r6, #1
 801f2ec:	4420      	add	r0, r4
 801f2ee:	f108 36ff 	add.w	r6, r8, #4294967295
 801f2f2:	42a0      	cmp	r0, r4
 801f2f4:	f43f ade6 	beq.w	801eec4 <__strftime+0x204>
 801f2f8:	42a6      	cmp	r6, r4
 801f2fa:	f67f ad10 	bls.w	801ed1e <__strftime+0x5e>
 801f2fe:	f89b 1000 	ldrb.w	r1, [fp]
 801f302:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801f306:	2950      	cmp	r1, #80	; 0x50
 801f308:	d107      	bne.n	801f31a <__strftime+0x65a>
 801f30a:	495a      	ldr	r1, [pc, #360]	; (801f474 <__strftime+0x7b4>)
 801f30c:	5cc9      	ldrb	r1, [r1, r3]
 801f30e:	f001 0103 	and.w	r1, r1, #3
 801f312:	2901      	cmp	r1, #1
 801f314:	bf08      	it	eq
 801f316:	3320      	addeq	r3, #32
 801f318:	b2db      	uxtb	r3, r3
 801f31a:	f809 3004 	strb.w	r3, [r9, r4]
 801f31e:	3401      	adds	r4, #1
 801f320:	e7e7      	b.n	801f2f2 <__strftime+0x632>
 801f322:	686b      	ldr	r3, [r5, #4]
 801f324:	9300      	str	r3, [sp, #0]
 801f326:	4a54      	ldr	r2, [pc, #336]	; (801f478 <__strftime+0x7b8>)
 801f328:	68ab      	ldr	r3, [r5, #8]
 801f32a:	eba8 0104 	sub.w	r1, r8, r4
 801f32e:	eb09 0004 	add.w	r0, r9, r4
 801f332:	f001 fc93 	bl	8020c5c <sniprintf>
 801f336:	e683      	b.n	801f040 <__strftime+0x380>
 801f338:	6a2b      	ldr	r3, [r5, #32]
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	db79      	blt.n	801f432 <__strftime+0x772>
 801f33e:	f000 fb01 	bl	801f944 <__tz_lock>
 801f342:	9b04      	ldr	r3, [sp, #16]
 801f344:	b90b      	cbnz	r3, 801f34a <__strftime+0x68a>
 801f346:	f000 fb09 	bl	801f95c <_tzset_unlocked>
 801f34a:	f000 fec5 	bl	80200d8 <__gettzinfo>
 801f34e:	6a2b      	ldr	r3, [r5, #32]
 801f350:	2b00      	cmp	r3, #0
 801f352:	bfcc      	ite	gt
 801f354:	2350      	movgt	r3, #80	; 0x50
 801f356:	2328      	movle	r3, #40	; 0x28
 801f358:	58c3      	ldr	r3, [r0, r3]
 801f35a:	f1c3 0a00 	rsb	sl, r3, #0
 801f35e:	f000 faf7 	bl	801f950 <__tz_unlock>
 801f362:	2301      	movs	r3, #1
 801f364:	9304      	str	r3, [sp, #16]
 801f366:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801f36a:	4662      	mov	r2, ip
 801f36c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801f370:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801f374:	9602      	str	r6, [sp, #8]
 801f376:	f143 36ff 	adc.w	r6, r3, #4294967295
 801f37a:	9603      	str	r6, [sp, #12]
 801f37c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f380:	2e00      	cmp	r6, #0
 801f382:	f177 0600 	sbcs.w	r6, r7, #0
 801f386:	eba8 0104 	sub.w	r1, r8, r4
 801f38a:	eb09 0004 	add.w	r0, r9, r4
 801f38e:	da05      	bge.n	801f39c <__strftime+0x6dc>
 801f390:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801f394:	f143 33ff 	adc.w	r3, r3, #4294967295
 801f398:	9602      	str	r6, [sp, #8]
 801f39a:	9303      	str	r3, [sp, #12]
 801f39c:	9b02      	ldr	r3, [sp, #8]
 801f39e:	089e      	lsrs	r6, r3, #2
 801f3a0:	9b03      	ldr	r3, [sp, #12]
 801f3a2:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801f3a6:	f10c 32ff 	add.w	r2, ip, #4294967295
 801f3aa:	109f      	asrs	r7, r3, #2
 801f3ac:	2364      	movs	r3, #100	; 0x64
 801f3ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3b2:	1af6      	subs	r6, r6, r3
 801f3b4:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801f3b8:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801f3bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f3c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3c4:	18f6      	adds	r6, r6, r3
 801f3c6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f3ca:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801f3ce:	f240 136d 	movw	r3, #365	; 0x16d
 801f3d2:	fb03 fc0c 	mul.w	ip, r3, ip
 801f3d6:	69eb      	ldr	r3, [r5, #28]
 801f3d8:	eb16 060c 	adds.w	r6, r6, ip
 801f3dc:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801f3e0:	18f6      	adds	r6, r6, r3
 801f3e2:	f04f 0c18 	mov.w	ip, #24
 801f3e6:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f3ea:	fba6 230c 	umull	r2, r3, r6, ip
 801f3ee:	68ae      	ldr	r6, [r5, #8]
 801f3f0:	fb0c 3307 	mla	r3, ip, r7, r3
 801f3f4:	1992      	adds	r2, r2, r6
 801f3f6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801f3fa:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801f3fe:	fba2 670c 	umull	r6, r7, r2, ip
 801f402:	fb0c 7703 	mla	r7, ip, r3, r7
 801f406:	686b      	ldr	r3, [r5, #4]
 801f408:	18f6      	adds	r6, r6, r3
 801f40a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801f40e:	fba6 230c 	umull	r2, r3, r6, ip
 801f412:	682e      	ldr	r6, [r5, #0]
 801f414:	fb0c 3307 	mla	r3, ip, r7, r3
 801f418:	1992      	adds	r2, r2, r6
 801f41a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801f41e:	ebb2 020a 	subs.w	r2, r2, sl
 801f422:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801f426:	e9cd 2300 	strd	r2, r3, [sp]
 801f42a:	4a14      	ldr	r2, [pc, #80]	; (801f47c <__strftime+0x7bc>)
 801f42c:	f001 fc16 	bl	8020c5c <sniprintf>
 801f430:	e606      	b.n	801f040 <__strftime+0x380>
 801f432:	f04f 0a00 	mov.w	sl, #0
 801f436:	e796      	b.n	801f366 <__strftime+0x6a6>
 801f438:	682b      	ldr	r3, [r5, #0]
 801f43a:	e66a      	b.n	801f112 <__strftime+0x452>
 801f43c:	f108 33ff 	add.w	r3, r8, #4294967295
 801f440:	42a3      	cmp	r3, r4
 801f442:	f67f ac6c 	bls.w	801ed1e <__strftime+0x5e>
 801f446:	2309      	movs	r3, #9
 801f448:	e740      	b.n	801f2cc <__strftime+0x60c>
 801f44a:	682b      	ldr	r3, [r5, #0]
 801f44c:	9301      	str	r3, [sp, #4]
 801f44e:	686b      	ldr	r3, [r5, #4]
 801f450:	9300      	str	r3, [sp, #0]
 801f452:	4a0b      	ldr	r2, [pc, #44]	; (801f480 <__strftime+0x7c0>)
 801f454:	68ab      	ldr	r3, [r5, #8]
 801f456:	e5e0      	b.n	801f01a <__strftime+0x35a>
 801f458:	fffff894 	.word	0xfffff894
 801f45c:	fffff895 	.word	0xfffff895
 801f460:	08026bab 	.word	0x08026bab
 801f464:	08026b8c 	.word	0x08026b8c
 801f468:	08026b9a 	.word	0x08026b9a
 801f46c:	08026baf 	.word	0x08026baf
 801f470:	08026d00 	.word	0x08026d00
 801f474:	08026e75 	.word	0x08026e75
 801f478:	08026bbe 	.word	0x08026bbe
 801f47c:	08026bb4 	.word	0x08026bb4
 801f480:	08026bb9 	.word	0x08026bb9
 801f484:	f108 33ff 	add.w	r3, r8, #4294967295
 801f488:	42a3      	cmp	r3, r4
 801f48a:	f67f ac48 	bls.w	801ed1e <__strftime+0x5e>
 801f48e:	69ab      	ldr	r3, [r5, #24]
 801f490:	eb09 0204 	add.w	r2, r9, r4
 801f494:	3401      	adds	r4, #1
 801f496:	b913      	cbnz	r3, 801f49e <__strftime+0x7de>
 801f498:	2337      	movs	r3, #55	; 0x37
 801f49a:	7013      	strb	r3, [r2, #0]
 801f49c:	e512      	b.n	801eec4 <__strftime+0x204>
 801f49e:	3330      	adds	r3, #48	; 0x30
 801f4a0:	e7fb      	b.n	801f49a <__strftime+0x7da>
 801f4a2:	69eb      	ldr	r3, [r5, #28]
 801f4a4:	69aa      	ldr	r2, [r5, #24]
 801f4a6:	3307      	adds	r3, #7
 801f4a8:	1a9b      	subs	r3, r3, r2
 801f4aa:	2207      	movs	r2, #7
 801f4ac:	fb93 f3f2 	sdiv	r3, r3, r2
 801f4b0:	e62f      	b.n	801f112 <__strftime+0x452>
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	f7ff fba2 	bl	801ebfc <iso_year_adjust>
 801f4b8:	69aa      	ldr	r2, [r5, #24]
 801f4ba:	b132      	cbz	r2, 801f4ca <__strftime+0x80a>
 801f4bc:	3a01      	subs	r2, #1
 801f4be:	2800      	cmp	r0, #0
 801f4c0:	dc28      	bgt.n	801f514 <__strftime+0x854>
 801f4c2:	69eb      	ldr	r3, [r5, #28]
 801f4c4:	d103      	bne.n	801f4ce <__strftime+0x80e>
 801f4c6:	330a      	adds	r3, #10
 801f4c8:	e7ee      	b.n	801f4a8 <__strftime+0x7e8>
 801f4ca:	2206      	movs	r2, #6
 801f4cc:	e7f7      	b.n	801f4be <__strftime+0x7fe>
 801f4ce:	6968      	ldr	r0, [r5, #20]
 801f4d0:	2800      	cmp	r0, #0
 801f4d2:	eba2 0303 	sub.w	r3, r2, r3
 801f4d6:	f240 726b 	movw	r2, #1899	; 0x76b
 801f4da:	bfa8      	it	ge
 801f4dc:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801f4e0:	4410      	add	r0, r2
 801f4e2:	0782      	lsls	r2, r0, #30
 801f4e4:	d105      	bne.n	801f4f2 <__strftime+0x832>
 801f4e6:	2264      	movs	r2, #100	; 0x64
 801f4e8:	fb90 f1f2 	sdiv	r1, r0, r2
 801f4ec:	fb02 0111 	mls	r1, r2, r1, r0
 801f4f0:	b971      	cbnz	r1, 801f510 <__strftime+0x850>
 801f4f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f4f6:	fb90 f2f1 	sdiv	r2, r0, r1
 801f4fa:	fb01 0212 	mls	r2, r1, r2, r0
 801f4fe:	fab2 f282 	clz	r2, r2
 801f502:	0952      	lsrs	r2, r2, #5
 801f504:	1a9a      	subs	r2, r3, r2
 801f506:	2a05      	cmp	r2, #5
 801f508:	bfb4      	ite	lt
 801f50a:	2335      	movlt	r3, #53	; 0x35
 801f50c:	2334      	movge	r3, #52	; 0x34
 801f50e:	e600      	b.n	801f112 <__strftime+0x452>
 801f510:	2201      	movs	r2, #1
 801f512:	e7f7      	b.n	801f504 <__strftime+0x844>
 801f514:	2301      	movs	r3, #1
 801f516:	e5fc      	b.n	801f112 <__strftime+0x452>
 801f518:	f108 33ff 	add.w	r3, r8, #4294967295
 801f51c:	42a3      	cmp	r3, r4
 801f51e:	f67f abfe 	bls.w	801ed1e <__strftime+0x5e>
 801f522:	69ab      	ldr	r3, [r5, #24]
 801f524:	3330      	adds	r3, #48	; 0x30
 801f526:	e6d1      	b.n	801f2cc <__strftime+0x60c>
 801f528:	69ab      	ldr	r3, [r5, #24]
 801f52a:	b13b      	cbz	r3, 801f53c <__strftime+0x87c>
 801f52c:	3b01      	subs	r3, #1
 801f52e:	69ea      	ldr	r2, [r5, #28]
 801f530:	3207      	adds	r2, #7
 801f532:	1ad2      	subs	r2, r2, r3
 801f534:	2307      	movs	r3, #7
 801f536:	fb92 f3f3 	sdiv	r3, r2, r3
 801f53a:	e5ea      	b.n	801f112 <__strftime+0x452>
 801f53c:	2306      	movs	r3, #6
 801f53e:	e7f6      	b.n	801f52e <__strftime+0x86e>
 801f540:	6968      	ldr	r0, [r5, #20]
 801f542:	2800      	cmp	r0, #0
 801f544:	db05      	blt.n	801f552 <__strftime+0x892>
 801f546:	2264      	movs	r2, #100	; 0x64
 801f548:	fb90 f3f2 	sdiv	r3, r0, r2
 801f54c:	fb03 0312 	mls	r3, r3, r2, r0
 801f550:	e5df      	b.n	801f112 <__strftime+0x452>
 801f552:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801f556:	f000 fcf1 	bl	801ff3c <abs>
 801f55a:	e7f4      	b.n	801f546 <__strftime+0x886>
 801f55c:	696b      	ldr	r3, [r5, #20]
 801f55e:	4a4c      	ldr	r2, [pc, #304]	; (801f690 <__strftime+0x9d0>)
 801f560:	4293      	cmp	r3, r2
 801f562:	da09      	bge.n	801f578 <__strftime+0x8b8>
 801f564:	212d      	movs	r1, #45	; 0x2d
 801f566:	f88d 1020 	strb.w	r1, [sp, #32]
 801f56a:	eba2 0a03 	sub.w	sl, r2, r3
 801f56e:	b106      	cbz	r6, 801f572 <__strftime+0x8b2>
 801f570:	3e01      	subs	r6, #1
 801f572:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801f576:	e00b      	b.n	801f590 <__strftime+0x8d0>
 801f578:	2f2b      	cmp	r7, #43	; 0x2b
 801f57a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801f57e:	d106      	bne.n	801f58e <__strftime+0x8ce>
 801f580:	f242 730f 	movw	r3, #9999	; 0x270f
 801f584:	459a      	cmp	sl, r3
 801f586:	d902      	bls.n	801f58e <__strftime+0x8ce>
 801f588:	f88d 7020 	strb.w	r7, [sp, #32]
 801f58c:	e7ef      	b.n	801f56e <__strftime+0x8ae>
 801f58e:	ab08      	add	r3, sp, #32
 801f590:	2225      	movs	r2, #37	; 0x25
 801f592:	701a      	strb	r2, [r3, #0]
 801f594:	b937      	cbnz	r7, 801f5a4 <__strftime+0x8e4>
 801f596:	1c58      	adds	r0, r3, #1
 801f598:	493e      	ldr	r1, [pc, #248]	; (801f694 <__strftime+0x9d4>)
 801f59a:	f001 fbbf 	bl	8020d1c <strcpy>
 801f59e:	f8cd a000 	str.w	sl, [sp]
 801f5a2:	e665      	b.n	801f270 <__strftime+0x5b0>
 801f5a4:	2230      	movs	r2, #48	; 0x30
 801f5a6:	1c98      	adds	r0, r3, #2
 801f5a8:	705a      	strb	r2, [r3, #1]
 801f5aa:	e7f5      	b.n	801f598 <__strftime+0x8d8>
 801f5ac:	6a2b      	ldr	r3, [r5, #32]
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	f6ff ac88 	blt.w	801eec4 <__strftime+0x204>
 801f5b4:	f000 f9c6 	bl	801f944 <__tz_lock>
 801f5b8:	9b04      	ldr	r3, [sp, #16]
 801f5ba:	b90b      	cbnz	r3, 801f5c0 <__strftime+0x900>
 801f5bc:	f000 f9ce 	bl	801f95c <_tzset_unlocked>
 801f5c0:	f000 fd8a 	bl	80200d8 <__gettzinfo>
 801f5c4:	6a2b      	ldr	r3, [r5, #32]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	bfcc      	ite	gt
 801f5ca:	2350      	movgt	r3, #80	; 0x50
 801f5cc:	2328      	movle	r3, #40	; 0x28
 801f5ce:	eb09 0704 	add.w	r7, r9, r4
 801f5d2:	58c6      	ldr	r6, [r0, r3]
 801f5d4:	f000 f9bc 	bl	801f950 <__tz_unlock>
 801f5d8:	4276      	negs	r6, r6
 801f5da:	233c      	movs	r3, #60	; 0x3c
 801f5dc:	fb96 f0f3 	sdiv	r0, r6, r3
 801f5e0:	f000 fe3e 	bl	8020260 <labs>
 801f5e4:	233c      	movs	r3, #60	; 0x3c
 801f5e6:	eba8 0a04 	sub.w	sl, r8, r4
 801f5ea:	fb90 f2f3 	sdiv	r2, r0, r3
 801f5ee:	fb02 0013 	mls	r0, r2, r3, r0
 801f5f2:	9000      	str	r0, [sp, #0]
 801f5f4:	4a28      	ldr	r2, [pc, #160]	; (801f698 <__strftime+0x9d8>)
 801f5f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801f5fa:	4651      	mov	r1, sl
 801f5fc:	4638      	mov	r0, r7
 801f5fe:	fb96 f3f3 	sdiv	r3, r6, r3
 801f602:	f001 fb2b 	bl	8020c5c <sniprintf>
 801f606:	2800      	cmp	r0, #0
 801f608:	f6ff ab89 	blt.w	801ed1e <__strftime+0x5e>
 801f60c:	4404      	add	r4, r0
 801f60e:	45a0      	cmp	r8, r4
 801f610:	f67f ab85 	bls.w	801ed1e <__strftime+0x5e>
 801f614:	2301      	movs	r3, #1
 801f616:	9304      	str	r3, [sp, #16]
 801f618:	e454      	b.n	801eec4 <__strftime+0x204>
 801f61a:	6a2b      	ldr	r3, [r5, #32]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	f6ff ac51 	blt.w	801eec4 <__strftime+0x204>
 801f622:	f000 f98f 	bl	801f944 <__tz_lock>
 801f626:	9b04      	ldr	r3, [sp, #16]
 801f628:	b90b      	cbnz	r3, 801f62e <__strftime+0x96e>
 801f62a:	f000 f997 	bl	801f95c <_tzset_unlocked>
 801f62e:	6a2b      	ldr	r3, [r5, #32]
 801f630:	4a1a      	ldr	r2, [pc, #104]	; (801f69c <__strftime+0x9dc>)
 801f632:	2b00      	cmp	r3, #0
 801f634:	bfd4      	ite	le
 801f636:	2300      	movle	r3, #0
 801f638:	2301      	movgt	r3, #1
 801f63a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f63e:	4630      	mov	r0, r6
 801f640:	f7e0 fdfc 	bl	800023c <strlen>
 801f644:	3e01      	subs	r6, #1
 801f646:	4420      	add	r0, r4
 801f648:	f108 33ff 	add.w	r3, r8, #4294967295
 801f64c:	42a0      	cmp	r0, r4
 801f64e:	d102      	bne.n	801f656 <__strftime+0x996>
 801f650:	f000 f97e 	bl	801f950 <__tz_unlock>
 801f654:	e7de      	b.n	801f614 <__strftime+0x954>
 801f656:	42a3      	cmp	r3, r4
 801f658:	d905      	bls.n	801f666 <__strftime+0x9a6>
 801f65a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f65e:	f809 2004 	strb.w	r2, [r9, r4]
 801f662:	3401      	adds	r4, #1
 801f664:	e7f2      	b.n	801f64c <__strftime+0x98c>
 801f666:	f000 f973 	bl	801f950 <__tz_unlock>
 801f66a:	f7ff bb58 	b.w	801ed1e <__strftime+0x5e>
 801f66e:	f108 33ff 	add.w	r3, r8, #4294967295
 801f672:	42a3      	cmp	r3, r4
 801f674:	f67f ab53 	bls.w	801ed1e <__strftime+0x5e>
 801f678:	2325      	movs	r3, #37	; 0x25
 801f67a:	e627      	b.n	801f2cc <__strftime+0x60c>
 801f67c:	f1b8 0f00 	cmp.w	r8, #0
 801f680:	d002      	beq.n	801f688 <__strftime+0x9c8>
 801f682:	2300      	movs	r3, #0
 801f684:	f809 3004 	strb.w	r3, [r9, r4]
 801f688:	4620      	mov	r0, r4
 801f68a:	b011      	add	sp, #68	; 0x44
 801f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f690:	fffff894 	.word	0xfffff894
 801f694:	08026bab 	.word	0x08026bab
 801f698:	08026bc8 	.word	0x08026bc8
 801f69c:	2000016c 	.word	0x2000016c

0801f6a0 <strftime>:
 801f6a0:	b513      	push	{r0, r1, r4, lr}
 801f6a2:	4c03      	ldr	r4, [pc, #12]	; (801f6b0 <strftime+0x10>)
 801f6a4:	9400      	str	r4, [sp, #0]
 801f6a6:	f7ff fb0b 	bl	801ecc0 <__strftime>
 801f6aa:	b002      	add	sp, #8
 801f6ac:	bd10      	pop	{r4, pc}
 801f6ae:	bf00      	nop
 801f6b0:	200001d0 	.word	0x200001d0

0801f6b4 <strstr>:
 801f6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6b6:	780c      	ldrb	r4, [r1, #0]
 801f6b8:	b164      	cbz	r4, 801f6d4 <strstr+0x20>
 801f6ba:	4603      	mov	r3, r0
 801f6bc:	781a      	ldrb	r2, [r3, #0]
 801f6be:	4618      	mov	r0, r3
 801f6c0:	1c5e      	adds	r6, r3, #1
 801f6c2:	b90a      	cbnz	r2, 801f6c8 <strstr+0x14>
 801f6c4:	4610      	mov	r0, r2
 801f6c6:	e005      	b.n	801f6d4 <strstr+0x20>
 801f6c8:	4294      	cmp	r4, r2
 801f6ca:	d108      	bne.n	801f6de <strstr+0x2a>
 801f6cc:	460d      	mov	r5, r1
 801f6ce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801f6d2:	b902      	cbnz	r2, 801f6d6 <strstr+0x22>
 801f6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6d6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801f6da:	4297      	cmp	r7, r2
 801f6dc:	d0f7      	beq.n	801f6ce <strstr+0x1a>
 801f6de:	4633      	mov	r3, r6
 801f6e0:	e7ec      	b.n	801f6bc <strstr+0x8>
	...

0801f6e4 <_strtoul_l.isra.0>:
 801f6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f6e8:	4e3b      	ldr	r6, [pc, #236]	; (801f7d8 <_strtoul_l.isra.0+0xf4>)
 801f6ea:	4686      	mov	lr, r0
 801f6ec:	468c      	mov	ip, r1
 801f6ee:	4660      	mov	r0, ip
 801f6f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801f6f4:	5da5      	ldrb	r5, [r4, r6]
 801f6f6:	f015 0508 	ands.w	r5, r5, #8
 801f6fa:	d1f8      	bne.n	801f6ee <_strtoul_l.isra.0+0xa>
 801f6fc:	2c2d      	cmp	r4, #45	; 0x2d
 801f6fe:	d134      	bne.n	801f76a <_strtoul_l.isra.0+0x86>
 801f700:	f89c 4000 	ldrb.w	r4, [ip]
 801f704:	f04f 0801 	mov.w	r8, #1
 801f708:	f100 0c02 	add.w	ip, r0, #2
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d05e      	beq.n	801f7ce <_strtoul_l.isra.0+0xea>
 801f710:	2b10      	cmp	r3, #16
 801f712:	d10c      	bne.n	801f72e <_strtoul_l.isra.0+0x4a>
 801f714:	2c30      	cmp	r4, #48	; 0x30
 801f716:	d10a      	bne.n	801f72e <_strtoul_l.isra.0+0x4a>
 801f718:	f89c 0000 	ldrb.w	r0, [ip]
 801f71c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f720:	2858      	cmp	r0, #88	; 0x58
 801f722:	d14f      	bne.n	801f7c4 <_strtoul_l.isra.0+0xe0>
 801f724:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801f728:	2310      	movs	r3, #16
 801f72a:	f10c 0c02 	add.w	ip, ip, #2
 801f72e:	f04f 37ff 	mov.w	r7, #4294967295
 801f732:	2500      	movs	r5, #0
 801f734:	fbb7 f7f3 	udiv	r7, r7, r3
 801f738:	fb03 f907 	mul.w	r9, r3, r7
 801f73c:	ea6f 0909 	mvn.w	r9, r9
 801f740:	4628      	mov	r0, r5
 801f742:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801f746:	2e09      	cmp	r6, #9
 801f748:	d818      	bhi.n	801f77c <_strtoul_l.isra.0+0x98>
 801f74a:	4634      	mov	r4, r6
 801f74c:	42a3      	cmp	r3, r4
 801f74e:	dd24      	ble.n	801f79a <_strtoul_l.isra.0+0xb6>
 801f750:	2d00      	cmp	r5, #0
 801f752:	db1f      	blt.n	801f794 <_strtoul_l.isra.0+0xb0>
 801f754:	4287      	cmp	r7, r0
 801f756:	d31d      	bcc.n	801f794 <_strtoul_l.isra.0+0xb0>
 801f758:	d101      	bne.n	801f75e <_strtoul_l.isra.0+0x7a>
 801f75a:	45a1      	cmp	r9, r4
 801f75c:	db1a      	blt.n	801f794 <_strtoul_l.isra.0+0xb0>
 801f75e:	fb00 4003 	mla	r0, r0, r3, r4
 801f762:	2501      	movs	r5, #1
 801f764:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801f768:	e7eb      	b.n	801f742 <_strtoul_l.isra.0+0x5e>
 801f76a:	2c2b      	cmp	r4, #43	; 0x2b
 801f76c:	bf08      	it	eq
 801f76e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801f772:	46a8      	mov	r8, r5
 801f774:	bf08      	it	eq
 801f776:	f100 0c02 	addeq.w	ip, r0, #2
 801f77a:	e7c7      	b.n	801f70c <_strtoul_l.isra.0+0x28>
 801f77c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801f780:	2e19      	cmp	r6, #25
 801f782:	d801      	bhi.n	801f788 <_strtoul_l.isra.0+0xa4>
 801f784:	3c37      	subs	r4, #55	; 0x37
 801f786:	e7e1      	b.n	801f74c <_strtoul_l.isra.0+0x68>
 801f788:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801f78c:	2e19      	cmp	r6, #25
 801f78e:	d804      	bhi.n	801f79a <_strtoul_l.isra.0+0xb6>
 801f790:	3c57      	subs	r4, #87	; 0x57
 801f792:	e7db      	b.n	801f74c <_strtoul_l.isra.0+0x68>
 801f794:	f04f 35ff 	mov.w	r5, #4294967295
 801f798:	e7e4      	b.n	801f764 <_strtoul_l.isra.0+0x80>
 801f79a:	2d00      	cmp	r5, #0
 801f79c:	da07      	bge.n	801f7ae <_strtoul_l.isra.0+0xca>
 801f79e:	2322      	movs	r3, #34	; 0x22
 801f7a0:	f8ce 3000 	str.w	r3, [lr]
 801f7a4:	f04f 30ff 	mov.w	r0, #4294967295
 801f7a8:	b942      	cbnz	r2, 801f7bc <_strtoul_l.isra.0+0xd8>
 801f7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f7ae:	f1b8 0f00 	cmp.w	r8, #0
 801f7b2:	d000      	beq.n	801f7b6 <_strtoul_l.isra.0+0xd2>
 801f7b4:	4240      	negs	r0, r0
 801f7b6:	2a00      	cmp	r2, #0
 801f7b8:	d0f7      	beq.n	801f7aa <_strtoul_l.isra.0+0xc6>
 801f7ba:	b10d      	cbz	r5, 801f7c0 <_strtoul_l.isra.0+0xdc>
 801f7bc:	f10c 31ff 	add.w	r1, ip, #4294967295
 801f7c0:	6011      	str	r1, [r2, #0]
 801f7c2:	e7f2      	b.n	801f7aa <_strtoul_l.isra.0+0xc6>
 801f7c4:	2430      	movs	r4, #48	; 0x30
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	d1b1      	bne.n	801f72e <_strtoul_l.isra.0+0x4a>
 801f7ca:	2308      	movs	r3, #8
 801f7cc:	e7af      	b.n	801f72e <_strtoul_l.isra.0+0x4a>
 801f7ce:	2c30      	cmp	r4, #48	; 0x30
 801f7d0:	d0a2      	beq.n	801f718 <_strtoul_l.isra.0+0x34>
 801f7d2:	230a      	movs	r3, #10
 801f7d4:	e7ab      	b.n	801f72e <_strtoul_l.isra.0+0x4a>
 801f7d6:	bf00      	nop
 801f7d8:	08026e75 	.word	0x08026e75

0801f7dc <_strtoul_r>:
 801f7dc:	f7ff bf82 	b.w	801f6e4 <_strtoul_l.isra.0>

0801f7e0 <strtoul>:
 801f7e0:	4613      	mov	r3, r2
 801f7e2:	460a      	mov	r2, r1
 801f7e4:	4601      	mov	r1, r0
 801f7e6:	4802      	ldr	r0, [pc, #8]	; (801f7f0 <strtoul+0x10>)
 801f7e8:	6800      	ldr	r0, [r0, #0]
 801f7ea:	f7ff bf7b 	b.w	801f6e4 <_strtoul_l.isra.0>
 801f7ee:	bf00      	nop
 801f7f0:	20000108 	.word	0x20000108

0801f7f4 <__tzcalc_limits>:
 801f7f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f8:	4680      	mov	r8, r0
 801f7fa:	f000 fc6d 	bl	80200d8 <__gettzinfo>
 801f7fe:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801f802:	4598      	cmp	r8, r3
 801f804:	f340 8098 	ble.w	801f938 <__tzcalc_limits+0x144>
 801f808:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801f80c:	4443      	add	r3, r8
 801f80e:	109b      	asrs	r3, r3, #2
 801f810:	f240 126d 	movw	r2, #365	; 0x16d
 801f814:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801f818:	fb02 3505 	mla	r5, r2, r5, r3
 801f81c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801f820:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801f824:	fb93 f3f2 	sdiv	r3, r3, r2
 801f828:	441d      	add	r5, r3
 801f82a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f82e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801f832:	fb98 f7f3 	sdiv	r7, r8, r3
 801f836:	fb03 8717 	mls	r7, r3, r7, r8
 801f83a:	4442      	add	r2, r8
 801f83c:	fab7 fc87 	clz	ip, r7
 801f840:	fbb2 f2f3 	udiv	r2, r2, r3
 801f844:	f008 0303 	and.w	r3, r8, #3
 801f848:	4415      	add	r5, r2
 801f84a:	2264      	movs	r2, #100	; 0x64
 801f84c:	f8c0 8004 	str.w	r8, [r0, #4]
 801f850:	fb98 f6f2 	sdiv	r6, r8, r2
 801f854:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f858:	fb02 8616 	mls	r6, r2, r6, r8
 801f85c:	4604      	mov	r4, r0
 801f85e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801f862:	9300      	str	r3, [sp, #0]
 801f864:	f04f 0e07 	mov.w	lr, #7
 801f868:	7a22      	ldrb	r2, [r4, #8]
 801f86a:	6963      	ldr	r3, [r4, #20]
 801f86c:	2a4a      	cmp	r2, #74	; 0x4a
 801f86e:	d128      	bne.n	801f8c2 <__tzcalc_limits+0xce>
 801f870:	9900      	ldr	r1, [sp, #0]
 801f872:	18ea      	adds	r2, r5, r3
 801f874:	b901      	cbnz	r1, 801f878 <__tzcalc_limits+0x84>
 801f876:	b906      	cbnz	r6, 801f87a <__tzcalc_limits+0x86>
 801f878:	bb0f      	cbnz	r7, 801f8be <__tzcalc_limits+0xca>
 801f87a:	2b3b      	cmp	r3, #59	; 0x3b
 801f87c:	bfd4      	ite	le
 801f87e:	2300      	movle	r3, #0
 801f880:	2301      	movgt	r3, #1
 801f882:	4413      	add	r3, r2
 801f884:	1e5a      	subs	r2, r3, #1
 801f886:	69a3      	ldr	r3, [r4, #24]
 801f888:	492c      	ldr	r1, [pc, #176]	; (801f93c <__tzcalc_limits+0x148>)
 801f88a:	fb01 3202 	mla	r2, r1, r2, r3
 801f88e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f890:	4413      	add	r3, r2
 801f892:	461a      	mov	r2, r3
 801f894:	17db      	asrs	r3, r3, #31
 801f896:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801f89a:	3428      	adds	r4, #40	; 0x28
 801f89c:	45a3      	cmp	fp, r4
 801f89e:	d1e3      	bne.n	801f868 <__tzcalc_limits+0x74>
 801f8a0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801f8a4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801f8a8:	4294      	cmp	r4, r2
 801f8aa:	eb75 0303 	sbcs.w	r3, r5, r3
 801f8ae:	bfb4      	ite	lt
 801f8b0:	2301      	movlt	r3, #1
 801f8b2:	2300      	movge	r3, #0
 801f8b4:	6003      	str	r3, [r0, #0]
 801f8b6:	2001      	movs	r0, #1
 801f8b8:	b003      	add	sp, #12
 801f8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8be:	2300      	movs	r3, #0
 801f8c0:	e7df      	b.n	801f882 <__tzcalc_limits+0x8e>
 801f8c2:	2a44      	cmp	r2, #68	; 0x44
 801f8c4:	d101      	bne.n	801f8ca <__tzcalc_limits+0xd6>
 801f8c6:	18ea      	adds	r2, r5, r3
 801f8c8:	e7dd      	b.n	801f886 <__tzcalc_limits+0x92>
 801f8ca:	9a00      	ldr	r2, [sp, #0]
 801f8cc:	bb72      	cbnz	r2, 801f92c <__tzcalc_limits+0x138>
 801f8ce:	2e00      	cmp	r6, #0
 801f8d0:	bf0c      	ite	eq
 801f8d2:	46e0      	moveq	r8, ip
 801f8d4:	f04f 0801 	movne.w	r8, #1
 801f8d8:	4919      	ldr	r1, [pc, #100]	; (801f940 <__tzcalc_limits+0x14c>)
 801f8da:	68e2      	ldr	r2, [r4, #12]
 801f8dc:	9201      	str	r2, [sp, #4]
 801f8de:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801f8e2:	fb0a 1808 	mla	r8, sl, r8, r1
 801f8e6:	462a      	mov	r2, r5
 801f8e8:	f04f 0900 	mov.w	r9, #0
 801f8ec:	f1a8 0804 	sub.w	r8, r8, #4
 801f8f0:	9901      	ldr	r1, [sp, #4]
 801f8f2:	f109 0901 	add.w	r9, r9, #1
 801f8f6:	4549      	cmp	r1, r9
 801f8f8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801f8fc:	dc18      	bgt.n	801f930 <__tzcalc_limits+0x13c>
 801f8fe:	f102 0804 	add.w	r8, r2, #4
 801f902:	fb98 f9fe 	sdiv	r9, r8, lr
 801f906:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801f90a:	eba8 0909 	sub.w	r9, r8, r9
 801f90e:	ebb3 0909 	subs.w	r9, r3, r9
 801f912:	6923      	ldr	r3, [r4, #16]
 801f914:	f103 33ff 	add.w	r3, r3, #4294967295
 801f918:	bf48      	it	mi
 801f91a:	f109 0907 	addmi.w	r9, r9, #7
 801f91e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801f922:	444b      	add	r3, r9
 801f924:	4553      	cmp	r3, sl
 801f926:	da05      	bge.n	801f934 <__tzcalc_limits+0x140>
 801f928:	441a      	add	r2, r3
 801f92a:	e7ac      	b.n	801f886 <__tzcalc_limits+0x92>
 801f92c:	46e0      	mov	r8, ip
 801f92e:	e7d3      	b.n	801f8d8 <__tzcalc_limits+0xe4>
 801f930:	4452      	add	r2, sl
 801f932:	e7dd      	b.n	801f8f0 <__tzcalc_limits+0xfc>
 801f934:	3b07      	subs	r3, #7
 801f936:	e7f5      	b.n	801f924 <__tzcalc_limits+0x130>
 801f938:	2000      	movs	r0, #0
 801f93a:	e7bd      	b.n	801f8b8 <__tzcalc_limits+0xc4>
 801f93c:	00015180 	.word	0x00015180
 801f940:	08026abc 	.word	0x08026abc

0801f944 <__tz_lock>:
 801f944:	4801      	ldr	r0, [pc, #4]	; (801f94c <__tz_lock+0x8>)
 801f946:	f7fe beb9 	b.w	801e6bc <__retarget_lock_acquire>
 801f94a:	bf00      	nop
 801f94c:	20000e2b 	.word	0x20000e2b

0801f950 <__tz_unlock>:
 801f950:	4801      	ldr	r0, [pc, #4]	; (801f958 <__tz_unlock+0x8>)
 801f952:	f7fe beb5 	b.w	801e6c0 <__retarget_lock_release>
 801f956:	bf00      	nop
 801f958:	20000e2b 	.word	0x20000e2b

0801f95c <_tzset_unlocked>:
 801f95c:	4b01      	ldr	r3, [pc, #4]	; (801f964 <_tzset_unlocked+0x8>)
 801f95e:	6818      	ldr	r0, [r3, #0]
 801f960:	f000 b802 	b.w	801f968 <_tzset_unlocked_r>
 801f964:	20000108 	.word	0x20000108

0801f968 <_tzset_unlocked_r>:
 801f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f96c:	b08d      	sub	sp, #52	; 0x34
 801f96e:	4607      	mov	r7, r0
 801f970:	f000 fbb2 	bl	80200d8 <__gettzinfo>
 801f974:	49ae      	ldr	r1, [pc, #696]	; (801fc30 <_tzset_unlocked_r+0x2c8>)
 801f976:	4eaf      	ldr	r6, [pc, #700]	; (801fc34 <_tzset_unlocked_r+0x2cc>)
 801f978:	4605      	mov	r5, r0
 801f97a:	4638      	mov	r0, r7
 801f97c:	f000 fba4 	bl	80200c8 <_getenv_r>
 801f980:	4604      	mov	r4, r0
 801f982:	b970      	cbnz	r0, 801f9a2 <_tzset_unlocked_r+0x3a>
 801f984:	4bac      	ldr	r3, [pc, #688]	; (801fc38 <_tzset_unlocked_r+0x2d0>)
 801f986:	4aad      	ldr	r2, [pc, #692]	; (801fc3c <_tzset_unlocked_r+0x2d4>)
 801f988:	6018      	str	r0, [r3, #0]
 801f98a:	4bad      	ldr	r3, [pc, #692]	; (801fc40 <_tzset_unlocked_r+0x2d8>)
 801f98c:	6018      	str	r0, [r3, #0]
 801f98e:	4bad      	ldr	r3, [pc, #692]	; (801fc44 <_tzset_unlocked_r+0x2dc>)
 801f990:	6830      	ldr	r0, [r6, #0]
 801f992:	e9c3 2200 	strd	r2, r2, [r3]
 801f996:	f7fe ff01 	bl	801e79c <free>
 801f99a:	6034      	str	r4, [r6, #0]
 801f99c:	b00d      	add	sp, #52	; 0x34
 801f99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9a2:	6831      	ldr	r1, [r6, #0]
 801f9a4:	2900      	cmp	r1, #0
 801f9a6:	d15f      	bne.n	801fa68 <_tzset_unlocked_r+0x100>
 801f9a8:	6830      	ldr	r0, [r6, #0]
 801f9aa:	f7fe fef7 	bl	801e79c <free>
 801f9ae:	4620      	mov	r0, r4
 801f9b0:	f7e0 fc44 	bl	800023c <strlen>
 801f9b4:	1c41      	adds	r1, r0, #1
 801f9b6:	4638      	mov	r0, r7
 801f9b8:	f7fe ff6e 	bl	801e898 <_malloc_r>
 801f9bc:	6030      	str	r0, [r6, #0]
 801f9be:	2800      	cmp	r0, #0
 801f9c0:	d157      	bne.n	801fa72 <_tzset_unlocked_r+0x10a>
 801f9c2:	7823      	ldrb	r3, [r4, #0]
 801f9c4:	4aa0      	ldr	r2, [pc, #640]	; (801fc48 <_tzset_unlocked_r+0x2e0>)
 801f9c6:	49a1      	ldr	r1, [pc, #644]	; (801fc4c <_tzset_unlocked_r+0x2e4>)
 801f9c8:	2b3a      	cmp	r3, #58	; 0x3a
 801f9ca:	bf08      	it	eq
 801f9cc:	3401      	addeq	r4, #1
 801f9ce:	ae0a      	add	r6, sp, #40	; 0x28
 801f9d0:	4633      	mov	r3, r6
 801f9d2:	4620      	mov	r0, r4
 801f9d4:	f001 f976 	bl	8020cc4 <siscanf>
 801f9d8:	2800      	cmp	r0, #0
 801f9da:	dddf      	ble.n	801f99c <_tzset_unlocked_r+0x34>
 801f9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9de:	18e7      	adds	r7, r4, r3
 801f9e0:	5ce3      	ldrb	r3, [r4, r3]
 801f9e2:	2b2d      	cmp	r3, #45	; 0x2d
 801f9e4:	d149      	bne.n	801fa7a <_tzset_unlocked_r+0x112>
 801f9e6:	3701      	adds	r7, #1
 801f9e8:	f04f 34ff 	mov.w	r4, #4294967295
 801f9ec:	f10d 0a20 	add.w	sl, sp, #32
 801f9f0:	f10d 0b1e 	add.w	fp, sp, #30
 801f9f4:	f04f 0800 	mov.w	r8, #0
 801f9f8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801f9fc:	4994      	ldr	r1, [pc, #592]	; (801fc50 <_tzset_unlocked_r+0x2e8>)
 801f9fe:	9603      	str	r6, [sp, #12]
 801fa00:	f8cd b000 	str.w	fp, [sp]
 801fa04:	4633      	mov	r3, r6
 801fa06:	aa07      	add	r2, sp, #28
 801fa08:	4638      	mov	r0, r7
 801fa0a:	f8ad 801e 	strh.w	r8, [sp, #30]
 801fa0e:	f8ad 8020 	strh.w	r8, [sp, #32]
 801fa12:	f001 f957 	bl	8020cc4 <siscanf>
 801fa16:	4540      	cmp	r0, r8
 801fa18:	ddc0      	ble.n	801f99c <_tzset_unlocked_r+0x34>
 801fa1a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801fa1e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fa22:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801fc5c <_tzset_unlocked_r+0x2f4>
 801fa26:	213c      	movs	r1, #60	; 0x3c
 801fa28:	fb01 2203 	mla	r2, r1, r3, r2
 801fa2c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801fa30:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fa34:	fb01 2303 	mla	r3, r1, r3, r2
 801fa38:	435c      	muls	r4, r3
 801fa3a:	62ac      	str	r4, [r5, #40]	; 0x28
 801fa3c:	4c81      	ldr	r4, [pc, #516]	; (801fc44 <_tzset_unlocked_r+0x2dc>)
 801fa3e:	4b82      	ldr	r3, [pc, #520]	; (801fc48 <_tzset_unlocked_r+0x2e0>)
 801fa40:	6023      	str	r3, [r4, #0]
 801fa42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa44:	4981      	ldr	r1, [pc, #516]	; (801fc4c <_tzset_unlocked_r+0x2e4>)
 801fa46:	441f      	add	r7, r3
 801fa48:	464a      	mov	r2, r9
 801fa4a:	4633      	mov	r3, r6
 801fa4c:	4638      	mov	r0, r7
 801fa4e:	f001 f939 	bl	8020cc4 <siscanf>
 801fa52:	4540      	cmp	r0, r8
 801fa54:	dc16      	bgt.n	801fa84 <_tzset_unlocked_r+0x11c>
 801fa56:	6823      	ldr	r3, [r4, #0]
 801fa58:	6063      	str	r3, [r4, #4]
 801fa5a:	4b77      	ldr	r3, [pc, #476]	; (801fc38 <_tzset_unlocked_r+0x2d0>)
 801fa5c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801fa5e:	601a      	str	r2, [r3, #0]
 801fa60:	4b77      	ldr	r3, [pc, #476]	; (801fc40 <_tzset_unlocked_r+0x2d8>)
 801fa62:	f8c3 8000 	str.w	r8, [r3]
 801fa66:	e799      	b.n	801f99c <_tzset_unlocked_r+0x34>
 801fa68:	f7e0 fbf0 	bl	800024c <strcmp>
 801fa6c:	2800      	cmp	r0, #0
 801fa6e:	d19b      	bne.n	801f9a8 <_tzset_unlocked_r+0x40>
 801fa70:	e794      	b.n	801f99c <_tzset_unlocked_r+0x34>
 801fa72:	4621      	mov	r1, r4
 801fa74:	f001 f952 	bl	8020d1c <strcpy>
 801fa78:	e7a3      	b.n	801f9c2 <_tzset_unlocked_r+0x5a>
 801fa7a:	2b2b      	cmp	r3, #43	; 0x2b
 801fa7c:	bf08      	it	eq
 801fa7e:	3701      	addeq	r7, #1
 801fa80:	2401      	movs	r4, #1
 801fa82:	e7b3      	b.n	801f9ec <_tzset_unlocked_r+0x84>
 801fa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa86:	f8c4 9004 	str.w	r9, [r4, #4]
 801fa8a:	18fc      	adds	r4, r7, r3
 801fa8c:	5cfb      	ldrb	r3, [r7, r3]
 801fa8e:	2b2d      	cmp	r3, #45	; 0x2d
 801fa90:	f040 808b 	bne.w	801fbaa <_tzset_unlocked_r+0x242>
 801fa94:	3401      	adds	r4, #1
 801fa96:	f04f 37ff 	mov.w	r7, #4294967295
 801fa9a:	2300      	movs	r3, #0
 801fa9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801faa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801faa4:	f8ad 3020 	strh.w	r3, [sp, #32]
 801faa8:	930a      	str	r3, [sp, #40]	; 0x28
 801faaa:	e9cd a602 	strd	sl, r6, [sp, #8]
 801faae:	e9cd b600 	strd	fp, r6, [sp]
 801fab2:	4967      	ldr	r1, [pc, #412]	; (801fc50 <_tzset_unlocked_r+0x2e8>)
 801fab4:	4633      	mov	r3, r6
 801fab6:	aa07      	add	r2, sp, #28
 801fab8:	4620      	mov	r0, r4
 801faba:	f001 f903 	bl	8020cc4 <siscanf>
 801fabe:	2800      	cmp	r0, #0
 801fac0:	dc78      	bgt.n	801fbb4 <_tzset_unlocked_r+0x24c>
 801fac2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801fac4:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801fac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801faca:	652f      	str	r7, [r5, #80]	; 0x50
 801facc:	441c      	add	r4, r3
 801face:	462f      	mov	r7, r5
 801fad0:	f04f 0900 	mov.w	r9, #0
 801fad4:	7823      	ldrb	r3, [r4, #0]
 801fad6:	2b2c      	cmp	r3, #44	; 0x2c
 801fad8:	bf08      	it	eq
 801fada:	3401      	addeq	r4, #1
 801fadc:	f894 8000 	ldrb.w	r8, [r4]
 801fae0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801fae4:	d178      	bne.n	801fbd8 <_tzset_unlocked_r+0x270>
 801fae6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801faea:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801faee:	ab09      	add	r3, sp, #36	; 0x24
 801faf0:	9300      	str	r3, [sp, #0]
 801faf2:	4958      	ldr	r1, [pc, #352]	; (801fc54 <_tzset_unlocked_r+0x2ec>)
 801faf4:	9603      	str	r6, [sp, #12]
 801faf6:	4633      	mov	r3, r6
 801faf8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801fafc:	4620      	mov	r0, r4
 801fafe:	f001 f8e1 	bl	8020cc4 <siscanf>
 801fb02:	2803      	cmp	r0, #3
 801fb04:	f47f af4a 	bne.w	801f99c <_tzset_unlocked_r+0x34>
 801fb08:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801fb0c:	1e4b      	subs	r3, r1, #1
 801fb0e:	2b0b      	cmp	r3, #11
 801fb10:	f63f af44 	bhi.w	801f99c <_tzset_unlocked_r+0x34>
 801fb14:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801fb18:	1e53      	subs	r3, r2, #1
 801fb1a:	2b04      	cmp	r3, #4
 801fb1c:	f63f af3e 	bhi.w	801f99c <_tzset_unlocked_r+0x34>
 801fb20:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801fb24:	2b06      	cmp	r3, #6
 801fb26:	f63f af39 	bhi.w	801f99c <_tzset_unlocked_r+0x34>
 801fb2a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801fb2e:	f887 8008 	strb.w	r8, [r7, #8]
 801fb32:	617b      	str	r3, [r7, #20]
 801fb34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb36:	eb04 0803 	add.w	r8, r4, r3
 801fb3a:	2302      	movs	r3, #2
 801fb3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801fb40:	2300      	movs	r3, #0
 801fb42:	f8ad 301e 	strh.w	r3, [sp, #30]
 801fb46:	f8ad 3020 	strh.w	r3, [sp, #32]
 801fb4a:	930a      	str	r3, [sp, #40]	; 0x28
 801fb4c:	f898 3000 	ldrb.w	r3, [r8]
 801fb50:	2b2f      	cmp	r3, #47	; 0x2f
 801fb52:	d109      	bne.n	801fb68 <_tzset_unlocked_r+0x200>
 801fb54:	e9cd a602 	strd	sl, r6, [sp, #8]
 801fb58:	e9cd b600 	strd	fp, r6, [sp]
 801fb5c:	493e      	ldr	r1, [pc, #248]	; (801fc58 <_tzset_unlocked_r+0x2f0>)
 801fb5e:	4633      	mov	r3, r6
 801fb60:	aa07      	add	r2, sp, #28
 801fb62:	4640      	mov	r0, r8
 801fb64:	f001 f8ae 	bl	8020cc4 <siscanf>
 801fb68:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801fb6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fb70:	213c      	movs	r1, #60	; 0x3c
 801fb72:	fb01 2203 	mla	r2, r1, r3, r2
 801fb76:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801fb7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fb7e:	fb01 2303 	mla	r3, r1, r3, r2
 801fb82:	61bb      	str	r3, [r7, #24]
 801fb84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fb86:	3728      	adds	r7, #40	; 0x28
 801fb88:	4444      	add	r4, r8
 801fb8a:	f1b9 0f00 	cmp.w	r9, #0
 801fb8e:	d020      	beq.n	801fbd2 <_tzset_unlocked_r+0x26a>
 801fb90:	6868      	ldr	r0, [r5, #4]
 801fb92:	f7ff fe2f 	bl	801f7f4 <__tzcalc_limits>
 801fb96:	4b28      	ldr	r3, [pc, #160]	; (801fc38 <_tzset_unlocked_r+0x2d0>)
 801fb98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801fb9a:	601a      	str	r2, [r3, #0]
 801fb9c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801fb9e:	1a9b      	subs	r3, r3, r2
 801fba0:	4a27      	ldr	r2, [pc, #156]	; (801fc40 <_tzset_unlocked_r+0x2d8>)
 801fba2:	bf18      	it	ne
 801fba4:	2301      	movne	r3, #1
 801fba6:	6013      	str	r3, [r2, #0]
 801fba8:	e6f8      	b.n	801f99c <_tzset_unlocked_r+0x34>
 801fbaa:	2b2b      	cmp	r3, #43	; 0x2b
 801fbac:	bf08      	it	eq
 801fbae:	3401      	addeq	r4, #1
 801fbb0:	2701      	movs	r7, #1
 801fbb2:	e772      	b.n	801fa9a <_tzset_unlocked_r+0x132>
 801fbb4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801fbb8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fbbc:	213c      	movs	r1, #60	; 0x3c
 801fbbe:	fb01 2203 	mla	r2, r1, r3, r2
 801fbc2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801fbc6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fbca:	fb01 2303 	mla	r3, r1, r3, r2
 801fbce:	435f      	muls	r7, r3
 801fbd0:	e77a      	b.n	801fac8 <_tzset_unlocked_r+0x160>
 801fbd2:	f04f 0901 	mov.w	r9, #1
 801fbd6:	e77d      	b.n	801fad4 <_tzset_unlocked_r+0x16c>
 801fbd8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801fbdc:	bf06      	itte	eq
 801fbde:	3401      	addeq	r4, #1
 801fbe0:	4643      	moveq	r3, r8
 801fbe2:	2344      	movne	r3, #68	; 0x44
 801fbe4:	220a      	movs	r2, #10
 801fbe6:	a90b      	add	r1, sp, #44	; 0x2c
 801fbe8:	4620      	mov	r0, r4
 801fbea:	9305      	str	r3, [sp, #20]
 801fbec:	f7ff fdf8 	bl	801f7e0 <strtoul>
 801fbf0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801fbf4:	9b05      	ldr	r3, [sp, #20]
 801fbf6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801fbfa:	45a0      	cmp	r8, r4
 801fbfc:	d114      	bne.n	801fc28 <_tzset_unlocked_r+0x2c0>
 801fbfe:	234d      	movs	r3, #77	; 0x4d
 801fc00:	f1b9 0f00 	cmp.w	r9, #0
 801fc04:	d107      	bne.n	801fc16 <_tzset_unlocked_r+0x2ae>
 801fc06:	722b      	strb	r3, [r5, #8]
 801fc08:	2103      	movs	r1, #3
 801fc0a:	2302      	movs	r3, #2
 801fc0c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801fc10:	f8c5 9014 	str.w	r9, [r5, #20]
 801fc14:	e791      	b.n	801fb3a <_tzset_unlocked_r+0x1d2>
 801fc16:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801fc1a:	220b      	movs	r2, #11
 801fc1c:	2301      	movs	r3, #1
 801fc1e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801fc22:	2300      	movs	r3, #0
 801fc24:	63eb      	str	r3, [r5, #60]	; 0x3c
 801fc26:	e788      	b.n	801fb3a <_tzset_unlocked_r+0x1d2>
 801fc28:	b280      	uxth	r0, r0
 801fc2a:	723b      	strb	r3, [r7, #8]
 801fc2c:	6178      	str	r0, [r7, #20]
 801fc2e:	e784      	b.n	801fb3a <_tzset_unlocked_r+0x1d2>
 801fc30:	08026dfc 	.word	0x08026dfc
 801fc34:	20000d84 	.word	0x20000d84
 801fc38:	20000d8c 	.word	0x20000d8c
 801fc3c:	08026dff 	.word	0x08026dff
 801fc40:	20000d88 	.word	0x20000d88
 801fc44:	2000016c 	.word	0x2000016c
 801fc48:	20000d77 	.word	0x20000d77
 801fc4c:	08026e03 	.word	0x08026e03
 801fc50:	08026e26 	.word	0x08026e26
 801fc54:	08026e12 	.word	0x08026e12
 801fc58:	08026e25 	.word	0x08026e25
 801fc5c:	20000d6c 	.word	0x20000d6c

0801fc60 <_vsniprintf_r>:
 801fc60:	b530      	push	{r4, r5, lr}
 801fc62:	1e14      	subs	r4, r2, #0
 801fc64:	4605      	mov	r5, r0
 801fc66:	b09b      	sub	sp, #108	; 0x6c
 801fc68:	4618      	mov	r0, r3
 801fc6a:	da05      	bge.n	801fc78 <_vsniprintf_r+0x18>
 801fc6c:	238b      	movs	r3, #139	; 0x8b
 801fc6e:	602b      	str	r3, [r5, #0]
 801fc70:	f04f 30ff 	mov.w	r0, #4294967295
 801fc74:	b01b      	add	sp, #108	; 0x6c
 801fc76:	bd30      	pop	{r4, r5, pc}
 801fc78:	f44f 7302 	mov.w	r3, #520	; 0x208
 801fc7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801fc80:	bf14      	ite	ne
 801fc82:	f104 33ff 	addne.w	r3, r4, #4294967295
 801fc86:	4623      	moveq	r3, r4
 801fc88:	9302      	str	r3, [sp, #8]
 801fc8a:	9305      	str	r3, [sp, #20]
 801fc8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fc90:	9100      	str	r1, [sp, #0]
 801fc92:	9104      	str	r1, [sp, #16]
 801fc94:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fc98:	4602      	mov	r2, r0
 801fc9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fc9c:	4669      	mov	r1, sp
 801fc9e:	4628      	mov	r0, r5
 801fca0:	f000 fb94 	bl	80203cc <_svfiprintf_r>
 801fca4:	1c43      	adds	r3, r0, #1
 801fca6:	bfbc      	itt	lt
 801fca8:	238b      	movlt	r3, #139	; 0x8b
 801fcaa:	602b      	strlt	r3, [r5, #0]
 801fcac:	2c00      	cmp	r4, #0
 801fcae:	d0e1      	beq.n	801fc74 <_vsniprintf_r+0x14>
 801fcb0:	9b00      	ldr	r3, [sp, #0]
 801fcb2:	2200      	movs	r2, #0
 801fcb4:	701a      	strb	r2, [r3, #0]
 801fcb6:	e7dd      	b.n	801fc74 <_vsniprintf_r+0x14>

0801fcb8 <vsniprintf>:
 801fcb8:	b507      	push	{r0, r1, r2, lr}
 801fcba:	9300      	str	r3, [sp, #0]
 801fcbc:	4613      	mov	r3, r2
 801fcbe:	460a      	mov	r2, r1
 801fcc0:	4601      	mov	r1, r0
 801fcc2:	4803      	ldr	r0, [pc, #12]	; (801fcd0 <vsniprintf+0x18>)
 801fcc4:	6800      	ldr	r0, [r0, #0]
 801fcc6:	f7ff ffcb 	bl	801fc60 <_vsniprintf_r>
 801fcca:	b003      	add	sp, #12
 801fccc:	f85d fb04 	ldr.w	pc, [sp], #4
 801fcd0:	20000108 	.word	0x20000108

0801fcd4 <__swbuf_r>:
 801fcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcd6:	460e      	mov	r6, r1
 801fcd8:	4614      	mov	r4, r2
 801fcda:	4605      	mov	r5, r0
 801fcdc:	b118      	cbz	r0, 801fce6 <__swbuf_r+0x12>
 801fcde:	6983      	ldr	r3, [r0, #24]
 801fce0:	b90b      	cbnz	r3, 801fce6 <__swbuf_r+0x12>
 801fce2:	f7fe f939 	bl	801df58 <__sinit>
 801fce6:	4b21      	ldr	r3, [pc, #132]	; (801fd6c <__swbuf_r+0x98>)
 801fce8:	429c      	cmp	r4, r3
 801fcea:	d12b      	bne.n	801fd44 <__swbuf_r+0x70>
 801fcec:	686c      	ldr	r4, [r5, #4]
 801fcee:	69a3      	ldr	r3, [r4, #24]
 801fcf0:	60a3      	str	r3, [r4, #8]
 801fcf2:	89a3      	ldrh	r3, [r4, #12]
 801fcf4:	071a      	lsls	r2, r3, #28
 801fcf6:	d52f      	bpl.n	801fd58 <__swbuf_r+0x84>
 801fcf8:	6923      	ldr	r3, [r4, #16]
 801fcfa:	b36b      	cbz	r3, 801fd58 <__swbuf_r+0x84>
 801fcfc:	6923      	ldr	r3, [r4, #16]
 801fcfe:	6820      	ldr	r0, [r4, #0]
 801fd00:	1ac0      	subs	r0, r0, r3
 801fd02:	6963      	ldr	r3, [r4, #20]
 801fd04:	b2f6      	uxtb	r6, r6
 801fd06:	4283      	cmp	r3, r0
 801fd08:	4637      	mov	r7, r6
 801fd0a:	dc04      	bgt.n	801fd16 <__swbuf_r+0x42>
 801fd0c:	4621      	mov	r1, r4
 801fd0e:	4628      	mov	r0, r5
 801fd10:	f7fe f87c 	bl	801de0c <_fflush_r>
 801fd14:	bb30      	cbnz	r0, 801fd64 <__swbuf_r+0x90>
 801fd16:	68a3      	ldr	r3, [r4, #8]
 801fd18:	3b01      	subs	r3, #1
 801fd1a:	60a3      	str	r3, [r4, #8]
 801fd1c:	6823      	ldr	r3, [r4, #0]
 801fd1e:	1c5a      	adds	r2, r3, #1
 801fd20:	6022      	str	r2, [r4, #0]
 801fd22:	701e      	strb	r6, [r3, #0]
 801fd24:	6963      	ldr	r3, [r4, #20]
 801fd26:	3001      	adds	r0, #1
 801fd28:	4283      	cmp	r3, r0
 801fd2a:	d004      	beq.n	801fd36 <__swbuf_r+0x62>
 801fd2c:	89a3      	ldrh	r3, [r4, #12]
 801fd2e:	07db      	lsls	r3, r3, #31
 801fd30:	d506      	bpl.n	801fd40 <__swbuf_r+0x6c>
 801fd32:	2e0a      	cmp	r6, #10
 801fd34:	d104      	bne.n	801fd40 <__swbuf_r+0x6c>
 801fd36:	4621      	mov	r1, r4
 801fd38:	4628      	mov	r0, r5
 801fd3a:	f7fe f867 	bl	801de0c <_fflush_r>
 801fd3e:	b988      	cbnz	r0, 801fd64 <__swbuf_r+0x90>
 801fd40:	4638      	mov	r0, r7
 801fd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd44:	4b0a      	ldr	r3, [pc, #40]	; (801fd70 <__swbuf_r+0x9c>)
 801fd46:	429c      	cmp	r4, r3
 801fd48:	d101      	bne.n	801fd4e <__swbuf_r+0x7a>
 801fd4a:	68ac      	ldr	r4, [r5, #8]
 801fd4c:	e7cf      	b.n	801fcee <__swbuf_r+0x1a>
 801fd4e:	4b09      	ldr	r3, [pc, #36]	; (801fd74 <__swbuf_r+0xa0>)
 801fd50:	429c      	cmp	r4, r3
 801fd52:	bf08      	it	eq
 801fd54:	68ec      	ldreq	r4, [r5, #12]
 801fd56:	e7ca      	b.n	801fcee <__swbuf_r+0x1a>
 801fd58:	4621      	mov	r1, r4
 801fd5a:	4628      	mov	r0, r5
 801fd5c:	f000 f81e 	bl	801fd9c <__swsetup_r>
 801fd60:	2800      	cmp	r0, #0
 801fd62:	d0cb      	beq.n	801fcfc <__swbuf_r+0x28>
 801fd64:	f04f 37ff 	mov.w	r7, #4294967295
 801fd68:	e7ea      	b.n	801fd40 <__swbuf_r+0x6c>
 801fd6a:	bf00      	nop
 801fd6c:	08026a00 	.word	0x08026a00
 801fd70:	08026a20 	.word	0x08026a20
 801fd74:	080269e0 	.word	0x080269e0

0801fd78 <_write_r>:
 801fd78:	b538      	push	{r3, r4, r5, lr}
 801fd7a:	4d07      	ldr	r5, [pc, #28]	; (801fd98 <_write_r+0x20>)
 801fd7c:	4604      	mov	r4, r0
 801fd7e:	4608      	mov	r0, r1
 801fd80:	4611      	mov	r1, r2
 801fd82:	2200      	movs	r2, #0
 801fd84:	602a      	str	r2, [r5, #0]
 801fd86:	461a      	mov	r2, r3
 801fd88:	f7e1 f822 	bl	8000dd0 <_write>
 801fd8c:	1c43      	adds	r3, r0, #1
 801fd8e:	d102      	bne.n	801fd96 <_write_r+0x1e>
 801fd90:	682b      	ldr	r3, [r5, #0]
 801fd92:	b103      	cbz	r3, 801fd96 <_write_r+0x1e>
 801fd94:	6023      	str	r3, [r4, #0]
 801fd96:	bd38      	pop	{r3, r4, r5, pc}
 801fd98:	20000e30 	.word	0x20000e30

0801fd9c <__swsetup_r>:
 801fd9c:	4b32      	ldr	r3, [pc, #200]	; (801fe68 <__swsetup_r+0xcc>)
 801fd9e:	b570      	push	{r4, r5, r6, lr}
 801fda0:	681d      	ldr	r5, [r3, #0]
 801fda2:	4606      	mov	r6, r0
 801fda4:	460c      	mov	r4, r1
 801fda6:	b125      	cbz	r5, 801fdb2 <__swsetup_r+0x16>
 801fda8:	69ab      	ldr	r3, [r5, #24]
 801fdaa:	b913      	cbnz	r3, 801fdb2 <__swsetup_r+0x16>
 801fdac:	4628      	mov	r0, r5
 801fdae:	f7fe f8d3 	bl	801df58 <__sinit>
 801fdb2:	4b2e      	ldr	r3, [pc, #184]	; (801fe6c <__swsetup_r+0xd0>)
 801fdb4:	429c      	cmp	r4, r3
 801fdb6:	d10f      	bne.n	801fdd8 <__swsetup_r+0x3c>
 801fdb8:	686c      	ldr	r4, [r5, #4]
 801fdba:	89a3      	ldrh	r3, [r4, #12]
 801fdbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fdc0:	0719      	lsls	r1, r3, #28
 801fdc2:	d42c      	bmi.n	801fe1e <__swsetup_r+0x82>
 801fdc4:	06dd      	lsls	r5, r3, #27
 801fdc6:	d411      	bmi.n	801fdec <__swsetup_r+0x50>
 801fdc8:	2309      	movs	r3, #9
 801fdca:	6033      	str	r3, [r6, #0]
 801fdcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fdd0:	81a3      	strh	r3, [r4, #12]
 801fdd2:	f04f 30ff 	mov.w	r0, #4294967295
 801fdd6:	e03e      	b.n	801fe56 <__swsetup_r+0xba>
 801fdd8:	4b25      	ldr	r3, [pc, #148]	; (801fe70 <__swsetup_r+0xd4>)
 801fdda:	429c      	cmp	r4, r3
 801fddc:	d101      	bne.n	801fde2 <__swsetup_r+0x46>
 801fdde:	68ac      	ldr	r4, [r5, #8]
 801fde0:	e7eb      	b.n	801fdba <__swsetup_r+0x1e>
 801fde2:	4b24      	ldr	r3, [pc, #144]	; (801fe74 <__swsetup_r+0xd8>)
 801fde4:	429c      	cmp	r4, r3
 801fde6:	bf08      	it	eq
 801fde8:	68ec      	ldreq	r4, [r5, #12]
 801fdea:	e7e6      	b.n	801fdba <__swsetup_r+0x1e>
 801fdec:	0758      	lsls	r0, r3, #29
 801fdee:	d512      	bpl.n	801fe16 <__swsetup_r+0x7a>
 801fdf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fdf2:	b141      	cbz	r1, 801fe06 <__swsetup_r+0x6a>
 801fdf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fdf8:	4299      	cmp	r1, r3
 801fdfa:	d002      	beq.n	801fe02 <__swsetup_r+0x66>
 801fdfc:	4630      	mov	r0, r6
 801fdfe:	f7fe fcfb 	bl	801e7f8 <_free_r>
 801fe02:	2300      	movs	r3, #0
 801fe04:	6363      	str	r3, [r4, #52]	; 0x34
 801fe06:	89a3      	ldrh	r3, [r4, #12]
 801fe08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fe0c:	81a3      	strh	r3, [r4, #12]
 801fe0e:	2300      	movs	r3, #0
 801fe10:	6063      	str	r3, [r4, #4]
 801fe12:	6923      	ldr	r3, [r4, #16]
 801fe14:	6023      	str	r3, [r4, #0]
 801fe16:	89a3      	ldrh	r3, [r4, #12]
 801fe18:	f043 0308 	orr.w	r3, r3, #8
 801fe1c:	81a3      	strh	r3, [r4, #12]
 801fe1e:	6923      	ldr	r3, [r4, #16]
 801fe20:	b94b      	cbnz	r3, 801fe36 <__swsetup_r+0x9a>
 801fe22:	89a3      	ldrh	r3, [r4, #12]
 801fe24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fe28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fe2c:	d003      	beq.n	801fe36 <__swsetup_r+0x9a>
 801fe2e:	4621      	mov	r1, r4
 801fe30:	4630      	mov	r0, r6
 801fe32:	f7fe fc6b 	bl	801e70c <__smakebuf_r>
 801fe36:	89a0      	ldrh	r0, [r4, #12]
 801fe38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fe3c:	f010 0301 	ands.w	r3, r0, #1
 801fe40:	d00a      	beq.n	801fe58 <__swsetup_r+0xbc>
 801fe42:	2300      	movs	r3, #0
 801fe44:	60a3      	str	r3, [r4, #8]
 801fe46:	6963      	ldr	r3, [r4, #20]
 801fe48:	425b      	negs	r3, r3
 801fe4a:	61a3      	str	r3, [r4, #24]
 801fe4c:	6923      	ldr	r3, [r4, #16]
 801fe4e:	b943      	cbnz	r3, 801fe62 <__swsetup_r+0xc6>
 801fe50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fe54:	d1ba      	bne.n	801fdcc <__swsetup_r+0x30>
 801fe56:	bd70      	pop	{r4, r5, r6, pc}
 801fe58:	0781      	lsls	r1, r0, #30
 801fe5a:	bf58      	it	pl
 801fe5c:	6963      	ldrpl	r3, [r4, #20]
 801fe5e:	60a3      	str	r3, [r4, #8]
 801fe60:	e7f4      	b.n	801fe4c <__swsetup_r+0xb0>
 801fe62:	2000      	movs	r0, #0
 801fe64:	e7f7      	b.n	801fe56 <__swsetup_r+0xba>
 801fe66:	bf00      	nop
 801fe68:	20000108 	.word	0x20000108
 801fe6c:	08026a00 	.word	0x08026a00
 801fe70:	08026a20 	.word	0x08026a20
 801fe74:	080269e0 	.word	0x080269e0

0801fe78 <__register_exitproc>:
 801fe78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe7c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ff38 <__register_exitproc+0xc0>
 801fe80:	4606      	mov	r6, r0
 801fe82:	f8d8 0000 	ldr.w	r0, [r8]
 801fe86:	461f      	mov	r7, r3
 801fe88:	460d      	mov	r5, r1
 801fe8a:	4691      	mov	r9, r2
 801fe8c:	f7fe fc17 	bl	801e6be <__retarget_lock_acquire_recursive>
 801fe90:	4b25      	ldr	r3, [pc, #148]	; (801ff28 <__register_exitproc+0xb0>)
 801fe92:	681c      	ldr	r4, [r3, #0]
 801fe94:	b934      	cbnz	r4, 801fea4 <__register_exitproc+0x2c>
 801fe96:	4c25      	ldr	r4, [pc, #148]	; (801ff2c <__register_exitproc+0xb4>)
 801fe98:	601c      	str	r4, [r3, #0]
 801fe9a:	4b25      	ldr	r3, [pc, #148]	; (801ff30 <__register_exitproc+0xb8>)
 801fe9c:	b113      	cbz	r3, 801fea4 <__register_exitproc+0x2c>
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801fea4:	6863      	ldr	r3, [r4, #4]
 801fea6:	2b1f      	cmp	r3, #31
 801fea8:	dd07      	ble.n	801feba <__register_exitproc+0x42>
 801feaa:	f8d8 0000 	ldr.w	r0, [r8]
 801feae:	f7fe fc08 	bl	801e6c2 <__retarget_lock_release_recursive>
 801feb2:	f04f 30ff 	mov.w	r0, #4294967295
 801feb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801feba:	b34e      	cbz	r6, 801ff10 <__register_exitproc+0x98>
 801febc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801fec0:	b988      	cbnz	r0, 801fee6 <__register_exitproc+0x6e>
 801fec2:	4b1c      	ldr	r3, [pc, #112]	; (801ff34 <__register_exitproc+0xbc>)
 801fec4:	b923      	cbnz	r3, 801fed0 <__register_exitproc+0x58>
 801fec6:	f8d8 0000 	ldr.w	r0, [r8]
 801feca:	f7fe fbf9 	bl	801e6c0 <__retarget_lock_release>
 801fece:	e7f0      	b.n	801feb2 <__register_exitproc+0x3a>
 801fed0:	f44f 7084 	mov.w	r0, #264	; 0x108
 801fed4:	f7fe fc5a 	bl	801e78c <malloc>
 801fed8:	2800      	cmp	r0, #0
 801feda:	d0f4      	beq.n	801fec6 <__register_exitproc+0x4e>
 801fedc:	2300      	movs	r3, #0
 801fede:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801fee2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801fee6:	6863      	ldr	r3, [r4, #4]
 801fee8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801feec:	2201      	movs	r2, #1
 801feee:	409a      	lsls	r2, r3
 801fef0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801fef4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801fef8:	4313      	orrs	r3, r2
 801fefa:	2e02      	cmp	r6, #2
 801fefc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ff00:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ff04:	bf02      	ittt	eq
 801ff06:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ff0a:	431a      	orreq	r2, r3
 801ff0c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801ff10:	6863      	ldr	r3, [r4, #4]
 801ff12:	f8d8 0000 	ldr.w	r0, [r8]
 801ff16:	1c5a      	adds	r2, r3, #1
 801ff18:	3302      	adds	r3, #2
 801ff1a:	6062      	str	r2, [r4, #4]
 801ff1c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ff20:	f7fe fbcf 	bl	801e6c2 <__retarget_lock_release_recursive>
 801ff24:	2000      	movs	r0, #0
 801ff26:	e7c6      	b.n	801feb6 <__register_exitproc+0x3e>
 801ff28:	20000e1c 	.word	0x20000e1c
 801ff2c:	20000d90 	.word	0x20000d90
 801ff30:	00000000 	.word	0x00000000
 801ff34:	0801e78d 	.word	0x0801e78d
 801ff38:	20000174 	.word	0x20000174

0801ff3c <abs>:
 801ff3c:	2800      	cmp	r0, #0
 801ff3e:	bfb8      	it	lt
 801ff40:	4240      	neglt	r0, r0
 801ff42:	4770      	bx	lr

0801ff44 <__assert_func>:
 801ff44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ff46:	4614      	mov	r4, r2
 801ff48:	461a      	mov	r2, r3
 801ff4a:	4b09      	ldr	r3, [pc, #36]	; (801ff70 <__assert_func+0x2c>)
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	4605      	mov	r5, r0
 801ff50:	68d8      	ldr	r0, [r3, #12]
 801ff52:	b14c      	cbz	r4, 801ff68 <__assert_func+0x24>
 801ff54:	4b07      	ldr	r3, [pc, #28]	; (801ff74 <__assert_func+0x30>)
 801ff56:	9100      	str	r1, [sp, #0]
 801ff58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ff5c:	4906      	ldr	r1, [pc, #24]	; (801ff78 <__assert_func+0x34>)
 801ff5e:	462b      	mov	r3, r5
 801ff60:	f000 f854 	bl	802000c <fiprintf>
 801ff64:	f7fd fe3c 	bl	801dbe0 <abort>
 801ff68:	4b04      	ldr	r3, [pc, #16]	; (801ff7c <__assert_func+0x38>)
 801ff6a:	461c      	mov	r4, r3
 801ff6c:	e7f3      	b.n	801ff56 <__assert_func+0x12>
 801ff6e:	bf00      	nop
 801ff70:	20000108 	.word	0x20000108
 801ff74:	08026e38 	.word	0x08026e38
 801ff78:	08026e45 	.word	0x08026e45
 801ff7c:	08026e73 	.word	0x08026e73

0801ff80 <_close_r>:
 801ff80:	b538      	push	{r3, r4, r5, lr}
 801ff82:	4d06      	ldr	r5, [pc, #24]	; (801ff9c <_close_r+0x1c>)
 801ff84:	2300      	movs	r3, #0
 801ff86:	4604      	mov	r4, r0
 801ff88:	4608      	mov	r0, r1
 801ff8a:	602b      	str	r3, [r5, #0]
 801ff8c:	f7e0 ff3c 	bl	8000e08 <_close>
 801ff90:	1c43      	adds	r3, r0, #1
 801ff92:	d102      	bne.n	801ff9a <_close_r+0x1a>
 801ff94:	682b      	ldr	r3, [r5, #0]
 801ff96:	b103      	cbz	r3, 801ff9a <_close_r+0x1a>
 801ff98:	6023      	str	r3, [r4, #0]
 801ff9a:	bd38      	pop	{r3, r4, r5, pc}
 801ff9c:	20000e30 	.word	0x20000e30

0801ffa0 <__sflags>:
 801ffa0:	780b      	ldrb	r3, [r1, #0]
 801ffa2:	2b72      	cmp	r3, #114	; 0x72
 801ffa4:	b530      	push	{r4, r5, lr}
 801ffa6:	d022      	beq.n	801ffee <__sflags+0x4e>
 801ffa8:	2b77      	cmp	r3, #119	; 0x77
 801ffaa:	d024      	beq.n	801fff6 <__sflags+0x56>
 801ffac:	2b61      	cmp	r3, #97	; 0x61
 801ffae:	d027      	beq.n	8020000 <__sflags+0x60>
 801ffb0:	2316      	movs	r3, #22
 801ffb2:	6003      	str	r3, [r0, #0]
 801ffb4:	2000      	movs	r0, #0
 801ffb6:	bd30      	pop	{r4, r5, pc}
 801ffb8:	2d62      	cmp	r5, #98	; 0x62
 801ffba:	d012      	beq.n	801ffe2 <__sflags+0x42>
 801ffbc:	2d78      	cmp	r5, #120	; 0x78
 801ffbe:	d013      	beq.n	801ffe8 <__sflags+0x48>
 801ffc0:	2d2b      	cmp	r5, #43	; 0x2b
 801ffc2:	d107      	bne.n	801ffd4 <__sflags+0x34>
 801ffc4:	f020 001c 	bic.w	r0, r0, #28
 801ffc8:	f023 0303 	bic.w	r3, r3, #3
 801ffcc:	f040 0010 	orr.w	r0, r0, #16
 801ffd0:	f043 0302 	orr.w	r3, r3, #2
 801ffd4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801ffd8:	2d00      	cmp	r5, #0
 801ffda:	d1ed      	bne.n	801ffb8 <__sflags+0x18>
 801ffdc:	4323      	orrs	r3, r4
 801ffde:	6013      	str	r3, [r2, #0]
 801ffe0:	e7e9      	b.n	801ffb6 <__sflags+0x16>
 801ffe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ffe6:	e7f5      	b.n	801ffd4 <__sflags+0x34>
 801ffe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ffec:	e7f2      	b.n	801ffd4 <__sflags+0x34>
 801ffee:	2400      	movs	r4, #0
 801fff0:	4623      	mov	r3, r4
 801fff2:	2004      	movs	r0, #4
 801fff4:	e7ee      	b.n	801ffd4 <__sflags+0x34>
 801fff6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801fffa:	2301      	movs	r3, #1
 801fffc:	2008      	movs	r0, #8
 801fffe:	e7e9      	b.n	801ffd4 <__sflags+0x34>
 8020000:	f44f 7402 	mov.w	r4, #520	; 0x208
 8020004:	2301      	movs	r3, #1
 8020006:	f44f 7084 	mov.w	r0, #264	; 0x108
 802000a:	e7e3      	b.n	801ffd4 <__sflags+0x34>

0802000c <fiprintf>:
 802000c:	b40e      	push	{r1, r2, r3}
 802000e:	b503      	push	{r0, r1, lr}
 8020010:	4601      	mov	r1, r0
 8020012:	ab03      	add	r3, sp, #12
 8020014:	4805      	ldr	r0, [pc, #20]	; (802002c <fiprintf+0x20>)
 8020016:	f853 2b04 	ldr.w	r2, [r3], #4
 802001a:	6800      	ldr	r0, [r0, #0]
 802001c:	9301      	str	r3, [sp, #4]
 802001e:	f000 faff 	bl	8020620 <_vfiprintf_r>
 8020022:	b002      	add	sp, #8
 8020024:	f85d eb04 	ldr.w	lr, [sp], #4
 8020028:	b003      	add	sp, #12
 802002a:	4770      	bx	lr
 802002c:	20000108 	.word	0x20000108

08020030 <_fstat_r>:
 8020030:	b538      	push	{r3, r4, r5, lr}
 8020032:	4d07      	ldr	r5, [pc, #28]	; (8020050 <_fstat_r+0x20>)
 8020034:	2300      	movs	r3, #0
 8020036:	4604      	mov	r4, r0
 8020038:	4608      	mov	r0, r1
 802003a:	4611      	mov	r1, r2
 802003c:	602b      	str	r3, [r5, #0]
 802003e:	f7e0 feef 	bl	8000e20 <_fstat>
 8020042:	1c43      	adds	r3, r0, #1
 8020044:	d102      	bne.n	802004c <_fstat_r+0x1c>
 8020046:	682b      	ldr	r3, [r5, #0]
 8020048:	b103      	cbz	r3, 802004c <_fstat_r+0x1c>
 802004a:	6023      	str	r3, [r4, #0]
 802004c:	bd38      	pop	{r3, r4, r5, pc}
 802004e:	bf00      	nop
 8020050:	20000e30 	.word	0x20000e30

08020054 <_findenv_r>:
 8020054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020058:	4607      	mov	r7, r0
 802005a:	4689      	mov	r9, r1
 802005c:	4616      	mov	r6, r2
 802005e:	f000 fe85 	bl	8020d6c <__env_lock>
 8020062:	4b18      	ldr	r3, [pc, #96]	; (80200c4 <_findenv_r+0x70>)
 8020064:	681c      	ldr	r4, [r3, #0]
 8020066:	469a      	mov	sl, r3
 8020068:	b134      	cbz	r4, 8020078 <_findenv_r+0x24>
 802006a:	464b      	mov	r3, r9
 802006c:	4698      	mov	r8, r3
 802006e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8020072:	b139      	cbz	r1, 8020084 <_findenv_r+0x30>
 8020074:	293d      	cmp	r1, #61	; 0x3d
 8020076:	d1f9      	bne.n	802006c <_findenv_r+0x18>
 8020078:	4638      	mov	r0, r7
 802007a:	f000 fe7d 	bl	8020d78 <__env_unlock>
 802007e:	2000      	movs	r0, #0
 8020080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020084:	eba8 0809 	sub.w	r8, r8, r9
 8020088:	46a3      	mov	fp, r4
 802008a:	f854 0b04 	ldr.w	r0, [r4], #4
 802008e:	2800      	cmp	r0, #0
 8020090:	d0f2      	beq.n	8020078 <_findenv_r+0x24>
 8020092:	4642      	mov	r2, r8
 8020094:	4649      	mov	r1, r9
 8020096:	f000 fe49 	bl	8020d2c <strncmp>
 802009a:	2800      	cmp	r0, #0
 802009c:	d1f4      	bne.n	8020088 <_findenv_r+0x34>
 802009e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80200a2:	eb03 0508 	add.w	r5, r3, r8
 80200a6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80200aa:	2b3d      	cmp	r3, #61	; 0x3d
 80200ac:	d1ec      	bne.n	8020088 <_findenv_r+0x34>
 80200ae:	f8da 3000 	ldr.w	r3, [sl]
 80200b2:	ebab 0303 	sub.w	r3, fp, r3
 80200b6:	109b      	asrs	r3, r3, #2
 80200b8:	4638      	mov	r0, r7
 80200ba:	6033      	str	r3, [r6, #0]
 80200bc:	f000 fe5c 	bl	8020d78 <__env_unlock>
 80200c0:	1c68      	adds	r0, r5, #1
 80200c2:	e7dd      	b.n	8020080 <_findenv_r+0x2c>
 80200c4:	20000000 	.word	0x20000000

080200c8 <_getenv_r>:
 80200c8:	b507      	push	{r0, r1, r2, lr}
 80200ca:	aa01      	add	r2, sp, #4
 80200cc:	f7ff ffc2 	bl	8020054 <_findenv_r>
 80200d0:	b003      	add	sp, #12
 80200d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080200d8 <__gettzinfo>:
 80200d8:	4800      	ldr	r0, [pc, #0]	; (80200dc <__gettzinfo+0x4>)
 80200da:	4770      	bx	lr
 80200dc:	20000178 	.word	0x20000178

080200e0 <gmtime_r>:
 80200e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200e4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80200e8:	460c      	mov	r4, r1
 80200ea:	4a51      	ldr	r2, [pc, #324]	; (8020230 <gmtime_r+0x150>)
 80200ec:	2300      	movs	r3, #0
 80200ee:	4630      	mov	r0, r6
 80200f0:	4639      	mov	r1, r7
 80200f2:	f7e0 fb5f 	bl	80007b4 <__aeabi_ldivmod>
 80200f6:	4639      	mov	r1, r7
 80200f8:	4605      	mov	r5, r0
 80200fa:	4a4d      	ldr	r2, [pc, #308]	; (8020230 <gmtime_r+0x150>)
 80200fc:	4630      	mov	r0, r6
 80200fe:	2300      	movs	r3, #0
 8020100:	f7e0 fb58 	bl	80007b4 <__aeabi_ldivmod>
 8020104:	2a00      	cmp	r2, #0
 8020106:	bfbc      	itt	lt
 8020108:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802010c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8020110:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020114:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8020118:	fbb2 f3f1 	udiv	r3, r2, r1
 802011c:	fb01 2213 	mls	r2, r1, r3, r2
 8020120:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8020124:	bfac      	ite	ge
 8020126:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802012a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 802012e:	60a3      	str	r3, [r4, #8]
 8020130:	fbb2 f3f1 	udiv	r3, r2, r1
 8020134:	fb01 2213 	mls	r2, r1, r3, r2
 8020138:	6063      	str	r3, [r4, #4]
 802013a:	6022      	str	r2, [r4, #0]
 802013c:	1cc3      	adds	r3, r0, #3
 802013e:	2207      	movs	r2, #7
 8020140:	fb93 f2f2 	sdiv	r2, r3, r2
 8020144:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8020148:	1a9b      	subs	r3, r3, r2
 802014a:	bf48      	it	mi
 802014c:	3307      	addmi	r3, #7
 802014e:	2800      	cmp	r0, #0
 8020150:	61a3      	str	r3, [r4, #24]
 8020152:	bfb8      	it	lt
 8020154:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8020158:	4936      	ldr	r1, [pc, #216]	; (8020234 <gmtime_r+0x154>)
 802015a:	bfae      	itee	ge
 802015c:	fb90 f1f1 	sdivge	r1, r0, r1
 8020160:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8020164:	fb93 f1f1 	sdivlt	r1, r3, r1
 8020168:	4b33      	ldr	r3, [pc, #204]	; (8020238 <gmtime_r+0x158>)
 802016a:	fb03 0001 	mla	r0, r3, r1, r0
 802016e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8020172:	fbb0 f2f2 	udiv	r2, r0, r2
 8020176:	4402      	add	r2, r0
 8020178:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802017c:	fbb0 f3fc 	udiv	r3, r0, ip
 8020180:	1ad2      	subs	r2, r2, r3
 8020182:	f240 176d 	movw	r7, #365	; 0x16d
 8020186:	4b2d      	ldr	r3, [pc, #180]	; (802023c <gmtime_r+0x15c>)
 8020188:	fbb0 f3f3 	udiv	r3, r0, r3
 802018c:	2664      	movs	r6, #100	; 0x64
 802018e:	1ad3      	subs	r3, r2, r3
 8020190:	fbb3 f5f7 	udiv	r5, r3, r7
 8020194:	fbb3 f3fc 	udiv	r3, r3, ip
 8020198:	fbb5 f2f6 	udiv	r2, r5, r6
 802019c:	1ad3      	subs	r3, r2, r3
 802019e:	4403      	add	r3, r0
 80201a0:	fb07 3315 	mls	r3, r7, r5, r3
 80201a4:	2099      	movs	r0, #153	; 0x99
 80201a6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80201aa:	f10c 0c02 	add.w	ip, ip, #2
 80201ae:	f103 0e01 	add.w	lr, r3, #1
 80201b2:	fbbc f7f0 	udiv	r7, ip, r0
 80201b6:	4378      	muls	r0, r7
 80201b8:	3002      	adds	r0, #2
 80201ba:	f04f 0805 	mov.w	r8, #5
 80201be:	fbb0 f0f8 	udiv	r0, r0, r8
 80201c2:	ebae 0000 	sub.w	r0, lr, r0
 80201c6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80201ca:	45f4      	cmp	ip, lr
 80201cc:	bf94      	ite	ls
 80201ce:	f04f 0c02 	movls.w	ip, #2
 80201d2:	f06f 0c09 	mvnhi.w	ip, #9
 80201d6:	4467      	add	r7, ip
 80201d8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80201dc:	fb0c 5101 	mla	r1, ip, r1, r5
 80201e0:	2f01      	cmp	r7, #1
 80201e2:	bf98      	it	ls
 80201e4:	3101      	addls	r1, #1
 80201e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80201ea:	d30c      	bcc.n	8020206 <gmtime_r+0x126>
 80201ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80201f0:	61e3      	str	r3, [r4, #28]
 80201f2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80201f6:	2300      	movs	r3, #0
 80201f8:	60e0      	str	r0, [r4, #12]
 80201fa:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80201fe:	6223      	str	r3, [r4, #32]
 8020200:	4620      	mov	r0, r4
 8020202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020206:	f015 0f03 	tst.w	r5, #3
 802020a:	d102      	bne.n	8020212 <gmtime_r+0x132>
 802020c:	fb06 5212 	mls	r2, r6, r2, r5
 8020210:	b95a      	cbnz	r2, 802022a <gmtime_r+0x14a>
 8020212:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8020216:	fbb5 f2f6 	udiv	r2, r5, r6
 802021a:	fb06 5212 	mls	r2, r6, r2, r5
 802021e:	fab2 f282 	clz	r2, r2
 8020222:	0952      	lsrs	r2, r2, #5
 8020224:	333b      	adds	r3, #59	; 0x3b
 8020226:	4413      	add	r3, r2
 8020228:	e7e2      	b.n	80201f0 <gmtime_r+0x110>
 802022a:	2201      	movs	r2, #1
 802022c:	e7fa      	b.n	8020224 <gmtime_r+0x144>
 802022e:	bf00      	nop
 8020230:	00015180 	.word	0x00015180
 8020234:	00023ab1 	.word	0x00023ab1
 8020238:	fffdc54f 	.word	0xfffdc54f
 802023c:	00023ab0 	.word	0x00023ab0

08020240 <_isatty_r>:
 8020240:	b538      	push	{r3, r4, r5, lr}
 8020242:	4d06      	ldr	r5, [pc, #24]	; (802025c <_isatty_r+0x1c>)
 8020244:	2300      	movs	r3, #0
 8020246:	4604      	mov	r4, r0
 8020248:	4608      	mov	r0, r1
 802024a:	602b      	str	r3, [r5, #0]
 802024c:	f7e0 fdf8 	bl	8000e40 <_isatty>
 8020250:	1c43      	adds	r3, r0, #1
 8020252:	d102      	bne.n	802025a <_isatty_r+0x1a>
 8020254:	682b      	ldr	r3, [r5, #0]
 8020256:	b103      	cbz	r3, 802025a <_isatty_r+0x1a>
 8020258:	6023      	str	r3, [r4, #0]
 802025a:	bd38      	pop	{r3, r4, r5, pc}
 802025c:	20000e30 	.word	0x20000e30

08020260 <labs>:
 8020260:	2800      	cmp	r0, #0
 8020262:	bfb8      	it	lt
 8020264:	4240      	neglt	r0, r0
 8020266:	4770      	bx	lr

08020268 <_lseek_r>:
 8020268:	b538      	push	{r3, r4, r5, lr}
 802026a:	4d07      	ldr	r5, [pc, #28]	; (8020288 <_lseek_r+0x20>)
 802026c:	4604      	mov	r4, r0
 802026e:	4608      	mov	r0, r1
 8020270:	4611      	mov	r1, r2
 8020272:	2200      	movs	r2, #0
 8020274:	602a      	str	r2, [r5, #0]
 8020276:	461a      	mov	r2, r3
 8020278:	f7e0 fded 	bl	8000e56 <_lseek>
 802027c:	1c43      	adds	r3, r0, #1
 802027e:	d102      	bne.n	8020286 <_lseek_r+0x1e>
 8020280:	682b      	ldr	r3, [r5, #0]
 8020282:	b103      	cbz	r3, 8020286 <_lseek_r+0x1e>
 8020284:	6023      	str	r3, [r4, #0]
 8020286:	bd38      	pop	{r3, r4, r5, pc}
 8020288:	20000e30 	.word	0x20000e30

0802028c <__ascii_mbtowc>:
 802028c:	b082      	sub	sp, #8
 802028e:	b901      	cbnz	r1, 8020292 <__ascii_mbtowc+0x6>
 8020290:	a901      	add	r1, sp, #4
 8020292:	b142      	cbz	r2, 80202a6 <__ascii_mbtowc+0x1a>
 8020294:	b14b      	cbz	r3, 80202aa <__ascii_mbtowc+0x1e>
 8020296:	7813      	ldrb	r3, [r2, #0]
 8020298:	600b      	str	r3, [r1, #0]
 802029a:	7812      	ldrb	r2, [r2, #0]
 802029c:	1e10      	subs	r0, r2, #0
 802029e:	bf18      	it	ne
 80202a0:	2001      	movne	r0, #1
 80202a2:	b002      	add	sp, #8
 80202a4:	4770      	bx	lr
 80202a6:	4610      	mov	r0, r2
 80202a8:	e7fb      	b.n	80202a2 <__ascii_mbtowc+0x16>
 80202aa:	f06f 0001 	mvn.w	r0, #1
 80202ae:	e7f8      	b.n	80202a2 <__ascii_mbtowc+0x16>

080202b0 <__malloc_lock>:
 80202b0:	4801      	ldr	r0, [pc, #4]	; (80202b8 <__malloc_lock+0x8>)
 80202b2:	f7fe ba04 	b.w	801e6be <__retarget_lock_acquire_recursive>
 80202b6:	bf00      	nop
 80202b8:	20000e28 	.word	0x20000e28

080202bc <__malloc_unlock>:
 80202bc:	4801      	ldr	r0, [pc, #4]	; (80202c4 <__malloc_unlock+0x8>)
 80202be:	f7fe ba00 	b.w	801e6c2 <__retarget_lock_release_recursive>
 80202c2:	bf00      	nop
 80202c4:	20000e28 	.word	0x20000e28

080202c8 <_realloc_r>:
 80202c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202ca:	4607      	mov	r7, r0
 80202cc:	4614      	mov	r4, r2
 80202ce:	460e      	mov	r6, r1
 80202d0:	b921      	cbnz	r1, 80202dc <_realloc_r+0x14>
 80202d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80202d6:	4611      	mov	r1, r2
 80202d8:	f7fe bade 	b.w	801e898 <_malloc_r>
 80202dc:	b922      	cbnz	r2, 80202e8 <_realloc_r+0x20>
 80202de:	f7fe fa8b 	bl	801e7f8 <_free_r>
 80202e2:	4625      	mov	r5, r4
 80202e4:	4628      	mov	r0, r5
 80202e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80202e8:	f000 fd66 	bl	8020db8 <_malloc_usable_size_r>
 80202ec:	42a0      	cmp	r0, r4
 80202ee:	d20f      	bcs.n	8020310 <_realloc_r+0x48>
 80202f0:	4621      	mov	r1, r4
 80202f2:	4638      	mov	r0, r7
 80202f4:	f7fe fad0 	bl	801e898 <_malloc_r>
 80202f8:	4605      	mov	r5, r0
 80202fa:	2800      	cmp	r0, #0
 80202fc:	d0f2      	beq.n	80202e4 <_realloc_r+0x1c>
 80202fe:	4631      	mov	r1, r6
 8020300:	4622      	mov	r2, r4
 8020302:	f7fe fa53 	bl	801e7ac <memcpy>
 8020306:	4631      	mov	r1, r6
 8020308:	4638      	mov	r0, r7
 802030a:	f7fe fa75 	bl	801e7f8 <_free_r>
 802030e:	e7e9      	b.n	80202e4 <_realloc_r+0x1c>
 8020310:	4635      	mov	r5, r6
 8020312:	e7e7      	b.n	80202e4 <_realloc_r+0x1c>

08020314 <__ssputs_r>:
 8020314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020318:	688e      	ldr	r6, [r1, #8]
 802031a:	429e      	cmp	r6, r3
 802031c:	4682      	mov	sl, r0
 802031e:	460c      	mov	r4, r1
 8020320:	4690      	mov	r8, r2
 8020322:	461f      	mov	r7, r3
 8020324:	d838      	bhi.n	8020398 <__ssputs_r+0x84>
 8020326:	898a      	ldrh	r2, [r1, #12]
 8020328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802032c:	d032      	beq.n	8020394 <__ssputs_r+0x80>
 802032e:	6825      	ldr	r5, [r4, #0]
 8020330:	6909      	ldr	r1, [r1, #16]
 8020332:	eba5 0901 	sub.w	r9, r5, r1
 8020336:	6965      	ldr	r5, [r4, #20]
 8020338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802033c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020340:	3301      	adds	r3, #1
 8020342:	444b      	add	r3, r9
 8020344:	106d      	asrs	r5, r5, #1
 8020346:	429d      	cmp	r5, r3
 8020348:	bf38      	it	cc
 802034a:	461d      	movcc	r5, r3
 802034c:	0553      	lsls	r3, r2, #21
 802034e:	d531      	bpl.n	80203b4 <__ssputs_r+0xa0>
 8020350:	4629      	mov	r1, r5
 8020352:	f7fe faa1 	bl	801e898 <_malloc_r>
 8020356:	4606      	mov	r6, r0
 8020358:	b950      	cbnz	r0, 8020370 <__ssputs_r+0x5c>
 802035a:	230c      	movs	r3, #12
 802035c:	f8ca 3000 	str.w	r3, [sl]
 8020360:	89a3      	ldrh	r3, [r4, #12]
 8020362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020366:	81a3      	strh	r3, [r4, #12]
 8020368:	f04f 30ff 	mov.w	r0, #4294967295
 802036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020370:	6921      	ldr	r1, [r4, #16]
 8020372:	464a      	mov	r2, r9
 8020374:	f7fe fa1a 	bl	801e7ac <memcpy>
 8020378:	89a3      	ldrh	r3, [r4, #12]
 802037a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802037e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020382:	81a3      	strh	r3, [r4, #12]
 8020384:	6126      	str	r6, [r4, #16]
 8020386:	6165      	str	r5, [r4, #20]
 8020388:	444e      	add	r6, r9
 802038a:	eba5 0509 	sub.w	r5, r5, r9
 802038e:	6026      	str	r6, [r4, #0]
 8020390:	60a5      	str	r5, [r4, #8]
 8020392:	463e      	mov	r6, r7
 8020394:	42be      	cmp	r6, r7
 8020396:	d900      	bls.n	802039a <__ssputs_r+0x86>
 8020398:	463e      	mov	r6, r7
 802039a:	4632      	mov	r2, r6
 802039c:	6820      	ldr	r0, [r4, #0]
 802039e:	4641      	mov	r1, r8
 80203a0:	f000 fcf0 	bl	8020d84 <memmove>
 80203a4:	68a3      	ldr	r3, [r4, #8]
 80203a6:	6822      	ldr	r2, [r4, #0]
 80203a8:	1b9b      	subs	r3, r3, r6
 80203aa:	4432      	add	r2, r6
 80203ac:	60a3      	str	r3, [r4, #8]
 80203ae:	6022      	str	r2, [r4, #0]
 80203b0:	2000      	movs	r0, #0
 80203b2:	e7db      	b.n	802036c <__ssputs_r+0x58>
 80203b4:	462a      	mov	r2, r5
 80203b6:	f7ff ff87 	bl	80202c8 <_realloc_r>
 80203ba:	4606      	mov	r6, r0
 80203bc:	2800      	cmp	r0, #0
 80203be:	d1e1      	bne.n	8020384 <__ssputs_r+0x70>
 80203c0:	6921      	ldr	r1, [r4, #16]
 80203c2:	4650      	mov	r0, sl
 80203c4:	f7fe fa18 	bl	801e7f8 <_free_r>
 80203c8:	e7c7      	b.n	802035a <__ssputs_r+0x46>
	...

080203cc <_svfiprintf_r>:
 80203cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203d0:	4698      	mov	r8, r3
 80203d2:	898b      	ldrh	r3, [r1, #12]
 80203d4:	061b      	lsls	r3, r3, #24
 80203d6:	b09d      	sub	sp, #116	; 0x74
 80203d8:	4607      	mov	r7, r0
 80203da:	460d      	mov	r5, r1
 80203dc:	4614      	mov	r4, r2
 80203de:	d50e      	bpl.n	80203fe <_svfiprintf_r+0x32>
 80203e0:	690b      	ldr	r3, [r1, #16]
 80203e2:	b963      	cbnz	r3, 80203fe <_svfiprintf_r+0x32>
 80203e4:	2140      	movs	r1, #64	; 0x40
 80203e6:	f7fe fa57 	bl	801e898 <_malloc_r>
 80203ea:	6028      	str	r0, [r5, #0]
 80203ec:	6128      	str	r0, [r5, #16]
 80203ee:	b920      	cbnz	r0, 80203fa <_svfiprintf_r+0x2e>
 80203f0:	230c      	movs	r3, #12
 80203f2:	603b      	str	r3, [r7, #0]
 80203f4:	f04f 30ff 	mov.w	r0, #4294967295
 80203f8:	e0d1      	b.n	802059e <_svfiprintf_r+0x1d2>
 80203fa:	2340      	movs	r3, #64	; 0x40
 80203fc:	616b      	str	r3, [r5, #20]
 80203fe:	2300      	movs	r3, #0
 8020400:	9309      	str	r3, [sp, #36]	; 0x24
 8020402:	2320      	movs	r3, #32
 8020404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020408:	f8cd 800c 	str.w	r8, [sp, #12]
 802040c:	2330      	movs	r3, #48	; 0x30
 802040e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80205b8 <_svfiprintf_r+0x1ec>
 8020412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020416:	f04f 0901 	mov.w	r9, #1
 802041a:	4623      	mov	r3, r4
 802041c:	469a      	mov	sl, r3
 802041e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020422:	b10a      	cbz	r2, 8020428 <_svfiprintf_r+0x5c>
 8020424:	2a25      	cmp	r2, #37	; 0x25
 8020426:	d1f9      	bne.n	802041c <_svfiprintf_r+0x50>
 8020428:	ebba 0b04 	subs.w	fp, sl, r4
 802042c:	d00b      	beq.n	8020446 <_svfiprintf_r+0x7a>
 802042e:	465b      	mov	r3, fp
 8020430:	4622      	mov	r2, r4
 8020432:	4629      	mov	r1, r5
 8020434:	4638      	mov	r0, r7
 8020436:	f7ff ff6d 	bl	8020314 <__ssputs_r>
 802043a:	3001      	adds	r0, #1
 802043c:	f000 80aa 	beq.w	8020594 <_svfiprintf_r+0x1c8>
 8020440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020442:	445a      	add	r2, fp
 8020444:	9209      	str	r2, [sp, #36]	; 0x24
 8020446:	f89a 3000 	ldrb.w	r3, [sl]
 802044a:	2b00      	cmp	r3, #0
 802044c:	f000 80a2 	beq.w	8020594 <_svfiprintf_r+0x1c8>
 8020450:	2300      	movs	r3, #0
 8020452:	f04f 32ff 	mov.w	r2, #4294967295
 8020456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802045a:	f10a 0a01 	add.w	sl, sl, #1
 802045e:	9304      	str	r3, [sp, #16]
 8020460:	9307      	str	r3, [sp, #28]
 8020462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020466:	931a      	str	r3, [sp, #104]	; 0x68
 8020468:	4654      	mov	r4, sl
 802046a:	2205      	movs	r2, #5
 802046c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020470:	4851      	ldr	r0, [pc, #324]	; (80205b8 <_svfiprintf_r+0x1ec>)
 8020472:	f7df fef5 	bl	8000260 <memchr>
 8020476:	9a04      	ldr	r2, [sp, #16]
 8020478:	b9d8      	cbnz	r0, 80204b2 <_svfiprintf_r+0xe6>
 802047a:	06d0      	lsls	r0, r2, #27
 802047c:	bf44      	itt	mi
 802047e:	2320      	movmi	r3, #32
 8020480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020484:	0711      	lsls	r1, r2, #28
 8020486:	bf44      	itt	mi
 8020488:	232b      	movmi	r3, #43	; 0x2b
 802048a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802048e:	f89a 3000 	ldrb.w	r3, [sl]
 8020492:	2b2a      	cmp	r3, #42	; 0x2a
 8020494:	d015      	beq.n	80204c2 <_svfiprintf_r+0xf6>
 8020496:	9a07      	ldr	r2, [sp, #28]
 8020498:	4654      	mov	r4, sl
 802049a:	2000      	movs	r0, #0
 802049c:	f04f 0c0a 	mov.w	ip, #10
 80204a0:	4621      	mov	r1, r4
 80204a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80204a6:	3b30      	subs	r3, #48	; 0x30
 80204a8:	2b09      	cmp	r3, #9
 80204aa:	d94e      	bls.n	802054a <_svfiprintf_r+0x17e>
 80204ac:	b1b0      	cbz	r0, 80204dc <_svfiprintf_r+0x110>
 80204ae:	9207      	str	r2, [sp, #28]
 80204b0:	e014      	b.n	80204dc <_svfiprintf_r+0x110>
 80204b2:	eba0 0308 	sub.w	r3, r0, r8
 80204b6:	fa09 f303 	lsl.w	r3, r9, r3
 80204ba:	4313      	orrs	r3, r2
 80204bc:	9304      	str	r3, [sp, #16]
 80204be:	46a2      	mov	sl, r4
 80204c0:	e7d2      	b.n	8020468 <_svfiprintf_r+0x9c>
 80204c2:	9b03      	ldr	r3, [sp, #12]
 80204c4:	1d19      	adds	r1, r3, #4
 80204c6:	681b      	ldr	r3, [r3, #0]
 80204c8:	9103      	str	r1, [sp, #12]
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	bfbb      	ittet	lt
 80204ce:	425b      	neglt	r3, r3
 80204d0:	f042 0202 	orrlt.w	r2, r2, #2
 80204d4:	9307      	strge	r3, [sp, #28]
 80204d6:	9307      	strlt	r3, [sp, #28]
 80204d8:	bfb8      	it	lt
 80204da:	9204      	strlt	r2, [sp, #16]
 80204dc:	7823      	ldrb	r3, [r4, #0]
 80204de:	2b2e      	cmp	r3, #46	; 0x2e
 80204e0:	d10c      	bne.n	80204fc <_svfiprintf_r+0x130>
 80204e2:	7863      	ldrb	r3, [r4, #1]
 80204e4:	2b2a      	cmp	r3, #42	; 0x2a
 80204e6:	d135      	bne.n	8020554 <_svfiprintf_r+0x188>
 80204e8:	9b03      	ldr	r3, [sp, #12]
 80204ea:	1d1a      	adds	r2, r3, #4
 80204ec:	681b      	ldr	r3, [r3, #0]
 80204ee:	9203      	str	r2, [sp, #12]
 80204f0:	2b00      	cmp	r3, #0
 80204f2:	bfb8      	it	lt
 80204f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80204f8:	3402      	adds	r4, #2
 80204fa:	9305      	str	r3, [sp, #20]
 80204fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80205c8 <_svfiprintf_r+0x1fc>
 8020500:	7821      	ldrb	r1, [r4, #0]
 8020502:	2203      	movs	r2, #3
 8020504:	4650      	mov	r0, sl
 8020506:	f7df feab 	bl	8000260 <memchr>
 802050a:	b140      	cbz	r0, 802051e <_svfiprintf_r+0x152>
 802050c:	2340      	movs	r3, #64	; 0x40
 802050e:	eba0 000a 	sub.w	r0, r0, sl
 8020512:	fa03 f000 	lsl.w	r0, r3, r0
 8020516:	9b04      	ldr	r3, [sp, #16]
 8020518:	4303      	orrs	r3, r0
 802051a:	3401      	adds	r4, #1
 802051c:	9304      	str	r3, [sp, #16]
 802051e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020522:	4826      	ldr	r0, [pc, #152]	; (80205bc <_svfiprintf_r+0x1f0>)
 8020524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020528:	2206      	movs	r2, #6
 802052a:	f7df fe99 	bl	8000260 <memchr>
 802052e:	2800      	cmp	r0, #0
 8020530:	d038      	beq.n	80205a4 <_svfiprintf_r+0x1d8>
 8020532:	4b23      	ldr	r3, [pc, #140]	; (80205c0 <_svfiprintf_r+0x1f4>)
 8020534:	bb1b      	cbnz	r3, 802057e <_svfiprintf_r+0x1b2>
 8020536:	9b03      	ldr	r3, [sp, #12]
 8020538:	3307      	adds	r3, #7
 802053a:	f023 0307 	bic.w	r3, r3, #7
 802053e:	3308      	adds	r3, #8
 8020540:	9303      	str	r3, [sp, #12]
 8020542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020544:	4433      	add	r3, r6
 8020546:	9309      	str	r3, [sp, #36]	; 0x24
 8020548:	e767      	b.n	802041a <_svfiprintf_r+0x4e>
 802054a:	fb0c 3202 	mla	r2, ip, r2, r3
 802054e:	460c      	mov	r4, r1
 8020550:	2001      	movs	r0, #1
 8020552:	e7a5      	b.n	80204a0 <_svfiprintf_r+0xd4>
 8020554:	2300      	movs	r3, #0
 8020556:	3401      	adds	r4, #1
 8020558:	9305      	str	r3, [sp, #20]
 802055a:	4619      	mov	r1, r3
 802055c:	f04f 0c0a 	mov.w	ip, #10
 8020560:	4620      	mov	r0, r4
 8020562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020566:	3a30      	subs	r2, #48	; 0x30
 8020568:	2a09      	cmp	r2, #9
 802056a:	d903      	bls.n	8020574 <_svfiprintf_r+0x1a8>
 802056c:	2b00      	cmp	r3, #0
 802056e:	d0c5      	beq.n	80204fc <_svfiprintf_r+0x130>
 8020570:	9105      	str	r1, [sp, #20]
 8020572:	e7c3      	b.n	80204fc <_svfiprintf_r+0x130>
 8020574:	fb0c 2101 	mla	r1, ip, r1, r2
 8020578:	4604      	mov	r4, r0
 802057a:	2301      	movs	r3, #1
 802057c:	e7f0      	b.n	8020560 <_svfiprintf_r+0x194>
 802057e:	ab03      	add	r3, sp, #12
 8020580:	9300      	str	r3, [sp, #0]
 8020582:	462a      	mov	r2, r5
 8020584:	4b0f      	ldr	r3, [pc, #60]	; (80205c4 <_svfiprintf_r+0x1f8>)
 8020586:	a904      	add	r1, sp, #16
 8020588:	4638      	mov	r0, r7
 802058a:	f3af 8000 	nop.w
 802058e:	1c42      	adds	r2, r0, #1
 8020590:	4606      	mov	r6, r0
 8020592:	d1d6      	bne.n	8020542 <_svfiprintf_r+0x176>
 8020594:	89ab      	ldrh	r3, [r5, #12]
 8020596:	065b      	lsls	r3, r3, #25
 8020598:	f53f af2c 	bmi.w	80203f4 <_svfiprintf_r+0x28>
 802059c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802059e:	b01d      	add	sp, #116	; 0x74
 80205a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205a4:	ab03      	add	r3, sp, #12
 80205a6:	9300      	str	r3, [sp, #0]
 80205a8:	462a      	mov	r2, r5
 80205aa:	4b06      	ldr	r3, [pc, #24]	; (80205c4 <_svfiprintf_r+0x1f8>)
 80205ac:	a904      	add	r1, sp, #16
 80205ae:	4638      	mov	r0, r7
 80205b0:	f000 f9d4 	bl	802095c <_printf_i>
 80205b4:	e7eb      	b.n	802058e <_svfiprintf_r+0x1c2>
 80205b6:	bf00      	nop
 80205b8:	08026f7f 	.word	0x08026f7f
 80205bc:	08026f89 	.word	0x08026f89
 80205c0:	00000000 	.word	0x00000000
 80205c4:	08020315 	.word	0x08020315
 80205c8:	08026f85 	.word	0x08026f85

080205cc <__sfputc_r>:
 80205cc:	6893      	ldr	r3, [r2, #8]
 80205ce:	3b01      	subs	r3, #1
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	b410      	push	{r4}
 80205d4:	6093      	str	r3, [r2, #8]
 80205d6:	da08      	bge.n	80205ea <__sfputc_r+0x1e>
 80205d8:	6994      	ldr	r4, [r2, #24]
 80205da:	42a3      	cmp	r3, r4
 80205dc:	db01      	blt.n	80205e2 <__sfputc_r+0x16>
 80205de:	290a      	cmp	r1, #10
 80205e0:	d103      	bne.n	80205ea <__sfputc_r+0x1e>
 80205e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80205e6:	f7ff bb75 	b.w	801fcd4 <__swbuf_r>
 80205ea:	6813      	ldr	r3, [r2, #0]
 80205ec:	1c58      	adds	r0, r3, #1
 80205ee:	6010      	str	r0, [r2, #0]
 80205f0:	7019      	strb	r1, [r3, #0]
 80205f2:	4608      	mov	r0, r1
 80205f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80205f8:	4770      	bx	lr

080205fa <__sfputs_r>:
 80205fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205fc:	4606      	mov	r6, r0
 80205fe:	460f      	mov	r7, r1
 8020600:	4614      	mov	r4, r2
 8020602:	18d5      	adds	r5, r2, r3
 8020604:	42ac      	cmp	r4, r5
 8020606:	d101      	bne.n	802060c <__sfputs_r+0x12>
 8020608:	2000      	movs	r0, #0
 802060a:	e007      	b.n	802061c <__sfputs_r+0x22>
 802060c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020610:	463a      	mov	r2, r7
 8020612:	4630      	mov	r0, r6
 8020614:	f7ff ffda 	bl	80205cc <__sfputc_r>
 8020618:	1c43      	adds	r3, r0, #1
 802061a:	d1f3      	bne.n	8020604 <__sfputs_r+0xa>
 802061c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020620 <_vfiprintf_r>:
 8020620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020624:	460d      	mov	r5, r1
 8020626:	b09d      	sub	sp, #116	; 0x74
 8020628:	4614      	mov	r4, r2
 802062a:	4698      	mov	r8, r3
 802062c:	4606      	mov	r6, r0
 802062e:	b118      	cbz	r0, 8020638 <_vfiprintf_r+0x18>
 8020630:	6983      	ldr	r3, [r0, #24]
 8020632:	b90b      	cbnz	r3, 8020638 <_vfiprintf_r+0x18>
 8020634:	f7fd fc90 	bl	801df58 <__sinit>
 8020638:	4b89      	ldr	r3, [pc, #548]	; (8020860 <_vfiprintf_r+0x240>)
 802063a:	429d      	cmp	r5, r3
 802063c:	d11b      	bne.n	8020676 <_vfiprintf_r+0x56>
 802063e:	6875      	ldr	r5, [r6, #4]
 8020640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020642:	07d9      	lsls	r1, r3, #31
 8020644:	d405      	bmi.n	8020652 <_vfiprintf_r+0x32>
 8020646:	89ab      	ldrh	r3, [r5, #12]
 8020648:	059a      	lsls	r2, r3, #22
 802064a:	d402      	bmi.n	8020652 <_vfiprintf_r+0x32>
 802064c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802064e:	f7fe f836 	bl	801e6be <__retarget_lock_acquire_recursive>
 8020652:	89ab      	ldrh	r3, [r5, #12]
 8020654:	071b      	lsls	r3, r3, #28
 8020656:	d501      	bpl.n	802065c <_vfiprintf_r+0x3c>
 8020658:	692b      	ldr	r3, [r5, #16]
 802065a:	b9eb      	cbnz	r3, 8020698 <_vfiprintf_r+0x78>
 802065c:	4629      	mov	r1, r5
 802065e:	4630      	mov	r0, r6
 8020660:	f7ff fb9c 	bl	801fd9c <__swsetup_r>
 8020664:	b1c0      	cbz	r0, 8020698 <_vfiprintf_r+0x78>
 8020666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020668:	07dc      	lsls	r4, r3, #31
 802066a:	d50e      	bpl.n	802068a <_vfiprintf_r+0x6a>
 802066c:	f04f 30ff 	mov.w	r0, #4294967295
 8020670:	b01d      	add	sp, #116	; 0x74
 8020672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020676:	4b7b      	ldr	r3, [pc, #492]	; (8020864 <_vfiprintf_r+0x244>)
 8020678:	429d      	cmp	r5, r3
 802067a:	d101      	bne.n	8020680 <_vfiprintf_r+0x60>
 802067c:	68b5      	ldr	r5, [r6, #8]
 802067e:	e7df      	b.n	8020640 <_vfiprintf_r+0x20>
 8020680:	4b79      	ldr	r3, [pc, #484]	; (8020868 <_vfiprintf_r+0x248>)
 8020682:	429d      	cmp	r5, r3
 8020684:	bf08      	it	eq
 8020686:	68f5      	ldreq	r5, [r6, #12]
 8020688:	e7da      	b.n	8020640 <_vfiprintf_r+0x20>
 802068a:	89ab      	ldrh	r3, [r5, #12]
 802068c:	0598      	lsls	r0, r3, #22
 802068e:	d4ed      	bmi.n	802066c <_vfiprintf_r+0x4c>
 8020690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020692:	f7fe f816 	bl	801e6c2 <__retarget_lock_release_recursive>
 8020696:	e7e9      	b.n	802066c <_vfiprintf_r+0x4c>
 8020698:	2300      	movs	r3, #0
 802069a:	9309      	str	r3, [sp, #36]	; 0x24
 802069c:	2320      	movs	r3, #32
 802069e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80206a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80206a6:	2330      	movs	r3, #48	; 0x30
 80206a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802086c <_vfiprintf_r+0x24c>
 80206ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80206b0:	f04f 0901 	mov.w	r9, #1
 80206b4:	4623      	mov	r3, r4
 80206b6:	469a      	mov	sl, r3
 80206b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80206bc:	b10a      	cbz	r2, 80206c2 <_vfiprintf_r+0xa2>
 80206be:	2a25      	cmp	r2, #37	; 0x25
 80206c0:	d1f9      	bne.n	80206b6 <_vfiprintf_r+0x96>
 80206c2:	ebba 0b04 	subs.w	fp, sl, r4
 80206c6:	d00b      	beq.n	80206e0 <_vfiprintf_r+0xc0>
 80206c8:	465b      	mov	r3, fp
 80206ca:	4622      	mov	r2, r4
 80206cc:	4629      	mov	r1, r5
 80206ce:	4630      	mov	r0, r6
 80206d0:	f7ff ff93 	bl	80205fa <__sfputs_r>
 80206d4:	3001      	adds	r0, #1
 80206d6:	f000 80aa 	beq.w	802082e <_vfiprintf_r+0x20e>
 80206da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80206dc:	445a      	add	r2, fp
 80206de:	9209      	str	r2, [sp, #36]	; 0x24
 80206e0:	f89a 3000 	ldrb.w	r3, [sl]
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	f000 80a2 	beq.w	802082e <_vfiprintf_r+0x20e>
 80206ea:	2300      	movs	r3, #0
 80206ec:	f04f 32ff 	mov.w	r2, #4294967295
 80206f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80206f4:	f10a 0a01 	add.w	sl, sl, #1
 80206f8:	9304      	str	r3, [sp, #16]
 80206fa:	9307      	str	r3, [sp, #28]
 80206fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020700:	931a      	str	r3, [sp, #104]	; 0x68
 8020702:	4654      	mov	r4, sl
 8020704:	2205      	movs	r2, #5
 8020706:	f814 1b01 	ldrb.w	r1, [r4], #1
 802070a:	4858      	ldr	r0, [pc, #352]	; (802086c <_vfiprintf_r+0x24c>)
 802070c:	f7df fda8 	bl	8000260 <memchr>
 8020710:	9a04      	ldr	r2, [sp, #16]
 8020712:	b9d8      	cbnz	r0, 802074c <_vfiprintf_r+0x12c>
 8020714:	06d1      	lsls	r1, r2, #27
 8020716:	bf44      	itt	mi
 8020718:	2320      	movmi	r3, #32
 802071a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802071e:	0713      	lsls	r3, r2, #28
 8020720:	bf44      	itt	mi
 8020722:	232b      	movmi	r3, #43	; 0x2b
 8020724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020728:	f89a 3000 	ldrb.w	r3, [sl]
 802072c:	2b2a      	cmp	r3, #42	; 0x2a
 802072e:	d015      	beq.n	802075c <_vfiprintf_r+0x13c>
 8020730:	9a07      	ldr	r2, [sp, #28]
 8020732:	4654      	mov	r4, sl
 8020734:	2000      	movs	r0, #0
 8020736:	f04f 0c0a 	mov.w	ip, #10
 802073a:	4621      	mov	r1, r4
 802073c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020740:	3b30      	subs	r3, #48	; 0x30
 8020742:	2b09      	cmp	r3, #9
 8020744:	d94e      	bls.n	80207e4 <_vfiprintf_r+0x1c4>
 8020746:	b1b0      	cbz	r0, 8020776 <_vfiprintf_r+0x156>
 8020748:	9207      	str	r2, [sp, #28]
 802074a:	e014      	b.n	8020776 <_vfiprintf_r+0x156>
 802074c:	eba0 0308 	sub.w	r3, r0, r8
 8020750:	fa09 f303 	lsl.w	r3, r9, r3
 8020754:	4313      	orrs	r3, r2
 8020756:	9304      	str	r3, [sp, #16]
 8020758:	46a2      	mov	sl, r4
 802075a:	e7d2      	b.n	8020702 <_vfiprintf_r+0xe2>
 802075c:	9b03      	ldr	r3, [sp, #12]
 802075e:	1d19      	adds	r1, r3, #4
 8020760:	681b      	ldr	r3, [r3, #0]
 8020762:	9103      	str	r1, [sp, #12]
 8020764:	2b00      	cmp	r3, #0
 8020766:	bfbb      	ittet	lt
 8020768:	425b      	neglt	r3, r3
 802076a:	f042 0202 	orrlt.w	r2, r2, #2
 802076e:	9307      	strge	r3, [sp, #28]
 8020770:	9307      	strlt	r3, [sp, #28]
 8020772:	bfb8      	it	lt
 8020774:	9204      	strlt	r2, [sp, #16]
 8020776:	7823      	ldrb	r3, [r4, #0]
 8020778:	2b2e      	cmp	r3, #46	; 0x2e
 802077a:	d10c      	bne.n	8020796 <_vfiprintf_r+0x176>
 802077c:	7863      	ldrb	r3, [r4, #1]
 802077e:	2b2a      	cmp	r3, #42	; 0x2a
 8020780:	d135      	bne.n	80207ee <_vfiprintf_r+0x1ce>
 8020782:	9b03      	ldr	r3, [sp, #12]
 8020784:	1d1a      	adds	r2, r3, #4
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	9203      	str	r2, [sp, #12]
 802078a:	2b00      	cmp	r3, #0
 802078c:	bfb8      	it	lt
 802078e:	f04f 33ff 	movlt.w	r3, #4294967295
 8020792:	3402      	adds	r4, #2
 8020794:	9305      	str	r3, [sp, #20]
 8020796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802087c <_vfiprintf_r+0x25c>
 802079a:	7821      	ldrb	r1, [r4, #0]
 802079c:	2203      	movs	r2, #3
 802079e:	4650      	mov	r0, sl
 80207a0:	f7df fd5e 	bl	8000260 <memchr>
 80207a4:	b140      	cbz	r0, 80207b8 <_vfiprintf_r+0x198>
 80207a6:	2340      	movs	r3, #64	; 0x40
 80207a8:	eba0 000a 	sub.w	r0, r0, sl
 80207ac:	fa03 f000 	lsl.w	r0, r3, r0
 80207b0:	9b04      	ldr	r3, [sp, #16]
 80207b2:	4303      	orrs	r3, r0
 80207b4:	3401      	adds	r4, #1
 80207b6:	9304      	str	r3, [sp, #16]
 80207b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80207bc:	482c      	ldr	r0, [pc, #176]	; (8020870 <_vfiprintf_r+0x250>)
 80207be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80207c2:	2206      	movs	r2, #6
 80207c4:	f7df fd4c 	bl	8000260 <memchr>
 80207c8:	2800      	cmp	r0, #0
 80207ca:	d03f      	beq.n	802084c <_vfiprintf_r+0x22c>
 80207cc:	4b29      	ldr	r3, [pc, #164]	; (8020874 <_vfiprintf_r+0x254>)
 80207ce:	bb1b      	cbnz	r3, 8020818 <_vfiprintf_r+0x1f8>
 80207d0:	9b03      	ldr	r3, [sp, #12]
 80207d2:	3307      	adds	r3, #7
 80207d4:	f023 0307 	bic.w	r3, r3, #7
 80207d8:	3308      	adds	r3, #8
 80207da:	9303      	str	r3, [sp, #12]
 80207dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207de:	443b      	add	r3, r7
 80207e0:	9309      	str	r3, [sp, #36]	; 0x24
 80207e2:	e767      	b.n	80206b4 <_vfiprintf_r+0x94>
 80207e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80207e8:	460c      	mov	r4, r1
 80207ea:	2001      	movs	r0, #1
 80207ec:	e7a5      	b.n	802073a <_vfiprintf_r+0x11a>
 80207ee:	2300      	movs	r3, #0
 80207f0:	3401      	adds	r4, #1
 80207f2:	9305      	str	r3, [sp, #20]
 80207f4:	4619      	mov	r1, r3
 80207f6:	f04f 0c0a 	mov.w	ip, #10
 80207fa:	4620      	mov	r0, r4
 80207fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020800:	3a30      	subs	r2, #48	; 0x30
 8020802:	2a09      	cmp	r2, #9
 8020804:	d903      	bls.n	802080e <_vfiprintf_r+0x1ee>
 8020806:	2b00      	cmp	r3, #0
 8020808:	d0c5      	beq.n	8020796 <_vfiprintf_r+0x176>
 802080a:	9105      	str	r1, [sp, #20]
 802080c:	e7c3      	b.n	8020796 <_vfiprintf_r+0x176>
 802080e:	fb0c 2101 	mla	r1, ip, r1, r2
 8020812:	4604      	mov	r4, r0
 8020814:	2301      	movs	r3, #1
 8020816:	e7f0      	b.n	80207fa <_vfiprintf_r+0x1da>
 8020818:	ab03      	add	r3, sp, #12
 802081a:	9300      	str	r3, [sp, #0]
 802081c:	462a      	mov	r2, r5
 802081e:	4b16      	ldr	r3, [pc, #88]	; (8020878 <_vfiprintf_r+0x258>)
 8020820:	a904      	add	r1, sp, #16
 8020822:	4630      	mov	r0, r6
 8020824:	f3af 8000 	nop.w
 8020828:	4607      	mov	r7, r0
 802082a:	1c78      	adds	r0, r7, #1
 802082c:	d1d6      	bne.n	80207dc <_vfiprintf_r+0x1bc>
 802082e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020830:	07d9      	lsls	r1, r3, #31
 8020832:	d405      	bmi.n	8020840 <_vfiprintf_r+0x220>
 8020834:	89ab      	ldrh	r3, [r5, #12]
 8020836:	059a      	lsls	r2, r3, #22
 8020838:	d402      	bmi.n	8020840 <_vfiprintf_r+0x220>
 802083a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802083c:	f7fd ff41 	bl	801e6c2 <__retarget_lock_release_recursive>
 8020840:	89ab      	ldrh	r3, [r5, #12]
 8020842:	065b      	lsls	r3, r3, #25
 8020844:	f53f af12 	bmi.w	802066c <_vfiprintf_r+0x4c>
 8020848:	9809      	ldr	r0, [sp, #36]	; 0x24
 802084a:	e711      	b.n	8020670 <_vfiprintf_r+0x50>
 802084c:	ab03      	add	r3, sp, #12
 802084e:	9300      	str	r3, [sp, #0]
 8020850:	462a      	mov	r2, r5
 8020852:	4b09      	ldr	r3, [pc, #36]	; (8020878 <_vfiprintf_r+0x258>)
 8020854:	a904      	add	r1, sp, #16
 8020856:	4630      	mov	r0, r6
 8020858:	f000 f880 	bl	802095c <_printf_i>
 802085c:	e7e4      	b.n	8020828 <_vfiprintf_r+0x208>
 802085e:	bf00      	nop
 8020860:	08026a00 	.word	0x08026a00
 8020864:	08026a20 	.word	0x08026a20
 8020868:	080269e0 	.word	0x080269e0
 802086c:	08026f7f 	.word	0x08026f7f
 8020870:	08026f89 	.word	0x08026f89
 8020874:	00000000 	.word	0x00000000
 8020878:	080205fb 	.word	0x080205fb
 802087c:	08026f85 	.word	0x08026f85

08020880 <_printf_common>:
 8020880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020884:	4616      	mov	r6, r2
 8020886:	4699      	mov	r9, r3
 8020888:	688a      	ldr	r2, [r1, #8]
 802088a:	690b      	ldr	r3, [r1, #16]
 802088c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020890:	4293      	cmp	r3, r2
 8020892:	bfb8      	it	lt
 8020894:	4613      	movlt	r3, r2
 8020896:	6033      	str	r3, [r6, #0]
 8020898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802089c:	4607      	mov	r7, r0
 802089e:	460c      	mov	r4, r1
 80208a0:	b10a      	cbz	r2, 80208a6 <_printf_common+0x26>
 80208a2:	3301      	adds	r3, #1
 80208a4:	6033      	str	r3, [r6, #0]
 80208a6:	6823      	ldr	r3, [r4, #0]
 80208a8:	0699      	lsls	r1, r3, #26
 80208aa:	bf42      	ittt	mi
 80208ac:	6833      	ldrmi	r3, [r6, #0]
 80208ae:	3302      	addmi	r3, #2
 80208b0:	6033      	strmi	r3, [r6, #0]
 80208b2:	6825      	ldr	r5, [r4, #0]
 80208b4:	f015 0506 	ands.w	r5, r5, #6
 80208b8:	d106      	bne.n	80208c8 <_printf_common+0x48>
 80208ba:	f104 0a19 	add.w	sl, r4, #25
 80208be:	68e3      	ldr	r3, [r4, #12]
 80208c0:	6832      	ldr	r2, [r6, #0]
 80208c2:	1a9b      	subs	r3, r3, r2
 80208c4:	42ab      	cmp	r3, r5
 80208c6:	dc26      	bgt.n	8020916 <_printf_common+0x96>
 80208c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80208cc:	1e13      	subs	r3, r2, #0
 80208ce:	6822      	ldr	r2, [r4, #0]
 80208d0:	bf18      	it	ne
 80208d2:	2301      	movne	r3, #1
 80208d4:	0692      	lsls	r2, r2, #26
 80208d6:	d42b      	bmi.n	8020930 <_printf_common+0xb0>
 80208d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80208dc:	4649      	mov	r1, r9
 80208de:	4638      	mov	r0, r7
 80208e0:	47c0      	blx	r8
 80208e2:	3001      	adds	r0, #1
 80208e4:	d01e      	beq.n	8020924 <_printf_common+0xa4>
 80208e6:	6823      	ldr	r3, [r4, #0]
 80208e8:	68e5      	ldr	r5, [r4, #12]
 80208ea:	6832      	ldr	r2, [r6, #0]
 80208ec:	f003 0306 	and.w	r3, r3, #6
 80208f0:	2b04      	cmp	r3, #4
 80208f2:	bf08      	it	eq
 80208f4:	1aad      	subeq	r5, r5, r2
 80208f6:	68a3      	ldr	r3, [r4, #8]
 80208f8:	6922      	ldr	r2, [r4, #16]
 80208fa:	bf0c      	ite	eq
 80208fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020900:	2500      	movne	r5, #0
 8020902:	4293      	cmp	r3, r2
 8020904:	bfc4      	itt	gt
 8020906:	1a9b      	subgt	r3, r3, r2
 8020908:	18ed      	addgt	r5, r5, r3
 802090a:	2600      	movs	r6, #0
 802090c:	341a      	adds	r4, #26
 802090e:	42b5      	cmp	r5, r6
 8020910:	d11a      	bne.n	8020948 <_printf_common+0xc8>
 8020912:	2000      	movs	r0, #0
 8020914:	e008      	b.n	8020928 <_printf_common+0xa8>
 8020916:	2301      	movs	r3, #1
 8020918:	4652      	mov	r2, sl
 802091a:	4649      	mov	r1, r9
 802091c:	4638      	mov	r0, r7
 802091e:	47c0      	blx	r8
 8020920:	3001      	adds	r0, #1
 8020922:	d103      	bne.n	802092c <_printf_common+0xac>
 8020924:	f04f 30ff 	mov.w	r0, #4294967295
 8020928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802092c:	3501      	adds	r5, #1
 802092e:	e7c6      	b.n	80208be <_printf_common+0x3e>
 8020930:	18e1      	adds	r1, r4, r3
 8020932:	1c5a      	adds	r2, r3, #1
 8020934:	2030      	movs	r0, #48	; 0x30
 8020936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802093a:	4422      	add	r2, r4
 802093c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020944:	3302      	adds	r3, #2
 8020946:	e7c7      	b.n	80208d8 <_printf_common+0x58>
 8020948:	2301      	movs	r3, #1
 802094a:	4622      	mov	r2, r4
 802094c:	4649      	mov	r1, r9
 802094e:	4638      	mov	r0, r7
 8020950:	47c0      	blx	r8
 8020952:	3001      	adds	r0, #1
 8020954:	d0e6      	beq.n	8020924 <_printf_common+0xa4>
 8020956:	3601      	adds	r6, #1
 8020958:	e7d9      	b.n	802090e <_printf_common+0x8e>
	...

0802095c <_printf_i>:
 802095c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020960:	460c      	mov	r4, r1
 8020962:	4691      	mov	r9, r2
 8020964:	7e27      	ldrb	r7, [r4, #24]
 8020966:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020968:	2f78      	cmp	r7, #120	; 0x78
 802096a:	4680      	mov	r8, r0
 802096c:	469a      	mov	sl, r3
 802096e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020972:	d807      	bhi.n	8020984 <_printf_i+0x28>
 8020974:	2f62      	cmp	r7, #98	; 0x62
 8020976:	d80a      	bhi.n	802098e <_printf_i+0x32>
 8020978:	2f00      	cmp	r7, #0
 802097a:	f000 80d8 	beq.w	8020b2e <_printf_i+0x1d2>
 802097e:	2f58      	cmp	r7, #88	; 0x58
 8020980:	f000 80a3 	beq.w	8020aca <_printf_i+0x16e>
 8020984:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802098c:	e03a      	b.n	8020a04 <_printf_i+0xa8>
 802098e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020992:	2b15      	cmp	r3, #21
 8020994:	d8f6      	bhi.n	8020984 <_printf_i+0x28>
 8020996:	a001      	add	r0, pc, #4	; (adr r0, 802099c <_printf_i+0x40>)
 8020998:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802099c:	080209f5 	.word	0x080209f5
 80209a0:	08020a09 	.word	0x08020a09
 80209a4:	08020985 	.word	0x08020985
 80209a8:	08020985 	.word	0x08020985
 80209ac:	08020985 	.word	0x08020985
 80209b0:	08020985 	.word	0x08020985
 80209b4:	08020a09 	.word	0x08020a09
 80209b8:	08020985 	.word	0x08020985
 80209bc:	08020985 	.word	0x08020985
 80209c0:	08020985 	.word	0x08020985
 80209c4:	08020985 	.word	0x08020985
 80209c8:	08020b15 	.word	0x08020b15
 80209cc:	08020a39 	.word	0x08020a39
 80209d0:	08020af7 	.word	0x08020af7
 80209d4:	08020985 	.word	0x08020985
 80209d8:	08020985 	.word	0x08020985
 80209dc:	08020b37 	.word	0x08020b37
 80209e0:	08020985 	.word	0x08020985
 80209e4:	08020a39 	.word	0x08020a39
 80209e8:	08020985 	.word	0x08020985
 80209ec:	08020985 	.word	0x08020985
 80209f0:	08020aff 	.word	0x08020aff
 80209f4:	680b      	ldr	r3, [r1, #0]
 80209f6:	1d1a      	adds	r2, r3, #4
 80209f8:	681b      	ldr	r3, [r3, #0]
 80209fa:	600a      	str	r2, [r1, #0]
 80209fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8020a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020a04:	2301      	movs	r3, #1
 8020a06:	e0a3      	b.n	8020b50 <_printf_i+0x1f4>
 8020a08:	6825      	ldr	r5, [r4, #0]
 8020a0a:	6808      	ldr	r0, [r1, #0]
 8020a0c:	062e      	lsls	r6, r5, #24
 8020a0e:	f100 0304 	add.w	r3, r0, #4
 8020a12:	d50a      	bpl.n	8020a2a <_printf_i+0xce>
 8020a14:	6805      	ldr	r5, [r0, #0]
 8020a16:	600b      	str	r3, [r1, #0]
 8020a18:	2d00      	cmp	r5, #0
 8020a1a:	da03      	bge.n	8020a24 <_printf_i+0xc8>
 8020a1c:	232d      	movs	r3, #45	; 0x2d
 8020a1e:	426d      	negs	r5, r5
 8020a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020a24:	485e      	ldr	r0, [pc, #376]	; (8020ba0 <_printf_i+0x244>)
 8020a26:	230a      	movs	r3, #10
 8020a28:	e019      	b.n	8020a5e <_printf_i+0x102>
 8020a2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020a2e:	6805      	ldr	r5, [r0, #0]
 8020a30:	600b      	str	r3, [r1, #0]
 8020a32:	bf18      	it	ne
 8020a34:	b22d      	sxthne	r5, r5
 8020a36:	e7ef      	b.n	8020a18 <_printf_i+0xbc>
 8020a38:	680b      	ldr	r3, [r1, #0]
 8020a3a:	6825      	ldr	r5, [r4, #0]
 8020a3c:	1d18      	adds	r0, r3, #4
 8020a3e:	6008      	str	r0, [r1, #0]
 8020a40:	0628      	lsls	r0, r5, #24
 8020a42:	d501      	bpl.n	8020a48 <_printf_i+0xec>
 8020a44:	681d      	ldr	r5, [r3, #0]
 8020a46:	e002      	b.n	8020a4e <_printf_i+0xf2>
 8020a48:	0669      	lsls	r1, r5, #25
 8020a4a:	d5fb      	bpl.n	8020a44 <_printf_i+0xe8>
 8020a4c:	881d      	ldrh	r5, [r3, #0]
 8020a4e:	4854      	ldr	r0, [pc, #336]	; (8020ba0 <_printf_i+0x244>)
 8020a50:	2f6f      	cmp	r7, #111	; 0x6f
 8020a52:	bf0c      	ite	eq
 8020a54:	2308      	moveq	r3, #8
 8020a56:	230a      	movne	r3, #10
 8020a58:	2100      	movs	r1, #0
 8020a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020a5e:	6866      	ldr	r6, [r4, #4]
 8020a60:	60a6      	str	r6, [r4, #8]
 8020a62:	2e00      	cmp	r6, #0
 8020a64:	bfa2      	ittt	ge
 8020a66:	6821      	ldrge	r1, [r4, #0]
 8020a68:	f021 0104 	bicge.w	r1, r1, #4
 8020a6c:	6021      	strge	r1, [r4, #0]
 8020a6e:	b90d      	cbnz	r5, 8020a74 <_printf_i+0x118>
 8020a70:	2e00      	cmp	r6, #0
 8020a72:	d04d      	beq.n	8020b10 <_printf_i+0x1b4>
 8020a74:	4616      	mov	r6, r2
 8020a76:	fbb5 f1f3 	udiv	r1, r5, r3
 8020a7a:	fb03 5711 	mls	r7, r3, r1, r5
 8020a7e:	5dc7      	ldrb	r7, [r0, r7]
 8020a80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020a84:	462f      	mov	r7, r5
 8020a86:	42bb      	cmp	r3, r7
 8020a88:	460d      	mov	r5, r1
 8020a8a:	d9f4      	bls.n	8020a76 <_printf_i+0x11a>
 8020a8c:	2b08      	cmp	r3, #8
 8020a8e:	d10b      	bne.n	8020aa8 <_printf_i+0x14c>
 8020a90:	6823      	ldr	r3, [r4, #0]
 8020a92:	07df      	lsls	r7, r3, #31
 8020a94:	d508      	bpl.n	8020aa8 <_printf_i+0x14c>
 8020a96:	6923      	ldr	r3, [r4, #16]
 8020a98:	6861      	ldr	r1, [r4, #4]
 8020a9a:	4299      	cmp	r1, r3
 8020a9c:	bfde      	ittt	le
 8020a9e:	2330      	movle	r3, #48	; 0x30
 8020aa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020aa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020aa8:	1b92      	subs	r2, r2, r6
 8020aaa:	6122      	str	r2, [r4, #16]
 8020aac:	f8cd a000 	str.w	sl, [sp]
 8020ab0:	464b      	mov	r3, r9
 8020ab2:	aa03      	add	r2, sp, #12
 8020ab4:	4621      	mov	r1, r4
 8020ab6:	4640      	mov	r0, r8
 8020ab8:	f7ff fee2 	bl	8020880 <_printf_common>
 8020abc:	3001      	adds	r0, #1
 8020abe:	d14c      	bne.n	8020b5a <_printf_i+0x1fe>
 8020ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8020ac4:	b004      	add	sp, #16
 8020ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aca:	4835      	ldr	r0, [pc, #212]	; (8020ba0 <_printf_i+0x244>)
 8020acc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020ad0:	6823      	ldr	r3, [r4, #0]
 8020ad2:	680e      	ldr	r6, [r1, #0]
 8020ad4:	061f      	lsls	r7, r3, #24
 8020ad6:	f856 5b04 	ldr.w	r5, [r6], #4
 8020ada:	600e      	str	r6, [r1, #0]
 8020adc:	d514      	bpl.n	8020b08 <_printf_i+0x1ac>
 8020ade:	07d9      	lsls	r1, r3, #31
 8020ae0:	bf44      	itt	mi
 8020ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8020ae6:	6023      	strmi	r3, [r4, #0]
 8020ae8:	b91d      	cbnz	r5, 8020af2 <_printf_i+0x196>
 8020aea:	6823      	ldr	r3, [r4, #0]
 8020aec:	f023 0320 	bic.w	r3, r3, #32
 8020af0:	6023      	str	r3, [r4, #0]
 8020af2:	2310      	movs	r3, #16
 8020af4:	e7b0      	b.n	8020a58 <_printf_i+0xfc>
 8020af6:	6823      	ldr	r3, [r4, #0]
 8020af8:	f043 0320 	orr.w	r3, r3, #32
 8020afc:	6023      	str	r3, [r4, #0]
 8020afe:	2378      	movs	r3, #120	; 0x78
 8020b00:	4828      	ldr	r0, [pc, #160]	; (8020ba4 <_printf_i+0x248>)
 8020b02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020b06:	e7e3      	b.n	8020ad0 <_printf_i+0x174>
 8020b08:	065e      	lsls	r6, r3, #25
 8020b0a:	bf48      	it	mi
 8020b0c:	b2ad      	uxthmi	r5, r5
 8020b0e:	e7e6      	b.n	8020ade <_printf_i+0x182>
 8020b10:	4616      	mov	r6, r2
 8020b12:	e7bb      	b.n	8020a8c <_printf_i+0x130>
 8020b14:	680b      	ldr	r3, [r1, #0]
 8020b16:	6826      	ldr	r6, [r4, #0]
 8020b18:	6960      	ldr	r0, [r4, #20]
 8020b1a:	1d1d      	adds	r5, r3, #4
 8020b1c:	600d      	str	r5, [r1, #0]
 8020b1e:	0635      	lsls	r5, r6, #24
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	d501      	bpl.n	8020b28 <_printf_i+0x1cc>
 8020b24:	6018      	str	r0, [r3, #0]
 8020b26:	e002      	b.n	8020b2e <_printf_i+0x1d2>
 8020b28:	0671      	lsls	r1, r6, #25
 8020b2a:	d5fb      	bpl.n	8020b24 <_printf_i+0x1c8>
 8020b2c:	8018      	strh	r0, [r3, #0]
 8020b2e:	2300      	movs	r3, #0
 8020b30:	6123      	str	r3, [r4, #16]
 8020b32:	4616      	mov	r6, r2
 8020b34:	e7ba      	b.n	8020aac <_printf_i+0x150>
 8020b36:	680b      	ldr	r3, [r1, #0]
 8020b38:	1d1a      	adds	r2, r3, #4
 8020b3a:	600a      	str	r2, [r1, #0]
 8020b3c:	681e      	ldr	r6, [r3, #0]
 8020b3e:	6862      	ldr	r2, [r4, #4]
 8020b40:	2100      	movs	r1, #0
 8020b42:	4630      	mov	r0, r6
 8020b44:	f7df fb8c 	bl	8000260 <memchr>
 8020b48:	b108      	cbz	r0, 8020b4e <_printf_i+0x1f2>
 8020b4a:	1b80      	subs	r0, r0, r6
 8020b4c:	6060      	str	r0, [r4, #4]
 8020b4e:	6863      	ldr	r3, [r4, #4]
 8020b50:	6123      	str	r3, [r4, #16]
 8020b52:	2300      	movs	r3, #0
 8020b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020b58:	e7a8      	b.n	8020aac <_printf_i+0x150>
 8020b5a:	6923      	ldr	r3, [r4, #16]
 8020b5c:	4632      	mov	r2, r6
 8020b5e:	4649      	mov	r1, r9
 8020b60:	4640      	mov	r0, r8
 8020b62:	47d0      	blx	sl
 8020b64:	3001      	adds	r0, #1
 8020b66:	d0ab      	beq.n	8020ac0 <_printf_i+0x164>
 8020b68:	6823      	ldr	r3, [r4, #0]
 8020b6a:	079b      	lsls	r3, r3, #30
 8020b6c:	d413      	bmi.n	8020b96 <_printf_i+0x23a>
 8020b6e:	68e0      	ldr	r0, [r4, #12]
 8020b70:	9b03      	ldr	r3, [sp, #12]
 8020b72:	4298      	cmp	r0, r3
 8020b74:	bfb8      	it	lt
 8020b76:	4618      	movlt	r0, r3
 8020b78:	e7a4      	b.n	8020ac4 <_printf_i+0x168>
 8020b7a:	2301      	movs	r3, #1
 8020b7c:	4632      	mov	r2, r6
 8020b7e:	4649      	mov	r1, r9
 8020b80:	4640      	mov	r0, r8
 8020b82:	47d0      	blx	sl
 8020b84:	3001      	adds	r0, #1
 8020b86:	d09b      	beq.n	8020ac0 <_printf_i+0x164>
 8020b88:	3501      	adds	r5, #1
 8020b8a:	68e3      	ldr	r3, [r4, #12]
 8020b8c:	9903      	ldr	r1, [sp, #12]
 8020b8e:	1a5b      	subs	r3, r3, r1
 8020b90:	42ab      	cmp	r3, r5
 8020b92:	dcf2      	bgt.n	8020b7a <_printf_i+0x21e>
 8020b94:	e7eb      	b.n	8020b6e <_printf_i+0x212>
 8020b96:	2500      	movs	r5, #0
 8020b98:	f104 0619 	add.w	r6, r4, #25
 8020b9c:	e7f5      	b.n	8020b8a <_printf_i+0x22e>
 8020b9e:	bf00      	nop
 8020ba0:	08026f90 	.word	0x08026f90
 8020ba4:	08026fa1 	.word	0x08026fa1

08020ba8 <_putc_r>:
 8020ba8:	b570      	push	{r4, r5, r6, lr}
 8020baa:	460d      	mov	r5, r1
 8020bac:	4614      	mov	r4, r2
 8020bae:	4606      	mov	r6, r0
 8020bb0:	b118      	cbz	r0, 8020bba <_putc_r+0x12>
 8020bb2:	6983      	ldr	r3, [r0, #24]
 8020bb4:	b90b      	cbnz	r3, 8020bba <_putc_r+0x12>
 8020bb6:	f7fd f9cf 	bl	801df58 <__sinit>
 8020bba:	4b1c      	ldr	r3, [pc, #112]	; (8020c2c <_putc_r+0x84>)
 8020bbc:	429c      	cmp	r4, r3
 8020bbe:	d124      	bne.n	8020c0a <_putc_r+0x62>
 8020bc0:	6874      	ldr	r4, [r6, #4]
 8020bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020bc4:	07d8      	lsls	r0, r3, #31
 8020bc6:	d405      	bmi.n	8020bd4 <_putc_r+0x2c>
 8020bc8:	89a3      	ldrh	r3, [r4, #12]
 8020bca:	0599      	lsls	r1, r3, #22
 8020bcc:	d402      	bmi.n	8020bd4 <_putc_r+0x2c>
 8020bce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020bd0:	f7fd fd75 	bl	801e6be <__retarget_lock_acquire_recursive>
 8020bd4:	68a3      	ldr	r3, [r4, #8]
 8020bd6:	3b01      	subs	r3, #1
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	60a3      	str	r3, [r4, #8]
 8020bdc:	da05      	bge.n	8020bea <_putc_r+0x42>
 8020bde:	69a2      	ldr	r2, [r4, #24]
 8020be0:	4293      	cmp	r3, r2
 8020be2:	db1c      	blt.n	8020c1e <_putc_r+0x76>
 8020be4:	b2eb      	uxtb	r3, r5
 8020be6:	2b0a      	cmp	r3, #10
 8020be8:	d019      	beq.n	8020c1e <_putc_r+0x76>
 8020bea:	6823      	ldr	r3, [r4, #0]
 8020bec:	1c5a      	adds	r2, r3, #1
 8020bee:	6022      	str	r2, [r4, #0]
 8020bf0:	701d      	strb	r5, [r3, #0]
 8020bf2:	b2ed      	uxtb	r5, r5
 8020bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020bf6:	07da      	lsls	r2, r3, #31
 8020bf8:	d405      	bmi.n	8020c06 <_putc_r+0x5e>
 8020bfa:	89a3      	ldrh	r3, [r4, #12]
 8020bfc:	059b      	lsls	r3, r3, #22
 8020bfe:	d402      	bmi.n	8020c06 <_putc_r+0x5e>
 8020c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c02:	f7fd fd5e 	bl	801e6c2 <__retarget_lock_release_recursive>
 8020c06:	4628      	mov	r0, r5
 8020c08:	bd70      	pop	{r4, r5, r6, pc}
 8020c0a:	4b09      	ldr	r3, [pc, #36]	; (8020c30 <_putc_r+0x88>)
 8020c0c:	429c      	cmp	r4, r3
 8020c0e:	d101      	bne.n	8020c14 <_putc_r+0x6c>
 8020c10:	68b4      	ldr	r4, [r6, #8]
 8020c12:	e7d6      	b.n	8020bc2 <_putc_r+0x1a>
 8020c14:	4b07      	ldr	r3, [pc, #28]	; (8020c34 <_putc_r+0x8c>)
 8020c16:	429c      	cmp	r4, r3
 8020c18:	bf08      	it	eq
 8020c1a:	68f4      	ldreq	r4, [r6, #12]
 8020c1c:	e7d1      	b.n	8020bc2 <_putc_r+0x1a>
 8020c1e:	4629      	mov	r1, r5
 8020c20:	4622      	mov	r2, r4
 8020c22:	4630      	mov	r0, r6
 8020c24:	f7ff f856 	bl	801fcd4 <__swbuf_r>
 8020c28:	4605      	mov	r5, r0
 8020c2a:	e7e3      	b.n	8020bf4 <_putc_r+0x4c>
 8020c2c:	08026a00 	.word	0x08026a00
 8020c30:	08026a20 	.word	0x08026a20
 8020c34:	080269e0 	.word	0x080269e0

08020c38 <_read_r>:
 8020c38:	b538      	push	{r3, r4, r5, lr}
 8020c3a:	4d07      	ldr	r5, [pc, #28]	; (8020c58 <_read_r+0x20>)
 8020c3c:	4604      	mov	r4, r0
 8020c3e:	4608      	mov	r0, r1
 8020c40:	4611      	mov	r1, r2
 8020c42:	2200      	movs	r2, #0
 8020c44:	602a      	str	r2, [r5, #0]
 8020c46:	461a      	mov	r2, r3
 8020c48:	f7e0 f8a5 	bl	8000d96 <_read>
 8020c4c:	1c43      	adds	r3, r0, #1
 8020c4e:	d102      	bne.n	8020c56 <_read_r+0x1e>
 8020c50:	682b      	ldr	r3, [r5, #0]
 8020c52:	b103      	cbz	r3, 8020c56 <_read_r+0x1e>
 8020c54:	6023      	str	r3, [r4, #0]
 8020c56:	bd38      	pop	{r3, r4, r5, pc}
 8020c58:	20000e30 	.word	0x20000e30

08020c5c <sniprintf>:
 8020c5c:	b40c      	push	{r2, r3}
 8020c5e:	b530      	push	{r4, r5, lr}
 8020c60:	4b17      	ldr	r3, [pc, #92]	; (8020cc0 <sniprintf+0x64>)
 8020c62:	1e0c      	subs	r4, r1, #0
 8020c64:	681d      	ldr	r5, [r3, #0]
 8020c66:	b09d      	sub	sp, #116	; 0x74
 8020c68:	da08      	bge.n	8020c7c <sniprintf+0x20>
 8020c6a:	238b      	movs	r3, #139	; 0x8b
 8020c6c:	602b      	str	r3, [r5, #0]
 8020c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8020c72:	b01d      	add	sp, #116	; 0x74
 8020c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020c78:	b002      	add	sp, #8
 8020c7a:	4770      	bx	lr
 8020c7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020c80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020c84:	bf14      	ite	ne
 8020c86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020c8a:	4623      	moveq	r3, r4
 8020c8c:	9304      	str	r3, [sp, #16]
 8020c8e:	9307      	str	r3, [sp, #28]
 8020c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020c94:	9002      	str	r0, [sp, #8]
 8020c96:	9006      	str	r0, [sp, #24]
 8020c98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020c9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020c9e:	ab21      	add	r3, sp, #132	; 0x84
 8020ca0:	a902      	add	r1, sp, #8
 8020ca2:	4628      	mov	r0, r5
 8020ca4:	9301      	str	r3, [sp, #4]
 8020ca6:	f7ff fb91 	bl	80203cc <_svfiprintf_r>
 8020caa:	1c43      	adds	r3, r0, #1
 8020cac:	bfbc      	itt	lt
 8020cae:	238b      	movlt	r3, #139	; 0x8b
 8020cb0:	602b      	strlt	r3, [r5, #0]
 8020cb2:	2c00      	cmp	r4, #0
 8020cb4:	d0dd      	beq.n	8020c72 <sniprintf+0x16>
 8020cb6:	9b02      	ldr	r3, [sp, #8]
 8020cb8:	2200      	movs	r2, #0
 8020cba:	701a      	strb	r2, [r3, #0]
 8020cbc:	e7d9      	b.n	8020c72 <sniprintf+0x16>
 8020cbe:	bf00      	nop
 8020cc0:	20000108 	.word	0x20000108

08020cc4 <siscanf>:
 8020cc4:	b40e      	push	{r1, r2, r3}
 8020cc6:	b510      	push	{r4, lr}
 8020cc8:	b09f      	sub	sp, #124	; 0x7c
 8020cca:	ac21      	add	r4, sp, #132	; 0x84
 8020ccc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020cd0:	f854 2b04 	ldr.w	r2, [r4], #4
 8020cd4:	9201      	str	r2, [sp, #4]
 8020cd6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020cda:	9004      	str	r0, [sp, #16]
 8020cdc:	9008      	str	r0, [sp, #32]
 8020cde:	f7df faad 	bl	800023c <strlen>
 8020ce2:	4b0c      	ldr	r3, [pc, #48]	; (8020d14 <siscanf+0x50>)
 8020ce4:	9005      	str	r0, [sp, #20]
 8020ce6:	9009      	str	r0, [sp, #36]	; 0x24
 8020ce8:	930d      	str	r3, [sp, #52]	; 0x34
 8020cea:	480b      	ldr	r0, [pc, #44]	; (8020d18 <siscanf+0x54>)
 8020cec:	9a01      	ldr	r2, [sp, #4]
 8020cee:	6800      	ldr	r0, [r0, #0]
 8020cf0:	9403      	str	r4, [sp, #12]
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	9311      	str	r3, [sp, #68]	; 0x44
 8020cf6:	9316      	str	r3, [sp, #88]	; 0x58
 8020cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020cfc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020d00:	a904      	add	r1, sp, #16
 8020d02:	4623      	mov	r3, r4
 8020d04:	f000 f8ba 	bl	8020e7c <__ssvfiscanf_r>
 8020d08:	b01f      	add	sp, #124	; 0x7c
 8020d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020d0e:	b003      	add	sp, #12
 8020d10:	4770      	bx	lr
 8020d12:	bf00      	nop
 8020d14:	0801eb93 	.word	0x0801eb93
 8020d18:	20000108 	.word	0x20000108

08020d1c <strcpy>:
 8020d1c:	4603      	mov	r3, r0
 8020d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d22:	f803 2b01 	strb.w	r2, [r3], #1
 8020d26:	2a00      	cmp	r2, #0
 8020d28:	d1f9      	bne.n	8020d1e <strcpy+0x2>
 8020d2a:	4770      	bx	lr

08020d2c <strncmp>:
 8020d2c:	b510      	push	{r4, lr}
 8020d2e:	b16a      	cbz	r2, 8020d4c <strncmp+0x20>
 8020d30:	3901      	subs	r1, #1
 8020d32:	1884      	adds	r4, r0, r2
 8020d34:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020d38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020d3c:	4293      	cmp	r3, r2
 8020d3e:	d103      	bne.n	8020d48 <strncmp+0x1c>
 8020d40:	42a0      	cmp	r0, r4
 8020d42:	d001      	beq.n	8020d48 <strncmp+0x1c>
 8020d44:	2b00      	cmp	r3, #0
 8020d46:	d1f5      	bne.n	8020d34 <strncmp+0x8>
 8020d48:	1a98      	subs	r0, r3, r2
 8020d4a:	bd10      	pop	{r4, pc}
 8020d4c:	4610      	mov	r0, r2
 8020d4e:	e7fc      	b.n	8020d4a <strncmp+0x1e>

08020d50 <__ascii_wctomb>:
 8020d50:	b149      	cbz	r1, 8020d66 <__ascii_wctomb+0x16>
 8020d52:	2aff      	cmp	r2, #255	; 0xff
 8020d54:	bf85      	ittet	hi
 8020d56:	238a      	movhi	r3, #138	; 0x8a
 8020d58:	6003      	strhi	r3, [r0, #0]
 8020d5a:	700a      	strbls	r2, [r1, #0]
 8020d5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8020d60:	bf98      	it	ls
 8020d62:	2001      	movls	r0, #1
 8020d64:	4770      	bx	lr
 8020d66:	4608      	mov	r0, r1
 8020d68:	4770      	bx	lr
	...

08020d6c <__env_lock>:
 8020d6c:	4801      	ldr	r0, [pc, #4]	; (8020d74 <__env_lock+0x8>)
 8020d6e:	f7fd bca6 	b.w	801e6be <__retarget_lock_acquire_recursive>
 8020d72:	bf00      	nop
 8020d74:	20000e26 	.word	0x20000e26

08020d78 <__env_unlock>:
 8020d78:	4801      	ldr	r0, [pc, #4]	; (8020d80 <__env_unlock+0x8>)
 8020d7a:	f7fd bca2 	b.w	801e6c2 <__retarget_lock_release_recursive>
 8020d7e:	bf00      	nop
 8020d80:	20000e26 	.word	0x20000e26

08020d84 <memmove>:
 8020d84:	4288      	cmp	r0, r1
 8020d86:	b510      	push	{r4, lr}
 8020d88:	eb01 0402 	add.w	r4, r1, r2
 8020d8c:	d902      	bls.n	8020d94 <memmove+0x10>
 8020d8e:	4284      	cmp	r4, r0
 8020d90:	4623      	mov	r3, r4
 8020d92:	d807      	bhi.n	8020da4 <memmove+0x20>
 8020d94:	1e43      	subs	r3, r0, #1
 8020d96:	42a1      	cmp	r1, r4
 8020d98:	d008      	beq.n	8020dac <memmove+0x28>
 8020d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020da2:	e7f8      	b.n	8020d96 <memmove+0x12>
 8020da4:	4402      	add	r2, r0
 8020da6:	4601      	mov	r1, r0
 8020da8:	428a      	cmp	r2, r1
 8020daa:	d100      	bne.n	8020dae <memmove+0x2a>
 8020dac:	bd10      	pop	{r4, pc}
 8020dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020db6:	e7f7      	b.n	8020da8 <memmove+0x24>

08020db8 <_malloc_usable_size_r>:
 8020db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020dbc:	1f18      	subs	r0, r3, #4
 8020dbe:	2b00      	cmp	r3, #0
 8020dc0:	bfbc      	itt	lt
 8020dc2:	580b      	ldrlt	r3, [r1, r0]
 8020dc4:	18c0      	addlt	r0, r0, r3
 8020dc6:	4770      	bx	lr

08020dc8 <_sungetc_r>:
 8020dc8:	b538      	push	{r3, r4, r5, lr}
 8020dca:	1c4b      	adds	r3, r1, #1
 8020dcc:	4614      	mov	r4, r2
 8020dce:	d103      	bne.n	8020dd8 <_sungetc_r+0x10>
 8020dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8020dd4:	4628      	mov	r0, r5
 8020dd6:	bd38      	pop	{r3, r4, r5, pc}
 8020dd8:	8993      	ldrh	r3, [r2, #12]
 8020dda:	f023 0320 	bic.w	r3, r3, #32
 8020dde:	8193      	strh	r3, [r2, #12]
 8020de0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020de2:	6852      	ldr	r2, [r2, #4]
 8020de4:	b2cd      	uxtb	r5, r1
 8020de6:	b18b      	cbz	r3, 8020e0c <_sungetc_r+0x44>
 8020de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020dea:	4293      	cmp	r3, r2
 8020dec:	dd08      	ble.n	8020e00 <_sungetc_r+0x38>
 8020dee:	6823      	ldr	r3, [r4, #0]
 8020df0:	1e5a      	subs	r2, r3, #1
 8020df2:	6022      	str	r2, [r4, #0]
 8020df4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020df8:	6863      	ldr	r3, [r4, #4]
 8020dfa:	3301      	adds	r3, #1
 8020dfc:	6063      	str	r3, [r4, #4]
 8020dfe:	e7e9      	b.n	8020dd4 <_sungetc_r+0xc>
 8020e00:	4621      	mov	r1, r4
 8020e02:	f000 fbbf 	bl	8021584 <__submore>
 8020e06:	2800      	cmp	r0, #0
 8020e08:	d0f1      	beq.n	8020dee <_sungetc_r+0x26>
 8020e0a:	e7e1      	b.n	8020dd0 <_sungetc_r+0x8>
 8020e0c:	6921      	ldr	r1, [r4, #16]
 8020e0e:	6823      	ldr	r3, [r4, #0]
 8020e10:	b151      	cbz	r1, 8020e28 <_sungetc_r+0x60>
 8020e12:	4299      	cmp	r1, r3
 8020e14:	d208      	bcs.n	8020e28 <_sungetc_r+0x60>
 8020e16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020e1a:	42a9      	cmp	r1, r5
 8020e1c:	d104      	bne.n	8020e28 <_sungetc_r+0x60>
 8020e1e:	3b01      	subs	r3, #1
 8020e20:	3201      	adds	r2, #1
 8020e22:	6023      	str	r3, [r4, #0]
 8020e24:	6062      	str	r2, [r4, #4]
 8020e26:	e7d5      	b.n	8020dd4 <_sungetc_r+0xc>
 8020e28:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e30:	6363      	str	r3, [r4, #52]	; 0x34
 8020e32:	2303      	movs	r3, #3
 8020e34:	63a3      	str	r3, [r4, #56]	; 0x38
 8020e36:	4623      	mov	r3, r4
 8020e38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020e3c:	6023      	str	r3, [r4, #0]
 8020e3e:	2301      	movs	r3, #1
 8020e40:	e7dc      	b.n	8020dfc <_sungetc_r+0x34>

08020e42 <__ssrefill_r>:
 8020e42:	b510      	push	{r4, lr}
 8020e44:	460c      	mov	r4, r1
 8020e46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020e48:	b169      	cbz	r1, 8020e66 <__ssrefill_r+0x24>
 8020e4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e4e:	4299      	cmp	r1, r3
 8020e50:	d001      	beq.n	8020e56 <__ssrefill_r+0x14>
 8020e52:	f7fd fcd1 	bl	801e7f8 <_free_r>
 8020e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020e58:	6063      	str	r3, [r4, #4]
 8020e5a:	2000      	movs	r0, #0
 8020e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8020e5e:	b113      	cbz	r3, 8020e66 <__ssrefill_r+0x24>
 8020e60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020e62:	6023      	str	r3, [r4, #0]
 8020e64:	bd10      	pop	{r4, pc}
 8020e66:	6923      	ldr	r3, [r4, #16]
 8020e68:	6023      	str	r3, [r4, #0]
 8020e6a:	2300      	movs	r3, #0
 8020e6c:	6063      	str	r3, [r4, #4]
 8020e6e:	89a3      	ldrh	r3, [r4, #12]
 8020e70:	f043 0320 	orr.w	r3, r3, #32
 8020e74:	81a3      	strh	r3, [r4, #12]
 8020e76:	f04f 30ff 	mov.w	r0, #4294967295
 8020e7a:	e7f3      	b.n	8020e64 <__ssrefill_r+0x22>

08020e7c <__ssvfiscanf_r>:
 8020e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e80:	460c      	mov	r4, r1
 8020e82:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8020e86:	2100      	movs	r1, #0
 8020e88:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020e8c:	49b2      	ldr	r1, [pc, #712]	; (8021158 <__ssvfiscanf_r+0x2dc>)
 8020e8e:	91a0      	str	r1, [sp, #640]	; 0x280
 8020e90:	f10d 0804 	add.w	r8, sp, #4
 8020e94:	49b1      	ldr	r1, [pc, #708]	; (802115c <__ssvfiscanf_r+0x2e0>)
 8020e96:	4fb2      	ldr	r7, [pc, #712]	; (8021160 <__ssvfiscanf_r+0x2e4>)
 8020e98:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8021164 <__ssvfiscanf_r+0x2e8>
 8020e9c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020ea0:	4606      	mov	r6, r0
 8020ea2:	91a1      	str	r1, [sp, #644]	; 0x284
 8020ea4:	9300      	str	r3, [sp, #0]
 8020ea6:	f892 a000 	ldrb.w	sl, [r2]
 8020eaa:	f1ba 0f00 	cmp.w	sl, #0
 8020eae:	f000 8151 	beq.w	8021154 <__ssvfiscanf_r+0x2d8>
 8020eb2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8020eb6:	f013 0308 	ands.w	r3, r3, #8
 8020eba:	f102 0501 	add.w	r5, r2, #1
 8020ebe:	d019      	beq.n	8020ef4 <__ssvfiscanf_r+0x78>
 8020ec0:	6863      	ldr	r3, [r4, #4]
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	dd0f      	ble.n	8020ee6 <__ssvfiscanf_r+0x6a>
 8020ec6:	6823      	ldr	r3, [r4, #0]
 8020ec8:	781a      	ldrb	r2, [r3, #0]
 8020eca:	5cba      	ldrb	r2, [r7, r2]
 8020ecc:	0712      	lsls	r2, r2, #28
 8020ece:	d401      	bmi.n	8020ed4 <__ssvfiscanf_r+0x58>
 8020ed0:	462a      	mov	r2, r5
 8020ed2:	e7e8      	b.n	8020ea6 <__ssvfiscanf_r+0x2a>
 8020ed4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020ed6:	3201      	adds	r2, #1
 8020ed8:	9245      	str	r2, [sp, #276]	; 0x114
 8020eda:	6862      	ldr	r2, [r4, #4]
 8020edc:	3301      	adds	r3, #1
 8020ede:	3a01      	subs	r2, #1
 8020ee0:	6062      	str	r2, [r4, #4]
 8020ee2:	6023      	str	r3, [r4, #0]
 8020ee4:	e7ec      	b.n	8020ec0 <__ssvfiscanf_r+0x44>
 8020ee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020ee8:	4621      	mov	r1, r4
 8020eea:	4630      	mov	r0, r6
 8020eec:	4798      	blx	r3
 8020eee:	2800      	cmp	r0, #0
 8020ef0:	d0e9      	beq.n	8020ec6 <__ssvfiscanf_r+0x4a>
 8020ef2:	e7ed      	b.n	8020ed0 <__ssvfiscanf_r+0x54>
 8020ef4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020ef8:	f040 8083 	bne.w	8021002 <__ssvfiscanf_r+0x186>
 8020efc:	9341      	str	r3, [sp, #260]	; 0x104
 8020efe:	9343      	str	r3, [sp, #268]	; 0x10c
 8020f00:	7853      	ldrb	r3, [r2, #1]
 8020f02:	2b2a      	cmp	r3, #42	; 0x2a
 8020f04:	bf02      	ittt	eq
 8020f06:	2310      	moveq	r3, #16
 8020f08:	1c95      	addeq	r5, r2, #2
 8020f0a:	9341      	streq	r3, [sp, #260]	; 0x104
 8020f0c:	220a      	movs	r2, #10
 8020f0e:	46ab      	mov	fp, r5
 8020f10:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8020f14:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020f18:	2b09      	cmp	r3, #9
 8020f1a:	d91d      	bls.n	8020f58 <__ssvfiscanf_r+0xdc>
 8020f1c:	4891      	ldr	r0, [pc, #580]	; (8021164 <__ssvfiscanf_r+0x2e8>)
 8020f1e:	2203      	movs	r2, #3
 8020f20:	f7df f99e 	bl	8000260 <memchr>
 8020f24:	b140      	cbz	r0, 8020f38 <__ssvfiscanf_r+0xbc>
 8020f26:	2301      	movs	r3, #1
 8020f28:	eba0 0009 	sub.w	r0, r0, r9
 8020f2c:	fa03 f000 	lsl.w	r0, r3, r0
 8020f30:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020f32:	4318      	orrs	r0, r3
 8020f34:	9041      	str	r0, [sp, #260]	; 0x104
 8020f36:	465d      	mov	r5, fp
 8020f38:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020f3c:	2b78      	cmp	r3, #120	; 0x78
 8020f3e:	d806      	bhi.n	8020f4e <__ssvfiscanf_r+0xd2>
 8020f40:	2b57      	cmp	r3, #87	; 0x57
 8020f42:	d810      	bhi.n	8020f66 <__ssvfiscanf_r+0xea>
 8020f44:	2b25      	cmp	r3, #37	; 0x25
 8020f46:	d05c      	beq.n	8021002 <__ssvfiscanf_r+0x186>
 8020f48:	d856      	bhi.n	8020ff8 <__ssvfiscanf_r+0x17c>
 8020f4a:	2b00      	cmp	r3, #0
 8020f4c:	d074      	beq.n	8021038 <__ssvfiscanf_r+0x1bc>
 8020f4e:	2303      	movs	r3, #3
 8020f50:	9347      	str	r3, [sp, #284]	; 0x11c
 8020f52:	230a      	movs	r3, #10
 8020f54:	9342      	str	r3, [sp, #264]	; 0x108
 8020f56:	e081      	b.n	802105c <__ssvfiscanf_r+0x1e0>
 8020f58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020f5a:	fb02 1303 	mla	r3, r2, r3, r1
 8020f5e:	3b30      	subs	r3, #48	; 0x30
 8020f60:	9343      	str	r3, [sp, #268]	; 0x10c
 8020f62:	465d      	mov	r5, fp
 8020f64:	e7d3      	b.n	8020f0e <__ssvfiscanf_r+0x92>
 8020f66:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020f6a:	2a20      	cmp	r2, #32
 8020f6c:	d8ef      	bhi.n	8020f4e <__ssvfiscanf_r+0xd2>
 8020f6e:	a101      	add	r1, pc, #4	; (adr r1, 8020f74 <__ssvfiscanf_r+0xf8>)
 8020f70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020f74:	08021047 	.word	0x08021047
 8020f78:	08020f4f 	.word	0x08020f4f
 8020f7c:	08020f4f 	.word	0x08020f4f
 8020f80:	080210a5 	.word	0x080210a5
 8020f84:	08020f4f 	.word	0x08020f4f
 8020f88:	08020f4f 	.word	0x08020f4f
 8020f8c:	08020f4f 	.word	0x08020f4f
 8020f90:	08020f4f 	.word	0x08020f4f
 8020f94:	08020f4f 	.word	0x08020f4f
 8020f98:	08020f4f 	.word	0x08020f4f
 8020f9c:	08020f4f 	.word	0x08020f4f
 8020fa0:	080210bb 	.word	0x080210bb
 8020fa4:	08021091 	.word	0x08021091
 8020fa8:	08020fff 	.word	0x08020fff
 8020fac:	08020fff 	.word	0x08020fff
 8020fb0:	08020fff 	.word	0x08020fff
 8020fb4:	08020f4f 	.word	0x08020f4f
 8020fb8:	08021095 	.word	0x08021095
 8020fbc:	08020f4f 	.word	0x08020f4f
 8020fc0:	08020f4f 	.word	0x08020f4f
 8020fc4:	08020f4f 	.word	0x08020f4f
 8020fc8:	08020f4f 	.word	0x08020f4f
 8020fcc:	080210cb 	.word	0x080210cb
 8020fd0:	0802109d 	.word	0x0802109d
 8020fd4:	0802103f 	.word	0x0802103f
 8020fd8:	08020f4f 	.word	0x08020f4f
 8020fdc:	08020f4f 	.word	0x08020f4f
 8020fe0:	080210c7 	.word	0x080210c7
 8020fe4:	08020f4f 	.word	0x08020f4f
 8020fe8:	08021091 	.word	0x08021091
 8020fec:	08020f4f 	.word	0x08020f4f
 8020ff0:	08020f4f 	.word	0x08020f4f
 8020ff4:	08021047 	.word	0x08021047
 8020ff8:	3b45      	subs	r3, #69	; 0x45
 8020ffa:	2b02      	cmp	r3, #2
 8020ffc:	d8a7      	bhi.n	8020f4e <__ssvfiscanf_r+0xd2>
 8020ffe:	2305      	movs	r3, #5
 8021000:	e02b      	b.n	802105a <__ssvfiscanf_r+0x1de>
 8021002:	6863      	ldr	r3, [r4, #4]
 8021004:	2b00      	cmp	r3, #0
 8021006:	dd0d      	ble.n	8021024 <__ssvfiscanf_r+0x1a8>
 8021008:	6823      	ldr	r3, [r4, #0]
 802100a:	781a      	ldrb	r2, [r3, #0]
 802100c:	4552      	cmp	r2, sl
 802100e:	f040 80a1 	bne.w	8021154 <__ssvfiscanf_r+0x2d8>
 8021012:	3301      	adds	r3, #1
 8021014:	6862      	ldr	r2, [r4, #4]
 8021016:	6023      	str	r3, [r4, #0]
 8021018:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802101a:	3a01      	subs	r2, #1
 802101c:	3301      	adds	r3, #1
 802101e:	6062      	str	r2, [r4, #4]
 8021020:	9345      	str	r3, [sp, #276]	; 0x114
 8021022:	e755      	b.n	8020ed0 <__ssvfiscanf_r+0x54>
 8021024:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021026:	4621      	mov	r1, r4
 8021028:	4630      	mov	r0, r6
 802102a:	4798      	blx	r3
 802102c:	2800      	cmp	r0, #0
 802102e:	d0eb      	beq.n	8021008 <__ssvfiscanf_r+0x18c>
 8021030:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021032:	2800      	cmp	r0, #0
 8021034:	f040 8084 	bne.w	8021140 <__ssvfiscanf_r+0x2c4>
 8021038:	f04f 30ff 	mov.w	r0, #4294967295
 802103c:	e086      	b.n	802114c <__ssvfiscanf_r+0x2d0>
 802103e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021040:	f042 0220 	orr.w	r2, r2, #32
 8021044:	9241      	str	r2, [sp, #260]	; 0x104
 8021046:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802104c:	9241      	str	r2, [sp, #260]	; 0x104
 802104e:	2210      	movs	r2, #16
 8021050:	2b6f      	cmp	r3, #111	; 0x6f
 8021052:	9242      	str	r2, [sp, #264]	; 0x108
 8021054:	bf34      	ite	cc
 8021056:	2303      	movcc	r3, #3
 8021058:	2304      	movcs	r3, #4
 802105a:	9347      	str	r3, [sp, #284]	; 0x11c
 802105c:	6863      	ldr	r3, [r4, #4]
 802105e:	2b00      	cmp	r3, #0
 8021060:	dd41      	ble.n	80210e6 <__ssvfiscanf_r+0x26a>
 8021062:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021064:	0659      	lsls	r1, r3, #25
 8021066:	d404      	bmi.n	8021072 <__ssvfiscanf_r+0x1f6>
 8021068:	6823      	ldr	r3, [r4, #0]
 802106a:	781a      	ldrb	r2, [r3, #0]
 802106c:	5cba      	ldrb	r2, [r7, r2]
 802106e:	0712      	lsls	r2, r2, #28
 8021070:	d440      	bmi.n	80210f4 <__ssvfiscanf_r+0x278>
 8021072:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8021074:	2b02      	cmp	r3, #2
 8021076:	dc4f      	bgt.n	8021118 <__ssvfiscanf_r+0x29c>
 8021078:	466b      	mov	r3, sp
 802107a:	4622      	mov	r2, r4
 802107c:	a941      	add	r1, sp, #260	; 0x104
 802107e:	4630      	mov	r0, r6
 8021080:	f000 f874 	bl	802116c <_scanf_chars>
 8021084:	2801      	cmp	r0, #1
 8021086:	d065      	beq.n	8021154 <__ssvfiscanf_r+0x2d8>
 8021088:	2802      	cmp	r0, #2
 802108a:	f47f af21 	bne.w	8020ed0 <__ssvfiscanf_r+0x54>
 802108e:	e7cf      	b.n	8021030 <__ssvfiscanf_r+0x1b4>
 8021090:	220a      	movs	r2, #10
 8021092:	e7dd      	b.n	8021050 <__ssvfiscanf_r+0x1d4>
 8021094:	2300      	movs	r3, #0
 8021096:	9342      	str	r3, [sp, #264]	; 0x108
 8021098:	2303      	movs	r3, #3
 802109a:	e7de      	b.n	802105a <__ssvfiscanf_r+0x1de>
 802109c:	2308      	movs	r3, #8
 802109e:	9342      	str	r3, [sp, #264]	; 0x108
 80210a0:	2304      	movs	r3, #4
 80210a2:	e7da      	b.n	802105a <__ssvfiscanf_r+0x1de>
 80210a4:	4629      	mov	r1, r5
 80210a6:	4640      	mov	r0, r8
 80210a8:	f000 f9ac 	bl	8021404 <__sccl>
 80210ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80210ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80210b2:	9341      	str	r3, [sp, #260]	; 0x104
 80210b4:	4605      	mov	r5, r0
 80210b6:	2301      	movs	r3, #1
 80210b8:	e7cf      	b.n	802105a <__ssvfiscanf_r+0x1de>
 80210ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80210bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80210c0:	9341      	str	r3, [sp, #260]	; 0x104
 80210c2:	2300      	movs	r3, #0
 80210c4:	e7c9      	b.n	802105a <__ssvfiscanf_r+0x1de>
 80210c6:	2302      	movs	r3, #2
 80210c8:	e7c7      	b.n	802105a <__ssvfiscanf_r+0x1de>
 80210ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80210cc:	06c3      	lsls	r3, r0, #27
 80210ce:	f53f aeff 	bmi.w	8020ed0 <__ssvfiscanf_r+0x54>
 80210d2:	9b00      	ldr	r3, [sp, #0]
 80210d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80210d6:	1d19      	adds	r1, r3, #4
 80210d8:	9100      	str	r1, [sp, #0]
 80210da:	681b      	ldr	r3, [r3, #0]
 80210dc:	07c0      	lsls	r0, r0, #31
 80210de:	bf4c      	ite	mi
 80210e0:	801a      	strhmi	r2, [r3, #0]
 80210e2:	601a      	strpl	r2, [r3, #0]
 80210e4:	e6f4      	b.n	8020ed0 <__ssvfiscanf_r+0x54>
 80210e6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80210e8:	4621      	mov	r1, r4
 80210ea:	4630      	mov	r0, r6
 80210ec:	4798      	blx	r3
 80210ee:	2800      	cmp	r0, #0
 80210f0:	d0b7      	beq.n	8021062 <__ssvfiscanf_r+0x1e6>
 80210f2:	e79d      	b.n	8021030 <__ssvfiscanf_r+0x1b4>
 80210f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80210f6:	3201      	adds	r2, #1
 80210f8:	9245      	str	r2, [sp, #276]	; 0x114
 80210fa:	6862      	ldr	r2, [r4, #4]
 80210fc:	3a01      	subs	r2, #1
 80210fe:	2a00      	cmp	r2, #0
 8021100:	6062      	str	r2, [r4, #4]
 8021102:	dd02      	ble.n	802110a <__ssvfiscanf_r+0x28e>
 8021104:	3301      	adds	r3, #1
 8021106:	6023      	str	r3, [r4, #0]
 8021108:	e7ae      	b.n	8021068 <__ssvfiscanf_r+0x1ec>
 802110a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802110c:	4621      	mov	r1, r4
 802110e:	4630      	mov	r0, r6
 8021110:	4798      	blx	r3
 8021112:	2800      	cmp	r0, #0
 8021114:	d0a8      	beq.n	8021068 <__ssvfiscanf_r+0x1ec>
 8021116:	e78b      	b.n	8021030 <__ssvfiscanf_r+0x1b4>
 8021118:	2b04      	cmp	r3, #4
 802111a:	dc06      	bgt.n	802112a <__ssvfiscanf_r+0x2ae>
 802111c:	466b      	mov	r3, sp
 802111e:	4622      	mov	r2, r4
 8021120:	a941      	add	r1, sp, #260	; 0x104
 8021122:	4630      	mov	r0, r6
 8021124:	f000 f87a 	bl	802121c <_scanf_i>
 8021128:	e7ac      	b.n	8021084 <__ssvfiscanf_r+0x208>
 802112a:	4b0f      	ldr	r3, [pc, #60]	; (8021168 <__ssvfiscanf_r+0x2ec>)
 802112c:	2b00      	cmp	r3, #0
 802112e:	f43f aecf 	beq.w	8020ed0 <__ssvfiscanf_r+0x54>
 8021132:	466b      	mov	r3, sp
 8021134:	4622      	mov	r2, r4
 8021136:	a941      	add	r1, sp, #260	; 0x104
 8021138:	4630      	mov	r0, r6
 802113a:	f3af 8000 	nop.w
 802113e:	e7a1      	b.n	8021084 <__ssvfiscanf_r+0x208>
 8021140:	89a3      	ldrh	r3, [r4, #12]
 8021142:	f013 0f40 	tst.w	r3, #64	; 0x40
 8021146:	bf18      	it	ne
 8021148:	f04f 30ff 	movne.w	r0, #4294967295
 802114c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8021150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021154:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021156:	e7f9      	b.n	802114c <__ssvfiscanf_r+0x2d0>
 8021158:	08020dc9 	.word	0x08020dc9
 802115c:	08020e43 	.word	0x08020e43
 8021160:	08026e75 	.word	0x08026e75
 8021164:	08026f85 	.word	0x08026f85
 8021168:	00000000 	.word	0x00000000

0802116c <_scanf_chars>:
 802116c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021170:	4615      	mov	r5, r2
 8021172:	688a      	ldr	r2, [r1, #8]
 8021174:	4680      	mov	r8, r0
 8021176:	460c      	mov	r4, r1
 8021178:	b932      	cbnz	r2, 8021188 <_scanf_chars+0x1c>
 802117a:	698a      	ldr	r2, [r1, #24]
 802117c:	2a00      	cmp	r2, #0
 802117e:	bf0c      	ite	eq
 8021180:	2201      	moveq	r2, #1
 8021182:	f04f 32ff 	movne.w	r2, #4294967295
 8021186:	608a      	str	r2, [r1, #8]
 8021188:	6822      	ldr	r2, [r4, #0]
 802118a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8021218 <_scanf_chars+0xac>
 802118e:	06d1      	lsls	r1, r2, #27
 8021190:	bf5f      	itttt	pl
 8021192:	681a      	ldrpl	r2, [r3, #0]
 8021194:	1d11      	addpl	r1, r2, #4
 8021196:	6019      	strpl	r1, [r3, #0]
 8021198:	6816      	ldrpl	r6, [r2, #0]
 802119a:	2700      	movs	r7, #0
 802119c:	69a0      	ldr	r0, [r4, #24]
 802119e:	b188      	cbz	r0, 80211c4 <_scanf_chars+0x58>
 80211a0:	2801      	cmp	r0, #1
 80211a2:	d107      	bne.n	80211b4 <_scanf_chars+0x48>
 80211a4:	682b      	ldr	r3, [r5, #0]
 80211a6:	781a      	ldrb	r2, [r3, #0]
 80211a8:	6963      	ldr	r3, [r4, #20]
 80211aa:	5c9b      	ldrb	r3, [r3, r2]
 80211ac:	b953      	cbnz	r3, 80211c4 <_scanf_chars+0x58>
 80211ae:	bb27      	cbnz	r7, 80211fa <_scanf_chars+0x8e>
 80211b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80211b4:	2802      	cmp	r0, #2
 80211b6:	d120      	bne.n	80211fa <_scanf_chars+0x8e>
 80211b8:	682b      	ldr	r3, [r5, #0]
 80211ba:	781b      	ldrb	r3, [r3, #0]
 80211bc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80211c0:	071b      	lsls	r3, r3, #28
 80211c2:	d41a      	bmi.n	80211fa <_scanf_chars+0x8e>
 80211c4:	6823      	ldr	r3, [r4, #0]
 80211c6:	06da      	lsls	r2, r3, #27
 80211c8:	bf5e      	ittt	pl
 80211ca:	682b      	ldrpl	r3, [r5, #0]
 80211cc:	781b      	ldrbpl	r3, [r3, #0]
 80211ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 80211d2:	682a      	ldr	r2, [r5, #0]
 80211d4:	686b      	ldr	r3, [r5, #4]
 80211d6:	3201      	adds	r2, #1
 80211d8:	602a      	str	r2, [r5, #0]
 80211da:	68a2      	ldr	r2, [r4, #8]
 80211dc:	3b01      	subs	r3, #1
 80211de:	3a01      	subs	r2, #1
 80211e0:	606b      	str	r3, [r5, #4]
 80211e2:	3701      	adds	r7, #1
 80211e4:	60a2      	str	r2, [r4, #8]
 80211e6:	b142      	cbz	r2, 80211fa <_scanf_chars+0x8e>
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	dcd7      	bgt.n	802119c <_scanf_chars+0x30>
 80211ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80211f0:	4629      	mov	r1, r5
 80211f2:	4640      	mov	r0, r8
 80211f4:	4798      	blx	r3
 80211f6:	2800      	cmp	r0, #0
 80211f8:	d0d0      	beq.n	802119c <_scanf_chars+0x30>
 80211fa:	6823      	ldr	r3, [r4, #0]
 80211fc:	f013 0310 	ands.w	r3, r3, #16
 8021200:	d105      	bne.n	802120e <_scanf_chars+0xa2>
 8021202:	68e2      	ldr	r2, [r4, #12]
 8021204:	3201      	adds	r2, #1
 8021206:	60e2      	str	r2, [r4, #12]
 8021208:	69a2      	ldr	r2, [r4, #24]
 802120a:	b102      	cbz	r2, 802120e <_scanf_chars+0xa2>
 802120c:	7033      	strb	r3, [r6, #0]
 802120e:	6923      	ldr	r3, [r4, #16]
 8021210:	441f      	add	r7, r3
 8021212:	6127      	str	r7, [r4, #16]
 8021214:	2000      	movs	r0, #0
 8021216:	e7cb      	b.n	80211b0 <_scanf_chars+0x44>
 8021218:	08026e75 	.word	0x08026e75

0802121c <_scanf_i>:
 802121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021220:	4698      	mov	r8, r3
 8021222:	4b74      	ldr	r3, [pc, #464]	; (80213f4 <_scanf_i+0x1d8>)
 8021224:	460c      	mov	r4, r1
 8021226:	4682      	mov	sl, r0
 8021228:	4616      	mov	r6, r2
 802122a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802122e:	b087      	sub	sp, #28
 8021230:	ab03      	add	r3, sp, #12
 8021232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021236:	4b70      	ldr	r3, [pc, #448]	; (80213f8 <_scanf_i+0x1dc>)
 8021238:	69a1      	ldr	r1, [r4, #24]
 802123a:	4a70      	ldr	r2, [pc, #448]	; (80213fc <_scanf_i+0x1e0>)
 802123c:	2903      	cmp	r1, #3
 802123e:	bf18      	it	ne
 8021240:	461a      	movne	r2, r3
 8021242:	68a3      	ldr	r3, [r4, #8]
 8021244:	9201      	str	r2, [sp, #4]
 8021246:	1e5a      	subs	r2, r3, #1
 8021248:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802124c:	bf88      	it	hi
 802124e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8021252:	4627      	mov	r7, r4
 8021254:	bf82      	ittt	hi
 8021256:	eb03 0905 	addhi.w	r9, r3, r5
 802125a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802125e:	60a3      	strhi	r3, [r4, #8]
 8021260:	f857 3b1c 	ldr.w	r3, [r7], #28
 8021264:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8021268:	bf98      	it	ls
 802126a:	f04f 0900 	movls.w	r9, #0
 802126e:	6023      	str	r3, [r4, #0]
 8021270:	463d      	mov	r5, r7
 8021272:	f04f 0b00 	mov.w	fp, #0
 8021276:	6831      	ldr	r1, [r6, #0]
 8021278:	ab03      	add	r3, sp, #12
 802127a:	7809      	ldrb	r1, [r1, #0]
 802127c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8021280:	2202      	movs	r2, #2
 8021282:	f7de ffed 	bl	8000260 <memchr>
 8021286:	b328      	cbz	r0, 80212d4 <_scanf_i+0xb8>
 8021288:	f1bb 0f01 	cmp.w	fp, #1
 802128c:	d159      	bne.n	8021342 <_scanf_i+0x126>
 802128e:	6862      	ldr	r2, [r4, #4]
 8021290:	b92a      	cbnz	r2, 802129e <_scanf_i+0x82>
 8021292:	6822      	ldr	r2, [r4, #0]
 8021294:	2308      	movs	r3, #8
 8021296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802129a:	6063      	str	r3, [r4, #4]
 802129c:	6022      	str	r2, [r4, #0]
 802129e:	6822      	ldr	r2, [r4, #0]
 80212a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80212a4:	6022      	str	r2, [r4, #0]
 80212a6:	68a2      	ldr	r2, [r4, #8]
 80212a8:	1e51      	subs	r1, r2, #1
 80212aa:	60a1      	str	r1, [r4, #8]
 80212ac:	b192      	cbz	r2, 80212d4 <_scanf_i+0xb8>
 80212ae:	6832      	ldr	r2, [r6, #0]
 80212b0:	1c51      	adds	r1, r2, #1
 80212b2:	6031      	str	r1, [r6, #0]
 80212b4:	7812      	ldrb	r2, [r2, #0]
 80212b6:	f805 2b01 	strb.w	r2, [r5], #1
 80212ba:	6872      	ldr	r2, [r6, #4]
 80212bc:	3a01      	subs	r2, #1
 80212be:	2a00      	cmp	r2, #0
 80212c0:	6072      	str	r2, [r6, #4]
 80212c2:	dc07      	bgt.n	80212d4 <_scanf_i+0xb8>
 80212c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80212c8:	4631      	mov	r1, r6
 80212ca:	4650      	mov	r0, sl
 80212cc:	4790      	blx	r2
 80212ce:	2800      	cmp	r0, #0
 80212d0:	f040 8085 	bne.w	80213de <_scanf_i+0x1c2>
 80212d4:	f10b 0b01 	add.w	fp, fp, #1
 80212d8:	f1bb 0f03 	cmp.w	fp, #3
 80212dc:	d1cb      	bne.n	8021276 <_scanf_i+0x5a>
 80212de:	6863      	ldr	r3, [r4, #4]
 80212e0:	b90b      	cbnz	r3, 80212e6 <_scanf_i+0xca>
 80212e2:	230a      	movs	r3, #10
 80212e4:	6063      	str	r3, [r4, #4]
 80212e6:	6863      	ldr	r3, [r4, #4]
 80212e8:	4945      	ldr	r1, [pc, #276]	; (8021400 <_scanf_i+0x1e4>)
 80212ea:	6960      	ldr	r0, [r4, #20]
 80212ec:	1ac9      	subs	r1, r1, r3
 80212ee:	f000 f889 	bl	8021404 <__sccl>
 80212f2:	f04f 0b00 	mov.w	fp, #0
 80212f6:	68a3      	ldr	r3, [r4, #8]
 80212f8:	6822      	ldr	r2, [r4, #0]
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d03d      	beq.n	802137a <_scanf_i+0x15e>
 80212fe:	6831      	ldr	r1, [r6, #0]
 8021300:	6960      	ldr	r0, [r4, #20]
 8021302:	f891 c000 	ldrb.w	ip, [r1]
 8021306:	f810 000c 	ldrb.w	r0, [r0, ip]
 802130a:	2800      	cmp	r0, #0
 802130c:	d035      	beq.n	802137a <_scanf_i+0x15e>
 802130e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8021312:	d124      	bne.n	802135e <_scanf_i+0x142>
 8021314:	0510      	lsls	r0, r2, #20
 8021316:	d522      	bpl.n	802135e <_scanf_i+0x142>
 8021318:	f10b 0b01 	add.w	fp, fp, #1
 802131c:	f1b9 0f00 	cmp.w	r9, #0
 8021320:	d003      	beq.n	802132a <_scanf_i+0x10e>
 8021322:	3301      	adds	r3, #1
 8021324:	f109 39ff 	add.w	r9, r9, #4294967295
 8021328:	60a3      	str	r3, [r4, #8]
 802132a:	6873      	ldr	r3, [r6, #4]
 802132c:	3b01      	subs	r3, #1
 802132e:	2b00      	cmp	r3, #0
 8021330:	6073      	str	r3, [r6, #4]
 8021332:	dd1b      	ble.n	802136c <_scanf_i+0x150>
 8021334:	6833      	ldr	r3, [r6, #0]
 8021336:	3301      	adds	r3, #1
 8021338:	6033      	str	r3, [r6, #0]
 802133a:	68a3      	ldr	r3, [r4, #8]
 802133c:	3b01      	subs	r3, #1
 802133e:	60a3      	str	r3, [r4, #8]
 8021340:	e7d9      	b.n	80212f6 <_scanf_i+0xda>
 8021342:	f1bb 0f02 	cmp.w	fp, #2
 8021346:	d1ae      	bne.n	80212a6 <_scanf_i+0x8a>
 8021348:	6822      	ldr	r2, [r4, #0]
 802134a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802134e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021352:	d1bf      	bne.n	80212d4 <_scanf_i+0xb8>
 8021354:	2310      	movs	r3, #16
 8021356:	6063      	str	r3, [r4, #4]
 8021358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802135c:	e7a2      	b.n	80212a4 <_scanf_i+0x88>
 802135e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8021362:	6022      	str	r2, [r4, #0]
 8021364:	780b      	ldrb	r3, [r1, #0]
 8021366:	f805 3b01 	strb.w	r3, [r5], #1
 802136a:	e7de      	b.n	802132a <_scanf_i+0x10e>
 802136c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021370:	4631      	mov	r1, r6
 8021372:	4650      	mov	r0, sl
 8021374:	4798      	blx	r3
 8021376:	2800      	cmp	r0, #0
 8021378:	d0df      	beq.n	802133a <_scanf_i+0x11e>
 802137a:	6823      	ldr	r3, [r4, #0]
 802137c:	05d9      	lsls	r1, r3, #23
 802137e:	d50d      	bpl.n	802139c <_scanf_i+0x180>
 8021380:	42bd      	cmp	r5, r7
 8021382:	d909      	bls.n	8021398 <_scanf_i+0x17c>
 8021384:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8021388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802138c:	4632      	mov	r2, r6
 802138e:	4650      	mov	r0, sl
 8021390:	4798      	blx	r3
 8021392:	f105 39ff 	add.w	r9, r5, #4294967295
 8021396:	464d      	mov	r5, r9
 8021398:	42bd      	cmp	r5, r7
 802139a:	d028      	beq.n	80213ee <_scanf_i+0x1d2>
 802139c:	6822      	ldr	r2, [r4, #0]
 802139e:	f012 0210 	ands.w	r2, r2, #16
 80213a2:	d113      	bne.n	80213cc <_scanf_i+0x1b0>
 80213a4:	702a      	strb	r2, [r5, #0]
 80213a6:	6863      	ldr	r3, [r4, #4]
 80213a8:	9e01      	ldr	r6, [sp, #4]
 80213aa:	4639      	mov	r1, r7
 80213ac:	4650      	mov	r0, sl
 80213ae:	47b0      	blx	r6
 80213b0:	f8d8 3000 	ldr.w	r3, [r8]
 80213b4:	6821      	ldr	r1, [r4, #0]
 80213b6:	1d1a      	adds	r2, r3, #4
 80213b8:	f8c8 2000 	str.w	r2, [r8]
 80213bc:	f011 0f20 	tst.w	r1, #32
 80213c0:	681b      	ldr	r3, [r3, #0]
 80213c2:	d00f      	beq.n	80213e4 <_scanf_i+0x1c8>
 80213c4:	6018      	str	r0, [r3, #0]
 80213c6:	68e3      	ldr	r3, [r4, #12]
 80213c8:	3301      	adds	r3, #1
 80213ca:	60e3      	str	r3, [r4, #12]
 80213cc:	1bed      	subs	r5, r5, r7
 80213ce:	44ab      	add	fp, r5
 80213d0:	6925      	ldr	r5, [r4, #16]
 80213d2:	445d      	add	r5, fp
 80213d4:	6125      	str	r5, [r4, #16]
 80213d6:	2000      	movs	r0, #0
 80213d8:	b007      	add	sp, #28
 80213da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213de:	f04f 0b00 	mov.w	fp, #0
 80213e2:	e7ca      	b.n	802137a <_scanf_i+0x15e>
 80213e4:	07ca      	lsls	r2, r1, #31
 80213e6:	bf4c      	ite	mi
 80213e8:	8018      	strhmi	r0, [r3, #0]
 80213ea:	6018      	strpl	r0, [r3, #0]
 80213ec:	e7eb      	b.n	80213c6 <_scanf_i+0x1aa>
 80213ee:	2001      	movs	r0, #1
 80213f0:	e7f2      	b.n	80213d8 <_scanf_i+0x1bc>
 80213f2:	bf00      	nop
 80213f4:	08024700 	.word	0x08024700
 80213f8:	0801f7dd 	.word	0x0801f7dd
 80213fc:	08021581 	.word	0x08021581
 8021400:	08026fcb 	.word	0x08026fcb

08021404 <__sccl>:
 8021404:	b570      	push	{r4, r5, r6, lr}
 8021406:	780b      	ldrb	r3, [r1, #0]
 8021408:	4604      	mov	r4, r0
 802140a:	2b5e      	cmp	r3, #94	; 0x5e
 802140c:	bf0b      	itete	eq
 802140e:	784b      	ldrbeq	r3, [r1, #1]
 8021410:	1c48      	addne	r0, r1, #1
 8021412:	1c88      	addeq	r0, r1, #2
 8021414:	2200      	movne	r2, #0
 8021416:	bf08      	it	eq
 8021418:	2201      	moveq	r2, #1
 802141a:	1e61      	subs	r1, r4, #1
 802141c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021420:	f801 2f01 	strb.w	r2, [r1, #1]!
 8021424:	42a9      	cmp	r1, r5
 8021426:	d1fb      	bne.n	8021420 <__sccl+0x1c>
 8021428:	b90b      	cbnz	r3, 802142e <__sccl+0x2a>
 802142a:	3801      	subs	r0, #1
 802142c:	bd70      	pop	{r4, r5, r6, pc}
 802142e:	f082 0101 	eor.w	r1, r2, #1
 8021432:	54e1      	strb	r1, [r4, r3]
 8021434:	1c42      	adds	r2, r0, #1
 8021436:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802143a:	2d2d      	cmp	r5, #45	; 0x2d
 802143c:	f102 36ff 	add.w	r6, r2, #4294967295
 8021440:	4610      	mov	r0, r2
 8021442:	d006      	beq.n	8021452 <__sccl+0x4e>
 8021444:	2d5d      	cmp	r5, #93	; 0x5d
 8021446:	d0f1      	beq.n	802142c <__sccl+0x28>
 8021448:	b90d      	cbnz	r5, 802144e <__sccl+0x4a>
 802144a:	4630      	mov	r0, r6
 802144c:	e7ee      	b.n	802142c <__sccl+0x28>
 802144e:	462b      	mov	r3, r5
 8021450:	e7ef      	b.n	8021432 <__sccl+0x2e>
 8021452:	7816      	ldrb	r6, [r2, #0]
 8021454:	2e5d      	cmp	r6, #93	; 0x5d
 8021456:	d0fa      	beq.n	802144e <__sccl+0x4a>
 8021458:	42b3      	cmp	r3, r6
 802145a:	dcf8      	bgt.n	802144e <__sccl+0x4a>
 802145c:	4618      	mov	r0, r3
 802145e:	3001      	adds	r0, #1
 8021460:	4286      	cmp	r6, r0
 8021462:	5421      	strb	r1, [r4, r0]
 8021464:	dcfb      	bgt.n	802145e <__sccl+0x5a>
 8021466:	43d8      	mvns	r0, r3
 8021468:	4430      	add	r0, r6
 802146a:	1c5d      	adds	r5, r3, #1
 802146c:	42b3      	cmp	r3, r6
 802146e:	bfa8      	it	ge
 8021470:	2000      	movge	r0, #0
 8021472:	182b      	adds	r3, r5, r0
 8021474:	3202      	adds	r2, #2
 8021476:	e7de      	b.n	8021436 <__sccl+0x32>

08021478 <_strtol_l.isra.0>:
 8021478:	2b01      	cmp	r3, #1
 802147a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802147e:	d001      	beq.n	8021484 <_strtol_l.isra.0+0xc>
 8021480:	2b24      	cmp	r3, #36	; 0x24
 8021482:	d906      	bls.n	8021492 <_strtol_l.isra.0+0x1a>
 8021484:	f7fc fbc2 	bl	801dc0c <__errno>
 8021488:	2316      	movs	r3, #22
 802148a:	6003      	str	r3, [r0, #0]
 802148c:	2000      	movs	r0, #0
 802148e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021492:	4f3a      	ldr	r7, [pc, #232]	; (802157c <_strtol_l.isra.0+0x104>)
 8021494:	468e      	mov	lr, r1
 8021496:	4676      	mov	r6, lr
 8021498:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802149c:	5de5      	ldrb	r5, [r4, r7]
 802149e:	f015 0508 	ands.w	r5, r5, #8
 80214a2:	d1f8      	bne.n	8021496 <_strtol_l.isra.0+0x1e>
 80214a4:	2c2d      	cmp	r4, #45	; 0x2d
 80214a6:	d134      	bne.n	8021512 <_strtol_l.isra.0+0x9a>
 80214a8:	f89e 4000 	ldrb.w	r4, [lr]
 80214ac:	f04f 0801 	mov.w	r8, #1
 80214b0:	f106 0e02 	add.w	lr, r6, #2
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	d05c      	beq.n	8021572 <_strtol_l.isra.0+0xfa>
 80214b8:	2b10      	cmp	r3, #16
 80214ba:	d10c      	bne.n	80214d6 <_strtol_l.isra.0+0x5e>
 80214bc:	2c30      	cmp	r4, #48	; 0x30
 80214be:	d10a      	bne.n	80214d6 <_strtol_l.isra.0+0x5e>
 80214c0:	f89e 4000 	ldrb.w	r4, [lr]
 80214c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80214c8:	2c58      	cmp	r4, #88	; 0x58
 80214ca:	d14d      	bne.n	8021568 <_strtol_l.isra.0+0xf0>
 80214cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80214d0:	2310      	movs	r3, #16
 80214d2:	f10e 0e02 	add.w	lr, lr, #2
 80214d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80214da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80214de:	2600      	movs	r6, #0
 80214e0:	fbbc f9f3 	udiv	r9, ip, r3
 80214e4:	4635      	mov	r5, r6
 80214e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80214ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80214ee:	2f09      	cmp	r7, #9
 80214f0:	d818      	bhi.n	8021524 <_strtol_l.isra.0+0xac>
 80214f2:	463c      	mov	r4, r7
 80214f4:	42a3      	cmp	r3, r4
 80214f6:	dd24      	ble.n	8021542 <_strtol_l.isra.0+0xca>
 80214f8:	2e00      	cmp	r6, #0
 80214fa:	db1f      	blt.n	802153c <_strtol_l.isra.0+0xc4>
 80214fc:	45a9      	cmp	r9, r5
 80214fe:	d31d      	bcc.n	802153c <_strtol_l.isra.0+0xc4>
 8021500:	d101      	bne.n	8021506 <_strtol_l.isra.0+0x8e>
 8021502:	45a2      	cmp	sl, r4
 8021504:	db1a      	blt.n	802153c <_strtol_l.isra.0+0xc4>
 8021506:	fb05 4503 	mla	r5, r5, r3, r4
 802150a:	2601      	movs	r6, #1
 802150c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021510:	e7eb      	b.n	80214ea <_strtol_l.isra.0+0x72>
 8021512:	2c2b      	cmp	r4, #43	; 0x2b
 8021514:	bf08      	it	eq
 8021516:	f89e 4000 	ldrbeq.w	r4, [lr]
 802151a:	46a8      	mov	r8, r5
 802151c:	bf08      	it	eq
 802151e:	f106 0e02 	addeq.w	lr, r6, #2
 8021522:	e7c7      	b.n	80214b4 <_strtol_l.isra.0+0x3c>
 8021524:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021528:	2f19      	cmp	r7, #25
 802152a:	d801      	bhi.n	8021530 <_strtol_l.isra.0+0xb8>
 802152c:	3c37      	subs	r4, #55	; 0x37
 802152e:	e7e1      	b.n	80214f4 <_strtol_l.isra.0+0x7c>
 8021530:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021534:	2f19      	cmp	r7, #25
 8021536:	d804      	bhi.n	8021542 <_strtol_l.isra.0+0xca>
 8021538:	3c57      	subs	r4, #87	; 0x57
 802153a:	e7db      	b.n	80214f4 <_strtol_l.isra.0+0x7c>
 802153c:	f04f 36ff 	mov.w	r6, #4294967295
 8021540:	e7e4      	b.n	802150c <_strtol_l.isra.0+0x94>
 8021542:	2e00      	cmp	r6, #0
 8021544:	da05      	bge.n	8021552 <_strtol_l.isra.0+0xda>
 8021546:	2322      	movs	r3, #34	; 0x22
 8021548:	6003      	str	r3, [r0, #0]
 802154a:	4665      	mov	r5, ip
 802154c:	b942      	cbnz	r2, 8021560 <_strtol_l.isra.0+0xe8>
 802154e:	4628      	mov	r0, r5
 8021550:	e79d      	b.n	802148e <_strtol_l.isra.0+0x16>
 8021552:	f1b8 0f00 	cmp.w	r8, #0
 8021556:	d000      	beq.n	802155a <_strtol_l.isra.0+0xe2>
 8021558:	426d      	negs	r5, r5
 802155a:	2a00      	cmp	r2, #0
 802155c:	d0f7      	beq.n	802154e <_strtol_l.isra.0+0xd6>
 802155e:	b10e      	cbz	r6, 8021564 <_strtol_l.isra.0+0xec>
 8021560:	f10e 31ff 	add.w	r1, lr, #4294967295
 8021564:	6011      	str	r1, [r2, #0]
 8021566:	e7f2      	b.n	802154e <_strtol_l.isra.0+0xd6>
 8021568:	2430      	movs	r4, #48	; 0x30
 802156a:	2b00      	cmp	r3, #0
 802156c:	d1b3      	bne.n	80214d6 <_strtol_l.isra.0+0x5e>
 802156e:	2308      	movs	r3, #8
 8021570:	e7b1      	b.n	80214d6 <_strtol_l.isra.0+0x5e>
 8021572:	2c30      	cmp	r4, #48	; 0x30
 8021574:	d0a4      	beq.n	80214c0 <_strtol_l.isra.0+0x48>
 8021576:	230a      	movs	r3, #10
 8021578:	e7ad      	b.n	80214d6 <_strtol_l.isra.0+0x5e>
 802157a:	bf00      	nop
 802157c:	08026e75 	.word	0x08026e75

08021580 <_strtol_r>:
 8021580:	f7ff bf7a 	b.w	8021478 <_strtol_l.isra.0>

08021584 <__submore>:
 8021584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021588:	460c      	mov	r4, r1
 802158a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802158c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021590:	4299      	cmp	r1, r3
 8021592:	d11d      	bne.n	80215d0 <__submore+0x4c>
 8021594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021598:	f7fd f97e 	bl	801e898 <_malloc_r>
 802159c:	b918      	cbnz	r0, 80215a6 <__submore+0x22>
 802159e:	f04f 30ff 	mov.w	r0, #4294967295
 80215a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80215aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80215ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80215b0:	6360      	str	r0, [r4, #52]	; 0x34
 80215b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80215b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80215ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80215be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80215c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80215c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80215ca:	6020      	str	r0, [r4, #0]
 80215cc:	2000      	movs	r0, #0
 80215ce:	e7e8      	b.n	80215a2 <__submore+0x1e>
 80215d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80215d2:	0077      	lsls	r7, r6, #1
 80215d4:	463a      	mov	r2, r7
 80215d6:	f7fe fe77 	bl	80202c8 <_realloc_r>
 80215da:	4605      	mov	r5, r0
 80215dc:	2800      	cmp	r0, #0
 80215de:	d0de      	beq.n	802159e <__submore+0x1a>
 80215e0:	eb00 0806 	add.w	r8, r0, r6
 80215e4:	4601      	mov	r1, r0
 80215e6:	4632      	mov	r2, r6
 80215e8:	4640      	mov	r0, r8
 80215ea:	f7fd f8df 	bl	801e7ac <memcpy>
 80215ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80215f2:	f8c4 8000 	str.w	r8, [r4]
 80215f6:	e7e9      	b.n	80215cc <__submore+0x48>

080215f8 <_init>:
 80215f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215fa:	bf00      	nop
 80215fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80215fe:	bc08      	pop	{r3}
 8021600:	469e      	mov	lr, r3
 8021602:	4770      	bx	lr

08021604 <_fini>:
 8021604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021606:	bf00      	nop
 8021608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802160a:	bc08      	pop	{r3}
 802160c:	469e      	mov	lr, r3
 802160e:	4770      	bx	lr

08021610 <__time_veneer>:
 8021610:	e51ff004 	ldr	pc, [pc, #-4]	; 8021614 <__time_veneer+0x4>
 8021614:	200005bc 	.word	0x200005bc
