
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ab8  08015f70  08015f70  00025f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a28  08019a28  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08019a28  08019a28  00029a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a30  08019a30  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08019a30  08019a30  00029a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08019a3c  08019a3c  00029a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08019a48  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000334  08019d7c  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc0  08019d7c  00030cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b489  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009463  00000000  00000000  0007b7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dc8  00000000  00000000  00084c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c08  00000000  00000000  00087a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8e0  00000000  00000000  0008a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d8f  00000000  00000000  000b6f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001025c3  00000000  00000000  000d8c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001db252  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e110  00000000  00000000  001db2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001e93b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001e93dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000334 	.word	0x20000334
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015f58 	.word	0x08015f58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000338 	.word	0x20000338
 800021c:	08015f58 	.word	0x08015f58

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003fc 	.word	0x200003fc

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f011 fbea 	bl	8012544 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f011 fb42 	bl	8012544 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000354 	.word	0x20000354
 8000ef4:	20000cc0 	.word	0x20000cc0

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f011 ff19 	bl	8012d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fdf3 	bl	8003b38 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000f60:	08019a48 	.word	0x08019a48
  ldr r2, =_sbss
 8000f64:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000f68:	20000cc0 	.word	0x20000cc0

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000cac 	.word	0x20000cac
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000cac 	.word	0x20000cac

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08018258 	.word	0x08018258
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08018268 	.word	0x08018268

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08018268 	.word	0x08018268

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08018270 	.word	0x08018270
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	08018288 	.word	0x08018288
 8003904:	08018290 	.word	0x08018290

08003908 <ESP_Init>:
int ESP_Init(void (*UART_Transmit)(uint8_t*),
			 uint8_t (*UART_Receive)(void),
			 void (*UART_ISR)(void),
			 void (*UART_TX_IT_Enable)(void),
			 uint32_t (*getTick)(void))
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01c      	beq.n	8003956 <ESP_Init+0x4e>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d019      	beq.n	8003956 <ESP_Init+0x4e>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d016      	beq.n	8003956 <ESP_Init+0x4e>
	   UART_ISR	!= NULL				&&
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d013      	beq.n	8003956 <ESP_Init+0x4e>
	   UART_TX_IT_Enable != NULL	&&
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <ESP_Init+0x4e>
	   getTick != NULL)
	{
		ESP8266.UART_ISR 			= UART_ISR;
 8003934:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <ESP_Init+0x60>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]
		ESP8266.UART_Receive 		= UART_Receive;
 800393a:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <ESP_Init+0x60>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	6053      	str	r3, [r2, #4]
		ESP8266.UART_TX_IT_Enable 	= UART_TX_IT_Enable;
 8003940:	4a09      	ldr	r2, [pc, #36]	; (8003968 <ESP_Init+0x60>)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	60d3      	str	r3, [r2, #12]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <ESP_Init+0x60>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 800394c:	4a06      	ldr	r2, [pc, #24]	; (8003968 <ESP_Init+0x60>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6113      	str	r3, [r2, #16]
		return 1;
 8003952:	2301      	movs	r3, #1
 8003954:	e001      	b.n	800395a <ESP_Init+0x52>
	}
	else
	{
		return -1;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000358 	.word	0x20000358

0800396c <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003974:	2010      	movs	r0, #16
 8003976:	f00f fba5 	bl	80130c4 <malloc>
 800397a:	4603      	mov	r3, r0
 800397c:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003984:	2300      	movs	r3, #0
 8003986:	e017      	b.n	80039b8 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 800399a:	2101      	movs	r1, #1
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f00e fdc9 	bl	8012534 <calloc>
 80039a2:	4603      	mov	r3, r0
 80039a4:	461a      	mov	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <ringBuffer_init+0x4c>
		}

	return rBuf;
 80039b6:	68fb      	ldr	r3, [r7, #12]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4618      	mov	r0, r3
 80039dc:	f00f fb7a 	bl	80130d4 <free>
		}
		free(buffer);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f00f fb77 	bl	80130d4 <free>
	}
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d00c      	beq.n	8003a22 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003a20:	e009      	b.n	8003a36 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d00d      	beq.n	8003a74 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	605a      	str	r2, [r3, #4]
		return data;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	e00a      	b.n	8003a8a <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]
		return data;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68d8      	ldr	r0, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	f00f fb29 	bl	8013100 <memset>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e00a      	b.n	8003adc <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	4413      	add	r3, r2
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff8c 	bl	80039ee <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	6838      	ldr	r0, [r7, #0]
 8003ade:	f7fc fbad 	bl	800023c <strlen>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d8ed      	bhi.n	8003ac6 <ringBuffer_pushArray+0x10>
}
 8003aea:	bf00      	nop
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	6839      	ldr	r1, [r7, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f010 fa51 	bl	8013fac <strstr>
 8003b0a:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <ringBuffer_lookFor+0x22>
		return 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003b16:	2300      	movs	r3, #0

}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b3e:	f7fd fa16 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b42:	f000 f81d 	bl	8003b80 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b46:	f000 f951 	bl	8003dec <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003b4a:	f000 f891 	bl	8003c70 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003b4e:	f000 f8ed 	bl	8003d2c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <main+0x44>)
 8003b54:	463b      	mov	r3, r7
 8003b56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b5a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003b5e:	463b      	mov	r3, r7
 8003b60:	4619      	mov	r1, r3
 8003b62:	2002      	movs	r0, #2
 8003b64:	f001 fc5e 	bl	8005424 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003b68:	2120      	movs	r1, #32
 8003b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b6e:	f7fd fdfb 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003b72:	2064      	movs	r0, #100	; 0x64
 8003b74:	f7fd fa6c 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003b78:	e7f6      	b.n	8003b68 <main+0x30>
 8003b7a:	bf00      	nop
 8003b7c:	08015f78 	.word	0x08015f78

08003b80 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b0a8      	sub	sp, #160	; 0xa0
 8003b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b8a:	2238      	movs	r2, #56	; 0x38
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f00f fab6 	bl	8013100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
 8003ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	2254      	movs	r2, #84	; 0x54
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f00f faa8 	bl	8013100 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f7fd fe17 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bbe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bc0:	2340      	movs	r3, #64	; 0x40
 8003bc2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003bd6:	2355      	movs	r3, #85	; 0x55
 8003bd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003be2:	2302      	movs	r3, #2
 8003be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003be8:	2302      	movs	r3, #2
 8003bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd feaa 	bl	800194c <HAL_RCC_OscConfig>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003c08:	f000 f960 	bl	8003ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c0c:	230f      	movs	r3, #15
 8003c0e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c10:	2303      	movs	r3, #3
 8003c12:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c14:	2300      	movs	r3, #0
 8003c16:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c24:	2104      	movs	r1, #4
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe f9a8 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003c3c:	f000 f946 	bl	8003ecc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003c40:	2321      	movs	r3, #33	; 0x21
 8003c42:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c44:	2300      	movs	r3, #0
 8003c46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fbb0 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf14      	ite	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	2300      	moveq	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003c64:	f000 f932 	bl	8003ecc <Error_Handler>
  }
}
 8003c68:	bf00      	nop
 8003c6a:	37a0      	adds	r7, #160	; 0xa0
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c76:	4a2c      	ldr	r2, [pc, #176]	; (8003d28 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003c78:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003c7a:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c80:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c82:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003c8e:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c96:	220c      	movs	r2, #12
 8003c98:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ca0:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003cb2:	481c      	ldr	r0, [pc, #112]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cb4:	f7fe fdca 	bl	800284c <HAL_UART_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003cc8:	f000 f900 	bl	8003ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4815      	ldr	r0, [pc, #84]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cd0:	f7ff fd50 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003ce4:	f000 f8f2 	bl	8003ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ce8:	2100      	movs	r1, #0
 8003cea:	480e      	ldr	r0, [pc, #56]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003cec:	f7ff fd80 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bf14      	ite	ne
 8003cf6:	2301      	movne	r3, #1
 8003cf8:	2300      	moveq	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003d00:	f000 f8e4 	bl	8003ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003d04:	4807      	ldr	r0, [pc, #28]	; (8003d24 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d06:	f7ff fcfc 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf14      	ite	ne
 8003d10:	2301      	movne	r3, #1
 8003d12:	2300      	moveq	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003d1a:	f000 f8d7 	bl	8003ecc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	2000036c 	.word	0x2000036c
 8003d28:	40008000 	.word	0x40008000

08003d2c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d30:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d32:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d36:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d3e:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d52:	220c      	movs	r2, #12
 8003d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d56:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d68:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d74:	481b      	ldr	r0, [pc, #108]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d76:	f7fe fd69 	bl	800284c <HAL_UART_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003d8a:	f000 f89f 	bl	8003ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4814      	ldr	r0, [pc, #80]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003d92:	f7ff fcef 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003da6:	f000 f891 	bl	8003ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003daa:	2100      	movs	r1, #0
 8003dac:	480d      	ldr	r0, [pc, #52]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dae:	f7ff fd1f 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003dc2:	f000 f883 	bl	8003ecc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003dc6:	4807      	ldr	r0, [pc, #28]	; (8003de4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dc8:	f7ff fc9b 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003ddc:	f000 f876 	bl	8003ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	200003fc 	.word	0x200003fc
 8003de8:	40013800 	.word	0x40013800

08003dec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df2:	f107 0314 	add.w	r3, r7, #20
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	60da      	str	r2, [r3, #12]
 8003e00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e02:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	4a2e      	ldr	r2, [pc, #184]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1e:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e20:	f043 0320 	orr.w	r3, r3, #32
 8003e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e26:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e32:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e3e:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <_ZL12MX_GPIO_Initv+0xd4>)
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003e62:	2200      	movs	r2, #0
 8003e64:	2120      	movs	r1, #32
 8003e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e6a:	f7fd fc65 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <_ZL12MX_GPIO_Initv+0xd8>)
 8003e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	4619      	mov	r1, r3
 8003e82:	4811      	ldr	r0, [pc, #68]	; (8003ec8 <_ZL12MX_GPIO_Initv+0xdc>)
 8003e84:	f7fd fad6 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e94:	2300      	movs	r3, #0
 8003e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea2:	f7fd fac7 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	2028      	movs	r0, #40	; 0x28
 8003eac:	f7fd f9cd 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003eb0:	2028      	movs	r0, #40	; 0x28
 8003eb2:	f7fd f9e4 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003eb6:	bf00      	nop
 8003eb8:	3728      	adds	r7, #40	; 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	10110000 	.word	0x10110000
 8003ec8:	48000800 	.word	0x48000800

08003ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed0:	b672      	cpsid	i
}
 8003ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ed4:	e7fe      	b.n	8003ed4 <Error_Handler+0x8>

08003ed6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003ede:	2032      	movs	r0, #50	; 0x32
 8003ee0:	f7ff fd44 	bl	800396c <ringBuffer_init>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	605a      	str	r2, [r3, #4]

	}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fd5e 	bl	80039c0 <ringBuffer_deInit>
	}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f00b f928 	bl	800f16c <_ZN5UtestC1Ev>
 8003f1c:	4a03      	ldr	r2, [pc, #12]	; (8003f2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	08018ab8 	.word	0x08018ab8

08003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	4a05      	ldr	r2, [pc, #20]	; (8003f50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f00b f923 	bl	800f18c <_ZN5UtestD1Ev>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	08018ab8 	.word	0x08018ab8

08003f54 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ffe7 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003f62:	2108      	movs	r1, #8
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f002 ff3f 	bl	8006de8 <_ZdlPvj>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ffbe 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003f90:	4a03      	ldr	r2, [pc, #12]	; (8003fa0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	08018a98 	.word	0x08018a98

08003fa4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8003fa4:	b590      	push	{r4, r7, lr}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	2223      	movs	r2, #35	; 0x23
 8003fae:	4906      	ldr	r1, [pc, #24]	; (8003fc8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8003fb0:	2008      	movs	r0, #8
 8003fb2:	f002 ff05 	bl	8006dc0 <_ZnwjPKci>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f7ff ffdb 	bl	8003f74 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8003fbe:	4623      	mov	r3, r4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}
 8003fc8:	08015f80 	.word	0x08015f80

08003fcc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f009 fcf8 	bl	800d9cc <_ZN10UtestShellC1Ev>
 8003fdc:	4a03      	ldr	r2, [pc, #12]	; (8003fec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	080189ec 	.word	0x080189ec

08003ff0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8003ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af04      	add	r7, sp, #16
 8003ff6:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8003ff8:	f00b f88e 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	3338      	adds	r3, #56	; 0x38
 8004002:	681d      	ldr	r5, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	461e      	mov	r6, r3
 800400c:	f00b f894 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004010:	4603      	mov	r3, r0
 8004012:	9302      	str	r3, [sp, #8]
 8004014:	2326      	movs	r3, #38	; 0x26
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	4b2a      	ldr	r3, [pc, #168]	; (80040c8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 800401e:	4632      	mov	r2, r6
 8004020:	2132      	movs	r1, #50	; 0x32
 8004022:	4620      	mov	r0, r4
 8004024:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004026:	f00b f877 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 800402a:	4604      	mov	r4, r0
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	3320      	adds	r3, #32
 8004030:	681d      	ldr	r5, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2de      	uxtb	r6, r3
 8004042:	f00b f879 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004046:	4603      	mov	r3, r0
 8004048:	9303      	str	r3, [sp, #12]
 800404a:	2327      	movs	r3, #39	; 0x27
 800404c:	9302      	str	r3, [sp, #8]
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	2300      	movs	r3, #0
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800405a:	4631      	mov	r1, r6
 800405c:	4620      	mov	r0, r4
 800405e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004060:	f00b f85a 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8004064:	4604      	mov	r4, r0
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	3338      	adds	r3, #56	; 0x38
 800406a:	681d      	ldr	r5, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461e      	mov	r6, r3
 8004074:	f00b f860 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004078:	4603      	mov	r3, r0
 800407a:	9302      	str	r3, [sp, #8]
 800407c:	2328      	movs	r3, #40	; 0x28
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004086:	4632      	mov	r2, r6
 8004088:	2100      	movs	r1, #0
 800408a:	4620      	mov	r0, r4
 800408c:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 800408e:	f00b f843 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8004092:	4604      	mov	r4, r0
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	3338      	adds	r3, #56	; 0x38
 8004098:	681d      	ldr	r5, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	461e      	mov	r6, r3
 80040a2:	f00b f849 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040a6:	4603      	mov	r3, r0
 80040a8:	9302      	str	r3, [sp, #8]
 80040aa:	2329      	movs	r3, #41	; 0x29
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80040b4:	4632      	mov	r2, r6
 80040b6:	2100      	movs	r1, #0
 80040b8:	4620      	mov	r0, r4
 80040ba:	47a8      	blx	r5

}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040c4:	08015f80 	.word	0x08015f80
 80040c8:	08015f94 	.word	0x08015f94
 80040cc:	08015fbc 	.word	0x08015fbc
 80040d0:	08015fd4 	.word	0x08015fd4
 80040d4:	08015fdc 	.word	0x08015fdc
 80040d8:	08016004 	.word	0x08016004

080040dc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff0a 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80040f8:	4a03      	ldr	r2, [pc, #12]	; (8004108 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	080189cc 	.word	0x080189cc

0800410c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	222d      	movs	r2, #45	; 0x2d
 8004116:	4906      	ldr	r1, [pc, #24]	; (8004130 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004118:	2008      	movs	r0, #8
 800411a:	f002 fe51 	bl	8006dc0 <_ZnwjPKci>
 800411e:	4604      	mov	r4, r0
 8004120:	4620      	mov	r0, r4
 8004122:	f7ff ffdb 	bl	80040dc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004126:	4623      	mov	r3, r4
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}
 8004130:	08015f80 	.word	0x08015f80

08004134 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4618      	mov	r0, r3
 8004140:	f009 fc44 	bl	800d9cc <_ZN10UtestShellC1Ev>
 8004144:	4a03      	ldr	r2, [pc, #12]	; (8004154 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	08018920 	.word	0x08018920

08004158 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415a:	b087      	sub	sp, #28
 800415c:	af04      	add	r7, sp, #16
 800415e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2145      	movs	r1, #69	; 0x45
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fc41 	bl	80039ee <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 800416c:	f00a ffd4 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8004170:	4604      	mov	r4, r0
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	3338      	adds	r3, #56	; 0x38
 8004176:	681d      	ldr	r5, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461e      	mov	r6, r3
 8004182:	f00a ffd9 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004186:	4603      	mov	r3, r0
 8004188:	9302      	str	r3, [sp, #8]
 800418a:	2330      	movs	r3, #48	; 0x30
 800418c:	9301      	str	r3, [sp, #4]
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004194:	4632      	mov	r2, r6
 8004196:	2145      	movs	r1, #69	; 0x45
 8004198:	4620      	mov	r0, r4
 800419a:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2110      	movs	r1, #16
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fc23 	bl	80039ee <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80041a8:	f00a ffb6 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 80041ac:	4604      	mov	r4, r0
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	3338      	adds	r3, #56	; 0x38
 80041b2:	681d      	ldr	r5, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	3301      	adds	r3, #1
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	461e      	mov	r6, r3
 80041c0:	f00a ffba 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80041c4:	4603      	mov	r3, r0
 80041c6:	9302      	str	r3, [sp, #8]
 80041c8:	2333      	movs	r3, #51	; 0x33
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80041d2:	4632      	mov	r2, r6
 80041d4:	2110      	movs	r1, #16
 80041d6:	4620      	mov	r0, r4
 80041d8:	47a8      	blx	r5

}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e2:	bf00      	nop
 80041e4:	08015f80 	.word	0x08015f80
 80041e8:	0801602c 	.word	0x0801602c
 80041ec:	0801605c 	.word	0x0801605c

080041f0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fe80 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800420c:	4a03      	ldr	r2, [pc, #12]	; (800421c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	08018900 	.word	0x08018900

08004220 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	2237      	movs	r2, #55	; 0x37
 800422a:	4906      	ldr	r1, [pc, #24]	; (8004244 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 800422c:	2008      	movs	r0, #8
 800422e:	f002 fdc7 	bl	8006dc0 <_ZnwjPKci>
 8004232:	4604      	mov	r4, r0
 8004234:	4620      	mov	r0, r4
 8004236:	f7ff ffdb 	bl	80041f0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800423a:	4623      	mov	r3, r4
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	08015f80 	.word	0x08015f80

08004248 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4618      	mov	r0, r3
 8004254:	f009 fbba 	bl	800d9cc <_ZN10UtestShellC1Ev>
 8004258:	4a03      	ldr	r2, [pc, #12]	; (8004268 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	08018854 	.word	0x08018854

0800426c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 800426c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426e:	b089      	sub	sp, #36	; 0x24
 8004270:	af04      	add	r7, sp, #16
 8004272:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	3b01      	subs	r3, #1
 800428a:	429a      	cmp	r2, r3
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4293      	cmp	r3, r2
 800429a:	da0b      	bge.n	80042b4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fba1 	bl	80039ee <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3301      	adds	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e7e3      	b.n	800427c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	21ff      	movs	r1, #255	; 0xff
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fb97 	bl	80039ee <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80042c0:	f00a ff2a 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 80042c4:	4604      	mov	r4, r0
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	3338      	adds	r3, #56	; 0x38
 80042ca:	681d      	ldr	r5, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	461e      	mov	r6, r3
 80042d6:	f00a ff2f 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80042da:	4603      	mov	r3, r0
 80042dc:	9302      	str	r3, [sp, #8]
 80042de:	233f      	movs	r3, #63	; 0x3f
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80042e8:	4632      	mov	r2, r6
 80042ea:	21ff      	movs	r1, #255	; 0xff
 80042ec:	4620      	mov	r0, r4
 80042ee:	47a8      	blx	r5
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f8:	08015f80 	.word	0x08015f80
 80042fc:	0801608c 	.word	0x0801608c

08004300 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fdf8 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800431c:	4a03      	ldr	r2, [pc, #12]	; (800432c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	08018834 	.word	0x08018834

08004330 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	2242      	movs	r2, #66	; 0x42
 800433a:	4906      	ldr	r1, [pc, #24]	; (8004354 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 800433c:	2008      	movs	r0, #8
 800433e:	f002 fd3f 	bl	8006dc0 <_ZnwjPKci>
 8004342:	4604      	mov	r4, r0
 8004344:	4620      	mov	r0, r4
 8004346:	f7ff ffdb 	bl	8004300 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800434a:	4623      	mov	r3, r4
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bd90      	pop	{r4, r7, pc}
 8004354:	08015f80 	.word	0x08015f80

08004358 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4618      	mov	r0, r3
 8004364:	f009 fb32 	bl	800d9cc <_ZN10UtestShellC1Ev>
 8004368:	4a03      	ldr	r2, [pc, #12]	; (8004378 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	08018788 	.word	0x08018788

0800437c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 800437c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af04      	add	r7, sp, #16
 8004382:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	21ff      	movs	r1, #255	; 0xff
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fb2f 	bl	80039ee <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fb54 	bl	8003a42 <ringBuffer_pop>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 800439e:	f00a febb 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 80043a2:	4604      	mov	r4, r0
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	3338      	adds	r3, #56	; 0x38
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	7bfe      	ldrb	r6, [r7, #15]
 80043ac:	f00a fec4 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043b0:	4603      	mov	r3, r0
 80043b2:	9302      	str	r3, [sp, #8]
 80043b4:	2347      	movs	r3, #71	; 0x47
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80043be:	4632      	mov	r2, r6
 80043c0:	21ff      	movs	r1, #255	; 0xff
 80043c2:	4620      	mov	r0, r4
 80043c4:	47a8      	blx	r5

}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	08015f80 	.word	0x08015f80
 80043d4:	080160bc 	.word	0x080160bc

080043d8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fd8c 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80043f4:	4a03      	ldr	r2, [pc, #12]	; (8004404 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08018768 	.word	0x08018768

08004408 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	224b      	movs	r2, #75	; 0x4b
 8004412:	4906      	ldr	r1, [pc, #24]	; (800442c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004414:	2008      	movs	r0, #8
 8004416:	f002 fcd3 	bl	8006dc0 <_ZnwjPKci>
 800441a:	4604      	mov	r4, r0
 800441c:	4620      	mov	r0, r4
 800441e:	f7ff ffdb 	bl	80043d8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004422:	4623      	mov	r3, r4
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bd90      	pop	{r4, r7, pc}
 800442c:	08015f80 	.word	0x08015f80

08004430 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4618      	mov	r0, r3
 800443c:	f009 fac6 	bl	800d9cc <_ZN10UtestShellC1Ev>
 8004440:	4a03      	ldr	r2, [pc, #12]	; (8004450 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	080186bc 	.word	0x080186bc

08004454 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af04      	add	r7, sp, #16
 800445a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	21aa      	movs	r1, #170	; 0xaa
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fac1 	bl	80039ee <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	3b01      	subs	r3, #1
 8004482:	429a      	cmp	r2, r3
 8004484:	bf0c      	ite	eq
 8004486:	2301      	moveq	r3, #1
 8004488:	2300      	movne	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4293      	cmp	r3, r2
 8004492:	da0a      	bge.n	80044aa <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fad2 	bl	8003a42 <ringBuffer_pop>
 800449e:	4603      	mov	r3, r0
 80044a0:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e7e4      	b.n	8004474 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fac7 	bl	8003a42 <ringBuffer_pop>
 80044b4:	4603      	mov	r3, r0
 80044b6:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80044b8:	f00a fe2e 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 80044bc:	4604      	mov	r4, r0
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	3338      	adds	r3, #56	; 0x38
 80044c2:	681d      	ldr	r5, [r3, #0]
 80044c4:	7afe      	ldrb	r6, [r7, #11]
 80044c6:	f00a fe37 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044ca:	4603      	mov	r3, r0
 80044cc:	9302      	str	r3, [sp, #8]
 80044ce:	2358      	movs	r3, #88	; 0x58
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80044d8:	4632      	mov	r2, r6
 80044da:	21aa      	movs	r1, #170	; 0xaa
 80044dc:	4620      	mov	r0, r4
 80044de:	47a8      	blx	r5
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e8:	08015f80 	.word	0x08015f80
 80044ec:	080160dc 	.word	0x080160dc

080044f0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fd00 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800450c:	4a03      	ldr	r2, [pc, #12]	; (800451c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	0801869c 	.word	0x0801869c

08004520 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	225b      	movs	r2, #91	; 0x5b
 800452a:	4906      	ldr	r1, [pc, #24]	; (8004544 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 800452c:	2008      	movs	r0, #8
 800452e:	f002 fc47 	bl	8006dc0 <_ZnwjPKci>
 8004532:	4604      	mov	r4, r0
 8004534:	4620      	mov	r0, r4
 8004536:	f7ff ffdb 	bl	80044f0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800453a:	4623      	mov	r3, r4
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bd90      	pop	{r4, r7, pc}
 8004544:	08015f80 	.word	0x08015f80

08004548 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4618      	mov	r0, r3
 8004554:	f009 fa3a 	bl	800d9cc <_ZN10UtestShellC1Ev>
 8004558:	4a03      	ldr	r2, [pc, #12]	; (8004568 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	080185f0 	.word	0x080185f0

0800456c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 800456c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456e:	b089      	sub	sp, #36	; 0x24
 8004570:	af04      	add	r7, sp, #16
 8004572:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d20b      	bcs.n	800459c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fa2d 	bl	80039ee <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e7ed      	b.n	8004578 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 800459c:	f00a fdbc 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 80045a0:	4604      	mov	r4, r0
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	3338      	adds	r3, #56	; 0x38
 80045a6:	681d      	ldr	r5, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	461e      	mov	r6, r3
 80045bc:	f00a fdbc 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045c0:	4603      	mov	r3, r0
 80045c2:	9302      	str	r3, [sp, #8]
 80045c4:	2362      	movs	r3, #98	; 0x62
 80045c6:	9301      	str	r3, [sp, #4]
 80045c8:	4b24      	ldr	r3, [pc, #144]	; (800465c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	4b24      	ldr	r3, [pc, #144]	; (8004660 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80045ce:	4632      	mov	r2, r6
 80045d0:	2131      	movs	r1, #49	; 0x31
 80045d2:	4620      	mov	r0, r4
 80045d4:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fa5b 	bl	8003a96 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 80045e0:	f00a fd9a 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 80045e4:	4604      	mov	r4, r0
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	3338      	adds	r3, #56	; 0x38
 80045ea:	681d      	ldr	r5, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	461e      	mov	r6, r3
 8004600:	f00a fd9a 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004604:	4603      	mov	r3, r0
 8004606:	9302      	str	r3, [sp, #8]
 8004608:	2366      	movs	r3, #102	; 0x66
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004612:	4632      	mov	r2, r6
 8004614:	2100      	movs	r1, #0
 8004616:	4620      	mov	r0, r4
 8004618:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 800461a:	f00a fd7d 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 800461e:	4604      	mov	r4, r0
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	3338      	adds	r3, #56	; 0x38
 8004624:	681d      	ldr	r5, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	461e      	mov	r6, r3
 800463a:	f00a fd7d 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800463e:	4603      	mov	r3, r0
 8004640:	9302      	str	r3, [sp, #8]
 8004642:	2367      	movs	r3, #103	; 0x67
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 800464c:	4632      	mov	r2, r6
 800464e:	2100      	movs	r1, #0
 8004650:	4620      	mov	r0, r4
 8004652:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800465c:	08015f80 	.word	0x08015f80
 8004660:	080160fc 	.word	0x080160fc
 8004664:	08016138 	.word	0x08016138
 8004668:	08016174 	.word	0x08016174

0800466c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fc42 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004688:	4a03      	ldr	r2, [pc, #12]	; (8004698 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	080185d0 	.word	0x080185d0

0800469c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 800469c:	b590      	push	{r4, r7, lr}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	2270      	movs	r2, #112	; 0x70
 80046a6:	4906      	ldr	r1, [pc, #24]	; (80046c0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 80046a8:	2008      	movs	r0, #8
 80046aa:	f002 fb89 	bl	8006dc0 <_ZnwjPKci>
 80046ae:	4604      	mov	r4, r0
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff ffdb 	bl	800466c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 80046b6:	4623      	mov	r3, r4
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd90      	pop	{r4, r7, pc}
 80046c0:	08015f80 	.word	0x08015f80

080046c4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f009 f97c 	bl	800d9cc <_ZN10UtestShellC1Ev>
 80046d4:	4a03      	ldr	r2, [pc, #12]	; (80046e4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	08018524 	.word	0x08018524

080046e8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af04      	add	r7, sp, #16
 80046ee:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	490e      	ldr	r1, [pc, #56]	; (8004730 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff f9dd 	bl	8003ab6 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 80046fc:	f00a fd0c 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8004700:	4604      	mov	r4, r0
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	3324      	adds	r3, #36	; 0x24
 8004706:	681d      	ldr	r5, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68de      	ldr	r6, [r3, #12]
 800470e:	f00a fd13 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004712:	4603      	mov	r3, r0
 8004714:	9302      	str	r3, [sp, #8]
 8004716:	2374      	movs	r3, #116	; 0x74
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	2300      	movs	r3, #0
 8004720:	4632      	mov	r2, r6
 8004722:	4903      	ldr	r1, [pc, #12]	; (8004730 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004724:	4620      	mov	r0, r4
 8004726:	47a8      	blx	r5
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004730:	080161ac 	.word	0x080161ac
 8004734:	08015f80 	.word	0x08015f80

08004738 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fbdc 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004754:	4a03      	ldr	r2, [pc, #12]	; (8004764 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	08018504 	.word	0x08018504

08004768 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	2277      	movs	r2, #119	; 0x77
 8004772:	4906      	ldr	r1, [pc, #24]	; (800478c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004774:	2008      	movs	r0, #8
 8004776:	f002 fb23 	bl	8006dc0 <_ZnwjPKci>
 800477a:	4604      	mov	r4, r0
 800477c:	4620      	mov	r0, r4
 800477e:	f7ff ffdb 	bl	8004738 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004782:	4623      	mov	r3, r4
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bd90      	pop	{r4, r7, pc}
 800478c:	08015f80 	.word	0x08015f80

08004790 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4618      	mov	r0, r3
 800479c:	f009 f916 	bl	800d9cc <_ZN10UtestShellC1Ev>
 80047a0:	4a03      	ldr	r2, [pc, #12]	; (80047b0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	08018458 	.word	0x08018458

080047b4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 80047b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b8:	b08a      	sub	sp, #40	; 0x28
 80047ba:	af04      	add	r7, sp, #16
 80047bc:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	494e      	ldr	r1, [pc, #312]	; (80048fc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff f976 	bl	8003ab6 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 80047ca:	f00a fca5 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 80047ce:	4604      	mov	r4, r0
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	3324      	adds	r3, #36	; 0x24
 80047d4:	681d      	ldr	r5, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	68de      	ldr	r6, [r3, #12]
 80047dc:	f00a fcac 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047e0:	4603      	mov	r3, r0
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	237b      	movs	r3, #123	; 0x7b
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	4b45      	ldr	r3, [pc, #276]	; (8004900 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	4632      	mov	r2, r6
 80047f0:	4942      	ldr	r1, [pc, #264]	; (80048fc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80047f2:	4620      	mov	r0, r4
 80047f4:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4942      	ldr	r1, [pc, #264]	; (8004904 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff f979 	bl	8003af4 <ringBuffer_lookFor>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d05c      	beq.n	80048cc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	493b      	ldr	r1, [pc, #236]	; (8004904 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff f96b 	bl	8003af4 <ringBuffer_lookFor>
 800481e:	4604      	mov	r4, r0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4937      	ldr	r1, [pc, #220]	; (8004904 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff f964 	bl	8003af4 <ringBuffer_lookFor>
 800482c:	4603      	mov	r3, r0
 800482e:	429c      	cmp	r4, r3
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 800483c:	f00a fc6c 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8004840:	6803      	ldr	r3, [r0, #0]
 8004842:	3370      	adds	r3, #112	; 0x70
 8004844:	681c      	ldr	r4, [r3, #0]
 8004846:	237c      	movs	r3, #124	; 0x7c
 8004848:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800484a:	492f      	ldr	r1, [pc, #188]	; (8004908 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 800484c:	47a0      	blx	r4
 800484e:	f00a fc63 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8004852:	4604      	mov	r4, r0
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	3358      	adds	r3, #88	; 0x58
 8004858:	681d      	ldr	r5, [r3, #0]
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	2101      	movs	r1, #1
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fff7 	bl	8008854 <_Z10StringFromi>
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	4618      	mov	r0, r3
 800486c:	f003 fd1c 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8004870:	4606      	mov	r6, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4923      	ldr	r1, [pc, #140]	; (8004904 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff f93b 	bl	8003af4 <ringBuffer_lookFor>
 800487e:	4602      	mov	r2, r0
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f004 fa02 	bl	8008c90 <_Z10StringFromm>
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	4618      	mov	r0, r3
 8004892:	f003 fd09 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8004896:	4680      	mov	r8, r0
 8004898:	f00a fc4e 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800489c:	4603      	mov	r3, r0
 800489e:	9303      	str	r3, [sp, #12]
 80048a0:	237c      	movs	r3, #124	; 0x7c
 80048a2:	9302      	str	r3, [sp, #8]
 80048a4:	4b16      	ldr	r3, [pc, #88]	; (8004900 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	2300      	movs	r3, #0
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	4643      	mov	r3, r8
 80048ae:	4632      	mov	r2, r6
 80048b0:	2101      	movs	r1, #1
 80048b2:	4620      	mov	r0, r4
 80048b4:	47a8      	blx	r5
 80048b6:	f107 0310 	add.w	r3, r7, #16
 80048ba:	4618      	mov	r0, r3
 80048bc:	f003 fd21 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	4618      	mov	r0, r3
 80048c6:	f003 fd1c 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 80048ca:	e012      	b.n	80048f2 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80048cc:	f00a fc24 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 80048d0:	4604      	mov	r4, r0
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	3338      	adds	r3, #56	; 0x38
 80048d6:	681d      	ldr	r5, [r3, #0]
 80048d8:	f00a fc2e 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048dc:	4603      	mov	r3, r0
 80048de:	9302      	str	r3, [sp, #8]
 80048e0:	237c      	movs	r3, #124	; 0x7c
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	2300      	movs	r3, #0
 80048ea:	2200      	movs	r2, #0
 80048ec:	2100      	movs	r1, #0
 80048ee:	4620      	mov	r0, r4
 80048f0:	47a8      	blx	r5
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048fc:	080161b4 	.word	0x080161b4
 8004900:	08015f80 	.word	0x08015f80
 8004904:	080161c0 	.word	0x080161c0
 8004908:	080161c8 	.word	0x080161c8

0800490c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	605a      	str	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff faf2 	bl	8003f0c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004928:	4a03      	ldr	r2, [pc, #12]	; (8004938 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	08018438 	.word	0x08018438

0800493c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	227f      	movs	r2, #127	; 0x7f
 8004946:	4906      	ldr	r1, [pc, #24]	; (8004960 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004948:	2008      	movs	r0, #8
 800494a:	f002 fa39 	bl	8006dc0 <_ZnwjPKci>
 800494e:	4604      	mov	r4, r0
 8004950:	4620      	mov	r0, r4
 8004952:	f7ff ffdb 	bl	800490c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004956:	4623      	mov	r3, r4
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}
 8004960:	08015f80 	.word	0x08015f80

08004964 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4618      	mov	r0, r3
 8004970:	f009 f82c 	bl	800d9cc <_ZN10UtestShellC1Ev>
 8004974:	4a03      	ldr	r2, [pc, #12]	; (8004984 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	0801838c 	.word	0x0801838c

08004988 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	b087      	sub	sp, #28
 800498c:	af04      	add	r7, sp, #16
 800498e:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004990:	f00a fbc2 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8004994:	4604      	mov	r4, r0
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	3338      	adds	r3, #56	; 0x38
 800499a:	681d      	ldr	r5, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff f8bd 	bl	8003b20 <ringBuffer_capacity>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461e      	mov	r6, r3
 80049aa:	f00a fbc5 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049ae:	4603      	mov	r3, r0
 80049b0:	9302      	str	r3, [sp, #8]
 80049b2:	2382      	movs	r3, #130	; 0x82
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 80049bc:	4632      	mov	r2, r6
 80049be:	2132      	movs	r1, #50	; 0x32
 80049c0:	4620      	mov	r0, r4
 80049c2:	47a8      	blx	r5

}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049cc:	08015f80 	.word	0x08015f80
 80049d0:	0801626c 	.word	0x0801626c

080049d4 <_Z18UART_Transmit_FakePh>:

void UART_Transmit_Fake(uint8_t* data)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0

	return 1;
 80049ec:	2301      	movs	r3, #1
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <_Z13UART_ISR_Fakev>:
void UART_ISR_Fake(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0

}
 80049fc:	bf00      	nop
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <_Z22UART_TX_IT_Enable_Fakev>:

void UART_TX_IT_Enable_Fake(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0

}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <_Z12getTick_Fakev>:

uint32_t getTick_Fake(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
	return 1;
 8004a18:	2301      	movs	r3, #1
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	{


	}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	{


	}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f00a fb88 	bl	800f16c <_ZN5UtestC1Ev>
 8004a5c:	4a03      	ldr	r2, [pc, #12]	; (8004a6c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	0801836c 	.word	0x0801836c

08004a70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	4a05      	ldr	r2, [pc, #20]	; (8004a90 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f00a fb83 	bl	800f18c <_ZN5UtestD1Ev>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	0801836c 	.word	0x0801836c

08004a94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ffe7 	bl	8004a70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004aa2:	2104      	movs	r1, #4
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f002 f99f 	bl	8006de8 <_ZdlPvj>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff ffc4 	bl	8004a4c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004ac4:	4a03      	ldr	r2, [pc, #12]	; (8004ad4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	0801834c 	.word	0x0801834c

08004ad8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	22b4      	movs	r2, #180	; 0xb4
 8004ae2:	4906      	ldr	r1, [pc, #24]	; (8004afc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004ae4:	2004      	movs	r0, #4
 8004ae6:	f002 f96b 	bl	8006dc0 <_ZnwjPKci>
 8004aea:	4604      	mov	r4, r0
 8004aec:	4620      	mov	r0, r4
 8004aee:	f7ff ffe1 	bl	8004ab4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004af2:	4623      	mov	r3, r4
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd90      	pop	{r4, r7, pc}
 8004afc:	08015f80 	.word	0x08015f80

08004b00 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f008 ff5e 	bl	800d9cc <_ZN10UtestShellC1Ev>
 8004b10:	4a03      	ldr	r2, [pc, #12]	; (8004b20 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	080182a0 	.word	0x080182a0

08004b24 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004b24:	b5b0      	push	{r4, r5, r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af04      	add	r7, sp, #16
 8004b2a:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass as parameter UART_Transmit_Fake to the function instead of transmit.
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004b2e:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004b30:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004b3c:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004b3e:	4912      	ldr	r1, [pc, #72]	; (8004b88 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x64>)
 8004b40:	f7fe fee2 	bl	8003908 <ESP_Init>
 8004b44:	60f8      	str	r0, [r7, #12]
//						  UART_Receive_Fake,
//						  UART_ISR_Fake,
//						  UART_TX_IT_Enable_Fake,
//						  getTick_Fake);

	LONGS_EQUAL(1,result);
 8004b46:	f00a fae7 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	3338      	adds	r3, #56	; 0x38
 8004b50:	681d      	ldr	r5, [r3, #0]
 8004b52:	f00a faf1 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b56:	4603      	mov	r3, r0
 8004b58:	9302      	str	r3, [sp, #8]
 8004b5a:	23c4      	movs	r3, #196	; 0xc4
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x68>)
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x6c>)
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	2101      	movs	r1, #1
 8004b68:	4620      	mov	r0, r4
 8004b6a:	47a8      	blx	r5

}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bdb0      	pop	{r4, r5, r7, pc}
 8004b74:	200005ac 	.word	0x200005ac
 8004b78:	080049d5 	.word	0x080049d5
 8004b7c:	08004a15 	.word	0x08004a15
 8004b80:	08004a07 	.word	0x08004a07
 8004b84:	080049f9 	.word	0x080049f9
 8004b88:	080049e9 	.word	0x080049e9
 8004b8c:	08015f80 	.word	0x08015f80
 8004b90:	080162a4 	.word	0x080162a4

08004b94 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	4a05      	ldr	r2, [pc, #20]	; (8004bb4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f008 ff65 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	080182a0 	.word	0x080182a0

08004bb8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ffe7 	bl	8004b94 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8004bc6:	211c      	movs	r1, #28
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f002 f90d 	bl	8006de8 <_ZdlPvj>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ff41 	bl	8004a70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	0801834c 	.word	0x0801834c

08004bfc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff ffe7 	bl	8004bd8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8004c0a:	2104      	movs	r1, #4
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f002 f8eb 	bl	8006de8 <_ZdlPvj>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	4a05      	ldr	r2, [pc, #20]	; (8004c3c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f008 ff21 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	0801838c 	.word	0x0801838c

08004c40 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ffe7 	bl	8004c1c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8004c4e:	211c      	movs	r1, #28
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f002 f8c9 	bl	8006de8 <_ZdlPvj>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	4a05      	ldr	r2, [pc, #20]	; (8004c80 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff f95d 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	08018438 	.word	0x08018438

08004c84 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ffe7 	bl	8004c60 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8004c92:	2108      	movs	r1, #8
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f002 f8a7 	bl	8006de8 <_ZdlPvj>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	4a05      	ldr	r2, [pc, #20]	; (8004cc4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f008 fedd 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	08018458 	.word	0x08018458

08004cc8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ffe7 	bl	8004ca4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8004cd6:	211c      	movs	r1, #28
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f002 f885 	bl	8006de8 <_ZdlPvj>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	4a05      	ldr	r2, [pc, #20]	; (8004d08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff f919 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	08018504 	.word	0x08018504

08004d0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ffe7 	bl	8004ce8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8004d1a:	2108      	movs	r1, #8
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f002 f863 	bl	8006de8 <_ZdlPvj>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f008 fe99 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08018524 	.word	0x08018524

08004d50 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff ffe7 	bl	8004d2c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8004d5e:	211c      	movs	r1, #28
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f002 f841 	bl	8006de8 <_ZdlPvj>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff f8d5 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	080185d0 	.word	0x080185d0

08004d94 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff ffe7 	bl	8004d70 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8004da2:	2108      	movs	r1, #8
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f002 f81f 	bl	8006de8 <_ZdlPvj>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f008 fe55 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	080185f0 	.word	0x080185f0

08004dd8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ffe7 	bl	8004db4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8004de6:	211c      	movs	r1, #28
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f001 fffd 	bl	8006de8 <_ZdlPvj>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff f891 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	0801869c 	.word	0x0801869c

08004e1c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ffe7 	bl	8004df8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8004e2a:	2108      	movs	r1, #8
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 ffdb 	bl	8006de8 <_ZdlPvj>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	4a05      	ldr	r2, [pc, #20]	; (8004e5c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f008 fe11 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	080186bc 	.word	0x080186bc

08004e60 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ffe7 	bl	8004e3c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8004e6e:	211c      	movs	r1, #28
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 ffb9 	bl	8006de8 <_ZdlPvj>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff f84d 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	08018768 	.word	0x08018768

08004ea4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ffe7 	bl	8004e80 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8004eb2:	2108      	movs	r1, #8
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 ff97 	bl	8006de8 <_ZdlPvj>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f008 fdcd 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	08018788 	.word	0x08018788

08004ee8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ffe7 	bl	8004ec4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8004ef6:	211c      	movs	r1, #28
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 ff75 	bl	8006de8 <_ZdlPvj>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	4a05      	ldr	r2, [pc, #20]	; (8004f28 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff f809 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	08018834 	.word	0x08018834

08004f2c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ffe7 	bl	8004f08 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8004f3a:	2108      	movs	r1, #8
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 ff53 	bl	8006de8 <_ZdlPvj>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	4a05      	ldr	r2, [pc, #20]	; (8004f6c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f008 fd89 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	08018854 	.word	0x08018854

08004f70 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff ffe7 	bl	8004f4c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8004f7e:	211c      	movs	r1, #28
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 ff31 	bl	8006de8 <_ZdlPvj>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe ffc5 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08018900 	.word	0x08018900

08004fb4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ffe7 	bl	8004f90 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8004fc2:	2108      	movs	r1, #8
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 ff0f 	bl	8006de8 <_ZdlPvj>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	4a05      	ldr	r2, [pc, #20]	; (8004ff4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f008 fd45 	bl	800da74 <_ZN10UtestShellD1Ev>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	08018920 	.word	0x08018920

08004ff8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ffe7 	bl	8004fd4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8005006:	211c      	movs	r1, #28
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 feed 	bl	8006de8 <_ZdlPvj>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	4a05      	ldr	r2, [pc, #20]	; (8005038 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe ff81 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	080189cc 	.word	0x080189cc

0800503c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff ffe7 	bl	8005018 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 800504a:	2108      	movs	r1, #8
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 fecb 	bl	8006de8 <_ZdlPvj>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	4a05      	ldr	r2, [pc, #20]	; (800507c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4618      	mov	r0, r3
 800506e:	f008 fd01 	bl	800da74 <_ZN10UtestShellD1Ev>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	080189ec 	.word	0x080189ec

08005080 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ffe7 	bl	800505c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 800508e:	211c      	movs	r1, #28
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fea9 	bl	8006de8 <_ZdlPvj>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe ff3d 	bl	8003f30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	08018a98 	.word	0x08018a98

080050c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ffe7 	bl	80050a0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80050d2:	2108      	movs	r1, #8
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fe87 	bl	8006de8 <_ZdlPvj>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <_Z41__static_initialization_and_destruction_0ii>:
}
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	f040 8088 	bne.w	8005206 <_Z41__static_initialization_and_destruction_0ii+0x122>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050fc:	4293      	cmp	r3, r2
 80050fe:	f040 8082 	bne.w	8005206 <_Z41__static_initialization_and_destruction_0ii+0x122>
TEST(RingBuffer_Test_Group, InitTest)
 8005102:	4865      	ldr	r0, [pc, #404]	; (8005298 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8005104:	f7fe ff62 	bl	8003fcc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8005108:	2323      	movs	r3, #35	; 0x23
 800510a:	9301      	str	r3, [sp, #4]
 800510c:	4b63      	ldr	r3, [pc, #396]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	4b63      	ldr	r3, [pc, #396]	; (80052a0 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8005112:	4a64      	ldr	r2, [pc, #400]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8005114:	4960      	ldr	r1, [pc, #384]	; (8005298 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8005116:	4864      	ldr	r0, [pc, #400]	; (80052a8 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8005118:	f00a fa96 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 800511c:	4863      	ldr	r0, [pc, #396]	; (80052ac <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800511e:	f7ff f809 	bl	8004134 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8005122:	232d      	movs	r3, #45	; 0x2d
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	4b5d      	ldr	r3, [pc, #372]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800512c:	4a5d      	ldr	r2, [pc, #372]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800512e:	495f      	ldr	r1, [pc, #380]	; (80052ac <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8005130:	4860      	ldr	r0, [pc, #384]	; (80052b4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8005132:	f00a fa89 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005136:	4860      	ldr	r0, [pc, #384]	; (80052b8 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8005138:	f7ff f886 	bl	8004248 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 800513c:	2337      	movs	r3, #55	; 0x37
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	4b56      	ldr	r3, [pc, #344]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	4b5d      	ldr	r3, [pc, #372]	; (80052bc <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8005146:	4a57      	ldr	r2, [pc, #348]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8005148:	495b      	ldr	r1, [pc, #364]	; (80052b8 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800514a:	485d      	ldr	r0, [pc, #372]	; (80052c0 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800514c:	f00a fa7c 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8005150:	485c      	ldr	r0, [pc, #368]	; (80052c4 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8005152:	f7ff f901 	bl	8004358 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8005156:	2342      	movs	r3, #66	; 0x42
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	4b50      	ldr	r3, [pc, #320]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005160:	4a50      	ldr	r2, [pc, #320]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8005162:	4958      	ldr	r1, [pc, #352]	; (80052c4 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8005164:	4859      	ldr	r0, [pc, #356]	; (80052cc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8005166:	f00a fa6f 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800516a:	4859      	ldr	r0, [pc, #356]	; (80052d0 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800516c:	f7ff f960 	bl	8004430 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8005170:	234b      	movs	r3, #75	; 0x4b
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	4b49      	ldr	r3, [pc, #292]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 800517a:	4a4a      	ldr	r2, [pc, #296]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800517c:	4954      	ldr	r1, [pc, #336]	; (80052d0 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800517e:	4856      	ldr	r0, [pc, #344]	; (80052d8 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8005180:	f00a fa62 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005184:	4855      	ldr	r0, [pc, #340]	; (80052dc <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8005186:	f7ff f9df 	bl	8004548 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 800518a:	235b      	movs	r3, #91	; 0x5b
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	4b43      	ldr	r3, [pc, #268]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	4b53      	ldr	r3, [pc, #332]	; (80052e0 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8005194:	4a43      	ldr	r2, [pc, #268]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8005196:	4951      	ldr	r1, [pc, #324]	; (80052dc <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8005198:	4852      	ldr	r0, [pc, #328]	; (80052e4 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800519a:	f00a fa55 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800519e:	4852      	ldr	r0, [pc, #328]	; (80052e8 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80051a0:	f7ff fa90 	bl	80046c4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80051a4:	2370      	movs	r3, #112	; 0x70
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	4b3c      	ldr	r3, [pc, #240]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	4b4f      	ldr	r3, [pc, #316]	; (80052ec <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80051ae:	4a3d      	ldr	r2, [pc, #244]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80051b0:	494d      	ldr	r1, [pc, #308]	; (80052e8 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80051b2:	484f      	ldr	r0, [pc, #316]	; (80052f0 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80051b4:	f00a fa48 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80051b8:	484e      	ldr	r0, [pc, #312]	; (80052f4 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80051ba:	f7ff fae9 	bl	8004790 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80051be:	2377      	movs	r3, #119	; 0x77
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	4b36      	ldr	r3, [pc, #216]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	4b4c      	ldr	r3, [pc, #304]	; (80052f8 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80051c8:	4a36      	ldr	r2, [pc, #216]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80051ca:	494a      	ldr	r1, [pc, #296]	; (80052f4 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80051cc:	484b      	ldr	r0, [pc, #300]	; (80052fc <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80051ce:	f00a fa3b 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80051d2:	484b      	ldr	r0, [pc, #300]	; (8005300 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80051d4:	f7ff fbc6 	bl	8004964 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80051d8:	237f      	movs	r3, #127	; 0x7f
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	4b2f      	ldr	r3, [pc, #188]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	4b48      	ldr	r3, [pc, #288]	; (8005304 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80051e2:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80051e4:	4946      	ldr	r1, [pc, #280]	; (8005300 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80051e6:	4848      	ldr	r0, [pc, #288]	; (8005308 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80051e8:	f00a fa2e 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80051ec:	4847      	ldr	r0, [pc, #284]	; (800530c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80051ee:	f7ff fc87 	bl	8004b00 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80051f2:	23b4      	movs	r3, #180	; 0xb4
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	4b29      	ldr	r3, [pc, #164]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80051fc:	4a45      	ldr	r2, [pc, #276]	; (8005314 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80051fe:	4943      	ldr	r1, [pc, #268]	; (800530c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005200:	4845      	ldr	r0, [pc, #276]	; (8005318 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005202:	f00a fa21 	bl	800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d140      	bne.n	800528e <_Z41__static_initialization_and_destruction_0ii+0x1aa>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005212:	4293      	cmp	r3, r2
 8005214:	d13b      	bne.n	800528e <_Z41__static_initialization_and_destruction_0ii+0x1aa>
 8005216:	4840      	ldr	r0, [pc, #256]	; (8005318 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005218:	f00a fa40 	bl	800f69c <_ZN13TestInstallerD1Ev>
 800521c:	483b      	ldr	r0, [pc, #236]	; (800530c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800521e:	f7ff fcb9 	bl	8004b94 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8005222:	4839      	ldr	r0, [pc, #228]	; (8005308 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8005224:	f00a fa3a 	bl	800f69c <_ZN13TestInstallerD1Ev>
 8005228:	4835      	ldr	r0, [pc, #212]	; (8005300 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800522a:	f7ff fcf7 	bl	8004c1c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 800522e:	4833      	ldr	r0, [pc, #204]	; (80052fc <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8005230:	f00a fa34 	bl	800f69c <_ZN13TestInstallerD1Ev>
 8005234:	482f      	ldr	r0, [pc, #188]	; (80052f4 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8005236:	f7ff fd35 	bl	8004ca4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800523a:	482d      	ldr	r0, [pc, #180]	; (80052f0 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800523c:	f00a fa2e 	bl	800f69c <_ZN13TestInstallerD1Ev>
 8005240:	4829      	ldr	r0, [pc, #164]	; (80052e8 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8005242:	f7ff fd73 	bl	8004d2c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005246:	4827      	ldr	r0, [pc, #156]	; (80052e4 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8005248:	f00a fa28 	bl	800f69c <_ZN13TestInstallerD1Ev>
 800524c:	4823      	ldr	r0, [pc, #140]	; (80052dc <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800524e:	f7ff fdb1 	bl	8004db4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8005252:	4821      	ldr	r0, [pc, #132]	; (80052d8 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8005254:	f00a fa22 	bl	800f69c <_ZN13TestInstallerD1Ev>
 8005258:	481d      	ldr	r0, [pc, #116]	; (80052d0 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800525a:	f7ff fdef 	bl	8004e3c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 800525e:	481b      	ldr	r0, [pc, #108]	; (80052cc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8005260:	f00a fa1c 	bl	800f69c <_ZN13TestInstallerD1Ev>
 8005264:	4817      	ldr	r0, [pc, #92]	; (80052c4 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8005266:	f7ff fe2d 	bl	8004ec4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800526a:	4815      	ldr	r0, [pc, #84]	; (80052c0 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800526c:	f00a fa16 	bl	800f69c <_ZN13TestInstallerD1Ev>
 8005270:	4811      	ldr	r0, [pc, #68]	; (80052b8 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8005272:	f7ff fe6b 	bl	8004f4c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8005276:	480f      	ldr	r0, [pc, #60]	; (80052b4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8005278:	f00a fa10 	bl	800f69c <_ZN13TestInstallerD1Ev>
 800527c:	480b      	ldr	r0, [pc, #44]	; (80052ac <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800527e:	f7ff fea9 	bl	8004fd4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8005282:	4809      	ldr	r0, [pc, #36]	; (80052a8 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8005284:	f00a fa0a 	bl	800f69c <_ZN13TestInstallerD1Ev>
 8005288:	4803      	ldr	r0, [pc, #12]	; (8005298 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800528a:	f7ff fee7 	bl	800505c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	2000048c 	.word	0x2000048c
 800529c:	08015f80 	.word	0x08015f80
 80052a0:	080162c4 	.word	0x080162c4
 80052a4:	080162d0 	.word	0x080162d0
 80052a8:	200004a8 	.word	0x200004a8
 80052ac:	200004ac 	.word	0x200004ac
 80052b0:	080162e8 	.word	0x080162e8
 80052b4:	200004c8 	.word	0x200004c8
 80052b8:	200004cc 	.word	0x200004cc
 80052bc:	080162f8 	.word	0x080162f8
 80052c0:	200004e8 	.word	0x200004e8
 80052c4:	200004ec 	.word	0x200004ec
 80052c8:	0801630c 	.word	0x0801630c
 80052cc:	20000508 	.word	0x20000508
 80052d0:	2000050c 	.word	0x2000050c
 80052d4:	0801631c 	.word	0x0801631c
 80052d8:	20000528 	.word	0x20000528
 80052dc:	2000052c 	.word	0x2000052c
 80052e0:	08016334 	.word	0x08016334
 80052e4:	20000548 	.word	0x20000548
 80052e8:	2000054c 	.word	0x2000054c
 80052ec:	08016344 	.word	0x08016344
 80052f0:	20000568 	.word	0x20000568
 80052f4:	2000056c 	.word	0x2000056c
 80052f8:	08016354 	.word	0x08016354
 80052fc:	20000588 	.word	0x20000588
 8005300:	2000058c 	.word	0x2000058c
 8005304:	08016360 	.word	0x08016360
 8005308:	200005a8 	.word	0x200005a8
 800530c:	200005b0 	.word	0x200005b0
 8005310:	08016370 	.word	0x08016370
 8005314:	08016380 	.word	0x08016380
 8005318:	200005cc 	.word	0x200005cc

0800531c <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
 8005320:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005324:	2001      	movs	r0, #1
 8005326:	f7ff fedd 	bl	80050e4 <_Z41__static_initialization_and_destruction_0ii>
 800532a:	bd80      	pop	{r7, pc}

0800532c <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
 8005330:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005334:	2000      	movs	r0, #0
 8005336:	f7ff fed5 	bl	80050e4 <_Z41__static_initialization_and_destruction_0ii>
 800533a:	bd80      	pop	{r7, pc}

0800533c <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
    }
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
    }
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
    }
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ffed 	bl	800536c <_ZNK10TestResult15getFailureCountEv>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <_ZNK10TestResult9isFailureEv+0x2a>
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff ffcf 	bl	800533c <_ZNK10TestResult11getRunCountEv>
 800539e:	4604      	mov	r4, r0
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ffd7 	bl	8005354 <_ZNK10TestResult15getIgnoredCountEv>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4423      	add	r3, r4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <_ZNK10TestResult9isFailureEv+0x2e>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <_ZNK10TestResult9isFailureEv+0x30>
 80053b2:	2300      	movs	r3, #0
    }
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}

080053bc <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
    {
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f005 fffe 	bl	800b3c8 <_ZN10TestOutputC1Ev>
 80053cc:	4a03      	ldr	r2, [pc, #12]	; (80053dc <_ZN17ConsoleTestOutputC1Ev+0x20>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	601a      	str	r2, [r3, #0]
    }
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	08018ff8 	.word	0x08018ff8

080053e0 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
    {
 80053e8:	4a05      	ldr	r2, [pc, #20]	; (8005400 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f006 f807 	bl	800b404 <_ZN10TestOutputD1Ev>
    }
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	08018ff8 	.word	0x08018ff8

08005404 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
    }
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff ffe7 	bl	80053e0 <_ZN17ConsoleTestOutputD1Ev>
 8005412:	2110      	movs	r1, #16
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f001 fce7 	bl	8006de8 <_ZdlPvj>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8005424:	b5b0      	push	{r4, r5, r7, lr}
 8005426:	b098      	sub	sp, #96	; 0x60
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
    int result = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8005432:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff ffc0 	bl	80053bc <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800543c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005440:	4935      	ldr	r1, [pc, #212]	; (8005518 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8005442:	4618      	mov	r0, r3
 8005444:	f002 fba5 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8005448:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800544c:	f107 0318 	add.w	r3, r7, #24
 8005450:	2200      	movs	r2, #0
 8005452:	4618      	mov	r0, r3
 8005454:	f001 ff6a 	bl	800732c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8005458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800545c:	4618      	mov	r0, r3
 800545e:	f002 ff50 	bl	8008302 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8005462:	f107 0318 	add.w	r3, r7, #24
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f001 ff2f 	bl	80072cc <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 800546e:	f007 fd39 	bl	800cee4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8005472:	4603      	mov	r3, r0
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	3234      	adds	r2, #52	; 0x34
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	f107 0118 	add.w	r1, r7, #24
 800547e:	4618      	mov	r0, r3
 8005480:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8005482:	f007 fd2f 	bl	800cee4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8005486:	4603      	mov	r3, r0
 8005488:	f107 0008 	add.w	r0, r7, #8
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	f000 f844 	bl	800551c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8005494:	f107 0308 	add.w	r3, r7, #8
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f899 	bl	80055d0 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 800549e:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f863 	bl	8005570 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80054aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10c      	bne.n	80054ca <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 80054b0:	f107 0318 	add.w	r3, r7, #24
 80054b4:	2100      	movs	r1, #0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f002 f83a 	bl	8007530 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 80054bc:	4602      	mov	r2, r0
 80054be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f006 f83f 	bl	800b548 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 80054ca:	f007 fd0b 	bl	800cee4 <_ZN12TestRegistry18getCurrentRegistryEv>
 80054ce:	4604      	mov	r4, r0
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	3344      	adds	r3, #68	; 0x44
 80054d4:	681d      	ldr	r5, [r3, #0]
 80054d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054da:	490f      	ldr	r1, [pc, #60]	; (8005518 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80054dc:	4618      	mov	r0, r3
 80054de:	f002 fb58 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80054e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054e6:	4619      	mov	r1, r3
 80054e8:	4620      	mov	r0, r4
 80054ea:	47a8      	blx	r5
 80054ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054f0:	4618      	mov	r0, r3
 80054f2:	f002 ff06 	bl	8008302 <_ZN12SimpleStringD1Ev>
    return result;
 80054f6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80054f8:	f107 0318 	add.w	r3, r7, #24
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 ff4d 	bl	800739c <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8005502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff ff6a 	bl	80053e0 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 800550c:	4623      	mov	r3, r4
}
 800550e:	4618      	mov	r0, r3
 8005510:	3760      	adds	r7, #96	; 0x60
 8005512:	46bd      	mov	sp, r7
 8005514:	bdb0      	pop	{r4, r5, r7, pc}
 8005516:	bf00      	nop
 8005518:	08016398 	.word	0x08016398

0800551c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800552a:	4a0f      	ldr	r2, [pc, #60]	; (8005568 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8005542:	2241      	movs	r2, #65	; 0x41
 8005544:	4909      	ldr	r1, [pc, #36]	; (800556c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8005546:	2038      	movs	r0, #56	; 0x38
 8005548:	f001 fc3a 	bl	8006dc0 <_ZnwjPKci>
 800554c:	4604      	mov	r4, r0
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4620      	mov	r0, r4
 8005554:	f00a fa50 	bl	800f9f8 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	609c      	str	r4, [r3, #8]
}
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4618      	mov	r0, r3
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	bd90      	pop	{r4, r7, pc}
 8005566:	bf00      	nop
 8005568:	08018ad8 	.word	0x08018ad8
 800556c:	080163ac 	.word	0x080163ac

08005570 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	3204      	adds	r2, #4
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	4790      	blx	r2
    delete output_;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d004      	beq.n	80055a2 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	3204      	adds	r2, #4
 800559c:	6812      	ldr	r2, [r2, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	4790      	blx	r2
}
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	08018ad8 	.word	0x08018ad8

080055b0 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
}
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ffd9 	bl	8005570 <_ZN21CommandLineTestRunnerD1Ev>
 80055be:	2110      	movs	r1, #16
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f001 fc11 	bl	8006de8 <_ZdlPvj>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b08c      	sub	sp, #48	; 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80055dc:	f107 031c 	add.w	r3, r7, #28
 80055e0:	4929      	ldr	r1, [pc, #164]	; (8005688 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 fad5 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80055e8:	f107 021c 	add.w	r2, r7, #28
 80055ec:	f107 0308 	add.w	r3, r7, #8
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f007 f834 	bl	800c660 <_ZN16SetPointerPluginC1ERK12SimpleString>
 80055f8:	f107 031c 	add.w	r3, r7, #28
 80055fc:	4618      	mov	r0, r3
 80055fe:	f002 fe80 	bl	8008302 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3334      	adds	r3, #52	; 0x34
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f107 0108 	add.w	r1, r7, #8
 8005614:	4610      	mov	r0, r2
 8005616:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	333c      	adds	r3, #60	; 0x3c
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4610      	mov	r0, r2
 8005628:	4798      	blx	r3
 800562a:	4603      	mov	r3, r0
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa3e 	bl	8005ab0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8ac 	bl	8005798 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8005640:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68dd      	ldr	r5, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3344      	adds	r3, #68	; 0x44
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005654:	490c      	ldr	r1, [pc, #48]	; (8005688 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8005656:	4618      	mov	r0, r3
 8005658:	f002 fa9b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800565c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005660:	4619      	mov	r1, r3
 8005662:	4628      	mov	r0, r5
 8005664:	47a0      	blx	r4
 8005666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566a:	4618      	mov	r0, r3
 800566c:	f002 fe49 	bl	8008302 <_ZN12SimpleStringD1Ev>
    return testResult;
 8005670:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8005672:	f107 0308 	add.w	r3, r7, #8
 8005676:	4618      	mov	r0, r3
 8005678:	f000 faaa 	bl	8005bd0 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 800567c:	4623      	mov	r3, r4
}
 800567e:	4618      	mov	r0, r3
 8005680:	3730      	adds	r7, #48	; 0x30
 8005682:	46bd      	mov	sp, r7
 8005684:	bdb0      	pop	{r4, r5, r7, pc}
 8005686:	bf00      	nop
 8005688:	080163d0 	.word	0x080163d0

0800568c <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 800568c:	b5b0      	push	{r4, r5, r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68dd      	ldr	r5, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3330      	adds	r3, #48	; 0x30
 80056a0:	681c      	ldr	r4, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f00a fee6 	bl	8010478 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80056ac:	4603      	mov	r3, r0
 80056ae:	4619      	mov	r1, r3
 80056b0:	4628      	mov	r0, r5
 80056b2:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68dd      	ldr	r5, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	332c      	adds	r3, #44	; 0x2c
 80056c0:	681c      	ldr	r4, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f00a fee2 	bl	8010490 <_ZNK20CommandLineArguments14getNameFiltersEv>
 80056cc:	4603      	mov	r3, r0
 80056ce:	4619      	mov	r1, r3
 80056d0:	4628      	mov	r0, r5
 80056d2:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f00a fe31 	bl	8010340 <_ZNK20CommandLineArguments9isVerboseEv>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3320      	adds	r3, #32
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2101      	movs	r1, #1
 80056f4:	4610      	mov	r0, r2
 80056f6:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f00a fe2b 	bl	8010358 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d009      	beq.n	800571c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3320      	adds	r3, #32
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2102      	movs	r1, #2
 8005718:	4610      	mov	r0, r2
 800571a:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4618      	mov	r0, r3
 8005722:	f00a fe25 	bl	8010370 <_ZNK20CommandLineArguments7isColorEv>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3324      	adds	r3, #36	; 0x24
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4610      	mov	r0, r2
 800573c:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	4618      	mov	r0, r3
 8005744:	f00a fe50 	bl	80103e8 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3360      	adds	r3, #96	; 0x60
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4610      	mov	r0, r2
 800575e:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	4618      	mov	r0, r3
 8005766:	f00a fe33 	bl	80103d0 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4618      	mov	r0, r3
 8005776:	f007 fc31 	bl	800cfdc <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4618      	mov	r0, r3
 8005780:	f00a fe56 	bl	8010430 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800578a:	f009 fce1 	bl	800f150 <_ZN10UtestShell14setCrashOnFailEv>
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005798 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8005798:	b5b0      	push	{r4, r5, r7, lr}
 800579a:	b094      	sub	sp, #80	; 0x50
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff ff73 	bl	800568c <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f00a fe22 	bl	8010400 <_ZNK20CommandLineArguments14getRepeatCountEv>
 80057bc:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f00a fde0 	bl	8010388 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d019      	beq.n	8005802 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	f107 0308 	add.w	r3, r7, #8
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f007 fdc7 	bl	800d36c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3320      	adds	r3, #32
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f107 0108 	add.w	r1, r7, #8
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
        return 0;
 80057f4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80057f6:	f107 0308 	add.w	r3, r7, #8
 80057fa:	4618      	mov	r0, r3
 80057fc:	f007 fdee 	bl	800d3dc <_ZN10TestResultD1Ev>
 8005800:	e0e1      	b.n	80059c6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f00a fdca 	bl	80103a0 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d019      	beq.n	8005846 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f007 fda5 	bl	800d36c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3324      	adds	r3, #36	; 0x24
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f107 0108 	add.w	r1, r7, #8
 8005834:	4610      	mov	r0, r2
 8005836:	4798      	blx	r3
        return 0;
 8005838:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800583a:	f107 0308 	add.w	r3, r7, #8
 800583e:	4618      	mov	r0, r3
 8005840:	f007 fdcc 	bl	800d3dc <_ZN10TestResultD1Ev>
 8005844:	e0bf      	b.n	80059c6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4618      	mov	r0, r3
 800584c:	f00a fdb4 	bl	80103b8 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d019      	beq.n	800588a <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	f107 0308 	add.w	r3, r7, #8
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f007 fd83 	bl	800d36c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3328      	adds	r3, #40	; 0x28
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f107 0108 	add.w	r1, r7, #8
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
        return 0;
 800587c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800587e:	f107 0308 	add.w	r3, r7, #8
 8005882:	4618      	mov	r0, r3
 8005884:	f007 fdaa 	bl	800d3dc <_ZN10TestResultD1Ev>
 8005888:	e09d      	b.n	80059c6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4618      	mov	r0, r3
 8005890:	f00a fdc2 	bl	8010418 <_ZNK20CommandLineArguments11isReversingEv>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	331c      	adds	r3, #28
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4610      	mov	r0, r2
 80058aa:	4798      	blx	r3

    if (arguments_->isShuffling())
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f00a fdc9 	bl	8010448 <_ZNK20CommandLineArguments11isShufflingEv>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d023      	beq.n	8005904 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	332c      	adds	r3, #44	; 0x2c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4941      	ldr	r1, [pc, #260]	; (80059d0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 80058cc:	4610      	mov	r0, r2
 80058ce:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685d      	ldr	r5, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3334      	adds	r3, #52	; 0x34
 80058dc:	681c      	ldr	r4, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f00a fdbc 	bl	8010460 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80058e8:	4603      	mov	r3, r0
 80058ea:	4619      	mov	r1, r3
 80058ec:	4628      	mov	r0, r5
 80058ee:	47a0      	blx	r4
        output_->print("\n");
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	332c      	adds	r3, #44	; 0x2c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4935      	ldr	r1, [pc, #212]	; (80059d4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8005904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	64fa      	str	r2, [r7, #76]	; 0x4c
 800590a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800590c:	429a      	cmp	r2, r3
 800590e:	bf8c      	ite	hi
 8005910:	2301      	movhi	r3, #1
 8005912:	2300      	movls	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d04e      	beq.n	80059b8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4618      	mov	r0, r3
 8005920:	f00a fd92 	bl	8010448 <_ZNK20CommandLineArguments11isShufflingEv>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00f      	beq.n	800594a <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68dd      	ldr	r5, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3318      	adds	r3, #24
 8005936:	681c      	ldr	r4, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4618      	mov	r0, r3
 800593e:	f00a fd8f 	bl	8010460 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8005942:	4603      	mov	r3, r0
 8005944:	4619      	mov	r1, r3
 8005946:	4628      	mov	r0, r5
 8005948:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6858      	ldr	r0, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3340      	adds	r3, #64	; 0x40
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800595a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800595c:	4798      	blx	r3
        TestResult tr(*output_);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f007 fcff 	bl	800d36c <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3314      	adds	r3, #20
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f107 0108 	add.w	r1, r7, #8
 8005980:	4610      	mov	r0, r2
 8005982:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8005984:	f107 0308 	add.w	r3, r7, #8
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fcef 	bl	800536c <_ZNK10TestResult15getFailureCountEv>
 800598e:	4602      	mov	r2, r0
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	4413      	add	r3, r2
 8005994:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8005996:	f107 0308 	add.w	r3, r7, #8
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fcf2 	bl	8005384 <_ZNK10TestResult9isFailureEv>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80059a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a8:	3301      	adds	r3, #1
 80059aa:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80059ac:	f107 0308 	add.w	r3, r7, #8
 80059b0:	4618      	mov	r0, r3
 80059b2:	f007 fd13 	bl	800d3dc <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80059b6:	e7a5      	b.n	8005904 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80059b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80059be:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80059c0:	e000      	b.n	80059c4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80059c2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80059c4:	bf00      	nop
 80059c6:	4623      	mov	r3, r4
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3750      	adds	r7, #80	; 0x50
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bdb0      	pop	{r4, r5, r7, pc}
 80059d0:	080163e4 	.word	0x080163e4
 80059d4:	08016410 	.word	0x08016410

080059d8 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 80059e0:	229d      	movs	r2, #157	; 0x9d
 80059e2:	4906      	ldr	r1, [pc, #24]	; (80059fc <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80059e4:	201c      	movs	r0, #28
 80059e6:	f001 f9eb 	bl	8006dc0 <_ZnwjPKci>
 80059ea:	4604      	mov	r4, r0
 80059ec:	4620      	mov	r0, r4
 80059ee:	f003 fb6d 	bl	80090cc <_ZN18TeamCityTestOutputC1Ev>
 80059f2:	4623      	mov	r3, r4
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd90      	pop	{r4, r7, pc}
 80059fc:	080163ac 	.word	0x080163ac

08005a00 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8005a0a:	22a2      	movs	r2, #162	; 0xa2
 8005a0c:	490a      	ldr	r1, [pc, #40]	; (8005a38 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8005a0e:	2014      	movs	r0, #20
 8005a10:	f001 f9d6 	bl	8006dc0 <_ZnwjPKci>
 8005a14:	4604      	mov	r4, r0
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f980 	bl	8005d1c <_ZN15JUnitTestOutputC1Ev>
 8005a1c:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fbb2 	bl	8006190 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop
 8005a38:	080163ac 	.word	0x080163ac

08005a3c <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8005a44:	22ab      	movs	r2, #171	; 0xab
 8005a46:	4906      	ldr	r1, [pc, #24]	; (8005a60 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8005a48:	2010      	movs	r0, #16
 8005a4a:	f001 f9b9 	bl	8006dc0 <_ZnwjPKci>
 8005a4e:	4604      	mov	r4, r0
 8005a50:	4620      	mov	r0, r4
 8005a52:	f7ff fcb3 	bl	80053bc <_ZN17ConsoleTestOutputC1Ev>
 8005a56:	4623      	mov	r3, r4
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd90      	pop	{r4, r7, pc}
 8005a60:	080163ac 	.word	0x080163ac

08005a64 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8005a70:	22b0      	movs	r2, #176	; 0xb0
 8005a72:	490e      	ldr	r1, [pc, #56]	; (8005aac <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8005a74:	2018      	movs	r0, #24
 8005a76:	f001 f9a3 	bl	8006dc0 <_ZnwjPKci>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f006 f99b 	bl	800bdb8 <_ZN19CompositeTestOutputC1Ev>
 8005a82:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	335c      	adds	r3, #92	; 0x5c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	6978      	ldr	r0, [r7, #20]
 8005a90:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3360      	adds	r3, #96	; 0x60
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	6978      	ldr	r0, [r7, #20]
 8005a9e:	4798      	blx	r3
  return composite;
 8005aa0:	697b      	ldr	r3, [r7, #20]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd90      	pop	{r4, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	080163ac 	.word	0x080163ac

08005ab0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8005ab0:	b5b0      	push	{r4, r5, r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f00a f855 	bl	800fb70 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f083 0301 	eor.w	r3, r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d029      	beq.n	8005b26 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3310      	adds	r3, #16
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
 8005ade:	4602      	mov	r2, r0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685d      	ldr	r5, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	332c      	adds	r3, #44	; 0x2c
 8005af0:	681c      	ldr	r4, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f00a fc16 	bl	8010328 <_ZNK20CommandLineArguments8needHelpEv>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d006      	beq.n	8005b10 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f00a fc00 	bl	801030c <_ZNK20CommandLineArguments4helpEv>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	e005      	b.n	8005b1c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f00a fbeb 	bl	80102f0 <_ZNK20CommandLineArguments5usageEv>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47a0      	blx	r4
    return false;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e050      	b.n	8005bc8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f00b fa52 	bl	8010fd4 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d02c      	beq.n	8005b90 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	681c      	ldr	r4, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f00b fa6a 	bl	801101c <_ZNK20CommandLineArguments14getPackageNameEv>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	47a0      	blx	r4
 8005b50:	4602      	mov	r2, r0
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f00a fbf0 	bl	8010340 <_ZNK20CommandLineArguments9isVerboseEv>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d02f      	beq.n	8005bc6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	681c      	ldr	r4, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685d      	ldr	r5, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3310      	adds	r3, #16
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
 8005b7e:	4603      	mov	r3, r0
 8005b80:	461a      	mov	r2, r3
 8005b82:	4629      	mov	r1, r5
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	47a0      	blx	r4
 8005b88:	4602      	mov	r2, r0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	e01a      	b.n	8005bc6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f00b fa2f 	bl	8010ff8 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
 8005bac:	4602      	mov	r2, r0
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	e008      	b.n	8005bc6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3310      	adds	r3, #16
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	605a      	str	r2, [r3, #4]
  return true;
 8005bc6:	2301      	movs	r3, #1
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bdb0      	pop	{r4, r5, r7, pc}

08005bd0 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <_ZN16SetPointerPluginD1Ev+0x20>)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f006 fbff 	bl	800c3e4 <_ZN10TestPluginD1Ev>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	08019104 	.word	0x08019104

08005bf4 <_ZN16SetPointerPluginD0Ev>:
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff ffe7 	bl	8005bd0 <_ZN16SetPointerPluginD1Ev>
 8005c02:	2114      	movs	r1, #20
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f8ef 	bl	8006de8 <_ZdlPvj>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
    }
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4910      	ldr	r1, [pc, #64]	; (8005c78 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 ffaa 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	609a      	str	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	741a      	strb	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3314      	adds	r3, #20
 8005c54:	4908      	ldr	r1, [pc, #32]	; (8005c78 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 ff9b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	61da      	str	r2, [r3, #28]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	621a      	str	r2, [r3, #32]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	08016414 	.word	0x08016414

08005c7c <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	605a      	str	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	609a      	str	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	60da      	str	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	611a      	str	r2, [r3, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	4907      	ldr	r1, [pc, #28]	; (8005cc4 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 ff72 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	61da      	str	r2, [r3, #28]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	621a      	str	r2, [r3, #32]
    {
    }
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	08016414 	.word	0x08016414

08005cc8 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3314      	adds	r3, #20
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f002 fb14 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff ffc4 	bl	8005c7c <_ZN20JUnitTestGroupResultC1Ev>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3328      	adds	r3, #40	; 0x28
 8005cf8:	4907      	ldr	r1, [pc, #28]	; (8005d18 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 ff49 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3330      	adds	r3, #48	; 0x30
 8005d04:	4904      	ldr	r1, [pc, #16]	; (8005d18 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 ff43 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	08016414 	.word	0x08016414

08005d1c <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f005 fb4e 	bl	800b3c8 <_ZN10TestOutputC1Ev>
 8005d2c:	4a09      	ldr	r2, [pc, #36]	; (8005d54 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	224d      	movs	r2, #77	; 0x4d
 8005d34:	4908      	ldr	r1, [pc, #32]	; (8005d58 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8005d36:	2038      	movs	r0, #56	; 0x38
 8005d38:	f001 f842 	bl	8006dc0 <_ZnwjPKci>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f7ff ffd0 	bl	8005ce4 <_ZN19JUnitTestOutputImplC1Ev>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	611c      	str	r4, [r3, #16]
{
}
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08018af8 	.word	0x08018af8
 8005d58:	08016418 	.word	0x08016418

08005d5c <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3330      	adds	r3, #48	; 0x30
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f002 faca 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3328      	adds	r3, #40	; 0x28
 8005d72:	4618      	mov	r0, r3
 8005d74:	f002 fac5 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff ffa4 	bl	8005cc8 <_ZN20JUnitTestGroupResultD1Ev>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	4a0c      	ldr	r2, [pc, #48]	; (8005dc8 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f838 	bl	8005e10 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691c      	ldr	r4, [r3, #16]
 8005da4:	2c00      	cmp	r4, #0
 8005da6:	d006      	beq.n	8005db6 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7ff ffd7 	bl	8005d5c <_ZN19JUnitTestOutputImplD1Ev>
 8005dae:	2138      	movs	r1, #56	; 0x38
 8005db0:	4620      	mov	r0, r4
 8005db2:	f001 f819 	bl	8006de8 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f005 fb23 	bl	800b404 <_ZN10TestOutputD1Ev>
}
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}
 8005dc8:	08018af8 	.word	0x08018af8

08005dcc <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
}
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff ffd9 	bl	8005d8c <_ZN15JUnitTestOutputD1Ev>
 8005dda:	2114      	movs	r1, #20
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 f803 	bl	8006de8 <_ZdlPvj>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3314      	adds	r3, #20
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f002 fa82 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f002 fa7e 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8005e10:	b590      	push	{r4, r7, lr}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2200      	movs	r2, #0
 8005e26:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f103 0414 	add.w	r4, r3, #20
 8005e30:	f107 0308 	add.w	r3, r7, #8
 8005e34:	491d      	ldr	r1, [pc, #116]	; (8005eac <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 feab 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8005e3c:	f107 0308 	add.w	r3, r7, #8
 8005e40:	4619      	mov	r1, r3
 8005e42:	4620      	mov	r0, r4
 8005e44:	f001 ff11 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8005e48:	f107 0308 	add.w	r3, r7, #8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f002 fa58 	bl	8008302 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	617b      	str	r3, [r7, #20]
    while (cur) {
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d018      	beq.n	8005e92 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	3204      	adds	r2, #4
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	4790      	blx	r2
        delete cur;
 8005e78:	697c      	ldr	r4, [r7, #20]
 8005e7a:	2c00      	cmp	r4, #0
 8005e7c:	d006      	beq.n	8005e8c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f7ff ffb4 	bl	8005dec <_ZN23JUnitTestCaseResultNodeD1Ev>
 8005e84:	2128      	movs	r1, #40	; 0x28
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 ffae 	bl	8006de8 <_ZdlPvj>
        cur = tmp;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	617b      	str	r3, [r7, #20]
    while (cur) {
 8005e90:	e7e3      	b.n	8005e5a <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2200      	movs	r2, #0
 8005e98:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	621a      	str	r2, [r3, #32]
}
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd90      	pop	{r4, r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	08016414 	.word	0x08016414

08005eb0 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8005eda:	b590      	push	{r4, r7, lr}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	6a1c      	ldr	r4, [r3, #32]
 8005eea:	6838      	ldr	r0, [r7, #0]
 8005eec:	f007 fbde 	bl	800d6ac <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	6a1c      	ldr	r4, [r3, #32]
 8005efa:	6838      	ldr	r0, [r7, #0]
 8005efc:	f7ff fe8a 	bl	8005c14 <_ZNK10TestResult13getCheckCountEv>
 8005f00:	4603      	mov	r3, r0
 8005f02:	6223      	str	r3, [r4, #32]
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd90      	pop	{r4, r7, pc}

08005f0c <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8005f22:	b590      	push	{r4, r7, lr}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691c      	ldr	r4, [r3, #16]
 8005f30:	6838      	ldr	r0, [r7, #0]
 8005f32:	f007 fbc7 	bl	800d6c4 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8005f36:	4603      	mov	r3, r0
 8005f38:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3364      	adds	r3, #100	; 0x64
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
    resetTestGroupResult();
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ff62 	bl	8005e10 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd90      	pop	{r4, r7, pc}

08005f54 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8005f54:	b590      	push	{r4, r7, lr}
 8005f56:	b089      	sub	sp, #36	; 0x24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	3201      	adds	r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f103 0414 	add.w	r4, r3, #20
 8005f70:	f107 0308 	add.w	r3, r7, #8
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f007 ff07 	bl	800dd8a <_ZNK10UtestShell8getGroupEv>
 8005f7c:	f107 0308 	add.w	r3, r7, #8
 8005f80:	4619      	mov	r1, r3
 8005f82:	4620      	mov	r0, r4
 8005f84:	f001 fe71 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8005f88:	f107 0308 	add.w	r3, r7, #8
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f002 f9b8 	bl	8008302 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8005f92:	4b3c      	ldr	r3, [pc, #240]	; (8006084 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4798      	blx	r3
 8005f98:	4602      	mov	r2, r0
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d110      	bne.n	8005fcc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8005faa:	2288      	movs	r2, #136	; 0x88
 8005fac:	4936      	ldr	r1, [pc, #216]	; (8006088 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8005fae:	2028      	movs	r0, #40	; 0x28
 8005fb0:	f000 ff06 	bl	8006dc0 <_ZnwjPKci>
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff fe38 	bl	8005c2c <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8005fc0:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6912      	ldr	r2, [r2, #16]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	61d3      	str	r3, [r2, #28]
 8005fca:	e013      	b.n	8005ff4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8005fcc:	228b      	movs	r2, #139	; 0x8b
 8005fce:	492e      	ldr	r1, [pc, #184]	; (8006088 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8005fd0:	2028      	movs	r0, #40	; 0x28
 8005fd2:	f000 fef5 	bl	8006dc0 <_ZnwjPKci>
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f7ff fe27 	bl	8005c2c <_ZN23JUnitTestCaseResultNodeC1Ev>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ff2:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	461c      	mov	r4, r3
 8005ffc:	f107 0310 	add.w	r3, r7, #16
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f007 feb2 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 8006008:	f107 0310 	add.w	r3, r7, #16
 800600c:	4619      	mov	r1, r3
 800600e:	4620      	mov	r0, r4
 8006010:	f001 fe2b 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8006014:	f107 0310 	add.w	r3, r7, #16
 8006018:	4618      	mov	r0, r3
 800601a:	f002 f972 	bl	8008302 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f103 0414 	add.w	r4, r3, #20
 8006028:	f107 0318 	add.w	r3, r7, #24
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f007 ff5c 	bl	800deec <_ZNK10UtestShell7getFileEv>
 8006034:	f107 0318 	add.w	r3, r7, #24
 8006038:	4619      	mov	r1, r3
 800603a:	4620      	mov	r0, r4
 800603c:	f001 fe15 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8006040:	f107 0318 	add.w	r3, r7, #24
 8006044:	4618      	mov	r0, r3
 8006046:	f002 f95c 	bl	8008302 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	6a1c      	ldr	r4, [r3, #32]
 8006050:	6838      	ldr	r0, [r7, #0]
 8006052:	f007 ff5a 	bl	800df0a <_ZNK10UtestShell13getLineNumberEv>
 8006056:	4603      	mov	r3, r0
 8006058:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3318      	adds	r3, #24
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6838      	ldr	r0, [r7, #0]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	f083 0301 	eor.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	2201      	movs	r2, #1
 800607a:	741a      	strb	r2, [r3, #16]
    }
}
 800607c:	bf00      	nop
 800607e:	3724      	adds	r7, #36	; 0x24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd90      	pop	{r4, r7, pc}
 8006084:	200000a4 	.word	0x200000a4
 8006088:	08016418 	.word	0x08016418

0800608c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8006098:	f107 0310 	add.w	r3, r7, #16
 800609c:	4928      	ldr	r1, [pc, #160]	; (8006140 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fd77 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	3328      	adds	r3, #40	; 0x28
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 f918 	bl	80082e0 <_ZNK12SimpleString7isEmptyEv>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f083 0301 	eor.w	r3, r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00f      	beq.n	80060dc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80060c4:	f107 0310 	add.w	r3, r7, #16
 80060c8:	4611      	mov	r1, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f002 f996 	bl	80083fc <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 80060d0:	f107 0310 	add.w	r3, r7, #16
 80060d4:	491b      	ldr	r1, [pc, #108]	; (8006144 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 80060d6:	4618      	mov	r0, r3
 80060d8:	f002 f9a2 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 80060dc:	f107 0310 	add.w	r3, r7, #16
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f002 f98a 	bl	80083fc <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3384      	adds	r3, #132	; 0x84
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f107 0018 	add.w	r0, r7, #24
 80060f4:	f107 0210 	add.w	r2, r7, #16
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4798      	blx	r3
 80060fc:	f107 0320 	add.w	r3, r7, #32
 8006100:	4911      	ldr	r1, [pc, #68]	; (8006148 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fd45 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f107 0220 	add.w	r2, r7, #32
 800610e:	f107 0118 	add.w	r1, r7, #24
 8006112:	4618      	mov	r0, r3
 8006114:	f002 f957 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 8006118:	f107 0320 	add.w	r3, r7, #32
 800611c:	4618      	mov	r0, r3
 800611e:	f002 f8f0 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8006122:	f107 0318 	add.w	r3, r7, #24
 8006126:	4618      	mov	r0, r3
 8006128:	f002 f8eb 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800612c:	f107 0310 	add.w	r3, r7, #16
 8006130:	4618      	mov	r0, r3
 8006132:	f002 f8e6 	bl	8008302 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8006136:	bf00      	nop
}
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	3728      	adds	r7, #40	; 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	08016434 	.word	0x08016434
 8006144:	08016440 	.word	0x08016440
 8006148:	08016444 	.word	0x08016444

0800614c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f001 fd6d 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8006160:	4b0a      	ldr	r3, [pc, #40]	; (800618c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	225f      	movs	r2, #95	; 0x5f
 8006172:	4619      	mov	r1, r3
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f001 fef2 	bl	8007f5e <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	3301      	adds	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e7f0      	b.n	8006164 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8006182:	bf00      	nop
}
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	0801644c 	.word	0x0801644c

08006190 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d006      	beq.n	80061b0 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	3328      	adds	r3, #40	; 0x28
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fd5d 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
    }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3368      	adds	r3, #104	; 0x68
 80061c6:	681c      	ldr	r4, [r3, #0]
 80061c8:	f107 0308 	add.w	r3, r7, #8
 80061cc:	4908      	ldr	r1, [pc, #32]	; (80061f0 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fcdf 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	47a0      	blx	r4
 80061de:	f107 0308 	add.w	r3, r7, #8
 80061e2:	4618      	mov	r0, r3
 80061e4:	f002 f88d 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd90      	pop	{r4, r7, pc}
 80061f0:	08016458 	.word	0x08016458

080061f4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 80061f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f8:	b08a      	sub	sp, #40	; 0x28
 80061fa:	af04      	add	r7, sp, #16
 80061fc:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8006204:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800620a:	3314      	adds	r3, #20
 800620c:	4618      	mov	r0, r3
 800620e:	f002 f84b 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8006212:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800621a:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	4a23      	ldr	r2, [pc, #140]	; (80062b0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800622a:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	4b1f      	ldr	r3, [pc, #124]	; (80062b0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006234:	fba3 1302 	umull	r1, r3, r3, r2
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4b1b      	ldr	r3, [pc, #108]	; (80062b4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4798      	blx	r3
 800624c:	4603      	mov	r3, r0
 800624e:	f107 0008 	add.w	r0, r7, #8
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	9302      	str	r3, [sp, #8]
 8006258:	9601      	str	r6, [sp, #4]
 800625a:	9500      	str	r5, [sp, #0]
 800625c:	4623      	mov	r3, r4
 800625e:	4642      	mov	r2, r8
 8006260:	4915      	ldr	r1, [pc, #84]	; (80062b8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8006262:	f002 fcdb 	bl	8008c1c <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3368      	adds	r3, #104	; 0x68
 800626c:	681c      	ldr	r4, [r3, #0]
 800626e:	f107 0308 	add.w	r3, r7, #8
 8006272:	4618      	mov	r0, r3
 8006274:	f002 f818 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8006278:	4602      	mov	r2, r0
 800627a:	f107 0310 	add.w	r3, r7, #16
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fc86 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8006286:	f107 0310 	add.w	r3, r7, #16
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	47a0      	blx	r4
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	4618      	mov	r0, r3
 8006296:	f002 f834 	bl	8008302 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800629a:	f107 0308 	add.w	r3, r7, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f002 f82f 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 80062a4:	bf00      	nop
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ae:	bf00      	nop
 80062b0:	10624dd3 	.word	0x10624dd3
 80062b4:	200000a8 	.word	0x200000a8
 80062b8:	08016484 	.word	0x08016484

080062bc <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 80062bc:	b590      	push	{r4, r7, lr}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3368      	adds	r3, #104	; 0x68
 80062ca:	681c      	ldr	r4, [r3, #0]
 80062cc:	f107 0308 	add.w	r3, r7, #8
 80062d0:	4912      	ldr	r1, [pc, #72]	; (800631c <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 fc5d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80062d8:	f107 0308 	add.w	r3, r7, #8
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	47a0      	blx	r4
 80062e2:	f107 0308 	add.w	r3, r7, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 f80b 	bl	8008302 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3368      	adds	r3, #104	; 0x68
 80062f2:	681c      	ldr	r4, [r3, #0]
 80062f4:	f107 0310 	add.w	r3, r7, #16
 80062f8:	4909      	ldr	r1, [pc, #36]	; (8006320 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fc49 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8006300:	f107 0310 	add.w	r3, r7, #16
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	47a0      	blx	r4
 800630a:	f107 0310 	add.w	r3, r7, #16
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fff7 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd90      	pop	{r4, r7, pc}
 800631c:	080164f4 	.word	0x080164f4
 8006320:	08016504 	.word	0x08016504

08006324 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 ffb9 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8006336:	4603      	mov	r3, r0
 8006338:	4619      	mov	r1, r3
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f001 fc29 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8006340:	4a0e      	ldr	r2, [pc, #56]	; (800637c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8006342:	490f      	ldr	r1, [pc, #60]	; (8006380 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 fe39 	bl	8007fbc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800634c:	490e      	ldr	r1, [pc, #56]	; (8006388 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 fe34 	bl	8007fbc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8006354:	4a0d      	ldr	r2, [pc, #52]	; (800638c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8006356:	490e      	ldr	r1, [pc, #56]	; (8006390 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f001 fe2f 	bl	8007fbc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800635e:	4a0d      	ldr	r2, [pc, #52]	; (8006394 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8006360:	490d      	ldr	r1, [pc, #52]	; (8006398 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f001 fe2a 	bl	8007fbc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8006368:	4a0c      	ldr	r2, [pc, #48]	; (800639c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800636a:	490d      	ldr	r1, [pc, #52]	; (80063a0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f001 fe25 	bl	8007fbc <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8006372:	bf00      	nop
}
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	08016514 	.word	0x08016514
 8006380:	0801651c 	.word	0x0801651c
 8006384:	08016520 	.word	0x08016520
 8006388:	08016528 	.word	0x08016528
 800638c:	0801652c 	.word	0x0801652c
 8006390:	08016534 	.word	0x08016534
 8006394:	08016538 	.word	0x08016538
 8006398:	08016540 	.word	0x08016540
 800639c:	08016544 	.word	0x08016544
 80063a0:	08016550 	.word	0x08016550

080063a4 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 80063a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a8:	b096      	sub	sp, #88	; 0x58
 80063aa:	af08      	add	r7, sp, #32
 80063ac:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80b2 	beq.w	8006522 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 80063c2:	3328      	adds	r3, #40	; 0x28
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 ff6f 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80063ca:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	3328      	adds	r3, #40	; 0x28
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 ff84 	bl	80082e0 <_ZNK12SimpleString7isEmptyEv>
 80063d8:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 80063de:	4c53      	ldr	r4, [pc, #332]	; (800652c <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 80063e0:	e000      	b.n	80063e4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 80063e2:	4c53      	ldr	r4, [pc, #332]	; (8006530 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 80063e8:	3314      	adds	r3, #20
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 ff5c 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80063f0:	4605      	mov	r5, r0
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 ff57 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80063fa:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 80063fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8006408:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800640a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	4a49      	ldr	r2, [pc, #292]	; (8006534 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8006416:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8006418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	4b45      	ldr	r3, [pc, #276]	; (8006534 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800641e:	fba3 1302 	umull	r1, r3, r3, r2
 8006422:	099b      	lsrs	r3, r3, #6
 8006424:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006432:	3314      	adds	r3, #20
 8006434:	4618      	mov	r0, r3
 8006436:	f001 ff37 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800643a:	4602      	mov	r2, r0
 800643c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f107 0014 	add.w	r0, r7, #20
 8006444:	9306      	str	r3, [sp, #24]
 8006446:	9205      	str	r2, [sp, #20]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	9204      	str	r2, [sp, #16]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	9203      	str	r2, [sp, #12]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	9601      	str	r6, [sp, #4]
 8006456:	9500      	str	r5, [sp, #0]
 8006458:	4623      	mov	r3, r4
 800645a:	4642      	mov	r2, r8
 800645c:	4936      	ldr	r1, [pc, #216]	; (8006538 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800645e:	f002 fbdd 	bl	8008c1c <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3368      	adds	r3, #104	; 0x68
 8006468:	681c      	ldr	r4, [r3, #0]
 800646a:	f107 0314 	add.w	r3, r7, #20
 800646e:	4618      	mov	r0, r3
 8006470:	f001 ff1a 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8006474:	4602      	mov	r2, r0
 8006476:	f107 031c 	add.w	r3, r7, #28
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f001 fb88 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8006482:	f107 031c 	add.w	r3, r7, #28
 8006486:	4619      	mov	r1, r3
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	47a0      	blx	r4
 800648c:	f107 031c 	add.w	r3, r7, #28
 8006490:	4618      	mov	r0, r3
 8006492:	f001 ff36 	bl	8008302 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800649c:	6a12      	ldr	r2, [r2, #32]
 800649e:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3388      	adds	r3, #136	; 0x88
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	4798      	blx	r3
 80064b6:	e017      	b.n	80064e8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	7c1b      	ldrb	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3368      	adds	r3, #104	; 0x68
 80064c6:	681c      	ldr	r4, [r3, #0]
 80064c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064cc:	491b      	ldr	r1, [pc, #108]	; (800653c <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 fb5f 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80064d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d8:	4619      	mov	r1, r3
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	47a0      	blx	r4
 80064de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 ff0d 	bl	8008302 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3368      	adds	r3, #104	; 0x68
 80064ee:	681c      	ldr	r4, [r3, #0]
 80064f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064f4:	4912      	ldr	r1, [pc, #72]	; (8006540 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 fb4b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80064fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006500:	4619      	mov	r1, r3
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	47a0      	blx	r4
 8006506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fef9 	bl	8008302 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8006510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	4618      	mov	r0, r3
 800651c:	f001 fef1 	bl	8008302 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8006520:	e749      	b.n	80063b6 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8006522:	bf00      	nop
 8006524:	3738      	adds	r7, #56	; 0x38
 8006526:	46bd      	mov	sp, r7
 8006528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800652c:	08016414 	.word	0x08016414
 8006530:	08016554 	.word	0x08016554
 8006534:	10624dd3 	.word	0x10624dd3
 8006538:	08016558 	.word	0x08016558
 800653c:	080165b4 	.word	0x080165b4
 8006540:	080165c4 	.word	0x080165c4

08006544 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8006544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006546:	b091      	sub	sp, #68	; 0x44
 8006548:	af02      	add	r7, sp, #8
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68d9      	ldr	r1, [r3, #12]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f107 0210 	add.w	r2, r7, #16
 8006560:	4610      	mov	r0, r2
 8006562:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006564:	f107 0310 	add.w	r3, r7, #16
 8006568:	4618      	mov	r0, r3
 800656a:	f001 fe9d 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800656e:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3314      	adds	r3, #20
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4610      	mov	r0, r2
 8006580:	4798      	blx	r3
 8006582:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006584:	461e      	mov	r6, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3380      	adds	r3, #128	; 0x80
 800658c:	681c      	ldr	r4, [r3, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68d9      	ldr	r1, [r3, #12]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3318      	adds	r3, #24
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f107 0220 	add.w	r2, r7, #32
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
 80065a4:	f107 0318 	add.w	r3, r7, #24
 80065a8:	f107 0220 	add.w	r2, r7, #32
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	4618      	mov	r0, r3
 80065b0:	47a0      	blx	r4
 80065b2:	f107 0318 	add.w	r3, r7, #24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 fe76 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80065bc:	4603      	mov	r3, r0
 80065be:	f107 0008 	add.w	r0, r7, #8
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	4633      	mov	r3, r6
 80065c6:	462a      	mov	r2, r5
 80065c8:	4924      	ldr	r1, [pc, #144]	; (800665c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 80065ca:	f002 fb27 	bl	8008c1c <_Z16StringFromFormatPKcz>
 80065ce:	f107 0318 	add.w	r3, r7, #24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 fe95 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80065d8:	f107 0320 	add.w	r3, r7, #32
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fe90 	bl	8008302 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 80065e2:	f107 0310 	add.w	r3, r7, #16
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 fe8b 	bl	8008302 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3368      	adds	r3, #104	; 0x68
 80065f2:	681c      	ldr	r4, [r3, #0]
 80065f4:	f107 0308 	add.w	r3, r7, #8
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 fe55 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80065fe:	4602      	mov	r2, r0
 8006600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f001 fac3 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800660c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	47a0      	blx	r4
 8006616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fe71 	bl	8008302 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3368      	adds	r3, #104	; 0x68
 8006626:	681c      	ldr	r4, [r3, #0]
 8006628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800662c:	490c      	ldr	r1, [pc, #48]	; (8006660 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800662e:	4618      	mov	r0, r3
 8006630:	f001 faaf 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8006634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	47a0      	blx	r4
 800663e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006642:	4618      	mov	r0, r3
 8006644:	f001 fe5d 	bl	8008302 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8006648:	f107 0308 	add.w	r3, r7, #8
 800664c:	4618      	mov	r0, r3
 800664e:	f001 fe58 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 8006652:	bf00      	nop
 8006654:	373c      	adds	r7, #60	; 0x3c
 8006656:	46bd      	mov	sp, r7
 8006658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665a:	bf00      	nop
 800665c:	080165d4 	.word	0x080165d4
 8006660:	08016610 	.word	0x08016610

08006664 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8006664:	b590      	push	{r4, r7, lr}
 8006666:	b08d      	sub	sp, #52	; 0x34
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3368      	adds	r3, #104	; 0x68
 8006672:	681c      	ldr	r4, [r3, #0]
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	4933      	ldr	r1, [pc, #204]	; (8006748 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800667a:	4618      	mov	r0, r3
 800667c:	f001 fa89 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8006680:	f107 0308 	add.w	r3, r7, #8
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	47a0      	blx	r4
 800668a:	f107 0308 	add.w	r3, r7, #8
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fe37 	bl	8008302 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3368      	adds	r3, #104	; 0x68
 800669a:	681c      	ldr	r4, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3380      	adds	r3, #128	; 0x80
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6912      	ldr	r2, [r2, #16]
 80066a8:	3230      	adds	r2, #48	; 0x30
 80066aa:	f107 0010 	add.w	r0, r7, #16
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	f107 0310 	add.w	r3, r7, #16
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	47a0      	blx	r4
 80066bc:	f107 0310 	add.w	r3, r7, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fe1e 	bl	8008302 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3368      	adds	r3, #104	; 0x68
 80066cc:	681c      	ldr	r4, [r3, #0]
 80066ce:	f107 0318 	add.w	r3, r7, #24
 80066d2:	491e      	ldr	r1, [pc, #120]	; (800674c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 80066d4:	4618      	mov	r0, r3
 80066d6:	f001 fa5c 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80066da:	f107 0318 	add.w	r3, r7, #24
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	47a0      	blx	r4
 80066e4:	f107 0318 	add.w	r3, r7, #24
 80066e8:	4618      	mov	r0, r3
 80066ea:	f001 fe0a 	bl	8008302 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3368      	adds	r3, #104	; 0x68
 80066f4:	681c      	ldr	r4, [r3, #0]
 80066f6:	f107 0320 	add.w	r3, r7, #32
 80066fa:	4915      	ldr	r1, [pc, #84]	; (8006750 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 fa48 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8006702:	f107 0320 	add.w	r3, r7, #32
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	47a0      	blx	r4
 800670c:	f107 0320 	add.w	r3, r7, #32
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fdf6 	bl	8008302 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3368      	adds	r3, #104	; 0x68
 800671c:	681c      	ldr	r4, [r3, #0]
 800671e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006722:	490c      	ldr	r1, [pc, #48]	; (8006754 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8006724:	4618      	mov	r0, r3
 8006726:	f001 fa34 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800672a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	47a0      	blx	r4
 8006734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006738:	4618      	mov	r0, r3
 800673a:	f001 fde2 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800673e:	bf00      	nop
 8006740:	3734      	adds	r7, #52	; 0x34
 8006742:	46bd      	mov	sp, r7
 8006744:	bd90      	pop	{r4, r7, pc}
 8006746:	bf00      	nop
 8006748:	0801661c 	.word	0x0801661c
 800674c:	0801662c 	.word	0x0801662c
 8006750:	0801663c 	.word	0x0801663c
 8006754:	08016658 	.word	0x08016658

08006758 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8006758:	b590      	push	{r4, r7, lr}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3360      	adds	r3, #96	; 0x60
 8006766:	681c      	ldr	r4, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	335c      	adds	r3, #92	; 0x5c
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6912      	ldr	r2, [r2, #16]
 8006774:	3214      	adds	r2, #20
 8006776:	f107 0008 	add.w	r0, r7, #8
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	4798      	blx	r3
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	47a0      	blx	r4
 8006788:	f107 0308 	add.w	r3, r7, #8
 800678c:	4618      	mov	r0, r3
 800678e:	f001 fdb8 	bl	8008302 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3370      	adds	r3, #112	; 0x70
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
    writeTestSuiteSummary();
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3374      	adds	r3, #116	; 0x74
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
    writeProperties();
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3378      	adds	r3, #120	; 0x78
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
    writeTestCases();
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	337c      	adds	r3, #124	; 0x7c
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
    writeFileEnding();
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	338c      	adds	r3, #140	; 0x8c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
    closeFile();
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	336c      	adds	r3, #108	; 0x6c
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd90      	pop	{r4, r7, pc}

080067e2 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	3330      	adds	r3, #48	; 0x30
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f001 fe08 	bl	8008420 <_ZN12SimpleStringpLEPKc>
}
 8006810:	bf00      	nop
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8006858:	b590      	push	{r4, r7, lr}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d113      	bne.n	8006896 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	3201      	adds	r2, #1
 8006876:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8006878:	f240 1233 	movw	r2, #307	; 0x133
 800687c:	4908      	ldr	r1, [pc, #32]	; (80068a0 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800687e:	2034      	movs	r0, #52	; 0x34
 8006880:	f000 fa9e 	bl	8006dc0 <_ZnwjPKci>
 8006884:	4604      	mov	r4, r0
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	4620      	mov	r0, r4
 800688a:	f002 ff4f 	bl	800972c <_ZN11TestFailureC1ERKS_>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	60dc      	str	r4, [r3, #12]
    }
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	bd90      	pop	{r4, r7, pc}
 800689e:	bf00      	nop
 80068a0:	08016418 	.word	0x08016418

080068a4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 80068a4:	b5b0      	push	{r4, r5, r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 80068ae:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 80068b0:	681d      	ldr	r5, [r3, #0]
 80068b2:	6838      	ldr	r0, [r7, #0]
 80068b4:	f001 fcf8 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80068b8:	4602      	mov	r2, r0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691c      	ldr	r4, [r3, #16]
 80068be:	4905      	ldr	r1, [pc, #20]	; (80068d4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 80068c0:	4610      	mov	r0, r2
 80068c2:	47a8      	blx	r5
 80068c4:	4603      	mov	r3, r0
 80068c6:	6263      	str	r3, [r4, #36]	; 0x24
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bdb0      	pop	{r4, r5, r7, pc}
 80068d0:	200000b0 	.word	0x200000b0
 80068d4:	08016668 	.word	0x08016668

080068d8 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 80068e4:	681c      	ldr	r4, [r3, #0]
 80068e6:	6838      	ldr	r0, [r7, #0]
 80068e8:	f001 fcde 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80068ec:	4602      	mov	r2, r0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	47a0      	blx	r4
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	bf00      	nop
 8006904:	200000b4 	.word	0x200000b4

08006908 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6912      	ldr	r2, [r2, #16]
 8006918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800691a:	4610      	mov	r0, r2
 800691c:	4798      	blx	r3
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	200000b8 	.word	0x200000b8

0800692c <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
        return false;
 800693a:	2300      	movs	r3, #0
    }
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
    {
 8006950:	4a04      	ldr	r2, [pc, #16]	; (8006964 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
    }
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	08018ba4 	.word	0x08018ba4

08006968 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
    }
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff ffe9 	bl	8006948 <_ZN17MemoryLeakFailureD1Ev>
 8006976:	2104      	movs	r1, #4
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa35 	bl	8006de8 <_ZdlPvj>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8006988:	b590      	push	{r4, r7, lr}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	687c      	ldr	r4, [r7, #4]
 8006992:	f000 fc71 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006996:	4603      	mov	r3, r0
 8006998:	4618      	mov	r0, r3
 800699a:	f00b f972 	bl	8011c82 <_ZN18MemoryLeakDetector8getMutexEv>
 800699e:	4603      	mov	r3, r0
 80069a0:	4619      	mov	r1, r3
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 fe4a 	bl	800763c <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd90      	pop	{r4, r7, pc}

080069b2 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fe4f 	bl	8007660 <_ZN15ScopedMutexLockD1Ev>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4618      	mov	r0, r3
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 80069d8:	f000 fc4e 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80069dc:	4604      	mov	r4, r0
 80069de:	f004 faf7 	bl	800afd0 <_Z25getCurrentMallocAllocatorv>
 80069e2:	4601      	mov	r1, r0
 80069e4:	2301      	movs	r3, #1
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4620      	mov	r0, r4
 80069f2:	f00b fb89 	bl	8012108 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd90      	pop	{r4, r7, pc}

08006a00 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8006a0c:	f000 fc34 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006a10:	4603      	mov	r3, r0
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f00b f9e3 	bl	8011de0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8006a1a:	f000 fc2d 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006a1e:	4604      	mov	r4, r0
 8006a20:	f004 fad6 	bl	800afd0 <_Z25getCurrentMallocAllocatorv>
 8006a24:	4601      	mov	r1, r0
 8006a26:	2301      	movs	r3, #1
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4620      	mov	r0, r4
 8006a34:	f00b fb9c 	bl	8012170 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8006a38:	bf00      	nop
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd90      	pop	{r4, r7, pc}

08006a40 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8006a40:	b590      	push	{r4, r7, lr}
 8006a42:	b089      	sub	sp, #36	; 0x24
 8006a44:	af04      	add	r7, sp, #16
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8006a4e:	f000 fc13 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006a52:	4604      	mov	r4, r0
 8006a54:	f004 fabc 	bl	800afd0 <_Z25getCurrentMallocAllocatorv>
 8006a58:	4601      	mov	r1, r0
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	9302      	str	r3, [sp, #8]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f00b fbe4 	bl	8012238 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8006a70:	4603      	mov	r3, r0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd90      	pop	{r4, r7, pc}
	...

08006a7c <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <_ZL13normal_mallocjPKcj+0x20>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	4798      	blx	r3
 8006a90:	4603      	mov	r3, r0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200000c4 	.word	0x200000c4

08006aa0 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <_ZL14normal_reallocPvjPKcj+0x24>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	4798      	blx	r3
 8006ab8:	4603      	mov	r3, r0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	200000c8 	.word	0x200000c8

08006ac8 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8006ad4:	4b03      	ldr	r3, [pc, #12]	; (8006ae4 <_ZL11normal_freePvPKcj+0x1c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	4798      	blx	r3
}
 8006adc:	bf00      	nop
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	200000cc 	.word	0x200000cc

08006ae8 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006ae8:	b590      	push	{r4, r7, lr}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8006af0:	f107 0308 	add.w	r3, r7, #8
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff ff47 	bl	8006988 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006afa:	f000 fbbd 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006afe:	4604      	mov	r4, r0
 8006b00:	f004 f9b6 	bl	800ae70 <_Z22getCurrentNewAllocatorv>
 8006b04:	4601      	mov	r1, r0
 8006b06:	2300      	movs	r3, #0
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f00b fa6a 	bl	8011fe4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006b10:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006b12:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8006b14:	f107 0308 	add.w	r3, r7, #8
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff ff4a 	bl	80069b2 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8006b1e:	4623      	mov	r3, r4
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd90      	pop	{r4, r7, pc}

08006b28 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006b30:	f000 fba2 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006b34:	4604      	mov	r4, r0
 8006b36:	f004 f99b 	bl	800ae70 <_Z22getCurrentNewAllocatorv>
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	4620      	mov	r0, r4
 8006b42:	f00b fa4f 	bl	8011fe4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006b46:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006b48:	68fb      	ldr	r3, [r7, #12]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}

08006b52 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8006b52:	b590      	push	{r4, r7, lr}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006b5a:	f000 fb8d 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006b5e:	4604      	mov	r4, r0
 8006b60:	f004 f986 	bl	800ae70 <_Z22getCurrentNewAllocatorv>
 8006b64:	4601      	mov	r1, r0
 8006b66:	2300      	movs	r3, #0
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f00b fa3a 	bl	8011fe4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006b70:	4603      	mov	r3, r0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd90      	pop	{r4, r7, pc}

08006b7a <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8006b7a:	b590      	push	{r4, r7, lr}
 8006b7c:	b089      	sub	sp, #36	; 0x24
 8006b7e:	af02      	add	r7, sp, #8
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8006b86:	f000 fb77 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	f004 f970 	bl	800ae70 <_Z22getCurrentNewAllocatorv>
 8006b90:	4601      	mov	r1, r0
 8006b92:	2300      	movs	r3, #0
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f00b fab2 	bl	8012108 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006ba4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006ba6:	697b      	ldr	r3, [r7, #20]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd90      	pop	{r4, r7, pc}

08006bb0 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8006bb8:	f000 fb5e 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	f004 f9af 	bl	800af20 <_Z27getCurrentNewArrayAllocatorv>
 8006bc2:	4601      	mov	r1, r0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f00b fa0b 	bl	8011fe4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006bce:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd90      	pop	{r4, r7, pc}

08006bda <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8006bda:	b590      	push	{r4, r7, lr}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8006be2:	f000 fb49 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006be6:	4604      	mov	r4, r0
 8006be8:	f004 f99a 	bl	800af20 <_Z27getCurrentNewArrayAllocatorv>
 8006bec:	4601      	mov	r1, r0
 8006bee:	2300      	movs	r3, #0
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f00b f9f6 	bl	8011fe4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006bf8:	4603      	mov	r3, r0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd90      	pop	{r4, r7, pc}

08006c02 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8006c02:	b590      	push	{r4, r7, lr}
 8006c04:	b089      	sub	sp, #36	; 0x24
 8006c06:	af02      	add	r7, sp, #8
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8006c0e:	f000 fb33 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006c12:	4604      	mov	r4, r0
 8006c14:	f004 f984 	bl	800af20 <_Z27getCurrentNewArrayAllocatorv>
 8006c18:	4601      	mov	r1, r0
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9301      	str	r3, [sp, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4620      	mov	r0, r4
 8006c28:	f00b fa6e 	bl	8012108 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006c2c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006c2e:	697b      	ldr	r3, [r7, #20]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd90      	pop	{r4, r7, pc}

08006c38 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8006c40:	f000 fb1a 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006c44:	4603      	mov	r3, r0
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f00b f8c9 	bl	8011de0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8006c4e:	f000 fb13 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006c52:	4604      	mov	r4, r0
 8006c54:	f004 f90c 	bl	800ae70 <_Z22getCurrentNewAllocatorv>
 8006c58:	4601      	mov	r1, r0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f00b fad0 	bl	8012204 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd90      	pop	{r4, r7, pc}

08006c6c <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8006c74:	f000 fb00 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f00b f8af 	bl	8011de0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8006c82:	f000 faf9 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006c86:	4604      	mov	r4, r0
 8006c88:	f004 f94a 	bl	800af20 <_Z27getCurrentNewArrayAllocatorv>
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4620      	mov	r0, r4
 8006c94:	f00b fab6 	bl	8012204 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd90      	pop	{r4, r7, pc}

08006ca0 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <_ZL19normal_operator_newj+0x1c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
 8006cb0:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	200000c4 	.word	0x200000c4

08006cc0 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006cc8:	4b04      	ldr	r3, [pc, #16]	; (8006cdc <_ZL27normal_operator_new_nothrowj+0x1c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
 8006cd0:	4603      	mov	r3, r0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200000c4 	.word	0x200000c4

08006ce0 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006cec:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	4798      	blx	r3
 8006cf4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006cf6:	697b      	ldr	r3, [r7, #20]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200000c4 	.word	0x200000c4

08006d04 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <_ZL25normal_operator_new_arrayj+0x1c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
 8006d14:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006d16:	68fb      	ldr	r3, [r7, #12]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	200000c4 	.word	0x200000c4

08006d24 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006d2c:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
 8006d34:	4603      	mov	r3, r0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	200000c4 	.word	0x200000c4

08006d44 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006d50:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	4798      	blx	r3
 8006d58:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006d5a:	697b      	ldr	r3, [r7, #20]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	200000c4 	.word	0x200000c4

08006d68 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <_ZL22normal_operator_deletePv+0x18>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	200000cc 	.word	0x200000cc

08006d84 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8006d8c:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <_ZL28normal_operator_delete_arrayPv+0x18>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
}
 8006d94:	bf00      	nop
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	200000cc 	.word	0x200000cc

08006da0 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8006da8:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <_Znwj+0x1c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
 8006db0:	4603      	mov	r3, r0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000028 	.word	0x20000028

08006dc0 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <_ZnwjPKci+0x24>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	4798      	blx	r3
 8006dd8:	4603      	mov	r3, r0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000030 	.word	0x20000030

08006de8 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8006df2:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <_ZdlPvj+0x1c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000040 	.word	0x20000040

08006e08 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <_ZnajPKci+0x24>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	4798      	blx	r3
 8006e20:	4603      	mov	r3, r0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	2000003c 	.word	0x2000003c

08006e30 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8006e38:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <_ZdaPv+0x18>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	20000044 	.word	0x20000044

08006e4c <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8006e56:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <_ZdaPvj+0x1c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000044 	.word	0x20000044

08006e6c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8006e70:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8006e72:	4a13      	ldr	r2, [pc, #76]	; (8006ec0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8006e74:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8006e76:	4b13      	ldr	r3, [pc, #76]	; (8006ec4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8006e78:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8006e7a:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8006e7c:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8006e7e:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8006e80:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8006e82:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8006e84:	4a14      	ldr	r2, [pc, #80]	; (8006ed8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8006e86:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8006e88:	4b14      	ldr	r3, [pc, #80]	; (8006edc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8006e8a:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8006e8c:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8006e90:	4a15      	ldr	r2, [pc, #84]	; (8006ee8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8006e92:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8006e94:	4b15      	ldr	r3, [pc, #84]	; (8006eec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8006e96:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8006e98:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8006e9a:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8006e9c:	4a16      	ldr	r2, [pc, #88]	; (8006ef8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8006e9e:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8006ea0:	4b16      	ldr	r3, [pc, #88]	; (8006efc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8006ea2:	4a17      	ldr	r2, [pc, #92]	; (8006f00 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8006ea4:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8006ea6:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8006ea8:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8006eaa:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8006eac:	4b17      	ldr	r3, [pc, #92]	; (8006f0c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8006eae:	4a18      	ldr	r2, [pc, #96]	; (8006f10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8006eb0:	601a      	str	r2, [r3, #0]

#endif
}
 8006eb2:	bf00      	nop
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	20000028 	.word	0x20000028
 8006ec0:	08006ca1 	.word	0x08006ca1
 8006ec4:	2000002c 	.word	0x2000002c
 8006ec8:	08006cc1 	.word	0x08006cc1
 8006ecc:	20000030 	.word	0x20000030
 8006ed0:	08006ce1 	.word	0x08006ce1
 8006ed4:	20000034 	.word	0x20000034
 8006ed8:	08006d05 	.word	0x08006d05
 8006edc:	20000038 	.word	0x20000038
 8006ee0:	08006d25 	.word	0x08006d25
 8006ee4:	2000003c 	.word	0x2000003c
 8006ee8:	08006d45 	.word	0x08006d45
 8006eec:	20000040 	.word	0x20000040
 8006ef0:	08006d69 	.word	0x08006d69
 8006ef4:	20000044 	.word	0x20000044
 8006ef8:	08006d85 	.word	0x08006d85
 8006efc:	20000010 	.word	0x20000010
 8006f00:	08006a7d 	.word	0x08006a7d
 8006f04:	20000018 	.word	0x20000018
 8006f08:	08006aa1 	.word	0x08006aa1
 8006f0c:	20000014 	.word	0x20000014
 8006f10:	08006ac9 	.word	0x08006ac9

08006f14 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8006f18:	4b08      	ldr	r3, [pc, #32]	; (8006f3c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a08      	ldr	r2, [pc, #32]	; (8006f40 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d004      	beq.n	8006f2c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8006f22:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a07      	ldr	r2, [pc, #28]	; (8006f44 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d101      	bne.n	8006f30 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8006f30:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000028 	.word	0x20000028
 8006f40:	08006b29 	.word	0x08006b29
 8006f44:	08006ae9 	.word	0x08006ae9

08006f48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8006f4c:	4b1f      	ldr	r3, [pc, #124]	; (8006fcc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	4a1e      	ldr	r2, [pc, #120]	; (8006fcc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	bfcc      	ite	gt
 8006f5e:	2301      	movgt	r3, #1
 8006f60:	2300      	movle	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d12e      	bne.n	8006fc6 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8006f68:	4b19      	ldr	r3, [pc, #100]	; (8006fd0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8006f6e:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8006f70:	4b19      	ldr	r3, [pc, #100]	; (8006fd8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a19      	ldr	r2, [pc, #100]	; (8006fdc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8006f76:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a19      	ldr	r2, [pc, #100]	; (8006fe4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8006f7e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8006f80:	4b19      	ldr	r3, [pc, #100]	; (8006fe8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a19      	ldr	r2, [pc, #100]	; (8006fec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8006f86:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8006f88:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8006f8e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8006f90:	4b19      	ldr	r3, [pc, #100]	; (8006ff8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a19      	ldr	r2, [pc, #100]	; (8006ffc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8006f96:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8006f98:	4b19      	ldr	r3, [pc, #100]	; (8007000 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8006f9e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8006fa0:	4b19      	ldr	r3, [pc, #100]	; (8007008 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a19      	ldr	r2, [pc, #100]	; (800700c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8006fa6:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8006fa8:	4b19      	ldr	r3, [pc, #100]	; (8007010 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a19      	ldr	r2, [pc, #100]	; (8007014 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8006fae:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8006fb0:	4b19      	ldr	r3, [pc, #100]	; (8007018 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a19      	ldr	r2, [pc, #100]	; (800701c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8006fb6:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8006fb8:	4b19      	ldr	r3, [pc, #100]	; (8007020 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	; (8007024 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8006fbe:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8006fc0:	f7ff ff54 	bl	8006e6c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8006fc4:	e000      	b.n	8006fc8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8006fc6:	bf00      	nop
#endif
}
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	200005d0 	.word	0x200005d0
 8006fd0:	20000028 	.word	0x20000028
 8006fd4:	20000048 	.word	0x20000048
 8006fd8:	2000002c 	.word	0x2000002c
 8006fdc:	2000004c 	.word	0x2000004c
 8006fe0:	20000030 	.word	0x20000030
 8006fe4:	20000050 	.word	0x20000050
 8006fe8:	20000034 	.word	0x20000034
 8006fec:	20000054 	.word	0x20000054
 8006ff0:	20000038 	.word	0x20000038
 8006ff4:	20000058 	.word	0x20000058
 8006ff8:	2000003c 	.word	0x2000003c
 8006ffc:	2000005c 	.word	0x2000005c
 8007000:	20000040 	.word	0x20000040
 8007004:	20000060 	.word	0x20000060
 8007008:	20000044 	.word	0x20000044
 800700c:	20000064 	.word	0x20000064
 8007010:	20000010 	.word	0x20000010
 8007014:	2000001c 	.word	0x2000001c
 8007018:	20000018 	.word	0x20000018
 800701c:	20000024 	.word	0x20000024
 8007020:	20000014 	.word	0x20000014
 8007024:	20000020 	.word	0x20000020

08007028 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800702c:	4b1f      	ldr	r3, [pc, #124]	; (80070ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3b01      	subs	r3, #1
 8007032:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	bfcc      	ite	gt
 800703e:	2301      	movgt	r3, #1
 8007040:	2300      	movle	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d12c      	bne.n	80070a2 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8007048:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800704e:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8007050:	4b19      	ldr	r3, [pc, #100]	; (80070b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a19      	ldr	r2, [pc, #100]	; (80070bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8007056:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8007058:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a19      	ldr	r2, [pc, #100]	; (80070c4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800705e:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8007060:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a19      	ldr	r2, [pc, #100]	; (80070cc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8007066:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8007068:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a19      	ldr	r2, [pc, #100]	; (80070d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800706e:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8007070:	4b19      	ldr	r3, [pc, #100]	; (80070d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a19      	ldr	r2, [pc, #100]	; (80070dc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8007076:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800707e:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8007080:	4b19      	ldr	r3, [pc, #100]	; (80070e8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a19      	ldr	r2, [pc, #100]	; (80070ec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8007086:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8007088:	4b19      	ldr	r3, [pc, #100]	; (80070f0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a19      	ldr	r2, [pc, #100]	; (80070f4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800708e:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8007090:	4b19      	ldr	r3, [pc, #100]	; (80070f8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a19      	ldr	r2, [pc, #100]	; (80070fc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8007096:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8007098:	4b19      	ldr	r3, [pc, #100]	; (8007100 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a19      	ldr	r2, [pc, #100]	; (8007104 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e000      	b.n	80070a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 80070a2:	bf00      	nop
#endif
}
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	200005d0 	.word	0x200005d0
 80070b0:	20000048 	.word	0x20000048
 80070b4:	20000028 	.word	0x20000028
 80070b8:	2000004c 	.word	0x2000004c
 80070bc:	2000002c 	.word	0x2000002c
 80070c0:	20000050 	.word	0x20000050
 80070c4:	20000030 	.word	0x20000030
 80070c8:	20000054 	.word	0x20000054
 80070cc:	20000034 	.word	0x20000034
 80070d0:	20000058 	.word	0x20000058
 80070d4:	20000038 	.word	0x20000038
 80070d8:	2000005c 	.word	0x2000005c
 80070dc:	2000003c 	.word	0x2000003c
 80070e0:	20000060 	.word	0x20000060
 80070e4:	20000040 	.word	0x20000040
 80070e8:	20000064 	.word	0x20000064
 80070ec:	20000044 	.word	0x20000044
 80070f0:	2000001c 	.word	0x2000001c
 80070f4:	20000010 	.word	0x20000010
 80070f8:	20000024 	.word	0x20000024
 80070fc:	20000018 	.word	0x20000018
 8007100:	20000020 	.word	0x20000020
 8007104:	20000014 	.word	0x20000014

08007108 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
    {
 8007110:	4a05      	ldr	r2, [pc, #20]	; (8007128 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fc15 	bl	8006948 <_ZN17MemoryLeakFailureD1Ev>
    }
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	08018b90 	.word	0x08018b90

0800712c <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
    }
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ffe7 	bl	8007108 <_ZN25MemoryLeakWarningReporterD1Ev>
 800713a:	2104      	movs	r1, #4
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff fe53 	bl	8006de8 <_ZdlPvj>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	4a04      	ldr	r2, [pc, #16]	; (8007168 <_ZN14TestTerminatorC1Ev+0x1c>)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	080193e8 	.word	0x080193e8

0800716c <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff ffe8 	bl	800714c <_ZN14TestTerminatorC1Ev>
 800717c:	4a03      	ldr	r2, [pc, #12]	; (800718c <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	080193c0 	.word	0x080193c0

08007190 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8007190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007192:	b099      	sub	sp, #100	; 0x64
 8007194:	af02      	add	r7, sp, #8
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800719a:	f007 ffbd 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 800719e:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 80071a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	339c      	adds	r3, #156	; 0x9c
 80071a6:	681c      	ldr	r4, [r3, #0]
 80071a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071ae:	4618      	mov	r0, r3
 80071b0:	f006 fddc 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 80071b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80071b8:	4618      	mov	r0, r3
 80071ba:	f001 f875 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80071be:	4605      	mov	r5, r0
 80071c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80071c2:	f006 fea2 	bl	800df0a <_ZNK10UtestShell13getLineNumberEv>
 80071c6:	4606      	mov	r6, r0
 80071c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fcdf 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80071d4:	f107 000c 	add.w	r0, r7, #12
 80071d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4633      	mov	r3, r6
 80071e0:	462a      	mov	r2, r5
 80071e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071e4:	f002 ff2c 	bl	800a040 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80071e8:	2300      	movs	r3, #0
 80071ea:	653b      	str	r3, [r7, #80]	; 0x50
 80071ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff ffbb 	bl	800716c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80071f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80071fa:	f107 030c 	add.w	r3, r7, #12
 80071fe:	4619      	mov	r1, r3
 8007200:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007202:	47a0      	blx	r4
 8007204:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007208:	4618      	mov	r0, r3
 800720a:	f008 f87f 	bl	800f30c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800720e:	f107 030c 	add.w	r3, r7, #12
 8007212:	4618      	mov	r0, r3
 8007214:	f000 f9ac 	bl	8007570 <_ZN11FailFailureD1Ev>
 8007218:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800721c:	4618      	mov	r0, r3
 800721e:	f001 f870 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8007222:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007226:	4618      	mov	r0, r3
 8007228:	f001 f86b 	bl	8008302 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800722c:	bf00      	nop
 800722e:	375c      	adds	r7, #92	; 0x5c
 8007230:	46bd      	mov	sp, r7
 8007232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007234 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	4a04      	ldr	r2, [pc, #16]	; (8007250 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	08018ba4 	.word	0x08018ba4

08007254 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff ffe8 	bl	8007234 <_ZN17MemoryLeakFailureC1Ev>
 8007264:	4a03      	ldr	r2, [pc, #12]	; (8007274 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	08018b90 	.word	0x08018b90

08007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8007278:	b598      	push	{r3, r4, r7, lr}
 800727a:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800727c:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11b      	bne.n	80072bc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8007284:	f7ff fe60 	bl	8006f48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8007288:	2004      	movs	r0, #4
 800728a:	f7ff fd89 	bl	8006da0 <_Znwj>
 800728e:	4603      	mov	r3, r0
 8007290:	461c      	mov	r4, r3
 8007292:	4620      	mov	r0, r4
 8007294:	f7ff ffde 	bl	8007254 <_ZN25MemoryLeakWarningReporterC1Ev>
 8007298:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800729a:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800729c:	f241 1050 	movw	r0, #4432	; 0x1150
 80072a0:	f7ff fd7e 	bl	8006da0 <_Znwj>
 80072a4:	4603      	mov	r3, r0
 80072a6:	461c      	mov	r4, r3
 80072a8:	4b07      	ldr	r3, [pc, #28]	; (80072c8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	4620      	mov	r0, r4
 80072b0:	f00a fc44 	bl	8011b3c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80072b6:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 80072b8:	f7ff feb6 	bl	8007028 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 80072bc:	4b01      	ldr	r3, [pc, #4]	; (80072c4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80072be:	681b      	ldr	r3, [r3, #0]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	bd98      	pop	{r3, r4, r7, pc}
 80072c4:	200005d8 	.word	0x200005d8
 80072c8:	200005d4 	.word	0x200005d4

080072cc <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	765a      	strb	r2, [r3, #25]
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 80072f0:	f7ff fdbc 	bl	8006e6c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	3204      	adds	r2, #4
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	4790      	blx	r2
    delete globalReporter;
 8007306:	4b08      	ldr	r3, [pc, #32]	; (8007328 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	3204      	adds	r2, #4
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	4790      	blx	r2
    globalDetector = NULLPTR;
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
}
 800731e:	bf00      	nop
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	200005d8 	.word	0x200005d8
 8007328:	200005d4 	.word	0x200005d4

0800732c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	4618      	mov	r0, r3
 800733e:	f005 f815 	bl	800c36c <_ZN10TestPluginC1ERK12SimpleString>
 8007342:	4a14      	ldr	r2, [pc, #80]	; (8007394 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	761a      	strb	r2, [r3, #24]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	765a      	strb	r2, [r3, #25]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800735a:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8007362:	4a0d      	ldr	r2, [pc, #52]	; (8007398 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	615a      	str	r2, [r3, #20]
 8007374:	e004      	b.n	8007380 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8007376:	f7ff ff7f 	bl	8007278 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800737a:	4602      	mov	r2, r0
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	4618      	mov	r0, r3
 8007386:	f00a fc6f 	bl	8011c68 <_ZN18MemoryLeakDetector6enableEv>
}
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	08018bb8 	.word	0x08018bb8
 8007398:	200005dc 	.word	0x200005dc

0800739c <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	4a09      	ldr	r2, [pc, #36]	; (80073cc <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7e5b      	ldrb	r3, [r3, #25]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 80073b2:	f7ff fd5b 	bl	8006e6c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 80073b6:	f7ff ff99 	bl	80072ec <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4618      	mov	r0, r3
 80073be:	f005 f811 	bl	800c3e4 <_ZN10TestPluginD1Ev>
    }
}
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	08018bb8 	.word	0x08018bb8

080073d0 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
}
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff ffdf 	bl	800739c <_ZN23MemoryLeakWarningPluginD1Ev>
 80073de:	2124      	movs	r1, #36	; 0x24
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fd01 	bl	8006de8 <_ZdlPvj>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	4618      	mov	r0, r3
 8007402:	f00a fc14 	bl	8011c2e <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fd ffb0 	bl	800536c <_ZNK10TestResult15getFailureCountEv>
 800740c:	4602      	mov	r2, r0
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	621a      	str	r2, [r3, #32]
}
 8007412:	bf00      	nop
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800741c:	b590      	push	{r4, r7, lr}
 800741e:	b097      	sub	sp, #92	; 0x5c
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	4618      	mov	r0, r3
 800742e:	f00a fc0e 	bl	8011c4e <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	2103      	movs	r1, #3
 8007438:	4618      	mov	r0, r3
 800743a:	f00a ffab 	bl	8012394 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800743e:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	7e1b      	ldrb	r3, [r3, #24]
 8007444:	f083 0301 	eor.w	r3, r3, #1
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007454:	429a      	cmp	r2, r3
 8007456:	d009      	beq.n	800746c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1c      	ldr	r4, [r3, #32]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fd ff85 	bl	800536c <_ZNK10TestResult15getFailureCountEv>
 8007462:	4603      	mov	r3, r0
 8007464:	429c      	cmp	r4, r3
 8007466:	d101      	bne.n	800746c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800746c:	2300      	movs	r3, #0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d04c      	beq.n	800750c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8007472:	f7ff fd4f 	bl	8006f14 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d028      	beq.n	80074ce <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	2103      	movs	r1, #3
 8007482:	4618      	mov	r0, r3
 8007484:	f00a ff4b 	bl	801231e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8007488:	4602      	mov	r2, r0
 800748a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fb7e 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8007496:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800749a:	f107 0310 	add.w	r3, r7, #16
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f002 f8c7 	bl	8009634 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 80074a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 ff29 	bl	8008302 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3334      	adds	r3, #52	; 0x34
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f107 0210 	add.w	r2, r7, #16
 80074bc:	4611      	mov	r1, r2
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80074c2:	f107 0310 	add.w	r3, r7, #16
 80074c6:	4618      	mov	r0, r3
 80074c8:	f002 f974 	bl	80097b4 <_ZN11TestFailureD1Ev>
 80074cc:	e01e      	b.n	800750c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01a      	beq.n	800750c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3338      	adds	r3, #56	; 0x38
 80074dc:	681c      	ldr	r4, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80074e8:	4910      	ldr	r1, [pc, #64]	; (800752c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 fb96 	bl	8008c1c <_Z16StringFromFormatPKcz>
 80074f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fed7 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80074fa:	4603      	mov	r3, r0
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	47a0      	blx	r4
 8007502:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fefb 	bl	8008302 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	4618      	mov	r0, r3
 8007512:	f00a ff19 	bl	8012348 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	61da      	str	r2, [r3, #28]
}
 8007522:	bf00      	nop
 8007524:	375c      	adds	r7, #92	; 0x5c
 8007526:	46bd      	mov	sp, r7
 8007528:	bd90      	pop	{r4, r7, pc}
 800752a:	bf00      	nop
 800752c:	0801666c 	.word	0x0801666c

08007530 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	2102      	movs	r1, #2
 8007540:	4618      	mov	r0, r3
 8007542:	f00a ff27 	bl	8012394 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8007546:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d007      	beq.n	8007560 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	2102      	movs	r1, #2
 8007556:	4618      	mov	r0, r3
 8007558:	f00a fee1 	bl	801231e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800755c:	4603      	mov	r3, r0
 800755e:	e000      	b.n	8007562 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8007560:	4b02      	ldr	r3, [pc, #8]	; (800756c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	080166ac 	.word	0x080166ac

08007570 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	4a05      	ldr	r2, [pc, #20]	; (8007590 <_ZN11FailFailureD1Ev+0x20>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	f002 f917 	bl	80097b4 <_ZN11TestFailureD1Ev>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	08018c00 	.word	0x08018c00

08007594 <_ZN11FailFailureD0Ev>:
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff ffe7 	bl	8007570 <_ZN11FailFailureD1Ev>
 80075a2:	2134      	movs	r1, #52	; 0x34
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff fc1f 	bl	8006de8 <_ZdlPvj>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 80075bc:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <_ZN11SimpleMutexC1Ev+0x20>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4798      	blx	r3
 80075c2:	4602      	mov	r2, r0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
}
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200000e8 	.word	0x200000e8

080075d8 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <_ZN11SimpleMutexD1Ev+0x20>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	6812      	ldr	r2, [r2, #0]
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
}
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	200000f4 	.word	0x200000f4

080075fc <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <_ZN11SimpleMutex4LockEv+0x1c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200000ec 	.word	0x200000ec

0800761c <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 8007624:	4b04      	ldr	r3, [pc, #16]	; (8007638 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	200000f0 	.word	0x200000f0

0800763c <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff ffd3 	bl	80075fc <_ZN11SimpleMutex4LockEv>
}
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff ffd5 	bl	800761c <_ZN11SimpleMutex6UnlockEv>
}
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d103      	bne.n	8007690 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 8007688:	f003 fc6c 	bl	800af64 <_Z24defaultNewArrayAllocatorv>
 800768c:	4603      	mov	r3, r0
 800768e:	e001      	b.n	8007694 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 8007690:	4b01      	ldr	r3, [pc, #4]	; (8007698 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8007692:	681b      	ldr	r3, [r3, #0]
}
 8007694:	4618      	mov	r0, r3
 8007696:	bd80      	pop	{r7, pc}
 8007698:	200005e0 	.word	0x200005e0

0800769c <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 80076a8:	f7ff ffe8 	bl	800767c <_ZN12SimpleString18getStringAllocatorEv>
 80076ac:	6803      	ldr	r3, [r0, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	681c      	ldr	r4, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	68f9      	ldr	r1, [r7, #12]
 80076b8:	47a0      	blx	r4
 80076ba:	4603      	mov	r3, r0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd90      	pop	{r4, r7, pc}

080076c4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 80076d2:	f7ff ffd3 	bl	800767c <_ZN12SimpleString18getStringAllocatorEv>
 80076d6:	6803      	ldr	r3, [r0, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	681c      	ldr	r4, [r3, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	68f9      	ldr	r1, [r7, #12]
 80076e6:	47a0      	blx	r4
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd90      	pop	{r4, r7, pc}

080076f0 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 80076f8:	2284      	movs	r2, #132	; 0x84
 80076fa:	4906      	ldr	r1, [pc, #24]	; (8007714 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 80076fc:	2001      	movs	r0, #1
 80076fe:	f7ff ffcd 	bl	800769c <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007702:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
    return empty;
 800770a:	68fb      	ldr	r3, [r7, #12]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	080166b0 	.word	0x080166b0

08007718 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	4618      	mov	r0, r3
 8007726:	f001 f809 	bl	800873c <_ZN12SimpleString7isSpaceEc>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <_ZN12SimpleString4AtoUEPKc+0x20>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3301      	adds	r3, #1
 8007734:	607b      	str	r3, [r7, #4]
 8007736:	e7f3      	b.n	8007720 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 ffe7 	bl	8008714 <_ZN12SimpleString7isDigitEc>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <_ZN12SimpleString4AtoUEPKc+0x40>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b2f      	cmp	r3, #47	; 0x2f
 8007752:	d901      	bls.n	8007758 <_ZN12SimpleString4AtoUEPKc+0x40>
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <_ZN12SimpleString4AtoUEPKc+0x42>
 8007758:	2300      	movs	r3, #0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d010      	beq.n	8007780 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4413      	add	r3, r2
 8007774:	3b30      	subs	r3, #48	; 0x30
 8007776:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3301      	adds	r3, #1
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	e7dd      	b.n	800773c <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 8007780:	68fb      	ldr	r3, [r7, #12]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 ffd0 	bl	800873c <_ZN12SimpleString7isSpaceEc>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <_ZN12SimpleString4AtoIEPKc+0x20>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3301      	adds	r3, #1
 80077a6:	607b      	str	r3, [r7, #4]
 80077a8:	e7f3      	b.n	8007792 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 80077b0:	7afb      	ldrb	r3, [r7, #11]
 80077b2:	2b2d      	cmp	r3, #45	; 0x2d
 80077b4:	d002      	beq.n	80077bc <_ZN12SimpleString4AtoIEPKc+0x32>
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	2b2b      	cmp	r3, #43	; 0x2b
 80077ba:	d102      	bne.n	80077c2 <_ZN12SimpleString4AtoIEPKc+0x38>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3301      	adds	r3, #1
 80077c0:	607b      	str	r3, [r7, #4]

    int  result = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 ffa2 	bl	8008714 <_ZN12SimpleString7isDigitEc>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00f      	beq.n	80077f6 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	3b30      	subs	r3, #48	; 0x30
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3301      	adds	r3, #1
 80077f2:	607b      	str	r3, [r7, #4]
 80077f4:	e7e7      	b.n	80077c6 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	2b2d      	cmp	r3, #45	; 0x2d
 80077fa:	d102      	bne.n	8007802 <_ZN12SimpleString4AtoIEPKc+0x78>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	425b      	negs	r3, r3
 8007800:	e000      	b.n	8007804 <_ZN12SimpleString4AtoIEPKc+0x7a>
 8007802:	68fb      	ldr	r3, [r7, #12]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	781a      	ldrb	r2, [r3, #0]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d106      	bne.n	8007838 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3301      	adds	r3, #1
 800782e:	607b      	str	r3, [r7, #4]
       ++s2;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	3301      	adds	r3, #1
 8007834:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8007836:	e7ee      	b.n	8007816 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	1ad3      	subs	r3, r2, r3
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 8007858:	f04f 33ff 	mov.w	r3, #4294967295
 800785c:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	607a      	str	r2, [r7, #4]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf14      	ite	ne
 8007870:	2301      	movne	r3, #1
 8007872:	2300      	moveq	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d000      	beq.n	800787c <_ZN12SimpleString6StrLenEPKc+0x2c>
 800787a:	e7f0      	b.n	800785e <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800787c:	68fb      	ldr	r3, [r7, #12]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d013      	beq.n	80078c4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00f      	beq.n	80078c4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	781a      	ldrb	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d109      	bne.n	80078c4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	607b      	str	r3, [r7, #4]
        ++s1;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
        ++s2;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	3301      	adds	r3, #1
 80078c0:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 80078c2:	e7e8      	b.n	8007896 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d006      	beq.n	80078d8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	e000      	b.n	80078da <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b087      	sub	sp, #28
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
    char* result = s1;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	e01e      	b.n	8007944 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	781a      	ldrb	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3b01      	subs	r3, #1
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8007922:	2301      	movs	r3, #1
 8007924:	e000      	b.n	8007928 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 8007926:	2300      	movs	r3, #0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3301      	adds	r3, #1
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3301      	adds	r3, #1
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	781a      	ldrb	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8007940:	e7e5      	b.n	800790e <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 8007942:	697b      	ldr	r3, [r7, #20]
}
 8007944:	4618      	mov	r0, r3
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	e01b      	b.n	800799e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800796e:	6838      	ldr	r0, [r7, #0]
 8007970:	f7ff ff6e 	bl	8007850 <_ZN12SimpleString6StrLenEPKc>
 8007974:	4603      	mov	r3, r0
 8007976:	461a      	mov	r2, r3
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff ff85 	bl	800788a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	bf0c      	ite	eq
 8007986:	2301      	moveq	r3, #1
 8007988:	2300      	movne	r3, #0
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	e004      	b.n	800799e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3301      	adds	r3, #1
 8007998:	607b      	str	r3, [r7, #4]
 800799a:	e7e4      	b.n	8007966 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	4603      	mov	r3, r0
 80079ae:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fed9 	bl	800876a <_ZN12SimpleString7isUpperEc>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <_ZN12SimpleString7ToLowerEc+0x20>
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	3320      	adds	r3, #32
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	e000      	b.n	80079c8 <_ZN12SimpleString7ToLowerEc+0x22>
 80079c6:	79fb      	ldrb	r3, [r7, #7]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	613b      	str	r3, [r7, #16]

    while (n--)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	1e5a      	subs	r2, r3, #1
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d013      	beq.n	8007a20 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	781a      	ldrb	r2, [r3, #0]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d006      	beq.n	8007a12 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	e007      	b.n	8007a22 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	3301      	adds	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
            ++p2;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	613b      	str	r3, [r7, #16]
    while (n--)
 8007a1e:	e7e1      	b.n	80079e4 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
	...

08007a30 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00d      	beq.n	8007a5c <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6859      	ldr	r1, [r3, #4]
 8007a48:	23ee      	movs	r3, #238	; 0xee
 8007a4a:	4a06      	ldr	r2, [pc, #24]	; (8007a64 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 8007a4c:	f7ff fe3a 	bl	80076c4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	605a      	str	r2, [r3, #4]
    }
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	080166b0 	.word	0x080166b0

08007a68 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff ffdd 	bl	8007a30 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fe37 	bl	80076f0 <_ZNK12SimpleString14getEmptyStringEv>
 8007a82:	4602      	mov	r2, r0
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff ffc7 	bl	8007a30 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	4619      	mov	r1, r3
 8007aae:	68b8      	ldr	r0, [r7, #8]
 8007ab0:	f000 fe12 	bl	80086d8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	601a      	str	r2, [r3, #0]
}
 8007aba:	bf00      	nop
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff ffae 	bl	8007a30 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f240 1209 	movw	r2, #265	; 0x109
 8007ae2:	4907      	ldr	r1, [pc, #28]	; (8007b00 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fdd9 	bl	800769c <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007aea:	4602      	mov	r2, r0
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2200      	movs	r2, #0
 8007af6:	701a      	strb	r2, [r3, #0]
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	080166b0 	.word	0x080166b0

08007b04 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7ff ff8d 	bl	8007a30 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	601a      	str	r2, [r3, #0]
}
 8007b22:	bf00      	nop
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 8007b2a:	b590      	push	{r4, r7, lr}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681c      	ldr	r4, [r3, #0]
 8007b38:	6838      	ldr	r0, [r7, #0]
 8007b3a:	f000 fbc1 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	3301      	adds	r3, #1
 8007b42:	461a      	mov	r2, r3
 8007b44:	4621      	mov	r1, r4
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff ffa2 	bl	8007a90 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd90      	pop	{r4, r7, pc}

08007b54 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 8007b5e:	6838      	ldr	r0, [r7, #0]
 8007b60:	f7ff fe76 	bl	8007850 <_ZN12SimpleString6StrLenEPKc>
 8007b64:	4603      	mov	r3, r0
 8007b66:	3301      	adds	r3, #1
 8007b68:	461a      	mov	r2, r3
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff ff8f 	bl	8007a90 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
    return buffer_;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff ff5a 	bl	8007a68 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8007bb4:	e003      	b.n	8007bbe <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ffcb 	bl	8007b54 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f7ff fe35 	bl	8007850 <_ZN12SimpleString6StrLenEPKc>
 8007be6:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	fb02 f303 	mul.w	r3, r2, r3
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff ff65 	bl	8007ac4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8007c00:	2300      	movs	r3, #0
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d20e      	bcs.n	8007c2a <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	461a      	mov	r2, r3
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	69f8      	ldr	r0, [r7, #28]
 8007c16:	f7ff fe66 	bl	80078e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	4413      	add	r3, r2
 8007c20:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	3301      	adds	r3, #1
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	e7ec      	b.n	8007c04 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
}
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 8007c50:	6838      	ldr	r0, [r7, #0]
 8007c52:	f7ff ff92 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007c56:	4603      	mov	r3, r0
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff ff7a 	bl	8007b54 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4618      	mov	r0, r3
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
    if (this != &other)
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d003      	beq.n	8007c84 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff ff53 	bl	8007b2a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 8007c84:	687b      	ldr	r3, [r7, #4]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 8007c8e:	b590      	push	{r4, r7, lr}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff ff6e 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	6838      	ldr	r0, [r7, #0]
 8007ca2:	f7ff ff6a 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff fe50 	bl	8007950 <_ZN12SimpleString6StrStrEPKcS1_>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bf14      	ite	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	2300      	moveq	r3, #0
 8007cba:	b2db      	uxtb	r3, r3
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd90      	pop	{r4, r7, pc}

08007cc4 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 8007cce:	f107 0308 	add.w	r3, r7, #8
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fabb 	bl	8008250 <_ZNK12SimpleString9lowerCaseEv>
 8007cda:	f107 0310 	add.w	r3, r7, #16
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 fab5 	bl	8008250 <_ZNK12SimpleString9lowerCaseEv>
 8007ce6:	f107 0210 	add.w	r2, r7, #16
 8007cea:	f107 0308 	add.w	r3, r7, #8
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff ffcc 	bl	8007c8e <_ZNK12SimpleString8containsERKS_>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	461c      	mov	r4, r3
 8007cfa:	bf00      	nop
 8007cfc:	f107 0310 	add.w	r3, r7, #16
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fafe 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8007d06:	f107 0308 	add.w	r3, r7, #8
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 faf9 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8007d10:	4623      	mov	r3, r4
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd90      	pop	{r4, r7, pc}

08007d1a <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 8007d1a:	b590      	push	{r4, r7, lr}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 8007d24:	6838      	ldr	r0, [r7, #0]
 8007d26:	f000 facb 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bf0c      	ite	eq
 8007d30:	2301      	moveq	r3, #1
 8007d32:	2300      	movne	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <_ZNK12SimpleString10startsWithERKS_+0x24>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e022      	b.n	8007d84 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fabe 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bf0c      	ite	eq
 8007d4a:	2301      	moveq	r3, #1
 8007d4c:	2300      	movne	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 8007d54:	2300      	movs	r3, #0
 8007d56:	e015      	b.n	8007d84 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ff0e 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	6838      	ldr	r0, [r7, #0]
 8007d62:	f7ff ff0a 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007d66:	4603      	mov	r3, r0
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f7ff fdf0 	bl	8007950 <_ZN12SimpleString6StrStrEPKcS1_>
 8007d70:	4604      	mov	r4, r0
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff ff01 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd90      	pop	{r4, r7, pc}

08007d8c <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 8007d8c:	b590      	push	{r4, r7, lr}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
    size_t length = size();
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa92 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8007d9c:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 8007d9e:	6838      	ldr	r0, [r7, #0]
 8007da0:	f000 fa8e 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8007da4:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <_ZNK12SimpleString8endsWithERKS_+0x24>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e020      	b.n	8007df2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <_ZNK12SimpleString8endsWithERKS_+0x2e>
 8007db6:	2300      	movs	r3, #0
 8007db8:	e01b      	b.n	8007df2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d201      	bcs.n	8007dc6 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e015      	b.n	8007df2 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff fed7 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007dcc:	4601      	mov	r1, r0
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	18cc      	adds	r4, r1, r3
 8007dd6:	6838      	ldr	r0, [r7, #0]
 8007dd8:	f7ff fecf 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	4619      	mov	r1, r3
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7ff fd13 	bl	800780c <_ZN12SimpleString6StrCmpEPKcS1_>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	bf0c      	ite	eq
 8007dec:	2301      	moveq	r3, #1
 8007dee:	2300      	movne	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd90      	pop	{r4, r7, pc}

08007dfa <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff feb6 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007e0e:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
    if (*str){
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 8007e1c:	6838      	ldr	r0, [r7, #0]
 8007e1e:	f7ff feac 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007e22:	4603      	mov	r3, r0
 8007e24:	4619      	mov	r1, r3
 8007e26:	6938      	ldr	r0, [r7, #16]
 8007e28:	f7ff fd92 	bl	8007950 <_ZN12SimpleString6StrStrEPKcS1_>
 8007e2c:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d014      	beq.n	8007e60 <_ZNK12SimpleString5countERKS_+0x66>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d011      	beq.n	8007e60 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	613b      	str	r3, [r7, #16]
        str++;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	3301      	adds	r3, #1
 8007e44:	613b      	str	r3, [r7, #16]
        num++;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 8007e4c:	6838      	ldr	r0, [r7, #0]
 8007e4e:	f7ff fe94 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007e52:	4603      	mov	r3, r0
 8007e54:	4619      	mov	r1, r3
 8007e56:	6938      	ldr	r0, [r7, #16]
 8007e58:	f7ff fd7a 	bl	8007950 <_ZN12SimpleString6StrStrEPKcS1_>
 8007e5c:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 8007e5e:	e7e6      	b.n	8007e2e <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 8007e60:	697b      	ldr	r3, [r7, #20]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 8007e6a:	b590      	push	{r4, r7, lr}
 8007e6c:	b091      	sub	sp, #68	; 0x44
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f7ff ffbe 	bl	8007dfa <_ZNK12SimpleString5countERKS_>
 8007e7e:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff ff82 	bl	8007d8c <_ZNK12SimpleString8endsWithERKS_>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e000      	b.n	8007e94 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 8007e92:	2301      	movs	r3, #1
 8007e94:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 8007e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	4413      	add	r3, r2
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f84e 	bl	8008f40 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fe68 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 8007eac:	2300      	movs	r3, #0
 8007eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d235      	bcs.n	8007f24 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 8007eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 8007ebc:	68b8      	ldr	r0, [r7, #8]
 8007ebe:	f7ff fe5c 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ec8:	f7ff fd42 	bl	8007950 <_ZN12SimpleString6StrStrEPKcS1_>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	3301      	adds	r3, #1
 8007ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 8007ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f8cd 	bl	8009074 <_ZN22SimpleStringCollectionixEj>
 8007eda:	4604      	mov	r4, r0
 8007edc:	f107 031c 	add.w	r3, r7, #28
 8007ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff fe55 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8007ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f107 0014 	add.w	r0, r7, #20
 8007ef2:	f107 011c 	add.w	r1, r7, #28
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f000 fb0c 	bl	8008514 <_ZNK12SimpleString9subStringEjj>
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	4619      	mov	r1, r3
 8007f02:	4620      	mov	r0, r4
 8007f04:	f7ff feb1 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 f9f8 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8007f12:	f107 031c 	add.w	r3, r7, #28
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 f9f3 	bl	8008302 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	3301      	adds	r3, #1
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f22:	e7c5      	b.n	8007eb0 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d015      	beq.n	8007f56 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 8007f2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 f8a1 	bl	8009074 <_ZN22SimpleStringCollectionixEj>
 8007f32:	4604      	mov	r4, r0
 8007f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff fe29 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8007f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f44:	4619      	mov	r1, r3
 8007f46:	4620      	mov	r0, r4
 8007f48:	f7ff fe8f 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8007f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f9d6 	bl	8008302 <_ZN12SimpleStringD1Ev>
    }
}
 8007f56:	bf00      	nop
 8007f58:	3744      	adds	r7, #68	; 0x44
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd90      	pop	{r4, r7, pc}

08007f5e <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70fb      	strb	r3, [r7, #3]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9a6 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8007f74:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d218      	bcs.n	8007fb4 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff fdf9 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	bf0c      	ite	eq
 8007f96:	2301      	moveq	r3, #1
 8007f98:	2300      	movne	r3, #0
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <_ZN12SimpleString7replaceEcc+0x4e>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	78ba      	ldrb	r2, [r7, #2]
 8007faa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e7e2      	b.n	8007f7a <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 8007fb4:	bf00      	nop
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08e      	sub	sp, #56	; 0x38
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 8007fc8:	f107 0310 	add.w	r3, r7, #16
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fddf 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8007fd4:	f107 0310 	add.w	r3, r7, #16
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff ff0d 	bl	8007dfa <_ZNK12SimpleString5countERKS_>
 8007fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007fe2:	f107 0310 	add.w	r3, r7, #16
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f98b 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d071      	beq.n	80080d6 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 f964 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8007ff8:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 8007ffa:	68b8      	ldr	r0, [r7, #8]
 8007ffc:	f7ff fc28 	bl	8007850 <_ZN12SimpleString6StrLenEPKc>
 8008000:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff fc24 	bl	8007850 <_ZN12SimpleString6StrLenEPKc>
 8008008:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800800e:	fb02 f203 	mul.w	r2, r2, r3
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	441a      	add	r2, r3
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800801a:	fb01 f303 	mul.w	r3, r1, r3
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	3301      	adds	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d951      	bls.n	80080ce <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800802a:	f240 129d 	movw	r2, #413	; 0x19d
 800802e:	492c      	ldr	r1, [pc, #176]	; (80080e0 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 8008030:	69f8      	ldr	r0, [r7, #28]
 8008032:	f7ff fb33 	bl	800769c <_ZN12SimpleString17allocStringBufferEjPKcj>
 8008036:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 8008038:	2300      	movs	r3, #0
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
 800803c:	2300      	movs	r3, #0
 800803e:	633b      	str	r3, [r7, #48]	; 0x30
 8008040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	429a      	cmp	r2, r3
 8008046:	d236      	bcs.n	80080b6 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7ff fd96 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 800804e:	4602      	mov	r2, r0
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	4413      	add	r3, r2
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fc16 	bl	800788a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf0c      	ite	eq
 8008064:	2301      	moveq	r3, #1
 8008066:	2300      	movne	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d011      	beq.n	8008092 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	18d0      	adds	r0, r2, r3
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	3301      	adds	r3, #1
 8008078:	461a      	mov	r2, r3
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	f7ff fc33 	bl	80078e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 8008080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	4413      	add	r3, r2
 8008086:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 8008088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	4413      	add	r3, r2
 800808e:	637b      	str	r3, [r7, #52]	; 0x34
 8008090:	e7d6      	b.n	8008040 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fd71 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 8008098:	4602      	mov	r2, r0
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	441a      	add	r2, r3
 800809e:	69b9      	ldr	r1, [r7, #24]
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	440b      	add	r3, r1
 80080a4:	7812      	ldrb	r2, [r2, #0]
 80080a6:	701a      	strb	r2, [r3, #0]
                j++;
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	3301      	adds	r3, #1
 80080ac:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 80080ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b0:	3301      	adds	r3, #1
 80080b2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 80080b4:	e7c4      	b.n	8008040 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	4413      	add	r3, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	69b9      	ldr	r1, [r7, #24]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fd1c 	bl	8007b04 <_ZN12SimpleString19setInternalBufferToEPcj>
 80080cc:	e004      	b.n	80080d8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7ff fcca 	bl	8007a68 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 80080d4:	e000      	b.n	80080d8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 80080d6:	bf00      	nop
}
 80080d8:	3738      	adds	r7, #56	; 0x38
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	080166b0 	.word	0x080166b0

080080e4 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b089      	sub	sp, #36	; 0x24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 80080ee:	493b      	ldr	r1, [pc, #236]	; (80081dc <_ZNK12SimpleString9printableEv+0xf8>)
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff fd4e 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 80080f6:	6838      	ldr	r0, [r7, #0]
 80080f8:	f000 f876 	bl	80081e8 <_ZNK12SimpleString16getPrintableSizeEv>
 80080fc:	4603      	mov	r3, r0
 80080fe:	3301      	adds	r3, #1
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff fcde 	bl	8007ac4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 8008108:	6838      	ldr	r0, [r7, #0]
 800810a:	f000 f8d9 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 800810e:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	429a      	cmp	r2, r3
 800811e:	d252      	bcs.n	80081c6 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	4413      	add	r3, r2
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800812c:	7cfb      	ldrb	r3, [r7, #19]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fb43 	bl	80087ba <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d012      	beq.n	8008160 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	18d0      	adds	r0, r2, r3
 8008142:	7cfb      	ldrb	r3, [r7, #19]
 8008144:	3b07      	subs	r3, #7
 8008146:	b2db      	uxtb	r3, r3
 8008148:	461a      	mov	r2, r3
 800814a:	4b25      	ldr	r3, [pc, #148]	; (80081e0 <_ZNK12SimpleString9printableEv+0xfc>)
 800814c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008150:	2202      	movs	r2, #2
 8008152:	4619      	mov	r1, r3
 8008154:	f7ff fbc7 	bl	80078e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	3302      	adds	r3, #2
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	e02e      	b.n	80081be <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 8008160:	7cfb      	ldrb	r3, [r7, #19]
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fb15 	bl	8008792 <_ZN12SimpleString9isControlEc>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01e      	beq.n	80081ac <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800816e:	7cfa      	ldrb	r2, [r7, #19]
 8008170:	f107 0308 	add.w	r3, r7, #8
 8008174:	491b      	ldr	r1, [pc, #108]	; (80081e4 <_ZNK12SimpleString9printableEv+0x100>)
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fd50 	bl	8008c1c <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	18d4      	adds	r4, r2, r3
 8008184:	f107 0308 	add.w	r3, r7, #8
 8008188:	4618      	mov	r0, r3
 800818a:	f000 f88d 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800818e:	4603      	mov	r3, r0
 8008190:	2204      	movs	r2, #4
 8008192:	4619      	mov	r1, r3
 8008194:	4620      	mov	r0, r4
 8008196:	f7ff fba6 	bl	80078e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	3304      	adds	r3, #4
 800819e:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 80081a0:	f107 0308 	add.w	r3, r7, #8
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 f8ac 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80081aa:	e008      	b.n	80081be <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	4413      	add	r3, r2
 80081b4:	7cfa      	ldrb	r2, [r7, #19]
 80081b6:	701a      	strb	r2, [r3, #0]
            j++;
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	3301      	adds	r3, #1
 80081bc:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	3301      	adds	r3, #1
 80081c2:	61bb      	str	r3, [r7, #24]
 80081c4:	e7a8      	b.n	8008118 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	2200      	movs	r2, #0
 80081d0:	701a      	strb	r2, [r3, #0]

    return result;
 80081d2:	bf00      	nop
}
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	3724      	adds	r7, #36	; 0x24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd90      	pop	{r4, r7, pc}
 80081dc:	08016770 	.word	0x08016770
 80081e0:	20000068 	.word	0x20000068
 80081e4:	08016774 	.word	0x08016774

080081e8 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f865 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 80081f6:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	429a      	cmp	r2, r3
 8008206:	d21e      	bcs.n	8008246 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	4413      	add	r3, r2
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 facf 	bl	80087ba <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	3301      	adds	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e009      	b.n	800823e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800822a:	7afb      	ldrb	r3, [r7, #11]
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fab0 	bl	8008792 <_ZN12SimpleString9isControlEc>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	3303      	adds	r3, #3
 800823c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3301      	adds	r3, #1
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	e7dc      	b.n	8008200 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 8008246:	697b      	ldr	r3, [r7, #20]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 8008250:	b590      	push	{r4, r7, lr}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff fcec 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f82c 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008268:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800826a:	2300      	movs	r3, #0
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	429a      	cmp	r2, r3
 8008274:	d213      	bcs.n	800829e <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fc7f 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 800827c:	4602      	mov	r2, r0
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	7819      	ldrb	r1, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	18d4      	adds	r4, r2, r3
 800828c:	4608      	mov	r0, r1
 800828e:	f7ff fb8a 	bl	80079a6 <_ZN12SimpleString7ToLowerEc>
 8008292:	4603      	mov	r3, r0
 8008294:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3301      	adds	r3, #1
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	e7e7      	b.n	800826e <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800829e:	bf00      	nop
}
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd90      	pop	{r4, r7, pc}

080082a8 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
    return getBuffer();
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff fc62 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 80082b6:	4603      	mov	r3, r0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fc56 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 80082ce:	4603      	mov	r3, r0
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff fabd 	bl	8007850 <_ZN12SimpleString6StrLenEPKc>
 80082d6:	4603      	mov	r3, r0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
    return size() == 0;
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff ffe9 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bf0c      	ite	eq
 80082f4:	2301      	moveq	r3, #1
 80082f6:	2300      	movne	r3, #0
 80082f8:	b2db      	uxtb	r3, r3
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fb90 	bl	8007a30 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800831a:	b590      	push	{r4, r7, lr}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff ffbf 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800832a:	4604      	mov	r4, r0
 800832c:	6838      	ldr	r0, [r7, #0]
 800832e:	f7ff ffbb 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8008332:	4603      	mov	r3, r0
 8008334:	4619      	mov	r1, r3
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff fa68 	bl	800780c <_ZN12SimpleString6StrCmpEPKcS1_>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	bf0c      	ite	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	2300      	movne	r3, #0
 8008346:	b2db      	uxtb	r3, r3
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	bd90      	pop	{r4, r7, pc}

08008350 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff ff75 	bl	8008250 <_ZNK12SimpleString9lowerCaseEv>
 8008366:	f107 0310 	add.w	r3, r7, #16
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f7ff ff6f 	bl	8008250 <_ZNK12SimpleString9lowerCaseEv>
 8008372:	f107 0210 	add.w	r2, r7, #16
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff ffcc 	bl	800831a <_ZeqRK12SimpleStringS1_>
 8008382:	4603      	mov	r3, r0
 8008384:	461c      	mov	r4, r3
 8008386:	f107 0310 	add.w	r3, r7, #16
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff ffb9 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008390:	f107 0308 	add.w	r3, r7, #8
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff ffb4 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800839a:	4623      	mov	r3, r4
}
 800839c:	4618      	mov	r0, r3
 800839e:	371c      	adds	r7, #28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd90      	pop	{r4, r7, pc}

080083a4 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
    return !(left == right);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff ffb2 	bl	800831a <_ZeqRK12SimpleStringS1_>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f083 0301 	eor.w	r3, r3, #1
 80083bc:	b2db      	uxtb	r3, r3
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 80083d2:	68b8      	ldr	r0, [r7, #8]
 80083d4:	f7ff fbd1 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 80083d8:	4603      	mov	r3, r0
 80083da:	4619      	mov	r1, r3
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fbd8 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff fbc9 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 80083e8:	4603      	mov	r3, r0
 80083ea:	4619      	mov	r1, r3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f817 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    return t;
 80083f2:	bf00      	nop
}
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 8008406:	6838      	ldr	r0, [r7, #0]
 8008408:	f7ff fbb7 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 800840c:	4603      	mov	r3, r0
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f805 	bl	8008420 <_ZN12SimpleStringpLEPKc>
 8008416:	4603      	mov	r3, r0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff ff48 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008430:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 8008432:	6838      	ldr	r0, [r7, #0]
 8008434:	f7ff fa0c 	bl	8007850 <_ZN12SimpleString6StrLenEPKc>
 8008438:	4603      	mov	r3, r0
 800843a:	3301      	adds	r3, #1
 800843c:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	4413      	add	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fb97 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 800844c:	4603      	mov	r3, r0
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 f941 	bl	80086d8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 8008456:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4413      	add	r3, r2
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fa3f 	bl	80078e6 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fb49 	bl	8007b04 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 8008472:	687b      	ldr	r3, [r7, #4]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800847c:	b590      	push	{r4, r7, lr}
 800847e:	b08b      	sub	sp, #44	; 0x2c
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff ff18 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008490:	4604      	mov	r4, r0
 8008492:	68b8      	ldr	r0, [r7, #8]
 8008494:	f7ff ff14 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008498:	4603      	mov	r3, r0
 800849a:	429c      	cmp	r4, r3
 800849c:	bf8c      	ite	hi
 800849e:	2301      	movhi	r3, #1
 80084a0:	2300      	movls	r3, #0
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d006      	beq.n	80084b6 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 80084a8:	79fb      	ldrb	r3, [r7, #7]
 80084aa:	461a      	mov	r2, r3
 80084ac:	68f9      	ldr	r1, [r7, #12]
 80084ae:	68b8      	ldr	r0, [r7, #8]
 80084b0:	f7ff ffe4 	bl	800847c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 80084b4:	e02b      	b.n	800850e <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 80084b6:	79fb      	ldrb	r3, [r7, #7]
 80084b8:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 80084be:	68b8      	ldr	r0, [r7, #8]
 80084c0:	f7ff fefe 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 80084c4:	4604      	mov	r4, r0
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7ff fefa 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 80084cc:	4603      	mov	r3, r0
 80084ce:	1ae2      	subs	r2, r4, r3
 80084d0:	f107 0114 	add.w	r1, r7, #20
 80084d4:	f107 0320 	add.w	r3, r7, #32
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff fb75 	bl	8007bc8 <_ZN12SimpleStringC1EPKcj>
 80084de:	f107 0318 	add.w	r3, r7, #24
 80084e2:	f107 0120 	add.w	r1, r7, #32
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff ff6c 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 80084ee:	f107 0318 	add.w	r3, r7, #24
 80084f2:	4619      	mov	r1, r3
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff fbb8 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 80084fa:	f107 0318 	add.w	r3, r7, #24
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff feff 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008504:	f107 0320 	add.w	r3, r7, #32
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff fefa 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800850e:	372c      	adds	r7, #44	; 0x2c
 8008510:	46bd      	mov	sp, r7
 8008512:	bd90      	pop	{r4, r7, pc}

08008514 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 8008522:	68b8      	ldr	r0, [r7, #8]
 8008524:	f7ff fecc 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008528:	4603      	mov	r3, r0
 800852a:	3b01      	subs	r3, #1
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	429a      	cmp	r2, r3
 8008530:	bf8c      	ite	hi
 8008532:	2301      	movhi	r3, #1
 8008534:	2300      	movls	r3, #0
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d004      	beq.n	8008546 <_ZNK12SimpleString9subStringEjj+0x32>
 800853c:	4919      	ldr	r1, [pc, #100]	; (80085a4 <_ZNK12SimpleString9subStringEjj+0x90>)
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff fb27 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008544:	e029      	b.n	800859a <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 8008546:	68b8      	ldr	r0, [r7, #8]
 8008548:	f7ff fb17 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 800854c:	4602      	mov	r2, r0
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	441a      	add	r2, r3
 8008552:	f107 0310 	add.w	r3, r7, #16
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff fb1a 	bl	8007b92 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800855e:	f107 0310 	add.w	r3, r7, #16
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff feac 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008568:	4602      	mov	r2, r0
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	4293      	cmp	r3, r2
 800856e:	bf34      	ite	cc
 8008570:	2301      	movcc	r3, #1
 8008572:	2300      	movcs	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	4413      	add	r3, r2
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]

    return newString;
 8008584:	f107 0310 	add.w	r3, r7, #16
 8008588:	4619      	mov	r1, r3
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff fb55 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 8008590:	f107 0310 	add.w	r3, r7, #16
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff feb4 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	08016770 	.word	0x08016770

080085a8 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	f7ff ffa9 	bl	8008514 <_ZNK12SimpleString9subStringEjj>
}
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b082      	sub	sp, #8
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff fad0 	bl	8007b7a <_ZNK12SimpleString9getBufferEv>
 80085da:	4602      	mov	r2, r0
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	4413      	add	r3, r2
 80085e0:	781b      	ldrb	r3, [r3, #0]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	461a      	mov	r2, r3
 80085fa:	2100      	movs	r1, #0
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f805 	bl	800860c <_ZNK12SimpleString8findFromEjc>
 8008602:	4603      	mov	r3, r0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7ff fe50 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008620:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	429a      	cmp	r2, r3
 800862c:	d213      	bcs.n	8008656 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800862e:	6979      	ldr	r1, [r7, #20]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff ffca 	bl	80085ca <_ZNK12SimpleString2atEj>
 8008636:	4603      	mov	r3, r0
 8008638:	461a      	mov	r2, r3
 800863a:	79fb      	ldrb	r3, [r7, #7]
 800863c:	4293      	cmp	r3, r2
 800863e:	bf0c      	ite	eq
 8008640:	2301      	moveq	r3, #1
 8008642:	2300      	movne	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <_ZNK12SimpleString8findFromEjc+0x42>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	e005      	b.n	800865a <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	3301      	adds	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e7e7      	b.n	8008626 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 8008656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4611      	mov	r1, r2
 8008670:	461a      	mov	r2, r3
 8008672:	460b      	mov	r3, r1
 8008674:	71fb      	strb	r3, [r7, #7]
 8008676:	4613      	mov	r3, r2
 8008678:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	4619      	mov	r1, r3
 800867e:	68b8      	ldr	r0, [r7, #8]
 8008680:	f7ff ffb3 	bl	80085ea <_ZNK12SimpleString4findEc>
 8008684:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868c:	d104      	bne.n	8008698 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800868e:	4911      	ldr	r1, [pc, #68]	; (80086d4 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff fa7e 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008696:	e019      	b.n	80086cc <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 8008698:	79bb      	ldrb	r3, [r7, #6]
 800869a:	461a      	mov	r2, r3
 800869c:	6979      	ldr	r1, [r7, #20]
 800869e:	68b8      	ldr	r0, [r7, #8]
 80086a0:	f7ff ffb4 	bl	800860c <_ZNK12SimpleString8findFromEjc>
 80086a4:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ac:	d106      	bne.n	80086bc <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	68b9      	ldr	r1, [r7, #8]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff ff77 	bl	80085a8 <_ZNK12SimpleString9subStringEj>
 80086ba:	e007      	b.n	80086cc <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	f7ff ff24 	bl	8008514 <_ZNK12SimpleString9subStringEjj>
}
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	08016770 	.word	0x08016770

080086d8 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 80086e2:	f240 2275 	movw	r2, #629	; 0x275
 80086e6:	490a      	ldr	r1, [pc, #40]	; (8008710 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 80086e8:	6838      	ldr	r0, [r7, #0]
 80086ea:	f7fe ffd7 	bl	800769c <_ZN12SimpleString17allocStringBufferEjPKcj>
 80086ee:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff f8f6 	bl	80078e6 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	2200      	movs	r2, #0
 8008704:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 8008706:	68fb      	ldr	r3, [r7, #12]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	080166b0 	.word	0x080166b0

08008714 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	2b2f      	cmp	r3, #47	; 0x2f
 8008722:	d904      	bls.n	800872e <_ZN12SimpleString7isDigitEc+0x1a>
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	2b39      	cmp	r3, #57	; 0x39
 8008728:	d801      	bhi.n	800872e <_ZN12SimpleString7isDigitEc+0x1a>
 800872a:	2301      	movs	r3, #1
 800872c:	e000      	b.n	8008730 <_ZN12SimpleString7isDigitEc+0x1c>
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	2b20      	cmp	r3, #32
 800874a:	d005      	beq.n	8008758 <_ZN12SimpleString7isSpaceEc+0x1c>
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b08      	cmp	r3, #8
 8008750:	d904      	bls.n	800875c <_ZN12SimpleString7isSpaceEc+0x20>
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	2b0d      	cmp	r3, #13
 8008756:	d801      	bhi.n	800875c <_ZN12SimpleString7isSpaceEc+0x20>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <_ZN12SimpleString7isSpaceEc+0x22>
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	4603      	mov	r3, r0
 8008772:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	2b40      	cmp	r3, #64	; 0x40
 8008778:	d904      	bls.n	8008784 <_ZN12SimpleString7isUpperEc+0x1a>
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	2b5a      	cmp	r3, #90	; 0x5a
 800877e:	d801      	bhi.n	8008784 <_ZN12SimpleString7isUpperEc+0x1a>
 8008780:	2301      	movs	r3, #1
 8008782:	e000      	b.n	8008786 <_ZN12SimpleString7isUpperEc+0x1c>
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	4603      	mov	r3, r0
 800879a:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	2b1f      	cmp	r3, #31
 80087a0:	d902      	bls.n	80087a8 <_ZN12SimpleString9isControlEc+0x16>
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	2b7f      	cmp	r3, #127	; 0x7f
 80087a6:	d101      	bne.n	80087ac <_ZN12SimpleString9isControlEc+0x1a>
 80087a8:	2301      	movs	r3, #1
 80087aa:	e000      	b.n	80087ae <_ZN12SimpleString9isControlEc+0x1c>
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	4603      	mov	r3, r0
 80087c2:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d904      	bls.n	80087d4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	2b0d      	cmp	r3, #13
 80087ce:	d801      	bhi.n	80087d4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e000      	b.n	80087d6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <_Z10StringFromPKc>:
{
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
}

SimpleString StringFrom(const char *value)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7ff f9cf 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
}
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 80087fc:	b590      	push	{r4, r7, lr}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 8008806:	2400      	movs	r4, #0
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00e      	beq.n	800882c <_Z25PrintableStringFromOrNullPKc+0x30>
 800880e:	f107 0308 	add.w	r3, r7, #8
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff ffe4 	bl	80087e2 <_Z10StringFromPKc>
 800881a:	2401      	movs	r4, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f107 0208 	add.w	r2, r7, #8
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fc5d 	bl	80080e4 <_ZNK12SimpleString9printableEv>
 800882a:	e004      	b.n	8008836 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4908      	ldr	r1, [pc, #32]	; (8008850 <_Z25PrintableStringFromOrNullPKc+0x54>)
 8008830:	4618      	mov	r0, r3
 8008832:	f7ff ffd6 	bl	80087e2 <_Z10StringFromPKc>
 8008836:	2c00      	cmp	r4, #0
 8008838:	d004      	beq.n	8008844 <_Z25PrintableStringFromOrNullPKc+0x48>
 800883a:	f107 0308 	add.w	r3, r7, #8
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff fd5f 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008844:	bf00      	nop
}
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	bd90      	pop	{r4, r7, pc}
 800884e:	bf00      	nop
 8008850:	08016790 	.word	0x08016790

08008854 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	4904      	ldr	r1, [pc, #16]	; (8008874 <_Z10StringFromi+0x20>)
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f9d9 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	08016798 	.word	0x08016798

08008878 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	4904      	ldr	r1, [pc, #16]	; (8008898 <_Z10StringFroml+0x20>)
 8008888:	4618      	mov	r0, r3
 800888a:	f000 f9c7 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	0801679c 	.word	0x0801679c

0800889c <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 80088a6:	f107 0308 	add.w	r3, r7, #8
 80088aa:	4910      	ldr	r1, [pc, #64]	; (80088ec <_Z10StringFromPKv+0x50>)
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff f970 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80088b2:	f107 0310 	add.w	r3, r7, #16
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 f945 	bl	8008b48 <_Z13HexStringFromPKv>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f107 0210 	add.w	r2, r7, #16
 80088c4:	f107 0108 	add.w	r1, r7, #8
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fd7c 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 80088ce:	f107 0310 	add.w	r3, r7, #16
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fd15 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80088d8:	f107 0308 	add.w	r3, r7, #8
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fd10 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80088e2:	bf00      	nop
}
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	080167a0 	.word	0x080167a0

080088f0 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 80088fa:	f107 0308 	add.w	r3, r7, #8
 80088fe:	4910      	ldr	r1, [pc, #64]	; (8008940 <_Z10StringFromPFvvE+0x50>)
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff f946 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008906:	f107 0310 	add.w	r3, r7, #16
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f92f 	bl	8008b70 <_Z13HexStringFromPFvvE>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f107 0210 	add.w	r2, r7, #16
 8008918:	f107 0108 	add.w	r1, r7, #8
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff fd52 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 8008922:	f107 0310 	add.w	r3, r7, #16
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fceb 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800892c:	f107 0308 	add.w	r3, r7, #8
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff fce6 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008936:	bf00      	nop
}
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	080167a0 	.word	0x080167a0

08008944 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	4904      	ldr	r1, [pc, #16]	; (8008964 <_Z13HexStringFroml+0x20>)
 8008954:	4618      	mov	r0, r3
 8008956:	f000 f961 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	080167a4 	.word	0x080167a4

08008968 <_Z13HexStringFroma>:
{
    return StringFromFormat("%x", value);
}

SimpleString HexStringFrom(signed char value)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 8008974:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4912      	ldr	r1, [pc, #72]	; (80089c4 <_Z13HexStringFroma+0x5c>)
 800897c:	4618      	mov	r0, r3
 800897e:	f000 f94d 	bl	8008c1c <_Z16StringFromFormatPKcz>
    if(value < 0) {
 8008982:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008986:	2b00      	cmp	r3, #0
 8008988:	da16      	bge.n	80089b8 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff fc98 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008990:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	1e9a      	subs	r2, r3, #2
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	4618      	mov	r0, r3
 800899e:	f7ff fe03 	bl	80085a8 <_ZNK12SimpleString9subStringEj>
 80089a2:	f107 030c 	add.w	r3, r7, #12
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7ff f95e 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 80089ae:	f107 030c 	add.w	r3, r7, #12
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff fca5 	bl	8008302 <_ZN12SimpleStringD1Ev>
    }
    return result;
 80089b8:	bf00      	nop
}
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	080167a8 	.word	0x080167a8

080089c8 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	4904      	ldr	r1, [pc, #16]	; (80089e8 <_Z13HexStringFromm+0x20>)
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 f91f 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	080167a4 	.word	0x080167a4

080089ec <_Z30BracketsFormattedHexStringFroml>:
{
    return BracketsFormattedHexString(HexStringFrom(value));
}

SimpleString BracketsFormattedHexStringFrom(long value)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff ffa1 	bl	8008944 <_Z13HexStringFroml>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f107 0208 	add.w	r2, r7, #8
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 f846 	bl	8008a9c <_Z26BracketsFormattedHexString12SimpleString>
 8008a10:	f107 0308 	add.w	r3, r7, #8
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fc74 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008a1a:	bf00      	nop
}
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 8008a2e:	f107 0308 	add.w	r3, r7, #8
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff ffc7 	bl	80089c8 <_Z13HexStringFromm>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f107 0208 	add.w	r2, r7, #8
 8008a40:	4611      	mov	r1, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 f82a 	bl	8008a9c <_Z26BracketsFormattedHexString12SimpleString>
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fc58 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008a52:	bf00      	nop
}
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 8008a68:	f107 0308 	add.w	r3, r7, #8
 8008a6c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8008a70:	4611      	mov	r1, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff ff78 	bl	8008968 <_Z13HexStringFroma>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f107 0208 	add.w	r2, r7, #8
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 f80b 	bl	8008a9c <_Z26BracketsFormattedHexString12SimpleString>
 8008a86:	f107 0308 	add.w	r3, r7, #8
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fc39 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008a90:	bf00      	nop
}
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 8008aa6:	f107 0310 	add.w	r3, r7, #16
 8008aaa:	4917      	ldr	r1, [pc, #92]	; (8008b08 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff f870 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008ab2:	f107 0308 	add.w	r3, r7, #8
 8008ab6:	f107 0110 	add.w	r1, r7, #16
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff fc82 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 8008ac2:	f107 0318 	add.w	r3, r7, #24
 8008ac6:	4911      	ldr	r1, [pc, #68]	; (8008b0c <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff f862 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f107 0218 	add.w	r2, r7, #24
 8008ad4:	f107 0108 	add.w	r1, r7, #8
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7ff fc74 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 8008ade:	f107 0318 	add.w	r3, r7, #24
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff fc0d 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff fc08 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008af2:	f107 0310 	add.w	r3, r7, #16
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fc03 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008afc:	bf00      	nop
}
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	3720      	adds	r7, #32
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	080167ac 	.word	0x080167ac
 8008b0c:	080167b0 	.word	0x080167b0

08008b10 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8008b18:	1d3b      	adds	r3, r7, #4
 8008b1a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8008b34:	1d3b      	adds	r3, r7, #4
 8008b36:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 8008b52:	6838      	ldr	r0, [r7, #0]
 8008b54:	f7ff ffdc 	bl	8008b10 <_ZL25convertPointerToLongValuePKv>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4903      	ldr	r1, [pc, #12]	; (8008b6c <_Z13HexStringFromPKv+0x24>)
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f85c 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	080167a4 	.word	0x080167a4

08008b70 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 8008b7a:	6838      	ldr	r0, [r7, #0]
 8008b7c:	f7ff ffd6 	bl	8008b2c <_ZL33convertFunctionPointerToLongValuePFvvE>
 8008b80:	4602      	mov	r2, r0
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4903      	ldr	r1, [pc, #12]	; (8008b94 <_Z13HexStringFromPFvvE+0x24>)
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f848 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	080167a4 	.word	0x080167a4

08008b98 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	ed87 0b00 	vstr	d0, [r7]
 8008ba4:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 8008ba6:	4b18      	ldr	r3, [pc, #96]	; (8008c08 <_Z10StringFromdi+0x70>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	ed97 0b00 	vldr	d0, [r7]
 8008bae:	4798      	blx	r3
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bf14      	ite	ne
 8008bb6:	2301      	movne	r3, #1
 8008bb8:	2300      	moveq	r3, #0
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d004      	beq.n	8008bca <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 8008bc0:	4912      	ldr	r1, [pc, #72]	; (8008c0c <_Z10StringFromdi+0x74>)
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f7fe ffe5 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008bc8:	e01a      	b.n	8008c00 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 8008bca:	4b11      	ldr	r3, [pc, #68]	; (8008c10 <_Z10StringFromdi+0x78>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	ed97 0b00 	vldr	d0, [r7]
 8008bd2:	4798      	blx	r3
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bf14      	ite	ne
 8008bda:	2301      	movne	r3, #1
 8008bdc:	2300      	moveq	r3, #0
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d004      	beq.n	8008bee <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 8008be4:	490b      	ldr	r1, [pc, #44]	; (8008c14 <_Z10StringFromdi+0x7c>)
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7fe ffd3 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008bec:	e008      	b.n	8008c00 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf4:	e9cd 2300 	strd	r2, r3, [sp]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	4907      	ldr	r1, [pc, #28]	; (8008c18 <_Z10StringFromdi+0x80>)
 8008bfc:	f000 f80e 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	200000e0 	.word	0x200000e0
 8008c0c:	080167e4 	.word	0x080167e4
 8008c10:	200000e4 	.word	0x200000e4
 8008c14:	080167f8 	.word	0x080167f8
 8008c18:	08016808 	.word	0x08016808

08008c1c <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 8008c1c:	b40e      	push	{r1, r2, r3}
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b087      	sub	sp, #28
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 8008c26:	4910      	ldr	r1, [pc, #64]	; (8008c68 <_Z16StringFromFormatPKcz+0x4c>)
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7fe ffb2 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 8008c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c32:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 8008c34:	f107 0310 	add.w	r3, r7, #16
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 f839 	bl	8008cb4 <_Z17VStringFromFormatPKcSt9__va_list>
 8008c42:	f107 0310 	add.w	r3, r7, #16
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff f80e 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8008c4e:	f107 0310 	add.w	r3, r7, #16
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fb55 	bl	8008302 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 8008c58:	bf00      	nop
}
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c64:	b003      	add	sp, #12
 8008c66:	4770      	bx	lr
 8008c68:	08016770 	.word	0x08016770

08008c6c <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	4904      	ldr	r1, [pc, #16]	; (8008c8c <_Z10StringFromj+0x20>)
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff ffcd 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	08016814 	.word	0x08016814

08008c90 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	4904      	ldr	r1, [pc, #16]	; (8008cb0 <_Z10StringFromm+0x20>)
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff ffbb 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	08016818 	.word	0x08016818

08008cb4 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b0a7      	sub	sp, #156	; 0x9c
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 8008cc4:	492e      	ldr	r1, [pc, #184]	; (8008d80 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7fe ff63 	bl	8007b92 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 8008ccc:	4b2d      	ldr	r3, [pc, #180]	; (8008d84 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8008cce:	681c      	ldr	r4, [r3, #0]
 8008cd0:	f107 0014 	add.w	r0, r7, #20
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	2164      	movs	r1, #100	; 0x64
 8008cda:	47a0      	blx	r4
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 8008ce2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ce6:	2b63      	cmp	r3, #99	; 0x63
 8008ce8:	d813      	bhi.n	8008d12 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 8008cea:	f107 0214 	add.w	r2, r7, #20
 8008cee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe ff4c 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008cfa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7fe ffb2 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8008d06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff faf9 	bl	8008302 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 8008d10:	e031      	b.n	8008d76 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 8008d12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d16:	3301      	adds	r3, #1
 8008d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 8008d1c:	f240 32c3 	movw	r2, #963	; 0x3c3
 8008d20:	4919      	ldr	r1, [pc, #100]	; (8008d88 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8008d22:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008d26:	f7fe fcb9 	bl	800769c <_ZN12SimpleString17allocStringBufferEjPKcj>
 8008d2a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 8008d2e:	4b15      	ldr	r3, [pc, #84]	; (8008d84 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8008d30:	681c      	ldr	r4, [r3, #0]
 8008d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d3a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008d3e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 8008d40:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008d44:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe ff22 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008d4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008d52:	4619      	mov	r1, r3
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7fe ff88 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8008d5a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7ff facf 	bl	8008302 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 8008d64:	f240 33c7 	movw	r3, #967	; 0x3c7
 8008d68:	4a07      	ldr	r2, [pc, #28]	; (8008d88 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8008d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d6e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8008d72:	f7fe fca7 	bl	80076c4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 8008d76:	bf00      	nop
}
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	379c      	adds	r7, #156	; 0x9c
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd90      	pop	{r4, r7, pc}
 8008d80:	08016770 	.word	0x08016770
 8008d84:	200000ac 	.word	0x200000ac
 8008d88:	080166b0 	.word	0x080166b0

08008d8c <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08a      	sub	sp, #40	; 0x28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
    SimpleString result;
 8008d98:	491f      	ldr	r1, [pc, #124]	; (8008e18 <_Z16StringFromBinaryPKhj+0x8c>)
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7fe fef9 	bl	8007b92 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 8008da0:	2300      	movs	r3, #0
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
 8008da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d219      	bcs.n	8008de0 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	4413      	add	r3, r2
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	461a      	mov	r2, r3
 8008db6:	f107 0314 	add.w	r3, r7, #20
 8008dba:	4918      	ldr	r1, [pc, #96]	; (8008e1c <_Z16StringFromBinaryPKhj+0x90>)
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff ff2d 	bl	8008c1c <_Z16StringFromFormatPKcz>
 8008dc2:	f107 0314 	add.w	r3, r7, #20
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fb17 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8008dce:	f107 0314 	add.w	r3, r7, #20
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7ff fa95 	bl	8008302 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	3301      	adds	r3, #1
 8008ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dde:	e7e1      	b.n	8008da4 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff fa6d 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8008de6:	4603      	mov	r3, r0
 8008de8:	3b01      	subs	r3, #1
 8008dea:	f107 001c 	add.w	r0, r7, #28
 8008dee:	2200      	movs	r2, #0
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	f7ff fb8f 	bl	8008514 <_ZNK12SimpleString9subStringEjj>
 8008df6:	f107 031c 	add.w	r3, r7, #28
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f7fe ff34 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8008e02:	f107 031c 	add.w	r3, r7, #28
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff fa7b 	bl	8008302 <_ZN12SimpleStringD1Ev>

    return result;
 8008e0c:	bf00      	nop
}
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	3728      	adds	r7, #40	; 0x28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	08016770 	.word	0x08016770
 8008e1c:	0801681c 	.word	0x0801681c

08008e20 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d006      	beq.n	8008e40 <_Z22StringFromBinaryOrNullPKhj+0x20>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	68b9      	ldr	r1, [r7, #8]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ffa7 	bl	8008d8c <_Z16StringFromBinaryPKhj>
 8008e3e:	e004      	b.n	8008e4a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4904      	ldr	r1, [pc, #16]	; (8008e54 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7ff fccc 	bl	80087e2 <_Z10StringFromPKc>
}
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	08016790 	.word	0x08016790

08008e58 <_Z20StringFromMaskedBitsmmj>:
{
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
}

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8008e66:	4925      	ldr	r1, [pc, #148]	; (8008efc <_Z20StringFromMaskedBitsmmj+0xa4>)
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7fe fe92 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d802      	bhi.n	8008e7a <_Z20StringFromMaskedBitsmmj+0x22>
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	e000      	b.n	8008e7c <_Z20StringFromMaskedBitsmmj+0x24>
 8008e7a:	2320      	movs	r3, #32
 8008e7c:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	2201      	movs	r2, #1
 8008e84:	fa02 f303 	lsl.w	r3, r2, r3
 8008e88:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d22d      	bcs.n	8008ef2 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00c      	beq.n	8008eba <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <_Z20StringFromMaskedBitsmmj+0x56>
 8008eaa:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <_Z20StringFromMaskedBitsmmj+0xa8>)
 8008eac:	e000      	b.n	8008eb0 <_Z20StringFromMaskedBitsmmj+0x58>
 8008eae:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <_Z20StringFromMaskedBitsmmj+0xac>)
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fab4 	bl	8008420 <_ZN12SimpleStringpLEPKc>
 8008eb8:	e003      	b.n	8008ec2 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 8008eba:	4913      	ldr	r1, [pc, #76]	; (8008f08 <_Z20StringFromMaskedBitsmmj+0xb0>)
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff faaf 	bl	8008420 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	2b07      	cmp	r3, #7
 8008eca:	d108      	bne.n	8008ede <_Z20StringFromMaskedBitsmmj+0x86>
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d003      	beq.n	8008ede <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 8008ed6:	490d      	ldr	r1, [pc, #52]	; (8008f0c <_Z20StringFromMaskedBitsmmj+0xb4>)
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff faa1 	bl	8008420 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	3301      	adds	r3, #1
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	e7cd      	b.n	8008e8e <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 8008ef2:	bf00      	nop
}
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	3720      	adds	r7, #32
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	08016770 	.word	0x08016770
 8008f00:	08016848 	.word	0x08016848
 8008f04:	0801684c 	.word	0x0801684c
 8008f08:	08016850 	.word	0x08016850
 8008f0c:	08016854 	.word	0x08016854

08008f10 <_ZN22SimpleStringCollectionC1Ev>:
    }

    return StringFromFormat("%u%s", number, suffix);
}

SimpleStringCollection::SimpleStringCollection()
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4907      	ldr	r1, [pc, #28]	; (8008f3c <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fe37 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
    size_ = 0;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	60da      	str	r2, [r3, #12]
}
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	08016770 	.word	0x08016770

08008f40 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 8008f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d01e      	beq.n	8008f90 <_ZN22SimpleStringCollection8allocateEj+0x50>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3b04      	subs	r3, #4
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	18d4      	adds	r4, r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429c      	cmp	r4, r3
 8008f68:	d004      	beq.n	8008f74 <_ZN22SimpleStringCollection8allocateEj+0x34>
 8008f6a:	3c08      	subs	r4, #8
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f7ff f9c8 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8008f72:	e7f6      	b.n	8008f62 <_ZN22SimpleStringCollection8allocateEj+0x22>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f1a3 0208 	sub.w	r2, r3, #8
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3b04      	subs	r3, #4
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f7fd ff5e 	bl	8006e4c <_ZdaPvj>

    size_ = _size;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68dc      	ldr	r4, [r3, #12]
 8008f9a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8008f9e:	d202      	bcs.n	8008fa6 <_ZN22SimpleStringCollection8allocateEj+0x66>
 8008fa0:	1c63      	adds	r3, r4, #1
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	e001      	b.n	8008faa <_ZN22SimpleStringCollection8allocateEj+0x6a>
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	f240 4227 	movw	r2, #1063	; 0x427
 8008fae:	4910      	ldr	r1, [pc, #64]	; (8008ff0 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fd ff29 	bl	8006e08 <_ZnajPKci>
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	1d2b      	adds	r3, r5, #4
 8008fba:	3b04      	subs	r3, #4
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	1d2b      	adds	r3, r5, #4
 8008fc2:	601c      	str	r4, [r3, #0]
 8008fc4:	f105 0308 	add.w	r3, r5, #8
 8008fc8:	1e62      	subs	r2, r4, #1
 8008fca:	4614      	mov	r4, r2
 8008fcc:	461e      	mov	r6, r3
 8008fce:	2c00      	cmp	r4, #0
 8008fd0:	db06      	blt.n	8008fe0 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 8008fd2:	4908      	ldr	r1, [pc, #32]	; (8008ff4 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7fe fddc 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8008fda:	3608      	adds	r6, #8
 8008fdc:	3c01      	subs	r4, #1
 8008fde:	e7f6      	b.n	8008fce <_ZN22SimpleStringCollection8allocateEj+0x8e>
 8008fe0:	f105 0208 	add.w	r2, r5, #8
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff0:	080166b0 	.word	0x080166b0
 8008ff4:	08016770 	.word	0x08016770

08008ff8 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 8008ff8:	b590      	push	{r4, r7, lr}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01e      	beq.n	8009046 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3b04      	subs	r3, #4
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	00db      	lsls	r3, r3, #3
 8009016:	18d4      	adds	r4, r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	429c      	cmp	r4, r3
 800901e:	d004      	beq.n	800902a <_ZN22SimpleStringCollectionD1Ev+0x32>
 8009020:	3c08      	subs	r4, #8
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff f96d 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8009028:	e7f6      	b.n	8009018 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1a3 0208 	sub.w	r2, r3, #8
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3b04      	subs	r3, #4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3301      	adds	r3, #1
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	4619      	mov	r1, r3
 8009040:	4610      	mov	r0, r2
 8009042:	f7fd ff03 	bl	8006e4c <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3304      	adds	r3, #4
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff f959 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	bd90      	pop	{r4, r7, pc}

0800905a <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
    return size_;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
}
 8009066:	4618      	mov	r0, r3
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
	...

08009074 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 8009074:	b590      	push	{r4, r7, lr}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d315      	bcc.n	80090b4 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	1d1c      	adds	r4, r3, #4
 800908c:	f107 0308 	add.w	r3, r7, #8
 8009090:	490d      	ldr	r1, [pc, #52]	; (80090c8 <_ZN22SimpleStringCollectionixEj+0x54>)
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fd7d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	4619      	mov	r1, r3
 800909e:	4620      	mov	r0, r4
 80090a0:	f7fe fde3 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 80090a4:	f107 0308 	add.w	r3, r7, #8
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff f92a 	bl	8008302 <_ZN12SimpleStringD1Ev>
        return empty_;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3304      	adds	r3, #4
 80090b2:	e004      	b.n	80090be <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	4413      	add	r3, r2
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd90      	pop	{r4, r7, pc}
 80090c6:	bf00      	nop
 80090c8:	08016770 	.word	0x08016770

080090cc <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fc f970 	bl	80053bc <_ZN17ConsoleTestOutputC1Ev>
 80090dc:	4a08      	ldr	r2, [pc, #32]	; (8009100 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	611a      	str	r2, [r3, #16]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3314      	adds	r3, #20
 80090ec:	4905      	ldr	r1, [pc, #20]	; (8009104 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fd4f 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
{
}
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	08018c2c 	.word	0x08018c2c
 8009104:	08016870 	.word	0x08016870

08009108 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	4a08      	ldr	r2, [pc, #32]	; (8009134 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	3314      	adds	r3, #20
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff f8f1 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4618      	mov	r0, r3
 8009124:	f7fc f95c 	bl	80053e0 <_ZN17ConsoleTestOutputD1Ev>
{
}
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	08018c2c 	.word	0x08018c2c

08009138 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
}
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff ffe1 	bl	8009108 <_ZN18TeamCityTestOutputD1Ev>
 8009146:	211c      	movs	r1, #28
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7fd fe4d 	bl	8006de8 <_ZdlPvj>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	332c      	adds	r3, #44	; 0x2c
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	492b      	ldr	r1, [pc, #172]	; (800921c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800916e:	4610      	mov	r0, r2
 8009170:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 8009172:	f107 0308 	add.w	r3, r7, #8
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	4618      	mov	r0, r3
 800917a:	f004 fdf7 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 800917e:	f107 0308 	add.w	r3, r7, #8
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff f890 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009188:	4603      	mov	r3, r0
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f919 	bl	80093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff f8b3 	bl	8008302 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	332c      	adds	r3, #44	; 0x2c
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	491e      	ldr	r1, [pc, #120]	; (8009220 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 80091a8:	4610      	mov	r0, r2
 80091aa:	4798      	blx	r3
    if (!test.willRun()) {
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3318      	adds	r3, #24
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6838      	ldr	r0, [r7, #0]
 80091b6:	4798      	blx	r3
 80091b8:	4603      	mov	r3, r0
 80091ba:	f083 0301 	eor.w	r3, r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d024      	beq.n	800920e <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	332c      	adds	r3, #44	; 0x2c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4915      	ldr	r1, [pc, #84]	; (8009224 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 80091d4:	f107 0310 	add.w	r3, r7, #16
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f004 fdc6 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 80091e0:	f107 0310 	add.w	r3, r7, #16
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff f85f 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80091ea:	4603      	mov	r3, r0
 80091ec:	4619      	mov	r1, r3
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f8e8 	bl	80093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80091f4:	f107 0310 	add.w	r3, r7, #16
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff f882 	bl	8008302 <_ZN12SimpleStringD1Ev>
        print("']\n");
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	332c      	adds	r3, #44	; 0x2c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4905      	ldr	r1, [pc, #20]	; (8009220 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800920a:	4610      	mov	r0, r2
 800920c:	4798      	blx	r3
    }
    currtest_ = &test;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	611a      	str	r2, [r3, #16]
}
 8009214:	bf00      	nop
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	08016874 	.word	0x08016874
 8009220:	08016894 	.word	0x08016894
 8009224:	08016898 	.word	0x08016898

08009228 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8009228:	b5b0      	push	{r4, r5, r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d03b      	beq.n	80092b2 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	332c      	adds	r3, #44	; 0x2c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	491d      	ldr	r1, [pc, #116]	; (80092bc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 8009246:	4610      	mov	r0, r2
 8009248:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	691a      	ldr	r2, [r3, #16]
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4611      	mov	r1, r2
 8009254:	4618      	mov	r0, r3
 8009256:	f004 fd89 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 800925a:	f107 0308 	add.w	r3, r7, #8
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff f822 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009264:	4603      	mov	r3, r0
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f8ab 	bl	80093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff f845 	bl	8008302 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	332c      	adds	r3, #44	; 0x2c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	490f      	ldr	r1, [pc, #60]	; (80092c0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 8009288:	687d      	ldr	r5, [r7, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3334      	adds	r3, #52	; 0x34
 8009290:	681c      	ldr	r4, [r3, #0]
 8009292:	6838      	ldr	r0, [r7, #0]
 8009294:	f004 fa0a 	bl	800d6ac <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8009298:	4603      	mov	r3, r0
 800929a:	4619      	mov	r1, r3
 800929c:	4628      	mov	r0, r5
 800929e:	47a0      	blx	r4
    print("']\n");
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	332c      	adds	r3, #44	; 0x2c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4906      	ldr	r1, [pc, #24]	; (80092c4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 80092ac:	4610      	mov	r0, r2
 80092ae:	4798      	blx	r3
 80092b0:	e000      	b.n	80092b4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 80092b2:	bf00      	nop
}
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bdb0      	pop	{r4, r5, r7, pc}
 80092ba:	bf00      	nop
 80092bc:	080168b8 	.word	0x080168b8
 80092c0:	080168d8 	.word	0x080168d8
 80092c4:	08016894 	.word	0x08016894

080092c8 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80092c8:	b590      	push	{r4, r7, lr}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f103 0414 	add.w	r4, r3, #20
 80092d8:	f107 0308 	add.w	r3, r7, #8
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	4618      	mov	r0, r3
 80092e0:	f004 fd53 	bl	800dd8a <_ZNK10UtestShell8getGroupEv>
 80092e4:	f107 0308 	add.w	r3, r7, #8
 80092e8:	4619      	mov	r1, r3
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7fe fcbd 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 80092f0:	f107 0308 	add.w	r3, r7, #8
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff f804 	bl	8008302 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	332c      	adds	r3, #44	; 0x2c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	490c      	ldr	r1, [pc, #48]	; (8009338 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 8009306:	4610      	mov	r0, r2
 8009308:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3314      	adds	r3, #20
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe ffca 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009314:	4603      	mov	r3, r0
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f853 	bl	80093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	332c      	adds	r3, #44	; 0x2c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4904      	ldr	r1, [pc, #16]	; (800933c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800932a:	4610      	mov	r0, r2
 800932c:	4798      	blx	r3
}
 800932e:	bf00      	nop
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	bd90      	pop	{r4, r7, pc}
 8009336:	bf00      	nop
 8009338:	080168e8 	.word	0x080168e8
 800933c:	08016894 	.word	0x08016894

08009340 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8009340:	b590      	push	{r4, r7, lr}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f103 0414 	add.w	r4, r3, #20
 8009350:	f107 0308 	add.w	r3, r7, #8
 8009354:	4918      	ldr	r1, [pc, #96]	; (80093b8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fc1b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800935c:	f107 0308 	add.w	r3, r7, #8
 8009360:	4619      	mov	r1, r3
 8009362:	4620      	mov	r0, r4
 8009364:	f7fe ffd9 	bl	800831a <_ZeqRK12SimpleStringS1_>
 8009368:	4603      	mov	r3, r0
 800936a:	461c      	mov	r4, r3
 800936c:	f107 0308 	add.w	r3, r7, #8
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe ffc6 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8009376:	2c00      	cmp	r4, #0
 8009378:	d11a      	bne.n	80093b0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	332c      	adds	r3, #44	; 0x2c
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	490d      	ldr	r1, [pc, #52]	; (80093bc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 8009386:	4610      	mov	r0, r2
 8009388:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3314      	adds	r3, #20
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe ff8a 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009394:	4603      	mov	r3, r0
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f813 	bl	80093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	332c      	adds	r3, #44	; 0x2c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4905      	ldr	r1, [pc, #20]	; (80093c0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 80093aa:	4610      	mov	r0, r2
 80093ac:	4798      	blx	r3
 80093ae:	e000      	b.n	80093b2 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 80093b0:	bf00      	nop
}
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd90      	pop	{r4, r7, pc}
 80093b8:	08016870 	.word	0x08016870
 80093bc:	0801690c 	.word	0x0801690c
 80093c0:	08016894 	.word	0x08016894

080093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
    while (*s) {
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d03f      	beq.n	8009456 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b27      	cmp	r3, #39	; 0x27
 80093dc:	d00b      	beq.n	80093f6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b7c      	cmp	r3, #124	; 0x7c
 80093e4:	d007      	beq.n	80093f6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	2b5b      	cmp	r3, #91	; 0x5b
 80093ec:	d003      	beq.n	80093f6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2b5d      	cmp	r3, #93	; 0x5d
 80093f4:	d107      	bne.n	8009406 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 80093f6:	237c      	movs	r3, #124	; 0x7c
 80093f8:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	73bb      	strb	r3, [r7, #14]
 8009404:	e01a      	b.n	800943c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b0d      	cmp	r3, #13
 800940c:	d106      	bne.n	800941c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800940e:	237c      	movs	r3, #124	; 0x7c
 8009410:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8009412:	2372      	movs	r3, #114	; 0x72
 8009414:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	73bb      	strb	r3, [r7, #14]
 800941a:	e00f      	b.n	800943c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b0a      	cmp	r3, #10
 8009422:	d106      	bne.n	8009432 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8009424:	237c      	movs	r3, #124	; 0x7c
 8009426:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 8009428:	236e      	movs	r3, #110	; 0x6e
 800942a:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	73bb      	strb	r3, [r7, #14]
 8009430:	e004      	b.n	800943c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3328      	adds	r3, #40	; 0x28
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f107 010c 	add.w	r1, r7, #12
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
        s++;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	603b      	str	r3, [r7, #0]
    while (*s) {
 8009454:	e7bb      	b.n	80093ce <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
	...

08009460 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 8009460:	b5b0      	push	{r4, r5, r7, lr}
 8009462:	b08a      	sub	sp, #40	; 0x28
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	332c      	adds	r3, #44	; 0x2c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4968      	ldr	r1, [pc, #416]	; (8009618 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 8009476:	4610      	mov	r0, r2
 8009478:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3310      	adds	r3, #16
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f107 0208 	add.w	r2, r7, #8
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	4610      	mov	r0, r2
 800948a:	4798      	blx	r3
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	4618      	mov	r0, r3
 8009492:	f7fe ff09 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009496:	4603      	mov	r3, r0
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff ff92 	bl	80093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe ff2c 	bl	8008302 <_ZN12SimpleStringD1Ev>
    print("' message='");
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	332c      	adds	r3, #44	; 0x2c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4959      	ldr	r1, [pc, #356]	; (800961c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 80094b6:	4610      	mov	r0, r2
 80094b8:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 80094ba:	6838      	ldr	r0, [r7, #0]
 80094bc:	f000 fa15 	bl	80098ea <_ZNK11TestFailure17isOutsideTestFileEv>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d105      	bne.n	80094d2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 80094c6:	6838      	ldr	r0, [r7, #0]
 80094c8:	f000 fa21 	bl	800990e <_ZNK11TestFailure18isInHelperFunctionEv>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 80094d6:	2300      	movs	r3, #0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d042      	beq.n	8009562 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	332c      	adds	r3, #44	; 0x2c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	494e      	ldr	r1, [pc, #312]	; (8009620 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 80094e8:	4610      	mov	r0, r2
 80094ea:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 80094ec:	687d      	ldr	r5, [r7, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	332c      	adds	r3, #44	; 0x2c
 80094f4:	681c      	ldr	r4, [r3, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	331c      	adds	r3, #28
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f107 0210 	add.w	r2, r7, #16
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	4610      	mov	r0, r2
 8009506:	4798      	blx	r3
 8009508:	f107 0310 	add.w	r3, r7, #16
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe fecb 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009512:	4603      	mov	r3, r0
 8009514:	4619      	mov	r1, r3
 8009516:	4628      	mov	r0, r5
 8009518:	47a0      	blx	r4
 800951a:	f107 0310 	add.w	r3, r7, #16
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe feef 	bl	8008302 <_ZN12SimpleStringD1Ev>
        print(":");
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	332c      	adds	r3, #44	; 0x2c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	493d      	ldr	r1, [pc, #244]	; (8009624 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
        print(failure.getTestLineNumber());
 8009534:	687d      	ldr	r5, [r7, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3334      	adds	r3, #52	; 0x34
 800953c:	681c      	ldr	r4, [r3, #0]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3320      	adds	r3, #32
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6838      	ldr	r0, [r7, #0]
 8009548:	4798      	blx	r3
 800954a:	4603      	mov	r3, r0
 800954c:	4619      	mov	r1, r3
 800954e:	4628      	mov	r0, r5
 8009550:	47a0      	blx	r4
        print("): ");
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	332c      	adds	r3, #44	; 0x2c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4932      	ldr	r1, [pc, #200]	; (8009628 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800955e:	4610      	mov	r0, r2
 8009560:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3308      	adds	r3, #8
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f107 0218 	add.w	r2, r7, #24
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	f107 0318 	add.w	r3, r7, #24
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe fe95 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800957e:	4603      	mov	r3, r0
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff ff1e 	bl	80093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8009588:	f107 0318 	add.w	r3, r7, #24
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe feb8 	bl	8008302 <_ZN12SimpleStringD1Ev>
    print(":");
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	332c      	adds	r3, #44	; 0x2c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4921      	ldr	r1, [pc, #132]	; (8009624 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800959e:	4610      	mov	r0, r2
 80095a0:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 80095a2:	687d      	ldr	r5, [r7, #4]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3334      	adds	r3, #52	; 0x34
 80095aa:	681c      	ldr	r4, [r3, #0]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3314      	adds	r3, #20
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6838      	ldr	r0, [r7, #0]
 80095b6:	4798      	blx	r3
 80095b8:	4603      	mov	r3, r0
 80095ba:	4619      	mov	r1, r3
 80095bc:	4628      	mov	r0, r5
 80095be:	47a0      	blx	r4

    print("' details='");
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	332c      	adds	r3, #44	; 0x2c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4918      	ldr	r1, [pc, #96]	; (800962c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3318      	adds	r3, #24
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f107 0220 	add.w	r2, r7, #32
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	4610      	mov	r0, r2
 80095e0:	4798      	blx	r3
 80095e2:	f107 0320 	add.w	r3, r7, #32
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fe5e 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80095ec:	4603      	mov	r3, r0
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff fee7 	bl	80093c4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80095f6:	f107 0320 	add.w	r3, r7, #32
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fe fe81 	bl	8008302 <_ZN12SimpleStringD1Ev>
    print("']\n");
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	332c      	adds	r3, #44	; 0x2c
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4909      	ldr	r1, [pc, #36]	; (8009630 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
}
 8009610:	bf00      	nop
 8009612:	3728      	adds	r7, #40	; 0x28
 8009614:	46bd      	mov	sp, r7
 8009616:	bdb0      	pop	{r4, r5, r7, pc}
 8009618:	08016930 	.word	0x08016930
 800961c:	08016950 	.word	0x08016950
 8009620:	0801695c 	.word	0x0801695c
 8009624:	0801696c 	.word	0x0801696c
 8009628:	08016970 	.word	0x08016970
 800962c:	08016974 	.word	0x08016974
 8009630:	08016894 	.word	0x08016894

08009634 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 8009640:	4a1a      	ldr	r2, [pc, #104]	; (80096ac <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3314      	adds	r3, #20
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	3204      	adds	r2, #4
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	4610      	mov	r0, r2
 8009656:	4798      	blx	r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	330c      	adds	r3, #12
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	4618      	mov	r0, r3
 8009660:	f004 fb84 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	3314      	adds	r3, #20
 8009668:	68b9      	ldr	r1, [r7, #8]
 800966a:	4618      	mov	r0, r3
 800966c:	f004 fc3e 	bl	800deec <_ZNK10UtestShell7getFileEv>
 8009670:	68b8      	ldr	r0, [r7, #8]
 8009672:	f004 fc4a 	bl	800df0a <_ZNK10UtestShell13getLineNumberEv>
 8009676:	4602      	mov	r2, r0
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	61da      	str	r2, [r3, #28]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	3320      	adds	r3, #32
 8009680:	68b9      	ldr	r1, [r7, #8]
 8009682:	4618      	mov	r0, r3
 8009684:	f004 fc32 	bl	800deec <_ZNK10UtestShell7getFileEv>
 8009688:	68b8      	ldr	r0, [r7, #8]
 800968a:	f004 fc3e 	bl	800df0a <_ZNK10UtestShell13getLineNumberEv>
 800968e:	4602      	mov	r2, r0
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	629a      	str	r2, [r3, #40]	; 0x28
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	332c      	adds	r3, #44	; 0x2c
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe facd 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
{
}
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	08018ef8 	.word	0x08018ef8

080096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 80096be:	4a19      	ldr	r2, [pc, #100]	; (8009724 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3314      	adds	r3, #20
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	3204      	adds	r2, #4
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	4610      	mov	r0, r2
 80096d4:	4798      	blx	r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	330c      	adds	r3, #12
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	4618      	mov	r0, r3
 80096de:	f004 fb45 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3314      	adds	r3, #20
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fe fa52 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	61da      	str	r2, [r3, #28]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3320      	adds	r3, #32
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f004 fbf6 	bl	800deec <_ZNK10UtestShell7getFileEv>
 8009700:	68b8      	ldr	r0, [r7, #8]
 8009702:	f004 fc02 	bl	800df0a <_ZNK10UtestShell13getLineNumberEv>
 8009706:	4602      	mov	r2, r0
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	629a      	str	r2, [r3, #40]	; 0x28
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	332c      	adds	r3, #44	; 0x2c
 8009710:	4905      	ldr	r1, [pc, #20]	; (8009728 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe fa3d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
{
}
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	08018ef8 	.word	0x08018ef8
 8009728:	08016980 	.word	0x08016980

0800972c <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 8009736:	4a1e      	ldr	r2, [pc, #120]	; (80097b0 <_ZN11TestFailureC1ERKS_+0x84>)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	1d1a      	adds	r2, r3, #4
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	3304      	adds	r3, #4
 8009744:	4619      	mov	r1, r3
 8009746:	4610      	mov	r0, r2
 8009748:	f7fe fa77 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f103 020c 	add.w	r2, r3, #12
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	330c      	adds	r3, #12
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f7fe fa6e 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f103 0214 	add.w	r2, r3, #20
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	3314      	adds	r3, #20
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f7fe fa65 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	69da      	ldr	r2, [r3, #28]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	61da      	str	r2, [r3, #28]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f103 0220 	add.w	r2, r3, #32
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	3320      	adds	r3, #32
 8009782:	4619      	mov	r1, r3
 8009784:	4610      	mov	r0, r2
 8009786:	f7fe fa58 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	629a      	str	r2, [r3, #40]	; 0x28
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	332c      	adds	r3, #44	; 0x2c
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f7fe fa4b 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
{
}
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	08018ef8 	.word	0x08018ef8

080097b4 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	4a10      	ldr	r2, [pc, #64]	; (8009800 <_ZN11TestFailureD1Ev+0x4c>)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	332c      	adds	r3, #44	; 0x2c
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe fd9b 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3320      	adds	r3, #32
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fd96 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3314      	adds	r3, #20
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe fd91 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	330c      	adds	r3, #12
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fe fd8c 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	3304      	adds	r3, #4
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fd87 	bl	8008302 <_ZN12SimpleStringD1Ev>
{
}
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	08018ef8 	.word	0x08018ef8

08009804 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
}
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ffd1 	bl	80097b4 <_ZN11TestFailureD1Ev>
 8009812:	2134      	movs	r1, #52	; 0x34
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7fd fae7 	bl	8006de8 <_ZdlPvj>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
    return fileName_;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	3314      	adds	r3, #20
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7fe fa00 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
}
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	3320      	adds	r3, #32
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7fe f9f1 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
}
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
    return testName_;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	3304      	adds	r3, #4
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7fe f9e2 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
}
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	330c      	adds	r3, #12
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7fe f9d3 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
}
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	69db      	ldr	r3, [r3, #28]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
    return message_;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	332c      	adds	r3, #44	; 0x2c
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7fe f9ac 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
}
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f103 0220 	add.w	r2, r3, #32
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3314      	adds	r3, #20
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f7fe fd50 	bl	80083a4 <_ZneRK12SimpleStringS1_>
 8009904:	4603      	mov	r3, r0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800990e:	b480      	push	{r7}
 8009910:	b083      	sub	sp, #12
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69da      	ldr	r2, [r3, #28]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	429a      	cmp	r2, r3
 8009920:	bf34      	ite	cc
 8009922:	2301      	movcc	r3, #1
 8009924:	2300      	movcs	r3, #0
 8009926:	b2db      	uxtb	r3, r3
}
 8009928:	4618      	mov	r0, r3
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 8009934:	b590      	push	{r4, r7, lr}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7fe fcb0 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009948:	4604      	mov	r4, r0
 800994a:	6838      	ldr	r0, [r7, #0]
 800994c:	f7fe fcac 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009950:	4603      	mov	r3, r0
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	4622      	mov	r2, r4
 8009956:	4903      	ldr	r1, [pc, #12]	; (8009964 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 8009958:	f7ff f960 	bl	8008c1c <_Z16StringFromFormatPKcz>
}
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	bd90      	pop	{r4, r7, pc}
 8009964:	0801698c 	.word	0x0801698c

08009968 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 8009968:	b590      	push	{r4, r7, lr}
 800996a:	b097      	sub	sp, #92	; 0x5c
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8009976:	494c      	ldr	r1, [pc, #304]	; (8009aa8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7fe f90a 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800997e:	2314      	movs	r3, #20
 8009980:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 8009982:	230a      	movs	r3, #10
 8009984:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8009986:	f107 0320 	add.w	r3, r7, #32
 800998a:	220a      	movs	r2, #10
 800998c:	4947      	ldr	r1, [pc, #284]	; (8009aac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800998e:	4618      	mov	r0, r3
 8009990:	f7fe f91a 	bl	8007bc8 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8009994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009998:	f107 0120 	add.w	r1, r7, #32
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fd11 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 80099a4:	f107 0318 	add.w	r3, r7, #24
 80099a8:	f107 0220 	add.w	r2, r7, #32
 80099ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe fd08 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 80099b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fe fca1 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 80099c0:	f107 0310 	add.w	r3, r7, #16
 80099c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099c6:	493a      	ldr	r1, [pc, #232]	; (8009ab0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff f927 	bl	8008c1c <_Z16StringFromFormatPKcz>

    result += "\n";
 80099ce:	4939      	ldr	r1, [pc, #228]	; (8009ab4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f7fe fd25 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 80099d6:	f107 0310 	add.w	r3, r7, #16
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fe fc64 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80099e0:	4604      	mov	r4, r0
 80099e2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80099e6:	f107 0118 	add.w	r1, r7, #24
 80099ea:	2314      	movs	r3, #20
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	f7fe fd91 	bl	8008514 <_ZNK12SimpleString9subStringEjj>
 80099f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fc56 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009a02:	4622      	mov	r2, r4
 8009a04:	492c      	ldr	r1, [pc, #176]	; (8009ab8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 8009a06:	f7ff f909 	bl	8008c1c <_Z16StringFromFormatPKcz>
 8009a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7fe fcf3 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8009a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fc71 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8009a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe fc6c 	bl	8008302 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 8009a2a:	f107 0310 	add.w	r3, r7, #16
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe fc46 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8009a34:	4603      	mov	r3, r0
 8009a36:	f103 020a 	add.w	r2, r3, #10
 8009a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a3e:	491b      	ldr	r1, [pc, #108]	; (8009aac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe f8c1 	bl	8007bc8 <_ZN12SimpleStringC1EPKcj>
 8009a46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fc2c 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009a50:	4602      	mov	r2, r0
 8009a52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a56:	4919      	ldr	r1, [pc, #100]	; (8009abc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff f8df 	bl	8008c1c <_Z16StringFromFormatPKcz>
 8009a5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a62:	4619      	mov	r1, r3
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f7fe fcc9 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8009a6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fe fc47 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8009a74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe fc42 	bl	8008302 <_ZN12SimpleStringD1Ev>
    return result;
 8009a7e:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8009a80:	f107 0310 	add.w	r3, r7, #16
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe fc3c 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8009a8a:	f107 0318 	add.w	r3, r7, #24
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fc37 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8009a94:	f107 0320 	add.w	r3, r7, #32
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fc32 	bl	8008302 <_ZN12SimpleStringD1Ev>
    return result;
 8009a9e:	bf00      	nop
}
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	375c      	adds	r7, #92	; 0x5c
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd90      	pop	{r4, r7, pc}
 8009aa8:	080169ac 	.word	0x080169ac
 8009aac:	080169b0 	.word	0x080169b0
 8009ab0:	080169b4 	.word	0x080169b4
 8009ab4:	080169dc 	.word	0x080169dc
 8009ab8:	080169e0 	.word	0x080169e0
 8009abc:	080169e8 	.word	0x080169e8

08009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 8009ac0:	b590      	push	{r4, r7, lr}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 8009acc:	491a      	ldr	r1, [pc, #104]	; (8009b38 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f7fe f85f 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7fe fc03 	bl	80082e0 <_ZNK12SimpleString7isEmptyEv>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f083 0301 	eor.w	r3, r3, #1
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d022      	beq.n	8009b2c <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 8009ae6:	f107 0310 	add.w	r3, r7, #16
 8009aea:	4914      	ldr	r1, [pc, #80]	; (8009b3c <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fe f850 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8009af2:	f107 0310 	add.w	r3, r7, #16
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7fe f90e 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f083 0301 	eor.w	r3, r3, #1
 8009b04:	b2dc      	uxtb	r4, r3
 8009b06:	f107 0310 	add.w	r3, r7, #16
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fbf9 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8009b10:	2c00      	cmp	r4, #0
 8009b12:	d003      	beq.n	8009b1c <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 8009b14:	490a      	ldr	r1, [pc, #40]	; (8009b40 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7fe fc82 	bl	8008420 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8009b1c:	6879      	ldr	r1, [r7, #4]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f7fe fc6c 	bl	80083fc <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 8009b24:	4907      	ldr	r1, [pc, #28]	; (8009b44 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7fe fc7a 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 8009b2c:	bf00      	nop
}
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd90      	pop	{r4, r7, pc}
 8009b36:	bf00      	nop
 8009b38:	080169ac 	.word	0x080169ac
 8009b3c:	080169f0 	.word	0x080169f0
 8009b40:	080169fc 	.word	0x080169fc
 8009b44:	08016a08 	.word	0x08016a08

08009b48 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009b48:	b590      	push	{r4, r7, lr}
 8009b4a:	b089      	sub	sp, #36	; 0x24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	68b9      	ldr	r1, [r7, #8]
 8009b5e:	f7ff fda7 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009b62:	4a19      	ldr	r2, [pc, #100]	; (8009bc8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009b6e:	68f9      	ldr	r1, [r7, #12]
 8009b70:	f107 0310 	add.w	r3, r7, #16
 8009b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff ffa2 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009b7c:	f107 0310 	add.w	r3, r7, #16
 8009b80:	4619      	mov	r1, r3
 8009b82:	4620      	mov	r0, r4
 8009b84:	f7fe f871 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8009b88:	f107 0310 	add.w	r3, r7, #16
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fe fbb8 	bl	8008302 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009b98:	68f9      	ldr	r1, [r7, #12]
 8009b9a:	f107 0018 	add.w	r0, r7, #24
 8009b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba2:	f7ff fec7 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009ba6:	f107 0318 	add.w	r3, r7, #24
 8009baa:	4619      	mov	r1, r3
 8009bac:	4620      	mov	r0, r4
 8009bae:	f7fe fc25 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8009bb2:	f107 0318 	add.w	r3, r7, #24
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fba3 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3724      	adds	r7, #36	; 0x24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd90      	pop	{r4, r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	08018ecc 	.word	0x08018ecc

08009bcc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 8009bcc:	b5b0      	push	{r4, r5, r7, lr}
 8009bce:	b094      	sub	sp, #80	; 0x50
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6278      	str	r0, [r7, #36]	; 0x24
 8009bd4:	6239      	str	r1, [r7, #32]
 8009bd6:	61fa      	str	r2, [r7, #28]
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	ed87 0b04 	vstr	d0, [r7, #16]
 8009bde:	ed87 1b02 	vstr	d1, [r7, #8]
 8009be2:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 8009be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	69fa      	ldr	r2, [r7, #28]
 8009bec:	6a39      	ldr	r1, [r7, #32]
 8009bee:	f7ff fd5f 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009bf2:	4a4a      	ldr	r2, [pc, #296]	; (8009d1c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff ff5a 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c10:	4619      	mov	r1, r3
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7fe f829 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8009c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fb70 	bl	8008302 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009c28:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8009c2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c2e:	2107      	movs	r1, #7
 8009c30:	ed97 0b04 	vldr	d0, [r7, #16]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe ffaf 	bl	8008b98 <_Z10StringFromdi>
 8009c3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c3e:	2107      	movs	r1, #7
 8009c40:	ed97 0b02 	vldr	d0, [r7, #8]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe ffa7 	bl	8008b98 <_Z10StringFromdi>
 8009c4a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009c4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c56:	4629      	mov	r1, r5
 8009c58:	f7ff fe6c 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c60:	4619      	mov	r1, r3
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7fe fbca 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8009c68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe fb48 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8009c72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fb43 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8009c7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe fb3e 	bl	8008302 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	332c      	adds	r3, #44	; 0x2c
 8009c8a:	4925      	ldr	r1, [pc, #148]	; (8009d20 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fbc7 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009c98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c9c:	2107      	movs	r1, #7
 8009c9e:	ed97 0b00 	vldr	d0, [r7]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe ff78 	bl	8008b98 <_Z10StringFromdi>
 8009ca8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cac:	4619      	mov	r1, r3
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7fe fba4 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8009cb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe fb22 	bl	8008302 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	332c      	adds	r3, #44	; 0x2c
 8009cc2:	4918      	ldr	r1, [pc, #96]	; (8009d24 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe fbab 	bl	8008420 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 8009cca:	4b17      	ldr	r3, [pc, #92]	; (8009d28 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	ed97 0b04 	vldr	d0, [r7, #16]
 8009cd2:	4798      	blx	r3
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10f      	bne.n	8009cfa <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	ed97 0b02 	vldr	d0, [r7, #8]
 8009ce2:	4798      	blx	r3
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d107      	bne.n	8009cfa <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8009cea:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	ed97 0b00 	vldr	d0, [r7]
 8009cf2:	4798      	blx	r3
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	332c      	adds	r3, #44	; 0x2c
 8009d08:	4908      	ldr	r1, [pc, #32]	; (8009d2c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fe fb88 	bl	8008420 <_ZN12SimpleStringpLEPKc>
}
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	4618      	mov	r0, r3
 8009d14:	3750      	adds	r7, #80	; 0x50
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bdb0      	pop	{r4, r5, r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	08018ea0 	.word	0x08018ea0
 8009d20:	08016a0c 	.word	0x08016a0c
 8009d24:	08016a24 	.word	0x08016a24
 8009d28:	200000e0 	.word	0x200000e0
 8009d2c:	08016a28 	.word	0x08016a28

08009d30 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009d30:	b590      	push	{r4, r7, lr}
 8009d32:	b093      	sub	sp, #76	; 0x4c
 8009d34:	af02      	add	r7, sp, #8
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	f7ff fcb3 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009d4a:	4a4f      	ldr	r2, [pc, #316]	; (8009e88 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009d56:	68f9      	ldr	r1, [r7, #12]
 8009d58:	f107 0320 	add.w	r3, r7, #32
 8009d5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff feae 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009d64:	f107 0320 	add.w	r3, r7, #32
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7fd ff7d 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8009d70:	f107 0320 	add.w	r3, r7, #32
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fac4 	bl	8008302 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8009d7a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009d7c:	f7fe fa94 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009d80:	4602      	mov	r2, r0
 8009d82:	f107 0318 	add.w	r3, r7, #24
 8009d86:	4611      	mov	r1, r2
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe fd37 	bl	80087fc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8009d8e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009d90:	f7fe fa8a 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009d94:	4602      	mov	r2, r0
 8009d96:	f107 0310 	add.w	r3, r7, #16
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe fd2d 	bl	80087fc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009da8:	68f9      	ldr	r1, [r7, #12]
 8009daa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009dae:	f107 0310 	add.w	r3, r7, #16
 8009db2:	f107 0218 	add.w	r2, r7, #24
 8009db6:	f7ff fdbd 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7fe fb1b 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8009dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fa99 	bl	8008302 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009dd6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009dd8:	f7fe fbf7 	bl	80085ca <_ZNK12SimpleString2atEj>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	461c      	mov	r4, r3
 8009de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009de2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009de4:	f7fe fbf1 	bl	80085ca <_ZNK12SimpleString2atEj>
 8009de8:	4603      	mov	r3, r0
 8009dea:	429c      	cmp	r4, r3
 8009dec:	bf0c      	ite	eq
 8009dee:	2301      	moveq	r3, #1
 8009df0:	2300      	movne	r3, #0
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 8009df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dfe:	e7e9      	b.n	8009dd4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8009e00:	2300      	movs	r3, #0
 8009e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e04:	f107 0310 	add.w	r3, r7, #16
 8009e08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fbdd 	bl	80085ca <_ZNK12SimpleString2atEj>
 8009e10:	4603      	mov	r3, r0
 8009e12:	461c      	mov	r4, r3
 8009e14:	f107 0318 	add.w	r3, r7, #24
 8009e18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fbd5 	bl	80085ca <_ZNK12SimpleString2atEj>
 8009e20:	4603      	mov	r3, r0
 8009e22:	429c      	cmp	r4, r3
 8009e24:	bf0c      	ite	eq
 8009e26:	2301      	moveq	r3, #1
 8009e28:	2300      	movne	r3, #0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	3301      	adds	r3, #1
 8009e34:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e36:	e7e5      	b.n	8009e04 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009e44:	f107 0210 	add.w	r2, r7, #16
 8009e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	f7ff fd8b 	bl	8009968 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8009e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e56:	4619      	mov	r1, r3
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7fe facf 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8009e5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe fa4d 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8009e68:	f107 0310 	add.w	r3, r7, #16
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fa48 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8009e72:	f107 0318 	add.w	r3, r7, #24
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fe fa43 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3744      	adds	r7, #68	; 0x44
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd90      	pop	{r4, r7, pc}
 8009e86:	bf00      	nop
 8009e88:	08018e74 	.word	0x08018e74

08009e8c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 8009e8c:	b590      	push	{r4, r7, lr}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	f7ff fc05 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009ea6:	4a1a      	ldr	r2, [pc, #104]	; (8009f10 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009eb2:	68f9      	ldr	r1, [r7, #12]
 8009eb4:	f107 0310 	add.w	r3, r7, #16
 8009eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff fe00 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009ec0:	f107 0310 	add.w	r3, r7, #16
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f7fd fecf 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8009ecc:	f107 0310 	add.w	r3, r7, #16
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fe fa16 	bl	8008302 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	332c      	adds	r3, #44	; 0x2c
 8009eda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe fa8d 	bl	80083fc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	332c      	adds	r3, #44	; 0x2c
 8009ee6:	490b      	ldr	r1, [pc, #44]	; (8009f14 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe fa99 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	332c      	adds	r3, #44	; 0x2c
 8009ef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fe fa81 	bl	80083fc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	332c      	adds	r3, #44	; 0x2c
 8009efe:	4906      	ldr	r1, [pc, #24]	; (8009f18 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe fa8d 	bl	8008420 <_ZN12SimpleStringpLEPKc>
}
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd90      	pop	{r4, r7, pc}
 8009f10:	08018e48 	.word	0x08018e48
 8009f14:	08016a4c 	.word	0x08016a4c
 8009f18:	08016a50 	.word	0x08016a50

08009f1c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009f1c:	b5b0      	push	{r4, r5, r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	f7ff fbbd 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009f36:	4a1c      	ldr	r2, [pc, #112]	; (8009fa8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009f42:	68f9      	ldr	r1, [r7, #12]
 8009f44:	f107 0310 	add.w	r3, r7, #16
 8009f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff fdb8 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009f50:	f107 0310 	add.w	r3, r7, #16
 8009f54:	4619      	mov	r1, r3
 8009f56:	4620      	mov	r0, r4
 8009f58:	f7fd fe87 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8009f5c:	f107 0310 	add.w	r3, r7, #16
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe f9ce 	bl	8008302 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009f6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f6e:	f7fe f99b 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009f72:	4605      	mov	r5, r0
 8009f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f76:	f7fe f997 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f107 0018 	add.w	r0, r7, #24
 8009f80:	462a      	mov	r2, r5
 8009f82:	490a      	ldr	r1, [pc, #40]	; (8009fac <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8009f84:	f7fe fe4a 	bl	8008c1c <_Z16StringFromFormatPKcz>
 8009f88:	f107 0318 	add.w	r3, r7, #24
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7fe fa34 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 8009f94:	f107 0318 	add.w	r3, r7, #24
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe f9b2 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3720      	adds	r7, #32
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8009fa8:	08018e1c 	.word	0x08018e1c
 8009fac:	08016a5c 	.word	0x08016a5c

08009fb0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	f7ff fb73 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009fca:	4a1a      	ldr	r2, [pc, #104]	; (800a034 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009fd6:	68f9      	ldr	r1, [r7, #12]
 8009fd8:	f107 0310 	add.w	r3, r7, #16
 8009fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fd6e 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009fe4:	f107 0310 	add.w	r3, r7, #16
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7fd fe3d 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8009ff0:	f107 0310 	add.w	r3, r7, #16
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fe f984 	bl	8008302 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	332c      	adds	r3, #44	; 0x2c
 8009ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe f9fb 	bl	80083fc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	332c      	adds	r3, #44	; 0x2c
 800a00a:	490b      	ldr	r1, [pc, #44]	; (800a038 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe fa07 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	332c      	adds	r3, #44	; 0x2c
 800a016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe f9ef 	bl	80083fc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	332c      	adds	r3, #44	; 0x2c
 800a022:	4906      	ldr	r1, [pc, #24]	; (800a03c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe f9fb 	bl	8008420 <_ZN12SimpleStringpLEPKc>
}
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4618      	mov	r0, r3
 800a02e:	371c      	adds	r7, #28
 800a030:	46bd      	mov	sp, r7
 800a032:	bd90      	pop	{r4, r7, pc}
 800a034:	08018df0 	.word	0x08018df0
 800a038:	08016a4c 	.word	0x08016a4c
 800a03c:	08016a50 	.word	0x08016a50

0800a040 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	68b9      	ldr	r1, [r7, #8]
 800a056:	f7ff fb2b 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a05a:	4a07      	ldr	r2, [pc, #28]	; (800a078 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	332c      	adds	r3, #44	; 0x2c
 800a064:	69b9      	ldr	r1, [r7, #24]
 800a066:	4618      	mov	r0, r3
 800a068:	f7fd fdff 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
}
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	08018c00 	.word	0x08018c00

0800a07c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800a07c:	b590      	push	{r4, r7, lr}
 800a07e:	b09d      	sub	sp, #116	; 0x74
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	68b9      	ldr	r1, [r7, #8]
 800a092:	f7ff fb0d 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a096:	4a5d      	ldr	r2, [pc, #372]	; (800a20c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a0a2:	68f9      	ldr	r1, [r7, #12]
 800a0a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff fd07 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a0b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f7fd fdd6 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800a0be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe f91d 	bl	8008302 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800a0c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0cc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe fbd1 	bl	8008878 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800a0d6:	f107 0320 	add.w	r3, r7, #32
 800a0da:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fbca 	bl	8008878 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800a0e4:	f107 0120 	add.w	r1, r7, #32
 800a0e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0ec:	2220      	movs	r2, #32
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe f9c4 	bl	800847c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a0f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0f8:	4945      	ldr	r1, [pc, #276]	; (800a210 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fd fd49 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800a100:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a104:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a108:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe f95a 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a112:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a116:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fc66 	bl	80089ec <_Z30BracketsFormattedHexStringFroml>
 800a120:	f107 0318 	add.w	r3, r7, #24
 800a124:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a128:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe f94a 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe f8e3 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a13c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe f8de 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe f8d9 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a150:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a154:	492e      	ldr	r1, [pc, #184]	; (800a210 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800a156:	4618      	mov	r0, r3
 800a158:	f7fd fd1b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800a15c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a160:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a164:	f107 0120 	add.w	r1, r7, #32
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe f92c 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a16e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a172:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fc38 	bl	80089ec <_Z30BracketsFormattedHexStringFroml>
 800a17c:	f107 0310 	add.w	r3, r7, #16
 800a180:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a184:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fe f91c 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a18e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe f8b5 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a198:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe f8b0 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a1a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe f8ab 	bl	8008302 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a1b2:	68f9      	ldr	r1, [r7, #12]
 800a1b4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800a1b8:	f107 0318 	add.w	r3, r7, #24
 800a1bc:	f107 0210 	add.w	r2, r7, #16
 800a1c0:	f7ff fbb8 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a1c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f7fe f916 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a1d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fe f894 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a1da:	f107 0310 	add.w	r3, r7, #16
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fe f88f 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a1e4:	f107 0318 	add.w	r3, r7, #24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe f88a 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800a1ee:	f107 0320 	add.w	r3, r7, #32
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe f885 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800a1f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fe f880 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4618      	mov	r0, r3
 800a206:	3774      	adds	r7, #116	; 0x74
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd90      	pop	{r4, r7, pc}
 800a20c:	08018dc4 	.word	0x08018dc4
 800a210:	080169b0 	.word	0x080169b0

0800a214 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b09d      	sub	sp, #116	; 0x74
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	f7ff fa41 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a22e:	4a5d      	ldr	r2, [pc, #372]	; (800a3a4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a23a:	68f9      	ldr	r1, [r7, #12]
 800a23c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a240:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff fc3b 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a24a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a24e:	4619      	mov	r1, r3
 800a250:	4620      	mov	r0, r4
 800a252:	f7fd fd0a 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800a256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe f851 	bl	8008302 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800a260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a264:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe fd11 	bl	8008c90 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800a26e:	f107 0320 	add.w	r3, r7, #32
 800a272:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fd0a 	bl	8008c90 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800a27c:	f107 0120 	add.w	r1, r7, #32
 800a280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a284:	2220      	movs	r2, #32
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe f8f8 	bl	800847c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a28c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a290:	4945      	ldr	r1, [pc, #276]	; (800a3a8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd fc7d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800a298:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a29c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a2a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7fe f88e 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a2aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a2ae:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fbb6 	bl	8008a24 <_Z30BracketsFormattedHexStringFromm>
 800a2b8:	f107 0318 	add.w	r3, r7, #24
 800a2bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe f87e 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a2ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe f817 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a2d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe f812 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a2de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe f80d 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a2e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a2ec:	492e      	ldr	r1, [pc, #184]	; (800a3a8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fd fc4f 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800a2f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a2f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a2fc:	f107 0120 	add.w	r1, r7, #32
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe f860 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a306:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a30a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fb88 	bl	8008a24 <_Z30BracketsFormattedHexStringFromm>
 800a314:	f107 0310 	add.w	r3, r7, #16
 800a318:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a31c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe f850 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a326:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fd ffe9 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a330:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a334:	4618      	mov	r0, r3
 800a336:	f7fd ffe4 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a33a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fd ffdf 	bl	8008302 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a34a:	68f9      	ldr	r1, [r7, #12]
 800a34c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800a350:	f107 0318 	add.w	r3, r7, #24
 800a354:	f107 0210 	add.w	r2, r7, #16
 800a358:	f7ff faec 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a35c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a360:	4619      	mov	r1, r3
 800a362:	4620      	mov	r0, r4
 800a364:	f7fe f84a 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a368:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fd ffc8 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a372:	f107 0310 	add.w	r3, r7, #16
 800a376:	4618      	mov	r0, r3
 800a378:	f7fd ffc3 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a37c:	f107 0318 	add.w	r3, r7, #24
 800a380:	4618      	mov	r0, r3
 800a382:	f7fd ffbe 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800a386:	f107 0320 	add.w	r3, r7, #32
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fd ffb9 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800a390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a394:	4618      	mov	r0, r3
 800a396:	f7fd ffb4 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	4618      	mov	r0, r3
 800a39e:	3774      	adds	r7, #116	; 0x74
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd90      	pop	{r4, r7, pc}
 800a3a4:	08018d98 	.word	0x08018d98
 800a3a8:	080169b0 	.word	0x080169b0

0800a3ac <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800a3ac:	b590      	push	{r4, r7, lr}
 800a3ae:	b09d      	sub	sp, #116	; 0x74
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
 800a3b8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	f7ff f975 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a3c6:	4a5f      	ldr	r2, [pc, #380]	; (800a544 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7ff fb6f 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a3e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7fd fc3e 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800a3ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fd ff85 	bl	8008302 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800a3f8:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800a3fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fa26 	bl	8008854 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800a408:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800a40c:	f107 0320 	add.w	r3, r7, #32
 800a410:	4611      	mov	r1, r2
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fa1e 	bl	8008854 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800a418:	f107 0120 	add.w	r1, r7, #32
 800a41c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a420:	2220      	movs	r2, #32
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe f82a 	bl	800847c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a428:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a42c:	4946      	ldr	r1, [pc, #280]	; (800a548 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800a42e:	4618      	mov	r0, r3
 800a430:	f7fd fbaf 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800a434:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a438:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800a43c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a440:	4618      	mov	r0, r3
 800a442:	f7fd ffc0 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a446:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a44a:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800a44e:	4611      	mov	r1, r2
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe fb03 	bl	8008a5c <_Z30BracketsFormattedHexStringFroma>
 800a456:	f107 0318 	add.w	r3, r7, #24
 800a45a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a45e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a462:	4618      	mov	r0, r3
 800a464:	f7fd ffaf 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a468:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fd ff48 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a472:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a476:	4618      	mov	r0, r3
 800a478:	f7fd ff43 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a47c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a480:	4618      	mov	r0, r3
 800a482:	f7fd ff3e 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a486:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a48a:	492f      	ldr	r1, [pc, #188]	; (800a548 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fd fb80 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800a492:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a496:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a49a:	f107 0120 	add.w	r1, r7, #32
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fd ff91 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a4a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a4a8:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe fad4 	bl	8008a5c <_Z30BracketsFormattedHexStringFroma>
 800a4b4:	f107 0310 	add.w	r3, r7, #16
 800a4b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a4bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fd ff80 	bl	80083c6 <_ZNK12SimpleStringplERKS_>
 800a4c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fd ff19 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a4d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fd ff14 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a4da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fd ff0f 	bl	8008302 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a4ea:	68f9      	ldr	r1, [r7, #12]
 800a4ec:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800a4f0:	f107 0318 	add.w	r3, r7, #24
 800a4f4:	f107 0210 	add.w	r2, r7, #16
 800a4f8:	f7ff fa1c 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a4fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a500:	4619      	mov	r1, r3
 800a502:	4620      	mov	r0, r4
 800a504:	f7fd ff7a 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a508:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fd fef8 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800a512:	f107 0310 	add.w	r3, r7, #16
 800a516:	4618      	mov	r0, r3
 800a518:	f7fd fef3 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800a51c:	f107 0318 	add.w	r3, r7, #24
 800a520:	4618      	mov	r0, r3
 800a522:	f7fd feee 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800a526:	f107 0320 	add.w	r3, r7, #32
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fd fee9 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800a530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a534:	4618      	mov	r0, r3
 800a536:	f7fd fee4 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4618      	mov	r0, r3
 800a53e:	3774      	adds	r7, #116	; 0x74
 800a540:	46bd      	mov	sp, r7
 800a542:	bd90      	pop	{r4, r7, pc}
 800a544:	08018d6c 	.word	0x08018d6c
 800a548:	080169b0 	.word	0x080169b0

0800a54c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800a54c:	b590      	push	{r4, r7, lr}
 800a54e:	b093      	sub	sp, #76	; 0x4c
 800a550:	af02      	add	r7, sp, #8
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	f7ff f8a5 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a566:	4a4a      	ldr	r2, [pc, #296]	; (800a690 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	f107 0320 	add.w	r3, r7, #32
 800a578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff faa0 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a580:	f107 0320 	add.w	r3, r7, #32
 800a584:	4619      	mov	r1, r3
 800a586:	4620      	mov	r0, r4
 800a588:	f7fd fb6f 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800a58c:	f107 0320 	add.w	r3, r7, #32
 800a590:	4618      	mov	r0, r3
 800a592:	f7fd feb6 	bl	8008302 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a596:	f107 0318 	add.w	r3, r7, #24
 800a59a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe f92d 	bl	80087fc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a5a2:	f107 0310 	add.w	r3, r7, #16
 800a5a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe f927 	bl	80087fc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a5b4:	68f9      	ldr	r1, [r7, #12]
 800a5b6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a5ba:	f107 0310 	add.w	r3, r7, #16
 800a5be:	f107 0218 	add.w	r2, r7, #24
 800a5c2:	f7ff f9b7 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a5c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f7fd ff15 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a5d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fd fe93 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800a5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d046      	beq.n	800a670 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800a5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d043      	beq.n	800a670 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f0:	4413      	add	r3, r2
 800a5f2:	781a      	ldrb	r2, [r3, #0]
 800a5f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f8:	440b      	add	r3, r1
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d103      	bne.n	800a608 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800a600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a602:	3301      	adds	r3, #1
 800a604:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a606:	e7f1      	b.n	800a5ec <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800a608:	2300      	movs	r3, #0
 800a60a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a60c:	f107 0310 	add.w	r3, r7, #16
 800a610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd ffd9 	bl	80085ca <_ZNK12SimpleString2atEj>
 800a618:	4603      	mov	r3, r0
 800a61a:	461c      	mov	r4, r3
 800a61c:	f107 0318 	add.w	r3, r7, #24
 800a620:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a622:	4618      	mov	r0, r3
 800a624:	f7fd ffd1 	bl	80085ca <_ZNK12SimpleString2atEj>
 800a628:	4603      	mov	r3, r0
 800a62a:	429c      	cmp	r4, r3
 800a62c:	bf0c      	ite	eq
 800a62e:	2301      	moveq	r3, #1
 800a630:	2300      	movne	r3, #0
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	3301      	adds	r3, #1
 800a63c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a63e:	e7e5      	b.n	800a60c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a646:	68f9      	ldr	r1, [r7, #12]
 800a648:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a64c:	f107 0210 	add.w	r2, r7, #16
 800a650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a656:	f7ff f987 	bl	8009968 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a65a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a65e:	4619      	mov	r1, r3
 800a660:	4620      	mov	r0, r4
 800a662:	f7fd fecb 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fd fe49 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a670:	f107 0310 	add.w	r3, r7, #16
 800a674:	4618      	mov	r0, r3
 800a676:	f7fd fe44 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a67a:	f107 0318 	add.w	r3, r7, #24
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fd fe3f 	bl	8008302 <_ZN12SimpleStringD1Ev>
    }
}
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4618      	mov	r0, r3
 800a688:	3744      	adds	r7, #68	; 0x44
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd90      	pop	{r4, r7, pc}
 800a68e:	bf00      	nop
 800a690:	08018d40 	.word	0x08018d40

0800a694 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800a694:	b590      	push	{r4, r7, lr}
 800a696:	b093      	sub	sp, #76	; 0x4c
 800a698:	af02      	add	r7, sp, #8
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	68b9      	ldr	r1, [r7, #8]
 800a6aa:	f7ff f801 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a6ae:	4a55      	ldr	r2, [pc, #340]	; (800a804 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a6ba:	68f9      	ldr	r1, [r7, #12]
 800a6bc:	f107 0320 	add.w	r3, r7, #32
 800a6c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff f9fc 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a6c8:	f107 0320 	add.w	r3, r7, #32
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f7fd facb 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800a6d4:	f107 0320 	add.w	r3, r7, #32
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fd fe12 	bl	8008302 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a6de:	f107 0318 	add.w	r3, r7, #24
 800a6e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe f889 	bl	80087fc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a6ea:	f107 0310 	add.w	r3, r7, #16
 800a6ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe f883 	bl	80087fc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a6fc:	68f9      	ldr	r1, [r7, #12]
 800a6fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a702:	f107 0310 	add.w	r3, r7, #16
 800a706:	f107 0218 	add.w	r2, r7, #24
 800a70a:	f7ff f913 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a70e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a712:	4619      	mov	r1, r3
 800a714:	4620      	mov	r0, r4
 800a716:	f7fd fe71 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a71a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fd fdef 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800a724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a726:	2b00      	cmp	r3, #0
 800a728:	d05c      	beq.n	800a7e4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800a72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d059      	beq.n	800a7e4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800a730:	2300      	movs	r3, #0
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a738:	4413      	add	r3, r2
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fd f932 	bl	80079a6 <_ZN12SimpleString7ToLowerEc>
 800a742:	4603      	mov	r3, r0
 800a744:	461c      	mov	r4, r3
 800a746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74a:	4413      	add	r3, r2
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fd f929 	bl	80079a6 <_ZN12SimpleString7ToLowerEc>
 800a754:	4603      	mov	r3, r0
 800a756:	429c      	cmp	r4, r3
 800a758:	bf0c      	ite	eq
 800a75a:	2301      	moveq	r3, #1
 800a75c:	2300      	movne	r3, #0
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800a764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a766:	3301      	adds	r3, #1
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a76a:	e7e3      	b.n	800a734 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800a770:	f107 0310 	add.w	r3, r7, #16
 800a774:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a776:	4618      	mov	r0, r3
 800a778:	f7fd ff27 	bl	80085ca <_ZNK12SimpleString2atEj>
 800a77c:	4603      	mov	r3, r0
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fd f911 	bl	80079a6 <_ZN12SimpleString7ToLowerEc>
 800a784:	4603      	mov	r3, r0
 800a786:	461c      	mov	r4, r3
 800a788:	f107 0318 	add.w	r3, r7, #24
 800a78c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fd ff1b 	bl	80085ca <_ZNK12SimpleString2atEj>
 800a794:	4603      	mov	r3, r0
 800a796:	4618      	mov	r0, r3
 800a798:	f7fd f905 	bl	80079a6 <_ZN12SimpleString7ToLowerEc>
 800a79c:	4603      	mov	r3, r0
 800a79e:	429c      	cmp	r4, r3
 800a7a0:	bf0c      	ite	eq
 800a7a2:	2301      	moveq	r3, #1
 800a7a4:	2300      	movne	r3, #0
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7b2:	e7dd      	b.n	800a770 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a7ba:	68f9      	ldr	r1, [r7, #12]
 800a7bc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800a7c0:	f107 0210 	add.w	r2, r7, #16
 800a7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	f7ff f8cd 	bl	8009968 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a7ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7fd fe11 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a7da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fd fd8f 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800a7e4:	f107 0310 	add.w	r3, r7, #16
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fd fd8a 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800a7ee:	f107 0318 	add.w	r3, r7, #24
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fd fd85 	bl	8008302 <_ZN12SimpleStringD1Ev>
    }
}
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3744      	adds	r7, #68	; 0x44
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd90      	pop	{r4, r7, pc}
 800a802:	bf00      	nop
 800a804:	08018d14 	.word	0x08018d14

0800a808 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800a808:	b5b0      	push	{r4, r5, r7, lr}
 800a80a:	b092      	sub	sp, #72	; 0x48
 800a80c:	af02      	add	r7, sp, #8
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
 800a814:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	68b9      	ldr	r1, [r7, #8]
 800a81e:	f7fe ff47 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a822:	4a40      	ldr	r2, [pc, #256]	; (800a924 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a82e:	68f9      	ldr	r1, [r7, #12]
 800a830:	f107 031c 	add.w	r3, r7, #28
 800a834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a836:	4618      	mov	r0, r3
 800a838:	f7ff f942 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a83c:	f107 031c 	add.w	r3, r7, #28
 800a840:	4619      	mov	r1, r3
 800a842:	4620      	mov	r0, r4
 800a844:	f7fd fa11 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800a848:	f107 031c 	add.w	r3, r7, #28
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd fd58 	bl	8008302 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800a852:	f107 0314 	add.w	r3, r7, #20
 800a856:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fae0 	bl	8008e20 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a866:	68fd      	ldr	r5, [r7, #12]
 800a868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a86c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a86e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a870:	4618      	mov	r0, r3
 800a872:	f7fe fad5 	bl	8008e20 <_Z22StringFromBinaryOrNullPKhj>
 800a876:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a87a:	f107 0314 	add.w	r3, r7, #20
 800a87e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a882:	4629      	mov	r1, r5
 800a884:	f7ff f856 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a88c:	4619      	mov	r1, r3
 800a88e:	4620      	mov	r0, r4
 800a890:	f7fd fdb4 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fd fd32 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a89e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd fd2d 	bl	8008302 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800a8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d02f      	beq.n	800a90e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800a8ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d02c      	beq.n	800a90e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8bc:	4413      	add	r3, r2
 800a8be:	781a      	ldrb	r2, [r3, #0]
 800a8c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8c4:	440b      	add	r3, r1
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d103      	bne.n	800a8d4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800a8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d2:	e7f1      	b.n	800a8b8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a8da:	68f9      	ldr	r1, [r7, #12]
 800a8dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8de:	4613      	mov	r3, r2
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	4413      	add	r3, r2
 800a8e4:	1c5d      	adds	r5, r3, #1
 800a8e6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800a8ea:	f107 0214 	add.w	r2, r7, #20
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	f7ff f838 	bl	8009968 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800a8f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7fd fd7c 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a904:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fd fcfa 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800a90e:	f107 0314 	add.w	r3, r7, #20
 800a912:	4618      	mov	r0, r3
 800a914:	f7fd fcf5 	bl	8008302 <_ZN12SimpleStringD1Ev>
	}
}
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4618      	mov	r0, r3
 800a91c:	3740      	adds	r7, #64	; 0x40
 800a91e:	46bd      	mov	sp, r7
 800a920:	bdb0      	pop	{r4, r5, r7, pc}
 800a922:	bf00      	nop
 800a924:	08018ce8 	.word	0x08018ce8

0800a928 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800a928:	b5b0      	push	{r4, r5, r7, lr}
 800a92a:	b08c      	sub	sp, #48	; 0x30
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	68b9      	ldr	r1, [r7, #8]
 800a93e:	f7fe feb7 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a942:	4a26      	ldr	r2, [pc, #152]	; (800a9dc <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	f107 0310 	add.w	r3, r7, #16
 800a954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a956:	4618      	mov	r0, r3
 800a958:	f7ff f8b2 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a95c:	f107 0310 	add.w	r3, r7, #16
 800a960:	4619      	mov	r1, r3
 800a962:	4620      	mov	r0, r4
 800a964:	f7fd f981 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800a968:	f107 0310 	add.w	r3, r7, #16
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fd fcc8 	bl	8008302 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a978:	68fd      	ldr	r5, [r7, #12]
 800a97a:	f107 0020 	add.w	r0, r7, #32
 800a97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a984:	f7fe fa68 	bl	8008e58 <_Z20StringFromMaskedBitsmmj>
 800a988:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a98e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a990:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a992:	f7fe fa61 	bl	8008e58 <_Z20StringFromMaskedBitsmmj>
 800a996:	f107 0018 	add.w	r0, r7, #24
 800a99a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a99e:	f107 0220 	add.w	r2, r7, #32
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7fe ffc6 	bl	8009934 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a9a8:	f107 0318 	add.w	r3, r7, #24
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f7fd fd24 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800a9b4:	f107 0318 	add.w	r3, r7, #24
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fd fca2 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a9be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fd fc9d 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800a9c8:	f107 0320 	add.w	r3, r7, #32
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fd fc98 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3730      	adds	r7, #48	; 0x30
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bdb0      	pop	{r4, r5, r7, pc}
 800a9dc:	08018cbc 	.word	0x08018cbc

0800a9e0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800a9e0:	b590      	push	{r4, r7, lr}
 800a9e2:	b089      	sub	sp, #36	; 0x24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	68b9      	ldr	r1, [r7, #8]
 800a9f6:	f7fe fe5b 	bl	80096b0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a9fa:	4a1a      	ldr	r2, [pc, #104]	; (800aa64 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800aa06:	68f9      	ldr	r1, [r7, #12]
 800aa08:	f107 0310 	add.w	r3, r7, #16
 800aa0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff f856 	bl	8009ac0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800aa14:	f107 0310 	add.w	r3, r7, #16
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7fd f925 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800aa20:	f107 0310 	add.w	r3, r7, #16
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fd fc6c 	bl	8008302 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800aa30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa32:	f7fd fc39 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800aa36:	4602      	mov	r2, r0
 800aa38:	f107 0318 	add.w	r3, r7, #24
 800aa3c:	490a      	ldr	r1, [pc, #40]	; (800aa68 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe f8ec 	bl	8008c1c <_Z16StringFromFormatPKcz>
 800aa44:	f107 0318 	add.w	r3, r7, #24
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f7fd fcd6 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800aa50:	f107 0318 	add.w	r3, r7, #24
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fd fc54 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3724      	adds	r7, #36	; 0x24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd90      	pop	{r4, r7, pc}
 800aa64:	08018c90 	.word	0x08018c90
 800aa68:	08016a80 	.word	0x08016a80

0800aa6c <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	4a05      	ldr	r2, [pc, #20]	; (800aa8c <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fe fe99 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	08018c90 	.word	0x08018c90

0800aa90 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff ffe7 	bl	800aa6c <_ZN25FeatureUnsupportedFailureD1Ev>
 800aa9e:	2134      	movs	r1, #52	; 0x34
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7fc f9a1 	bl	8006de8 <_ZdlPvj>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	4a05      	ldr	r2, [pc, #20]	; (800aad0 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe fe77 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4618      	mov	r0, r3
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	08018cbc 	.word	0x08018cbc

0800aad4 <_ZN16BitsEqualFailureD0Ev>:
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff ffe7 	bl	800aab0 <_ZN16BitsEqualFailureD1Ev>
 800aae2:	2134      	movs	r1, #52	; 0x34
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7fc f97f 	bl	8006de8 <_ZdlPvj>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4618      	mov	r0, r3
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	4a05      	ldr	r2, [pc, #20]	; (800ab14 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe fe55 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	08018ce8 	.word	0x08018ce8

0800ab18 <_ZN18BinaryEqualFailureD0Ev>:
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff ffe7 	bl	800aaf4 <_ZN18BinaryEqualFailureD1Ev>
 800ab26:	2134      	movs	r1, #52	; 0x34
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7fc f95d 	bl	8006de8 <_ZdlPvj>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	4a05      	ldr	r2, [pc, #20]	; (800ab58 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fe fe33 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	08018d14 	.word	0x08018d14

0800ab5c <_ZN24StringEqualNoCaseFailureD0Ev>:
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ffe7 	bl	800ab38 <_ZN24StringEqualNoCaseFailureD1Ev>
 800ab6a:	2134      	movs	r1, #52	; 0x34
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7fc f93b 	bl	8006de8 <_ZdlPvj>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	4a05      	ldr	r2, [pc, #20]	; (800ab9c <_ZN18StringEqualFailureD1Ev+0x20>)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	601a      	str	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe fe11 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	08018d40 	.word	0x08018d40

0800aba0 <_ZN18StringEqualFailureD0Ev>:
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff ffe7 	bl	800ab7c <_ZN18StringEqualFailureD1Ev>
 800abae:	2134      	movs	r1, #52	; 0x34
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7fc f919 	bl	8006de8 <_ZdlPvj>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	4a05      	ldr	r2, [pc, #20]	; (800abe0 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fe fdef 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4618      	mov	r0, r3
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	08018d6c 	.word	0x08018d6c

0800abe4 <_ZN23SignedBytesEqualFailureD0Ev>:
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff ffe7 	bl	800abc0 <_ZN23SignedBytesEqualFailureD1Ev>
 800abf2:	2134      	movs	r1, #52	; 0x34
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7fc f8f7 	bl	8006de8 <_ZdlPvj>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	4a05      	ldr	r2, [pc, #20]	; (800ac24 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fdcd 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	08018d98 	.word	0x08018d98

0800ac28 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff ffe7 	bl	800ac04 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800ac36:	2134      	movs	r1, #52	; 0x34
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7fc f8d5 	bl	8006de8 <_ZdlPvj>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	4a05      	ldr	r2, [pc, #20]	; (800ac68 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe fdab 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	08018dc4 	.word	0x08018dc4

0800ac6c <_ZN17LongsEqualFailureD0Ev>:
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7ff ffe7 	bl	800ac48 <_ZN17LongsEqualFailureD1Ev>
 800ac7a:	2134      	movs	r1, #52	; 0x34
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fc f8b3 	bl	8006de8 <_ZdlPvj>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4618      	mov	r0, r3
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	4a05      	ldr	r2, [pc, #20]	; (800acac <_ZN12CheckFailureD1Ev+0x20>)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fe fd89 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	08018df0 	.word	0x08018df0

0800acb0 <_ZN12CheckFailureD0Ev>:
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff ffe7 	bl	800ac8c <_ZN12CheckFailureD1Ev>
 800acbe:	2134      	movs	r1, #52	; 0x34
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7fc f891 	bl	8006de8 <_ZdlPvj>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	4a05      	ldr	r2, [pc, #20]	; (800acf0 <_ZN15ContainsFailureD1Ev+0x20>)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe fd67 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	08018e1c 	.word	0x08018e1c

0800acf4 <_ZN15ContainsFailureD0Ev>:
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff ffe7 	bl	800acd0 <_ZN15ContainsFailureD1Ev>
 800ad02:	2134      	movs	r1, #52	; 0x34
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7fc f86f 	bl	8006de8 <_ZdlPvj>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	4a05      	ldr	r2, [pc, #20]	; (800ad34 <_ZN17ComparisonFailureD1Ev+0x20>)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe fd45 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	08018e48 	.word	0x08018e48

0800ad38 <_ZN17ComparisonFailureD0Ev>:
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff ffe7 	bl	800ad14 <_ZN17ComparisonFailureD1Ev>
 800ad46:	2134      	movs	r1, #52	; 0x34
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7fc f84d 	bl	8006de8 <_ZdlPvj>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	4a05      	ldr	r2, [pc, #20]	; (800ad78 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe fd23 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	08018e74 	.word	0x08018e74

0800ad7c <_ZN17CheckEqualFailureD0Ev>:
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff ffe7 	bl	800ad58 <_ZN17CheckEqualFailureD1Ev>
 800ad8a:	2134      	movs	r1, #52	; 0x34
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7fc f82b 	bl	8006de8 <_ZdlPvj>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	4a05      	ldr	r2, [pc, #20]	; (800adbc <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	601a      	str	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fd01 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4618      	mov	r0, r3
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	08018ea0 	.word	0x08018ea0

0800adc0 <_ZN19DoublesEqualFailureD0Ev>:
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff ffe7 	bl	800ad9c <_ZN19DoublesEqualFailureD1Ev>
 800adce:	2134      	movs	r1, #52	; 0x34
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7fc f809 	bl	8006de8 <_ZdlPvj>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4618      	mov	r0, r3
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	4a05      	ldr	r2, [pc, #20]	; (800ae00 <_ZN13EqualsFailureD1Ev+0x20>)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe fcdf 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4618      	mov	r0, r3
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	08018ecc 	.word	0x08018ecc

0800ae04 <_ZN13EqualsFailureD0Ev>:
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff ffe7 	bl	800ade0 <_ZN13EqualsFailureD1Ev>
 800ae12:	2134      	movs	r1, #52	; 0x34
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7fb ffe7 	bl	8006de8 <_ZdlPvj>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800ae24:	b5b0      	push	{r4, r5, r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800ae2c:	4b0d      	ldr	r3, [pc, #52]	; (800ae64 <_ZL13checkedMallocj+0x40>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	4798      	blx	r3
 800ae34:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10e      	bne.n	800ae5a <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800ae3c:	f004 f96c 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 800ae40:	4604      	mov	r4, r0
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	3368      	adds	r3, #104	; 0x68
 800ae46:	681d      	ldr	r5, [r3, #0]
 800ae48:	f004 f976 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	2325      	movs	r3, #37	; 0x25
 800ae52:	4a05      	ldr	r2, [pc, #20]	; (800ae68 <_ZL13checkedMallocj+0x44>)
 800ae54:	4905      	ldr	r1, [pc, #20]	; (800ae6c <_ZL13checkedMallocj+0x48>)
 800ae56:	4620      	mov	r0, r4
 800ae58:	47a8      	blx	r5
    return mem;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bdb0      	pop	{r4, r5, r7, pc}
 800ae64:	200000c4 	.word	0x200000c4
 800ae68:	08016af4 	.word	0x08016af4
 800ae6c:	08016b14 	.word	0x08016b14

0800ae70 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800ae74:	4b04      	ldr	r3, [pc, #16]	; (800ae88 <_Z22getCurrentNewAllocatorv+0x18>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <_Z22getCurrentNewAllocatorv+0x10>
 800ae7c:	f000 f806 	bl	800ae8c <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800ae80:	4b01      	ldr	r3, [pc, #4]	; (800ae88 <_Z22getCurrentNewAllocatorv+0x18>)
 800ae82:	681b      	ldr	r3, [r3, #0]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	200005e4 	.word	0x200005e4

0800ae8c <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800ae90:	f000 f810 	bl	800aeb4 <_Z19defaultNewAllocatorv>
 800ae94:	4603      	mov	r3, r0
 800ae96:	4a02      	ldr	r2, [pc, #8]	; (800aea0 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800ae98:	6013      	str	r3, [r2, #0]
}
 800ae9a:	bf00      	nop
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	200005e4 	.word	0x200005e4

0800aea4 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	4801      	ldr	r0, [pc, #4]	; (800aeb0 <__tcf_0+0xc>)
 800aeaa:	f000 f909 	bl	800b0c0 <_ZN19TestMemoryAllocatorD1Ev>
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	200005f0 	.word	0x200005f0

0800aeb4 <_Z19defaultNewAllocatorv>:
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800aeb8:	4b13      	ldr	r3, [pc, #76]	; (800af08 <_Z19defaultNewAllocatorv+0x54>)
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	f3bf 8f5b 	dmb	ish
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	bf0c      	ite	eq
 800aeca:	2301      	moveq	r3, #1
 800aecc:	2300      	movne	r3, #0
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d016      	beq.n	800af02 <_Z19defaultNewAllocatorv+0x4e>
 800aed4:	480c      	ldr	r0, [pc, #48]	; (800af08 <_Z19defaultNewAllocatorv+0x54>)
 800aed6:	f007 faf3 	bl	80124c0 <__cxa_guard_acquire>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bf14      	ite	ne
 800aee0:	2301      	movne	r3, #1
 800aee2:	2300      	moveq	r3, #0
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <_Z19defaultNewAllocatorv+0x4e>
 800aeea:	4b08      	ldr	r3, [pc, #32]	; (800af0c <_Z19defaultNewAllocatorv+0x58>)
 800aeec:	4a08      	ldr	r2, [pc, #32]	; (800af10 <_Z19defaultNewAllocatorv+0x5c>)
 800aeee:	4909      	ldr	r1, [pc, #36]	; (800af14 <_Z19defaultNewAllocatorv+0x60>)
 800aef0:	4809      	ldr	r0, [pc, #36]	; (800af18 <_Z19defaultNewAllocatorv+0x64>)
 800aef2:	f000 f8c5 	bl	800b080 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800aef6:	4804      	ldr	r0, [pc, #16]	; (800af08 <_Z19defaultNewAllocatorv+0x54>)
 800aef8:	f007 faee 	bl	80124d8 <__cxa_guard_release>
 800aefc:	4807      	ldr	r0, [pc, #28]	; (800af1c <_Z19defaultNewAllocatorv+0x68>)
 800aefe:	f007 fb12 	bl	8012526 <atexit>
    return &allocator;
 800af02:	4b05      	ldr	r3, [pc, #20]	; (800af18 <_Z19defaultNewAllocatorv+0x64>)
}
 800af04:	4618      	mov	r0, r3
 800af06:	bd80      	pop	{r7, pc}
 800af08:	20000604 	.word	0x20000604
 800af0c:	08016b34 	.word	0x08016b34
 800af10:	08016b3c 	.word	0x08016b3c
 800af14:	08016b40 	.word	0x08016b40
 800af18:	200005f0 	.word	0x200005f0
 800af1c:	0800aea5 	.word	0x0800aea5

0800af20 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800af20:	b580      	push	{r7, lr}
 800af22:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800af24:	4b04      	ldr	r3, [pc, #16]	; (800af38 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800af2c:	f000 f806 	bl	800af3c <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800af30:	4b01      	ldr	r3, [pc, #4]	; (800af38 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800af32:	681b      	ldr	r3, [r3, #0]
}
 800af34:	4618      	mov	r0, r3
 800af36:	bd80      	pop	{r7, pc}
 800af38:	200005e8 	.word	0x200005e8

0800af3c <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800af40:	f000 f810 	bl	800af64 <_Z24defaultNewArrayAllocatorv>
 800af44:	4603      	mov	r3, r0
 800af46:	4a02      	ldr	r2, [pc, #8]	; (800af50 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800af48:	6013      	str	r3, [r2, #0]
}
 800af4a:	bf00      	nop
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	200005e8 	.word	0x200005e8

0800af54 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__tcf_1+0xc>)
 800af5a:	f000 f8b1 	bl	800b0c0 <_ZN19TestMemoryAllocatorD1Ev>
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20000608 	.word	0x20000608

0800af64 <_Z24defaultNewArrayAllocatorv>:
{
 800af64:	b580      	push	{r7, lr}
 800af66:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800af68:	4b13      	ldr	r3, [pc, #76]	; (800afb8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	f3bf 8f5b 	dmb	ish
 800af70:	b2db      	uxtb	r3, r3
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b00      	cmp	r3, #0
 800af78:	bf0c      	ite	eq
 800af7a:	2301      	moveq	r3, #1
 800af7c:	2300      	movne	r3, #0
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	d016      	beq.n	800afb2 <_Z24defaultNewArrayAllocatorv+0x4e>
 800af84:	480c      	ldr	r0, [pc, #48]	; (800afb8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800af86:	f007 fa9b 	bl	80124c0 <__cxa_guard_acquire>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bf14      	ite	ne
 800af90:	2301      	movne	r3, #1
 800af92:	2300      	moveq	r3, #0
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00b      	beq.n	800afb2 <_Z24defaultNewArrayAllocatorv+0x4e>
 800af9a:	4b08      	ldr	r3, [pc, #32]	; (800afbc <_Z24defaultNewArrayAllocatorv+0x58>)
 800af9c:	4a08      	ldr	r2, [pc, #32]	; (800afc0 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800af9e:	4909      	ldr	r1, [pc, #36]	; (800afc4 <_Z24defaultNewArrayAllocatorv+0x60>)
 800afa0:	4809      	ldr	r0, [pc, #36]	; (800afc8 <_Z24defaultNewArrayAllocatorv+0x64>)
 800afa2:	f000 f86d 	bl	800b080 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800afa6:	4804      	ldr	r0, [pc, #16]	; (800afb8 <_Z24defaultNewArrayAllocatorv+0x54>)
 800afa8:	f007 fa96 	bl	80124d8 <__cxa_guard_release>
 800afac:	4807      	ldr	r0, [pc, #28]	; (800afcc <_Z24defaultNewArrayAllocatorv+0x68>)
 800afae:	f007 faba 	bl	8012526 <atexit>
    return &allocator;
 800afb2:	4b05      	ldr	r3, [pc, #20]	; (800afc8 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	2000061c 	.word	0x2000061c
 800afbc:	08016b58 	.word	0x08016b58
 800afc0:	08016b64 	.word	0x08016b64
 800afc4:	08016b6c 	.word	0x08016b6c
 800afc8:	20000608 	.word	0x20000608
 800afcc:	0800af55 	.word	0x0800af55

0800afd0 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800afd4:	4b04      	ldr	r3, [pc, #16]	; (800afe8 <_Z25getCurrentMallocAllocatorv+0x18>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d101      	bne.n	800afe0 <_Z25getCurrentMallocAllocatorv+0x10>
 800afdc:	f000 f806 	bl	800afec <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800afe0:	4b01      	ldr	r3, [pc, #4]	; (800afe8 <_Z25getCurrentMallocAllocatorv+0x18>)
 800afe2:	681b      	ldr	r3, [r3, #0]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	200005ec 	.word	0x200005ec

0800afec <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800aff0:	f000 f810 	bl	800b014 <_Z22defaultMallocAllocatorv>
 800aff4:	4603      	mov	r3, r0
 800aff6:	4a02      	ldr	r2, [pc, #8]	; (800b000 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800aff8:	6013      	str	r3, [r2, #0]
}
 800affa:	bf00      	nop
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	200005ec 	.word	0x200005ec

0800b004 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__tcf_2+0xc>)
 800b00a:	f000 f859 	bl	800b0c0 <_ZN19TestMemoryAllocatorD1Ev>
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	20000620 	.word	0x20000620

0800b014 <_Z22defaultMallocAllocatorv>:
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800b018:	4b13      	ldr	r3, [pc, #76]	; (800b068 <_Z22defaultMallocAllocatorv+0x54>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f3bf 8f5b 	dmb	ish
 800b020:	b2db      	uxtb	r3, r3
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	bf0c      	ite	eq
 800b02a:	2301      	moveq	r3, #1
 800b02c:	2300      	movne	r3, #0
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	d016      	beq.n	800b062 <_Z22defaultMallocAllocatorv+0x4e>
 800b034:	480c      	ldr	r0, [pc, #48]	; (800b068 <_Z22defaultMallocAllocatorv+0x54>)
 800b036:	f007 fa43 	bl	80124c0 <__cxa_guard_acquire>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bf14      	ite	ne
 800b040:	2301      	movne	r3, #1
 800b042:	2300      	moveq	r3, #0
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00b      	beq.n	800b062 <_Z22defaultMallocAllocatorv+0x4e>
 800b04a:	4b08      	ldr	r3, [pc, #32]	; (800b06c <_Z22defaultMallocAllocatorv+0x58>)
 800b04c:	4a08      	ldr	r2, [pc, #32]	; (800b070 <_Z22defaultMallocAllocatorv+0x5c>)
 800b04e:	4909      	ldr	r1, [pc, #36]	; (800b074 <_Z22defaultMallocAllocatorv+0x60>)
 800b050:	4809      	ldr	r0, [pc, #36]	; (800b078 <_Z22defaultMallocAllocatorv+0x64>)
 800b052:	f000 f815 	bl	800b080 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800b056:	4804      	ldr	r0, [pc, #16]	; (800b068 <_Z22defaultMallocAllocatorv+0x54>)
 800b058:	f007 fa3e 	bl	80124d8 <__cxa_guard_release>
 800b05c:	4807      	ldr	r0, [pc, #28]	; (800b07c <_Z22defaultMallocAllocatorv+0x68>)
 800b05e:	f007 fa62 	bl	8012526 <atexit>
    return &allocator;
 800b062:	4b05      	ldr	r3, [pc, #20]	; (800b078 <_Z22defaultMallocAllocatorv+0x64>)
}
 800b064:	4618      	mov	r0, r3
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20000634 	.word	0x20000634
 800b06c:	08016b88 	.word	0x08016b88
 800b070:	08016b90 	.word	0x08016b90
 800b074:	08016b98 	.word	0x08016b98
 800b078:	20000620 	.word	0x20000620
 800b07c:	0800b005 	.word	0x0800b005

0800b080 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	607a      	str	r2, [r7, #4]
 800b08c:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800b08e:	4a0b      	ldr	r2, [pc, #44]	; (800b0bc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	605a      	str	r2, [r3, #4]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	609a      	str	r2, [r3, #8]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	683a      	ldr	r2, [r7, #0]
 800b0a4:	60da      	str	r2, [r3, #12]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	741a      	strb	r2, [r3, #16]
{
}
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	08018f58 	.word	0x08018f58

0800b0c0 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	4a06      	ldr	r2, [pc, #24]	; (800b0e4 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	741a      	strb	r2, [r3, #16]
}
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	08018f58 	.word	0x08018f58

0800b0e8 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
}
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7ff ffe5 	bl	800b0c0 <_ZN19TestMemoryAllocatorD1Ev>
 800b0f6:	2114      	movs	r1, #20
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f7fb fe75 	bl	8006de8 <_ZdlPvj>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	7c1b      	ldrb	r3, [r3, #16]
}
 800b114:	4618      	mov	r0, r3
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800b120:	b590      	push	{r4, r7, lr}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3310      	adds	r3, #16
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	4798      	blx	r3
 800b136:	4604      	mov	r4, r0
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3310      	adds	r3, #16
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6838      	ldr	r0, [r7, #0]
 800b142:	4798      	blx	r3
 800b144:	4603      	mov	r3, r0
 800b146:	4619      	mov	r1, r3
 800b148:	4620      	mov	r0, r4
 800b14a:	f7fc fb5f 	bl	800780c <_ZN12SimpleString6StrCmpEPKcS1_>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	bf0c      	ite	eq
 800b154:	2301      	moveq	r3, #1
 800b156:	2300      	movne	r3, #0
 800b158:	b2db      	uxtb	r3, r3
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd90      	pop	{r4, r7, pc}
	...

0800b164 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800b164:	b590      	push	{r4, r7, lr}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3308      	adds	r3, #8
 800b174:	681c      	ldr	r4, [r3, #0]
 800b176:	2301      	movs	r3, #1
 800b178:	4a04      	ldr	r2, [pc, #16]	; (800b18c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	47a0      	blx	r4
 800b180:	4603      	mov	r3, r0
}
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	bd90      	pop	{r4, r7, pc}
 800b18a:	bf00      	nop
 800b18c:	08016bb4 	.word	0x08016bb4

0800b190 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800b190:	b590      	push	{r4, r7, lr}
 800b192:	b085      	sub	sp, #20
 800b194:	af02      	add	r7, sp, #8
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	330c      	adds	r3, #12
 800b1a0:	681c      	ldr	r4, [r3, #0]
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	4b04      	ldr	r3, [pc, #16]	; (800b1b8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	47a0      	blx	r4
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd90      	pop	{r4, r7, pc}
 800b1b8:	08016bb4 	.word	0x08016bb4

0800b1bc <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800b1ca:	68b8      	ldr	r0, [r7, #8]
 800b1cc:	f7ff fe2a 	bl	800ae24 <_ZL13checkedMallocj>
 800b1d0:	4603      	mov	r3, r0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800b1ea:	4b04      	ldr	r3, [pc, #16]	; (800b1fc <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68b8      	ldr	r0, [r7, #8]
 800b1f0:	4798      	blx	r3
}
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	200000cc 	.word	0x200000cc

0800b200 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
    return name_;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	689b      	ldr	r3, [r3, #8]
}
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
    return free_name_;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68db      	ldr	r3, [r3, #12]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
    return this;
 800b250:	687b      	ldr	r3, [r7, #4]
}
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
	...

0800b260 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	4a05      	ldr	r2, [pc, #20]	; (800b280 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4618      	mov	r0, r3
 800b272:	f7ff ff25 	bl	800b0c0 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	08018f24 	.word	0x08018f24

0800b284 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
}
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff ffe7 	bl	800b260 <_ZN20NullUnknownAllocatorD1Ev>
 800b292:	2114      	movs	r1, #20
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7fb fda7 	bl	8006de8 <_ZdlPvj>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
 800b2b0:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]
}
 800b2ce:	bf00      	nop
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
	...

0800b2dc <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	4b06      	ldr	r3, [pc, #24]	; (800b300 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800b2e8:	4a05      	ldr	r2, [pc, #20]	; (800b300 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800b2ea:	4906      	ldr	r1, [pc, #24]	; (800b304 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800b2ec:	f7ff fec8 	bl	800b080 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800b2f0:	4a05      	ldr	r2, [pc, #20]	; (800b308 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	601a      	str	r2, [r3, #0]
{
}
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	08016be8 	.word	0x08016be8
 800b304:	08016bf0 	.word	0x08016bf0
 800b308:	08018f24 	.word	0x08018f24

0800b30c <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
 800b310:	4801      	ldr	r0, [pc, #4]	; (800b318 <__tcf_3+0xc>)
 800b312:	f7ff ffa5 	bl	800b260 <_ZN20NullUnknownAllocatorD1Ev>
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20000638 	.word	0x20000638

0800b31c <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800b320:	4b12      	ldr	r3, [pc, #72]	; (800b36c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	f3bf 8f5b 	dmb	ish
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bf0c      	ite	eq
 800b332:	2301      	moveq	r3, #1
 800b334:	2300      	movne	r3, #0
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d013      	beq.n	800b364 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800b33c:	480b      	ldr	r0, [pc, #44]	; (800b36c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800b33e:	f007 f8bf 	bl	80124c0 <__cxa_guard_acquire>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	bf14      	ite	ne
 800b348:	2301      	movne	r3, #1
 800b34a:	2300      	moveq	r3, #0
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d008      	beq.n	800b364 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800b352:	4807      	ldr	r0, [pc, #28]	; (800b370 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800b354:	f7ff ffc2 	bl	800b2dc <_ZN20NullUnknownAllocatorC1Ev>
 800b358:	4804      	ldr	r0, [pc, #16]	; (800b36c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800b35a:	f007 f8bd 	bl	80124d8 <__cxa_guard_release>
 800b35e:	4805      	ldr	r0, [pc, #20]	; (800b374 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800b360:	f007 f8e1 	bl	8012526 <atexit>
    return &allocator;
 800b364:	4b02      	ldr	r3, [pc, #8]	; (800b370 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800b366:	4618      	mov	r0, r3
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	2000064c 	.word	0x2000064c
 800b370:	20000638 	.word	0x20000638
 800b374:	0800b30d 	.word	0x0800b30d

0800b378 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
        return testCount_;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
    }
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	699b      	ldr	r3, [r3, #24]
    }
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d103      	bne.n	800b3bc <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800b3b4:	f004 fa38 	bl	800f828 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	e001      	b.n	800b3c0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800b3bc:	4b01      	ldr	r3, [pc, #4]	; (800b3c4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000084 	.word	0x20000084

0800b3c8 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800b3d0:	4a0a      	ldr	r2, [pc, #40]	; (800b3fc <_ZN10TestOutputC1Ev+0x34>)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	605a      	str	r2, [r3, #4]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	721a      	strb	r2, [r3, #8]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	725a      	strb	r2, [r3, #9]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a05      	ldr	r2, [pc, #20]	; (800b400 <_ZN10TestOutputC1Ev+0x38>)
 800b3ec:	60da      	str	r2, [r3, #12]
{
}
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	0801905c 	.word	0x0801905c
 800b400:	08016ff0 	.word	0x08016ff0

0800b404 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	4a04      	ldr	r2, [pc, #16]	; (800b420 <_ZN10TestOutputD1Ev+0x1c>)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	601a      	str	r2, [r3, #0]
{
}
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4618      	mov	r0, r3
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	0801905c 	.word	0x0801905c

0800b424 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	78fa      	ldrb	r2, [r7, #3]
 800b434:	721a      	strb	r2, [r3, #8]
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
    color_ = true;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	725a      	strb	r2, [r3, #9]
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	3328      	adds	r3, #40	; 0x28
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	4798      	blx	r3
}
 800b474:	bf00      	nop
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	332c      	adds	r3, #44	; 0x2c
 800b48c:	681c      	ldr	r4, [r3, #0]
 800b48e:	f107 0308 	add.w	r3, r7, #8
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	4618      	mov	r0, r3
 800b496:	f7fd f9ef 	bl	8008878 <_Z10StringFroml>
 800b49a:	f107 0308 	add.w	r3, r7, #8
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7fc ff02 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	47a0      	blx	r4
 800b4ac:	f107 0308 	add.w	r3, r7, #8
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fc ff26 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}

0800b4be <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800b4be:	b590      	push	{r4, r7, lr}
 800b4c0:	b085      	sub	sp, #20
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
 800b4c6:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	332c      	adds	r3, #44	; 0x2c
 800b4ce:	681c      	ldr	r4, [r3, #0]
 800b4d0:	f107 0308 	add.w	r3, r7, #8
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fd fbc8 	bl	8008c6c <_Z10StringFromj>
 800b4dc:	f107 0308 	add.w	r3, r7, #8
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fc fee1 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	47a0      	blx	r4
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fc ff05 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd90      	pop	{r4, r7, pc}

0800b500 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800b500:	b590      	push	{r4, r7, lr}
 800b502:	b087      	sub	sp, #28
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	332c      	adds	r3, #44	; 0x2c
 800b512:	681c      	ldr	r4, [r3, #0]
 800b514:	f107 0310 	add.w	r3, r7, #16
 800b518:	2106      	movs	r1, #6
 800b51a:	ed97 0b00 	vldr	d0, [r7]
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fd fb3a 	bl	8008b98 <_Z10StringFromdi>
 800b524:	f107 0310 	add.w	r3, r7, #16
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fc febd 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800b52e:	4603      	mov	r3, r0
 800b530:	4619      	mov	r1, r3
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	47a0      	blx	r4
 800b536:	f107 0310 	add.w	r3, r7, #16
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fc fee1 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800b540:	bf00      	nop
 800b542:	371c      	adds	r7, #28
 800b544:	46bd      	mov	sp, r7
 800b546:	bd90      	pop	{r4, r7, pc}

0800b548 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
    p.print(s);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	332c      	adds	r3, #44	; 0x2c
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	4798      	blx	r3
    return p;
 800b560:	687b      	ldr	r3, [r7, #4]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b56c:	b590      	push	{r4, r7, lr}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	7a1b      	ldrb	r3, [r3, #8]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d01a      	beq.n	800b5b4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	332c      	adds	r3, #44	; 0x2c
 800b584:	681c      	ldr	r4, [r3, #0]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3314      	adds	r3, #20
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f107 0208 	add.w	r2, r7, #8
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	4610      	mov	r0, r2
 800b596:	4798      	blx	r3
 800b598:	f107 0308 	add.w	r3, r7, #8
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fc fe83 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	47a0      	blx	r4
 800b5aa:	f107 0308 	add.w	r3, r7, #8
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fc fea7 	bl	8008302 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3318      	adds	r3, #24
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6838      	ldr	r0, [r7, #0]
 800b5be:	4798      	blx	r3
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d007      	beq.n	800b5d6 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3344      	adds	r3, #68	; 0x44
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4907      	ldr	r1, [pc, #28]	; (800b5ec <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800b5d4:	e006      	b.n	800b5e4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3344      	adds	r3, #68	; 0x44
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4904      	ldr	r1, [pc, #16]	; (800b5f0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	4798      	blx	r3
}
 800b5e4:	bf00      	nop
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd90      	pop	{r4, r7, pc}
 800b5ec:	08016ff0 	.word	0x08016ff0
 800b5f0:	08016ff4 	.word	0x08016ff4

0800b5f4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800b5f4:	b590      	push	{r4, r7, lr}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7a1b      	ldrb	r3, [r3, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d019      	beq.n	800b63a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	332c      	adds	r3, #44	; 0x2c
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4910      	ldr	r1, [pc, #64]	; (800b650 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	3334      	adds	r3, #52	; 0x34
 800b61a:	681c      	ldr	r4, [r3, #0]
 800b61c:	6838      	ldr	r0, [r7, #0]
 800b61e:	f002 f845 	bl	800d6ac <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800b622:	4603      	mov	r3, r0
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	47a0      	blx	r4
        print(" ms\n");
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	332c      	adds	r3, #44	; 0x2c
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4908      	ldr	r1, [pc, #32]	; (800b654 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800b638:	e005      	b.n	800b646 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3358      	adds	r3, #88	; 0x58
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	4798      	blx	r3
}
 800b646:	bf00      	nop
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd90      	pop	{r4, r7, pc}
 800b64e:	bf00      	nop
 800b650:	08016ff8 	.word	0x08016ff8
 800b654:	08016ffc 	.word	0x08016ffc

0800b658 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	332c      	adds	r3, #44	; 0x2c
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	68d2      	ldr	r2, [r2, #12]
 800b66c:	4611      	mov	r1, r2
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	605a      	str	r2, [r3, #4]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	4b0d      	ldr	r3, [pc, #52]	; (800b6b8 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800b682:	fb83 1302 	smull	r1, r3, r3, r2
 800b686:	1119      	asrs	r1, r3, #4
 800b688:	17d3      	asrs	r3, r2, #31
 800b68a:	1acb      	subs	r3, r1, r3
 800b68c:	2132      	movs	r1, #50	; 0x32
 800b68e:	fb01 f303 	mul.w	r3, r1, r3
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	bf0c      	ite	eq
 800b698:	2301      	moveq	r3, #1
 800b69a:	2300      	movne	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d006      	beq.n	800b6b0 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	332c      	adds	r3, #44	; 0x2c
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4904      	ldr	r1, [pc, #16]	; (800b6bc <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	4798      	blx	r3
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	51eb851f 	.word	0x51eb851f
 800b6bc:	08017004 	.word	0x08017004

0800b6c0 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	60da      	str	r2, [r3, #12]
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6039      	str	r1, [r7, #0]
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800b71c:	b590      	push	{r4, r7, lr}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
    print("\n");
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	332c      	adds	r3, #44	; 0x2c
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	496f      	ldr	r1, [pc, #444]	; (800b8ec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800b734:	6838      	ldr	r0, [r7, #0]
 800b736:	f7f9 fe25 	bl	8005384 <_ZNK10TestResult9isFailureEv>
 800b73a:	4603      	mov	r3, r0
 800b73c:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800b73e:	6838      	ldr	r0, [r7, #0]
 800b740:	f7f9 fe14 	bl	800536c <_ZNK10TestResult15getFailureCountEv>
 800b744:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800b746:	7bfb      	ldrb	r3, [r7, #15]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d02b      	beq.n	800b7a4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	7a5b      	ldrb	r3, [r3, #9]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d006      	beq.n	800b762 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	332c      	adds	r3, #44	; 0x2c
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4964      	ldr	r1, [pc, #400]	; (800b8f0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	4798      	blx	r3
        }
        print("Errors (");
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	332c      	adds	r3, #44	; 0x2c
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4962      	ldr	r1, [pc, #392]	; (800b8f4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	4798      	blx	r3
        if (failureCount > 0) {
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00e      	beq.n	800b794 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3334      	adds	r3, #52	; 0x34
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68b9      	ldr	r1, [r7, #8]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	4798      	blx	r3
            print(" failures, ");
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	332c      	adds	r3, #44	; 0x2c
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	495a      	ldr	r1, [pc, #360]	; (800b8f8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	4798      	blx	r3
 800b792:	e019      	b.n	800b7c8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	332c      	adds	r3, #44	; 0x2c
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4957      	ldr	r1, [pc, #348]	; (800b8fc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	4798      	blx	r3
 800b7a2:	e011      	b.n	800b7c8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	7a5b      	ldrb	r3, [r3, #9]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d006      	beq.n	800b7ba <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	332c      	adds	r3, #44	; 0x2c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4952      	ldr	r1, [pc, #328]	; (800b900 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	4798      	blx	r3
        }
        print("OK (");
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	332c      	adds	r3, #44	; 0x2c
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4950      	ldr	r1, [pc, #320]	; (800b904 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	4798      	blx	r3
    }
    print(result.getTestCount());
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3334      	adds	r3, #52	; 0x34
 800b7ce:	681c      	ldr	r4, [r3, #0]
 800b7d0:	6838      	ldr	r0, [r7, #0]
 800b7d2:	f7ff fdd1 	bl	800b378 <_ZNK10TestResult12getTestCountEv>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	47a0      	blx	r4
    print(" tests, ");
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	332c      	adds	r3, #44	; 0x2c
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4948      	ldr	r1, [pc, #288]	; (800b908 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	4798      	blx	r3
    print(result.getRunCount());
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3334      	adds	r3, #52	; 0x34
 800b7f2:	681c      	ldr	r4, [r3, #0]
 800b7f4:	6838      	ldr	r0, [r7, #0]
 800b7f6:	f7f9 fda1 	bl	800533c <_ZNK10TestResult11getRunCountEv>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	47a0      	blx	r4
    print(" ran, ");
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	332c      	adds	r3, #44	; 0x2c
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4940      	ldr	r1, [pc, #256]	; (800b90c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	4798      	blx	r3
    print(result.getCheckCount());
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3334      	adds	r3, #52	; 0x34
 800b816:	681c      	ldr	r4, [r3, #0]
 800b818:	6838      	ldr	r0, [r7, #0]
 800b81a:	f7fa f9fb 	bl	8005c14 <_ZNK10TestResult13getCheckCountEv>
 800b81e:	4603      	mov	r3, r0
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	47a0      	blx	r4
    print(" checks, ");
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	332c      	adds	r3, #44	; 0x2c
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4938      	ldr	r1, [pc, #224]	; (800b910 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	4798      	blx	r3
    print(result.getIgnoredCount());
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3334      	adds	r3, #52	; 0x34
 800b83a:	681c      	ldr	r4, [r3, #0]
 800b83c:	6838      	ldr	r0, [r7, #0]
 800b83e:	f7f9 fd89 	bl	8005354 <_ZNK10TestResult15getIgnoredCountEv>
 800b842:	4603      	mov	r3, r0
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	47a0      	blx	r4
    print(" ignored, ");
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	332c      	adds	r3, #44	; 0x2c
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4930      	ldr	r1, [pc, #192]	; (800b914 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3334      	adds	r3, #52	; 0x34
 800b85e:	681c      	ldr	r4, [r3, #0]
 800b860:	6838      	ldr	r0, [r7, #0]
 800b862:	f7ff fd95 	bl	800b390 <_ZNK10TestResult19getFilteredOutCountEv>
 800b866:	4603      	mov	r3, r0
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	47a0      	blx	r4
    print(" filtered out, ");
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	332c      	adds	r3, #44	; 0x2c
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4928      	ldr	r1, [pc, #160]	; (800b918 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	3334      	adds	r3, #52	; 0x34
 800b882:	681c      	ldr	r4, [r3, #0]
 800b884:	6838      	ldr	r0, [r7, #0]
 800b886:	f001 ff05 	bl	800d694 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800b88a:	4603      	mov	r3, r0
 800b88c:	4619      	mov	r1, r3
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	47a0      	blx	r4
    print(" ms)");
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	332c      	adds	r3, #44	; 0x2c
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4920      	ldr	r1, [pc, #128]	; (800b91c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	4798      	blx	r3
    if (color_) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	7a5b      	ldrb	r3, [r3, #9]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d006      	beq.n	800b8b6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	332c      	adds	r3, #44	; 0x2c
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	491b      	ldr	r1, [pc, #108]	; (800b920 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d009      	beq.n	800b8d0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	332c      	adds	r3, #44	; 0x2c
 800b8c8:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800b8ca:	4916      	ldr	r1, [pc, #88]	; (800b924 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	4798      	blx	r3
    }
    print("\n\n");
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	332c      	adds	r3, #44	; 0x2c
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4913      	ldr	r1, [pc, #76]	; (800b928 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	4798      	blx	r3

    dotCount_ = 0;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	605a      	str	r2, [r3, #4]
}
 800b8e4:	bf00      	nop
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd90      	pop	{r4, r7, pc}
 800b8ec:	08017004 	.word	0x08017004
 800b8f0:	08017008 	.word	0x08017008
 800b8f4:	08017010 	.word	0x08017010
 800b8f8:	0801701c 	.word	0x0801701c
 800b8fc:	08017028 	.word	0x08017028
 800b900:	08017038 	.word	0x08017038
 800b904:	08017040 	.word	0x08017040
 800b908:	08017048 	.word	0x08017048
 800b90c:	08017054 	.word	0x08017054
 800b910:	0801705c 	.word	0x0801705c
 800b914:	08017068 	.word	0x08017068
 800b918:	08017074 	.word	0x08017074
 800b91c:	08017084 	.word	0x08017084
 800b920:	0801708c 	.word	0x0801708c
 800b924:	08017090 	.word	0x08017090
 800b928:	08017134 	.word	0x08017134

0800b92c <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d922      	bls.n	800b984 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	332c      	adds	r3, #44	; 0x2c
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4911      	ldr	r1, [pc, #68]	; (800b98c <_ZN10TestOutput12printTestRunEjj+0x60>)
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	4798      	blx	r3
        print(number);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	3334      	adds	r3, #52	; 0x34
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68b9      	ldr	r1, [r7, #8]
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	4798      	blx	r3
        print(" of ");
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	332c      	adds	r3, #44	; 0x2c
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	490b      	ldr	r1, [pc, #44]	; (800b990 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	4798      	blx	r3
        print(total);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3334      	adds	r3, #52	; 0x34
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6879      	ldr	r1, [r7, #4]
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	4798      	blx	r3
        print("\n");
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	332c      	adds	r3, #44	; 0x2c
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4905      	ldr	r1, [pc, #20]	; (800b994 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	4798      	blx	r3
    }
}
 800b984:	bf00      	nop
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	08017138 	.word	0x08017138
 800b990:	08017144 	.word	0x08017144
 800b994:	08017004 	.word	0x08017004

0800b998 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800b9a2:	6838      	ldr	r0, [r7, #0]
 800b9a4:	f7fd ffa1 	bl	80098ea <_ZNK11TestFailure17isOutsideTestFileEv>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d105      	bne.n	800b9ba <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800b9ae:	6838      	ldr	r0, [r7, #0]
 800b9b0:	f7fd ffad 	bl	800990e <_ZNK11TestFailure18isInHelperFunctionEv>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e000      	b.n	800b9c0 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f81d 	bl	800ba06 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800b9cc:	e003      	b.n	800b9d6 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f86b 	bl	800baac <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3318      	adds	r3, #24
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f107 0208 	add.w	r2, r7, #8
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	4798      	blx	r3
 800b9e8:	f107 0308 	add.w	r3, r7, #8
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f8b2 	bl	800bb58 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800b9f4:	f107 0308 	add.w	r3, r7, #8
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fc fc82 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b088      	sub	sp, #32
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	331c      	adds	r3, #28
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f107 0208 	add.w	r2, r7, #8
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	4610      	mov	r0, r2
 800ba20:	4798      	blx	r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3320      	adds	r3, #32
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	6838      	ldr	r0, [r7, #0]
 800ba2c:	4798      	blx	r3
 800ba2e:	4602      	mov	r2, r0
 800ba30:	f107 0308 	add.w	r3, r7, #8
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 f8be 	bl	800bbb8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ba3c:	f107 0308 	add.w	r3, r7, #8
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fc fc5e 	bl	8008302 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	330c      	adds	r3, #12
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f107 0210 	add.w	r2, r7, #16
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	4610      	mov	r0, r2
 800ba56:	4798      	blx	r3
 800ba58:	f107 0310 	add.w	r3, r7, #16
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 f85c 	bl	800bb1c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800ba64:	f107 0310 	add.w	r3, r7, #16
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fc fc4a 	bl	8008302 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3308      	adds	r3, #8
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f107 0218 	add.w	r2, r7, #24
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	4798      	blx	r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	3314      	adds	r3, #20
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6838      	ldr	r0, [r7, #0]
 800ba8a:	4798      	blx	r3
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	f107 0318 	add.w	r3, r7, #24
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f88f 	bl	800bbb8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800ba9a:	f107 0318 	add.w	r3, r7, #24
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fc fc2f 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800baa4:	bf00      	nop
 800baa6:	3720      	adds	r7, #32
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3308      	adds	r3, #8
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f107 0208 	add.w	r2, r7, #8
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	4610      	mov	r0, r2
 800bac6:	4798      	blx	r3
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3314      	adds	r3, #20
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6838      	ldr	r0, [r7, #0]
 800bad2:	4798      	blx	r3
 800bad4:	4602      	mov	r2, r0
 800bad6:	f107 0308 	add.w	r3, r7, #8
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f86b 	bl	800bbb8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800bae2:	f107 0308 	add.w	r3, r7, #8
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fc fc0b 	bl	8008302 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	330c      	adds	r3, #12
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f107 0210 	add.w	r2, r7, #16
 800baf8:	6839      	ldr	r1, [r7, #0]
 800bafa:	4610      	mov	r0, r2
 800bafc:	4798      	blx	r3
 800bafe:	f107 0310 	add.w	r3, r7, #16
 800bb02:	4619      	mov	r1, r3
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f809 	bl	800bb1c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800bb0a:	f107 0310 	add.w	r3, r7, #16
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fc fbf7 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800bb14:	bf00      	nop
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800bb1c:	b590      	push	{r4, r7, lr}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	332c      	adds	r3, #44	; 0x2c
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4909      	ldr	r1, [pc, #36]	; (800bb54 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	4798      	blx	r3
    print(testName.asCharString());
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	332c      	adds	r3, #44	; 0x2c
 800bb3a:	681c      	ldr	r4, [r3, #0]
 800bb3c:	6838      	ldr	r0, [r7, #0]
 800bb3e:	f7fc fbb3 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800bb42:	4603      	mov	r3, r0
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	47a0      	blx	r4
}
 800bb4a:	bf00      	nop
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd90      	pop	{r4, r7, pc}
 800bb52:	bf00      	nop
 800bb54:	0801714c 	.word	0x0801714c

0800bb58 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800bb58:	b590      	push	{r4, r7, lr}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
    print("\n");
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	332c      	adds	r3, #44	; 0x2c
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4910      	ldr	r1, [pc, #64]	; (800bbac <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	4798      	blx	r3
    print("\t");
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	332c      	adds	r3, #44	; 0x2c
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	490d      	ldr	r1, [pc, #52]	; (800bbb0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	4798      	blx	r3
    print(reason.asCharString());
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	332c      	adds	r3, #44	; 0x2c
 800bb84:	681c      	ldr	r4, [r3, #0]
 800bb86:	6838      	ldr	r0, [r7, #0]
 800bb88:	f7fc fb8e 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	47a0      	blx	r4
    print("\n\n");
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	332c      	adds	r3, #44	; 0x2c
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4905      	ldr	r1, [pc, #20]	; (800bbb4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	4798      	blx	r3
}
 800bba2:	bf00      	nop
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd90      	pop	{r4, r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	08017004 	.word	0x08017004
 800bbb0:	0801715c 	.word	0x0801715c
 800bbb4:	08017134 	.word	0x08017134

0800bbb8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800bbb8:	b590      	push	{r4, r7, lr}
 800bbba:	b089      	sub	sp, #36	; 0x24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800bbc4:	f7ff fbf0 	bl	800b3a8 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	bf0c      	ite	eq
 800bbce:	2301      	moveq	r3, #1
 800bbd0:	2300      	movne	r3, #0
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d015      	beq.n	800bc04 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3354      	adds	r3, #84	; 0x54
 800bbde:	681c      	ldr	r4, [r3, #0]
 800bbe0:	f107 0310 	add.w	r3, r7, #16
 800bbe4:	68b9      	ldr	r1, [r7, #8]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fc f827 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
 800bbec:	f107 0310 	add.w	r3, r7, #16
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	47a0      	blx	r4
 800bbf8:	f107 0310 	add.w	r3, r7, #16
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fc fb80 	bl	8008302 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800bc02:	e014      	b.n	800bc2e <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	3350      	adds	r3, #80	; 0x50
 800bc0a:	681c      	ldr	r4, [r3, #0]
 800bc0c:	f107 0318 	add.w	r3, r7, #24
 800bc10:	68b9      	ldr	r1, [r7, #8]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fc f811 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
 800bc18:	f107 0318 	add.w	r3, r7, #24
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	47a0      	blx	r4
 800bc24:	f107 0318 	add.w	r3, r7, #24
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fc fb6a 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800bc2e:	bf00      	nop
 800bc30:	3724      	adds	r7, #36	; 0x24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd90      	pop	{r4, r7, pc}
	...

0800bc38 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
    print("\n");
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	332c      	adds	r3, #44	; 0x2c
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4916      	ldr	r1, [pc, #88]	; (800bca8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	4798      	blx	r3
    print(file.asCharString());
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	332c      	adds	r3, #44	; 0x2c
 800bc58:	681c      	ldr	r4, [r3, #0]
 800bc5a:	68b8      	ldr	r0, [r7, #8]
 800bc5c:	f7fc fb24 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800bc60:	4603      	mov	r3, r0
 800bc62:	4619      	mov	r1, r3
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	47a0      	blx	r4
    print(":");
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	332c      	adds	r3, #44	; 0x2c
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	490e      	ldr	r1, [pc, #56]	; (800bcac <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	4798      	blx	r3
    print(lineNumber);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3334      	adds	r3, #52	; 0x34
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	6879      	ldr	r1, [r7, #4]
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	4798      	blx	r3
    print(":");
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	332c      	adds	r3, #44	; 0x2c
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4907      	ldr	r1, [pc, #28]	; (800bcac <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	4798      	blx	r3
    print(" error:");
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	332c      	adds	r3, #44	; 0x2c
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4905      	ldr	r1, [pc, #20]	; (800bcb0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	4798      	blx	r3
}
 800bca0:	bf00      	nop
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd90      	pop	{r4, r7, pc}
 800bca8:	08017004 	.word	0x08017004
 800bcac:	08017160 	.word	0x08017160
 800bcb0:	08017164 	.word	0x08017164

0800bcb4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800bcb4:	b590      	push	{r4, r7, lr}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
    print("\n");
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	332c      	adds	r3, #44	; 0x2c
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4916      	ldr	r1, [pc, #88]	; (800bd24 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	4798      	blx	r3
    print(file.asCharString());
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	332c      	adds	r3, #44	; 0x2c
 800bcd4:	681c      	ldr	r4, [r3, #0]
 800bcd6:	68b8      	ldr	r0, [r7, #8]
 800bcd8:	f7fc fae6 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	4619      	mov	r1, r3
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	47a0      	blx	r4
    print("(");
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	332c      	adds	r3, #44	; 0x2c
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	490e      	ldr	r1, [pc, #56]	; (800bd28 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	4798      	blx	r3
    print(lineNumber);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	3334      	adds	r3, #52	; 0x34
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6879      	ldr	r1, [r7, #4]
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	4798      	blx	r3
    print("):");
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	332c      	adds	r3, #44	; 0x2c
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4908      	ldr	r1, [pc, #32]	; (800bd2c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	4798      	blx	r3
    print(" error:");
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	332c      	adds	r3, #44	; 0x2c
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4906      	ldr	r1, [pc, #24]	; (800bd30 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	4798      	blx	r3
}
 800bd1c:	bf00      	nop
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd90      	pop	{r4, r7, pc}
 800bd24:	08017004 	.word	0x08017004
 800bd28:	0801716c 	.word	0x0801716c
 800bd2c:	08017170 	.word	0x08017170
 800bd30:	08017164 	.word	0x08017164

0800bd34 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	7a1b      	ldrb	r3, [r3, #8]
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d106      	bne.n	800bd54 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3328      	adds	r3, #40	; 0x28
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	4798      	blx	r3
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
    while (*s) {
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d009      	beq.n	800bd82 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800bd6e:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	7812      	ldrb	r2, [r2, #0]
 800bd76:	4610      	mov	r0, r2
 800bd78:	4798      	blx	r3
        s++;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	603b      	str	r3, [r7, #0]
    while (*s) {
 800bd80:	e7f1      	b.n	800bd66 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	334c      	adds	r3, #76	; 0x4c
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	4798      	blx	r3
}
 800bd8e:	bf00      	nop
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	200000bc 	.word	0x200000bc

0800bd9c <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800bda4:	4b03      	ldr	r3, [pc, #12]	; (800bdb4 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4798      	blx	r3
}
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	200000c0 	.word	0x200000c0

0800bdb8 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7ff fb00 	bl	800b3c8 <_ZN10TestOutputC1Ev>
 800bdc8:	4a06      	ldr	r2, [pc, #24]	; (800bde4 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	611a      	str	r2, [r3, #16]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	615a      	str	r2, [r3, #20]
{
}
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	08018f8c 	.word	0x08018f8c

0800bde8 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	4a0e      	ldr	r2, [pc, #56]	; (800be2c <_ZN19CompositeTestOutputD1Ev+0x44>)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d004      	beq.n	800be08 <_ZN19CompositeTestOutputD1Ev+0x20>
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	3204      	adds	r2, #4
 800be02:	6812      	ldr	r2, [r2, #0]
 800be04:	4618      	mov	r0, r3
 800be06:	4790      	blx	r2
  delete outputTwo_;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	695b      	ldr	r3, [r3, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d004      	beq.n	800be1a <_ZN19CompositeTestOutputD1Ev+0x32>
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	3204      	adds	r2, #4
 800be14:	6812      	ldr	r2, [r2, #0]
 800be16:	4618      	mov	r0, r3
 800be18:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7ff faf1 	bl	800b404 <_ZN10TestOutputD1Ev>
}
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	08018f8c 	.word	0x08018f8c

0800be30 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
}
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff ffd5 	bl	800bde8 <_ZN19CompositeTestOutputD1Ev>
 800be3e:	2118      	movs	r1, #24
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7fa ffd1 	bl	8006de8 <_ZdlPvj>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4618      	mov	r0, r3
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d004      	beq.n	800be6c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	3204      	adds	r2, #4
 800be66:	6812      	ldr	r2, [r2, #0]
 800be68:	4618      	mov	r0, r3
 800be6a:	4790      	blx	r2
  outputOne_ = output;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	611a      	str	r2, [r3, #16]
}
 800be72:	bf00      	nop
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b082      	sub	sp, #8
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d004      	beq.n	800be96 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	3204      	adds	r2, #4
 800be90:	6812      	ldr	r2, [r2, #0]
 800be92:	4618      	mov	r0, r3
 800be94:	4790      	blx	r2
  outputTwo_ = output;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	683a      	ldr	r2, [r7, #0]
 800be9a:	615a      	str	r2, [r3, #20]
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d008      	beq.n	800bec6 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691a      	ldr	r2, [r3, #16]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3308      	adds	r3, #8
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4610      	mov	r0, r2
 800bec4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d008      	beq.n	800bee0 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695a      	ldr	r2, [r3, #20]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3308      	adds	r3, #8
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4610      	mov	r0, r2
 800bede:	4798      	blx	r3
}
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d009      	beq.n	800bf0e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	691a      	ldr	r2, [r3, #16]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	330c      	adds	r3, #12
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d009      	beq.n	800bf2a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	695a      	ldr	r2, [r3, #20]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	330c      	adds	r3, #12
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	4610      	mov	r0, r2
 800bf28:	4798      	blx	r3
}
 800bf2a:	bf00      	nop
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b082      	sub	sp, #8
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d009      	beq.n	800bf58 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	691a      	ldr	r2, [r3, #16]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	3310      	adds	r3, #16
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	6839      	ldr	r1, [r7, #0]
 800bf54:	4610      	mov	r0, r2
 800bf56:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d009      	beq.n	800bf74 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	695a      	ldr	r2, [r3, #20]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3310      	adds	r3, #16
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
}
 800bf74:	bf00      	nop
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d009      	beq.n	800bfa2 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	691a      	ldr	r2, [r3, #16]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	3314      	adds	r3, #20
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d009      	beq.n	800bfbe <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	695a      	ldr	r2, [r3, #20]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	3314      	adds	r3, #20
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	4610      	mov	r0, r2
 800bfbc:	4798      	blx	r3
}
 800bfbe:	bf00      	nop
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d009      	beq.n	800bfec <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	691a      	ldr	r2, [r3, #16]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3318      	adds	r3, #24
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	4610      	mov	r0, r2
 800bfea:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d009      	beq.n	800c008 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	695a      	ldr	r2, [r3, #20]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	695b      	ldr	r3, [r3, #20]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3318      	adds	r3, #24
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	4610      	mov	r0, r2
 800c006:	4798      	blx	r3
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d009      	beq.n	800c036 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	691a      	ldr	r2, [r3, #16]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	331c      	adds	r3, #28
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	4610      	mov	r0, r2
 800c034:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d009      	beq.n	800c052 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	695a      	ldr	r2, [r3, #20]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	331c      	adds	r3, #28
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	4610      	mov	r0, r2
 800c050:	4798      	blx	r3
}
 800c052:	bf00      	nop
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	460b      	mov	r3, r1
 800c064:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d009      	beq.n	800c082 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	691a      	ldr	r2, [r3, #16]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3320      	adds	r3, #32
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	78f9      	ldrb	r1, [r7, #3]
 800c07e:	4610      	mov	r0, r2
 800c080:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	695b      	ldr	r3, [r3, #20]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d009      	beq.n	800c09e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	695a      	ldr	r2, [r3, #20]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	3320      	adds	r3, #32
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	78f9      	ldrb	r1, [r7, #3]
 800c09a:	4610      	mov	r0, r2
 800c09c:	4798      	blx	r3
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d008      	beq.n	800c0c8 <_ZN19CompositeTestOutput5colorEv+0x22>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	691a      	ldr	r2, [r3, #16]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3324      	adds	r3, #36	; 0x24
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d008      	beq.n	800c0e2 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	695a      	ldr	r2, [r3, #20]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	695b      	ldr	r3, [r3, #20]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3324      	adds	r3, #36	; 0x24
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4610      	mov	r0, r2
 800c0e0:	4798      	blx	r3
}
 800c0e2:	bf00      	nop
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d009      	beq.n	800c110 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	691a      	ldr	r2, [r3, #16]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3328      	adds	r3, #40	; 0x28
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	4610      	mov	r0, r2
 800c10e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d009      	beq.n	800c12c <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	695a      	ldr	r2, [r3, #20]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3328      	adds	r3, #40	; 0x28
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	4610      	mov	r0, r2
 800c12a:	4798      	blx	r3
}
 800c12c:	bf00      	nop
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d009      	beq.n	800c15a <_ZN19CompositeTestOutput5printEPKc+0x26>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691a      	ldr	r2, [r3, #16]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	332c      	adds	r3, #44	; 0x2c
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	4610      	mov	r0, r2
 800c158:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	695b      	ldr	r3, [r3, #20]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d009      	beq.n	800c176 <_ZN19CompositeTestOutput5printEPKc+0x42>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	695a      	ldr	r2, [r3, #20]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	332c      	adds	r3, #44	; 0x2c
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	4610      	mov	r0, r2
 800c174:	4798      	blx	r3
}
 800c176:	bf00      	nop
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b082      	sub	sp, #8
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d009      	beq.n	800c1a4 <_ZN19CompositeTestOutput5printEl+0x26>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	691a      	ldr	r2, [r3, #16]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3330      	adds	r3, #48	; 0x30
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	695b      	ldr	r3, [r3, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d009      	beq.n	800c1c0 <_ZN19CompositeTestOutput5printEl+0x42>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	695a      	ldr	r2, [r3, #20]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3330      	adds	r3, #48	; 0x30
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	4610      	mov	r0, r2
 800c1be:	4798      	blx	r3
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d009      	beq.n	800c1ee <_ZN19CompositeTestOutput5printEj+0x26>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691a      	ldr	r2, [r3, #16]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3334      	adds	r3, #52	; 0x34
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	695b      	ldr	r3, [r3, #20]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <_ZN19CompositeTestOutput5printEj+0x42>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	695a      	ldr	r2, [r3, #20]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3334      	adds	r3, #52	; 0x34
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	4610      	mov	r0, r2
 800c208:	4798      	blx	r3
}
 800c20a:	bf00      	nop
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	60f8      	str	r0, [r7, #12]
 800c21a:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00a      	beq.n	800c23c <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	691a      	ldr	r2, [r3, #16]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	3338      	adds	r3, #56	; 0x38
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	ed97 0b00 	vldr	d0, [r7]
 800c238:	4610      	mov	r0, r2
 800c23a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	695b      	ldr	r3, [r3, #20]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00a      	beq.n	800c25a <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	695a      	ldr	r2, [r3, #20]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	695b      	ldr	r3, [r3, #20]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3338      	adds	r3, #56	; 0x38
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	ed97 0b00 	vldr	d0, [r7]
 800c256:	4610      	mov	r0, r2
 800c258:	4798      	blx	r3
}
 800c25a:	bf00      	nop
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b082      	sub	sp, #8
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d009      	beq.n	800c288 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	691a      	ldr	r2, [r3, #16]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	333c      	adds	r3, #60	; 0x3c
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	4610      	mov	r0, r2
 800c286:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	695a      	ldr	r2, [r3, #20]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	695b      	ldr	r3, [r3, #20]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	333c      	adds	r3, #60	; 0x3c
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6839      	ldr	r1, [r7, #0]
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4798      	blx	r3
}
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d009      	beq.n	800c2d2 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	691a      	ldr	r2, [r3, #16]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	3344      	adds	r3, #68	; 0x44
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d009      	beq.n	800c2ee <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	695a      	ldr	r2, [r3, #20]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3344      	adds	r3, #68	; 0x44
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	4610      	mov	r0, r2
 800c2ec:	4798      	blx	r3
}
 800c2ee:	bf00      	nop
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b082      	sub	sp, #8
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d008      	beq.n	800c318 <_ZN19CompositeTestOutput5flushEv+0x22>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	691a      	ldr	r2, [r3, #16]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	334c      	adds	r3, #76	; 0x4c
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4610      	mov	r0, r2
 800c316:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	695b      	ldr	r3, [r3, #20]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d008      	beq.n	800c332 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	695a      	ldr	r2, [r3, #20]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	695b      	ldr	r3, [r3, #20]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	334c      	adds	r3, #76	; 0x4c
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4610      	mov	r0, r2
 800c330:	4798      	blx	r3
}
 800c332:	bf00      	nop
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800c33a:	b480      	push	{r7}
 800c33c:	b085      	sub	sp, #20
 800c33e:	af00      	add	r7, sp, #0
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	607a      	str	r2, [r7, #4]
    }
 800c346:	bf00      	nop
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800c352:	b480      	push	{r7}
 800c354:	b085      	sub	sp, #20
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	607a      	str	r2, [r7, #4]
    }
 800c35e:	bf00      	nop
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
	...

0800c36c <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800c376:	4a0b      	ldr	r2, [pc, #44]	; (800c3a4 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	601a      	str	r2, [r3, #0]
 800c37c:	f000 f9ce 	bl	800c71c <_ZN14NullTestPlugin8instanceEv>
 800c380:	4602      	mov	r2, r0
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	605a      	str	r2, [r3, #4]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3308      	adds	r3, #8
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7fb fc54 	bl	8007c3a <_ZN12SimpleStringC1ERKS_>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2201      	movs	r2, #1
 800c396:	741a      	strb	r2, [r3, #16]
{
}
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	08019148 	.word	0x08019148

0800c3a8 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800c3b2:	4a0a      	ldr	r2, [pc, #40]	; (800c3dc <_ZN10TestPluginC1EPS_+0x34>)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	605a      	str	r2, [r3, #4]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	4907      	ldr	r1, [pc, #28]	; (800c3e0 <_ZN10TestPluginC1EPS_+0x38>)
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fb fbe4 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	741a      	strb	r2, [r3, #16]
{
}
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	08019148 	.word	0x08019148
 800c3e0:	08017174 	.word	0x08017174

0800c3e4 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	4a06      	ldr	r2, [pc, #24]	; (800c408 <_ZN10TestPluginD1Ev+0x24>)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7fb ff83 	bl	8008302 <_ZN12SimpleStringD1Ev>
{
}
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4618      	mov	r0, r3
 800c400:	3708      	adds	r7, #8
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	08019148 	.word	0x08019148

0800c40c <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
}
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff ffe5 	bl	800c3e4 <_ZN10TestPluginD1Ev>
 800c41a:	2114      	movs	r1, #20
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7fa fce3 	bl	8006de8 <_ZdlPvj>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	605a      	str	r2, [r3, #4]
    return this;
 800c43c:	687b      	ldr	r3, [r7, #4]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b084      	sub	sp, #16
 800c44e:	af00      	add	r7, sp, #0
 800c450:	60f8      	str	r0, [r7, #12]
 800c452:	60b9      	str	r1, [r7, #8]
 800c454:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	7c1b      	ldrb	r3, [r3, #16]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d007      	beq.n	800c46e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3308      	adds	r3, #8
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	68b9      	ldr	r1, [r7, #8]
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6858      	ldr	r0, [r3, #4]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3314      	adds	r3, #20
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	68b9      	ldr	r1, [r7, #8]
 800c480:	4798      	blx	r3
}
 800c482:	bf00      	nop
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6858      	ldr	r0, [r3, #4]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3318      	adds	r3, #24
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	68b9      	ldr	r1, [r7, #8]
 800c4a8:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	7c1b      	ldrb	r3, [r3, #16]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d007      	beq.n	800c4c2 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	330c      	adds	r3, #12
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	4798      	blx	r3
}
 800c4c2:	bf00      	nop
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800c4ca:	b590      	push	{r4, r7, lr}
 800c4cc:	b085      	sub	sp, #20
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	60f8      	str	r0, [r7, #12]
 800c4d2:	60b9      	str	r1, [r7, #8]
 800c4d4:	607a      	str	r2, [r7, #4]
 800c4d6:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	331c      	adds	r3, #28
 800c4de:	681c      	ldr	r4, [r3, #0]
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	68b9      	ldr	r1, [r7, #8]
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	47a0      	blx	r4
 800c4ea:	4603      	mov	r3, r0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd90      	pop	{r4, r7, pc}

0800c4f4 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800c4f4:	b590      	push	{r4, r7, lr}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3310      	adds	r3, #16
 800c508:	681c      	ldr	r4, [r3, #0]
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	68b9      	ldr	r1, [r7, #8]
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	47a0      	blx	r4
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d001      	beq.n	800c51e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e011      	b.n	800c542 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00c      	beq.n	800c540 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6858      	ldr	r0, [r3, #4]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	331c      	adds	r3, #28
 800c532:	681c      	ldr	r4, [r3, #0]
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	68b9      	ldr	r1, [r7, #8]
 800c53a:	47a0      	blx	r4
 800c53c:	4603      	mov	r3, r0
 800c53e:	e000      	b.n	800c542 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	bd90      	pop	{r4, r7, pc}

0800c54a <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800c54a:	b480      	push	{r7}
 800c54c:	b083      	sub	sp, #12
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
    return name_;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3308      	adds	r3, #8
}
 800c556:	4618      	mov	r0, r3
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b082      	sub	sp, #8
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3308      	adds	r3, #8
 800c570:	4619      	mov	r1, r3
 800c572:	6838      	ldr	r0, [r7, #0]
 800c574:	f7fb fed1 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d001      	beq.n	800c582 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	e00d      	b.n	800c59e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d007      	beq.n	800c59a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	4618      	mov	r0, r3
 800c592:	f7ff ffe6 	bl	800c562 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800c596:	4603      	mov	r3, r0
 800c598:	e001      	b.n	800c59e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b083      	sub	sp, #12
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
    return next_;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	685b      	ldr	r3, [r3, #4]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	370c      	adds	r7, #12
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00e      	beq.n	800c5f2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff ffb6 	bl	800c54a <_ZN10TestPlugin7getNameEv>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fb fe99 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e000      	b.n	800c5f4 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d007      	beq.n	800c608 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800c608:	68fb      	ldr	r3, [r7, #12]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800c612:	b480      	push	{r7}
 800c614:	b083      	sub	sp, #12
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	741a      	strb	r2, [r3, #16]
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	741a      	strb	r2, [r3, #16]
}
 800c63a:	bf00      	nop
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800c646:	b480      	push	{r7}
 800c648:	b083      	sub	sp, #12
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
    return enabled_;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7c1b      	ldrb	r3, [r3, #16]
}
 800c652:	4618      	mov	r0, r3
 800c654:	370c      	adds	r7, #12
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
	...

0800c660 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	4618      	mov	r0, r3
 800c670:	f7ff fe7c 	bl	800c36c <_ZN10TestPluginC1ERK12SimpleString>
 800c674:	4a05      	ldr	r2, [pc, #20]	; (800c68c <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800c67a:	4b05      	ldr	r3, [pc, #20]	; (800c690 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]
}
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	08019104 	.word	0x08019104
 800c690:	20000650 	.word	0x20000650

0800c694 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800c694:	b480      	push	{r7}
 800c696:	b087      	sub	sp, #28
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800c6a0:	4b0e      	ldr	r3, [pc, #56]	; (800c6dc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	db0d      	blt.n	800c6ca <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800c6ae:	4a0c      	ldr	r2, [pc, #48]	; (800c6e0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c6b6:	490a      	ldr	r1, [pc, #40]	; (800c6e0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	00db      	lsls	r3, r3, #3
 800c6bc:	440b      	add	r3, r1
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	e7ee      	b.n	800c6a8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800c6ca:	4b04      	ldr	r3, [pc, #16]	; (800c6dc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	601a      	str	r2, [r3, #0]
}
 800c6d0:	bf00      	nop
 800c6d2:	371c      	adds	r7, #28
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	20000650 	.word	0x20000650
 800c6e0:	20000654 	.word	0x20000654

0800c6e4 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7ff fe59 	bl	800c3a8 <_ZN10TestPluginC1EPS_>
 800c6f6:	4a04      	ldr	r2, [pc, #16]	; (800c708 <_ZN14NullTestPluginC1Ev+0x24>)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	601a      	str	r2, [r3, #0]
{
}
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	080190c0 	.word	0x080190c0

0800c70c <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800c70c:	b580      	push	{r7, lr}
 800c70e:	af00      	add	r7, sp, #0
 800c710:	4801      	ldr	r0, [pc, #4]	; (800c718 <__tcf_0+0xc>)
 800c712:	f000 f849 	bl	800c7a8 <_ZN14NullTestPluginD1Ev>
 800c716:	bd80      	pop	{r7, pc}
 800c718:	20000754 	.word	0x20000754

0800c71c <_ZN14NullTestPlugin8instanceEv>:
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800c720:	4b12      	ldr	r3, [pc, #72]	; (800c76c <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	f3bf 8f5b 	dmb	ish
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	f003 0301 	and.w	r3, r3, #1
 800c72e:	2b00      	cmp	r3, #0
 800c730:	bf0c      	ite	eq
 800c732:	2301      	moveq	r3, #1
 800c734:	2300      	movne	r3, #0
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d013      	beq.n	800c764 <_ZN14NullTestPlugin8instanceEv+0x48>
 800c73c:	480b      	ldr	r0, [pc, #44]	; (800c76c <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c73e:	f005 febf 	bl	80124c0 <__cxa_guard_acquire>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	bf14      	ite	ne
 800c748:	2301      	movne	r3, #1
 800c74a:	2300      	moveq	r3, #0
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d008      	beq.n	800c764 <_ZN14NullTestPlugin8instanceEv+0x48>
 800c752:	4807      	ldr	r0, [pc, #28]	; (800c770 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800c754:	f7ff ffc6 	bl	800c6e4 <_ZN14NullTestPluginC1Ev>
 800c758:	4804      	ldr	r0, [pc, #16]	; (800c76c <_ZN14NullTestPlugin8instanceEv+0x50>)
 800c75a:	f005 febd 	bl	80124d8 <__cxa_guard_release>
 800c75e:	4805      	ldr	r0, [pc, #20]	; (800c774 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800c760:	f005 fee1 	bl	8012526 <atexit>
    return &_instance;
 800c764:	4b02      	ldr	r3, [pc, #8]	; (800c770 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800c766:	4618      	mov	r0, r3
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	20000768 	.word	0x20000768
 800c770:	20000754 	.word	0x20000754
 800c774:	0800c70d 	.word	0x0800c70d

0800c778 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
}
 800c784:	bf00      	nop
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
}
 800c79c:	bf00      	nop
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	4a05      	ldr	r2, [pc, #20]	; (800c7c8 <_ZN14NullTestPluginD1Ev+0x20>)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fe13 	bl	800c3e4 <_ZN10TestPluginD1Ev>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	080190c0 	.word	0x080190c0

0800c7cc <_ZN14NullTestPluginD0Ev>:
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff ffe7 	bl	800c7a8 <_ZN14NullTestPluginD1Ev>
 800c7da:	2114      	movs	r1, #20
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7fa fb03 	bl	8006de8 <_ZdlPvj>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800c7f4:	4a0f      	ldr	r2, [pc, #60]	; (800c834 <_ZN12TestRegistryC1Ev+0x48>)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	605a      	str	r2, [r3, #4]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	609a      	str	r2, [r3, #8]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	60da      	str	r2, [r3, #12]
 800c80c:	f7ff ff86 	bl	800c71c <_ZN14NullTestPlugin8instanceEv>
 800c810:	4602      	mov	r2, r0
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	611a      	str	r2, [r3, #16]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	751a      	strb	r2, [r3, #20]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	619a      	str	r2, [r3, #24]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	771a      	strb	r2, [r3, #28]
{
}
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	0801918c 	.word	0x0801918c

0800c838 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	4a04      	ldr	r2, [pc, #16]	; (800c854 <_ZN12TestRegistryD1Ev+0x1c>)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	601a      	str	r2, [r3, #0]
{
}
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	0801918c 	.word	0x0801918c

0800c858 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
}
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7ff ffe9 	bl	800c838 <_ZN12TestRegistryD1Ev>
 800c866:	2120      	movs	r1, #32
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7fa fabd 	bl	8006de8 <_ZdlPvj>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4618      	mov	r0, r3
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3308      	adds	r3, #8
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	6852      	ldr	r2, [r2, #4]
 800c88e:	4611      	mov	r1, r2
 800c890:	6838      	ldr	r0, [r7, #0]
 800c892:	4798      	blx	r3
 800c894:	4602      	mov	r2, r0
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	605a      	str	r2, [r3, #4]
}
 800c89a:	bf00      	nop
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6838      	ldr	r0, [r7, #0]
 800c8ba:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	60bb      	str	r3, [r7, #8]
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d05c      	beq.n	800c982 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	7d1b      	ldrb	r3, [r3, #20]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d005      	beq.n	800c8dc <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	3380      	adds	r3, #128	; 0x80
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68b8      	ldr	r0, [r7, #8]
 800c8da:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	7f1b      	ldrb	r3, [r3, #28]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d005      	beq.n	800c8f0 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	3384      	adds	r3, #132	; 0x84
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68b8      	ldr	r0, [r7, #8]
 800c8ee:	4798      	blx	r3

        if (groupStart) {
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d008      	beq.n	800c908 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	3310      	adds	r3, #16
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68b9      	ldr	r1, [r7, #8]
 800c900:	6838      	ldr	r0, [r7, #0]
 800c902:	4798      	blx	r3
            groupStart = false;
 800c904:	2300      	movs	r3, #0
 800c906:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3320      	adds	r3, #32
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6838      	ldr	r0, [r7, #0]
 800c912:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	68b9      	ldr	r1, [r7, #8]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fb79 	bl	800d010 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d016      	beq.n	800c952 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3318      	adds	r3, #24
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68b9      	ldr	r1, [r7, #8]
 800c92e:	6838      	ldr	r0, [r7, #0]
 800c930:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3390      	adds	r3, #144	; 0x90
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	6911      	ldr	r1, [r2, #16]
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	68b8      	ldr	r0, [r7, #8]
 800c942:	4798      	blx	r3
            result.currentTestEnded(test);
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	331c      	adds	r3, #28
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68b9      	ldr	r1, [r7, #8]
 800c94e:	6838      	ldr	r0, [r7, #0]
 800c950:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800c952:	68b9      	ldr	r1, [r7, #8]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fa5b 	bl	800ce10 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d008      	beq.n	800c972 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800c960:	2301      	movs	r3, #1
 800c962:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3314      	adds	r3, #20
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	68b9      	ldr	r1, [r7, #8]
 800c96e:	6838      	ldr	r0, [r7, #0]
 800c970:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	330c      	adds	r3, #12
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68b8      	ldr	r0, [r7, #8]
 800c97c:	4798      	blx	r3
 800c97e:	60b8      	str	r0, [r7, #8]
 800c980:	e79f      	b.n	800c8c2 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	330c      	adds	r3, #12
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	6838      	ldr	r0, [r7, #0]
 800c98c:	4798      	blx	r3
    currentRepetition_++;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	1c5a      	adds	r2, r3, #1
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	619a      	str	r2, [r3, #24]
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800c9a0:	b590      	push	{r4, r7, lr}
 800c9a2:	b08f      	sub	sp, #60	; 0x3c
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800c9aa:	f107 0314 	add.w	r3, r7, #20
 800c9ae:	4953      	ldr	r1, [pc, #332]	; (800cafc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fb f8ee 	bl	8007b92 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d04d      	beq.n	800ca5e <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800c9c2:	f107 030c 	add.w	r3, r7, #12
 800c9c6:	494d      	ldr	r1, [pc, #308]	; (800cafc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fb f8e2 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800c9ce:	f107 030c 	add.w	r3, r7, #12
 800c9d2:	494b      	ldr	r1, [pc, #300]	; (800cb00 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fb fd23 	bl	8008420 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800c9da:	f107 031c 	add.w	r3, r7, #28
 800c9de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f001 f9d2 	bl	800dd8a <_ZNK10UtestShell8getGroupEv>
 800c9e6:	f107 021c 	add.w	r2, r7, #28
 800c9ea:	f107 030c 	add.w	r3, r7, #12
 800c9ee:	4611      	mov	r1, r2
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fb fd03 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800c9f6:	f107 031c 	add.w	r3, r7, #28
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fb fc81 	bl	8008302 <_ZN12SimpleStringD1Ev>
        gname += "#";
 800ca00:	f107 030c 	add.w	r3, r7, #12
 800ca04:	493e      	ldr	r1, [pc, #248]	; (800cb00 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fb fd0a 	bl	8008420 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800ca0c:	f107 020c 	add.w	r2, r7, #12
 800ca10:	f107 0314 	add.w	r3, r7, #20
 800ca14:	4611      	mov	r1, r2
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fb f939 	bl	8007c8e <_ZNK12SimpleString8containsERKS_>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	f083 0301 	eor.w	r3, r3, #1
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00d      	beq.n	800ca44 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800ca28:	f107 020c 	add.w	r2, r7, #12
 800ca2c:	f107 0314 	add.w	r3, r7, #20
 800ca30:	4611      	mov	r1, r2
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fb fce2 	bl	80083fc <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800ca38:	f107 0314 	add.w	r3, r7, #20
 800ca3c:	4931      	ldr	r1, [pc, #196]	; (800cb04 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fb fcee 	bl	8008420 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800ca44:	f107 030c 	add.w	r3, r7, #12
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fb fc5a 	bl	8008302 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ca4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	330c      	adds	r3, #12
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca58:	4798      	blx	r3
 800ca5a:	6378      	str	r0, [r7, #52]	; 0x34
 800ca5c:	e7ae      	b.n	800c9bc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800ca5e:	f107 0314 	add.w	r3, r7, #20
 800ca62:	4a26      	ldr	r2, [pc, #152]	; (800cafc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800ca64:	4926      	ldr	r1, [pc, #152]	; (800cb00 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fb faa8 	bl	8007fbc <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800ca6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca70:	4924      	ldr	r1, [pc, #144]	; (800cb04 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7fb f88d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ca78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ca7c:	f107 0314 	add.w	r3, r7, #20
 800ca80:	4611      	mov	r1, r2
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fb f982 	bl	8007d8c <_ZNK12SimpleString8endsWithERKS_>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461c      	mov	r4, r3
 800ca8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fb fc36 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ca96:	2c00      	cmp	r4, #0
 800ca98:	d01a      	beq.n	800cad0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800ca9a:	f107 0314 	add.w	r3, r7, #20
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fb fc0e 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 800caa4:	4603      	mov	r3, r0
 800caa6:	3b01      	subs	r3, #1
 800caa8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800caac:	f107 0114 	add.w	r1, r7, #20
 800cab0:	2200      	movs	r2, #0
 800cab2:	f7fb fd2f 	bl	8008514 <_ZNK12SimpleString9subStringEjj>
 800cab6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800caba:	f107 0314 	add.w	r3, r7, #20
 800cabe:	4611      	mov	r1, r2
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fb f8d2 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800cac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fb fc19 	bl	8008302 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3338      	adds	r3, #56	; 0x38
 800cad6:	681c      	ldr	r4, [r3, #0]
 800cad8:	f107 0314 	add.w	r3, r7, #20
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fb fbe3 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800cae2:	4603      	mov	r3, r0
 800cae4:	4619      	mov	r1, r3
 800cae6:	6838      	ldr	r0, [r7, #0]
 800cae8:	47a0      	blx	r4
    SimpleString groupList;
 800caea:	f107 0314 	add.w	r3, r7, #20
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fb fc07 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800caf4:	bf00      	nop
 800caf6:	373c      	adds	r7, #60	; 0x3c
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd90      	pop	{r4, r7, pc}
 800cafc:	080171c4 	.word	0x080171c4
 800cb00:	080171c8 	.word	0x080171c8
 800cb04:	080171cc 	.word	0x080171cc

0800cb08 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800cb08:	b590      	push	{r4, r7, lr}
 800cb0a:	b091      	sub	sp, #68	; 0x44
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800cb12:	f107 0314 	add.w	r3, r7, #20
 800cb16:	4964      	ldr	r1, [pc, #400]	; (800cca8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fb f83a 	bl	8007b92 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d06e      	beq.n	800cc08 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 fa6e 	bl	800d010 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d05e      	beq.n	800cbf8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800cb3a:	f107 030c 	add.w	r3, r7, #12
 800cb3e:	495a      	ldr	r1, [pc, #360]	; (800cca8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fb f826 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800cb46:	f107 030c 	add.w	r3, r7, #12
 800cb4a:	4958      	ldr	r1, [pc, #352]	; (800ccac <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7fb fc67 	bl	8008420 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800cb52:	f107 031c 	add.w	r3, r7, #28
 800cb56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f001 f916 	bl	800dd8a <_ZNK10UtestShell8getGroupEv>
 800cb5e:	f107 021c 	add.w	r2, r7, #28
 800cb62:	f107 030c 	add.w	r3, r7, #12
 800cb66:	4611      	mov	r1, r2
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fb fc47 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800cb6e:	f107 031c 	add.w	r3, r7, #28
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fb fbc5 	bl	8008302 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800cb78:	f107 030c 	add.w	r3, r7, #12
 800cb7c:	494c      	ldr	r1, [pc, #304]	; (800ccb0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fb fc4e 	bl	8008420 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800cb84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f001 f8ee 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 800cb90:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800cb94:	f107 030c 	add.w	r3, r7, #12
 800cb98:	4611      	mov	r1, r2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fb fc2e 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800cba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fb fbac 	bl	8008302 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800cbaa:	f107 030c 	add.w	r3, r7, #12
 800cbae:	493f      	ldr	r1, [pc, #252]	; (800ccac <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fb fc35 	bl	8008420 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800cbb6:	f107 020c 	add.w	r2, r7, #12
 800cbba:	f107 0314 	add.w	r3, r7, #20
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fb f864 	bl	8007c8e <_ZNK12SimpleString8containsERKS_>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	f083 0301 	eor.w	r3, r3, #1
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00d      	beq.n	800cbee <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800cbd2:	f107 020c 	add.w	r2, r7, #12
 800cbd6:	f107 0314 	add.w	r3, r7, #20
 800cbda:	4611      	mov	r1, r2
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fb fc0d 	bl	80083fc <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800cbe2:	f107 0314 	add.w	r3, r7, #20
 800cbe6:	4933      	ldr	r1, [pc, #204]	; (800ccb4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fb fc19 	bl	8008420 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800cbee:	f107 030c 	add.w	r3, r7, #12
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fb fb85 	bl	8008302 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800cbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cc02:	4798      	blx	r3
 800cc04:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cc06:	e78d      	b.n	800cb24 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800cc08:	f107 0314 	add.w	r3, r7, #20
 800cc0c:	4a26      	ldr	r2, [pc, #152]	; (800cca8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800cc0e:	4927      	ldr	r1, [pc, #156]	; (800ccac <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fb f9d3 	bl	8007fbc <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800cc16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc1a:	4926      	ldr	r1, [pc, #152]	; (800ccb4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fa ffb8 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800cc22:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cc26:	f107 0314 	add.w	r3, r7, #20
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fb f8ad 	bl	8007d8c <_ZNK12SimpleString8endsWithERKS_>
 800cc32:	4603      	mov	r3, r0
 800cc34:	461c      	mov	r4, r3
 800cc36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fb fb61 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800cc40:	2c00      	cmp	r4, #0
 800cc42:	d01a      	beq.n	800cc7a <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800cc44:	f107 0314 	add.w	r3, r7, #20
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fb fb39 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	3b01      	subs	r3, #1
 800cc52:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800cc56:	f107 0114 	add.w	r1, r7, #20
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f7fb fc5a 	bl	8008514 <_ZNK12SimpleString9subStringEjj>
 800cc60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800cc64:	f107 0314 	add.w	r3, r7, #20
 800cc68:	4611      	mov	r1, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fa fffd 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 800cc70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fb fb44 	bl	8008302 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3338      	adds	r3, #56	; 0x38
 800cc80:	681c      	ldr	r4, [r3, #0]
 800cc82:	f107 0314 	add.w	r3, r7, #20
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fb fb0e 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6838      	ldr	r0, [r7, #0]
 800cc92:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800cc94:	f107 0314 	add.w	r3, r7, #20
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fb fb32 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800cc9e:	bf00      	nop
 800cca0:	3744      	adds	r7, #68	; 0x44
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd90      	pop	{r4, r7, pc}
 800cca6:	bf00      	nop
 800cca8:	080171c4 	.word	0x080171c4
 800ccac:	080171c8 	.word	0x080171c8
 800ccb0:	080171d0 	.word	0x080171d0
 800ccb4:	080171cc 	.word	0x080171cc

0800ccb8 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800ccb8:	b590      	push	{r4, r7, lr}
 800ccba:	b091      	sub	sp, #68	; 0x44
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800ccc2:	f107 0314 	add.w	r3, r7, #20
 800ccc6:	494f      	ldr	r1, [pc, #316]	; (800ce04 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fa ff62 	bl	8007b92 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d07d      	beq.n	800cdd6 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800ccda:	f107 030c 	add.w	r3, r7, #12
 800ccde:	4949      	ldr	r1, [pc, #292]	; (800ce04 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fa ff56 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800cce6:	f107 031c 	add.w	r3, r7, #28
 800ccea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ccec:	4618      	mov	r0, r3
 800ccee:	f001 f84c 	bl	800dd8a <_ZNK10UtestShell8getGroupEv>
 800ccf2:	f107 021c 	add.w	r2, r7, #28
 800ccf6:	f107 030c 	add.w	r3, r7, #12
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fb fb7d 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800cd02:	f107 031c 	add.w	r3, r7, #28
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fb fafb 	bl	8008302 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800cd0c:	f107 030c 	add.w	r3, r7, #12
 800cd10:	493d      	ldr	r1, [pc, #244]	; (800ce08 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fb fb84 	bl	8008420 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800cd18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f001 f824 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 800cd24:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800cd28:	f107 030c 	add.w	r3, r7, #12
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fb fb64 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800cd34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fb fae2 	bl	8008302 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800cd3e:	f107 030c 	add.w	r3, r7, #12
 800cd42:	4931      	ldr	r1, [pc, #196]	; (800ce08 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fb fb6b 	bl	8008420 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800cd4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd50:	4618      	mov	r0, r3
 800cd52:	f001 f8cb 	bl	800deec <_ZNK10UtestShell7getFileEv>
 800cd56:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cd5a:	f107 030c 	add.w	r3, r7, #12
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fb fb4b 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800cd66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fb fac9 	bl	8008302 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800cd70:	f107 030c 	add.w	r3, r7, #12
 800cd74:	4924      	ldr	r1, [pc, #144]	; (800ce08 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fb fb52 	bl	8008420 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800cd7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd7e:	f001 f8c4 	bl	800df0a <_ZNK10UtestShell13getLineNumberEv>
 800cd82:	4603      	mov	r3, r0
 800cd84:	461a      	mov	r2, r3
 800cd86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd8a:	4920      	ldr	r1, [pc, #128]	; (800ce0c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fb ff45 	bl	8008c1c <_Z16StringFromFormatPKcz>
 800cd92:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800cd96:	f107 030c 	add.w	r3, r7, #12
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7fb fb2d 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800cda2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fb faab 	bl	8008302 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800cdac:	f107 020c 	add.w	r2, r7, #12
 800cdb0:	f107 0314 	add.w	r3, r7, #20
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fb fb20 	bl	80083fc <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800cdbc:	f107 030c 	add.w	r3, r7, #12
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fb fa9e 	bl	8008302 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800cdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	330c      	adds	r3, #12
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cdd0:	4798      	blx	r3
 800cdd2:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cdd4:	e77e      	b.n	800ccd4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3338      	adds	r3, #56	; 0x38
 800cddc:	681c      	ldr	r4, [r3, #0]
 800cdde:	f107 0314 	add.w	r3, r7, #20
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fb fa60 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800cde8:	4603      	mov	r3, r0
 800cdea:	4619      	mov	r1, r3
 800cdec:	6838      	ldr	r0, [r7, #0]
 800cdee:	47a0      	blx	r4
    SimpleString testLocations;
 800cdf0:	f107 0314 	add.w	r3, r7, #20
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fb fa84 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800cdfa:	bf00      	nop
 800cdfc:	3744      	adds	r7, #68	; 0x44
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd90      	pop	{r4, r7, pc}
 800ce02:	bf00      	nop
 800ce04:	080171c4 	.word	0x080171c4
 800ce08:	080171d0 	.word	0x080171d0
 800ce0c:	080171d4 	.word	0x080171d4

0800ce10 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800ce10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800ce1a:	2400      	movs	r4, #0
 800ce1c:	2500      	movs	r5, #0
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d028      	beq.n	800ce76 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	330c      	adds	r3, #12
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6838      	ldr	r0, [r7, #0]
 800ce2e:	4798      	blx	r3
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d01f      	beq.n	800ce76 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800ce36:	f107 0308 	add.w	r3, r7, #8
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 ffa4 	bl	800dd8a <_ZNK10UtestShell8getGroupEv>
 800ce42:	2401      	movs	r4, #1
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	330c      	adds	r3, #12
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6838      	ldr	r0, [r7, #0]
 800ce4e:	4798      	blx	r3
 800ce50:	4602      	mov	r2, r0
 800ce52:	f107 0310 	add.w	r3, r7, #16
 800ce56:	4611      	mov	r1, r2
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 ff96 	bl	800dd8a <_ZNK10UtestShell8getGroupEv>
 800ce5e:	2501      	movs	r5, #1
 800ce60:	f107 0210 	add.w	r2, r7, #16
 800ce64:	f107 0308 	add.w	r3, r7, #8
 800ce68:	4611      	mov	r1, r2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fb fa9a 	bl	80083a4 <_ZneRK12SimpleStringS1_>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d001      	beq.n	800ce7a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800ce76:	2601      	movs	r6, #1
 800ce78:	e000      	b.n	800ce7c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800ce7a:	2600      	movs	r6, #0
 800ce7c:	2d00      	cmp	r5, #0
 800ce7e:	d004      	beq.n	800ce8a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800ce80:	f107 0310 	add.w	r3, r7, #16
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fb fa3c 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ce8a:	2c00      	cmp	r4, #0
 800ce8c:	d004      	beq.n	800ce98 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800ce8e:	f107 0308 	add.w	r3, r7, #8
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fb fa35 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ce98:	4633      	mov	r3, r6
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	371c      	adds	r7, #28
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cea2 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b082      	sub	sp, #8
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00a      	beq.n	800cec8 <_ZN12TestRegistry10countTestsEv+0x26>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3310      	adds	r3, #16
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	4603      	mov	r3, r0
 800cec6:	e000      	b.n	800ceca <_ZN12TestRegistry10countTestsEv+0x28>
 800cec8:	2300      	movs	r3, #0
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
	...

0800ced4 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800ced4:	b580      	push	{r7, lr}
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	4801      	ldr	r0, [pc, #4]	; (800cee0 <__tcf_0+0xc>)
 800ceda:	f7ff fcad 	bl	800c838 <_ZN12TestRegistryD1Ev>
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	20000770 	.word	0x20000770

0800cee4 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800cee8:	4b15      	ldr	r3, [pc, #84]	; (800cf40 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	f3bf 8f5b 	dmb	ish
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	f003 0301 	and.w	r3, r3, #1
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	bf0c      	ite	eq
 800cefa:	2301      	moveq	r3, #1
 800cefc:	2300      	movne	r3, #0
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d013      	beq.n	800cf2c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800cf04:	480e      	ldr	r0, [pc, #56]	; (800cf40 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800cf06:	f005 fadb 	bl	80124c0 <__cxa_guard_acquire>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	bf14      	ite	ne
 800cf10:	2301      	movne	r3, #1
 800cf12:	2300      	moveq	r3, #0
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d008      	beq.n	800cf2c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800cf1a:	480a      	ldr	r0, [pc, #40]	; (800cf44 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800cf1c:	f7ff fc66 	bl	800c7ec <_ZN12TestRegistryC1Ev>
 800cf20:	4807      	ldr	r0, [pc, #28]	; (800cf40 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800cf22:	f005 fad9 	bl	80124d8 <__cxa_guard_release>
 800cf26:	4808      	ldr	r0, [pc, #32]	; (800cf48 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800cf28:	f005 fafd 	bl	8012526 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800cf2c:	4b07      	ldr	r3, [pc, #28]	; (800cf4c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800cf34:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	e000      	b.n	800cf3c <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800cf3a:	4b02      	ldr	r3, [pc, #8]	; (800cf44 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	20000790 	.word	0x20000790
 800cf44:	20000770 	.word	0x20000770
 800cf48:	0800ced5 	.word	0x0800ced5
 800cf4c:	2000076c 	.word	0x2000076c

0800cf50 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800cf5a:	4a04      	ldr	r2, [pc, #16]	; (800cf6c <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	6013      	str	r3, [r2, #0]
}
 800cf60:	bf00      	nop
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr
 800cf6c:	2000076c 	.word	0x2000076c

0800cf70 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00a      	beq.n	800cf96 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	330c      	adds	r3, #12
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4610      	mov	r0, r2
 800cf90:	4798      	blx	r3
 800cf92:	4603      	mov	r3, r0
 800cf94:	e000      	b.n	800cf98 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800cf96:	2300      	movs	r3, #0
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	6053      	str	r3, [r2, #4]

}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	683a      	ldr	r2, [r7, #0]
 800cfb2:	609a      	str	r2, [r3, #8]
}
 800cfb4:	bf00      	nop
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	60da      	str	r2, [r3, #12]
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	771a      	strb	r2, [r3, #28]
}
 800cfea:	bf00      	nop
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800cff6:	b480      	push	{r7}
 800cff8:	b083      	sub	sp, #12
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	751a      	strb	r2, [r3, #20]
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	68d9      	ldr	r1, [r3, #12]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	461a      	mov	r2, r3
 800d026:	68b8      	ldr	r0, [r7, #8]
 800d028:	f000 ffaa 	bl	800df80 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800d032:	2301      	movs	r3, #1
 800d034:	e006      	b.n	800d044 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	332c      	adds	r3, #44	; 0x2c
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	4798      	blx	r3
        return false;
 800d042:	2300      	movs	r3, #0
    }
}
 800d044:	4618      	mov	r0, r3
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800d054:	f7ff fb62 	bl	800c71c <_ZN14NullTestPlugin8instanceEv>
 800d058:	4602      	mov	r2, r0
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	611a      	str	r2, [r3, #16]
}
 800d05e:	bf00      	nop
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b082      	sub	sp, #8
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3324      	adds	r3, #36	; 0x24
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	6912      	ldr	r2, [r2, #16]
 800d07c:	4611      	mov	r1, r2
 800d07e:	6838      	ldr	r0, [r7, #0]
 800d080:	4798      	blx	r3
 800d082:	4602      	mov	r2, r0
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	611a      	str	r2, [r3, #16]
}
 800d088:	bf00      	nop
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	691b      	ldr	r3, [r3, #16]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	6839      	ldr	r1, [r7, #0]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7ff fa52 	bl	800c562 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800d0be:	4603      	mov	r3, r0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3708      	adds	r7, #8
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	691a      	ldr	r2, [r3, #16]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	3328      	adds	r3, #40	; 0x28
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	4798      	blx	r3
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	bf0c      	ite	eq
 800d0f0:	2301      	moveq	r3, #1
 800d0f2:	2300      	movne	r3, #0
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00b      	beq.n	800d112 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	691a      	ldr	r2, [r3, #16]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	332c      	adds	r3, #44	; 0x2c
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4610      	mov	r0, r2
 800d10a:	4798      	blx	r3
 800d10c:	4602      	mov	r2, r0
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	4618      	mov	r0, r3
 800d118:	f7ff fa17 	bl	800c54a <_ZN10TestPlugin7getNameEv>
 800d11c:	4603      	mov	r3, r0
 800d11e:	6839      	ldr	r1, [r7, #0]
 800d120:	4618      	mov	r0, r3
 800d122:	f7fb f8fa 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00b      	beq.n	800d144 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	691a      	ldr	r2, [r3, #16]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	332c      	adds	r3, #44	; 0x2c
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4610      	mov	r0, r2
 800d13c:	4798      	blx	r3
 800d13e:	4602      	mov	r2, r0
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	691a      	ldr	r2, [r3, #16]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	691b      	ldr	r3, [r3, #16]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	3328      	adds	r3, #40	; 0x28
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	4610      	mov	r0, r2
 800d156:	4798      	blx	r3
}
 800d158:	bf00      	nop
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
    int count = 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	60bb      	str	r3, [r7, #8]
 800d172:	f7ff fad3 	bl	800c71c <_ZN14NullTestPlugin8instanceEv>
 800d176:	4602      	mov	r2, r0
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	4293      	cmp	r3, r2
 800d17c:	bf14      	ite	ne
 800d17e:	2301      	movne	r3, #1
 800d180:	2300      	moveq	r3, #0
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00a      	beq.n	800d19e <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3301      	adds	r3, #1
 800d18c:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	332c      	adds	r3, #44	; 0x2c
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	68b8      	ldr	r0, [r7, #8]
 800d198:	4798      	blx	r3
 800d19a:	60b8      	str	r0, [r7, #8]
 800d19c:	e7e9      	b.n	800d172 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800d19e:	68fb      	ldr	r3, [r7, #12]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
    return tests_;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	334c      	adds	r3, #76	; 0x4c
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	4798      	blx	r3
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	f107 0308 	add.w	r3, r7, #8
 800d1dc:	4611      	mov	r1, r2
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f002 f8e6 	bl	800f3b0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800d1e4:	f107 0308 	add.w	r3, r7, #8
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f002 f96e 	bl	800f4cc <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800d1f0:	f107 0308 	add.w	r3, r7, #8
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f002 fa01 	bl	800f5fc <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800d200:	f107 0308 	add.w	r3, r7, #8
 800d204:	4618      	mov	r0, r3
 800d206:	f002 f927 	bl	800f458 <_ZN22UtestShellPointerArrayD1Ev>
}
 800d20a:	bf00      	nop
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b084      	sub	sp, #16
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	334c      	adds	r3, #76	; 0x4c
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	4798      	blx	r3
 800d226:	4602      	mov	r2, r0
 800d228:	f107 0308 	add.w	r3, r7, #8
 800d22c:	4611      	mov	r1, r2
 800d22e:	4618      	mov	r0, r3
 800d230:	f002 f8be 	bl	800f3b0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800d234:	f107 0308 	add.w	r3, r7, #8
 800d238:	4618      	mov	r0, r3
 800d23a:	f002 f983 	bl	800f544 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800d23e:	f107 0308 	add.w	r3, r7, #8
 800d242:	4618      	mov	r0, r3
 800d244:	f002 f9da 	bl	800f5fc <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800d248:	4602      	mov	r2, r0
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800d24e:	f107 0308 	add.w	r3, r7, #8
 800d252:	4618      	mov	r0, r3
 800d254:	f002 f900 	bl	800f458 <_ZN22UtestShellPointerArrayD1Ev>
}
 800d258:	bf00      	nop
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00b      	beq.n	800d28e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	330c      	adds	r3, #12
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	4798      	blx	r3
 800d282:	4602      	mov	r2, r0
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	4293      	cmp	r3, r2
 800d288:	d001      	beq.n	800d28e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800d28a:	2301      	movs	r3, #1
 800d28c:	e000      	b.n	800d290 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800d28e:	2300      	movs	r3, #0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d007      	beq.n	800d2a4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	330c      	adds	r3, #12
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	4798      	blx	r3
 800d2a0:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800d2a2:	e7e5      	b.n	800d270 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800d2ae:	b590      	push	{r4, r7, lr}
 800d2b0:	b087      	sub	sp, #28
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	617b      	str	r3, [r7, #20]
    while (current) {
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d01e      	beq.n	800d302 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800d2c4:	f107 030c 	add.w	r3, r7, #12
 800d2c8:	6979      	ldr	r1, [r7, #20]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 fd4e 	bl	800dd6c <_ZNK10UtestShell7getNameEv>
 800d2d0:	f107 030c 	add.w	r3, r7, #12
 800d2d4:	6839      	ldr	r1, [r7, #0]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fb f81f 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	461c      	mov	r4, r3
 800d2e0:	f107 030c 	add.w	r3, r7, #12
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fb f80c 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800d2ea:	2c00      	cmp	r4, #0
 800d2ec:	d001      	beq.n	800d2f2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	e008      	b.n	800d304 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	330c      	adds	r3, #12
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6978      	ldr	r0, [r7, #20]
 800d2fc:	4798      	blx	r3
 800d2fe:	6178      	str	r0, [r7, #20]
    while (current) {
 800d300:	e7dd      	b.n	800d2be <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	371c      	adds	r7, #28
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd90      	pop	{r4, r7, pc}

0800d30c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800d30c:	b590      	push	{r4, r7, lr}
 800d30e:	b087      	sub	sp, #28
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	617b      	str	r3, [r7, #20]
    while (current) {
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d01e      	beq.n	800d360 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800d322:	f107 030c 	add.w	r3, r7, #12
 800d326:	6979      	ldr	r1, [r7, #20]
 800d328:	4618      	mov	r0, r3
 800d32a:	f000 fd2e 	bl	800dd8a <_ZNK10UtestShell8getGroupEv>
 800d32e:	f107 030c 	add.w	r3, r7, #12
 800d332:	6839      	ldr	r1, [r7, #0]
 800d334:	4618      	mov	r0, r3
 800d336:	f7fa fff0 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800d33a:	4603      	mov	r3, r0
 800d33c:	461c      	mov	r4, r3
 800d33e:	f107 030c 	add.w	r3, r7, #12
 800d342:	4618      	mov	r0, r3
 800d344:	f7fa ffdd 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800d348:	2c00      	cmp	r4, #0
 800d34a:	d001      	beq.n	800d350 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	e008      	b.n	800d362 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	330c      	adds	r3, #12
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6978      	ldr	r0, [r7, #20]
 800d35a:	4798      	blx	r3
 800d35c:	6178      	str	r0, [r7, #20]
    while (current) {
 800d35e:	e7dd      	b.n	800d31c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800d360:	2300      	movs	r3, #0
}
 800d362:	4618      	mov	r0, r3
 800d364:	371c      	adds	r7, #28
 800d366:	46bd      	mov	sp, r7
 800d368:	bd90      	pop	{r4, r7, pc}
	...

0800d36c <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800d376:	4a18      	ldr	r2, [pc, #96]	; (800d3d8 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	601a      	str	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	683a      	ldr	r2, [r7, #0]
 800d380:	605a      	str	r2, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	609a      	str	r2, [r3, #8]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	60da      	str	r2, [r3, #12]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2200      	movs	r2, #0
 800d392:	611a      	str	r2, [r3, #16]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	615a      	str	r2, [r3, #20]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	619a      	str	r2, [r3, #24]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	61da      	str	r2, [r3, #28]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	621a      	str	r2, [r3, #32]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	625a      	str	r2, [r3, #36]	; 0x24
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	629a      	str	r2, [r3, #40]	; 0x28
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	62da      	str	r2, [r3, #44]	; 0x2c
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	631a      	str	r2, [r3, #48]	; 0x30
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	080191f8 	.word	0x080191f8

0800d3dc <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	4a04      	ldr	r2, [pc, #16]	; (800d3f8 <_ZN10TestResultD1Ev+0x1c>)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	601a      	str	r2, [r3, #0]
{
}
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	080191f8 	.word	0x080191f8

0800d3fc <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
}
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff ffe9 	bl	800d3dc <_ZN10TestResultD1Ev>
 800d40a:	2138      	movs	r1, #56	; 0x38
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7f9 fceb 	bl	8006de8 <_ZdlPvj>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3318      	adds	r3, #24
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	6839      	ldr	r1, [r7, #0]
 800d436:	4610      	mov	r0, r2
 800d438:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800d43a:	4b05      	ldr	r3, [pc, #20]	; (800d450 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	4798      	blx	r3
 800d440:	4603      	mov	r3, r0
 800d442:	461a      	mov	r2, r3
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d448:	bf00      	nop
 800d44a:	3708      	adds	r7, #8
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	200000a4 	.word	0x200000a4

0800d454 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800d45e:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4798      	blx	r3
 800d464:	4603      	mov	r3, r0
 800d466:	461a      	mov	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46c:	1ad2      	subs	r2, r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	331c      	adds	r3, #28
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6879      	ldr	r1, [r7, #4]
 800d482:	4610      	mov	r0, r2
 800d484:	4798      	blx	r3
}
 800d486:	bf00      	nop
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	200000a4 	.word	0x200000a4

0800d494 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	3310      	adds	r3, #16
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	6839      	ldr	r1, [r7, #0]
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800d4b2:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4798      	blx	r3
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	200000a4 	.word	0x200000a4

0800d4cc <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685a      	ldr	r2, [r3, #4]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	332c      	adds	r3, #44	; 0x2c
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	6839      	ldr	r1, [r7, #0]
 800d4e6:	4610      	mov	r0, r2
 800d4e8:	4798      	blx	r3
}
 800d4ea:	bf00      	nop
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b082      	sub	sp, #8
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3348      	adds	r3, #72	; 0x48
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	4610      	mov	r0, r2
 800d50e:	4798      	blx	r3
}
 800d510:	bf00      	nop
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800d522:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4798      	blx	r3
 800d528:	4603      	mov	r3, r0
 800d52a:	461a      	mov	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d530:	1ad2      	subs	r2, r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685a      	ldr	r2, [r3, #4]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3314      	adds	r3, #20
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6879      	ldr	r1, [r7, #4]
 800d546:	4610      	mov	r0, r2
 800d548:	4798      	blx	r3

}
 800d54a:	bf00      	nop
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	200000a4 	.word	0x200000a4

0800d558 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685a      	ldr	r2, [r3, #4]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	333c      	adds	r3, #60	; 0x3c
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6839      	ldr	r1, [r7, #0]
 800d572:	4610      	mov	r0, r2
 800d574:	4798      	blx	r3
    failureCount_++;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	1c5a      	adds	r2, r3, #1
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	615a      	str	r2, [r3, #20]
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
    testCount_++;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	1c5a      	adds	r2, r3, #1
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	609a      	str	r2, [r3, #8]
}
 800d59a:	bf00      	nop
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	b083      	sub	sp, #12
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
    runCount_++;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	60da      	str	r2, [r3, #12]
}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	611a      	str	r2, [r3, #16]
}
 800d5d6:	bf00      	nop
 800d5d8:	370c      	adds	r7, #12
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b083      	sub	sp, #12
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	1c5a      	adds	r2, r3, #1
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	619a      	str	r2, [r3, #24]
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	69db      	ldr	r3, [r3, #28]
 800d60c:	1c5a      	adds	r2, r3, #1
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	61da      	str	r2, [r3, #28]
}
 800d612:	bf00      	nop
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
	...

0800d620 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800d628:	4b09      	ldr	r3, [pc, #36]	; (800d650 <_ZN10TestResult12testsStartedEv+0x30>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4798      	blx	r3
 800d62e:	4603      	mov	r3, r0
 800d630:	461a      	mov	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685a      	ldr	r2, [r3, #4]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	3308      	adds	r3, #8
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4610      	mov	r0, r2
 800d646:	4798      	blx	r3
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	200000a4 	.word	0x200000a4

0800d654 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800d65c:	4b0c      	ldr	r3, [pc, #48]	; (800d690 <_ZN10TestResult10testsEndedEv+0x3c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4798      	blx	r3
 800d662:	4603      	mov	r3, r0
 800d664:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	1ad2      	subs	r2, r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	685a      	ldr	r2, [r3, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	330c      	adds	r3, #12
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6879      	ldr	r1, [r7, #4]
 800d682:	4610      	mov	r0, r2
 800d684:	4798      	blx	r3
}
 800d686:	bf00      	nop
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	200000a4 	.word	0x200000a4

0800d694 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a1b      	ldr	r3, [r3, #32]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800d6dc:	b590      	push	{r4, r7, lr}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	ed87 0b04 	vstr	d0, [r7, #16]
 800d6e6:	ed87 1b02 	vstr	d1, [r7, #8]
 800d6ea:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800d6ee:	4b2c      	ldr	r3, [pc, #176]	; (800d7a0 <_Z13doubles_equalddd+0xc4>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	ed97 0b04 	vldr	d0, [r7, #16]
 800d6f6:	4798      	blx	r3
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10f      	bne.n	800d71e <_Z13doubles_equalddd+0x42>
 800d6fe:	4b28      	ldr	r3, [pc, #160]	; (800d7a0 <_Z13doubles_equalddd+0xc4>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	ed97 0b02 	vldr	d0, [r7, #8]
 800d706:	4798      	blx	r3
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d107      	bne.n	800d71e <_Z13doubles_equalddd+0x42>
 800d70e:	4b24      	ldr	r3, [pc, #144]	; (800d7a0 <_Z13doubles_equalddd+0xc4>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	ed97 0b00 	vldr	d0, [r7]
 800d716:	4798      	blx	r3
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <_Z13doubles_equalddd+0x46>
 800d71e:	2301      	movs	r3, #1
 800d720:	e000      	b.n	800d724 <_Z13doubles_equalddd+0x48>
 800d722:	2300      	movs	r3, #0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <_Z13doubles_equalddd+0x50>
        return false;
 800d728:	2300      	movs	r3, #0
 800d72a:	e035      	b.n	800d798 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800d72c:	4b1d      	ldr	r3, [pc, #116]	; (800d7a4 <_Z13doubles_equalddd+0xc8>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	ed97 0b04 	vldr	d0, [r7, #16]
 800d734:	4798      	blx	r3
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d009      	beq.n	800d750 <_Z13doubles_equalddd+0x74>
 800d73c:	4b19      	ldr	r3, [pc, #100]	; (800d7a4 <_Z13doubles_equalddd+0xc8>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	ed97 0b02 	vldr	d0, [r7, #8]
 800d744:	4798      	blx	r3
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <_Z13doubles_equalddd+0x74>
 800d74c:	2301      	movs	r3, #1
 800d74e:	e000      	b.n	800d752 <_Z13doubles_equalddd+0x76>
 800d750:	2300      	movs	r3, #0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d001      	beq.n	800d75a <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800d756:	2301      	movs	r3, #1
 800d758:	e01e      	b.n	800d798 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800d75a:	4b13      	ldr	r3, [pc, #76]	; (800d7a8 <_Z13doubles_equalddd+0xcc>)
 800d75c:	681c      	ldr	r4, [r3, #0]
 800d75e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d762:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d766:	f7f2 fdcf 	bl	8000308 <__aeabi_dsub>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	ec43 2b17 	vmov	d7, r2, r3
 800d772:	eeb0 0a47 	vmov.f32	s0, s14
 800d776:	eef0 0a67 	vmov.f32	s1, s15
 800d77a:	47a0      	blx	r4
 800d77c:	ec53 2b10 	vmov	r2, r3, d0
 800d780:	2101      	movs	r1, #1
 800d782:	460c      	mov	r4, r1
 800d784:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d788:	f7f2 ffea 	bl	8000760 <__aeabi_dcmpge>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d101      	bne.n	800d796 <_Z13doubles_equalddd+0xba>
 800d792:	2300      	movs	r3, #0
 800d794:	461c      	mov	r4, r3
 800d796:	b2e3      	uxtb	r3, r4
}
 800d798:	4618      	mov	r0, r3
 800d79a:	371c      	adds	r7, #28
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd90      	pop	{r4, r7, pc}
 800d7a0:	200000e0 	.word	0x200000e0
 800d7a4:	200000e4 	.word	0x200000e4
 800d7a8:	200000d4 	.word	0x200000d4

0800d7ac <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	332c      	adds	r3, #44	; 0x2c
    }
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
    {
 800d7cc:	4a0a      	ldr	r2, [pc, #40]	; (800d7f8 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	332c      	adds	r3, #44	; 0x2c
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7ff fe00 	bl	800d3dc <_ZN10TestResultD1Ev>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	331c      	adds	r3, #28
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7f7 fdfd 	bl	80053e0 <_ZN17ConsoleTestOutputD1Ev>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 f943 	bl	800da74 <_ZN10UtestShellD1Ev>
    }
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	08019240 	.word	0x08019240

0800d7fc <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
    }
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff ffdd 	bl	800d7c4 <_ZN22OutsideTestRunnerUTestD1Ev>
 800d80a:	2164      	movs	r1, #100	; 0x64
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f7f9 faeb 	bl	8006de8 <_ZdlPvj>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4618      	mov	r0, r3
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af02      	add	r7, sp, #8
 800d822:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	2300      	movs	r3, #0
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	4b0d      	ldr	r3, [pc, #52]	; (800d860 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800d82c:	4a0d      	ldr	r2, [pc, #52]	; (800d864 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800d82e:	490e      	ldr	r1, [pc, #56]	; (800d868 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800d830:	f000 f8f8 	bl	800da24 <_ZN10UtestShellC1EPKcS1_S1_j>
 800d834:	4a0d      	ldr	r2, [pc, #52]	; (800d86c <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	601a      	str	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	331c      	adds	r3, #28
 800d83e:	4618      	mov	r0, r3
 800d840:	f7f7 fdbc 	bl	80053bc <_ZN17ConsoleTestOutputC1Ev>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	331c      	adds	r3, #28
 800d84e:	4619      	mov	r1, r3
 800d850:	4610      	mov	r0, r2
 800d852:	f7ff fd8b 	bl	800d36c <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	080171d8 	.word	0x080171d8
 800d864:	080171e8 	.word	0x080171e8
 800d868:	08017228 	.word	0x08017228
 800d86c:	08019240 	.word	0x08019240

0800d870 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800d870:	b580      	push	{r7, lr}
 800d872:	af00      	add	r7, sp, #0
 800d874:	4801      	ldr	r0, [pc, #4]	; (800d87c <__tcf_0+0xc>)
 800d876:	f7ff ffa5 	bl	800d7c4 <_ZN22OutsideTestRunnerUTestD1Ev>
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	20000794 	.word	0x20000794

0800d880 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800d880:	b580      	push	{r7, lr}
 800d882:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800d884:	4b12      	ldr	r3, [pc, #72]	; (800d8d0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	f3bf 8f5b 	dmb	ish
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	bf0c      	ite	eq
 800d896:	2301      	moveq	r3, #1
 800d898:	2300      	movne	r3, #0
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d013      	beq.n	800d8c8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800d8a0:	480b      	ldr	r0, [pc, #44]	; (800d8d0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d8a2:	f004 fe0d 	bl	80124c0 <__cxa_guard_acquire>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	bf14      	ite	ne
 800d8ac:	2301      	movne	r3, #1
 800d8ae:	2300      	moveq	r3, #0
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d008      	beq.n	800d8c8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800d8b6:	4807      	ldr	r0, [pc, #28]	; (800d8d4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800d8b8:	f7ff ffb0 	bl	800d81c <_ZN22OutsideTestRunnerUTestC1Ev>
 800d8bc:	4804      	ldr	r0, [pc, #16]	; (800d8d0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800d8be:	f004 fe0b 	bl	80124d8 <__cxa_guard_release>
 800d8c2:	4805      	ldr	r0, [pc, #20]	; (800d8d8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800d8c4:	f004 fe2f 	bl	8012526 <atexit>
    return instance_;
 800d8c8:	4b02      	ldr	r3, [pc, #8]	; (800d8d4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	200007f8 	.word	0x200007f8
 800d8d4:	20000794 	.word	0x20000794
 800d8d8:	0800d871 	.word	0x0800d871

0800d8dc <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	330c      	adds	r3, #12
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	4798      	blx	r3
    }
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	3314      	adds	r3, #20
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	4798      	blx	r3
    }
 800d90c:	bf00      	nop
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	3310      	adds	r3, #16
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	4798      	blx	r3
    }
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	603b      	str	r3, [r7, #0]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	605a      	str	r2, [r3, #4]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	609a      	str	r2, [r3, #8]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	4618      	mov	r0, r3
 800d954:	3714      	adds	r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800d95e:	b580      	push	{r7, lr}
 800d960:	b086      	sub	sp, #24
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	685b      	ldr	r3, [r3, #4]
 800d974:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	3394      	adds	r3, #148	; 0x94
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	68f9      	ldr	r1, [r7, #12]
 800d988:	6938      	ldr	r0, [r7, #16]
 800d98a:	4798      	blx	r3
    }
 800d98c:	bf00      	nop
 800d98e:	3718      	adds	r7, #24
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800d9b2:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <helperDoRunOneTestSeperateProcess+0x34>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	68f9      	ldr	r1, [r7, #12]
 800d9ba:	6938      	ldr	r0, [r7, #16]
 800d9bc:	4798      	blx	r3
    }
 800d9be:	bf00      	nop
 800d9c0:	3718      	adds	r7, #24
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20000098 	.word	0x20000098

0800d9cc <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800d9d4:	4a0f      	ldr	r2, [pc, #60]	; (800da14 <_ZN10UtestShellC1Ev+0x48>)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	601a      	str	r2, [r3, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4a0e      	ldr	r2, [pc, #56]	; (800da18 <_ZN10UtestShellC1Ev+0x4c>)
 800d9de:	605a      	str	r2, [r3, #4]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a0e      	ldr	r2, [pc, #56]	; (800da1c <_ZN10UtestShellC1Ev+0x50>)
 800d9e4:	609a      	str	r2, [r3, #8]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	4a0d      	ldr	r2, [pc, #52]	; (800da20 <_ZN10UtestShellC1Ev+0x54>)
 800d9ea:	60da      	str	r2, [r3, #12]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	611a      	str	r2, [r3, #16]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	615a      	str	r2, [r3, #20]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	761a      	strb	r2, [r3, #24]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	765a      	strb	r2, [r3, #25]
{
}
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4618      	mov	r0, r3
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	08019300 	.word	0x08019300
 800da18:	08017274 	.word	0x08017274
 800da1c:	08017288 	.word	0x08017288
 800da20:	08017298 	.word	0x08017298

0800da24 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
 800da30:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800da32:	4a0f      	ldr	r2, [pc, #60]	; (800da70 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	605a      	str	r2, [r3, #4]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	609a      	str	r2, [r3, #8]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	60da      	str	r2, [r3, #12]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	69ba      	ldr	r2, [r7, #24]
 800da4e:	611a      	str	r2, [r3, #16]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2200      	movs	r2, #0
 800da54:	615a      	str	r2, [r3, #20]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	761a      	strb	r2, [r3, #24]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2200      	movs	r2, #0
 800da60:	765a      	strb	r2, [r3, #25]
{
}
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	4618      	mov	r0, r3
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr
 800da70:	08019300 	.word	0x08019300

0800da74 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	4a04      	ldr	r2, [pc, #16]	; (800da90 <_ZN10UtestShellD1Ev+0x1c>)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	601a      	str	r2, [r3, #0]
{
}
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4618      	mov	r0, r3
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	08019300 	.word	0x08019300

0800da94 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
}
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ffe9 	bl	800da74 <_ZN10UtestShellD1Ev>
 800daa2:	211c      	movs	r1, #28
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7f9 f99f 	bl	8006de8 <_ZdlPvj>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800daba:	2300      	movs	r3, #0
 800dabc:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	3310      	adds	r3, #16
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	4798      	blx	r3
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800dad8:	4b02      	ldr	r3, [pc, #8]	; (800dae4 <_ZN10UtestShell5crashEv+0x10>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4798      	blx	r3
}
 800dade:	bf00      	nop
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	20000094 	.word	0x20000094

0800dae8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b088      	sub	sp, #32
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3324      	adds	r3, #36	; 0x24
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800db06:	f107 0014 	add.w	r0, r7, #20
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	68f9      	ldr	r1, [r7, #12]
 800db10:	f7ff ff0e 	bl	800d930 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	337c      	adds	r3, #124	; 0x7c
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	4798      	blx	r3
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d007      	beq.n	800db36 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800db26:	4b09      	ldr	r3, [pc, #36]	; (800db4c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f107 0214 	add.w	r2, r7, #20
 800db2e:	4611      	mov	r1, r2
 800db30:	4807      	ldr	r0, [pc, #28]	; (800db50 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800db32:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800db34:	e006      	b.n	800db44 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800db36:	4b05      	ldr	r3, [pc, #20]	; (800db4c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f107 0214 	add.w	r2, r7, #20
 800db3e:	4611      	mov	r1, r2
 800db40:	4804      	ldr	r0, [pc, #16]	; (800db54 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800db42:	4798      	blx	r3
}
 800db44:	bf00      	nop
 800db46:	3720      	adds	r7, #32
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	200000a0 	.word	0x200000a0
 800db50:	0800d995 	.word	0x0800d995
 800db54:	0800d95f 	.word	0x0800d95f

0800db58 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800db58:	b590      	push	{r4, r7, lr}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
    return new Utest();
 800db60:	22d3      	movs	r2, #211	; 0xd3
 800db62:	4906      	ldr	r1, [pc, #24]	; (800db7c <_ZN10UtestShell10createTestEv+0x24>)
 800db64:	2004      	movs	r0, #4
 800db66:	f7f9 f92b 	bl	8006dc0 <_ZnwjPKci>
 800db6a:	4604      	mov	r4, r0
 800db6c:	4620      	mov	r0, r4
 800db6e:	f001 fafd 	bl	800f16c <_ZN5UtestC1Ev>
 800db72:	4623      	mov	r3, r4
}
 800db74:	4618      	mov	r0, r3
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd90      	pop	{r4, r7, pc}
 800db7c:	080172a8 	.word	0x080172a8

0800db80 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
    delete test;
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d004      	beq.n	800db9a <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	3204      	adds	r2, #4
 800db94:	6812      	ldr	r2, [r2, #0]
 800db96:	4618      	mov	r0, r3
 800db98:	4790      	blx	r2
}
 800db9a:	bf00      	nop
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
	...

0800dba4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	333c      	adds	r3, #60	; 0x3c
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4940      	ldr	r1, [pc, #256]	; (800dcbc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	3314      	adds	r3, #20
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	68f9      	ldr	r1, [r7, #12]
 800dbca:	68b8      	ldr	r0, [r7, #8]
 800dbcc:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	333c      	adds	r3, #60	; 0x3c
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	493a      	ldr	r1, [pc, #232]	; (800dcc0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800dbdc:	f001 fa9c 	bl	800f118 <_ZN10UtestShell10getCurrentEv>
 800dbe0:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	f001 fa7e 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800dbe8:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800dbea:	6879      	ldr	r1, [r7, #4]
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f001 fa59 	bl	800f0a4 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f001 fa65 	bl	800f0c4 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	333c      	adds	r3, #60	; 0x3c
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4930      	ldr	r1, [pc, #192]	; (800dcc4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	4798      	blx	r3
    Utest* testToRun = createTest();
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3388      	adds	r3, #136	; 0x88
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	4798      	blx	r3
 800dc14:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	333c      	adds	r3, #60	; 0x3c
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	492a      	ldr	r1, [pc, #168]	; (800dcc8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	333c      	adds	r3, #60	; 0x3c
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4927      	ldr	r1, [pc, #156]	; (800dccc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	4798      	blx	r3
    testToRun->run();
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	3308      	adds	r3, #8
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6978      	ldr	r0, [r7, #20]
 800dc3c:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	333c      	adds	r3, #60	; 0x3c
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4922      	ldr	r1, [pc, #136]	; (800dcd0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800dc4c:	69f9      	ldr	r1, [r7, #28]
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f001 fa38 	bl	800f0c4 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800dc54:	69b9      	ldr	r1, [r7, #24]
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f001 fa24 	bl	800f0a4 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	333c      	adds	r3, #60	; 0x3c
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	491b      	ldr	r1, [pc, #108]	; (800dcd4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	4798      	blx	r3
    destroyTest(testToRun);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	338c      	adds	r3, #140	; 0x8c
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6979      	ldr	r1, [r7, #20]
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	333c      	adds	r3, #60	; 0x3c
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4915      	ldr	r1, [pc, #84]	; (800dcd8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	333c      	adds	r3, #60	; 0x3c
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4913      	ldr	r1, [pc, #76]	; (800dcdc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3318      	adds	r3, #24
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	68f9      	ldr	r1, [r7, #12]
 800dca0:	68b8      	ldr	r0, [r7, #8]
 800dca2:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	333c      	adds	r3, #60	; 0x3c
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	490c      	ldr	r1, [pc, #48]	; (800dce0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	4798      	blx	r3
}
 800dcb2:	bf00      	nop
 800dcb4:	3720      	adds	r7, #32
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	080172bc 	.word	0x080172bc
 800dcc0:	080172e0 	.word	0x080172e0
 800dcc4:	08017300 	.word	0x08017300
 800dcc8:	0801731c 	.word	0x0801731c
 800dccc:	08017338 	.word	0x08017338
 800dcd0:	08017354 	.word	0x08017354
 800dcd4:	0801736c 	.word	0x0801736c
 800dcd8:	08017388 	.word	0x08017388
 800dcdc:	080173a4 	.word	0x080173a4
 800dce0:	080173c8 	.word	0x080173c8

0800dce4 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
    return next_;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	695b      	ldr	r3, [r3, #20]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
    next_ = test;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	683a      	ldr	r2, [r7, #0]
 800dd0a:	615a      	str	r2, [r3, #20]
    return this;
 800dd0c:	687b      	ldr	r3, [r7, #4]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	370c      	adds	r7, #12
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	b082      	sub	sp, #8
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d00b      	beq.n	800dd42 <_ZN10UtestShell10countTestsEv+0x28>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	695a      	ldr	r2, [r3, #20]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3310      	adds	r3, #16
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4610      	mov	r0, r2
 800dd3a:	4798      	blx	r3
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	3301      	adds	r3, #1
 800dd40:	e000      	b.n	800dd44 <_ZN10UtestShell10countTestsEv+0x2a>
 800dd42:	2301      	movs	r3, #1
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
    return "TEST";
 800dd56:	4904      	ldr	r1, [pc, #16]	; (800dd68 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f7f9 ff1a 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
}
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	080173ec 	.word	0x080173ec

0800dd6c <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	689b      	ldr	r3, [r3, #8]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7f9 ff08 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
}
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b082      	sub	sp, #8
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
 800dd92:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7f9 fef9 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
}
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	33a0      	adds	r3, #160	; 0xa0
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	4798      	blx	r3
    formattedName += "(";
 800ddc2:	490e      	ldr	r1, [pc, #56]	; (800ddfc <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7fa fb2b 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7fa fb25 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 800ddd6:	490a      	ldr	r1, [pc, #40]	; (800de00 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7fa fb21 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	4619      	mov	r1, r3
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7fa fb1b 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 800ddea:	4906      	ldr	r1, [pc, #24]	; (800de04 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7fa fb17 	bl	8008420 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 800ddf2:	bf00      	nop
}
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	080173f4 	.word	0x080173f4
 800de00:	080173f8 	.word	0x080173f8
 800de04:	080173fc 	.word	0x080173fc

0800de08 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	7e5b      	ldrb	r3, [r3, #25]
}
 800de14:	4618      	mov	r0, r3
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <_ZNK10UtestShell7willRunEv>:
{
    getTestResult()->countCheck();
}

bool UtestShell::willRun() const
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
    return true;
 800de28:	2301      	movs	r3, #1
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 800de36:	b480      	push	{r7}
 800de38:	b083      	sub	sp, #12
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	7e1b      	ldrb	r3, [r3, #24]
}
 800de42:	4618      	mov	r0, r3
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 800de4e:	b480      	push	{r7}
 800de50:	b083      	sub	sp, #12
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2201      	movs	r2, #1
 800de5a:	761a      	strb	r2, [r3, #24]
}
 800de5c:	bf00      	nop
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]

}
 800de70:	bf00      	nop
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	60da      	str	r2, [r3, #12]
}
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	683a      	ldr	r2, [r7, #0]
 800dea6:	611a      	str	r2, [r3, #16]
}
 800dea8:	bf00      	nop
 800deaa:	370c      	adds	r7, #12
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	605a      	str	r2, [r3, #4]
}
 800dec4:	bf00      	nop
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b083      	sub	sp, #12
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
    name_ = testName;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	609a      	str	r2, [r3, #8]
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4619      	mov	r1, r3
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7f9 fe48 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
}
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 800df0a:	b480      	push	{r7}
 800df0c:	b083      	sub	sp, #12
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	691b      	ldr	r3, [r3, #16]
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 800df22:	b590      	push	{r4, r7, lr}
 800df24:	b087      	sub	sp, #28
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	60b9      	str	r1, [r7, #8]
 800df2c:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 800df34:	2301      	movs	r3, #1
 800df36:	e01f      	b.n	800df78 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d01b      	beq.n	800df76 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 800df3e:	f107 0310 	add.w	r3, r7, #16
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	4618      	mov	r0, r3
 800df46:	f7f9 fe24 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800df4a:	f107 0310 	add.w	r3, r7, #16
 800df4e:	4619      	mov	r1, r3
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f004 fa88 	bl	8012466 <_ZNK10TestFilter5matchERK12SimpleString>
 800df56:	4603      	mov	r3, r0
 800df58:	461c      	mov	r4, r3
 800df5a:	f107 0310 	add.w	r3, r7, #16
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fa f9cf 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800df64:	2c00      	cmp	r4, #0
 800df66:	d001      	beq.n	800df6c <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 800df68:	2301      	movs	r3, #1
 800df6a:	e005      	b.n	800df78 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f004 fa54 	bl	801241a <_ZNK10TestFilter7getNextEv>
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	e7e0      	b.n	800df38 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	371c      	adds	r7, #28
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd90      	pop	{r4, r7, pc}

0800df80 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	4619      	mov	r1, r3
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f7ff ffc4 	bl	800df22 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00b      	beq.n	800dfb8 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f7ff ffba 	bl	800df22 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e000      	b.n	800dfba <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 800dfc2:	b590      	push	{r4, r7, lr}
 800dfc4:	b083      	sub	sp, #12
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
 800dfca:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	339c      	adds	r3, #156	; 0x9c
 800dfd2:	681c      	ldr	r4, [r3, #0]
 800dfd4:	f001 f8b0 	bl	800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	461a      	mov	r2, r3
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 800dfe2:	bf00      	nop
 800dfe4:	370c      	adds	r7, #12
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd90      	pop	{r4, r7, pc}

0800dfea <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b084      	sub	sp, #16
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	60f8      	str	r0, [r7, #12]
 800dff2:	60b9      	str	r1, [r7, #8]
 800dff4:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2201      	movs	r2, #1
 800dffa:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	f001 f871 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e002:	4603      	mov	r3, r0
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	3234      	adds	r2, #52	; 0x34
 800e008:	6812      	ldr	r2, [r2, #0]
 800e00a:	68b9      	ldr	r1, [r7, #8]
 800e00c:	4618      	mov	r0, r3
 800e00e:	4790      	blx	r2
    terminator.exitCurrentTest();
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800e01a:	bf00      	nop
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b082      	sub	sp, #8
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
 800e02a:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	6838      	ldr	r0, [r7, #0]
 800e034:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800e036:	bf00      	nop
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e03e:	b590      	push	{r4, r7, lr}
 800e040:	b09d      	sub	sp, #116	; 0x74
 800e042:	af04      	add	r7, sp, #16
 800e044:	60f8      	str	r0, [r7, #12]
 800e046:	607a      	str	r2, [r7, #4]
 800e048:	603b      	str	r3, [r7, #0]
 800e04a:	460b      	mov	r3, r1
 800e04c:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f001 f848 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e054:	4603      	mov	r3, r0
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	3228      	adds	r2, #40	; 0x28
 800e05a:	6812      	ldr	r2, [r2, #0]
 800e05c:	4618      	mov	r0, r3
 800e05e:	4790      	blx	r2
    if (!condition)
 800e060:	7afb      	ldrb	r3, [r7, #11]
 800e062:	f083 0301 	eor.w	r3, r3, #1
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d03f      	beq.n	800e0ec <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	339c      	adds	r3, #156	; 0x9c
 800e072:	681c      	ldr	r4, [r3, #0]
 800e074:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e078:	6879      	ldr	r1, [r7, #4]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7f9 fd89 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e080:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	4618      	mov	r0, r3
 800e088:	f7f9 fd83 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e08c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e090:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e092:	4618      	mov	r0, r3
 800e094:	f7f9 fd7d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e098:	f107 0014 	add.w	r0, r7, #20
 800e09c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e0a0:	9302      	str	r3, [sp, #8]
 800e0a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e0a6:	9301      	str	r3, [sp, #4]
 800e0a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e0b2:	68f9      	ldr	r1, [r7, #12]
 800e0b4:	f7fb ff7c 	bl	8009fb0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e0b8:	f107 0314 	add.w	r3, r7, #20
 800e0bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e0be:	4619      	mov	r1, r3
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	47a0      	blx	r4
 800e0c4:	f107 0314 	add.w	r3, r7, #20
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fc fddf 	bl	800ac8c <_ZN12CheckFailureD1Ev>
 800e0ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fa f915 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e0d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fa f910 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e0e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fa f90b 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800e0ec:	bf00      	nop
 800e0ee:	3764      	adds	r7, #100	; 0x64
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd90      	pop	{r4, r7, pc}

0800e0f4 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e0f4:	b590      	push	{r4, r7, lr}
 800e0f6:	b097      	sub	sp, #92	; 0x5c
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f000 ffee 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e108:	4603      	mov	r3, r0
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	3228      	adds	r2, #40	; 0x28
 800e10e:	6812      	ldr	r2, [r2, #0]
 800e110:	4618      	mov	r0, r3
 800e112:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	339c      	adds	r3, #156	; 0x9c
 800e11a:	681c      	ldr	r4, [r3, #0]
 800e11c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e120:	68b9      	ldr	r1, [r7, #8]
 800e122:	4618      	mov	r0, r3
 800e124:	f7f9 fd35 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e128:	f107 0014 	add.w	r0, r7, #20
 800e12c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	68f9      	ldr	r1, [r7, #12]
 800e138:	f7fb ff82 	bl	800a040 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800e13c:	f107 0314 	add.w	r3, r7, #20
 800e140:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e142:	4619      	mov	r1, r3
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	47a0      	blx	r4
 800e148:	f107 0314 	add.w	r3, r7, #20
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7f9 fa0f 	bl	8007570 <_ZN11FailFailureD1Ev>
 800e152:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e156:	4618      	mov	r0, r3
 800e158:	f7fa f8d3 	bl	8008302 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 800e15c:	bf00      	nop
 800e15e:	3754      	adds	r7, #84	; 0x54
 800e160:	46bd      	mov	sp, r7
 800e162:	bd90      	pop	{r4, r7, pc}

0800e164 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e164:	b590      	push	{r4, r7, lr}
 800e166:	b0a7      	sub	sp, #156	; 0x9c
 800e168:	af04      	add	r7, sp, #16
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f000 ffb6 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e178:	4603      	mov	r3, r0
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	3228      	adds	r2, #40	; 0x28
 800e17e:	6812      	ldr	r2, [r2, #0]
 800e180:	4618      	mov	r0, r3
 800e182:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d102      	bne.n	800e190 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d068      	beq.n	800e262 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d002      	beq.n	800e19c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d12a      	bne.n	800e1f2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	339c      	adds	r3, #156	; 0x9c
 800e1a2:	681c      	ldr	r4, [r3, #0]
 800e1a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e1a8:	6839      	ldr	r1, [r7, #0]
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7f9 fcf1 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e1b0:	f107 0010 	add.w	r0, r7, #16
 800e1b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e1b8:	9302      	str	r3, [sp, #8]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e1ca:	68f9      	ldr	r1, [r7, #12]
 800e1cc:	f7fc f9be 	bl	800a54c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e1d0:	f107 0310 	add.w	r3, r7, #16
 800e1d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e1d8:	4619      	mov	r1, r3
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	47a0      	blx	r4
 800e1de:	f107 0310 	add.w	r3, r7, #16
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fc fcca 	bl	800ab7c <_ZN18StringEqualFailureD1Ev>
 800e1e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fa f888 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 800e1f2:	6879      	ldr	r1, [r7, #4]
 800e1f4:	68b8      	ldr	r0, [r7, #8]
 800e1f6:	f7f9 fb09 	bl	800780c <_ZN12SimpleString6StrCmpEPKcS1_>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	bf14      	ite	ne
 800e200:	2301      	movne	r3, #1
 800e202:	2300      	moveq	r3, #0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	d02c      	beq.n	800e264 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	339c      	adds	r3, #156	; 0x9c
 800e210:	681c      	ldr	r4, [r3, #0]
 800e212:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	4618      	mov	r0, r3
 800e21a:	f7f9 fcba 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e21e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800e222:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e226:	9302      	str	r3, [sp, #8]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	9301      	str	r3, [sp, #4]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e234:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e238:	68f9      	ldr	r1, [r7, #12]
 800e23a:	f7fc f987 	bl	800a54c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e23e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e242:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e246:	4619      	mov	r1, r3
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	47a0      	blx	r4
 800e24c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e250:	4618      	mov	r0, r3
 800e252:	f7fc fc93 	bl	800ab7c <_ZN18StringEqualFailureD1Ev>
 800e256:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fa f851 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e260:	e000      	b.n	800e264 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e262:	bf00      	nop
}
 800e264:	378c      	adds	r7, #140	; 0x8c
 800e266:	46bd      	mov	sp, r7
 800e268:	bd90      	pop	{r4, r7, pc}

0800e26a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e26a:	b590      	push	{r4, r7, lr}
 800e26c:	b0a7      	sub	sp, #156	; 0x9c
 800e26e:	af04      	add	r7, sp, #16
 800e270:	60f8      	str	r0, [r7, #12]
 800e272:	60b9      	str	r1, [r7, #8]
 800e274:	607a      	str	r2, [r7, #4]
 800e276:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 ff33 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e27e:	4603      	mov	r3, r0
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	3228      	adds	r2, #40	; 0x28
 800e284:	6812      	ldr	r2, [r2, #0]
 800e286:	4618      	mov	r0, r3
 800e288:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d102      	bne.n	800e296 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d06b      	beq.n	800e36e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d002      	beq.n	800e2a2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d12b      	bne.n	800e2fa <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	339c      	adds	r3, #156	; 0x9c
 800e2a8:	681c      	ldr	r4, [r3, #0]
 800e2aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e2ae:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f9 fc6d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e2b8:	f107 0010 	add.w	r0, r7, #16
 800e2bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e2c0:	9302      	str	r3, [sp, #8]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e2ce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e2d2:	68f9      	ldr	r1, [r7, #12]
 800e2d4:	f7fc f93a 	bl	800a54c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e2d8:	f107 0310 	add.w	r3, r7, #16
 800e2dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	47a0      	blx	r4
 800e2e6:	f107 0310 	add.w	r3, r7, #16
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fc fc46 	bl	800ab7c <_ZN18StringEqualFailureD1Ev>
 800e2f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fa f804 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	6879      	ldr	r1, [r7, #4]
 800e2fe:	68b8      	ldr	r0, [r7, #8]
 800e300:	f7f9 fac3 	bl	800788a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800e304:	4603      	mov	r3, r0
 800e306:	2b00      	cmp	r3, #0
 800e308:	bf14      	ite	ne
 800e30a:	2301      	movne	r3, #1
 800e30c:	2300      	moveq	r3, #0
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b00      	cmp	r3, #0
 800e312:	d02d      	beq.n	800e370 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	339c      	adds	r3, #156	; 0x9c
 800e31a:	681c      	ldr	r4, [r3, #0]
 800e31c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e320:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e324:	4618      	mov	r0, r3
 800e326:	f7f9 fc34 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e32a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800e32e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e332:	9302      	str	r3, [sp, #8]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	9301      	str	r3, [sp, #4]
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e340:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e344:	68f9      	ldr	r1, [r7, #12]
 800e346:	f7fc f901 	bl	800a54c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e34a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e34e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e352:	4619      	mov	r1, r3
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	47a0      	blx	r4
 800e358:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fc fc0d 	bl	800ab7c <_ZN18StringEqualFailureD1Ev>
 800e362:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e366:	4618      	mov	r0, r3
 800e368:	f7f9 ffcb 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e36c:	e000      	b.n	800e370 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e36e:	bf00      	nop
}
 800e370:	378c      	adds	r7, #140	; 0x8c
 800e372:	46bd      	mov	sp, r7
 800e374:	bd90      	pop	{r4, r7, pc}

0800e376 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800e376:	b590      	push	{r4, r7, lr}
 800e378:	b0ab      	sub	sp, #172	; 0xac
 800e37a:	af04      	add	r7, sp, #16
 800e37c:	60f8      	str	r0, [r7, #12]
 800e37e:	60b9      	str	r1, [r7, #8]
 800e380:	607a      	str	r2, [r7, #4]
 800e382:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f000 fead 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e38a:	4603      	mov	r3, r0
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	3228      	adds	r2, #40	; 0x28
 800e390:	6812      	ldr	r2, [r2, #0]
 800e392:	4618      	mov	r0, r3
 800e394:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d102      	bne.n	800e3a2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d07c      	beq.n	800e49c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d002      	beq.n	800e3ae <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d128      	bne.n	800e400 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3398      	adds	r3, #152	; 0x98
 800e3b4:	681c      	ldr	r4, [r3, #0]
 800e3b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7f9 fbe8 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e3c2:	f107 0010 	add.w	r0, r7, #16
 800e3c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e3ca:	9302      	str	r3, [sp, #8]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	9301      	str	r3, [sp, #4]
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3dc:	68f9      	ldr	r1, [r7, #12]
 800e3de:	f7fc f959 	bl	800a694 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e3e2:	f107 0310 	add.w	r3, r7, #16
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	47a0      	blx	r4
 800e3ec:	f107 0310 	add.w	r3, r7, #16
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fc fba1 	bl	800ab38 <_ZN24StringEqualNoCaseFailureD1Ev>
 800e3f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7f9 ff81 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 800e400:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e404:	68b9      	ldr	r1, [r7, #8]
 800e406:	4618      	mov	r0, r3
 800e408:	f7f9 fbc3 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e40c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	4618      	mov	r0, r3
 800e414:	f7f9 fbbd 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e418:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e41c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e420:	4611      	mov	r1, r2
 800e422:	4618      	mov	r0, r3
 800e424:	f7f9 ff94 	bl	8008350 <_ZNK12SimpleString12equalsNoCaseERKS_>
 800e428:	4603      	mov	r3, r0
 800e42a:	f083 0301 	eor.w	r3, r3, #1
 800e42e:	b2dc      	uxtb	r4, r3
 800e430:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e434:	4618      	mov	r0, r3
 800e436:	f7f9 ff64 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e43a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e43e:	4618      	mov	r0, r3
 800e440:	f7f9 ff5f 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e444:	2c00      	cmp	r4, #0
 800e446:	d02a      	beq.n	800e49e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3398      	adds	r3, #152	; 0x98
 800e44e:	681c      	ldr	r4, [r3, #0]
 800e450:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e454:	6839      	ldr	r1, [r7, #0]
 800e456:	4618      	mov	r0, r3
 800e458:	f7f9 fb9b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e45c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800e460:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e464:	9302      	str	r3, [sp, #8]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e476:	68f9      	ldr	r1, [r7, #12]
 800e478:	f7fc f90c 	bl	800a694 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800e47c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e480:	4619      	mov	r1, r3
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	47a0      	blx	r4
 800e486:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fc fb54 	bl	800ab38 <_ZN24StringEqualNoCaseFailureD1Ev>
 800e490:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e494:	4618      	mov	r0, r3
 800e496:	f7f9 ff34 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e49a:	e000      	b.n	800e49e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e49c:	bf00      	nop
}
 800e49e:	379c      	adds	r7, #156	; 0x9c
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd90      	pop	{r4, r7, pc}

0800e4a4 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800e4a4:	b590      	push	{r4, r7, lr}
 800e4a6:	b0b3      	sub	sp, #204	; 0xcc
 800e4a8:	af04      	add	r7, sp, #16
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
 800e4b0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 fe16 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	3228      	adds	r2, #40	; 0x28
 800e4be:	6812      	ldr	r2, [r2, #0]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d103      	bne.n	800e4d2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f000 80ad 	beq.w	800e62c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d140      	bne.n	800e560 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	3398      	adds	r3, #152	; 0x98
 800e4e4:	681c      	ldr	r4, [r3, #0]
 800e4e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e4ea:	68b9      	ldr	r1, [r7, #8]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7f9 fb50 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e4f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e4f6:	6879      	ldr	r1, [r7, #4]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7f9 fb4a 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e4fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	4618      	mov	r0, r3
 800e506:	f7f9 fb44 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e50a:	f107 0010 	add.w	r0, r7, #16
 800e50e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e512:	9302      	str	r3, [sp, #8]
 800e514:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e524:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e528:	68f9      	ldr	r1, [r7, #12]
 800e52a:	f7fb fcf7 	bl	8009f1c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e52e:	f107 0310 	add.w	r3, r7, #16
 800e532:	4619      	mov	r1, r3
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	47a0      	blx	r4
 800e538:	f107 0310 	add.w	r3, r7, #16
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7fc fbc7 	bl	800acd0 <_ZN15ContainsFailureD1Ev>
 800e542:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e546:	4618      	mov	r0, r3
 800e548:	f7f9 fedb 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e54c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e550:	4618      	mov	r0, r3
 800e552:	f7f9 fed6 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e556:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7f9 fed1 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 800e560:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	4618      	mov	r0, r3
 800e568:	f7f9 fb13 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e56c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e570:	68b9      	ldr	r1, [r7, #8]
 800e572:	4618      	mov	r0, r3
 800e574:	f7f9 fb0d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e578:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e57c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f7f9 fb83 	bl	8007c8e <_ZNK12SimpleString8containsERKS_>
 800e588:	4603      	mov	r3, r0
 800e58a:	f083 0301 	eor.w	r3, r3, #1
 800e58e:	b2dc      	uxtb	r4, r3
 800e590:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e594:	4618      	mov	r0, r3
 800e596:	f7f9 feb4 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e59a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7f9 feaf 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e5a4:	2c00      	cmp	r4, #0
 800e5a6:	d042      	beq.n	800e62e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3398      	adds	r3, #152	; 0x98
 800e5ae:	681c      	ldr	r4, [r3, #0]
 800e5b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7f9 faeb 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e5bc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e5c0:	6879      	ldr	r1, [r7, #4]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f9 fae5 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e5c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7f9 fadf 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e5d4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e5d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e5dc:	9302      	str	r3, [sp, #8]
 800e5de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e5e2:	9301      	str	r3, [sp, #4]
 800e5e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e5e8:	9300      	str	r3, [sp, #0]
 800e5ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e5ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e5f2:	68f9      	ldr	r1, [r7, #12]
 800e5f4:	f7fb fc92 	bl	8009f1c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e5f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	47a0      	blx	r4
 800e602:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e606:	4618      	mov	r0, r3
 800e608:	f7fc fb62 	bl	800acd0 <_ZN15ContainsFailureD1Ev>
 800e60c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e610:	4618      	mov	r0, r3
 800e612:	f7f9 fe76 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e616:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7f9 fe71 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e620:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e624:	4618      	mov	r0, r3
 800e626:	f7f9 fe6c 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e62a:	e000      	b.n	800e62e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e62c:	bf00      	nop
}
 800e62e:	37bc      	adds	r7, #188	; 0xbc
 800e630:	46bd      	mov	sp, r7
 800e632:	bd90      	pop	{r4, r7, pc}

0800e634 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800e634:	b590      	push	{r4, r7, lr}
 800e636:	b0b3      	sub	sp, #204	; 0xcc
 800e638:	af04      	add	r7, sp, #16
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f000 fd4e 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e648:	4603      	mov	r3, r0
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	3228      	adds	r2, #40	; 0x28
 800e64e:	6812      	ldr	r2, [r2, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d103      	bne.n	800e662 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 80ad 	beq.w	800e7bc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d002      	beq.n	800e66e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d140      	bne.n	800e6f0 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	3398      	adds	r3, #152	; 0x98
 800e674:	681c      	ldr	r4, [r3, #0]
 800e676:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e67a:	68b9      	ldr	r1, [r7, #8]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7f9 fa88 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e682:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e686:	6879      	ldr	r1, [r7, #4]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7f9 fa82 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e68e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e692:	6839      	ldr	r1, [r7, #0]
 800e694:	4618      	mov	r0, r3
 800e696:	f7f9 fa7c 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e69a:	f107 0010 	add.w	r0, r7, #16
 800e69e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e6a2:	9302      	str	r3, [sp, #8]
 800e6a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e6a8:	9301      	str	r3, [sp, #4]
 800e6aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e6b4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e6b8:	68f9      	ldr	r1, [r7, #12]
 800e6ba:	f7fb fc2f 	bl	8009f1c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e6be:	f107 0310 	add.w	r3, r7, #16
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	47a0      	blx	r4
 800e6c8:	f107 0310 	add.w	r3, r7, #16
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fc faff 	bl	800acd0 <_ZN15ContainsFailureD1Ev>
 800e6d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7f9 fe13 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e6dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7f9 fe0e 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e6e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7f9 fe09 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 800e6f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e6f4:	6879      	ldr	r1, [r7, #4]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7f9 fa4b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e6fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e700:	68b9      	ldr	r1, [r7, #8]
 800e702:	4618      	mov	r0, r3
 800e704:	f7f9 fa45 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e708:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e70c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e710:	4611      	mov	r1, r2
 800e712:	4618      	mov	r0, r3
 800e714:	f7f9 fad6 	bl	8007cc4 <_ZNK12SimpleString14containsNoCaseERKS_>
 800e718:	4603      	mov	r3, r0
 800e71a:	f083 0301 	eor.w	r3, r3, #1
 800e71e:	b2dc      	uxtb	r4, r3
 800e720:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e724:	4618      	mov	r0, r3
 800e726:	f7f9 fdec 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e72a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e72e:	4618      	mov	r0, r3
 800e730:	f7f9 fde7 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e734:	2c00      	cmp	r4, #0
 800e736:	d042      	beq.n	800e7be <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3398      	adds	r3, #152	; 0x98
 800e73e:	681c      	ldr	r4, [r3, #0]
 800e740:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e744:	68b9      	ldr	r1, [r7, #8]
 800e746:	4618      	mov	r0, r3
 800e748:	f7f9 fa23 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e74c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e750:	6879      	ldr	r1, [r7, #4]
 800e752:	4618      	mov	r0, r3
 800e754:	f7f9 fa1d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e758:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	4618      	mov	r0, r3
 800e760:	f7f9 fa17 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e764:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e768:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e76c:	9302      	str	r3, [sp, #8]
 800e76e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e77e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e782:	68f9      	ldr	r1, [r7, #12]
 800e784:	f7fb fbca 	bl	8009f1c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e78c:	4619      	mov	r1, r3
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	47a0      	blx	r4
 800e792:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e796:	4618      	mov	r0, r3
 800e798:	f7fc fa9a 	bl	800acd0 <_ZN15ContainsFailureD1Ev>
 800e79c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7f9 fdae 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e7a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7f9 fda9 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e7b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f9 fda4 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e7ba:	e000      	b.n	800e7be <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e7bc:	bf00      	nop
}
 800e7be:	37bc      	adds	r7, #188	; 0xbc
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd90      	pop	{r4, r7, pc}

0800e7c4 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e7c4:	b590      	push	{r4, r7, lr}
 800e7c6:	b099      	sub	sp, #100	; 0x64
 800e7c8:	af04      	add	r7, sp, #16
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f000 fc86 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	3228      	adds	r2, #40	; 0x28
 800e7de:	6812      	ldr	r2, [r2, #0]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	4790      	blx	r2
    if (expected != actual)
 800e7e4:	68ba      	ldr	r2, [r7, #8]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d027      	beq.n	800e83c <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	339c      	adds	r3, #156	; 0x9c
 800e7f2:	681c      	ldr	r4, [r3, #0]
 800e7f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e7f8:	6839      	ldr	r1, [r7, #0]
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7f9 f9c9 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e800:	f107 0014 	add.w	r0, r7, #20
 800e804:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e808:	9302      	str	r3, [sp, #8]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	9301      	str	r3, [sp, #4]
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e816:	68f9      	ldr	r1, [r7, #12]
 800e818:	f7fb fc30 	bl	800a07c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 800e81c:	f107 0314 	add.w	r3, r7, #20
 800e820:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e822:	4619      	mov	r1, r3
 800e824:	68f8      	ldr	r0, [r7, #12]
 800e826:	47a0      	blx	r4
 800e828:	f107 0314 	add.w	r3, r7, #20
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fc fa0b 	bl	800ac48 <_ZN17LongsEqualFailureD1Ev>
 800e832:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e836:	4618      	mov	r0, r3
 800e838:	f7f9 fd63 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800e83c:	bf00      	nop
 800e83e:	3754      	adds	r7, #84	; 0x54
 800e840:	46bd      	mov	sp, r7
 800e842:	bd90      	pop	{r4, r7, pc}

0800e844 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e844:	b590      	push	{r4, r7, lr}
 800e846:	b099      	sub	sp, #100	; 0x64
 800e848:	af04      	add	r7, sp, #16
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e852:	68f8      	ldr	r0, [r7, #12]
 800e854:	f000 fc46 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e858:	4603      	mov	r3, r0
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	3228      	adds	r2, #40	; 0x28
 800e85e:	6812      	ldr	r2, [r2, #0]
 800e860:	4618      	mov	r0, r3
 800e862:	4790      	blx	r2
    if (expected != actual)
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d027      	beq.n	800e8bc <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	339c      	adds	r3, #156	; 0x9c
 800e872:	681c      	ldr	r4, [r3, #0]
 800e874:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e878:	6839      	ldr	r1, [r7, #0]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7f9 f989 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e880:	f107 0014 	add.w	r0, r7, #20
 800e884:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e888:	9302      	str	r3, [sp, #8]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	9301      	str	r3, [sp, #4]
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	9300      	str	r3, [sp, #0]
 800e892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e896:	68f9      	ldr	r1, [r7, #12]
 800e898:	f7fb fcbc 	bl	800a214 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 800e89c:	f107 0314 	add.w	r3, r7, #20
 800e8a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	68f8      	ldr	r0, [r7, #12]
 800e8a6:	47a0      	blx	r4
 800e8a8:	f107 0314 	add.w	r3, r7, #20
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7fc f9a9 	bl	800ac04 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800e8b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7f9 fd23 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800e8bc:	bf00      	nop
 800e8be:	3754      	adds	r7, #84	; 0x54
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd90      	pop	{r4, r7, pc}

0800e8c4 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e8c4:	b082      	sub	sp, #8
 800e8c6:	b590      	push	{r4, r7, lr}
 800e8c8:	b099      	sub	sp, #100	; 0x64
 800e8ca:	af02      	add	r7, sp, #8
 800e8cc:	60f8      	str	r0, [r7, #12]
 800e8ce:	1d38      	adds	r0, r7, #4
 800e8d0:	e880 0006 	stmia.w	r0, {r1, r2}
 800e8d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f000 fc04 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	3228      	adds	r2, #40	; 0x28
 800e8e2:	6812      	ldr	r2, [r2, #0]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	339c      	adds	r3, #156	; 0x9c
 800e8ee:	681c      	ldr	r4, [r3, #0]
 800e8f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e8f4:	4919      	ldr	r1, [pc, #100]	; (800e95c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7f9 f94b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e8fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e900:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e902:	4618      	mov	r0, r3
 800e904:	f7f9 f945 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e908:	f107 0014 	add.w	r0, r7, #20
 800e90c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e910:	9301      	str	r3, [sp, #4]
 800e912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e91a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e91c:	68f9      	ldr	r1, [r7, #12]
 800e91e:	f7fc f85f 	bl	800a9e0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800e922:	f107 0314 	add.w	r3, r7, #20
 800e926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e92a:	4619      	mov	r1, r3
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	47a0      	blx	r4
 800e930:	f107 0314 	add.w	r3, r7, #20
 800e934:	4618      	mov	r0, r3
 800e936:	f7fc f899 	bl	800aa6c <_ZN25FeatureUnsupportedFailureD1Ev>
 800e93a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e93e:	4618      	mov	r0, r3
 800e940:	f7f9 fcdf 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e948:	4618      	mov	r0, r3
 800e94a:	f7f9 fcda 	bl	8008302 <_ZN12SimpleStringD1Ev>
#endif
}
 800e94e:	bf00      	nop
 800e950:	375c      	adds	r7, #92	; 0x5c
 800e952:	46bd      	mov	sp, r7
 800e954:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e958:	b002      	add	sp, #8
 800e95a:	4770      	bx	lr
 800e95c:	08017400 	.word	0x08017400

0800e960 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e960:	b082      	sub	sp, #8
 800e962:	b590      	push	{r4, r7, lr}
 800e964:	b099      	sub	sp, #100	; 0x64
 800e966:	af02      	add	r7, sp, #8
 800e968:	60f8      	str	r0, [r7, #12]
 800e96a:	1d38      	adds	r0, r7, #4
 800e96c:	e880 0006 	stmia.w	r0, {r1, r2}
 800e970:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f000 fbb6 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800e978:	4603      	mov	r3, r0
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	3228      	adds	r2, #40	; 0x28
 800e97e:	6812      	ldr	r2, [r2, #0]
 800e980:	4618      	mov	r0, r3
 800e982:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	339c      	adds	r3, #156	; 0x9c
 800e98a:	681c      	ldr	r4, [r3, #0]
 800e98c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e990:	4919      	ldr	r1, [pc, #100]	; (800e9f8 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 800e992:	4618      	mov	r0, r3
 800e994:	f7f9 f8fd 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e998:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e99c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7f9 f8f7 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800e9a4:	f107 0014 	add.w	r0, r7, #20
 800e9a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e9ac:	9301      	str	r3, [sp, #4]
 800e9ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e9b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e9b8:	68f9      	ldr	r1, [r7, #12]
 800e9ba:	f7fc f811 	bl	800a9e0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800e9be:	f107 0314 	add.w	r3, r7, #20
 800e9c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	47a0      	blx	r4
 800e9cc:	f107 0314 	add.w	r3, r7, #20
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7fc f84b 	bl	800aa6c <_ZN25FeatureUnsupportedFailureD1Ev>
 800e9d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7f9 fc91 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800e9e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7f9 fc8c 	bl	8008302 <_ZN12SimpleStringD1Ev>
#endif
}
 800e9ea:	bf00      	nop
 800e9ec:	375c      	adds	r7, #92	; 0x5c
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e9f4:	b002      	add	sp, #8
 800e9f6:	4770      	bx	lr
 800e9f8:	08017400 	.word	0x08017400

0800e9fc <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e9fc:	b590      	push	{r4, r7, lr}
 800e9fe:	b099      	sub	sp, #100	; 0x64
 800ea00:	af04      	add	r7, sp, #16
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	607b      	str	r3, [r7, #4]
 800ea06:	460b      	mov	r3, r1
 800ea08:	72fb      	strb	r3, [r7, #11]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f000 fb68 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800ea14:	4603      	mov	r3, r0
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	3228      	adds	r2, #40	; 0x28
 800ea1a:	6812      	ldr	r2, [r2, #0]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	4790      	blx	r2
    if (expected != actual)
 800ea20:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ea24:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d029      	beq.n	800ea80 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	339c      	adds	r3, #156	; 0x9c
 800ea32:	681c      	ldr	r4, [r3, #0]
 800ea34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ea38:	6879      	ldr	r1, [r7, #4]
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7f9 f8a9 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ea40:	f107 0014 	add.w	r0, r7, #20
 800ea44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ea48:	9302      	str	r3, [sp, #8]
 800ea4a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800ea4e:	9301      	str	r3, [sp, #4]
 800ea50:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea5a:	68f9      	ldr	r1, [r7, #12]
 800ea5c:	f7fb fca6 	bl	800a3ac <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 800ea60:	f107 0314 	add.w	r3, r7, #20
 800ea64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ea66:	4619      	mov	r1, r3
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	47a0      	blx	r4
 800ea6c:	f107 0314 	add.w	r3, r7, #20
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fc f8a5 	bl	800abc0 <_ZN23SignedBytesEqualFailureD1Ev>
 800ea76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7f9 fc41 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800ea80:	bf00      	nop
 800ea82:	3754      	adds	r7, #84	; 0x54
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd90      	pop	{r4, r7, pc}

0800ea88 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b09d      	sub	sp, #116	; 0x74
 800ea8c:	af04      	add	r7, sp, #16
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	607a      	str	r2, [r7, #4]
 800ea94:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f000 fb24 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	3228      	adds	r2, #40	; 0x28
 800eaa2:	6812      	ldr	r2, [r2, #0]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	4790      	blx	r2
    if (expected != actual)
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d03f      	beq.n	800eb30 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	339c      	adds	r3, #156	; 0x9c
 800eab6:	681c      	ldr	r4, [r3, #0]
 800eab8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eabc:	68b9      	ldr	r1, [r7, #8]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7f9 feec 	bl	800889c <_Z10StringFromPKv>
 800eac4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eac8:	6879      	ldr	r1, [r7, #4]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f9 fee6 	bl	800889c <_Z10StringFromPKv>
 800ead0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ead4:	6839      	ldr	r1, [r7, #0]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7f9 f85b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800eadc:	f107 0014 	add.w	r0, r7, #20
 800eae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eae4:	9302      	str	r3, [sp, #8]
 800eae6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eaea:	9301      	str	r3, [sp, #4]
 800eaec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eaf4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eaf6:	68f9      	ldr	r1, [r7, #12]
 800eaf8:	f7fb f826 	bl	8009b48 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800eafc:	f107 0314 	add.w	r3, r7, #20
 800eb00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eb02:	4619      	mov	r1, r3
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	47a0      	blx	r4
 800eb08:	f107 0314 	add.w	r3, r7, #20
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fc f967 	bl	800ade0 <_ZN13EqualsFailureD1Ev>
 800eb12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7f9 fbf3 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800eb1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f9 fbee 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800eb26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7f9 fbe9 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800eb30:	bf00      	nop
 800eb32:	3764      	adds	r7, #100	; 0x64
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd90      	pop	{r4, r7, pc}

0800eb38 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800eb38:	b590      	push	{r4, r7, lr}
 800eb3a:	b09d      	sub	sp, #116	; 0x74
 800eb3c:	af04      	add	r7, sp, #16
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
 800eb44:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f000 facc 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	3228      	adds	r2, #40	; 0x28
 800eb52:	6812      	ldr	r2, [r2, #0]
 800eb54:	4618      	mov	r0, r3
 800eb56:	4790      	blx	r2
    if (expected != actual)
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d03f      	beq.n	800ebe0 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	339c      	adds	r3, #156	; 0x9c
 800eb66:	681c      	ldr	r4, [r3, #0]
 800eb68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eb6c:	68b9      	ldr	r1, [r7, #8]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7f9 febe 	bl	80088f0 <_Z10StringFromPFvvE>
 800eb74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eb78:	6879      	ldr	r1, [r7, #4]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7f9 feb8 	bl	80088f0 <_Z10StringFromPFvvE>
 800eb80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7f9 f803 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800eb8c:	f107 0014 	add.w	r0, r7, #20
 800eb90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eb94:	9302      	str	r3, [sp, #8]
 800eb96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eba4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eba6:	68f9      	ldr	r1, [r7, #12]
 800eba8:	f7fa ffce 	bl	8009b48 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ebac:	f107 0314 	add.w	r3, r7, #20
 800ebb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	68f8      	ldr	r0, [r7, #12]
 800ebb6:	47a0      	blx	r4
 800ebb8:	f107 0314 	add.w	r3, r7, #20
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7fc f90f 	bl	800ade0 <_ZN13EqualsFailureD1Ev>
 800ebc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f9 fb9b 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ebcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7f9 fb96 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ebd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f9 fb91 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800ebe0:	bf00      	nop
 800ebe2:	3764      	adds	r7, #100	; 0x64
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd90      	pop	{r4, r7, pc}

0800ebe8 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800ebe8:	b590      	push	{r4, r7, lr}
 800ebea:	b09d      	sub	sp, #116	; 0x74
 800ebec:	af02      	add	r7, sp, #8
 800ebee:	6278      	str	r0, [r7, #36]	; 0x24
 800ebf0:	ed87 0b06 	vstr	d0, [r7, #24]
 800ebf4:	ed87 1b04 	vstr	d1, [r7, #16]
 800ebf8:	ed87 2b02 	vstr	d2, [r7, #8]
 800ebfc:	6239      	str	r1, [r7, #32]
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ec02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec04:	f000 fa6e 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	3228      	adds	r2, #40	; 0x28
 800ec0e:	6812      	ldr	r2, [r2, #0]
 800ec10:	4618      	mov	r0, r3
 800ec12:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 800ec14:	ed97 2b02 	vldr	d2, [r7, #8]
 800ec18:	ed97 1b04 	vldr	d1, [r7, #16]
 800ec1c:	ed97 0b06 	vldr	d0, [r7, #24]
 800ec20:	f7fe fd5c 	bl	800d6dc <_Z13doubles_equalddd>
 800ec24:	4603      	mov	r3, r0
 800ec26:	f083 0301 	eor.w	r3, r3, #1
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d029      	beq.n	800ec84 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 800ec30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	339c      	adds	r3, #156	; 0x9c
 800ec36:	681c      	ldr	r4, [r3, #0]
 800ec38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ec3c:	6a39      	ldr	r1, [r7, #32]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7f8 ffa7 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ec44:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800ec48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ec4c:	9300      	str	r3, [sp, #0]
 800ec4e:	ed97 2b02 	vldr	d2, [r7, #8]
 800ec52:	ed97 1b04 	vldr	d1, [r7, #16]
 800ec56:	ed97 0b06 	vldr	d0, [r7, #24]
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec60:	f7fa ffb4 	bl	8009bcc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 800ec64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec6e:	47a0      	blx	r4
 800ec70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fc f891 	bl	800ad9c <_ZN19DoublesEqualFailureD1Ev>
 800ec7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7f9 fb3f 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800ec84:	bf00      	nop
 800ec86:	376c      	adds	r7, #108	; 0x6c
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd90      	pop	{r4, r7, pc}

0800ec8c <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800ec8c:	b590      	push	{r4, r7, lr}
 800ec8e:	b0a7      	sub	sp, #156	; 0x9c
 800ec90:	af04      	add	r7, sp, #16
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
 800ec98:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f000 fa22 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800eca0:	4603      	mov	r3, r0
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	3228      	adds	r2, #40	; 0x28
 800eca6:	6812      	ldr	r2, [r2, #0]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	4790      	blx	r2
	if (length == 0) return;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d075      	beq.n	800ed9e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d071      	beq.n	800eda2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d12d      	bne.n	800ed26 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	339c      	adds	r3, #156	; 0x9c
 800ecd0:	681c      	ldr	r4, [r3, #0]
 800ecd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ecd6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7f8 ff59 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ece0:	f107 0010 	add.w	r0, r7, #16
 800ece4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ece8:	9303      	str	r3, [sp, #12]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	9302      	str	r3, [sp, #8]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	9301      	str	r3, [sp, #4]
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	9300      	str	r3, [sp, #0]
 800ecf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ecfa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ecfe:	68f9      	ldr	r1, [r7, #12]
 800ed00:	f7fb fd82 	bl	800a808 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800ed04:	f107 0310 	add.w	r3, r7, #16
 800ed08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	47a0      	blx	r4
 800ed12:	f107 0310 	add.w	r3, r7, #16
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fb feec 	bl	800aaf4 <_ZN18BinaryEqualFailureD1Ev>
 800ed1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7f9 faee 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	6879      	ldr	r1, [r7, #4]
 800ed2a:	68b8      	ldr	r0, [r7, #8]
 800ed2c:	f7f8 fe50 	bl	80079d0 <_ZN12SimpleString6MemCmpEPKvS1_j>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	bf14      	ite	ne
 800ed36:	2301      	movne	r3, #1
 800ed38:	2300      	moveq	r3, #0
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d031      	beq.n	800eda4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	339c      	adds	r3, #156	; 0x9c
 800ed46:	681c      	ldr	r4, [r3, #0]
 800ed48:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ed4c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7f8 ff1e 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ed56:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800ed5a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ed5e:	9303      	str	r3, [sp, #12]
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	9302      	str	r3, [sp, #8]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	9301      	str	r3, [sp, #4]
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ed70:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ed74:	68f9      	ldr	r1, [r7, #12]
 800ed76:	f7fb fd47 	bl	800a808 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800ed7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed7e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ed82:	4619      	mov	r1, r3
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	47a0      	blx	r4
 800ed88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fb feb1 	bl	800aaf4 <_ZN18BinaryEqualFailureD1Ev>
 800ed92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7f9 fab3 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ed9c:	e002      	b.n	800eda4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 800ed9e:	bf00      	nop
 800eda0:	e000      	b.n	800eda4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800eda2:	bf00      	nop
}
 800eda4:	378c      	adds	r7, #140	; 0x8c
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd90      	pop	{r4, r7, pc}

0800edaa <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800edaa:	b590      	push	{r4, r7, lr}
 800edac:	b09b      	sub	sp, #108	; 0x6c
 800edae:	af06      	add	r7, sp, #24
 800edb0:	60f8      	str	r0, [r7, #12]
 800edb2:	60b9      	str	r1, [r7, #8]
 800edb4:	607a      	str	r2, [r7, #4]
 800edb6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f000 f993 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800edbe:	4603      	mov	r3, r0
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	3228      	adds	r2, #40	; 0x28
 800edc4:	6812      	ldr	r2, [r2, #0]
 800edc6:	4618      	mov	r0, r3
 800edc8:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 800edca:	68ba      	ldr	r2, [r7, #8]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	405a      	eors	r2, r3
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	4013      	ands	r3, r2
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d02b      	beq.n	800ee30 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	339c      	adds	r3, #156	; 0x9c
 800edde:	681c      	ldr	r4, [r3, #0]
 800ede0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ede4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7f8 fed3 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800edec:	f107 0014 	add.w	r0, r7, #20
 800edf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edf4:	9304      	str	r3, [sp, #16]
 800edf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edf8:	9303      	str	r3, [sp, #12]
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	9302      	str	r3, [sp, #8]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	9301      	str	r3, [sp, #4]
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee0a:	68f9      	ldr	r1, [r7, #12]
 800ee0c:	f7fb fd8c 	bl	800a928 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 800ee10:	f107 0314 	add.w	r3, r7, #20
 800ee14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee16:	4619      	mov	r1, r3
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	47a0      	blx	r4
 800ee1c:	f107 0314 	add.w	r3, r7, #20
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fb fe45 	bl	800aab0 <_ZN16BitsEqualFailureD1Ev>
 800ee26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7f9 fa69 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800ee30:	bf00      	nop
 800ee32:	3754      	adds	r7, #84	; 0x54
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd90      	pop	{r4, r7, pc}

0800ee38 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 800ee38:	b590      	push	{r4, r7, lr}
 800ee3a:	b09d      	sub	sp, #116	; 0x74
 800ee3c:	af04      	add	r7, sp, #16
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	607a      	str	r2, [r7, #4]
 800ee42:	603b      	str	r3, [r7, #0]
 800ee44:	460b      	mov	r3, r1
 800ee46:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f000 f94b 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	3228      	adds	r2, #40	; 0x28
 800ee54:	6812      	ldr	r2, [r2, #0]
 800ee56:	4618      	mov	r0, r3
 800ee58:	4790      	blx	r2
    if (failed)
 800ee5a:	7afb      	ldrb	r3, [r7, #11]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d03f      	beq.n	800eee0 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	339c      	adds	r3, #156	; 0x9c
 800ee66:	681c      	ldr	r4, [r3, #0]
 800ee68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ee6c:	6879      	ldr	r1, [r7, #4]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7f8 fe8f 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ee74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ee78:	6839      	ldr	r1, [r7, #0]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7f8 fe89 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ee80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee84:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7f8 fe83 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ee8c:	f107 0014 	add.w	r0, r7, #20
 800ee90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ee94:	9302      	str	r3, [sp, #8]
 800ee96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ee9a:	9301      	str	r3, [sp, #4]
 800ee9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eea4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800eea6:	68f9      	ldr	r1, [r7, #12]
 800eea8:	f7fa ff42 	bl	8009d30 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800eeac:	f107 0314 	add.w	r3, r7, #20
 800eeb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	68f8      	ldr	r0, [r7, #12]
 800eeb6:	47a0      	blx	r4
 800eeb8:	f107 0314 	add.w	r3, r7, #20
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fb ff4b 	bl	800ad58 <_ZN17CheckEqualFailureD1Ev>
 800eec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7f9 fa1b 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800eecc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7f9 fa16 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800eed6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7f9 fa11 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800eee0:	bf00      	nop
 800eee2:	3764      	adds	r7, #100	; 0x64
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd90      	pop	{r4, r7, pc}

0800eee8 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 800eee8:	b590      	push	{r4, r7, lr}
 800eeea:	b09d      	sub	sp, #116	; 0x74
 800eeec:	af04      	add	r7, sp, #16
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	607a      	str	r2, [r7, #4]
 800eef2:	603b      	str	r3, [r7, #0]
 800eef4:	460b      	mov	r3, r1
 800eef6:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f000 f8f3 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800eefe:	4603      	mov	r3, r0
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	3228      	adds	r2, #40	; 0x28
 800ef04:	6812      	ldr	r2, [r2, #0]
 800ef06:	4618      	mov	r0, r3
 800ef08:	4790      	blx	r2
    if (!comparison)
 800ef0a:	7afb      	ldrb	r3, [r7, #11]
 800ef0c:	f083 0301 	eor.w	r3, r3, #1
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d03f      	beq.n	800ef96 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	339c      	adds	r3, #156	; 0x9c
 800ef1c:	681c      	ldr	r4, [r3, #0]
 800ef1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef22:	6879      	ldr	r1, [r7, #4]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7f8 fe34 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ef2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7f8 fe2e 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ef36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef3a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7f8 fe28 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ef42:	f107 0014 	add.w	r0, r7, #20
 800ef46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef4a:	9302      	str	r3, [sp, #8]
 800ef4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ef50:	9301      	str	r3, [sp, #4]
 800ef52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ef5c:	68f9      	ldr	r1, [r7, #12]
 800ef5e:	f7fa ff95 	bl	8009e8c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ef62:	f107 0314 	add.w	r3, r7, #20
 800ef66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ef68:	4619      	mov	r1, r3
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	47a0      	blx	r4
 800ef6e:	f107 0314 	add.w	r3, r7, #20
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7fb fece 	bl	800ad14 <_ZN17ComparisonFailureD1Ev>
 800ef78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7f9 f9c0 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ef82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7f9 f9bb 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ef8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7f9 f9b6 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800ef96:	bf00      	nop
 800ef98:	3764      	adds	r7, #100	; 0x64
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd90      	pop	{r4, r7, pc}
	...

0800efa0 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 800efa0:	b5b0      	push	{r4, r5, r7, lr}
 800efa2:	b088      	sub	sp, #32
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	607a      	str	r2, [r7, #4]
 800efac:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 800efae:	f107 0310 	add.w	r3, r7, #16
 800efb2:	4924      	ldr	r1, [pc, #144]	; (800f044 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7f8 fdec 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 800efba:	f107 0310 	add.w	r3, r7, #16
 800efbe:	6879      	ldr	r1, [r7, #4]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7f9 fa2d 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 800efc6:	f107 0310 	add.w	r3, r7, #16
 800efca:	491f      	ldr	r1, [pc, #124]	; (800f048 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 800efcc:	4618      	mov	r0, r3
 800efce:	f7f9 fa27 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 800efd2:	f107 0318 	add.w	r3, r7, #24
 800efd6:	6839      	ldr	r1, [r7, #0]
 800efd8:	4618      	mov	r0, r3
 800efda:	f7f9 fe47 	bl	8008c6c <_Z10StringFromj>
 800efde:	f107 0218 	add.w	r2, r7, #24
 800efe2:	f107 0310 	add.w	r3, r7, #16
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f7f9 fa07 	bl	80083fc <_ZN12SimpleStringpLERKS_>
 800efee:	f107 0318 	add.w	r3, r7, #24
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7f9 f985 	bl	8008302 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 800eff8:	f107 0310 	add.w	r3, r7, #16
 800effc:	4913      	ldr	r1, [pc, #76]	; (800f04c <_ZN10UtestShell5printEPKcS1_j+0xac>)
 800effe:	4618      	mov	r0, r3
 800f000:	f7f9 fa0e 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 800f004:	f107 0310 	add.w	r3, r7, #16
 800f008:	68b9      	ldr	r1, [r7, #8]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f9 fa08 	bl	8008420 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f000 f867 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800f016:	4604      	mov	r4, r0
 800f018:	6823      	ldr	r3, [r4, #0]
 800f01a:	3338      	adds	r3, #56	; 0x38
 800f01c:	681d      	ldr	r5, [r3, #0]
 800f01e:	f107 0310 	add.w	r3, r7, #16
 800f022:	4618      	mov	r0, r3
 800f024:	f7f9 f940 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800f028:	4603      	mov	r3, r0
 800f02a:	4619      	mov	r1, r3
 800f02c:	4620      	mov	r0, r4
 800f02e:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 800f030:	f107 0310 	add.w	r3, r7, #16
 800f034:	4618      	mov	r0, r3
 800f036:	f7f9 f964 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800f03a:	bf00      	nop
 800f03c:	3720      	adds	r7, #32
 800f03e:	46bd      	mov	sp, r7
 800f040:	bdb0      	pop	{r4, r5, r7, pc}
 800f042:	bf00      	nop
 800f044:	08017418 	.word	0x08017418
 800f048:	0801741c 	.word	0x0801741c
 800f04c:	08017420 	.word	0x08017420

0800f050 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 800f050:	b590      	push	{r4, r7, lr}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
 800f05c:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	3370      	adds	r3, #112	; 0x70
 800f064:	681c      	ldr	r4, [r3, #0]
 800f066:	68b8      	ldr	r0, [r7, #8]
 800f068:	f7f9 f91e 	bl	80082a8 <_ZNK12SimpleString12asCharStringEv>
 800f06c:	4601      	mov	r1, r0
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	47a0      	blx	r4
}
 800f076:	bf00      	nop
 800f078:	3714      	adds	r7, #20
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd90      	pop	{r4, r7, pc}

0800f07e <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b082      	sub	sp, #8
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f000 f82b 	bl	800f0e4 <_ZN10UtestShell13getTestResultEv>
 800f08e:	4603      	mov	r3, r0
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	323c      	adds	r2, #60	; 0x3c
 800f094:	6812      	ldr	r2, [r2, #0]
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	4618      	mov	r0, r3
 800f09a:	4790      	blx	r2
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 800f0ae:	4a04      	ldr	r2, [pc, #16]	; (800f0c0 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	6013      	str	r3, [r2, #0]
}
 800f0b4:	bf00      	nop
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	200007fc 	.word	0x200007fc

0800f0c4 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 800f0ce:	4a04      	ldr	r2, [pc, #16]	; (800f0e0 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	6013      	str	r3, [r2, #0]
}
 800f0d4:	bf00      	nop
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	20000800 	.word	0x20000800

0800f0e4 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 800f0ec:	4b09      	ldr	r3, [pc, #36]	; (800f114 <_ZN10UtestShell13getTestResultEv+0x30>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d109      	bne.n	800f108 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 800f0f4:	f7fe fbc4 	bl	800d880 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	32a4      	adds	r2, #164	; 0xa4
 800f0fe:	6812      	ldr	r2, [r2, #0]
 800f100:	4618      	mov	r0, r3
 800f102:	4790      	blx	r2
 800f104:	4603      	mov	r3, r0
 800f106:	e001      	b.n	800f10c <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 800f108:	4b02      	ldr	r3, [pc, #8]	; (800f114 <_ZN10UtestShell13getTestResultEv+0x30>)
 800f10a:	681b      	ldr	r3, [r3, #0]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3708      	adds	r7, #8
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	200007fc 	.word	0x200007fc

0800f118 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 800f11c:	4b05      	ldr	r3, [pc, #20]	; (800f134 <_ZN10UtestShell10getCurrentEv+0x1c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d103      	bne.n	800f12c <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 800f124:	f7fe fbac 	bl	800d880 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800f128:	4603      	mov	r3, r0
 800f12a:	e001      	b.n	800f130 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 800f12c:	4b01      	ldr	r3, [pc, #4]	; (800f134 <_ZN10UtestShell10getCurrentEv+0x1c>)
 800f12e:	681b      	ldr	r3, [r3, #0]
}
 800f130:	4618      	mov	r0, r3
 800f132:	bd80      	pop	{r7, pc}
 800f134:	20000800 	.word	0x20000800

0800f138 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 800f138:	b480      	push	{r7}
 800f13a:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 800f13c:	4b03      	ldr	r3, [pc, #12]	; (800f14c <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 800f13e:	681b      	ldr	r3, [r3, #0]
}
 800f140:	4618      	mov	r0, r3
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	20000090 	.word	0x20000090

0800f150 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 800f150:	b480      	push	{r7}
 800f152:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 800f154:	4b03      	ldr	r3, [pc, #12]	; (800f164 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 800f156:	4a04      	ldr	r2, [pc, #16]	; (800f168 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 800f158:	601a      	str	r2, [r3, #0]
}
 800f15a:	bf00      	nop
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	20000090 	.word	0x20000090
 800f168:	2000008c 	.word	0x2000008c

0800f16c <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	4a04      	ldr	r2, [pc, #16]	; (800f188 <_ZN5UtestC1Ev+0x1c>)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	601a      	str	r2, [r3, #0]
{
}
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4618      	mov	r0, r3
 800f17e:	370c      	adds	r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	080193fc 	.word	0x080193fc

0800f18c <_ZN5UtestD1Ev>:

Utest::~Utest()
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	4a04      	ldr	r2, [pc, #16]	; (800f1a8 <_ZN5UtestD1Ev+0x1c>)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	601a      	str	r2, [r3, #0]
{
}
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4618      	mov	r0, r3
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr
 800f1a8:	080193fc 	.word	0x080193fc

0800f1ac <_ZN5UtestD0Ev>:
Utest::~Utest()
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
}
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7ff ffe9 	bl	800f18c <_ZN5UtestD1Ev>
 800f1ba:	2104      	movs	r1, #4
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7f7 fe13 	bl	8006de8 <_ZdlPvj>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 800f1d4:	4b0d      	ldr	r3, [pc, #52]	; (800f20c <_ZN5Utest3runEv+0x40>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6879      	ldr	r1, [r7, #4]
 800f1da:	480d      	ldr	r0, [pc, #52]	; (800f210 <_ZN5Utest3runEv+0x44>)
 800f1dc:	4798      	blx	r3
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bf14      	ite	ne
 800f1e4:	2301      	movne	r3, #1
 800f1e6:	2300      	moveq	r3, #0
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d004      	beq.n	800f1f8 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 800f1ee:	4b07      	ldr	r3, [pc, #28]	; (800f20c <_ZN5Utest3runEv+0x40>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	6879      	ldr	r1, [r7, #4]
 800f1f4:	4807      	ldr	r0, [pc, #28]	; (800f214 <_ZN5Utest3runEv+0x48>)
 800f1f6:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 800f1f8:	4b04      	ldr	r3, [pc, #16]	; (800f20c <_ZN5Utest3runEv+0x40>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	6879      	ldr	r1, [r7, #4]
 800f1fe:	4806      	ldr	r0, [pc, #24]	; (800f218 <_ZN5Utest3runEv+0x4c>)
 800f200:	4798      	blx	r3
}
 800f202:	bf00      	nop
 800f204:	3708      	adds	r7, #8
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	200000a0 	.word	0x200000a0
 800f210:	0800d8dd 	.word	0x0800d8dd
 800f214:	0800d8f9 	.word	0x0800d8f9
 800f218:	0800d915 	.word	0x0800d915

0800f21c <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
}
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
}
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
}
 800f24c:	bf00      	nop
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	4a04      	ldr	r2, [pc, #16]	; (800f274 <_ZN14TestTerminatorD1Ev+0x1c>)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	601a      	str	r2, [r3, #0]
{
}
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4618      	mov	r0, r3
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr
 800f274:	080193e8 	.word	0x080193e8

0800f278 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 800f280:	2300      	movs	r3, #0
 800f282:	60fb      	str	r3, [r7, #12]
 800f284:	f107 030c 	add.w	r3, r7, #12
 800f288:	4618      	mov	r0, r3
 800f28a:	f7f7 ff6f 	bl	800716c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800f28e:	f107 030c 	add.w	r3, r7, #12
 800f292:	4618      	mov	r0, r3
 800f294:	f000 f82c 	bl	800f2f0 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 800f298:	f107 030c 	add.w	r3, r7, #12
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 f835 	bl	800f30c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 800f2a2:	bf00      	nop
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
	...

0800f2ac <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	4a05      	ldr	r2, [pc, #20]	; (800f2cc <_ZN20NormalTestTerminatorD1Ev+0x20>)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	601a      	str	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff ffcb 	bl	800f258 <_ZN14TestTerminatorD1Ev>
{
}
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	080193d4 	.word	0x080193d4

0800f2d0 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
}
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f7ff ffe7 	bl	800f2ac <_ZN20NormalTestTerminatorD1Ev>
 800f2de:	2104      	movs	r1, #4
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7f7 fd81 	bl	8006de8 <_ZdlPvj>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 800f2f8:	4b03      	ldr	r3, [pc, #12]	; (800f308 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800f2fe:	bf00      	nop
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	2000009c 	.word	0x2000009c

0800f30c <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	4a05      	ldr	r2, [pc, #20]	; (800f32c <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	601a      	str	r2, [r3, #0]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7ff ff9b 	bl	800f258 <_ZN14TestTerminatorD1Ev>
{
}
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	080193c0 	.word	0x080193c0

0800f330 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
}
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7ff ffe7 	bl	800f30c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800f33e:	2104      	movs	r1, #4
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7f7 fd51 	bl	8006de8 <_ZdlPvj>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 800f358:	f7fe fbbc 	bl	800dad4 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4618      	mov	r0, r3
 800f360:	f7ff ff8a 	bl	800f278 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 800f364:	bf00      	nop
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	4a05      	ldr	r2, [pc, #20]	; (800f38c <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff ff95 	bl	800f2ac <_ZN20NormalTestTerminatorD1Ev>
{
}
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4618      	mov	r0, r3
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	080193ac 	.word	0x080193ac

0800f390 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
}
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff ffe7 	bl	800f36c <_ZN22CrashingTestTerminatorD1Ev>
 800f39e:	2104      	movs	r1, #4
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7f7 fd21 	bl	8006de8 <_ZdlPvj>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	601a      	str	r2, [r3, #0]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d007      	beq.n	800f3dc <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	3310      	adds	r3, #16
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	6838      	ldr	r0, [r7, #0]
 800f3d6:	4798      	blx	r3
 800f3d8:	4603      	mov	r3, r0
 800f3da:	e000      	b.n	800f3de <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d02d      	beq.n	800f446 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d201      	bcs.n	800f3fa <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	e001      	b.n	800f3fe <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 800f3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f3fe:	f240 3237 	movw	r2, #823	; 0x337
 800f402:	4914      	ldr	r1, [pc, #80]	; (800f454 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 800f404:	4618      	mov	r0, r3
 800f406:	f7f7 fcff 	bl	8006e08 <_ZnajPKci>
 800f40a:	4602      	mov	r2, r0
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f414:	2300      	movs	r3, #0
 800f416:	60bb      	str	r3, [r7, #8]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	68ba      	ldr	r2, [r7, #8]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d212      	bcs.n	800f448 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4413      	add	r3, r2
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	330c      	adds	r3, #12
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	4798      	blx	r3
 800f43c:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	3301      	adds	r3, #1
 800f442:	60bb      	str	r3, [r7, #8]
 800f444:	e7e8      	b.n	800f418 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 800f446:	bf00      	nop
    }
}
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4618      	mov	r0, r3
 800f44c:	3710      	adds	r7, #16
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	080172a8 	.word	0x080172a8

0800f458 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d004      	beq.n	800f472 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7f7 fcdf 	bl	8006e30 <_ZdaPv>
}
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b087      	sub	sp, #28
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	4413      	add	r3, r2
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4413      	add	r3, r2
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681a      	ldr	r2, [r3, #0]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	693a      	ldr	r2, [r7, #16]
 800f4be:	601a      	str	r2, [r3, #0]
}
 800f4c0:	bf00      	nop
 800f4c2:	371c      	adds	r7, #28
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d028      	beq.n	800f530 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 800f4de:	4b17      	ldr	r3, [pc, #92]	; (800f53c <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	6838      	ldr	r0, [r7, #0]
 800f4e4:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	60fb      	str	r3, [r7, #12]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d019      	beq.n	800f528 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d01b      	beq.n	800f534 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 800f4fc:	4b10      	ldr	r3, [pc, #64]	; (800f540 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4798      	blx	r3
 800f502:	4603      	mov	r3, r0
 800f504:	461a      	mov	r2, r3
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3301      	adds	r3, #1
 800f50a:	fbb2 f1f3 	udiv	r1, r2, r3
 800f50e:	fb03 f301 	mul.w	r3, r3, r1
 800f512:	1ad3      	subs	r3, r2, r3
 800f514:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 800f516:	68ba      	ldr	r2, [r7, #8]
 800f518:	68f9      	ldr	r1, [r7, #12]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7ff ffae 	bl	800f47c <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	3b01      	subs	r3, #1
 800f524:	60fb      	str	r3, [r7, #12]
 800f526:	e7e2      	b.n	800f4ee <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 f834 	bl	800f596 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800f52e:	e002      	b.n	800f536 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 800f530:	bf00      	nop
 800f532:	e000      	b.n	800f536 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 800f534:	bf00      	nop
}
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	200000d8 	.word	0x200000d8
 800f540:	200000dc 	.word	0x200000dc

0800f544 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d01c      	beq.n	800f58e <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	085b      	lsrs	r3, r3, #1
 800f55a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 800f55c:	2300      	movs	r3, #0
 800f55e:	617b      	str	r3, [r7, #20]
 800f560:	697a      	ldr	r2, [r7, #20]
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	429a      	cmp	r2, r3
 800f566:	d20e      	bcs.n	800f586 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	685a      	ldr	r2, [r3, #4]
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	1ad3      	subs	r3, r2, r3
 800f570:	3b01      	subs	r3, #1
 800f572:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	6979      	ldr	r1, [r7, #20]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7ff ff7f 	bl	800f47c <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	3301      	adds	r3, #1
 800f582:	617b      	str	r3, [r7, #20]
 800f584:	e7ec      	b.n	800f560 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f805 	bl	800f596 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800f58c:	e000      	b.n	800f590 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 800f58e:	bf00      	nop
}
 800f590:	3718      	adds	r7, #24
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b084      	sub	sp, #16
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60bb      	str	r3, [r7, #8]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	68ba      	ldr	r2, [r7, #8]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d221      	bcs.n	800f5f4 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6859      	ldr	r1, [r3, #4]
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	1acb      	subs	r3, r1, r3
 800f5bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4413      	add	r3, r2
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6859      	ldr	r1, [r3, #4]
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	1acb      	subs	r3, r1, r3
 800f5d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	009b      	lsls	r3, r3, #2
 800f5dc:	4413      	add	r3, r2
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	3308      	adds	r3, #8
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	68f9      	ldr	r1, [r7, #12]
 800f5e8:	4798      	blx	r3
 800f5ea:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	60bb      	str	r3, [r7, #8]
 800f5f2:	e7d8      	b.n	800f5a6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 800f5f4:	bf00      	nop
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
    return get(0);
 800f604:	2100      	movs	r1, #0
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 f805 	bl	800f616 <_ZNK22UtestShellPointerArray3getEj>
 800f60c:	4603      	mov	r3, r0
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 800f616:	b480      	push	{r7}
 800f618:	b083      	sub	sp, #12
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
 800f61e:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	683a      	ldr	r2, [r7, #0]
 800f626:	429a      	cmp	r2, r3
 800f628:	d301      	bcc.n	800f62e <_ZNK22UtestShellPointerArray3getEj+0x18>
 800f62a:	2300      	movs	r3, #0
 800f62c:	e005      	b.n	800f63a <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	4413      	add	r3, r2
 800f638:	681b      	ldr	r3, [r3, #0]
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	370c      	adds	r7, #12
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr
	...

0800f648 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
 800f654:	603b      	str	r3, [r7, #0]
 800f656:	4a10      	ldr	r2, [pc, #64]	; (800f698 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 800f65c:	6879      	ldr	r1, [r7, #4]
 800f65e:	68b8      	ldr	r0, [r7, #8]
 800f660:	f7fe fc28 	bl	800deb4 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 800f664:	6839      	ldr	r1, [r7, #0]
 800f666:	68b8      	ldr	r0, [r7, #8]
 800f668:	f7fe fc32 	bl	800ded0 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 800f66c:	69b9      	ldr	r1, [r7, #24]
 800f66e:	68b8      	ldr	r0, [r7, #8]
 800f670:	f7fe fc04 	bl	800de7c <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 800f674:	69f9      	ldr	r1, [r7, #28]
 800f676:	68b8      	ldr	r0, [r7, #8]
 800f678:	f7fe fc0e 	bl	800de98 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 800f67c:	f7fd fc32 	bl	800cee4 <_ZN12TestRegistry18getCurrentRegistryEv>
 800f680:	4603      	mov	r3, r0
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	3208      	adds	r2, #8
 800f686:	6812      	ldr	r2, [r2, #0]
 800f688:	68b9      	ldr	r1, [r7, #8]
 800f68a:	4618      	mov	r0, r3
 800f68c:	4790      	blx	r2
}
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	080192f0 	.word	0x080192f0

0800f69c <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	4a04      	ldr	r2, [pc, #16]	; (800f6b8 <_ZN13TestInstallerD1Ev+0x1c>)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	601a      	str	r2, [r3, #0]
{
}
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	080192f0 	.word	0x080192f0

0800f6bc <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
}
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f7ff ffe9 	bl	800f69c <_ZN13TestInstallerD1Ev>
 800f6ca:	2104      	movs	r1, #4
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f7f7 fb8b 	bl	8006de8 <_ZdlPvj>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d10a      	bne.n	800f702 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d105      	bne.n	800f702 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800f6f6:	4805      	ldr	r0, [pc, #20]	; (800f70c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800f6f8:	f7ff fe38 	bl	800f36c <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 800f6fc:	4804      	ldr	r0, [pc, #16]	; (800f710 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800f6fe:	f7ff fdd5 	bl	800f2ac <_ZN20NormalTestTerminatorD1Ev>
}
 800f702:	bf00      	nop
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	2000008c 	.word	0x2000008c
 800f710:	20000088 	.word	0x20000088

0800f714 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 800f714:	b580      	push	{r7, lr}
 800f716:	af00      	add	r7, sp, #0
 800f718:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f71c:	2001      	movs	r0, #1
 800f71e:	f7ff ffdd 	bl	800f6dc <_Z41__static_initialization_and_destruction_0ii>
 800f722:	bd80      	pop	{r7, pc}

0800f724 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 800f724:	b580      	push	{r7, lr}
 800f726:	af00      	add	r7, sp, #0
 800f728:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f72c:	2000      	movs	r0, #0
 800f72e:	f7ff ffd5 	bl	800f6dc <_Z41__static_initialization_and_destruction_0ii>
 800f732:	bd80      	pop	{r7, pc}

0800f734 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 800f734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	ed87 0b00 	vstr	d0, [r7]
 800f73e:	683c      	ldr	r4, [r7, #0]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800f746:	2301      	movs	r3, #1
 800f748:	461e      	mov	r6, r3
 800f74a:	f04f 32ff 	mov.w	r2, #4294967295
 800f74e:	4b10      	ldr	r3, [pc, #64]	; (800f790 <_ZSt5isinfd+0x5c>)
 800f750:	4620      	mov	r0, r4
 800f752:	4629      	mov	r1, r5
 800f754:	f7f1 f818 	bl	8000788 <__aeabi_dcmpun>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d10b      	bne.n	800f776 <_ZSt5isinfd+0x42>
 800f75e:	f04f 32ff 	mov.w	r2, #4294967295
 800f762:	4b0b      	ldr	r3, [pc, #44]	; (800f790 <_ZSt5isinfd+0x5c>)
 800f764:	4620      	mov	r0, r4
 800f766:	4629      	mov	r1, r5
 800f768:	f7f0 fff0 	bl	800074c <__aeabi_dcmple>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d101      	bne.n	800f776 <_ZSt5isinfd+0x42>
 800f772:	2300      	movs	r3, #0
 800f774:	461e      	mov	r6, r3
 800f776:	b2f3      	uxtb	r3, r6
 800f778:	f083 0301 	eor.w	r3, r3, #1
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	bf14      	ite	ne
 800f782:	2301      	movne	r3, #1
 800f784:	2300      	moveq	r3, #0
 800f786:	b2db      	uxtb	r3, r3
 800f788:	4618      	mov	r0, r3
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f790:	7fefffff 	.word	0x7fefffff

0800f794 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	ed87 0b00 	vstr	d0, [r7]
 800f79e:	2301      	movs	r3, #1
 800f7a0:	461c      	mov	r4, r3
 800f7a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f7aa:	f7f0 ffed 	bl	8000788 <__aeabi_dcmpun>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d101      	bne.n	800f7b8 <_ZSt5isnand+0x24>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	461c      	mov	r4, r3
 800f7b8:	b2e3      	uxtb	r3, r4
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	bf14      	ite	ne
 800f7be:	2301      	movne	r3, #1
 800f7c0:	2300      	moveq	r3, #0
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd90      	pop	{r4, r7, pc}

0800f7cc <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 800f7cc:	b590      	push	{r4, r7, lr}
 800f7ce:	b095      	sub	sp, #84	; 0x54
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	60f8      	str	r0, [r7, #12]
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	3334      	adds	r3, #52	; 0x34
 800f7de:	681c      	ldr	r4, [r3, #0]
 800f7e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f7e4:	490f      	ldr	r1, [pc, #60]	; (800f824 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7f8 f9d3 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800f7ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f7f0:	f107 0314 	add.w	r3, r7, #20
 800f7f4:	68f9      	ldr	r1, [r7, #12]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7f9 ff1c 	bl	8009634 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800f7fc:	f107 0314 	add.w	r3, r7, #20
 800f800:	4619      	mov	r1, r3
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	47a0      	blx	r4
 800f806:	f107 0314 	add.w	r3, r7, #20
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7f9 ffd2 	bl	80097b4 <_ZN11TestFailureD1Ev>
 800f810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f814:	4618      	mov	r0, r3
 800f816:	f7f8 fd74 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 800f81a:	bf00      	nop
 800f81c:	3754      	adds	r7, #84	; 0x54
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd90      	pop	{r4, r7, pc}
 800f822:	bf00      	nop
 800f824:	08017430 	.word	0x08017430

0800f828 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 800f828:	b480      	push	{r7}
 800f82a:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 800f82c:	2301      	movs	r3, #1
}
 800f82e:	4618      	mov	r0, r3
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 800f842:	4b13      	ldr	r3, [pc, #76]	; (800f890 <PlatformSpecificSetJmpImplementation+0x58>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	225c      	movs	r2, #92	; 0x5c
 800f848:	fb02 f303 	mul.w	r3, r2, r3
 800f84c:	4a11      	ldr	r2, [pc, #68]	; (800f894 <PlatformSpecificSetJmpImplementation+0x5c>)
 800f84e:	4413      	add	r3, r2
 800f850:	4618      	mov	r0, r3
 800f852:	f7f0 fce5 	bl	8000220 <setjmp>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	bf0c      	ite	eq
 800f85c:	2301      	moveq	r3, #1
 800f85e:	2300      	movne	r3, #0
 800f860:	b2db      	uxtb	r3, r3
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00e      	beq.n	800f884 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 800f866:	4b0a      	ldr	r3, [pc, #40]	; (800f890 <PlatformSpecificSetJmpImplementation+0x58>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3301      	adds	r3, #1
 800f86c:	4a08      	ldr	r2, [pc, #32]	; (800f890 <PlatformSpecificSetJmpImplementation+0x58>)
 800f86e:	6013      	str	r3, [r2, #0]
        function(data);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6838      	ldr	r0, [r7, #0]
 800f874:	4798      	blx	r3
        jmp_buf_index--;
 800f876:	4b06      	ldr	r3, [pc, #24]	; (800f890 <PlatformSpecificSetJmpImplementation+0x58>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	3b01      	subs	r3, #1
 800f87c:	4a04      	ldr	r2, [pc, #16]	; (800f890 <PlatformSpecificSetJmpImplementation+0x58>)
 800f87e:	6013      	str	r3, [r2, #0]
        return 1;
 800f880:	2301      	movs	r3, #1
 800f882:	e000      	b.n	800f886 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 800f884:	2300      	movs	r3, #0
}
 800f886:	4618      	mov	r0, r3
 800f888:	3708      	adds	r7, #8
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	20000b9c 	.word	0x20000b9c
 800f894:	20000804 	.word	0x20000804

0800f898 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 800f89c:	4b07      	ldr	r3, [pc, #28]	; (800f8bc <PlatformSpecificLongJmpImplementation+0x24>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	4a06      	ldr	r2, [pc, #24]	; (800f8bc <PlatformSpecificLongJmpImplementation+0x24>)
 800f8a4:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 800f8a6:	4b05      	ldr	r3, [pc, #20]	; (800f8bc <PlatformSpecificLongJmpImplementation+0x24>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	225c      	movs	r2, #92	; 0x5c
 800f8ac:	fb02 f303 	mul.w	r3, r2, r3
 800f8b0:	4a03      	ldr	r2, [pc, #12]	; (800f8c0 <PlatformSpecificLongJmpImplementation+0x28>)
 800f8b2:	4413      	add	r3, r2
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7f0 fcb8 	bl	800022c <longjmp>
 800f8bc:	20000b9c 	.word	0x20000b9c
 800f8c0:	20000804 	.word	0x20000804

0800f8c4 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 800f8c8:	2300      	movs	r3, #0
#endif
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 800f8da:	2000      	movs	r0, #0
 800f8dc:	f004 fc06 	bl	80140ec <time>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	460b      	mov	r3, r1
 800f8e4:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 800f8e8:	463b      	mov	r3, r7
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f003 fa6c 	bl	8012dc8 <localtime>
 800f8f0:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	4a04      	ldr	r2, [pc, #16]	; (800f908 <TimeStringImplementation+0x34>)
 800f8f6:	2150      	movs	r1, #80	; 0x50
 800f8f8:	4804      	ldr	r0, [pc, #16]	; (800f90c <TimeStringImplementation+0x38>)
 800f8fa:	f004 fb4d 	bl	8013f98 <strftime>
    return dateTime;
 800f8fe:	4b03      	ldr	r3, [pc, #12]	; (800f90c <TimeStringImplementation+0x38>)
}
 800f900:	4618      	mov	r0, r3
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	0801746c 	.word	0x0801746c
 800f90c:	20000ba0 	.word	0x20000ba0

0800f910 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 800f91a:	6839      	ldr	r1, [r7, #0]
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f003 f889 	bl	8012a34 <fopen>
 800f922:	4603      	mov	r3, r0
#endif
}
 800f924:	4618      	mov	r0, r3
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f003 f8e9 	bl	8012b10 <fputs>
}
 800f93e:	bf00      	nop
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b082      	sub	sp, #8
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f002 fe6a 	bl	8012628 <fclose>
}
 800f954:	bf00      	nop
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	af00      	add	r7, sp, #0
  fflush(stdout);
 800f960:	4b03      	ldr	r3, [pc, #12]	; (800f970 <PlatformSpecificFlushImplementation+0x14>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	4618      	mov	r0, r3
 800f968:	f002 ff28 	bl	80127bc <fflush>
}
 800f96c:	bf00      	nop
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	20000100 	.word	0x20000100

0800f974 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b082      	sub	sp, #8
 800f978:	af00      	add	r7, sp, #0
 800f97a:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 800f97e:	ed97 0b00 	vldr	d0, [r7]
 800f982:	f7ff ff07 	bl	800f794 <_ZSt5isnand>
 800f986:	4603      	mov	r3, r0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3708      	adds	r7, #8
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 800f99a:	ed97 0b00 	vldr	d0, [r7]
 800f99e:	f7ff fec9 	bl	800f734 <_ZSt5isinfd>
 800f9a2:	4603      	mov	r3, r0
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 800f9b0:	2300      	movs	r3, #0
#endif

}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
}
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
}
 800f9d8:	bf00      	nop
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
}
 800f9ec:	bf00      	nop
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 800fa04:	4a25      	ldr	r2, [pc, #148]	; (800fa9c <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	601a      	str	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	605a      	str	r2, [r3, #4]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	609a      	str	r2, [r3, #8]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	731a      	strb	r2, [r3, #12]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	735a      	strb	r2, [r3, #13]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2200      	movs	r2, #0
 800fa26:	739a      	strb	r2, [r3, #14]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	73da      	strb	r2, [r3, #15]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2200      	movs	r2, #0
 800fa32:	741a      	strb	r2, [r3, #16]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	745a      	strb	r2, [r3, #17]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	749a      	strb	r2, [r3, #18]
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2200      	movs	r2, #0
 800fa44:	74da      	strb	r2, [r3, #19]
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	751a      	strb	r2, [r3, #20]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	755a      	strb	r2, [r3, #21]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2200      	movs	r2, #0
 800fa56:	759a      	strb	r2, [r3, #22]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	75da      	strb	r2, [r3, #23]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	761a      	strb	r2, [r3, #24]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2201      	movs	r2, #1
 800fa68:	61da      	str	r2, [r3, #28]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	621a      	str	r2, [r3, #32]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2200      	movs	r2, #0
 800fa74:	625a      	str	r2, [r3, #36]	; 0x24
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	629a      	str	r2, [r3, #40]	; 0x28
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	3330      	adds	r3, #48	; 0x30
 800fa88:	4905      	ldr	r1, [pc, #20]	; (800faa0 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f8 f881 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
{
}
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4618      	mov	r0, r3
 800fa94:	3710      	adds	r7, #16
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	0801941c 	.word	0x0801941c
 800faa0:	08017480 	.word	0x08017480

0800faa4 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4618      	mov	r0, r3
 800fab0:	f7f8 fc27 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
	...

0800fac0 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 800fac0:	b590      	push	{r4, r7, lr}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	4a20      	ldr	r2, [pc, #128]	; (800fb4c <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d015      	beq.n	800fb02 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fada:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae0:	4618      	mov	r0, r3
 800fae2:	f002 fc9a 	bl	801241a <_ZNK10TestFilter7getNextEv>
 800fae6:	4602      	mov	r2, r0
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 800faec:	68fc      	ldr	r4, [r7, #12]
 800faee:	2c00      	cmp	r4, #0
 800faf0:	d0ed      	beq.n	800face <_ZN20CommandLineArgumentsD1Ev+0xe>
 800faf2:	4620      	mov	r0, r4
 800faf4:	f7ff ffd6 	bl	800faa4 <_ZN10TestFilterD1Ev>
 800faf8:	2110      	movs	r1, #16
 800fafa:	4620      	mov	r0, r4
 800fafc:	f7f7 f974 	bl	8006de8 <_ZdlPvj>
    while(groupFilters_) {
 800fb00:	e7e5      	b.n	800face <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d015      	beq.n	800fb36 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb0e:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb14:	4618      	mov	r0, r3
 800fb16:	f002 fc80 	bl	801241a <_ZNK10TestFilter7getNextEv>
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 800fb20:	68bc      	ldr	r4, [r7, #8]
 800fb22:	2c00      	cmp	r4, #0
 800fb24:	d0ed      	beq.n	800fb02 <_ZN20CommandLineArgumentsD1Ev+0x42>
 800fb26:	4620      	mov	r0, r4
 800fb28:	f7ff ffbc 	bl	800faa4 <_ZN10TestFilterD1Ev>
 800fb2c:	2110      	movs	r1, #16
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f7f7 f95a 	bl	8006de8 <_ZdlPvj>
    while(nameFilters_) {
 800fb34:	e7e5      	b.n	800fb02 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	3330      	adds	r3, #48	; 0x30
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7f8 fbe1 	bl	8008302 <_ZN12SimpleStringD1Ev>
    }
}
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4618      	mov	r0, r3
 800fb44:	3714      	adds	r7, #20
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd90      	pop	{r4, r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	0801941c 	.word	0x0801941c

0800fb50 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
}
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff ffb1 	bl	800fac0 <_ZN20CommandLineArgumentsD1Ev>
 800fb5e:	2138      	movs	r1, #56	; 0x38
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7f7 f941 	bl	8006de8 <_ZdlPvj>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 800fb70:	b5b0      	push	{r4, r5, r7, lr}
 800fb72:	b0be      	sub	sp, #248	; 0xf8
 800fb74:	af02      	add	r7, sp, #8
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
 800fb7a:	2400      	movs	r4, #0
    bool correctParameters = true;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 800fb82:	2301      	movs	r3, #1
 800fb84:	613b      	str	r3, [r7, #16]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	685a      	ldr	r2, [r3, #4]
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	f340 83a4 	ble.w	80102da <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	689a      	ldr	r2, [r3, #8]
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	009b      	lsls	r3, r3, #2
 800fb9a:	4413      	add	r3, r2
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	f107 0308 	add.w	r3, r7, #8
 800fba2:	4611      	mov	r1, r2
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7f7 fff4 	bl	8007b92 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 800fbaa:	f107 0314 	add.w	r3, r7, #20
 800fbae:	49c8      	ldr	r1, [pc, #800]	; (800fed0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7f7 ffee 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fbb6:	f107 0214 	add.w	r2, r7, #20
 800fbba:	f107 0308 	add.w	r3, r7, #8
 800fbbe:	4611      	mov	r1, r2
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f8 fbaa 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	461d      	mov	r5, r3
 800fbca:	f107 0314 	add.w	r3, r7, #20
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7f8 fb97 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fbd4:	2d00      	cmp	r5, #0
 800fbd6:	d006      	beq.n	800fbe6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fbe4:	e366      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 800fbe6:	f107 031c 	add.w	r3, r7, #28
 800fbea:	49ba      	ldr	r1, [pc, #744]	; (800fed4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7f7 ffd0 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fbf2:	f107 021c 	add.w	r2, r7, #28
 800fbf6:	f107 0308 	add.w	r3, r7, #8
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7f8 fb8c 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fc02:	4603      	mov	r3, r0
 800fc04:	461d      	mov	r5, r3
 800fc06:	f107 031c 	add.w	r3, r7, #28
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7f8 fb79 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fc10:	2d00      	cmp	r5, #0
 800fc12:	d003      	beq.n	800fc1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	735a      	strb	r2, [r3, #13]
 800fc1a:	e34b      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 800fc1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc20:	49ad      	ldr	r1, [pc, #692]	; (800fed8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7f7 ffb5 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fc28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fc2c:	f107 0308 	add.w	r3, r7, #8
 800fc30:	4611      	mov	r1, r2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7f8 fb71 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	461d      	mov	r5, r3
 800fc3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7f8 fb5e 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fc46:	2d00      	cmp	r5, #0
 800fc48:	d003      	beq.n	800fc52 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	739a      	strb	r2, [r3, #14]
 800fc50:	e330      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 800fc52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc56:	49a1      	ldr	r1, [pc, #644]	; (800fedc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7f7 ff9a 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fc5e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fc62:	f107 0308 	add.w	r3, r7, #8
 800fc66:	4611      	mov	r1, r2
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7f8 fb56 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	461d      	mov	r5, r3
 800fc72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7f8 fb43 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fc7c:	2d00      	cmp	r5, #0
 800fc7e:	d003      	beq.n	800fc88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2201      	movs	r2, #1
 800fc84:	73da      	strb	r2, [r3, #15]
 800fc86:	e315      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 800fc88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fc8c:	4994      	ldr	r1, [pc, #592]	; (800fee0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7f7 ff7f 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fc94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fc98:	f107 0308 	add.w	r3, r7, #8
 800fc9c:	4611      	mov	r1, r2
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7f8 fb3b 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fca4:	4603      	mov	r3, r0
 800fca6:	461d      	mov	r5, r3
 800fca8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7f8 fb28 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fcb2:	2d00      	cmp	r5, #0
 800fcb4:	d003      	beq.n	800fcbe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2201      	movs	r2, #1
 800fcba:	741a      	strb	r2, [r3, #16]
 800fcbc:	e2fa      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 800fcbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fcc2:	4988      	ldr	r1, [pc, #544]	; (800fee4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7f7 ff64 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fcca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800fcce:	f107 0308 	add.w	r3, r7, #8
 800fcd2:	4611      	mov	r1, r2
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7f8 fb20 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	461d      	mov	r5, r3
 800fcde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7f8 fb0d 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fce8:	2d00      	cmp	r5, #0
 800fcea:	d003      	beq.n	800fcf4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	755a      	strb	r2, [r3, #21]
 800fcf2:	e2df      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 800fcf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fcf8:	497b      	ldr	r1, [pc, #492]	; (800fee8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f7 ff49 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fd00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800fd04:	f107 0308 	add.w	r3, r7, #8
 800fd08:	4611      	mov	r1, r2
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7f8 fb05 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fd10:	4603      	mov	r3, r0
 800fd12:	461d      	mov	r5, r3
 800fd14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7f8 faf2 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fd1e:	2d00      	cmp	r5, #0
 800fd20:	d003      	beq.n	800fd2a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2201      	movs	r2, #1
 800fd26:	745a      	strb	r2, [r3, #17]
 800fd28:	e2c4      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 800fd2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fd2e:	496f      	ldr	r1, [pc, #444]	; (800feec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7f7 ff2e 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fd36:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800fd3a:	f107 0308 	add.w	r3, r7, #8
 800fd3e:	4611      	mov	r1, r2
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7f8 faea 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fd46:	4603      	mov	r3, r0
 800fd48:	461d      	mov	r5, r3
 800fd4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7f8 fad7 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fd54:	2d00      	cmp	r5, #0
 800fd56:	d003      	beq.n	800fd60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	749a      	strb	r2, [r3, #18]
 800fd5e:	e2a9      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 800fd60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fd64:	4962      	ldr	r1, [pc, #392]	; (800fef0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7f7 ff13 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fd6c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800fd70:	f107 0308 	add.w	r3, r7, #8
 800fd74:	4611      	mov	r1, r2
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7f8 facf 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	461d      	mov	r5, r3
 800fd80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7f8 fabc 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fd8a:	2d00      	cmp	r5, #0
 800fd8c:	d003      	beq.n	800fd96 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2201      	movs	r2, #1
 800fd92:	74da      	strb	r2, [r3, #19]
 800fd94:	e28e      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 800fd96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fd9a:	4956      	ldr	r1, [pc, #344]	; (800fef4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7f7 fef8 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fda2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800fda6:	f107 0308 	add.w	r3, r7, #8
 800fdaa:	4611      	mov	r1, r2
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7f8 fab4 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	461d      	mov	r5, r3
 800fdb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7f8 faa1 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fdc0:	2d00      	cmp	r5, #0
 800fdc2:	d003      	beq.n	800fdcc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	751a      	strb	r2, [r3, #20]
 800fdca:	e273      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 800fdcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fdd0:	4949      	ldr	r1, [pc, #292]	; (800fef8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7f7 fedd 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fdd8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800fddc:	f107 0308 	add.w	r3, r7, #8
 800fde0:	4611      	mov	r1, r2
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7f8 fa99 	bl	800831a <_ZeqRK12SimpleStringS1_>
 800fde8:	4603      	mov	r3, r0
 800fdea:	461d      	mov	r5, r3
 800fdec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7f8 fa86 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fdf6:	2d00      	cmp	r5, #0
 800fdf8:	d003      	beq.n	800fe02 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	759a      	strb	r2, [r3, #22]
 800fe00:	e258      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 800fe02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fe06:	493d      	ldr	r1, [pc, #244]	; (800fefc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7f7 fec2 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fe0e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800fe12:	f107 0308 	add.w	r3, r7, #8
 800fe16:	4611      	mov	r1, r2
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7f7 ff7e 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	461d      	mov	r5, r3
 800fe22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7f8 fa6b 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fe2c:	2d00      	cmp	r5, #0
 800fe2e:	d009      	beq.n	800fe44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6859      	ldr	r1, [r3, #4]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	689a      	ldr	r2, [r3, #8]
 800fe38:	f107 0310 	add.w	r3, r7, #16
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fb33 	bl	80104a8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 800fe42:	e237      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 800fe44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fe48:	492d      	ldr	r1, [pc, #180]	; (800ff00 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7f7 fea1 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fe50:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800fe54:	f107 0308 	add.w	r3, r7, #8
 800fe58:	4611      	mov	r1, r2
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7f7 ff5d 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 800fe60:	4603      	mov	r3, r0
 800fe62:	461d      	mov	r5, r3
 800fe64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7f8 fa4a 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fe6e:	2d00      	cmp	r5, #0
 800fe70:	d009      	beq.n	800fe86 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6859      	ldr	r1, [r3, #4]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	689a      	ldr	r2, [r3, #8]
 800fe7a:	f107 0310 	add.w	r3, r7, #16
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 fc40 	bl	8010704 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 800fe84:	e216      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 800fe86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fe8a:	491e      	ldr	r1, [pc, #120]	; (800ff04 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7f7 fe80 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800fe92:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800fe96:	f107 0308 	add.w	r3, r7, #8
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7f7 ff3c 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 800fea2:	4603      	mov	r3, r0
 800fea4:	461d      	mov	r5, r3
 800fea6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800feaa:	4618      	mov	r0, r3
 800feac:	f7f8 fa29 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800feb0:	2d00      	cmp	r5, #0
 800feb2:	d029      	beq.n	800ff08 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6859      	ldr	r1, [r3, #4]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	689a      	ldr	r2, [r3, #8]
 800febc:	f107 0310 	add.w	r3, r7, #16
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f000 fc61 	bl	8010788 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 800fec6:	4603      	mov	r3, r0
 800fec8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fecc:	e1f2      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800fece:	bf00      	nop
 800fed0:	08017484 	.word	0x08017484
 800fed4:	08017488 	.word	0x08017488
 800fed8:	0801748c 	.word	0x0801748c
 800fedc:	08017490 	.word	0x08017490
 800fee0:	08017494 	.word	0x08017494
 800fee4:	08017498 	.word	0x08017498
 800fee8:	0801749c 	.word	0x0801749c
 800feec:	080174a0 	.word	0x080174a0
 800fef0:	080174a4 	.word	0x080174a4
 800fef4:	080174a8 	.word	0x080174a8
 800fef8:	080174ac 	.word	0x080174ac
 800fefc:	080174b0 	.word	0x080174b0
 800ff00:	080174b4 	.word	0x080174b4
 800ff04:	080174b8 	.word	0x080174b8
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 800ff08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ff0c:	49b9      	ldr	r1, [pc, #740]	; (80101f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7f7 fe3f 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ff14:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800ff18:	f107 0308 	add.w	r3, r7, #8
 800ff1c:	4611      	mov	r1, r2
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7f7 fefb 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 800ff24:	4603      	mov	r3, r0
 800ff26:	461d      	mov	r5, r3
 800ff28:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f7f8 f9e8 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ff32:	2d00      	cmp	r5, #0
 800ff34:	d009      	beq.n	800ff4a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6859      	ldr	r1, [r3, #4]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	689a      	ldr	r2, [r3, #8]
 800ff3e:	f107 0310 	add.w	r3, r7, #16
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 fccc 	bl	80108e0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 800ff48:	e1b4      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 800ff4a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ff4e:	49aa      	ldr	r1, [pc, #680]	; (80101f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7f7 fe1e 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ff56:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800ff5a:	f107 0308 	add.w	r3, r7, #8
 800ff5e:	4611      	mov	r1, r2
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7f7 feda 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 800ff66:	4603      	mov	r3, r0
 800ff68:	461d      	mov	r5, r3
 800ff6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7f8 f9c7 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ff74:	2d00      	cmp	r5, #0
 800ff76:	d009      	beq.n	800ff8c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6859      	ldr	r1, [r3, #4]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	689a      	ldr	r2, [r3, #8]
 800ff80:	f107 0310 	add.w	r3, r7, #16
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 fcf1 	bl	801096c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 800ff8a:	e193      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 800ff8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ff90:	499a      	ldr	r1, [pc, #616]	; (80101fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7f7 fdfd 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ff98:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800ff9c:	f107 0308 	add.w	r3, r7, #8
 800ffa0:	4611      	mov	r1, r2
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f7 feb9 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	461d      	mov	r5, r3
 800ffac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7f8 f9a6 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800ffb6:	2d00      	cmp	r5, #0
 800ffb8:	d009      	beq.n	800ffce <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6859      	ldr	r1, [r3, #4]
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	689a      	ldr	r2, [r3, #8]
 800ffc2:	f107 0310 	add.w	r3, r7, #16
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f000 fd16 	bl	80109f8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 800ffcc:	e172      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 800ffce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ffd2:	498b      	ldr	r1, [pc, #556]	; (8010200 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7f7 fddc 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 800ffda:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800ffde:	f107 0308 	add.w	r3, r7, #8
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7f7 fe98 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 800ffea:	4603      	mov	r3, r0
 800ffec:	461d      	mov	r5, r3
 800ffee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7f8 f985 	bl	8008302 <_ZN12SimpleStringD1Ev>
 800fff8:	2d00      	cmp	r5, #0
 800fffa:	d009      	beq.n	8010010 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6859      	ldr	r1, [r3, #4]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	689a      	ldr	r2, [r3, #8]
 8010004:	f107 0310 	add.w	r3, r7, #16
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 fd3d 	bl	8010a88 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 801000e:	e151      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8010010:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010014:	497b      	ldr	r1, [pc, #492]	; (8010204 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8010016:	4618      	mov	r0, r3
 8010018:	f7f7 fdbb 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 801001c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8010020:	f107 0308 	add.w	r3, r7, #8
 8010024:	4611      	mov	r1, r2
 8010026:	4618      	mov	r0, r3
 8010028:	f7f7 fe77 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 801002c:	4603      	mov	r3, r0
 801002e:	461d      	mov	r5, r3
 8010030:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010034:	4618      	mov	r0, r3
 8010036:	f7f8 f964 	bl	8008302 <_ZN12SimpleStringD1Ev>
 801003a:	2d00      	cmp	r5, #0
 801003c:	d009      	beq.n	8010052 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6859      	ldr	r1, [r3, #4]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	689a      	ldr	r2, [r3, #8]
 8010046:	f107 0310 	add.w	r3, r7, #16
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fd5e 	bl	8010b0c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8010050:	e130      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8010052:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010056:	496c      	ldr	r1, [pc, #432]	; (8010208 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8010058:	4618      	mov	r0, r3
 801005a:	f7f7 fd9a 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 801005e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8010062:	f107 0308 	add.w	r3, r7, #8
 8010066:	4611      	mov	r1, r2
 8010068:	4618      	mov	r0, r3
 801006a:	f7f7 fe56 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 801006e:	4603      	mov	r3, r0
 8010070:	461d      	mov	r5, r3
 8010072:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010076:	4618      	mov	r0, r3
 8010078:	f7f8 f943 	bl	8008302 <_ZN12SimpleStringD1Ev>
 801007c:	2d00      	cmp	r5, #0
 801007e:	d009      	beq.n	8010094 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6859      	ldr	r1, [r3, #4]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	689a      	ldr	r2, [r3, #8]
 8010088:	f107 0310 	add.w	r3, r7, #16
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 fd83 	bl	8010b98 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8010092:	e10f      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8010094:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8010098:	495c      	ldr	r1, [pc, #368]	; (801020c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 801009a:	4618      	mov	r0, r3
 801009c:	f7f7 fd79 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80100a0:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80100a4:	f107 0308 	add.w	r3, r7, #8
 80100a8:	4611      	mov	r1, r2
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7f7 fe35 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 80100b0:	4603      	mov	r3, r0
 80100b2:	461d      	mov	r5, r3
 80100b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7f8 f922 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80100be:	2d00      	cmp	r5, #0
 80100c0:	d009      	beq.n	80100d6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6859      	ldr	r1, [r3, #4]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	689a      	ldr	r2, [r3, #8]
 80100ca:	f107 0310 	add.w	r3, r7, #16
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 fda8 	bl	8010c24 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 80100d4:	e0ee      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 80100d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80100da:	494d      	ldr	r1, [pc, #308]	; (8010210 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f7 fd58 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80100e2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80100e6:	f107 0308 	add.w	r3, r7, #8
 80100ea:	4611      	mov	r1, r2
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7f7 fe14 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 80100f2:	4603      	mov	r3, r0
 80100f4:	461d      	mov	r5, r3
 80100f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7f8 f901 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010100:	2d00      	cmp	r5, #0
 8010102:	d00c      	beq.n	801011e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6859      	ldr	r1, [r3, #4]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	689a      	ldr	r2, [r3, #8]
 801010c:	f107 0310 	add.w	r3, r7, #16
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fa29 	bl	8010568 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8010116:	4603      	mov	r3, r0
 8010118:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801011c:	e0ca      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 801011e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010122:	493c      	ldr	r1, [pc, #240]	; (8010214 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8010124:	4618      	mov	r0, r3
 8010126:	f7f7 fd34 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 801012a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801012e:	f107 0308 	add.w	r3, r7, #8
 8010132:	4611      	mov	r1, r2
 8010134:	4618      	mov	r0, r3
 8010136:	f7f7 fdf0 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 801013a:	4603      	mov	r3, r0
 801013c:	461d      	mov	r5, r3
 801013e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010142:	4618      	mov	r0, r3
 8010144:	f7f8 f8dd 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010148:	2d00      	cmp	r5, #0
 801014a:	d00b      	beq.n	8010164 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6859      	ldr	r1, [r3, #4]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	689a      	ldr	r2, [r3, #8]
 8010154:	f107 0310 	add.w	r3, r7, #16
 8010158:	482e      	ldr	r0, [pc, #184]	; (8010214 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 801015a:	9000      	str	r0, [sp, #0]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fda9 	bl	8010cb4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8010162:	e0a7      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8010164:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010168:	492b      	ldr	r1, [pc, #172]	; (8010218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 801016a:	4618      	mov	r0, r3
 801016c:	f7f7 fd11 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010170:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8010174:	f107 0308 	add.w	r3, r7, #8
 8010178:	4611      	mov	r1, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f7f7 fdcd 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 8010180:	4603      	mov	r3, r0
 8010182:	461d      	mov	r5, r3
 8010184:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010188:	4618      	mov	r0, r3
 801018a:	f7f8 f8ba 	bl	8008302 <_ZN12SimpleStringD1Ev>
 801018e:	2d00      	cmp	r5, #0
 8010190:	d00b      	beq.n	80101aa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6859      	ldr	r1, [r3, #4]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	689a      	ldr	r2, [r3, #8]
 801019a:	f107 0310 	add.w	r3, r7, #16
 801019e:	481e      	ldr	r0, [pc, #120]	; (8010218 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80101a0:	9000      	str	r0, [sp, #0]
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fd86 	bl	8010cb4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80101a8:	e084      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 80101aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80101ae:	491b      	ldr	r1, [pc, #108]	; (801021c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7f7 fcee 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80101b6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80101ba:	f107 0308 	add.w	r3, r7, #8
 80101be:	4611      	mov	r1, r2
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7f7 fdaa 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 80101c6:	4603      	mov	r3, r0
 80101c8:	461d      	mov	r5, r3
 80101ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7f8 f897 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80101d4:	2d00      	cmp	r5, #0
 80101d6:	d023      	beq.n	8010220 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6859      	ldr	r1, [r3, #4]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	689a      	ldr	r2, [r3, #8]
 80101e0:	f107 0310 	add.w	r3, r7, #16
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 fe3b 	bl	8010e60 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 80101ea:	4603      	mov	r3, r0
 80101ec:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80101f0:	e060      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80101f2:	bf00      	nop
 80101f4:	080174bc 	.word	0x080174bc
 80101f8:	080174c0 	.word	0x080174c0
 80101fc:	080174c4 	.word	0x080174c4
 8010200:	080174cc 	.word	0x080174cc
 8010204:	080174d0 	.word	0x080174d0
 8010208:	080174d4 	.word	0x080174d4
 801020c:	080174d8 	.word	0x080174d8
 8010210:	080174e0 	.word	0x080174e0
 8010214:	080174e4 	.word	0x080174e4
 8010218:	080174ec 	.word	0x080174ec
 801021c:	080174fc 	.word	0x080174fc
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8010220:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010224:	4930      	ldr	r1, [pc, #192]	; (80102e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8010226:	4618      	mov	r0, r3
 8010228:	f7f7 fcb3 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 801022c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8010230:	f107 0308 	add.w	r3, r7, #8
 8010234:	4611      	mov	r1, r2
 8010236:	4618      	mov	r0, r3
 8010238:	f7f7 fd6f 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 801023c:	4603      	mov	r3, r0
 801023e:	461d      	mov	r5, r3
 8010240:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010244:	4618      	mov	r0, r3
 8010246:	f7f8 f85c 	bl	8008302 <_ZN12SimpleStringD1Ev>
 801024a:	2d00      	cmp	r5, #0
 801024c:	d00e      	beq.n	801026c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	331c      	adds	r3, #28
 8010254:	681d      	ldr	r5, [r3, #0]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6859      	ldr	r1, [r3, #4]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	689a      	ldr	r2, [r3, #8]
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	6838      	ldr	r0, [r7, #0]
 8010262:	47a8      	blx	r5
 8010264:	4603      	mov	r3, r0
 8010266:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801026a:	e023      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 801026c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010270:	491e      	ldr	r1, [pc, #120]	; (80102ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8010272:	4618      	mov	r0, r3
 8010274:	f7f7 fc8d 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010278:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801027c:	f107 0308 	add.w	r3, r7, #8
 8010280:	4611      	mov	r1, r2
 8010282:	4618      	mov	r0, r3
 8010284:	f7f7 fd49 	bl	8007d1a <_ZNK12SimpleString10startsWithERKS_>
 8010288:	4603      	mov	r3, r0
 801028a:	461d      	mov	r5, r3
 801028c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010290:	4618      	mov	r0, r3
 8010292:	f7f8 f836 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010296:	2d00      	cmp	r5, #0
 8010298:	d009      	beq.n	80102ae <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6859      	ldr	r1, [r3, #4]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	689a      	ldr	r2, [r3, #8]
 80102a2:	f107 0310 	add.w	r3, r7, #16
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 fd98 	bl	8010ddc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 80102ac:	e002      	b.n	80102b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 80102ae:	2300      	movs	r3, #0
 80102b0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 80102b4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d102      	bne.n	80102c2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 80102bc:	2400      	movs	r4, #0
 80102be:	2500      	movs	r5, #0
 80102c0:	e000      	b.n	80102c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 80102c2:	2501      	movs	r5, #1
 80102c4:	f107 0308 	add.w	r3, r7, #8
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7f8 f81a 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80102ce:	2d01      	cmp	r5, #1
 80102d0:	d104      	bne.n	80102dc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	3301      	adds	r3, #1
 80102d6:	613b      	str	r3, [r7, #16]
 80102d8:	e455      	b.n	800fb86 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 80102da:	2401      	movs	r4, #1
 80102dc:	4623      	mov	r3, r4
}
 80102de:	4618      	mov	r0, r3
 80102e0:	37f0      	adds	r7, #240	; 0xf0
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bdb0      	pop	{r4, r5, r7, pc}
 80102e6:	bf00      	nop
 80102e8:	08017494 	.word	0x08017494
 80102ec:	08017500 	.word	0x08017500

080102f0 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 80102f8:	4b03      	ldr	r3, [pc, #12]	; (8010308 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	370c      	adds	r7, #12
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop
 8010308:	08017504 	.word	0x08017504

0801030c <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8010314:	4b03      	ldr	r3, [pc, #12]	; (8010324 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8010316:	4618      	mov	r0, r3
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	08017634 	.word	0x08017634

08010328 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	7b1b      	ldrb	r3, [r3, #12]
}
 8010334:	4618      	mov	r0, r3
 8010336:	370c      	adds	r7, #12
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr

08010340 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8010340:	b480      	push	{r7}
 8010342:	b083      	sub	sp, #12
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
    return verbose_;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	7b5b      	ldrb	r3, [r3, #13]
}
 801034c:	4618      	mov	r0, r3
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	7b9b      	ldrb	r3, [r3, #14]
}
 8010364:	4618      	mov	r0, r3
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8010370:	b480      	push	{r7}
 8010372:	b083      	sub	sp, #12
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
    return color_;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	7bdb      	ldrb	r3, [r3, #15]
}
 801037c:	4618      	mov	r0, r3
 801037e:	370c      	adds	r7, #12
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8010388:	b480      	push	{r7}
 801038a:	b083      	sub	sp, #12
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	7c5b      	ldrb	r3, [r3, #17]
}
 8010394:	4618      	mov	r0, r3
 8010396:	370c      	adds	r7, #12
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr

080103a0 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	7c9b      	ldrb	r3, [r3, #18]
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	370c      	adds	r7, #12
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	7cdb      	ldrb	r3, [r3, #19]
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	7d1b      	ldrb	r3, [r3, #20]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	7c1b      	ldrb	r3, [r3, #16]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
    return repeat_;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	69db      	ldr	r3, [r3, #28]
}
 801040c:	4618      	mov	r0, r3
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
    return reversing_;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	7d5b      	ldrb	r3, [r3, #21]
}
 8010424:	4618      	mov	r0, r3
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8010430:	b480      	push	{r7}
 8010432:	b083      	sub	sp, #12
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	7d9b      	ldrb	r3, [r3, #22]
}
 801043c:	4618      	mov	r0, r3
 801043e:	370c      	adds	r7, #12
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7ddb      	ldrb	r3, [r3, #23]
}
 8010454:	4618      	mov	r0, r3
 8010456:	370c      	adds	r7, #12
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr

08010460 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a1b      	ldr	r3, [r3, #32]
}
 801046c:	4618      	mov	r0, r3
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8010484:	4618      	mov	r0, r3
 8010486:	370c      	adds	r7, #12
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr

08010490 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8010490:	b480      	push	{r7}
 8010492:	b083      	sub	sp, #12
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801049c:	4618      	mov	r0, r3
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
 80104b4:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2200      	movs	r2, #0
 80104ba:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	4413      	add	r3, r2
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	f107 0310 	add.w	r3, r7, #16
 80104cc:	4611      	mov	r1, r2
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7f7 fb5f 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 80104d4:	f107 0310 	add.w	r3, r7, #16
 80104d8:	4618      	mov	r0, r3
 80104da:	f7f7 fef1 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b02      	cmp	r3, #2
 80104e2:	bf8c      	ite	hi
 80104e4:	2301      	movhi	r3, #1
 80104e6:	2300      	movls	r3, #0
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00e      	beq.n	801050c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	4413      	add	r3, r2
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	3302      	adds	r3, #2
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7f7 f944 	bl	800778a <_ZN12SimpleString4AtoIEPKc>
 8010502:	4603      	mov	r3, r0
 8010504:	461a      	mov	r2, r3
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	61da      	str	r2, [r3, #28]
 801050a:	e01c      	b.n	8010546 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	3301      	adds	r3, #1
 8010512:	68ba      	ldr	r2, [r7, #8]
 8010514:	429a      	cmp	r2, r3
 8010516:	dd16      	ble.n	8010546 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	3301      	adds	r3, #1
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	4413      	add	r3, r2
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	4618      	mov	r0, r3
 8010528:	f7f7 f92f 	bl	800778a <_ZN12SimpleString4AtoIEPKc>
 801052c:	4603      	mov	r3, r0
 801052e:	461a      	mov	r2, r3
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	69db      	ldr	r3, [r3, #28]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d004      	beq.n	8010546 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	69db      	ldr	r3, [r3, #28]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d102      	bne.n	8010554 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	2202      	movs	r2, #2
 8010552:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8010554:	f107 0310 	add.w	r3, r7, #16
 8010558:	4618      	mov	r0, r3
 801055a:	f7f7 fed2 	bl	8008302 <_ZN12SimpleStringD1Ev>

}
 801055e:	bf00      	nop
 8010560:	3718      	adds	r7, #24
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
	...

08010568 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8010568:	b590      	push	{r4, r7, lr}
 801056a:	b089      	sub	sp, #36	; 0x24
 801056c:	af00      	add	r7, sp, #0
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	60b9      	str	r1, [r7, #8]
 8010572:	607a      	str	r2, [r7, #4]
 8010574:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2201      	movs	r2, #1
 801057a:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 801057c:	4b34      	ldr	r3, [pc, #208]	; (8010650 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4798      	blx	r3
 8010582:	4603      	mov	r3, r0
 8010584:	461a      	mov	r2, r3
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	6a1b      	ldr	r3, [r3, #32]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d104      	bne.n	801059c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6a1b      	ldr	r3, [r3, #32]
 8010596:	1c5a      	adds	r2, r3, #1
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	4413      	add	r3, r2
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	f107 0314 	add.w	r3, r7, #20
 80105ac:	4611      	mov	r1, r2
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f7 faef 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80105b4:	f107 0314 	add.w	r3, r7, #20
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7f7 fe81 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	bf8c      	ite	hi
 80105c4:	2301      	movhi	r3, #1
 80105c6:	2300      	movls	r3, #0
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d010      	beq.n	80105f0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2201      	movs	r2, #1
 80105d2:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	4413      	add	r3, r2
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	3302      	adds	r3, #2
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7f7 f898 	bl	8007718 <_ZN12SimpleString4AtoUEPKc>
 80105e8:	4602      	mov	r2, r0
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	621a      	str	r2, [r3, #32]
 80105ee:	e01e      	b.n	801062e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3301      	adds	r3, #1
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	dd18      	ble.n	801062e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	3301      	adds	r3, #1
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	4413      	add	r3, r2
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	4618      	mov	r0, r3
 801060c:	f7f7 f884 	bl	8007718 <_ZN12SimpleString4AtoUEPKc>
 8010610:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d00a      	beq.n	801062e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2201      	movs	r2, #1
 801061c:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	69fa      	ldr	r2, [r7, #28]
 8010622:	621a      	str	r2, [r3, #32]
            i++;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	6a1b      	ldr	r3, [r3, #32]
 8010632:	2b00      	cmp	r3, #0
 8010634:	bf14      	ite	ne
 8010636:	2301      	movne	r3, #1
 8010638:	2300      	moveq	r3, #0
 801063a:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 801063c:	f107 0314 	add.w	r3, r7, #20
 8010640:	4618      	mov	r0, r3
 8010642:	f7f7 fe5e 	bl	8008302 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8010646:	4623      	mov	r3, r4
}
 8010648:	4618      	mov	r0, r3
 801064a:	3724      	adds	r7, #36	; 0x24
 801064c:	46bd      	mov	sp, r7
 801064e:	bd90      	pop	{r4, r7, pc}
 8010650:	200000a4 	.word	0x200000a4

08010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b088      	sub	sp, #32
 8010658:	af00      	add	r7, sp, #0
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
 8010660:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8010662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010664:	f7f7 fe2c 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8010668:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 801066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	683a      	ldr	r2, [r7, #0]
 8010672:	4413      	add	r3, r2
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	f107 0314 	add.w	r3, r7, #20
 801067a:	4611      	mov	r1, r2
 801067c:	4618      	mov	r0, r3
 801067e:	f7f7 fa88 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8010682:	f107 0314 	add.w	r3, r7, #20
 8010686:	4618      	mov	r0, r3
 8010688:	f7f7 fe1a 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 801068c:	4602      	mov	r2, r0
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	4293      	cmp	r3, r2
 8010692:	bf34      	ite	cc
 8010694:	2301      	movcc	r3, #1
 8010696:	2300      	movcs	r3, #0
 8010698:	b2db      	uxtb	r3, r3
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00c      	beq.n	80106b8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 801069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	009b      	lsls	r3, r3, #2
 80106a4:	683a      	ldr	r2, [r7, #0]
 80106a6:	4413      	add	r3, r2
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	4413      	add	r3, r2
 80106ae:	4619      	mov	r1, r3
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f7f7 fa6e 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80106b6:	e019      	b.n	80106ec <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80106b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	3301      	adds	r3, #1
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	dd0f      	ble.n	80106e4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 80106c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	1c5a      	adds	r2, r3, #1
 80106ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	4413      	add	r3, r2
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4619      	mov	r1, r3
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	f7f7 fa58 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80106e2:	e003      	b.n	80106ec <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 80106e4:	4906      	ldr	r1, [pc, #24]	; (8010700 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f7f7 fa53 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 80106ec:	f107 0314 	add.w	r3, r7, #20
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7f7 fe06 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	3720      	adds	r7, #32
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	08017480 	.word	0x08017480

08010704 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8010704:	b5b0      	push	{r4, r5, r7, lr}
 8010706:	b08c      	sub	sp, #48	; 0x30
 8010708:	af02      	add	r7, sp, #8
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8010712:	f107 031c 	add.w	r3, r7, #28
 8010716:	491a      	ldr	r1, [pc, #104]	; (8010780 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8010718:	4618      	mov	r0, r3
 801071a:	f7f7 fa3a 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 801071e:	f107 0014 	add.w	r0, r7, #20
 8010722:	f107 031c 	add.w	r3, r7, #28
 8010726:	9301      	str	r3, [sp, #4]
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	9300      	str	r3, [sp, #0]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	68ba      	ldr	r2, [r7, #8]
 8010730:	68f9      	ldr	r1, [r7, #12]
 8010732:	f7ff ff8f 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010736:	f107 0514 	add.w	r5, r7, #20
 801073a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801073e:	4911      	ldr	r1, [pc, #68]	; (8010784 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8010740:	2010      	movs	r0, #16
 8010742:	f7f6 fb3d 	bl	8006dc0 <_ZnwjPKci>
 8010746:	4604      	mov	r4, r0
 8010748:	4629      	mov	r1, r5
 801074a:	4620      	mov	r0, r4
 801074c:	f001 fe36 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010750:	627c      	str	r4, [r7, #36]	; 0x24
 8010752:	f107 0314 	add.w	r3, r7, #20
 8010756:	4618      	mov	r0, r3
 8010758:	f7f7 fdd3 	bl	8008302 <_ZN12SimpleStringD1Ev>
 801075c:	f107 031c 	add.w	r3, r7, #28
 8010760:	4618      	mov	r0, r3
 8010762:	f7f7 fdce 	bl	8008302 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801076a:	4619      	mov	r1, r3
 801076c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801076e:	f001 fe45 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010772:	4602      	mov	r2, r0
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010778:	bf00      	nop
 801077a:	3728      	adds	r7, #40	; 0x28
 801077c:	46bd      	mov	sp, r7
 801077e:	bdb0      	pop	{r4, r5, r7, pc}
 8010780:	080174b4 	.word	0x080174b4
 8010784:	08017e48 	.word	0x08017e48

08010788 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8010788:	b5b0      	push	{r4, r5, r7, lr}
 801078a:	b092      	sub	sp, #72	; 0x48
 801078c:	af02      	add	r7, sp, #8
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	607a      	str	r2, [r7, #4]
 8010794:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8010796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801079a:	494e      	ldr	r1, [pc, #312]	; (80108d4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 801079c:	4618      	mov	r0, r3
 801079e:	f7f7 f9f8 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80107a2:	f107 0020 	add.w	r0, r7, #32
 80107a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107aa:	9301      	str	r3, [sp, #4]
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	68f9      	ldr	r1, [r7, #12]
 80107b6:	f7ff ff4d 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80107ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107be:	4618      	mov	r0, r3
 80107c0:	f7f7 fd9f 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 80107c4:	f107 0310 	add.w	r3, r7, #16
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7f8 fba1 	bl	8008f10 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 80107ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80107d2:	4941      	ldr	r1, [pc, #260]	; (80108d8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7f7 f9dc 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80107da:	f107 0210 	add.w	r2, r7, #16
 80107de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80107e2:	f107 0320 	add.w	r3, r7, #32
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7f7 fb3f 	bl	8007e6a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 80107ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7f7 fd86 	bl	8008302 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 80107f6:	f107 0310 	add.w	r3, r7, #16
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7f8 fc2d 	bl	800905a <_ZNK22SimpleStringCollection4sizeEv>
 8010800:	4603      	mov	r3, r0
 8010802:	2b02      	cmp	r3, #2
 8010804:	bf14      	ite	ne
 8010806:	2301      	movne	r3, #1
 8010808:	2300      	moveq	r3, #0
 801080a:	b2db      	uxtb	r3, r3
 801080c:	2b00      	cmp	r3, #0
 801080e:	d001      	beq.n	8010814 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8010810:	2400      	movs	r4, #0
 8010812:	e04f      	b.n	80108b4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8010814:	f107 0310 	add.w	r3, r7, #16
 8010818:	2100      	movs	r1, #0
 801081a:	4618      	mov	r0, r3
 801081c:	f7f8 fc2a 	bl	8009074 <_ZN22SimpleStringCollectionixEj>
 8010820:	4604      	mov	r4, r0
 8010822:	f107 0310 	add.w	r3, r7, #16
 8010826:	2100      	movs	r1, #0
 8010828:	4618      	mov	r0, r3
 801082a:	f7f8 fc23 	bl	8009074 <_ZN22SimpleStringCollectionixEj>
 801082e:	4603      	mov	r3, r0
 8010830:	4618      	mov	r0, r3
 8010832:	f7f7 fd45 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8010836:	4603      	mov	r3, r0
 8010838:	3b01      	subs	r3, #1
 801083a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801083e:	2200      	movs	r2, #0
 8010840:	4621      	mov	r1, r4
 8010842:	f7f7 fe67 	bl	8008514 <_ZNK12SimpleString9subStringEjj>
 8010846:	f107 0538 	add.w	r5, r7, #56	; 0x38
 801084a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801084e:	4923      	ldr	r1, [pc, #140]	; (80108dc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8010850:	2010      	movs	r0, #16
 8010852:	f7f6 fab5 	bl	8006dc0 <_ZnwjPKci>
 8010856:	4604      	mov	r4, r0
 8010858:	4629      	mov	r1, r5
 801085a:	4620      	mov	r0, r4
 801085c:	f001 fdae 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010864:	4619      	mov	r1, r3
 8010866:	4620      	mov	r0, r4
 8010868:	f001 fdc8 	bl	80123fc <_ZN10TestFilter3addEPS_>
 801086c:	4602      	mov	r2, r0
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	625a      	str	r2, [r3, #36]	; 0x24
 8010872:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010876:	4618      	mov	r0, r3
 8010878:	f7f7 fd43 	bl	8008302 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 801087c:	f107 0310 	add.w	r3, r7, #16
 8010880:	2101      	movs	r1, #1
 8010882:	4618      	mov	r0, r3
 8010884:	f7f8 fbf6 	bl	8009074 <_ZN22SimpleStringCollectionixEj>
 8010888:	4605      	mov	r5, r0
 801088a:	f240 121f 	movw	r2, #287	; 0x11f
 801088e:	4913      	ldr	r1, [pc, #76]	; (80108dc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8010890:	2010      	movs	r0, #16
 8010892:	f7f6 fa95 	bl	8006dc0 <_ZnwjPKci>
 8010896:	4604      	mov	r4, r0
 8010898:	4629      	mov	r1, r5
 801089a:	4620      	mov	r0, r4
 801089c:	f001 fd8e 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108a4:	4619      	mov	r1, r3
 80108a6:	4620      	mov	r0, r4
 80108a8:	f001 fda8 	bl	80123fc <_ZN10TestFilter3addEPS_>
 80108ac:	4602      	mov	r2, r0
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80108b2:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80108b4:	f107 0310 	add.w	r3, r7, #16
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7f8 fb9d 	bl	8008ff8 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80108be:	f107 0320 	add.w	r3, r7, #32
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7f7 fd1d 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80108c8:	4623      	mov	r3, r4
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3740      	adds	r7, #64	; 0x40
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bdb0      	pop	{r4, r5, r7, pc}
 80108d2:	bf00      	nop
 80108d4:	080174b8 	.word	0x080174b8
 80108d8:	08017e68 	.word	0x08017e68
 80108dc:	08017e48 	.word	0x08017e48

080108e0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80108e0:	b5b0      	push	{r4, r5, r7, lr}
 80108e2:	b08c      	sub	sp, #48	; 0x30
 80108e4:	af02      	add	r7, sp, #8
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
 80108ec:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 80108ee:	f107 031c 	add.w	r3, r7, #28
 80108f2:	491c      	ldr	r1, [pc, #112]	; (8010964 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7f7 f94c 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80108fa:	f107 0014 	add.w	r0, r7, #20
 80108fe:	f107 031c 	add.w	r3, r7, #28
 8010902:	9301      	str	r3, [sp, #4]
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	68ba      	ldr	r2, [r7, #8]
 801090c:	68f9      	ldr	r1, [r7, #12]
 801090e:	f7ff fea1 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010912:	f107 0514 	add.w	r5, r7, #20
 8010916:	f240 1225 	movw	r2, #293	; 0x125
 801091a:	4913      	ldr	r1, [pc, #76]	; (8010968 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 801091c:	2010      	movs	r0, #16
 801091e:	f7f6 fa4f 	bl	8006dc0 <_ZnwjPKci>
 8010922:	4604      	mov	r4, r0
 8010924:	4629      	mov	r1, r5
 8010926:	4620      	mov	r0, r4
 8010928:	f001 fd48 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 801092c:	627c      	str	r4, [r7, #36]	; 0x24
 801092e:	f107 0314 	add.w	r3, r7, #20
 8010932:	4618      	mov	r0, r3
 8010934:	f7f7 fce5 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010938:	f107 031c 	add.w	r3, r7, #28
 801093c:	4618      	mov	r0, r3
 801093e:	f7f7 fce0 	bl	8008302 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8010942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010944:	f001 fd75 	bl	8012432 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801094c:	4619      	mov	r1, r3
 801094e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010950:	f001 fd54 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010954:	4602      	mov	r2, r0
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	625a      	str	r2, [r3, #36]	; 0x24
}
 801095a:	bf00      	nop
 801095c:	3728      	adds	r7, #40	; 0x28
 801095e:	46bd      	mov	sp, r7
 8010960:	bdb0      	pop	{r4, r5, r7, pc}
 8010962:	bf00      	nop
 8010964:	080174bc 	.word	0x080174bc
 8010968:	08017e48 	.word	0x08017e48

0801096c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 801096c:	b5b0      	push	{r4, r5, r7, lr}
 801096e:	b08c      	sub	sp, #48	; 0x30
 8010970:	af02      	add	r7, sp, #8
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	607a      	str	r2, [r7, #4]
 8010978:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 801097a:	f107 031c 	add.w	r3, r7, #28
 801097e:	491c      	ldr	r1, [pc, #112]	; (80109f0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8010980:	4618      	mov	r0, r3
 8010982:	f7f7 f906 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010986:	f107 0014 	add.w	r0, r7, #20
 801098a:	f107 031c 	add.w	r3, r7, #28
 801098e:	9301      	str	r3, [sp, #4]
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	68f9      	ldr	r1, [r7, #12]
 801099a:	f7ff fe5b 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801099e:	f107 0514 	add.w	r5, r7, #20
 80109a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80109a6:	4913      	ldr	r1, [pc, #76]	; (80109f4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80109a8:	2010      	movs	r0, #16
 80109aa:	f7f6 fa09 	bl	8006dc0 <_ZnwjPKci>
 80109ae:	4604      	mov	r4, r0
 80109b0:	4629      	mov	r1, r5
 80109b2:	4620      	mov	r0, r4
 80109b4:	f001 fd02 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 80109b8:	627c      	str	r4, [r7, #36]	; 0x24
 80109ba:	f107 0314 	add.w	r3, r7, #20
 80109be:	4618      	mov	r0, r3
 80109c0:	f7f7 fc9f 	bl	8008302 <_ZN12SimpleStringD1Ev>
 80109c4:	f107 031c 	add.w	r3, r7, #28
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7f7 fc9a 	bl	8008302 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 80109ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109d0:	f001 fd3c 	bl	801244c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d8:	4619      	mov	r1, r3
 80109da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109dc:	f001 fd0e 	bl	80123fc <_ZN10TestFilter3addEPS_>
 80109e0:	4602      	mov	r2, r0
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80109e6:	bf00      	nop
 80109e8:	3728      	adds	r7, #40	; 0x28
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bdb0      	pop	{r4, r5, r7, pc}
 80109ee:	bf00      	nop
 80109f0:	080174c0 	.word	0x080174c0
 80109f4:	08017e48 	.word	0x08017e48

080109f8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80109f8:	b5b0      	push	{r4, r5, r7, lr}
 80109fa:	b08c      	sub	sp, #48	; 0x30
 80109fc:	af02      	add	r7, sp, #8
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	60b9      	str	r1, [r7, #8]
 8010a02:	607a      	str	r2, [r7, #4]
 8010a04:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8010a06:	f107 031c 	add.w	r3, r7, #28
 8010a0a:	491d      	ldr	r1, [pc, #116]	; (8010a80 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7f7 f8c0 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010a12:	f107 0014 	add.w	r0, r7, #20
 8010a16:	f107 031c 	add.w	r3, r7, #28
 8010a1a:	9301      	str	r3, [sp, #4]
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	9300      	str	r3, [sp, #0]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	68ba      	ldr	r2, [r7, #8]
 8010a24:	68f9      	ldr	r1, [r7, #12]
 8010a26:	f7ff fe15 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010a2a:	f107 0514 	add.w	r5, r7, #20
 8010a2e:	f240 1233 	movw	r2, #307	; 0x133
 8010a32:	4914      	ldr	r1, [pc, #80]	; (8010a84 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8010a34:	2010      	movs	r0, #16
 8010a36:	f7f6 f9c3 	bl	8006dc0 <_ZnwjPKci>
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f001 fcbc 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010a44:	627c      	str	r4, [r7, #36]	; 0x24
 8010a46:	f107 0314 	add.w	r3, r7, #20
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7f7 fc59 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010a50:	f107 031c 	add.w	r3, r7, #28
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7f7 fc54 	bl	8008302 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8010a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a5c:	f001 fce9 	bl	8012432 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8010a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a62:	f001 fcf3 	bl	801244c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a6e:	f001 fcc5 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010a72:	4602      	mov	r2, r0
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010a78:	bf00      	nop
 8010a7a:	3728      	adds	r7, #40	; 0x28
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8010a80:	080174c4 	.word	0x080174c4
 8010a84:	08017e48 	.word	0x08017e48

08010a88 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8010a88:	b5b0      	push	{r4, r5, r7, lr}
 8010a8a:	b08c      	sub	sp, #48	; 0x30
 8010a8c:	af02      	add	r7, sp, #8
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
 8010a94:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8010a96:	f107 031c 	add.w	r3, r7, #28
 8010a9a:	491a      	ldr	r1, [pc, #104]	; (8010b04 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7f7 f878 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010aa2:	f107 0014 	add.w	r0, r7, #20
 8010aa6:	f107 031c 	add.w	r3, r7, #28
 8010aaa:	9301      	str	r3, [sp, #4]
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	68f9      	ldr	r1, [r7, #12]
 8010ab6:	f7ff fdcd 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010aba:	f107 0514 	add.w	r5, r7, #20
 8010abe:	f240 123b 	movw	r2, #315	; 0x13b
 8010ac2:	4911      	ldr	r1, [pc, #68]	; (8010b08 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8010ac4:	2010      	movs	r0, #16
 8010ac6:	f7f6 f97b 	bl	8006dc0 <_ZnwjPKci>
 8010aca:	4604      	mov	r4, r0
 8010acc:	4629      	mov	r1, r5
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f001 fc74 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010ad4:	627c      	str	r4, [r7, #36]	; 0x24
 8010ad6:	f107 0314 	add.w	r3, r7, #20
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7f7 fc11 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010ae0:	f107 031c 	add.w	r3, r7, #28
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7f7 fc0c 	bl	8008302 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aee:	4619      	mov	r1, r3
 8010af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010af2:	f001 fc83 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010af6:	4602      	mov	r2, r0
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010afc:	bf00      	nop
 8010afe:	3728      	adds	r7, #40	; 0x28
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bdb0      	pop	{r4, r5, r7, pc}
 8010b04:	080174cc 	.word	0x080174cc
 8010b08:	08017e48 	.word	0x08017e48

08010b0c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8010b0c:	b5b0      	push	{r4, r5, r7, lr}
 8010b0e:	b08c      	sub	sp, #48	; 0x30
 8010b10:	af02      	add	r7, sp, #8
 8010b12:	60f8      	str	r0, [r7, #12]
 8010b14:	60b9      	str	r1, [r7, #8]
 8010b16:	607a      	str	r2, [r7, #4]
 8010b18:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8010b1a:	f107 031c 	add.w	r3, r7, #28
 8010b1e:	491c      	ldr	r1, [pc, #112]	; (8010b90 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7f7 f836 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010b26:	f107 0014 	add.w	r0, r7, #20
 8010b2a:	f107 031c 	add.w	r3, r7, #28
 8010b2e:	9301      	str	r3, [sp, #4]
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	9300      	str	r3, [sp, #0]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	68f9      	ldr	r1, [r7, #12]
 8010b3a:	f7ff fd8b 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010b3e:	f107 0514 	add.w	r5, r7, #20
 8010b42:	f240 1241 	movw	r2, #321	; 0x141
 8010b46:	4913      	ldr	r1, [pc, #76]	; (8010b94 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8010b48:	2010      	movs	r0, #16
 8010b4a:	f7f6 f939 	bl	8006dc0 <_ZnwjPKci>
 8010b4e:	4604      	mov	r4, r0
 8010b50:	4629      	mov	r1, r5
 8010b52:	4620      	mov	r0, r4
 8010b54:	f001 fc32 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010b58:	627c      	str	r4, [r7, #36]	; 0x24
 8010b5a:	f107 0314 	add.w	r3, r7, #20
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7f7 fbcf 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010b64:	f107 031c 	add.w	r3, r7, #28
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7f7 fbca 	bl	8008302 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 8010b6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b70:	f001 fc5f 	bl	8012432 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b78:	4619      	mov	r1, r3
 8010b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b7c:	f001 fc3e 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010b80:	4602      	mov	r2, r0
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010b86:	bf00      	nop
 8010b88:	3728      	adds	r7, #40	; 0x28
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	080174d0 	.word	0x080174d0
 8010b94:	08017e48 	.word	0x08017e48

08010b98 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8010b98:	b5b0      	push	{r4, r5, r7, lr}
 8010b9a:	b08c      	sub	sp, #48	; 0x30
 8010b9c:	af02      	add	r7, sp, #8
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	60b9      	str	r1, [r7, #8]
 8010ba2:	607a      	str	r2, [r7, #4]
 8010ba4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8010ba6:	f107 031c 	add.w	r3, r7, #28
 8010baa:	491c      	ldr	r1, [pc, #112]	; (8010c1c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7f6 fff0 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010bb2:	f107 0014 	add.w	r0, r7, #20
 8010bb6:	f107 031c 	add.w	r3, r7, #28
 8010bba:	9301      	str	r3, [sp, #4]
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	9300      	str	r3, [sp, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	68ba      	ldr	r2, [r7, #8]
 8010bc4:	68f9      	ldr	r1, [r7, #12]
 8010bc6:	f7ff fd45 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010bca:	f107 0514 	add.w	r5, r7, #20
 8010bce:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8010bd2:	4913      	ldr	r1, [pc, #76]	; (8010c20 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8010bd4:	2010      	movs	r0, #16
 8010bd6:	f7f6 f8f3 	bl	8006dc0 <_ZnwjPKci>
 8010bda:	4604      	mov	r4, r0
 8010bdc:	4629      	mov	r1, r5
 8010bde:	4620      	mov	r0, r4
 8010be0:	f001 fbec 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010be4:	627c      	str	r4, [r7, #36]	; 0x24
 8010be6:	f107 0314 	add.w	r3, r7, #20
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7f7 fb89 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010bf0:	f107 031c 	add.w	r3, r7, #28
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7f7 fb84 	bl	8008302 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8010bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bfc:	f001 fc26 	bl	801244c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c04:	4619      	mov	r1, r3
 8010c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c08:	f001 fbf8 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010c12:	bf00      	nop
 8010c14:	3728      	adds	r7, #40	; 0x28
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bdb0      	pop	{r4, r5, r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	080174d4 	.word	0x080174d4
 8010c20:	08017e48 	.word	0x08017e48

08010c24 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8010c24:	b5b0      	push	{r4, r5, r7, lr}
 8010c26:	b08c      	sub	sp, #48	; 0x30
 8010c28:	af02      	add	r7, sp, #8
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	60b9      	str	r1, [r7, #8]
 8010c2e:	607a      	str	r2, [r7, #4]
 8010c30:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8010c32:	f107 031c 	add.w	r3, r7, #28
 8010c36:	491d      	ldr	r1, [pc, #116]	; (8010cac <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7f6 ffaa 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010c3e:	f107 0014 	add.w	r0, r7, #20
 8010c42:	f107 031c 	add.w	r3, r7, #28
 8010c46:	9301      	str	r3, [sp, #4]
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	9300      	str	r3, [sp, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	68ba      	ldr	r2, [r7, #8]
 8010c50:	68f9      	ldr	r1, [r7, #12]
 8010c52:	f7ff fcff 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010c56:	f107 0514 	add.w	r5, r7, #20
 8010c5a:	f240 124f 	movw	r2, #335	; 0x14f
 8010c5e:	4914      	ldr	r1, [pc, #80]	; (8010cb0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8010c60:	2010      	movs	r0, #16
 8010c62:	f7f6 f8ad 	bl	8006dc0 <_ZnwjPKci>
 8010c66:	4604      	mov	r4, r0
 8010c68:	4629      	mov	r1, r5
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f001 fba6 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010c70:	627c      	str	r4, [r7, #36]	; 0x24
 8010c72:	f107 0314 	add.w	r3, r7, #20
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7f7 fb43 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010c7c:	f107 031c 	add.w	r3, r7, #28
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7f7 fb3e 	bl	8008302 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8010c86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c88:	f001 fbe0 	bl	801244c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8010c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c8e:	f001 fbd0 	bl	8012432 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c96:	4619      	mov	r1, r3
 8010c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c9a:	f001 fbaf 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010ca4:	bf00      	nop
 8010ca6:	3728      	adds	r7, #40	; 0x28
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bdb0      	pop	{r4, r5, r7, pc}
 8010cac:	080174d8 	.word	0x080174d8
 8010cb0:	08017e48 	.word	0x08017e48

08010cb4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8010cb4:	b5b0      	push	{r4, r5, r7, lr}
 8010cb6:	b092      	sub	sp, #72	; 0x48
 8010cb8:	af02      	add	r7, sp, #8
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	607a      	str	r2, [r7, #4]
 8010cc0:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8010cc2:	f107 0320 	add.w	r3, r7, #32
 8010cc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7f6 ff62 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010cce:	f107 0018 	add.w	r0, r7, #24
 8010cd2:	f107 0320 	add.w	r3, r7, #32
 8010cd6:	9301      	str	r3, [sp, #4]
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	9300      	str	r3, [sp, #0]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	68ba      	ldr	r2, [r7, #8]
 8010ce0:	68f9      	ldr	r1, [r7, #12]
 8010ce2:	f7ff fcb7 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010ce6:	f107 0320 	add.w	r3, r7, #32
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7f7 fb09 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8010cf0:	f107 0010 	add.w	r0, r7, #16
 8010cf4:	f107 0118 	add.w	r1, r7, #24
 8010cf8:	2329      	movs	r3, #41	; 0x29
 8010cfa:	222c      	movs	r2, #44	; 0x2c
 8010cfc:	f7f7 fcb2 	bl	8008664 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8010d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010d04:	f107 0110 	add.w	r1, r7, #16
 8010d08:	2202      	movs	r2, #2
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7f7 fc4c 	bl	80085a8 <_ZNK12SimpleString9subStringEj>
 8010d10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d14:	f107 0310 	add.w	r3, r7, #16
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7f6 ffa5 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
 8010d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7f7 faec 	bl	8008302 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8010d2a:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8010d2e:	492a      	ldr	r1, [pc, #168]	; (8010dd8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8010d30:	2010      	movs	r0, #16
 8010d32:	f7f6 f845 	bl	8006dc0 <_ZnwjPKci>
 8010d36:	4604      	mov	r4, r0
 8010d38:	f107 0310 	add.w	r3, r7, #16
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f001 fb3c 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010d44:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8010d46:	f107 0318 	add.w	r3, r7, #24
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7f7 fc3c 	bl	80085ca <_ZNK12SimpleString2atEj>
 8010d52:	4603      	mov	r3, r0
 8010d54:	461a      	mov	r2, r3
 8010d56:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010d5a:	f107 0118 	add.w	r1, r7, #24
 8010d5e:	232c      	movs	r3, #44	; 0x2c
 8010d60:	f7f7 fc80 	bl	8008664 <_ZNK12SimpleString17subStringFromTillEcc>
 8010d64:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8010d68:	f240 125b 	movw	r2, #347	; 0x15b
 8010d6c:	491a      	ldr	r1, [pc, #104]	; (8010dd8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8010d6e:	2010      	movs	r0, #16
 8010d70:	f7f6 f826 	bl	8006dc0 <_ZnwjPKci>
 8010d74:	4604      	mov	r4, r0
 8010d76:	4629      	mov	r1, r5
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f001 fb1f 	bl	80123bc <_ZN10TestFilterC1ERK12SimpleString>
 8010d7e:	63bc      	str	r4, [r7, #56]	; 0x38
 8010d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7f7 fabc 	bl	8008302 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8010d8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010d8c:	f001 fb51 	bl	8012432 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8010d90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d92:	f001 fb4e 	bl	8012432 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d9e:	f001 fb2d 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010da2:	4602      	mov	r2, r0
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dac:	4619      	mov	r1, r3
 8010dae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010db0:	f001 fb24 	bl	80123fc <_ZN10TestFilter3addEPS_>
 8010db4:	4602      	mov	r2, r0
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8010dba:	f107 0310 	add.w	r3, r7, #16
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7f7 fa9f 	bl	8008302 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8010dc4:	f107 0318 	add.w	r3, r7, #24
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7f7 fa9a 	bl	8008302 <_ZN12SimpleStringD1Ev>
}
 8010dce:	bf00      	nop
 8010dd0:	3740      	adds	r7, #64	; 0x40
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8010dd6:	bf00      	nop
 8010dd8:	08017e48 	.word	0x08017e48

08010ddc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8010ddc:	b590      	push	{r4, r7, lr}
 8010dde:	b08b      	sub	sp, #44	; 0x2c
 8010de0:	af02      	add	r7, sp, #8
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	60b9      	str	r1, [r7, #8]
 8010de6:	607a      	str	r2, [r7, #4]
 8010de8:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8010dea:	f107 0318 	add.w	r3, r7, #24
 8010dee:	491b      	ldr	r1, [pc, #108]	; (8010e5c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f6 fece 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010df6:	f107 0010 	add.w	r0, r7, #16
 8010dfa:	f107 0318 	add.w	r3, r7, #24
 8010dfe:	9301      	str	r3, [sp, #4]
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	9300      	str	r3, [sp, #0]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	68f9      	ldr	r1, [r7, #12]
 8010e0a:	f7ff fc23 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010e0e:	f107 0318 	add.w	r3, r7, #24
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7f7 fa75 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8010e18:	f107 0310 	add.w	r3, r7, #16
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7f7 fa4f 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	bf0c      	ite	eq
 8010e28:	2301      	moveq	r3, #1
 8010e2a:	2300      	movne	r3, #0
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d001      	beq.n	8010e36 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8010e32:	2400      	movs	r4, #0
 8010e34:	e008      	b.n	8010e48 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	3330      	adds	r3, #48	; 0x30
 8010e3a:	f107 0210 	add.w	r2, r7, #16
 8010e3e:	4611      	mov	r1, r2
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7f6 ff12 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8010e46:	2401      	movs	r4, #1
 8010e48:	f107 0310 	add.w	r3, r7, #16
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7f7 fa58 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010e52:	2c01      	cmp	r4, #1
}
 8010e54:	3724      	adds	r7, #36	; 0x24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd90      	pop	{r4, r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	08017500 	.word	0x08017500

08010e60 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8010e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e62:	b093      	sub	sp, #76	; 0x4c
 8010e64:	af02      	add	r7, sp, #8
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	607a      	str	r2, [r7, #4]
 8010e6c:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8010e6e:	f107 0318 	add.w	r3, r7, #24
 8010e72:	4953      	ldr	r1, [pc, #332]	; (8010fc0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7f6 fe8c 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010e7a:	f107 0010 	add.w	r0, r7, #16
 8010e7e:	f107 0318 	add.w	r3, r7, #24
 8010e82:	9301      	str	r3, [sp, #4]
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	68ba      	ldr	r2, [r7, #8]
 8010e8c:	68f9      	ldr	r1, [r7, #12]
 8010e8e:	f7ff fbe1 	bl	8010654 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010e92:	f107 0318 	add.w	r3, r7, #24
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7f7 fa33 	bl	8008302 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8010e9c:	f107 0310 	add.w	r3, r7, #16
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7f7 fa0d 	bl	80082c0 <_ZNK12SimpleString4sizeEv>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	bf0c      	ite	eq
 8010eac:	2301      	moveq	r3, #1
 8010eae:	2300      	movne	r3, #0
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d001      	beq.n	8010eba <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8010eb6:	2400      	movs	r4, #0
 8010eb8:	e078      	b.n	8010fac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8010eba:	2500      	movs	r5, #0
 8010ebc:	f107 0320 	add.w	r3, r7, #32
 8010ec0:	4940      	ldr	r1, [pc, #256]	; (8010fc4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7f6 fe65 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010ec8:	2601      	movs	r6, #1
 8010eca:	f107 0220 	add.w	r2, r7, #32
 8010ece:	f107 0310 	add.w	r3, r7, #16
 8010ed2:	4611      	mov	r1, r2
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7f7 fa20 	bl	800831a <_ZeqRK12SimpleStringS1_>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d111      	bne.n	8010f04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8010ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ee4:	4938      	ldr	r1, [pc, #224]	; (8010fc8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7f6 fe53 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010eec:	2501      	movs	r5, #1
 8010eee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ef2:	f107 0310 	add.w	r3, r7, #16
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7f7 fa0e 	bl	800831a <_ZeqRK12SimpleStringS1_>
 8010efe:	4603      	mov	r3, r0
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d001      	beq.n	8010f08 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8010f04:	2401      	movs	r4, #1
 8010f06:	e000      	b.n	8010f0a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8010f08:	2400      	movs	r4, #0
 8010f0a:	2d00      	cmp	r5, #0
 8010f0c:	d004      	beq.n	8010f18 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8010f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7f7 f9f5 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010f18:	2e00      	cmp	r6, #0
 8010f1a:	d004      	beq.n	8010f26 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8010f1c:	f107 0320 	add.w	r3, r7, #32
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7f7 f9ee 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010f26:	2c00      	cmp	r4, #0
 8010f28:	d005      	beq.n	8010f36 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010f32:	2401      	movs	r4, #1
 8010f34:	e03a      	b.n	8010fac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8010f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010f3a:	4924      	ldr	r1, [pc, #144]	; (8010fcc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7f6 fe28 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010f42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f46:	f107 0310 	add.w	r3, r7, #16
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7f7 f9e4 	bl	800831a <_ZeqRK12SimpleStringS1_>
 8010f52:	4603      	mov	r3, r0
 8010f54:	461c      	mov	r4, r3
 8010f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7f7 f9d1 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010f60:	2c00      	cmp	r4, #0
 8010f62:	d005      	beq.n	8010f70 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2201      	movs	r2, #1
 8010f68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010f6c:	2401      	movs	r4, #1
 8010f6e:	e01d      	b.n	8010fac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8010f70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f74:	4916      	ldr	r1, [pc, #88]	; (8010fd0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7f6 fe0b 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 8010f7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010f80:	f107 0310 	add.w	r3, r7, #16
 8010f84:	4611      	mov	r1, r2
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7f7 f9c7 	bl	800831a <_ZeqRK12SimpleStringS1_>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	461c      	mov	r4, r3
 8010f90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7f7 f9b4 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010f9a:	2c00      	cmp	r4, #0
 8010f9c:	d005      	beq.n	8010faa <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2202      	movs	r2, #2
 8010fa2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010fa6:	2401      	movs	r4, #1
 8010fa8:	e000      	b.n	8010fac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8010faa:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8010fac:	f107 0310 	add.w	r3, r7, #16
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7f7 f9a6 	bl	8008302 <_ZN12SimpleStringD1Ev>
 8010fb6:	4623      	mov	r3, r4
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3744      	adds	r7, #68	; 0x44
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fc0:	080174fc 	.word	0x080174fc
 8010fc4:	08017e6c 	.word	0x08017e6c
 8010fc8:	08017e74 	.word	0x08017e74
 8010fcc:	08017e7c 	.word	0x08017e7c
 8010fd0:	08017e84 	.word	0x08017e84

08010fd4 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	bf0c      	ite	eq
 8010fe6:	2301      	moveq	r3, #1
 8010fe8:	2300      	movne	r3, #0
 8010fea:	b2db      	uxtb	r3, r3
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b083      	sub	sp, #12
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011006:	2b02      	cmp	r3, #2
 8011008:	bf0c      	ite	eq
 801100a:	2301      	moveq	r3, #1
 801100c:	2300      	movne	r3, #0
 801100e:	b2db      	uxtb	r3, r3
}
 8011010:	4618      	mov	r0, r3
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr

0801101c <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
    return packageName_;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	3330      	adds	r3, #48	; 0x30
}
 8011028:	4618      	mov	r0, r3
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2200      	movs	r2, #0
 8011040:	601a      	str	r2, [r3, #0]
    {}
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4618      	mov	r0, r3
 8011046:	370c      	adds	r7, #12
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801105e:	2200      	movs	r2, #0
 8011060:	601a      	str	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011068:	3304      	adds	r3, #4
 801106a:	f640 72ff 	movw	r2, #4095	; 0xfff
 801106e:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	701a      	strb	r2, [r3, #0]
}
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4618      	mov	r0, r3
 801107a:	370c      	adds	r7, #12
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2200      	movs	r2, #0
 801109a:	701a      	strb	r2, [r3, #0]
}
 801109c:	bf00      	nop
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 80110a8:	b40e      	push	{r1, r2, r3}
 80110aa:	b590      	push	{r4, r7, lr}
 80110ac:	b086      	sub	sp, #24
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110b8:	3304      	adds	r3, #4
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	1ad3      	subs	r3, r2, r3
 80110c6:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d032      	beq.n	8011134 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 80110ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110d2:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 80110d4:	4b1b      	ldr	r3, [pc, #108]	; (8011144 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 80110d6:	681c      	ldr	r4, [r3, #0]
 80110d8:	687a      	ldr	r2, [r7, #4]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	18d0      	adds	r0, r2, r3
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	1c59      	adds	r1, r3, #1
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110ec:	47a0      	blx	r4
 80110ee:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	dd09      	ble.n	801110a <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	441a      	add	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011108:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011118:	3304      	adds	r3, #4
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	429a      	cmp	r2, r3
 801111e:	d90a      	bls.n	8011136 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011126:	3304      	adds	r3, #4
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011130:	601a      	str	r2, [r3, #0]
 8011132:	e000      	b.n	8011136 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8011134:	bf00      	nop
    va_end(arguments);
}
 8011136:	3718      	adds	r7, #24
 8011138:	46bd      	mov	sp, r7
 801113a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801113e:	b003      	add	sp, #12
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	200000ac 	.word	0x200000ac

08011148 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b08c      	sub	sp, #48	; 0x30
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8011158:	2310      	movs	r3, #16
 801115a:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8011160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	429a      	cmp	r2, r3
 8011166:	d273      	bcs.n	8011250 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8011168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801116a:	493b      	ldr	r1, [pc, #236]	; (8011258 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 801116c:	68f8      	ldr	r0, [r7, #12]
 801116e:	f7ff ff9b 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	1ad3      	subs	r3, r2, r3
 8011178:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 801117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801117c:	2b10      	cmp	r3, #16
 801117e:	d901      	bls.n	8011184 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8011180:	2310      	movs	r3, #16
 8011182:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011186:	f1c3 0310 	rsb	r3, r3, #16
 801118a:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 801118c:	2300      	movs	r3, #0
 801118e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011194:	429a      	cmp	r2, r3
 8011196:	d215      	bcs.n	80111c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8011198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119c:	4413      	add	r3, r2
 801119e:	69fa      	ldr	r2, [r7, #28]
 80111a0:	4413      	add	r3, r2
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	461a      	mov	r2, r3
 80111a6:	492d      	ldr	r1, [pc, #180]	; (801125c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 80111a8:	68f8      	ldr	r0, [r7, #12]
 80111aa:	f7ff ff7d 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 80111ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b0:	2b07      	cmp	r3, #7
 80111b2:	d103      	bne.n	80111bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 80111b4:	492a      	ldr	r1, [pc, #168]	; (8011260 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80111b6:	68f8      	ldr	r0, [r7, #12]
 80111b8:	f7ff ff76 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80111bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111be:	3301      	adds	r3, #1
 80111c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80111c2:	e7e5      	b.n	8011190 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 80111c4:	2300      	movs	r3, #0
 80111c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80111c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d207      	bcs.n	80111e0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 80111d0:	4924      	ldr	r1, [pc, #144]	; (8011264 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 80111d2:	68f8      	ldr	r0, [r7, #12]
 80111d4:	f7ff ff68 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 80111d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111da:	3301      	adds	r3, #1
 80111dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80111de:	e7f3      	b.n	80111c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	2b08      	cmp	r3, #8
 80111e4:	d903      	bls.n	80111ee <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 80111e6:	491e      	ldr	r1, [pc, #120]	; (8011260 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80111e8:	68f8      	ldr	r0, [r7, #12]
 80111ea:	f7ff ff5d 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 80111ee:	491e      	ldr	r1, [pc, #120]	; (8011268 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f7ff ff59 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80111f6:	2300      	movs	r3, #0
 80111f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80111fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fe:	429a      	cmp	r2, r3
 8011200:	d21d      	bcs.n	801123e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8011202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011206:	4413      	add	r3, r2
 8011208:	69fa      	ldr	r2, [r7, #28]
 801120a:	4413      	add	r3, r2
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8011212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011216:	2b1f      	cmp	r3, #31
 8011218:	d903      	bls.n	8011222 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 801121a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801121e:	2b7e      	cmp	r3, #126	; 0x7e
 8011220:	d902      	bls.n	8011228 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8011222:	232e      	movs	r3, #46	; 0x2e
 8011224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8011228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801122c:	461a      	mov	r2, r3
 801122e:	490f      	ldr	r1, [pc, #60]	; (801126c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f7ff ff39 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8011236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011238:	3301      	adds	r3, #1
 801123a:	62bb      	str	r3, [r7, #40]	; 0x28
 801123c:	e7dd      	b.n	80111fa <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 801123e:	490c      	ldr	r1, [pc, #48]	; (8011270 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	f7ff ff31 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8011246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124a:	4413      	add	r3, r2
 801124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 801124e:	e787      	b.n	8011160 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8011250:	bf00      	nop
 8011252:	3730      	adds	r7, #48	; 0x30
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	08017e9c 	.word	0x08017e9c
 801125c:	08017ea8 	.word	0x08017ea8
 8011260:	08017eb0 	.word	0x08017eb0
 8011264:	08017eb4 	.word	0x08017eb4
 8011268:	08017eb8 	.word	0x08017eb8
 801126c:	08017ebc 	.word	0x08017ebc
 8011270:	08017ec0 	.word	0x08017ec0

08011274 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8011274:	b480      	push	{r7}
 8011276:	b083      	sub	sp, #12
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
    return buffer_;
 801127c:	687b      	ldr	r3, [r7, #4]
}
 801127e:	4618      	mov	r0, r3
 8011280:	370c      	adds	r7, #12
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr

0801128a <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 801128a:	b480      	push	{r7}
 801128c:	b083      	sub	sp, #12
 801128e:	af00      	add	r7, sp, #0
 8011290:	6078      	str	r0, [r7, #4]
 8011292:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801129a:	3304      	adds	r3, #4
 801129c:	683a      	ldr	r2, [r7, #0]
 801129e:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112a6:	3304      	adds	r3, #4
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80112ae:	d306      	bcc.n	80112be <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112b6:	3304      	adds	r3, #4
 80112b8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80112bc:	601a      	str	r2, [r3, #0]
}
 80112be:	bf00      	nop
 80112c0:	370c      	adds	r7, #12
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr

080112ca <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 80112ca:	b480      	push	{r7}
 80112cc:	b083      	sub	sp, #12
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112d8:	3304      	adds	r3, #4
 80112da:	f640 72ff 	movw	r2, #4095	; 0xfff
 80112de:	601a      	str	r2, [r3, #0]
}
 80112e0:	bf00      	nop
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011302:	3304      	adds	r3, #4
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	429a      	cmp	r2, r3
 8011308:	bf2c      	ite	cs
 801130a:	2301      	movcs	r3, #1
 801130c:	2300      	movcc	r3, #0
 801130e:	b2db      	uxtb	r3, r3
}
 8011310:	4618      	mov	r0, r3
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr

0801131c <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	601a      	str	r2, [r3, #0]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2200      	movs	r2, #0
 801132e:	711a      	strb	r2, [r3, #4]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	3308      	adds	r3, #8
 8011334:	4618      	mov	r0, r3
 8011336:	f7ff fe8b 	bl	8011050 <_ZN18SimpleStringBufferC1Ev>
{
}
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	4618      	mov	r0, r3
 801133e:	3708      	adds	r7, #8
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8011344:	b5b0      	push	{r4, r5, r7, lr}
 8011346:	b086      	sub	sp, #24
 8011348:	af02      	add	r7, sp, #8
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f103 0408 	add.w	r4, r3, #8
 8011358:	687d      	ldr	r5, [r7, #4]
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	3314      	adds	r3, #20
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	6a38      	ldr	r0, [r7, #32]
 8011364:	4798      	blx	r3
 8011366:	4603      	mov	r3, r0
 8011368:	9301      	str	r3, [sp, #4]
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	462b      	mov	r3, r5
 8011370:	68ba      	ldr	r2, [r7, #8]
 8011372:	4904      	ldr	r1, [pc, #16]	; (8011384 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8011374:	4620      	mov	r0, r4
 8011376:	f7ff fe97 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801137a:	bf00      	nop
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bdb0      	pop	{r4, r5, r7, pc}
 8011382:	bf00      	nop
 8011384:	08017ec4 	.word	0x08017ec4

08011388 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8011388:	b5b0      	push	{r4, r5, r7, lr}
 801138a:	b086      	sub	sp, #24
 801138c:	af02      	add	r7, sp, #8
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	607a      	str	r2, [r7, #4]
 8011394:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	f103 0408 	add.w	r4, r3, #8
 801139c:	687d      	ldr	r5, [r7, #4]
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	3318      	adds	r3, #24
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	6838      	ldr	r0, [r7, #0]
 80113a8:	4798      	blx	r3
 80113aa:	4603      	mov	r3, r0
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	462b      	mov	r3, r5
 80113b0:	68ba      	ldr	r2, [r7, #8]
 80113b2:	4904      	ldr	r1, [pc, #16]	; (80113c4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff fe77 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80113ba:	bf00      	nop
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bdb0      	pop	{r4, r5, r7, pc}
 80113c2:	bf00      	nop
 80113c4:	08017efc 	.word	0x08017efc

080113c8 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	3308      	adds	r3, #8
 80113d4:	4903      	ldr	r1, [pc, #12]	; (80113e4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7ff fe66 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80113dc:	bf00      	nop
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	08017f2c 	.word	0x08017f2c

080113e8 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2200      	movs	r2, #0
 80113f4:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2200      	movs	r2, #0
 80113fa:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 80113fc:	2367      	movs	r3, #103	; 0x67
 80113fe:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f203 1311 	addw	r3, r3, #273	; 0x111
 8011406:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f103 0208 	add.w	r2, r3, #8
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8011414:	4619      	mov	r1, r3
 8011416:	4610      	mov	r0, r2
 8011418:	f7ff ff37 	bl	801128a <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 801141c:	bf00      	nop
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8011424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011426:	b089      	sub	sp, #36	; 0x24
 8011428:	af04      	add	r7, sp, #16
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d102      	bne.n	801143c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f000 f882 	bl	8011540 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	1c5a      	adds	r2, r3, #1
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f103 0508 	add.w	r5, r3, #8
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801145e:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	695a      	ldr	r2, [r3, #20]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	695b      	ldr	r3, [r3, #20]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	3314      	adds	r3, #20
 801146c:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801146e:	4610      	mov	r0, r2
 8011470:	4798      	blx	r3
 8011472:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8011478:	9303      	str	r3, [sp, #12]
 801147a:	9202      	str	r2, [sp, #8]
 801147c:	683a      	ldr	r2, [r7, #0]
 801147e:	9201      	str	r2, [sp, #4]
 8011480:	9400      	str	r4, [sp, #0]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4632      	mov	r2, r6
 8011486:	4915      	ldr	r1, [pc, #84]	; (80114dc <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8011488:	4628      	mov	r0, r5
 801148a:	f7ff fe0d 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	f103 0008 	add.w	r0, r3, #8
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	6899      	ldr	r1, [r3, #8]
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	461a      	mov	r2, r3
 801149e:	f7ff fe53 	bl	8011148 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	695a      	ldr	r2, [r3, #20]
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	695b      	ldr	r3, [r3, #20]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	3314      	adds	r3, #20
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4610      	mov	r0, r2
 80114b2:	4798      	blx	r3
 80114b4:	4603      	mov	r3, r0
 80114b6:	490a      	ldr	r1, [pc, #40]	; (80114e0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7f6 f9a7 	bl	800780c <_ZN12SimpleString6StrCmpEPKcS1_>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	bf0c      	ite	eq
 80114c4:	2301      	moveq	r3, #1
 80114c6:	2300      	movne	r3, #0
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d002      	beq.n	80114d4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2201      	movs	r2, #1
 80114d2:	711a      	strb	r2, [r3, #4]
}
 80114d4:	bf00      	nop
 80114d6:	3714      	adds	r7, #20
 80114d8:	46bd      	mov	sp, r7
 80114da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114dc:	08017f4c 	.word	0x08017f4c
 80114e0:	08017fac 	.word	0x08017fac

080114e4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d103      	bne.n	80114fc <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f7ff ff67 	bl	80113c8 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 80114fa:	e01e      	b.n	801153a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	3308      	adds	r3, #8
 8011500:	4618      	mov	r0, r3
 8011502:	f7ff fef3 	bl	80112ec <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8011506:	4603      	mov	r3, r0
 8011508:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	3308      	adds	r3, #8
 801150e:	4618      	mov	r0, r3
 8011510:	f7ff fedb 	bl	80112ca <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8011514:	7bfb      	ldrb	r3, [r7, #15]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d002      	beq.n	8011520 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 f820 	bl	8011560 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	4619      	mov	r1, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 f82a 	bl	8011580 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	791b      	ldrb	r3, [r3, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d002      	beq.n	801153a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f000 f839 	bl	80115ac <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801153a:	3710      	adds	r7, #16
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	3308      	adds	r3, #8
 801154c:	4903      	ldr	r1, [pc, #12]	; (801155c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 801154e:	4618      	mov	r0, r3
 8011550:	f7ff fdaa 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8011554:	bf00      	nop
 8011556:	3708      	adds	r7, #8
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	08017fb4 	.word	0x08017fb4

08011560 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	3308      	adds	r3, #8
 801156c:	4903      	ldr	r1, [pc, #12]	; (801157c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 801156e:	4618      	mov	r0, r3
 8011570:	f7ff fd9a 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8011574:	bf00      	nop
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	08017fcc 	.word	0x08017fcc

08011580 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f103 0008 	add.w	r0, r3, #8
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	4a04      	ldr	r2, [pc, #16]	; (80115a4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8011594:	4904      	ldr	r1, [pc, #16]	; (80115a8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8011596:	f7ff fd87 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801159a:	bf00      	nop
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	08018014 	.word	0x08018014
 80115a8:	0801802c 	.word	0x0801802c

080115ac <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b082      	sub	sp, #8
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	3308      	adds	r3, #8
 80115b8:	4903      	ldr	r1, [pc, #12]	; (80115c8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7ff fd74 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80115c0:	bf00      	nop
 80115c2:	3708      	adds	r7, #8
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	08018034 	.word	0x08018034

080115cc <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08a      	sub	sp, #40	; 0x28
 80115d0:	af06      	add	r7, sp, #24
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
 80115d8:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 80115da:	f7f9 fe9f 	bl	800b31c <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 80115de:	4602      	mov	r2, r0
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	9305      	str	r3, [sp, #20]
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	9304      	str	r3, [sp, #16]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	9303      	str	r3, [sp, #12]
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	9302      	str	r3, [sp, #8]
 80115f0:	9201      	str	r2, [sp, #4]
 80115f2:	2300      	movs	r3, #0
 80115f4:	9300      	str	r3, [sp, #0]
 80115f6:	2300      	movs	r3, #0
 80115f8:	4a04      	ldr	r2, [pc, #16]	; (801160c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 80115fa:	4905      	ldr	r1, [pc, #20]	; (8011610 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f000 f855 	bl	80116ac <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8011602:	bf00      	nop
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	08017e90 	.word	0x08017e90
 8011610:	08018148 	.word	0x08018148

08011614 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8011614:	b590      	push	{r4, r7, lr}
 8011616:	b08b      	sub	sp, #44	; 0x2c
 8011618:	af06      	add	r7, sp, #24
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	607a      	str	r2, [r7, #4]
 8011620:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	68d8      	ldr	r0, [r3, #12]
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	691c      	ldr	r4, [r3, #16]
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	68ba      	ldr	r2, [r7, #8]
 8011630:	6952      	ldr	r2, [r2, #20]
 8011632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011634:	9105      	str	r1, [sp, #20]
 8011636:	6a39      	ldr	r1, [r7, #32]
 8011638:	9104      	str	r1, [sp, #16]
 801163a:	6839      	ldr	r1, [r7, #0]
 801163c:	9103      	str	r1, [sp, #12]
 801163e:	6879      	ldr	r1, [r7, #4]
 8011640:	9102      	str	r1, [sp, #8]
 8011642:	9201      	str	r2, [sp, #4]
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	4623      	mov	r3, r4
 8011648:	4602      	mov	r2, r0
 801164a:	4904      	ldr	r1, [pc, #16]	; (801165c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f000 f82d 	bl	80116ac <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8011652:	bf00      	nop
 8011654:	3714      	adds	r7, #20
 8011656:	46bd      	mov	sp, r7
 8011658:	bd90      	pop	{r4, r7, pc}
 801165a:	bf00      	nop
 801165c:	0801816c 	.word	0x0801816c

08011660 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8011660:	b590      	push	{r4, r7, lr}
 8011662:	b08b      	sub	sp, #44	; 0x2c
 8011664:	af06      	add	r7, sp, #24
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	60b9      	str	r1, [r7, #8]
 801166a:	607a      	str	r2, [r7, #4]
 801166c:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	68d8      	ldr	r0, [r3, #12]
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	691c      	ldr	r4, [r3, #16]
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	68ba      	ldr	r2, [r7, #8]
 801167c:	6952      	ldr	r2, [r2, #20]
 801167e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011680:	9105      	str	r1, [sp, #20]
 8011682:	6a39      	ldr	r1, [r7, #32]
 8011684:	9104      	str	r1, [sp, #16]
 8011686:	6839      	ldr	r1, [r7, #0]
 8011688:	9103      	str	r1, [sp, #12]
 801168a:	6879      	ldr	r1, [r7, #4]
 801168c:	9102      	str	r1, [sp, #8]
 801168e:	9201      	str	r2, [sp, #4]
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	4623      	mov	r3, r4
 8011694:	4602      	mov	r2, r0
 8011696:	4904      	ldr	r1, [pc, #16]	; (80116a8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f000 f807 	bl	80116ac <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801169e:	bf00      	nop
 80116a0:	3714      	adds	r7, #20
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd90      	pop	{r4, r7, pc}
 80116a6:	bf00      	nop
 80116a8:	08018194 	.word	0x08018194

080116ac <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80116ac:	b590      	push	{r4, r7, lr}
 80116ae:	b087      	sub	sp, #28
 80116b0:	af02      	add	r7, sp, #8
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	607a      	str	r2, [r7, #4]
 80116b8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	3308      	adds	r3, #8
 80116be:	68ba      	ldr	r2, [r7, #8]
 80116c0:	4910      	ldr	r1, [pc, #64]	; (8011704 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7ff fcf0 	bl	80110a8 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 80116c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ca:	9300      	str	r3, [sp, #0]
 80116cc:	6a3b      	ldr	r3, [r7, #32]
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	6879      	ldr	r1, [r7, #4]
 80116d2:	68f8      	ldr	r0, [r7, #12]
 80116d4:	f7ff fe36 	bl	8011344 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 80116d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f7ff fe52 	bl	8011388 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 80116e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	3308      	adds	r3, #8
 80116ea:	681c      	ldr	r4, [r3, #0]
 80116ec:	68f8      	ldr	r0, [r7, #12]
 80116ee:	f000 f80b 	bl	8011708 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 80116f2:	4603      	mov	r3, r0
 80116f4:	4619      	mov	r1, r3
 80116f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80116f8:	47a0      	blx	r4
}
 80116fa:	bf00      	nop
 80116fc:	3714      	adds	r7, #20
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd90      	pop	{r4, r7, pc}
 8011702:	bf00      	nop
 8011704:	080181c0 	.word	0x080181c0

08011708 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	3308      	adds	r3, #8
 8011714:	4618      	mov	r0, r3
 8011716:	f7ff fdad 	bl	8011274 <_ZN18SimpleStringBuffer8toStringEv>
 801171a:	4603      	mov	r3, r0
}
 801171c:	4618      	mov	r0, r3
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	3308      	adds	r3, #8
 8011730:	4618      	mov	r0, r3
 8011732:	f7ff fca7 	bl	8011084 <_ZN18SimpleStringBuffer5clearEv>
}
 8011736:	bf00      	nop
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 801173e:	b480      	push	{r7}
 8011740:	b085      	sub	sp, #20
 8011742:	af00      	add	r7, sp, #0
 8011744:	60f8      	str	r0, [r7, #12]
 8011746:	60b9      	str	r1, [r7, #8]
 8011748:	607a      	str	r2, [r7, #4]
 801174a:	603b      	str	r3, [r7, #0]
    number_ = number;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	68ba      	ldr	r2, [r7, #8]
 8011756:	609a      	str	r2, [r3, #8]
    size_ = size;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	69ba      	ldr	r2, [r7, #24]
 8011762:	615a      	str	r2, [r3, #20]
    period_ = period;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	7f3a      	ldrb	r2, [r7, #28]
 8011768:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011770:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011776:	60da      	str	r2, [r3, #12]
    line_ = line;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801177c:	611a      	str	r2, [r3, #16]
}
 801177e:	bf00      	nop
 8011780:	3714      	adds	r7, #20
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr

0801178a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801178a:	b480      	push	{r7}
 801178c:	b085      	sub	sp, #20
 801178e:	af00      	add	r7, sp, #0
 8011790:	60f8      	str	r0, [r7, #12]
 8011792:	60b9      	str	r1, [r7, #8]
 8011794:	4613      	mov	r3, r2
 8011796:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8011798:	79fb      	ldrb	r3, [r7, #7]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d00b      	beq.n	80117b6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	7e1b      	ldrb	r3, [r3, #24]
 80117a2:	79fa      	ldrb	r2, [r7, #7]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d006      	beq.n	80117b6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	7e1b      	ldrb	r3, [r3, #24]
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d004      	beq.n	80117ba <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80117b0:	79fb      	ldrb	r3, [r7, #7]
 80117b2:	2b02      	cmp	r3, #2
 80117b4:	d101      	bne.n	80117ba <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80117b6:	2301      	movs	r3, #1
 80117b8:	e000      	b.n	80117bc <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80117ba:	2300      	movs	r3, #0
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3714      	adds	r7, #20
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b083      	sub	sp, #12
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	61da      	str	r2, [r3, #28]
    head_ = node;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	683a      	ldr	r2, [r7, #0]
 80117de:	601a      	str	r2, [r3, #0]
}
 80117e0:	bf00      	nop
 80117e2:	370c      	adds	r7, #12
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr

080117ec <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 80117ec:	b480      	push	{r7}
 80117ee:	b085      	sub	sp, #20
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 80117fc:	2300      	movs	r3, #0
 80117fe:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d019      	beq.n	801183a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	683a      	ldr	r2, [r7, #0]
 801180c:	429a      	cmp	r2, r3
 801180e:	d10e      	bne.n	801182e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d005      	beq.n	8011822 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	69da      	ldr	r2, [r3, #28]
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	61da      	str	r2, [r3, #28]
                return cur;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	e00c      	b.n	801183c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	69da      	ldr	r2, [r3, #28]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	601a      	str	r2, [r3, #0]
                return cur;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	e006      	b.n	801183c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	69db      	ldr	r3, [r3, #28]
 8011836:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8011838:	e7e2      	b.n	8011800 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801183a:	2300      	movs	r3, #0
}
 801183c:	4618      	mov	r0, r3
 801183e:	3714      	adds	r7, #20
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8011848:	b480      	push	{r7}
 801184a:	b085      	sub	sp, #20
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00a      	beq.n	8011874 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	689b      	ldr	r3, [r3, #8]
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	429a      	cmp	r2, r3
 8011866:	d101      	bne.n	801186c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	e004      	b.n	8011876 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	69db      	ldr	r3, [r3, #28]
 8011870:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8011872:	e7f1      	b.n	8011858 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8011874:	2300      	movs	r3, #0
}
 8011876:	4618      	mov	r0, r3
 8011878:	3714      	adds	r7, #20
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr

08011882 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b086      	sub	sp, #24
 8011886:	af00      	add	r7, sp, #0
 8011888:	60f8      	str	r0, [r7, #12]
 801188a:	60b9      	str	r1, [r7, #8]
 801188c:	4613      	mov	r3, r2
 801188e:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	617b      	str	r3, [r7, #20]
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d00e      	beq.n	80118b8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	461a      	mov	r2, r3
 801189e:	6979      	ldr	r1, [r7, #20]
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f7ff ff72 	bl	801178a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d001      	beq.n	80118b0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	e004      	b.n	80118ba <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	69db      	ldr	r3, [r3, #28]
 80118b4:	617b      	str	r3, [r7, #20]
 80118b6:	e7ed      	b.n	8011894 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80118b8:	2300      	movs	r3, #0
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3718      	adds	r7, #24
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}

080118c2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 80118c2:	b580      	push	{r7, lr}
 80118c4:	b082      	sub	sp, #8
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
 80118ca:	460b      	mov	r3, r1
 80118cc:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	78fa      	ldrb	r2, [r7, #3]
 80118d4:	4619      	mov	r1, r3
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f7ff ffd3 	bl	8011882 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80118dc:	4603      	mov	r3, r0
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3708      	adds	r7, #8
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b084      	sub	sp, #16
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	60f8      	str	r0, [r7, #12]
 80118ee:	60b9      	str	r1, [r7, #8]
 80118f0:	4613      	mov	r3, r2
 80118f2:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	69db      	ldr	r3, [r3, #28]
 80118f8:	79fa      	ldrb	r2, [r7, #7]
 80118fa:	4619      	mov	r1, r3
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f7ff ffc0 	bl	8011882 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011902:	4603      	mov	r3, r0
}
 8011904:	4618      	mov	r0, r3
 8011906:	3710      	adds	r7, #16
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b084      	sub	sp, #16
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	460b      	mov	r3, r1
 8011916:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8011918:	2300      	movs	r3, #0
 801191a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	60bb      	str	r3, [r7, #8]
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d00f      	beq.n	8011948 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8011928:	78fb      	ldrb	r3, [r7, #3]
 801192a:	461a      	mov	r2, r3
 801192c:	68b9      	ldr	r1, [r7, #8]
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff ff2b 	bl	801178a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d002      	beq.n	8011940 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	3301      	adds	r3, #1
 801193e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	69db      	ldr	r3, [r3, #28]
 8011944:	60bb      	str	r3, [r7, #8]
 8011946:	e7ec      	b.n	8011922 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8011948:	68fb      	ldr	r3, [r7, #12]
}
 801194a:	4618      	mov	r0, r3
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}
	...

08011954 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 801195e:	6839      	ldr	r1, [r7, #0]
 8011960:	4b09      	ldr	r3, [pc, #36]	; (8011988 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8011962:	fba3 2301 	umull	r2, r3, r3, r1
 8011966:	1aca      	subs	r2, r1, r3
 8011968:	0852      	lsrs	r2, r2, #1
 801196a:	4413      	add	r3, r2
 801196c:	099a      	lsrs	r2, r3, #6
 801196e:	4613      	mov	r3, r2
 8011970:	00db      	lsls	r3, r3, #3
 8011972:	4413      	add	r3, r2
 8011974:	00db      	lsls	r3, r3, #3
 8011976:	4413      	add	r3, r2
 8011978:	1aca      	subs	r2, r1, r3
 801197a:	4613      	mov	r3, r2
}
 801197c:	4618      	mov	r0, r3
 801197e:	370c      	adds	r7, #12
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr
 8011988:	c0e07039 	.word	0xc0e07039

0801198c <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	4619      	mov	r1, r3
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7ff ffd9 	bl	8011954 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80119a2:	4603      	mov	r3, r0
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	4413      	add	r3, r2
 80119aa:	6839      	ldr	r1, [r7, #0]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7ff ff0b 	bl	80117c8 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80119b2:	bf00      	nop
 80119b4:	3708      	adds	r7, #8
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b082      	sub	sp, #8
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
 80119c2:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 80119c4:	6839      	ldr	r1, [r7, #0]
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f7ff ffc4 	bl	8011954 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80119cc:	4603      	mov	r3, r0
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	4413      	add	r3, r2
 80119d4:	6839      	ldr	r1, [r7, #0]
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7ff ff08 	bl	80117ec <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 80119dc:	4603      	mov	r3, r0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 80119e6:	b580      	push	{r7, lr}
 80119e8:	b082      	sub	sp, #8
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
 80119ee:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 80119f0:	6839      	ldr	r1, [r7, #0]
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f7ff ffae 	bl	8011954 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80119f8:	4603      	mov	r3, r0
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	4413      	add	r3, r2
 8011a00:	6839      	ldr	r1, [r7, #0]
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7ff ff20 	bl	8011848 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8011a08:	4603      	mov	r3, r0
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b084      	sub	sp, #16
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8011a22:	2300      	movs	r3, #0
 8011a24:	60bb      	str	r3, [r7, #8]
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	2b48      	cmp	r3, #72	; 0x48
 8011a2a:	dc10      	bgt.n	8011a4e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	4413      	add	r3, r2
 8011a34:	78fa      	ldrb	r2, [r7, #3]
 8011a36:	4611      	mov	r1, r2
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7ff ff67 	bl	801190c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8011a3e:	4602      	mov	r2, r0
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	4413      	add	r3, r2
 8011a44:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	60bb      	str	r3, [r7, #8]
 8011a4c:	e7eb      	b.n	8011a26 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3710      	adds	r7, #16
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	460b      	mov	r3, r1
 8011a62:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8011a64:	2300      	movs	r3, #0
 8011a66:	60fb      	str	r3, [r7, #12]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2b48      	cmp	r3, #72	; 0x48
 8011a6c:	dc12      	bgt.n	8011a94 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	4413      	add	r3, r2
 8011a76:	78fa      	ldrb	r2, [r7, #3]
 8011a78:	4611      	mov	r1, r2
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7ff ff21 	bl	80118c2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8011a80:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d001      	beq.n	8011a8c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	e004      	b.n	8011a96 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	60fb      	str	r3, [r7, #12]
 8011a92:	e7e9      	b.n	8011a68 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8011a94:	2300      	movs	r3, #0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b086      	sub	sp, #24
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	60f8      	str	r0, [r7, #12]
 8011aa6:	60b9      	str	r1, [r7, #8]
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	689b      	ldr	r3, [r3, #8]
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	68f8      	ldr	r0, [r7, #12]
 8011ab4:	f7ff ff4e 	bl	8011954 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8011ab8:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	68fa      	ldr	r2, [r7, #12]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	79fa      	ldrb	r2, [r7, #7]
 8011ac4:	68b9      	ldr	r1, [r7, #8]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7ff ff0d 	bl	80118e6 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011acc:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	e019      	b.n	8011b0c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	3301      	adds	r3, #1
 8011adc:	617b      	str	r3, [r7, #20]
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	2b48      	cmp	r3, #72	; 0x48
 8011ae2:	d812      	bhi.n	8011b0a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	68fa      	ldr	r2, [r7, #12]
 8011aea:	4413      	add	r3, r2
 8011aec:	79fa      	ldrb	r2, [r7, #7]
 8011aee:	4611      	mov	r1, r2
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7ff fee6 	bl	80118c2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8011af6:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d001      	beq.n	8011b02 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	e004      	b.n	8011b0c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	3301      	adds	r3, #1
 8011b06:	617b      	str	r3, [r7, #20]
 8011b08:	e7e9      	b.n	8011ade <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8011b0a:	2300      	movs	r3, #0
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3718      	adds	r7, #24
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8011b14:	b5b0      	push	{r4, r5, r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2448      	movs	r4, #72	; 0x48
 8011b20:	461d      	mov	r5, r3
 8011b22:	2c00      	cmp	r4, #0
 8011b24:	db05      	blt.n	8011b32 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8011b26:	4628      	mov	r0, r5
 8011b28:	f7ff fa84 	bl	8011034 <_ZN22MemoryLeakDetectorListC1Ev>
 8011b2c:	3504      	adds	r5, #4
 8011b2e:	3c01      	subs	r4, #1
 8011b30:	e7f7      	b.n	8011b22 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	4618      	mov	r0, r3
 8011b36:	3708      	adds	r7, #8
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bdb0      	pop	{r4, r5, r7, pc}

08011b3c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8011b3c:	b590      	push	{r4, r7, lr}
 8011b3e:	b083      	sub	sp, #12
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
 8011b46:	4a1d      	ldr	r2, [pc, #116]	; (8011bbc <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	601a      	str	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	330c      	adds	r3, #12
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7ff fbe3 	bl	801131c <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b5c:	331c      	adds	r3, #28
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7ff ffd8 	bl	8011b14 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011b74:	3304      	adds	r3, #4
 8011b76:	2201      	movs	r2, #1
 8011b78:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011b86:	3308      	adds	r3, #8
 8011b88:	2200      	movs	r2, #0
 8011b8a:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	683a      	ldr	r2, [r7, #0]
 8011b90:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8011b92:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8011b96:	490a      	ldr	r1, [pc, #40]	; (8011bc0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8011b98:	2004      	movs	r0, #4
 8011b9a:	f7f5 f911 	bl	8006dc0 <_ZnwjPKci>
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f7f5 fd07 	bl	80075b4 <_ZN11SimpleMutexC1Ev>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011bac:	330c      	adds	r3, #12
 8011bae:	601c      	str	r4, [r3, #0]
}
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	370c      	adds	r7, #12
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd90      	pop	{r4, r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	08019430 	.word	0x08019430
 8011bc0:	080181c4 	.word	0x080181c4

08011bc4 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8011bc4:	b590      	push	{r4, r7, lr}
 8011bc6:	b083      	sub	sp, #12
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	4a0e      	ldr	r2, [pc, #56]	; (8011c08 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011bd8:	330c      	adds	r3, #12
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00d      	beq.n	8011bfc <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011be6:	330c      	adds	r3, #12
 8011be8:	681c      	ldr	r4, [r3, #0]
 8011bea:	2c00      	cmp	r4, #0
 8011bec:	d006      	beq.n	8011bfc <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f7f5 fcf2 	bl	80075d8 <_ZN11SimpleMutexD1Ev>
 8011bf4:	2104      	movs	r1, #4
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f7f5 f8f6 	bl	8006de8 <_ZdlPvj>
    }
}
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	370c      	adds	r7, #12
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd90      	pop	{r4, r7, pc}
 8011c06:	bf00      	nop
 8011c08:	08019430 	.word	0x08019430

08011c0c <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
}
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7ff ffd5 	bl	8011bc4 <_ZN18MemoryLeakDetectorD1Ev>
 8011c1a:	f241 1150 	movw	r1, #4432	; 0x1150
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7f5 f8e2 	bl	8006de8 <_ZdlPvj>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	4618      	mov	r0, r3
 8011c28:	3708      	adds	r7, #8
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}

08011c2e <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8011c2e:	b580      	push	{r7, lr}
 8011c30:	b082      	sub	sp, #8
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	330c      	adds	r3, #12
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7ff fd72 	bl	8011724 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2203      	movs	r2, #3
 8011c44:	721a      	strb	r2, [r3, #8]
}
 8011c46:	bf00      	nop
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}

08011c4e <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8011c4e:	b480      	push	{r7}
 8011c50:	b083      	sub	sp, #12
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2202      	movs	r2, #2
 8011c5a:	721a      	strb	r2, [r3, #8]
}
 8011c5c:	bf00      	nop
 8011c5e:	370c      	adds	r7, #12
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b083      	sub	sp, #12
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2202      	movs	r2, #2
 8011c74:	721a      	strb	r2, [r3, #8]
}
 8011c76:	bf00      	nop
 8011c78:	370c      	adds	r7, #12
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr

08011c82 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8011c82:	b480      	push	{r7}
 8011c84:	b083      	sub	sp, #12
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
    return mutex_;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011c90:	330c      	adds	r3, #12
 8011c92:	681b      	ldr	r3, [r3, #0]
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	370c      	adds	r7, #12
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f023 0303 	bic.w	r3, r3, #3
 8011cae:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr

08011cbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	3303      	adds	r3, #3
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7ff ffe8 	bl	8011ca0 <_ZL31calculateVoidPointerAlignedSizej>
 8011cd0:	4603      	mov	r3, r0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b084      	sub	sp, #16
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	60f8      	str	r0, [r7, #12]
 8011ce2:	60b9      	str	r1, [r7, #8]
 8011ce4:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8011ce6:	6879      	ldr	r1, [r7, #4]
 8011ce8:	68f8      	ldr	r0, [r7, #12]
 8011cea:	f7ff ffe7 	bl	8011cbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	4413      	add	r3, r2
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3710      	adds	r7, #16
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b08a      	sub	sp, #40	; 0x28
 8011d00:	af06      	add	r7, sp, #24
 8011d02:	60f8      	str	r0, [r7, #12]
 8011d04:	60b9      	str	r1, [r7, #8]
 8011d06:	607a      	str	r2, [r7, #4]
 8011d08:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011d10:	3304      	adds	r3, #4
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	1c51      	adds	r1, r2, #1
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	6019      	str	r1, [r3, #0]
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	7a19      	ldrb	r1, [r3, #8]
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011d2a:	3308      	adds	r3, #8
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	6a38      	ldr	r0, [r7, #32]
 8011d30:	9004      	str	r0, [sp, #16]
 8011d32:	69f8      	ldr	r0, [r7, #28]
 8011d34:	9003      	str	r0, [sp, #12]
 8011d36:	9302      	str	r3, [sp, #8]
 8011d38:	9101      	str	r1, [sp, #4]
 8011d3a:	69bb      	ldr	r3, [r7, #24]
 8011d3c:	9300      	str	r3, [sp, #0]
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	68b8      	ldr	r0, [r7, #8]
 8011d44:	f7ff fcfb 	bl	801173e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	689a      	ldr	r2, [r3, #8]
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	4413      	add	r3, r2
 8011d52:	4619      	mov	r1, r3
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f000 f861 	bl	8011e1c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d60:	331c      	adds	r3, #28
 8011d62:	68b9      	ldr	r1, [r7, #8]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7ff fe11 	bl	801198c <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8011d6a:	bf00      	nop
 8011d6c:	3710      	adds	r7, #16
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}

08011d72 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	b08a      	sub	sp, #40	; 0x28
 8011d76:	af04      	add	r7, sp, #16
 8011d78:	60f8      	str	r0, [r7, #12]
 8011d7a:	60b9      	str	r1, [r7, #8]
 8011d7c:	607a      	str	r2, [r7, #4]
 8011d7e:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8011d80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d84:	9302      	str	r3, [sp, #8]
 8011d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d88:	9301      	str	r3, [sp, #4]
 8011d8a:	6a3b      	ldr	r3, [r7, #32]
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	68b9      	ldr	r1, [r7, #8]
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f000 f96f 	bl	8012078 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8011d9a:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8011da2:	2300      	movs	r3, #0
 8011da4:	e017      	b.n	8011dd6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8011da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	683a      	ldr	r2, [r7, #0]
 8011db0:	68b9      	ldr	r1, [r7, #8]
 8011db2:	68f8      	ldr	r0, [r7, #12]
 8011db4:	f000 f98a 	bl	80120cc <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8011db8:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8011dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbc:	9302      	str	r3, [sp, #8]
 8011dbe:	6a3b      	ldr	r3, [r7, #32]
 8011dc0:	9301      	str	r3, [sp, #4]
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	697a      	ldr	r2, [r7, #20]
 8011dca:	6939      	ldr	r1, [r7, #16]
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f7ff ff95 	bl	8011cfc <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	689b      	ldr	r3, [r3, #8]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3718      	adds	r7, #24
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
	...

08011de0 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011df0:	331c      	adds	r3, #28
 8011df2:	6839      	ldr	r1, [r7, #0]
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7ff fdf6 	bl	80119e6 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8011dfa:	60f8      	str	r0, [r7, #12]
  if (node)
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d006      	beq.n	8011e10 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8011e02:	4b05      	ldr	r3, [pc, #20]	; (8011e18 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	6812      	ldr	r2, [r2, #0]
 8011e0a:	21cd      	movs	r1, #205	; 0xcd
 8011e0c:	6838      	ldr	r0, [r7, #0]
 8011e0e:	4798      	blx	r3
#endif
}
 8011e10:	bf00      	nop
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	200000d0 	.word	0x200000d0

08011e1c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b085      	sub	sp, #20
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011e26:	2300      	movs	r3, #0
 8011e28:	60fb      	str	r3, [r7, #12]
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2b02      	cmp	r3, #2
 8011e2e:	d812      	bhi.n	8011e56 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8011e30:	68f9      	ldr	r1, [r7, #12]
 8011e32:	4b0c      	ldr	r3, [pc, #48]	; (8011e64 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8011e34:	fba3 2301 	umull	r2, r3, r3, r1
 8011e38:	085a      	lsrs	r2, r3, #1
 8011e3a:	4613      	mov	r3, r2
 8011e3c:	005b      	lsls	r3, r3, #1
 8011e3e:	4413      	add	r3, r2
 8011e40:	1aca      	subs	r2, r1, r3
 8011e42:	6839      	ldr	r1, [r7, #0]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	440b      	add	r3, r1
 8011e48:	4907      	ldr	r1, [pc, #28]	; (8011e68 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8011e4a:	5c8a      	ldrb	r2, [r1, r2]
 8011e4c:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	3301      	adds	r3, #1
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	e7e9      	b.n	8011e2a <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8011e56:	bf00      	nop
 8011e58:	3714      	adds	r7, #20
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr
 8011e62:	bf00      	nop
 8011e64:	aaaaaaab 	.word	0xaaaaaaab
 8011e68:	08019424 	.word	0x08019424

08011e6c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b085      	sub	sp, #20
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011e76:	2300      	movs	r3, #0
 8011e78:	60fb      	str	r3, [r7, #12]
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	2b02      	cmp	r3, #2
 8011e7e:	d816      	bhi.n	8011eae <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8011e80:	683a      	ldr	r2, [r7, #0]
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	4413      	add	r3, r2
 8011e86:	7818      	ldrb	r0, [r3, #0]
 8011e88:	68f9      	ldr	r1, [r7, #12]
 8011e8a:	4b0c      	ldr	r3, [pc, #48]	; (8011ebc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8011e8c:	fba3 2301 	umull	r2, r3, r3, r1
 8011e90:	085a      	lsrs	r2, r3, #1
 8011e92:	4613      	mov	r3, r2
 8011e94:	005b      	lsls	r3, r3, #1
 8011e96:	4413      	add	r3, r2
 8011e98:	1aca      	subs	r2, r1, r3
 8011e9a:	4b09      	ldr	r3, [pc, #36]	; (8011ec0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8011e9c:	5c9b      	ldrb	r3, [r3, r2]
 8011e9e:	4298      	cmp	r0, r3
 8011ea0:	d001      	beq.n	8011ea6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	e004      	b.n	8011eb0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	60fb      	str	r3, [r7, #12]
 8011eac:	e7e5      	b.n	8011e7a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8011eae:	2301      	movs	r3, #1
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3714      	adds	r7, #20
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr
 8011ebc:	aaaaaaab 	.word	0xaaaaaaab
 8011ec0:	08019424 	.word	0x08019424

08011ec4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8011ed0:	68ba      	ldr	r2, [r7, #8]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d101      	bne.n	8011edc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8011ed8:	2301      	movs	r3, #1
 8011eda:	e013      	b.n	8011f04 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	f083 0301 	eor.w	r3, r3, #1
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e008      	b.n	8011f04 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	331c      	adds	r3, #28
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	68b9      	ldr	r1, [r7, #8]
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	4798      	blx	r3
 8011f00:	4603      	mov	r3, r0
 8011f02:	bf00      	nop
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3710      	adds	r7, #16
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}

08011f0c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8011f0c:	b590      	push	{r4, r7, lr}
 8011f0e:	b087      	sub	sp, #28
 8011f10:	af02      	add	r7, sp, #8
 8011f12:	60f8      	str	r0, [r7, #12]
 8011f14:	60b9      	str	r1, [r7, #8]
 8011f16:	607a      	str	r2, [r7, #4]
 8011f18:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	695a      	ldr	r2, [r3, #20]
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	695b      	ldr	r3, [r3, #20]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	3328      	adds	r3, #40	; 0x28
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	4610      	mov	r0, r2
 8011f2a:	4798      	blx	r3
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	6a3b      	ldr	r3, [r7, #32]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	3328      	adds	r3, #40	; 0x28
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	6a38      	ldr	r0, [r7, #32]
 8011f38:	4798      	blx	r3
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	4621      	mov	r1, r4
 8011f40:	68f8      	ldr	r0, [r7, #12]
 8011f42:	f7ff ffbf 	bl	8011ec4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8011f46:	4603      	mov	r3, r0
 8011f48:	f083 0301 	eor.w	r3, r3, #1
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d014      	beq.n	8011f7c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f103 040c 	add.w	r4, r3, #12
 8011f58:	6a3b      	ldr	r3, [r7, #32]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	3328      	adds	r3, #40	; 0x28
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	6a38      	ldr	r0, [r7, #32]
 8011f62:	4798      	blx	r3
 8011f64:	4602      	mov	r2, r0
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	9301      	str	r3, [sp, #4]
 8011f6c:	9200      	str	r2, [sp, #0]
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	68b9      	ldr	r1, [r7, #8]
 8011f74:	4620      	mov	r0, r4
 8011f76:	f7ff fb4d 	bl	8011614 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8011f7a:	e02e      	b.n	8011fda <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	689a      	ldr	r2, [r3, #8]
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4413      	add	r3, r2
 8011f86:	4619      	mov	r1, r3
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f7ff ff6f 	bl	8011e6c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	f083 0301 	eor.w	r3, r3, #1
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d014      	beq.n	8011fc4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f103 040c 	add.w	r4, r3, #12
 8011fa0:	6a3b      	ldr	r3, [r7, #32]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3328      	adds	r3, #40	; 0x28
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	6a38      	ldr	r0, [r7, #32]
 8011faa:	4798      	blx	r3
 8011fac:	4602      	mov	r2, r0
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	9301      	str	r3, [sp, #4]
 8011fb4:	9200      	str	r2, [sp, #0]
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	68b9      	ldr	r1, [r7, #8]
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f7ff fb4f 	bl	8011660 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8011fc2:	e00a      	b.n	8011fda <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8011fc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d006      	beq.n	8011fda <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8011fcc:	6a3b      	ldr	r3, [r7, #32]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	3324      	adds	r3, #36	; 0x24
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	68b9      	ldr	r1, [r7, #8]
 8011fd6:	6a38      	ldr	r0, [r7, #32]
 8011fd8:	4798      	blx	r3
}
 8011fda:	bf00      	nop
 8011fdc:	3714      	adds	r7, #20
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd90      	pop	{r4, r7, pc}
	...

08011fe4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af02      	add	r7, sp, #8
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
 8011ff0:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8011ff2:	4b08      	ldr	r3, [pc, #32]	; (8012014 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	78fb      	ldrb	r3, [r7, #3]
 8011ff8:	9301      	str	r3, [sp, #4]
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	9300      	str	r3, [sp, #0]
 8011ffe:	4613      	mov	r3, r2
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	68b9      	ldr	r1, [r7, #8]
 8012004:	68f8      	ldr	r0, [r7, #12]
 8012006:	f000 f87f 	bl	8012108 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 801200a:	4603      	mov	r3, r0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3710      	adds	r7, #16
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	200000f8 	.word	0x200000f8

08012018 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8012018:	b590      	push	{r4, r7, lr}
 801201a:	b085      	sub	sp, #20
 801201c:	af00      	add	r7, sp, #0
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	60b9      	str	r1, [r7, #8]
 8012022:	607a      	str	r2, [r7, #4]
 8012024:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8012026:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801202a:	2b00      	cmp	r3, #0
 801202c:	d00e      	beq.n	801204c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	3308      	adds	r3, #8
 8012034:	681c      	ldr	r4, [r3, #0]
 8012036:	6879      	ldr	r1, [r7, #4]
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f7ff fe3f 	bl	8011cbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801203e:	4601      	mov	r1, r0
 8012040:	6a3b      	ldr	r3, [r7, #32]
 8012042:	683a      	ldr	r2, [r7, #0]
 8012044:	68b8      	ldr	r0, [r7, #8]
 8012046:	47a0      	blx	r4
 8012048:	4603      	mov	r3, r0
 801204a:	e010      	b.n	801206e <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	3308      	adds	r3, #8
 8012052:	681c      	ldr	r4, [r3, #0]
 8012054:	6879      	ldr	r1, [r7, #4]
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f7ff fe30 	bl	8011cbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801205c:	4603      	mov	r3, r0
 801205e:	f103 0120 	add.w	r1, r3, #32
 8012062:	6a3b      	ldr	r3, [r7, #32]
 8012064:	683a      	ldr	r2, [r7, #0]
 8012066:	68b8      	ldr	r0, [r7, #8]
 8012068:	47a0      	blx	r4
 801206a:	4603      	mov	r3, r0
 801206c:	bf00      	nop
}
 801206e:	4618      	mov	r0, r3
 8012070:	3714      	adds	r7, #20
 8012072:	46bd      	mov	sp, r7
 8012074:	bd90      	pop	{r4, r7, pc}
	...

08012078 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8012078:	b590      	push	{r4, r7, lr}
 801207a:	b085      	sub	sp, #20
 801207c:	af00      	add	r7, sp, #0
 801207e:	60f8      	str	r0, [r7, #12]
 8012080:	60b9      	str	r1, [r7, #8]
 8012082:	607a      	str	r2, [r7, #4]
 8012084:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8012086:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00b      	beq.n	80120a6 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 801208e:	4b0e      	ldr	r3, [pc, #56]	; (80120c8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8012090:	681c      	ldr	r4, [r3, #0]
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	68f8      	ldr	r0, [r7, #12]
 8012096:	f7ff fe11 	bl	8011cbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801209a:	4603      	mov	r3, r0
 801209c:	4619      	mov	r1, r3
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	47a0      	blx	r4
 80120a2:	4603      	mov	r3, r0
 80120a4:	e00c      	b.n	80120c0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 80120a6:	4b08      	ldr	r3, [pc, #32]	; (80120c8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80120a8:	681c      	ldr	r4, [r3, #0]
 80120aa:	6839      	ldr	r1, [r7, #0]
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f7ff fe05 	bl	8011cbc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80120b2:	4603      	mov	r3, r0
 80120b4:	3320      	adds	r3, #32
 80120b6:	4619      	mov	r1, r3
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	47a0      	blx	r4
 80120bc:	4603      	mov	r3, r0
 80120be:	bf00      	nop
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3714      	adds	r7, #20
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd90      	pop	{r4, r7, pc}
 80120c8:	200000c8 	.word	0x200000c8

080120cc <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	60b9      	str	r1, [r7, #8]
 80120d6:	607a      	str	r2, [r7, #4]
 80120d8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 80120da:	7e3b      	ldrb	r3, [r7, #24]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d008      	beq.n	80120f2 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	3320      	adds	r3, #32
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2120      	movs	r1, #32
 80120ea:	68b8      	ldr	r0, [r7, #8]
 80120ec:	4798      	blx	r3
 80120ee:	4603      	mov	r3, r0
 80120f0:	e006      	b.n	8012100 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	6839      	ldr	r1, [r7, #0]
 80120f6:	68f8      	ldr	r0, [r7, #12]
 80120f8:	f7ff fdef 	bl	8011cda <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 80120fc:	4603      	mov	r3, r0
 80120fe:	bf00      	nop
}
 8012100:	4618      	mov	r0, r3
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b08a      	sub	sp, #40	; 0x28
 801210c:	af04      	add	r7, sp, #16
 801210e:	60f8      	str	r0, [r7, #12]
 8012110:	60b9      	str	r1, [r7, #8]
 8012112:	607a      	str	r2, [r7, #4]
 8012114:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8012116:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801211a:	9301      	str	r3, [sp, #4]
 801211c:	6a3b      	ldr	r3, [r7, #32]
 801211e:	9300      	str	r3, [sp, #0]
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	68b9      	ldr	r1, [r7, #8]
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f7ff ff76 	bl	8012018 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 801212c:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d101      	bne.n	8012138 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8012134:	2300      	movs	r3, #0
 8012136:	e017      	b.n	8012168 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8012138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801213c:	9300      	str	r3, [sp, #0]
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	68b9      	ldr	r1, [r7, #8]
 8012144:	68f8      	ldr	r0, [r7, #12]
 8012146:	f7ff ffc1 	bl	80120cc <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 801214a:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	9302      	str	r3, [sp, #8]
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	9301      	str	r3, [sp, #4]
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	9300      	str	r3, [sp, #0]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	6939      	ldr	r1, [r7, #16]
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f7ff fdcc 	bl	8011cfc <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	689b      	ldr	r3, [r3, #8]
}
 8012168:	4618      	mov	r0, r3
 801216a:	3718      	adds	r7, #24
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8012170:	b590      	push	{r4, r7, lr}
 8012172:	b089      	sub	sp, #36	; 0x24
 8012174:	af02      	add	r7, sp, #8
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
 801217c:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d03a      	beq.n	80121fa <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801218a:	331c      	adds	r3, #28
 801218c:	6879      	ldr	r1, [r7, #4]
 801218e:	4618      	mov	r0, r3
 8012190:	f7ff fc13 	bl	80119ba <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8012194:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d10b      	bne.n	80121b4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f103 000c 	add.w	r0, r3, #12
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	9300      	str	r3, [sp, #0]
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121ac:	6839      	ldr	r1, [r7, #0]
 80121ae:	f7ff fa0d 	bl	80115cc <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 80121b2:	e023      	b.n	80121fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 80121b4:	68b8      	ldr	r0, [r7, #8]
 80121b6:	f7f8 ffa7 	bl	800b108 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 80121ba:	4603      	mov	r3, r0
 80121bc:	f083 0301 	eor.w	r3, r3, #1
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d01a      	beq.n	80121fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80121cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80121d0:	9301      	str	r3, [sp, #4]
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d8:	683a      	ldr	r2, [r7, #0]
 80121da:	6979      	ldr	r1, [r7, #20]
 80121dc:	68f8      	ldr	r0, [r7, #12]
 80121de:	f7ff fe95 	bl	8011f0c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	330c      	adds	r3, #12
 80121e8:	681c      	ldr	r4, [r3, #0]
 80121ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	693a      	ldr	r2, [r7, #16]
 80121f2:	6879      	ldr	r1, [r7, #4]
 80121f4:	68b8      	ldr	r0, [r7, #8]
 80121f6:	47a0      	blx	r4
 80121f8:	e000      	b.n	80121fc <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 80121fa:	bf00      	nop
    }
}
 80121fc:	371c      	adds	r7, #28
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd90      	pop	{r4, r7, pc}
	...

08012204 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b086      	sub	sp, #24
 8012208:	af02      	add	r7, sp, #8
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	607a      	str	r2, [r7, #4]
 8012210:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8012212:	4b08      	ldr	r3, [pc, #32]	; (8012234 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8012214:	681a      	ldr	r2, [r3, #0]
 8012216:	78fb      	ldrb	r3, [r7, #3]
 8012218:	9301      	str	r3, [sp, #4]
 801221a:	2300      	movs	r3, #0
 801221c:	9300      	str	r3, [sp, #0]
 801221e:	4613      	mov	r3, r2
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	68b9      	ldr	r1, [r7, #8]
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f7ff ffa3 	bl	8012170 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 801222a:	bf00      	nop
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	200000f8 	.word	0x200000f8

08012238 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b08a      	sub	sp, #40	; 0x28
 801223c:	af04      	add	r7, sp, #16
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	607a      	str	r2, [r7, #4]
 8012244:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d023      	beq.n	8012294 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012252:	331c      	adds	r3, #28
 8012254:	6879      	ldr	r1, [r7, #4]
 8012256:	4618      	mov	r0, r3
 8012258:	f7ff fbaf 	bl	80119ba <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 801225c:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d10c      	bne.n	801227e <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	f103 000c 	add.w	r0, r3, #12
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	9300      	str	r3, [sp, #0]
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012274:	6a39      	ldr	r1, [r7, #32]
 8012276:	f7ff f9a9 	bl	80115cc <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 801227a:	2300      	movs	r3, #0
 801227c:	e019      	b.n	80122b2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 801227e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012282:	9301      	str	r3, [sp, #4]
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228a:	6a3a      	ldr	r2, [r7, #32]
 801228c:	6979      	ldr	r1, [r7, #20]
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f7ff fe3c 	bl	8011f0c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8012294:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012298:	9302      	str	r3, [sp, #8]
 801229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	6a3b      	ldr	r3, [r7, #32]
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	687a      	ldr	r2, [r7, #4]
 80122a6:	68b9      	ldr	r1, [r7, #8]
 80122a8:	68f8      	ldr	r0, [r7, #12]
 80122aa:	f7ff fd62 	bl	8011d72 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 80122ae:	4603      	mov	r3, r0
 80122b0:	bf00      	nop
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3718      	adds	r7, #24
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b084      	sub	sp, #16
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
 80122c2:	460b      	mov	r3, r1
 80122c4:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122cc:	331c      	adds	r3, #28
 80122ce:	78fa      	ldrb	r2, [r7, #3]
 80122d0:	4611      	mov	r1, r2
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7ff fbc0 	bl	8011a58 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80122d8:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	330c      	adds	r3, #12
 80122de:	4618      	mov	r0, r3
 80122e0:	f7ff f882 	bl	80113e8 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d010      	beq.n	801230c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	330c      	adds	r3, #12
 80122ee:	68f9      	ldr	r1, [r7, #12]
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7ff f897 	bl	8011424 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122fc:	331c      	adds	r3, #28
 80122fe:	78fa      	ldrb	r2, [r7, #3]
 8012300:	68f9      	ldr	r1, [r7, #12]
 8012302:	4618      	mov	r0, r3
 8012304:	f7ff fbcb 	bl	8011a9e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8012308:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801230a:	e7eb      	b.n	80122e4 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	330c      	adds	r3, #12
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff f8e7 	bl	80114e4 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8012316:	bf00      	nop
 8012318:	3710      	adds	r7, #16
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}

0801231e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 801231e:	b580      	push	{r7, lr}
 8012320:	b082      	sub	sp, #8
 8012322:	af00      	add	r7, sp, #0
 8012324:	6078      	str	r0, [r7, #4]
 8012326:	460b      	mov	r3, r1
 8012328:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 801232a:	78fb      	ldrb	r3, [r7, #3]
 801232c:	4619      	mov	r1, r3
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f7ff ffc3 	bl	80122ba <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	330c      	adds	r3, #12
 8012338:	4618      	mov	r0, r3
 801233a:	f7ff f9e5 	bl	8011708 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801233e:	4603      	mov	r3, r0
}
 8012340:	4618      	mov	r0, r3
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012356:	331c      	adds	r3, #28
 8012358:	2103      	movs	r1, #3
 801235a:	4618      	mov	r0, r3
 801235c:	f7ff fb7c 	bl	8011a58 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8012360:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d011      	beq.n	801238c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	7e1b      	ldrb	r3, [r3, #24]
 801236c:	2b03      	cmp	r3, #3
 801236e:	d102      	bne.n	8012376 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2202      	movs	r2, #2
 8012374:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801237c:	331c      	adds	r3, #28
 801237e:	2203      	movs	r2, #3
 8012380:	68f9      	ldr	r1, [r7, #12]
 8012382:	4618      	mov	r0, r3
 8012384:	f7ff fb8b 	bl	8011a9e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8012388:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801238a:	e7ea      	b.n	8012362 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 801238c:	bf00      	nop
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	460b      	mov	r3, r1
 801239e:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80123a6:	331c      	adds	r3, #28
 80123a8:	78fa      	ldrb	r2, [r7, #3]
 80123aa:	4611      	mov	r1, r2
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7ff fb30 	bl	8011a12 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 80123b2:	4603      	mov	r3, r0
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3708      	adds	r7, #8
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	6039      	str	r1, [r7, #0]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	490b      	ldr	r1, [pc, #44]	; (80123f8 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7f5 fbe1 	bl	8007b92 <_ZN12SimpleStringC1EPKc>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	721a      	strb	r2, [r3, #8]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2200      	movs	r2, #0
 80123da:	725a      	strb	r2, [r3, #9]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6839      	ldr	r1, [r7, #0]
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7f5 fc3f 	bl	8007c6a <_ZN12SimpleStringaSERKS_>
}
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	4618      	mov	r0, r3
 80123f0:	3708      	adds	r7, #8
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	080181e4 	.word	0x080181e4

080123fc <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	683a      	ldr	r2, [r7, #0]
 801240a:	60da      	str	r2, [r3, #12]
    return this;
 801240c:	687b      	ldr	r3, [r7, #4]
}
 801240e:	4618      	mov	r0, r3
 8012410:	370c      	adds	r7, #12
 8012412:	46bd      	mov	sp, r7
 8012414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012418:	4770      	bx	lr

0801241a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801241a:	b480      	push	{r7}
 801241c:	b083      	sub	sp, #12
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
    return next_;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	68db      	ldr	r3, [r3, #12]
}
 8012426:	4618      	mov	r0, r3
 8012428:	370c      	adds	r7, #12
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr

08012432 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8012432:	b480      	push	{r7}
 8012434:	b083      	sub	sp, #12
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	721a      	strb	r2, [r3, #8]
}
 8012440:	bf00      	nop
 8012442:	370c      	adds	r7, #12
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr

0801244c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2201      	movs	r2, #1
 8012458:	725a      	strb	r2, [r3, #9]
}
 801245a:	bf00      	nop
 801245c:	370c      	adds	r7, #12
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr

08012466 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b084      	sub	sp, #16
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8012470:	2300      	movs	r3, #0
 8012472:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	7a1b      	ldrb	r3, [r3, #8]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d007      	beq.n	801248c <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	4619      	mov	r1, r3
 8012480:	6838      	ldr	r0, [r7, #0]
 8012482:	f7f5 ff4a 	bl	800831a <_ZeqRK12SimpleStringS1_>
 8012486:	4603      	mov	r3, r0
 8012488:	73fb      	strb	r3, [r7, #15]
 801248a:	e006      	b.n	801249a <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4619      	mov	r1, r3
 8012490:	6838      	ldr	r0, [r7, #0]
 8012492:	f7f5 fbfc 	bl	8007c8e <_ZNK12SimpleString8containsERKS_>
 8012496:	4603      	mov	r3, r0
 8012498:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	7a5b      	ldrb	r3, [r3, #9]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d004      	beq.n	80124ac <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 80124a2:	7bfb      	ldrb	r3, [r7, #15]
 80124a4:	f083 0301 	eor.w	r3, r3, #1
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	e005      	b.n	80124b8 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 80124ac:	7bfb      	ldrb	r3, [r7, #15]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	bf14      	ite	ne
 80124b2:	2301      	movne	r3, #1
 80124b4:	2300      	moveq	r3, #0
 80124b6:	b2db      	uxtb	r3, r3
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	3710      	adds	r7, #16
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}

080124c0 <__cxa_guard_acquire>:
 80124c0:	6803      	ldr	r3, [r0, #0]
 80124c2:	07db      	lsls	r3, r3, #31
 80124c4:	d406      	bmi.n	80124d4 <__cxa_guard_acquire+0x14>
 80124c6:	7843      	ldrb	r3, [r0, #1]
 80124c8:	b103      	cbz	r3, 80124cc <__cxa_guard_acquire+0xc>
 80124ca:	deff      	udf	#255	; 0xff
 80124cc:	2301      	movs	r3, #1
 80124ce:	7043      	strb	r3, [r0, #1]
 80124d0:	4618      	mov	r0, r3
 80124d2:	4770      	bx	lr
 80124d4:	2000      	movs	r0, #0
 80124d6:	4770      	bx	lr

080124d8 <__cxa_guard_release>:
 80124d8:	2301      	movs	r3, #1
 80124da:	6003      	str	r3, [r0, #0]
 80124dc:	4770      	bx	lr

080124de <__cxa_pure_virtual>:
 80124de:	b508      	push	{r3, lr}
 80124e0:	f000 f80c 	bl	80124fc <_ZSt9terminatev>

080124e4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80124e4:	b508      	push	{r3, lr}
 80124e6:	4780      	blx	r0
 80124e8:	f000 f816 	bl	8012518 <abort>

080124ec <_ZSt13get_terminatev>:
 80124ec:	4b02      	ldr	r3, [pc, #8]	; (80124f8 <_ZSt13get_terminatev+0xc>)
 80124ee:	6818      	ldr	r0, [r3, #0]
 80124f0:	f3bf 8f5b 	dmb	ish
 80124f4:	4770      	bx	lr
 80124f6:	bf00      	nop
 80124f8:	200000fc 	.word	0x200000fc

080124fc <_ZSt9terminatev>:
 80124fc:	b508      	push	{r3, lr}
 80124fe:	f7ff fff5 	bl	80124ec <_ZSt13get_terminatev>
 8012502:	f7ff ffef 	bl	80124e4 <_ZN10__cxxabiv111__terminateEPFvvE>

08012506 <fabs>:
 8012506:	ec51 0b10 	vmov	r0, r1, d0
 801250a:	ee10 2a10 	vmov	r2, s0
 801250e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012512:	ec43 2b10 	vmov	d0, r2, r3
 8012516:	4770      	bx	lr

08012518 <abort>:
 8012518:	b508      	push	{r3, lr}
 801251a:	2006      	movs	r0, #6
 801251c:	f000 ff88 	bl	8013430 <raise>
 8012520:	2001      	movs	r0, #1
 8012522:	f7ee fc2e 	bl	8000d82 <_exit>

08012526 <atexit>:
 8012526:	2300      	movs	r3, #0
 8012528:	4601      	mov	r1, r0
 801252a:	461a      	mov	r2, r3
 801252c:	4618      	mov	r0, r3
 801252e:	f002 b939 	b.w	80147a4 <__register_exitproc>
	...

08012534 <calloc>:
 8012534:	4b02      	ldr	r3, [pc, #8]	; (8012540 <calloc+0xc>)
 8012536:	460a      	mov	r2, r1
 8012538:	4601      	mov	r1, r0
 801253a:	6818      	ldr	r0, [r3, #0]
 801253c:	f000 bde8 	b.w	8013110 <_calloc_r>
 8012540:	20000100 	.word	0x20000100

08012544 <__errno>:
 8012544:	4b01      	ldr	r3, [pc, #4]	; (801254c <__errno+0x8>)
 8012546:	6818      	ldr	r0, [r3, #0]
 8012548:	4770      	bx	lr
 801254a:	bf00      	nop
 801254c:	20000100 	.word	0x20000100

08012550 <_fclose_r>:
 8012550:	b570      	push	{r4, r5, r6, lr}
 8012552:	4605      	mov	r5, r0
 8012554:	460c      	mov	r4, r1
 8012556:	b911      	cbnz	r1, 801255e <_fclose_r+0xe>
 8012558:	2600      	movs	r6, #0
 801255a:	4630      	mov	r0, r6
 801255c:	bd70      	pop	{r4, r5, r6, pc}
 801255e:	b118      	cbz	r0, 8012568 <_fclose_r+0x18>
 8012560:	6983      	ldr	r3, [r0, #24]
 8012562:	b90b      	cbnz	r3, 8012568 <_fclose_r+0x18>
 8012564:	f000 f994 	bl	8012890 <__sinit>
 8012568:	4b2c      	ldr	r3, [pc, #176]	; (801261c <_fclose_r+0xcc>)
 801256a:	429c      	cmp	r4, r3
 801256c:	d114      	bne.n	8012598 <_fclose_r+0x48>
 801256e:	686c      	ldr	r4, [r5, #4]
 8012570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012572:	07d8      	lsls	r0, r3, #31
 8012574:	d405      	bmi.n	8012582 <_fclose_r+0x32>
 8012576:	89a3      	ldrh	r3, [r4, #12]
 8012578:	0599      	lsls	r1, r3, #22
 801257a:	d402      	bmi.n	8012582 <_fclose_r+0x32>
 801257c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801257e:	f000 fd3a 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 8012582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012586:	b98b      	cbnz	r3, 80125ac <_fclose_r+0x5c>
 8012588:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801258a:	f016 0601 	ands.w	r6, r6, #1
 801258e:	d1e3      	bne.n	8012558 <_fclose_r+0x8>
 8012590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012592:	f000 fd32 	bl	8012ffa <__retarget_lock_release_recursive>
 8012596:	e7e0      	b.n	801255a <_fclose_r+0xa>
 8012598:	4b21      	ldr	r3, [pc, #132]	; (8012620 <_fclose_r+0xd0>)
 801259a:	429c      	cmp	r4, r3
 801259c:	d101      	bne.n	80125a2 <_fclose_r+0x52>
 801259e:	68ac      	ldr	r4, [r5, #8]
 80125a0:	e7e6      	b.n	8012570 <_fclose_r+0x20>
 80125a2:	4b20      	ldr	r3, [pc, #128]	; (8012624 <_fclose_r+0xd4>)
 80125a4:	429c      	cmp	r4, r3
 80125a6:	bf08      	it	eq
 80125a8:	68ec      	ldreq	r4, [r5, #12]
 80125aa:	e7e1      	b.n	8012570 <_fclose_r+0x20>
 80125ac:	4621      	mov	r1, r4
 80125ae:	4628      	mov	r0, r5
 80125b0:	f000 f842 	bl	8012638 <__sflush_r>
 80125b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80125b6:	4606      	mov	r6, r0
 80125b8:	b133      	cbz	r3, 80125c8 <_fclose_r+0x78>
 80125ba:	6a21      	ldr	r1, [r4, #32]
 80125bc:	4628      	mov	r0, r5
 80125be:	4798      	blx	r3
 80125c0:	2800      	cmp	r0, #0
 80125c2:	bfb8      	it	lt
 80125c4:	f04f 36ff 	movlt.w	r6, #4294967295
 80125c8:	89a3      	ldrh	r3, [r4, #12]
 80125ca:	061a      	lsls	r2, r3, #24
 80125cc:	d503      	bpl.n	80125d6 <_fclose_r+0x86>
 80125ce:	6921      	ldr	r1, [r4, #16]
 80125d0:	4628      	mov	r0, r5
 80125d2:	f000 fdad 	bl	8013130 <_free_r>
 80125d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125d8:	b141      	cbz	r1, 80125ec <_fclose_r+0x9c>
 80125da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125de:	4299      	cmp	r1, r3
 80125e0:	d002      	beq.n	80125e8 <_fclose_r+0x98>
 80125e2:	4628      	mov	r0, r5
 80125e4:	f000 fda4 	bl	8013130 <_free_r>
 80125e8:	2300      	movs	r3, #0
 80125ea:	6363      	str	r3, [r4, #52]	; 0x34
 80125ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80125ee:	b121      	cbz	r1, 80125fa <_fclose_r+0xaa>
 80125f0:	4628      	mov	r0, r5
 80125f2:	f000 fd9d 	bl	8013130 <_free_r>
 80125f6:	2300      	movs	r3, #0
 80125f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80125fa:	f000 f931 	bl	8012860 <__sfp_lock_acquire>
 80125fe:	2300      	movs	r3, #0
 8012600:	81a3      	strh	r3, [r4, #12]
 8012602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012604:	07db      	lsls	r3, r3, #31
 8012606:	d402      	bmi.n	801260e <_fclose_r+0xbe>
 8012608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801260a:	f000 fcf6 	bl	8012ffa <__retarget_lock_release_recursive>
 801260e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012610:	f000 fcef 	bl	8012ff2 <__retarget_lock_close_recursive>
 8012614:	f000 f92a 	bl	801286c <__sfp_lock_release>
 8012618:	e79f      	b.n	801255a <_fclose_r+0xa>
 801261a:	bf00      	nop
 801261c:	08019458 	.word	0x08019458
 8012620:	08019478 	.word	0x08019478
 8012624:	08019438 	.word	0x08019438

08012628 <fclose>:
 8012628:	4b02      	ldr	r3, [pc, #8]	; (8012634 <fclose+0xc>)
 801262a:	4601      	mov	r1, r0
 801262c:	6818      	ldr	r0, [r3, #0]
 801262e:	f7ff bf8f 	b.w	8012550 <_fclose_r>
 8012632:	bf00      	nop
 8012634:	20000100 	.word	0x20000100

08012638 <__sflush_r>:
 8012638:	898a      	ldrh	r2, [r1, #12]
 801263a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801263e:	4605      	mov	r5, r0
 8012640:	0710      	lsls	r0, r2, #28
 8012642:	460c      	mov	r4, r1
 8012644:	d458      	bmi.n	80126f8 <__sflush_r+0xc0>
 8012646:	684b      	ldr	r3, [r1, #4]
 8012648:	2b00      	cmp	r3, #0
 801264a:	dc05      	bgt.n	8012658 <__sflush_r+0x20>
 801264c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801264e:	2b00      	cmp	r3, #0
 8012650:	dc02      	bgt.n	8012658 <__sflush_r+0x20>
 8012652:	2000      	movs	r0, #0
 8012654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801265a:	2e00      	cmp	r6, #0
 801265c:	d0f9      	beq.n	8012652 <__sflush_r+0x1a>
 801265e:	2300      	movs	r3, #0
 8012660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012664:	682f      	ldr	r7, [r5, #0]
 8012666:	602b      	str	r3, [r5, #0]
 8012668:	d032      	beq.n	80126d0 <__sflush_r+0x98>
 801266a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801266c:	89a3      	ldrh	r3, [r4, #12]
 801266e:	075a      	lsls	r2, r3, #29
 8012670:	d505      	bpl.n	801267e <__sflush_r+0x46>
 8012672:	6863      	ldr	r3, [r4, #4]
 8012674:	1ac0      	subs	r0, r0, r3
 8012676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012678:	b10b      	cbz	r3, 801267e <__sflush_r+0x46>
 801267a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801267c:	1ac0      	subs	r0, r0, r3
 801267e:	2300      	movs	r3, #0
 8012680:	4602      	mov	r2, r0
 8012682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012684:	6a21      	ldr	r1, [r4, #32]
 8012686:	4628      	mov	r0, r5
 8012688:	47b0      	blx	r6
 801268a:	1c43      	adds	r3, r0, #1
 801268c:	89a3      	ldrh	r3, [r4, #12]
 801268e:	d106      	bne.n	801269e <__sflush_r+0x66>
 8012690:	6829      	ldr	r1, [r5, #0]
 8012692:	291d      	cmp	r1, #29
 8012694:	d82c      	bhi.n	80126f0 <__sflush_r+0xb8>
 8012696:	4a2a      	ldr	r2, [pc, #168]	; (8012740 <__sflush_r+0x108>)
 8012698:	40ca      	lsrs	r2, r1
 801269a:	07d6      	lsls	r6, r2, #31
 801269c:	d528      	bpl.n	80126f0 <__sflush_r+0xb8>
 801269e:	2200      	movs	r2, #0
 80126a0:	6062      	str	r2, [r4, #4]
 80126a2:	04d9      	lsls	r1, r3, #19
 80126a4:	6922      	ldr	r2, [r4, #16]
 80126a6:	6022      	str	r2, [r4, #0]
 80126a8:	d504      	bpl.n	80126b4 <__sflush_r+0x7c>
 80126aa:	1c42      	adds	r2, r0, #1
 80126ac:	d101      	bne.n	80126b2 <__sflush_r+0x7a>
 80126ae:	682b      	ldr	r3, [r5, #0]
 80126b0:	b903      	cbnz	r3, 80126b4 <__sflush_r+0x7c>
 80126b2:	6560      	str	r0, [r4, #84]	; 0x54
 80126b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126b6:	602f      	str	r7, [r5, #0]
 80126b8:	2900      	cmp	r1, #0
 80126ba:	d0ca      	beq.n	8012652 <__sflush_r+0x1a>
 80126bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126c0:	4299      	cmp	r1, r3
 80126c2:	d002      	beq.n	80126ca <__sflush_r+0x92>
 80126c4:	4628      	mov	r0, r5
 80126c6:	f000 fd33 	bl	8013130 <_free_r>
 80126ca:	2000      	movs	r0, #0
 80126cc:	6360      	str	r0, [r4, #52]	; 0x34
 80126ce:	e7c1      	b.n	8012654 <__sflush_r+0x1c>
 80126d0:	6a21      	ldr	r1, [r4, #32]
 80126d2:	2301      	movs	r3, #1
 80126d4:	4628      	mov	r0, r5
 80126d6:	47b0      	blx	r6
 80126d8:	1c41      	adds	r1, r0, #1
 80126da:	d1c7      	bne.n	801266c <__sflush_r+0x34>
 80126dc:	682b      	ldr	r3, [r5, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d0c4      	beq.n	801266c <__sflush_r+0x34>
 80126e2:	2b1d      	cmp	r3, #29
 80126e4:	d001      	beq.n	80126ea <__sflush_r+0xb2>
 80126e6:	2b16      	cmp	r3, #22
 80126e8:	d101      	bne.n	80126ee <__sflush_r+0xb6>
 80126ea:	602f      	str	r7, [r5, #0]
 80126ec:	e7b1      	b.n	8012652 <__sflush_r+0x1a>
 80126ee:	89a3      	ldrh	r3, [r4, #12]
 80126f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126f4:	81a3      	strh	r3, [r4, #12]
 80126f6:	e7ad      	b.n	8012654 <__sflush_r+0x1c>
 80126f8:	690f      	ldr	r7, [r1, #16]
 80126fa:	2f00      	cmp	r7, #0
 80126fc:	d0a9      	beq.n	8012652 <__sflush_r+0x1a>
 80126fe:	0793      	lsls	r3, r2, #30
 8012700:	680e      	ldr	r6, [r1, #0]
 8012702:	bf08      	it	eq
 8012704:	694b      	ldreq	r3, [r1, #20]
 8012706:	600f      	str	r7, [r1, #0]
 8012708:	bf18      	it	ne
 801270a:	2300      	movne	r3, #0
 801270c:	eba6 0807 	sub.w	r8, r6, r7
 8012710:	608b      	str	r3, [r1, #8]
 8012712:	f1b8 0f00 	cmp.w	r8, #0
 8012716:	dd9c      	ble.n	8012652 <__sflush_r+0x1a>
 8012718:	6a21      	ldr	r1, [r4, #32]
 801271a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801271c:	4643      	mov	r3, r8
 801271e:	463a      	mov	r2, r7
 8012720:	4628      	mov	r0, r5
 8012722:	47b0      	blx	r6
 8012724:	2800      	cmp	r0, #0
 8012726:	dc06      	bgt.n	8012736 <__sflush_r+0xfe>
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801272e:	81a3      	strh	r3, [r4, #12]
 8012730:	f04f 30ff 	mov.w	r0, #4294967295
 8012734:	e78e      	b.n	8012654 <__sflush_r+0x1c>
 8012736:	4407      	add	r7, r0
 8012738:	eba8 0800 	sub.w	r8, r8, r0
 801273c:	e7e9      	b.n	8012712 <__sflush_r+0xda>
 801273e:	bf00      	nop
 8012740:	20400001 	.word	0x20400001

08012744 <_fflush_r>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	690b      	ldr	r3, [r1, #16]
 8012748:	4605      	mov	r5, r0
 801274a:	460c      	mov	r4, r1
 801274c:	b913      	cbnz	r3, 8012754 <_fflush_r+0x10>
 801274e:	2500      	movs	r5, #0
 8012750:	4628      	mov	r0, r5
 8012752:	bd38      	pop	{r3, r4, r5, pc}
 8012754:	b118      	cbz	r0, 801275e <_fflush_r+0x1a>
 8012756:	6983      	ldr	r3, [r0, #24]
 8012758:	b90b      	cbnz	r3, 801275e <_fflush_r+0x1a>
 801275a:	f000 f899 	bl	8012890 <__sinit>
 801275e:	4b14      	ldr	r3, [pc, #80]	; (80127b0 <_fflush_r+0x6c>)
 8012760:	429c      	cmp	r4, r3
 8012762:	d11b      	bne.n	801279c <_fflush_r+0x58>
 8012764:	686c      	ldr	r4, [r5, #4]
 8012766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d0ef      	beq.n	801274e <_fflush_r+0xa>
 801276e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012770:	07d0      	lsls	r0, r2, #31
 8012772:	d404      	bmi.n	801277e <_fflush_r+0x3a>
 8012774:	0599      	lsls	r1, r3, #22
 8012776:	d402      	bmi.n	801277e <_fflush_r+0x3a>
 8012778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801277a:	f000 fc3c 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 801277e:	4628      	mov	r0, r5
 8012780:	4621      	mov	r1, r4
 8012782:	f7ff ff59 	bl	8012638 <__sflush_r>
 8012786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012788:	07da      	lsls	r2, r3, #31
 801278a:	4605      	mov	r5, r0
 801278c:	d4e0      	bmi.n	8012750 <_fflush_r+0xc>
 801278e:	89a3      	ldrh	r3, [r4, #12]
 8012790:	059b      	lsls	r3, r3, #22
 8012792:	d4dd      	bmi.n	8012750 <_fflush_r+0xc>
 8012794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012796:	f000 fc30 	bl	8012ffa <__retarget_lock_release_recursive>
 801279a:	e7d9      	b.n	8012750 <_fflush_r+0xc>
 801279c:	4b05      	ldr	r3, [pc, #20]	; (80127b4 <_fflush_r+0x70>)
 801279e:	429c      	cmp	r4, r3
 80127a0:	d101      	bne.n	80127a6 <_fflush_r+0x62>
 80127a2:	68ac      	ldr	r4, [r5, #8]
 80127a4:	e7df      	b.n	8012766 <_fflush_r+0x22>
 80127a6:	4b04      	ldr	r3, [pc, #16]	; (80127b8 <_fflush_r+0x74>)
 80127a8:	429c      	cmp	r4, r3
 80127aa:	bf08      	it	eq
 80127ac:	68ec      	ldreq	r4, [r5, #12]
 80127ae:	e7da      	b.n	8012766 <_fflush_r+0x22>
 80127b0:	08019458 	.word	0x08019458
 80127b4:	08019478 	.word	0x08019478
 80127b8:	08019438 	.word	0x08019438

080127bc <fflush>:
 80127bc:	4601      	mov	r1, r0
 80127be:	b920      	cbnz	r0, 80127ca <fflush+0xe>
 80127c0:	4b04      	ldr	r3, [pc, #16]	; (80127d4 <fflush+0x18>)
 80127c2:	4905      	ldr	r1, [pc, #20]	; (80127d8 <fflush+0x1c>)
 80127c4:	6818      	ldr	r0, [r3, #0]
 80127c6:	f000 babb 	b.w	8012d40 <_fwalk_reent>
 80127ca:	4b04      	ldr	r3, [pc, #16]	; (80127dc <fflush+0x20>)
 80127cc:	6818      	ldr	r0, [r3, #0]
 80127ce:	f7ff bfb9 	b.w	8012744 <_fflush_r>
 80127d2:	bf00      	nop
 80127d4:	08019498 	.word	0x08019498
 80127d8:	08012745 	.word	0x08012745
 80127dc:	20000100 	.word	0x20000100

080127e0 <std>:
 80127e0:	2300      	movs	r3, #0
 80127e2:	b510      	push	{r4, lr}
 80127e4:	4604      	mov	r4, r0
 80127e6:	e9c0 3300 	strd	r3, r3, [r0]
 80127ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127ee:	6083      	str	r3, [r0, #8]
 80127f0:	8181      	strh	r1, [r0, #12]
 80127f2:	6643      	str	r3, [r0, #100]	; 0x64
 80127f4:	81c2      	strh	r2, [r0, #14]
 80127f6:	6183      	str	r3, [r0, #24]
 80127f8:	4619      	mov	r1, r3
 80127fa:	2208      	movs	r2, #8
 80127fc:	305c      	adds	r0, #92	; 0x5c
 80127fe:	f000 fc7f 	bl	8013100 <memset>
 8012802:	4b05      	ldr	r3, [pc, #20]	; (8012818 <std+0x38>)
 8012804:	6263      	str	r3, [r4, #36]	; 0x24
 8012806:	4b05      	ldr	r3, [pc, #20]	; (801281c <std+0x3c>)
 8012808:	62a3      	str	r3, [r4, #40]	; 0x28
 801280a:	4b05      	ldr	r3, [pc, #20]	; (8012820 <std+0x40>)
 801280c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801280e:	4b05      	ldr	r3, [pc, #20]	; (8012824 <std+0x44>)
 8012810:	6224      	str	r4, [r4, #32]
 8012812:	6323      	str	r3, [r4, #48]	; 0x30
 8012814:	bd10      	pop	{r4, pc}
 8012816:	bf00      	nop
 8012818:	08013469 	.word	0x08013469
 801281c:	0801348f 	.word	0x0801348f
 8012820:	080134c7 	.word	0x080134c7
 8012824:	080134eb 	.word	0x080134eb

08012828 <_cleanup_r>:
 8012828:	4901      	ldr	r1, [pc, #4]	; (8012830 <_cleanup_r+0x8>)
 801282a:	f000 ba89 	b.w	8012d40 <_fwalk_reent>
 801282e:	bf00      	nop
 8012830:	08012745 	.word	0x08012745

08012834 <__sfmoreglue>:
 8012834:	b570      	push	{r4, r5, r6, lr}
 8012836:	1e4a      	subs	r2, r1, #1
 8012838:	2568      	movs	r5, #104	; 0x68
 801283a:	4355      	muls	r5, r2
 801283c:	460e      	mov	r6, r1
 801283e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012842:	f000 fcc5 	bl	80131d0 <_malloc_r>
 8012846:	4604      	mov	r4, r0
 8012848:	b140      	cbz	r0, 801285c <__sfmoreglue+0x28>
 801284a:	2100      	movs	r1, #0
 801284c:	e9c0 1600 	strd	r1, r6, [r0]
 8012850:	300c      	adds	r0, #12
 8012852:	60a0      	str	r0, [r4, #8]
 8012854:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012858:	f000 fc52 	bl	8013100 <memset>
 801285c:	4620      	mov	r0, r4
 801285e:	bd70      	pop	{r4, r5, r6, pc}

08012860 <__sfp_lock_acquire>:
 8012860:	4801      	ldr	r0, [pc, #4]	; (8012868 <__sfp_lock_acquire+0x8>)
 8012862:	f000 bbc8 	b.w	8012ff6 <__retarget_lock_acquire_recursive>
 8012866:	bf00      	nop
 8012868:	20000cb8 	.word	0x20000cb8

0801286c <__sfp_lock_release>:
 801286c:	4801      	ldr	r0, [pc, #4]	; (8012874 <__sfp_lock_release+0x8>)
 801286e:	f000 bbc4 	b.w	8012ffa <__retarget_lock_release_recursive>
 8012872:	bf00      	nop
 8012874:	20000cb8 	.word	0x20000cb8

08012878 <__sinit_lock_acquire>:
 8012878:	4801      	ldr	r0, [pc, #4]	; (8012880 <__sinit_lock_acquire+0x8>)
 801287a:	f000 bbbc 	b.w	8012ff6 <__retarget_lock_acquire_recursive>
 801287e:	bf00      	nop
 8012880:	20000cb3 	.word	0x20000cb3

08012884 <__sinit_lock_release>:
 8012884:	4801      	ldr	r0, [pc, #4]	; (801288c <__sinit_lock_release+0x8>)
 8012886:	f000 bbb8 	b.w	8012ffa <__retarget_lock_release_recursive>
 801288a:	bf00      	nop
 801288c:	20000cb3 	.word	0x20000cb3

08012890 <__sinit>:
 8012890:	b510      	push	{r4, lr}
 8012892:	4604      	mov	r4, r0
 8012894:	f7ff fff0 	bl	8012878 <__sinit_lock_acquire>
 8012898:	69a3      	ldr	r3, [r4, #24]
 801289a:	b11b      	cbz	r3, 80128a4 <__sinit+0x14>
 801289c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128a0:	f7ff bff0 	b.w	8012884 <__sinit_lock_release>
 80128a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80128a8:	6523      	str	r3, [r4, #80]	; 0x50
 80128aa:	4b13      	ldr	r3, [pc, #76]	; (80128f8 <__sinit+0x68>)
 80128ac:	4a13      	ldr	r2, [pc, #76]	; (80128fc <__sinit+0x6c>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80128b2:	42a3      	cmp	r3, r4
 80128b4:	bf04      	itt	eq
 80128b6:	2301      	moveq	r3, #1
 80128b8:	61a3      	streq	r3, [r4, #24]
 80128ba:	4620      	mov	r0, r4
 80128bc:	f000 f820 	bl	8012900 <__sfp>
 80128c0:	6060      	str	r0, [r4, #4]
 80128c2:	4620      	mov	r0, r4
 80128c4:	f000 f81c 	bl	8012900 <__sfp>
 80128c8:	60a0      	str	r0, [r4, #8]
 80128ca:	4620      	mov	r0, r4
 80128cc:	f000 f818 	bl	8012900 <__sfp>
 80128d0:	2200      	movs	r2, #0
 80128d2:	60e0      	str	r0, [r4, #12]
 80128d4:	2104      	movs	r1, #4
 80128d6:	6860      	ldr	r0, [r4, #4]
 80128d8:	f7ff ff82 	bl	80127e0 <std>
 80128dc:	68a0      	ldr	r0, [r4, #8]
 80128de:	2201      	movs	r2, #1
 80128e0:	2109      	movs	r1, #9
 80128e2:	f7ff ff7d 	bl	80127e0 <std>
 80128e6:	68e0      	ldr	r0, [r4, #12]
 80128e8:	2202      	movs	r2, #2
 80128ea:	2112      	movs	r1, #18
 80128ec:	f7ff ff78 	bl	80127e0 <std>
 80128f0:	2301      	movs	r3, #1
 80128f2:	61a3      	str	r3, [r4, #24]
 80128f4:	e7d2      	b.n	801289c <__sinit+0xc>
 80128f6:	bf00      	nop
 80128f8:	08019498 	.word	0x08019498
 80128fc:	08012829 	.word	0x08012829

08012900 <__sfp>:
 8012900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012902:	4607      	mov	r7, r0
 8012904:	f7ff ffac 	bl	8012860 <__sfp_lock_acquire>
 8012908:	4b1e      	ldr	r3, [pc, #120]	; (8012984 <__sfp+0x84>)
 801290a:	681e      	ldr	r6, [r3, #0]
 801290c:	69b3      	ldr	r3, [r6, #24]
 801290e:	b913      	cbnz	r3, 8012916 <__sfp+0x16>
 8012910:	4630      	mov	r0, r6
 8012912:	f7ff ffbd 	bl	8012890 <__sinit>
 8012916:	3648      	adds	r6, #72	; 0x48
 8012918:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801291c:	3b01      	subs	r3, #1
 801291e:	d503      	bpl.n	8012928 <__sfp+0x28>
 8012920:	6833      	ldr	r3, [r6, #0]
 8012922:	b30b      	cbz	r3, 8012968 <__sfp+0x68>
 8012924:	6836      	ldr	r6, [r6, #0]
 8012926:	e7f7      	b.n	8012918 <__sfp+0x18>
 8012928:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801292c:	b9d5      	cbnz	r5, 8012964 <__sfp+0x64>
 801292e:	4b16      	ldr	r3, [pc, #88]	; (8012988 <__sfp+0x88>)
 8012930:	60e3      	str	r3, [r4, #12]
 8012932:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012936:	6665      	str	r5, [r4, #100]	; 0x64
 8012938:	f000 fb5a 	bl	8012ff0 <__retarget_lock_init_recursive>
 801293c:	f7ff ff96 	bl	801286c <__sfp_lock_release>
 8012940:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012944:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012948:	6025      	str	r5, [r4, #0]
 801294a:	61a5      	str	r5, [r4, #24]
 801294c:	2208      	movs	r2, #8
 801294e:	4629      	mov	r1, r5
 8012950:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012954:	f000 fbd4 	bl	8013100 <memset>
 8012958:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801295c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012960:	4620      	mov	r0, r4
 8012962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012964:	3468      	adds	r4, #104	; 0x68
 8012966:	e7d9      	b.n	801291c <__sfp+0x1c>
 8012968:	2104      	movs	r1, #4
 801296a:	4638      	mov	r0, r7
 801296c:	f7ff ff62 	bl	8012834 <__sfmoreglue>
 8012970:	4604      	mov	r4, r0
 8012972:	6030      	str	r0, [r6, #0]
 8012974:	2800      	cmp	r0, #0
 8012976:	d1d5      	bne.n	8012924 <__sfp+0x24>
 8012978:	f7ff ff78 	bl	801286c <__sfp_lock_release>
 801297c:	230c      	movs	r3, #12
 801297e:	603b      	str	r3, [r7, #0]
 8012980:	e7ee      	b.n	8012960 <__sfp+0x60>
 8012982:	bf00      	nop
 8012984:	08019498 	.word	0x08019498
 8012988:	ffff0001 	.word	0xffff0001

0801298c <_fopen_r>:
 801298c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801298e:	460f      	mov	r7, r1
 8012990:	4611      	mov	r1, r2
 8012992:	aa01      	add	r2, sp, #4
 8012994:	4605      	mov	r5, r0
 8012996:	f001 ff99 	bl	80148cc <__sflags>
 801299a:	4606      	mov	r6, r0
 801299c:	b918      	cbnz	r0, 80129a6 <_fopen_r+0x1a>
 801299e:	2400      	movs	r4, #0
 80129a0:	4620      	mov	r0, r4
 80129a2:	b003      	add	sp, #12
 80129a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129a6:	4628      	mov	r0, r5
 80129a8:	f7ff ffaa 	bl	8012900 <__sfp>
 80129ac:	4604      	mov	r4, r0
 80129ae:	2800      	cmp	r0, #0
 80129b0:	d0f5      	beq.n	801299e <_fopen_r+0x12>
 80129b2:	4639      	mov	r1, r7
 80129b4:	9a01      	ldr	r2, [sp, #4]
 80129b6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80129ba:	4628      	mov	r0, r5
 80129bc:	f000 fc62 	bl	8013284 <_open_r>
 80129c0:	1e07      	subs	r7, r0, #0
 80129c2:	da09      	bge.n	80129d8 <_fopen_r+0x4c>
 80129c4:	2500      	movs	r5, #0
 80129c6:	f7ff ff4b 	bl	8012860 <__sfp_lock_acquire>
 80129ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129cc:	81a5      	strh	r5, [r4, #12]
 80129ce:	f000 fb10 	bl	8012ff2 <__retarget_lock_close_recursive>
 80129d2:	f7ff ff4b 	bl	801286c <__sfp_lock_release>
 80129d6:	e7e2      	b.n	801299e <_fopen_r+0x12>
 80129d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129da:	07db      	lsls	r3, r3, #31
 80129dc:	d405      	bmi.n	80129ea <_fopen_r+0x5e>
 80129de:	89a3      	ldrh	r3, [r4, #12]
 80129e0:	0598      	lsls	r0, r3, #22
 80129e2:	d402      	bmi.n	80129ea <_fopen_r+0x5e>
 80129e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129e6:	f000 fb06 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 80129ea:	4b0e      	ldr	r3, [pc, #56]	; (8012a24 <_fopen_r+0x98>)
 80129ec:	6263      	str	r3, [r4, #36]	; 0x24
 80129ee:	4b0e      	ldr	r3, [pc, #56]	; (8012a28 <_fopen_r+0x9c>)
 80129f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80129f2:	4b0e      	ldr	r3, [pc, #56]	; (8012a2c <_fopen_r+0xa0>)
 80129f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80129f6:	05f1      	lsls	r1, r6, #23
 80129f8:	4b0d      	ldr	r3, [pc, #52]	; (8012a30 <_fopen_r+0xa4>)
 80129fa:	81e7      	strh	r7, [r4, #14]
 80129fc:	81a6      	strh	r6, [r4, #12]
 80129fe:	6224      	str	r4, [r4, #32]
 8012a00:	6323      	str	r3, [r4, #48]	; 0x30
 8012a02:	d505      	bpl.n	8012a10 <_fopen_r+0x84>
 8012a04:	2302      	movs	r3, #2
 8012a06:	2200      	movs	r2, #0
 8012a08:	4621      	mov	r1, r4
 8012a0a:	4628      	mov	r0, r5
 8012a0c:	f000 f888 	bl	8012b20 <_fseek_r>
 8012a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a12:	07da      	lsls	r2, r3, #31
 8012a14:	d4c4      	bmi.n	80129a0 <_fopen_r+0x14>
 8012a16:	89a3      	ldrh	r3, [r4, #12]
 8012a18:	059b      	lsls	r3, r3, #22
 8012a1a:	d4c1      	bmi.n	80129a0 <_fopen_r+0x14>
 8012a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a1e:	f000 faec 	bl	8012ffa <__retarget_lock_release_recursive>
 8012a22:	e7bd      	b.n	80129a0 <_fopen_r+0x14>
 8012a24:	08013469 	.word	0x08013469
 8012a28:	0801348f 	.word	0x0801348f
 8012a2c:	080134c7 	.word	0x080134c7
 8012a30:	080134eb 	.word	0x080134eb

08012a34 <fopen>:
 8012a34:	4b02      	ldr	r3, [pc, #8]	; (8012a40 <fopen+0xc>)
 8012a36:	460a      	mov	r2, r1
 8012a38:	4601      	mov	r1, r0
 8012a3a:	6818      	ldr	r0, [r3, #0]
 8012a3c:	f7ff bfa6 	b.w	801298c <_fopen_r>
 8012a40:	20000100 	.word	0x20000100

08012a44 <_fputs_r>:
 8012a44:	b570      	push	{r4, r5, r6, lr}
 8012a46:	460e      	mov	r6, r1
 8012a48:	4614      	mov	r4, r2
 8012a4a:	4605      	mov	r5, r0
 8012a4c:	b118      	cbz	r0, 8012a56 <_fputs_r+0x12>
 8012a4e:	6983      	ldr	r3, [r0, #24]
 8012a50:	b90b      	cbnz	r3, 8012a56 <_fputs_r+0x12>
 8012a52:	f7ff ff1d 	bl	8012890 <__sinit>
 8012a56:	4b2b      	ldr	r3, [pc, #172]	; (8012b04 <_fputs_r+0xc0>)
 8012a58:	429c      	cmp	r4, r3
 8012a5a:	d11e      	bne.n	8012a9a <_fputs_r+0x56>
 8012a5c:	686c      	ldr	r4, [r5, #4]
 8012a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a60:	07da      	lsls	r2, r3, #31
 8012a62:	d405      	bmi.n	8012a70 <_fputs_r+0x2c>
 8012a64:	89a3      	ldrh	r3, [r4, #12]
 8012a66:	059b      	lsls	r3, r3, #22
 8012a68:	d402      	bmi.n	8012a70 <_fputs_r+0x2c>
 8012a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a6c:	f000 fac3 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 8012a70:	89a3      	ldrh	r3, [r4, #12]
 8012a72:	0718      	lsls	r0, r3, #28
 8012a74:	d51b      	bpl.n	8012aae <_fputs_r+0x6a>
 8012a76:	6923      	ldr	r3, [r4, #16]
 8012a78:	b1cb      	cbz	r3, 8012aae <_fputs_r+0x6a>
 8012a7a:	3e01      	subs	r6, #1
 8012a7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012a80:	bb39      	cbnz	r1, 8012ad2 <_fputs_r+0x8e>
 8012a82:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8012a84:	f015 0501 	ands.w	r5, r5, #1
 8012a88:	d139      	bne.n	8012afe <_fputs_r+0xba>
 8012a8a:	89a3      	ldrh	r3, [r4, #12]
 8012a8c:	0599      	lsls	r1, r3, #22
 8012a8e:	d402      	bmi.n	8012a96 <_fputs_r+0x52>
 8012a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a92:	f000 fab2 	bl	8012ffa <__retarget_lock_release_recursive>
 8012a96:	4628      	mov	r0, r5
 8012a98:	bd70      	pop	{r4, r5, r6, pc}
 8012a9a:	4b1b      	ldr	r3, [pc, #108]	; (8012b08 <_fputs_r+0xc4>)
 8012a9c:	429c      	cmp	r4, r3
 8012a9e:	d101      	bne.n	8012aa4 <_fputs_r+0x60>
 8012aa0:	68ac      	ldr	r4, [r5, #8]
 8012aa2:	e7dc      	b.n	8012a5e <_fputs_r+0x1a>
 8012aa4:	4b19      	ldr	r3, [pc, #100]	; (8012b0c <_fputs_r+0xc8>)
 8012aa6:	429c      	cmp	r4, r3
 8012aa8:	bf08      	it	eq
 8012aaa:	68ec      	ldreq	r4, [r5, #12]
 8012aac:	e7d7      	b.n	8012a5e <_fputs_r+0x1a>
 8012aae:	4621      	mov	r1, r4
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	f001 fe09 	bl	80146c8 <__swsetup_r>
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	d0df      	beq.n	8012a7a <_fputs_r+0x36>
 8012aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012abc:	07da      	lsls	r2, r3, #31
 8012abe:	d405      	bmi.n	8012acc <_fputs_r+0x88>
 8012ac0:	89a3      	ldrh	r3, [r4, #12]
 8012ac2:	059b      	lsls	r3, r3, #22
 8012ac4:	d402      	bmi.n	8012acc <_fputs_r+0x88>
 8012ac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ac8:	f000 fa97 	bl	8012ffa <__retarget_lock_release_recursive>
 8012acc:	f04f 35ff 	mov.w	r5, #4294967295
 8012ad0:	e7e1      	b.n	8012a96 <_fputs_r+0x52>
 8012ad2:	68a3      	ldr	r3, [r4, #8]
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	60a3      	str	r3, [r4, #8]
 8012ada:	da04      	bge.n	8012ae6 <_fputs_r+0xa2>
 8012adc:	69a2      	ldr	r2, [r4, #24]
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	db06      	blt.n	8012af0 <_fputs_r+0xac>
 8012ae2:	290a      	cmp	r1, #10
 8012ae4:	d004      	beq.n	8012af0 <_fputs_r+0xac>
 8012ae6:	6823      	ldr	r3, [r4, #0]
 8012ae8:	1c5a      	adds	r2, r3, #1
 8012aea:	6022      	str	r2, [r4, #0]
 8012aec:	7019      	strb	r1, [r3, #0]
 8012aee:	e7c5      	b.n	8012a7c <_fputs_r+0x38>
 8012af0:	4622      	mov	r2, r4
 8012af2:	4628      	mov	r0, r5
 8012af4:	f001 fd84 	bl	8014600 <__swbuf_r>
 8012af8:	3001      	adds	r0, #1
 8012afa:	d1bf      	bne.n	8012a7c <_fputs_r+0x38>
 8012afc:	e7dd      	b.n	8012aba <_fputs_r+0x76>
 8012afe:	460d      	mov	r5, r1
 8012b00:	e7c9      	b.n	8012a96 <_fputs_r+0x52>
 8012b02:	bf00      	nop
 8012b04:	08019458 	.word	0x08019458
 8012b08:	08019478 	.word	0x08019478
 8012b0c:	08019438 	.word	0x08019438

08012b10 <fputs>:
 8012b10:	4b02      	ldr	r3, [pc, #8]	; (8012b1c <fputs+0xc>)
 8012b12:	460a      	mov	r2, r1
 8012b14:	4601      	mov	r1, r0
 8012b16:	6818      	ldr	r0, [r3, #0]
 8012b18:	f7ff bf94 	b.w	8012a44 <_fputs_r>
 8012b1c:	20000100 	.word	0x20000100

08012b20 <_fseek_r>:
 8012b20:	f000 b800 	b.w	8012b24 <_fseeko_r>

08012b24 <_fseeko_r>:
 8012b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b28:	460c      	mov	r4, r1
 8012b2a:	4617      	mov	r7, r2
 8012b2c:	461e      	mov	r6, r3
 8012b2e:	4605      	mov	r5, r0
 8012b30:	b118      	cbz	r0, 8012b3a <_fseeko_r+0x16>
 8012b32:	6983      	ldr	r3, [r0, #24]
 8012b34:	b90b      	cbnz	r3, 8012b3a <_fseeko_r+0x16>
 8012b36:	f7ff feab 	bl	8012890 <__sinit>
 8012b3a:	4b44      	ldr	r3, [pc, #272]	; (8012c4c <_fseeko_r+0x128>)
 8012b3c:	429c      	cmp	r4, r3
 8012b3e:	d122      	bne.n	8012b86 <_fseeko_r+0x62>
 8012b40:	686c      	ldr	r4, [r5, #4]
 8012b42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b44:	07d9      	lsls	r1, r3, #31
 8012b46:	d405      	bmi.n	8012b54 <_fseeko_r+0x30>
 8012b48:	89a3      	ldrh	r3, [r4, #12]
 8012b4a:	059a      	lsls	r2, r3, #22
 8012b4c:	d402      	bmi.n	8012b54 <_fseeko_r+0x30>
 8012b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b50:	f000 fa51 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 8012b54:	89a3      	ldrh	r3, [r4, #12]
 8012b56:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8012b5a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8012b5e:	d103      	bne.n	8012b68 <_fseeko_r+0x44>
 8012b60:	4621      	mov	r1, r4
 8012b62:	4628      	mov	r0, r5
 8012b64:	f7ff fdee 	bl	8012744 <_fflush_r>
 8012b68:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8012b6c:	f1b8 0f00 	cmp.w	r8, #0
 8012b70:	d113      	bne.n	8012b9a <_fseeko_r+0x76>
 8012b72:	231d      	movs	r3, #29
 8012b74:	602b      	str	r3, [r5, #0]
 8012b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b78:	07d9      	lsls	r1, r3, #31
 8012b7a:	d55d      	bpl.n	8012c38 <_fseeko_r+0x114>
 8012b7c:	f04f 36ff 	mov.w	r6, #4294967295
 8012b80:	4630      	mov	r0, r6
 8012b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b86:	4b32      	ldr	r3, [pc, #200]	; (8012c50 <_fseeko_r+0x12c>)
 8012b88:	429c      	cmp	r4, r3
 8012b8a:	d101      	bne.n	8012b90 <_fseeko_r+0x6c>
 8012b8c:	68ac      	ldr	r4, [r5, #8]
 8012b8e:	e7d8      	b.n	8012b42 <_fseeko_r+0x1e>
 8012b90:	4b30      	ldr	r3, [pc, #192]	; (8012c54 <_fseeko_r+0x130>)
 8012b92:	429c      	cmp	r4, r3
 8012b94:	bf08      	it	eq
 8012b96:	68ec      	ldreq	r4, [r5, #12]
 8012b98:	e7d3      	b.n	8012b42 <_fseeko_r+0x1e>
 8012b9a:	2e01      	cmp	r6, #1
 8012b9c:	d036      	beq.n	8012c0c <_fseeko_r+0xe8>
 8012b9e:	f036 0302 	bics.w	r3, r6, #2
 8012ba2:	d147      	bne.n	8012c34 <_fseeko_r+0x110>
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	b91b      	cbnz	r3, 8012bb0 <_fseeko_r+0x8c>
 8012ba8:	4621      	mov	r1, r4
 8012baa:	4628      	mov	r0, r5
 8012bac:	f000 fa4a 	bl	8013044 <__smakebuf_r>
 8012bb0:	4621      	mov	r1, r4
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	f7ff fdc6 	bl	8012744 <_fflush_r>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d1dc      	bne.n	8012b76 <_fseeko_r+0x52>
 8012bbc:	6a21      	ldr	r1, [r4, #32]
 8012bbe:	4633      	mov	r3, r6
 8012bc0:	463a      	mov	r2, r7
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	47c0      	blx	r8
 8012bc6:	3001      	adds	r0, #1
 8012bc8:	d0d5      	beq.n	8012b76 <_fseeko_r+0x52>
 8012bca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bcc:	b141      	cbz	r1, 8012be0 <_fseeko_r+0xbc>
 8012bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bd2:	4299      	cmp	r1, r3
 8012bd4:	d002      	beq.n	8012bdc <_fseeko_r+0xb8>
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f000 faaa 	bl	8013130 <_free_r>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	6363      	str	r3, [r4, #52]	; 0x34
 8012be0:	6923      	ldr	r3, [r4, #16]
 8012be2:	6023      	str	r3, [r4, #0]
 8012be4:	89a3      	ldrh	r3, [r4, #12]
 8012be6:	2500      	movs	r5, #0
 8012be8:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8012bec:	6065      	str	r5, [r4, #4]
 8012bee:	81a3      	strh	r3, [r4, #12]
 8012bf0:	2208      	movs	r2, #8
 8012bf2:	4629      	mov	r1, r5
 8012bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012bf8:	f000 fa82 	bl	8013100 <memset>
 8012bfc:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8012bfe:	f016 0601 	ands.w	r6, r6, #1
 8012c02:	d120      	bne.n	8012c46 <_fseeko_r+0x122>
 8012c04:	89a3      	ldrh	r3, [r4, #12]
 8012c06:	059b      	lsls	r3, r3, #22
 8012c08:	d4ba      	bmi.n	8012b80 <_fseeko_r+0x5c>
 8012c0a:	e00c      	b.n	8012c26 <_fseeko_r+0x102>
 8012c0c:	4621      	mov	r1, r4
 8012c0e:	4628      	mov	r0, r5
 8012c10:	f000 f822 	bl	8012c58 <_ftello_r>
 8012c14:	1c43      	adds	r3, r0, #1
 8012c16:	4606      	mov	r6, r0
 8012c18:	d109      	bne.n	8012c2e <_fseeko_r+0x10a>
 8012c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c1c:	07dd      	lsls	r5, r3, #31
 8012c1e:	d4ad      	bmi.n	8012b7c <_fseeko_r+0x58>
 8012c20:	89a3      	ldrh	r3, [r4, #12]
 8012c22:	0598      	lsls	r0, r3, #22
 8012c24:	d4aa      	bmi.n	8012b7c <_fseeko_r+0x58>
 8012c26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c28:	f000 f9e7 	bl	8012ffa <__retarget_lock_release_recursive>
 8012c2c:	e7a8      	b.n	8012b80 <_fseeko_r+0x5c>
 8012c2e:	4407      	add	r7, r0
 8012c30:	2600      	movs	r6, #0
 8012c32:	e7b7      	b.n	8012ba4 <_fseeko_r+0x80>
 8012c34:	2316      	movs	r3, #22
 8012c36:	e79d      	b.n	8012b74 <_fseeko_r+0x50>
 8012c38:	89a3      	ldrh	r3, [r4, #12]
 8012c3a:	059a      	lsls	r2, r3, #22
 8012c3c:	d49e      	bmi.n	8012b7c <_fseeko_r+0x58>
 8012c3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c40:	f000 f9db 	bl	8012ffa <__retarget_lock_release_recursive>
 8012c44:	e79a      	b.n	8012b7c <_fseeko_r+0x58>
 8012c46:	462e      	mov	r6, r5
 8012c48:	e79a      	b.n	8012b80 <_fseeko_r+0x5c>
 8012c4a:	bf00      	nop
 8012c4c:	08019458 	.word	0x08019458
 8012c50:	08019478 	.word	0x08019478
 8012c54:	08019438 	.word	0x08019438

08012c58 <_ftello_r>:
 8012c58:	b570      	push	{r4, r5, r6, lr}
 8012c5a:	460c      	mov	r4, r1
 8012c5c:	4605      	mov	r5, r0
 8012c5e:	b118      	cbz	r0, 8012c68 <_ftello_r+0x10>
 8012c60:	6983      	ldr	r3, [r0, #24]
 8012c62:	b90b      	cbnz	r3, 8012c68 <_ftello_r+0x10>
 8012c64:	f7ff fe14 	bl	8012890 <__sinit>
 8012c68:	4b32      	ldr	r3, [pc, #200]	; (8012d34 <_ftello_r+0xdc>)
 8012c6a:	429c      	cmp	r4, r3
 8012c6c:	d114      	bne.n	8012c98 <_ftello_r+0x40>
 8012c6e:	686c      	ldr	r4, [r5, #4]
 8012c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c72:	07da      	lsls	r2, r3, #31
 8012c74:	d405      	bmi.n	8012c82 <_ftello_r+0x2a>
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	059b      	lsls	r3, r3, #22
 8012c7a:	d402      	bmi.n	8012c82 <_ftello_r+0x2a>
 8012c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c7e:	f000 f9ba 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 8012c82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c84:	b9ce      	cbnz	r6, 8012cba <_ftello_r+0x62>
 8012c86:	231d      	movs	r3, #29
 8012c88:	602b      	str	r3, [r5, #0]
 8012c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c8c:	07de      	lsls	r6, r3, #31
 8012c8e:	d50d      	bpl.n	8012cac <_ftello_r+0x54>
 8012c90:	f04f 35ff 	mov.w	r5, #4294967295
 8012c94:	4628      	mov	r0, r5
 8012c96:	bd70      	pop	{r4, r5, r6, pc}
 8012c98:	4b27      	ldr	r3, [pc, #156]	; (8012d38 <_ftello_r+0xe0>)
 8012c9a:	429c      	cmp	r4, r3
 8012c9c:	d101      	bne.n	8012ca2 <_ftello_r+0x4a>
 8012c9e:	68ac      	ldr	r4, [r5, #8]
 8012ca0:	e7e6      	b.n	8012c70 <_ftello_r+0x18>
 8012ca2:	4b26      	ldr	r3, [pc, #152]	; (8012d3c <_ftello_r+0xe4>)
 8012ca4:	429c      	cmp	r4, r3
 8012ca6:	bf08      	it	eq
 8012ca8:	68ec      	ldreq	r4, [r5, #12]
 8012caa:	e7e1      	b.n	8012c70 <_ftello_r+0x18>
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	059d      	lsls	r5, r3, #22
 8012cb0:	d4ee      	bmi.n	8012c90 <_ftello_r+0x38>
 8012cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cb4:	f000 f9a1 	bl	8012ffa <__retarget_lock_release_recursive>
 8012cb8:	e7ea      	b.n	8012c90 <_ftello_r+0x38>
 8012cba:	89a2      	ldrh	r2, [r4, #12]
 8012cbc:	f002 030c 	and.w	r3, r2, #12
 8012cc0:	2b08      	cmp	r3, #8
 8012cc2:	d119      	bne.n	8012cf8 <_ftello_r+0xa0>
 8012cc4:	6823      	ldr	r3, [r4, #0]
 8012cc6:	b1bb      	cbz	r3, 8012cf8 <_ftello_r+0xa0>
 8012cc8:	6921      	ldr	r1, [r4, #16]
 8012cca:	1a5b      	subs	r3, r3, r1
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	dd13      	ble.n	8012cf8 <_ftello_r+0xa0>
 8012cd0:	05d0      	lsls	r0, r2, #23
 8012cd2:	d511      	bpl.n	8012cf8 <_ftello_r+0xa0>
 8012cd4:	2302      	movs	r3, #2
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	6a21      	ldr	r1, [r4, #32]
 8012cda:	4628      	mov	r0, r5
 8012cdc:	47b0      	blx	r6
 8012cde:	1c41      	adds	r1, r0, #1
 8012ce0:	4605      	mov	r5, r0
 8012ce2:	d10d      	bne.n	8012d00 <_ftello_r+0xa8>
 8012ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ce6:	07da      	lsls	r2, r3, #31
 8012ce8:	d4d2      	bmi.n	8012c90 <_ftello_r+0x38>
 8012cea:	89a3      	ldrh	r3, [r4, #12]
 8012cec:	059b      	lsls	r3, r3, #22
 8012cee:	d4cf      	bmi.n	8012c90 <_ftello_r+0x38>
 8012cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cf2:	f000 f982 	bl	8012ffa <__retarget_lock_release_recursive>
 8012cf6:	e7cd      	b.n	8012c94 <_ftello_r+0x3c>
 8012cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012cfc:	d00f      	beq.n	8012d1e <_ftello_r+0xc6>
 8012cfe:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012d00:	89a2      	ldrh	r2, [r4, #12]
 8012d02:	0756      	lsls	r6, r2, #29
 8012d04:	d50d      	bpl.n	8012d22 <_ftello_r+0xca>
 8012d06:	6863      	ldr	r3, [r4, #4]
 8012d08:	1aed      	subs	r5, r5, r3
 8012d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d0c:	b10b      	cbz	r3, 8012d12 <_ftello_r+0xba>
 8012d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d10:	1aed      	subs	r5, r5, r3
 8012d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d14:	07d9      	lsls	r1, r3, #31
 8012d16:	d4bd      	bmi.n	8012c94 <_ftello_r+0x3c>
 8012d18:	0593      	lsls	r3, r2, #22
 8012d1a:	d4bb      	bmi.n	8012c94 <_ftello_r+0x3c>
 8012d1c:	e7e8      	b.n	8012cf0 <_ftello_r+0x98>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e7da      	b.n	8012cd8 <_ftello_r+0x80>
 8012d22:	0710      	lsls	r0, r2, #28
 8012d24:	d5f5      	bpl.n	8012d12 <_ftello_r+0xba>
 8012d26:	6823      	ldr	r3, [r4, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d0f2      	beq.n	8012d12 <_ftello_r+0xba>
 8012d2c:	6921      	ldr	r1, [r4, #16]
 8012d2e:	1a5b      	subs	r3, r3, r1
 8012d30:	441d      	add	r5, r3
 8012d32:	e7ee      	b.n	8012d12 <_ftello_r+0xba>
 8012d34:	08019458 	.word	0x08019458
 8012d38:	08019478 	.word	0x08019478
 8012d3c:	08019438 	.word	0x08019438

08012d40 <_fwalk_reent>:
 8012d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d44:	4606      	mov	r6, r0
 8012d46:	4688      	mov	r8, r1
 8012d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d4c:	2700      	movs	r7, #0
 8012d4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d52:	f1b9 0901 	subs.w	r9, r9, #1
 8012d56:	d505      	bpl.n	8012d64 <_fwalk_reent+0x24>
 8012d58:	6824      	ldr	r4, [r4, #0]
 8012d5a:	2c00      	cmp	r4, #0
 8012d5c:	d1f7      	bne.n	8012d4e <_fwalk_reent+0xe>
 8012d5e:	4638      	mov	r0, r7
 8012d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d64:	89ab      	ldrh	r3, [r5, #12]
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	d907      	bls.n	8012d7a <_fwalk_reent+0x3a>
 8012d6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	d003      	beq.n	8012d7a <_fwalk_reent+0x3a>
 8012d72:	4629      	mov	r1, r5
 8012d74:	4630      	mov	r0, r6
 8012d76:	47c0      	blx	r8
 8012d78:	4307      	orrs	r7, r0
 8012d7a:	3568      	adds	r5, #104	; 0x68
 8012d7c:	e7e9      	b.n	8012d52 <_fwalk_reent+0x12>
	...

08012d80 <__libc_init_array>:
 8012d80:	b570      	push	{r4, r5, r6, lr}
 8012d82:	4d0d      	ldr	r5, [pc, #52]	; (8012db8 <__libc_init_array+0x38>)
 8012d84:	4c0d      	ldr	r4, [pc, #52]	; (8012dbc <__libc_init_array+0x3c>)
 8012d86:	1b64      	subs	r4, r4, r5
 8012d88:	10a4      	asrs	r4, r4, #2
 8012d8a:	2600      	movs	r6, #0
 8012d8c:	42a6      	cmp	r6, r4
 8012d8e:	d109      	bne.n	8012da4 <__libc_init_array+0x24>
 8012d90:	4d0b      	ldr	r5, [pc, #44]	; (8012dc0 <__libc_init_array+0x40>)
 8012d92:	4c0c      	ldr	r4, [pc, #48]	; (8012dc4 <__libc_init_array+0x44>)
 8012d94:	f003 f8e0 	bl	8015f58 <_init>
 8012d98:	1b64      	subs	r4, r4, r5
 8012d9a:	10a4      	asrs	r4, r4, #2
 8012d9c:	2600      	movs	r6, #0
 8012d9e:	42a6      	cmp	r6, r4
 8012da0:	d105      	bne.n	8012dae <__libc_init_array+0x2e>
 8012da2:	bd70      	pop	{r4, r5, r6, pc}
 8012da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012da8:	4798      	blx	r3
 8012daa:	3601      	adds	r6, #1
 8012dac:	e7ee      	b.n	8012d8c <__libc_init_array+0xc>
 8012dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8012db2:	4798      	blx	r3
 8012db4:	3601      	adds	r6, #1
 8012db6:	e7f2      	b.n	8012d9e <__libc_init_array+0x1e>
 8012db8:	08019a30 	.word	0x08019a30
 8012dbc:	08019a30 	.word	0x08019a30
 8012dc0:	08019a30 	.word	0x08019a30
 8012dc4:	08019a3c 	.word	0x08019a3c

08012dc8 <localtime>:
 8012dc8:	b538      	push	{r3, r4, r5, lr}
 8012dca:	4b0b      	ldr	r3, [pc, #44]	; (8012df8 <localtime+0x30>)
 8012dcc:	681d      	ldr	r5, [r3, #0]
 8012dce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	b953      	cbnz	r3, 8012dea <localtime+0x22>
 8012dd4:	2024      	movs	r0, #36	; 0x24
 8012dd6:	f000 f975 	bl	80130c4 <malloc>
 8012dda:	4602      	mov	r2, r0
 8012ddc:	63e8      	str	r0, [r5, #60]	; 0x3c
 8012dde:	b920      	cbnz	r0, 8012dea <localtime+0x22>
 8012de0:	4b06      	ldr	r3, [pc, #24]	; (8012dfc <localtime+0x34>)
 8012de2:	4807      	ldr	r0, [pc, #28]	; (8012e00 <localtime+0x38>)
 8012de4:	2132      	movs	r1, #50	; 0x32
 8012de6:	f001 fd43 	bl	8014870 <__assert_func>
 8012dea:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8012dec:	4620      	mov	r0, r4
 8012dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012df2:	f000 b807 	b.w	8012e04 <localtime_r>
 8012df6:	bf00      	nop
 8012df8:	20000100 	.word	0x20000100
 8012dfc:	0801949c 	.word	0x0801949c
 8012e00:	080194b3 	.word	0x080194b3

08012e04 <localtime_r>:
 8012e04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012e08:	4607      	mov	r7, r0
 8012e0a:	9101      	str	r1, [sp, #4]
 8012e0c:	f001 fe0c 	bl	8014a28 <__gettzinfo>
 8012e10:	9901      	ldr	r1, [sp, #4]
 8012e12:	4680      	mov	r8, r0
 8012e14:	4638      	mov	r0, r7
 8012e16:	f001 fe0b 	bl	8014a30 <gmtime_r>
 8012e1a:	6943      	ldr	r3, [r0, #20]
 8012e1c:	079a      	lsls	r2, r3, #30
 8012e1e:	4604      	mov	r4, r0
 8012e20:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8012e24:	d105      	bne.n	8012e32 <localtime_r+0x2e>
 8012e26:	2264      	movs	r2, #100	; 0x64
 8012e28:	fb96 f3f2 	sdiv	r3, r6, r2
 8012e2c:	fb02 6313 	mls	r3, r2, r3, r6
 8012e30:	bb7b      	cbnz	r3, 8012e92 <localtime_r+0x8e>
 8012e32:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012e36:	fb96 f5f3 	sdiv	r5, r6, r3
 8012e3a:	fb03 6515 	mls	r5, r3, r5, r6
 8012e3e:	fab5 f585 	clz	r5, r5
 8012e42:	096d      	lsrs	r5, r5, #5
 8012e44:	4b68      	ldr	r3, [pc, #416]	; (8012fe8 <localtime_r+0x1e4>)
 8012e46:	2230      	movs	r2, #48	; 0x30
 8012e48:	fb02 3505 	mla	r5, r2, r5, r3
 8012e4c:	f001 fa10 	bl	8014270 <__tz_lock>
 8012e50:	f001 fa1a 	bl	8014288 <_tzset_unlocked>
 8012e54:	4b65      	ldr	r3, [pc, #404]	; (8012fec <localtime_r+0x1e8>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	b353      	cbz	r3, 8012eb0 <localtime_r+0xac>
 8012e5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012e5e:	42b3      	cmp	r3, r6
 8012e60:	d119      	bne.n	8012e96 <localtime_r+0x92>
 8012e62:	f8d8 1000 	ldr.w	r1, [r8]
 8012e66:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012e6a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8012e6e:	b9d1      	cbnz	r1, 8012ea6 <localtime_r+0xa2>
 8012e70:	4296      	cmp	r6, r2
 8012e72:	eb77 0303 	sbcs.w	r3, r7, r3
 8012e76:	da23      	bge.n	8012ec0 <localtime_r+0xbc>
 8012e78:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8012e7c:	4296      	cmp	r6, r2
 8012e7e:	eb77 0303 	sbcs.w	r3, r7, r3
 8012e82:	bfb4      	ite	lt
 8012e84:	2301      	movlt	r3, #1
 8012e86:	2300      	movge	r3, #0
 8012e88:	6223      	str	r3, [r4, #32]
 8012e8a:	db1b      	blt.n	8012ec4 <localtime_r+0xc0>
 8012e8c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8012e90:	e01a      	b.n	8012ec8 <localtime_r+0xc4>
 8012e92:	2501      	movs	r5, #1
 8012e94:	e7d6      	b.n	8012e44 <localtime_r+0x40>
 8012e96:	4630      	mov	r0, r6
 8012e98:	f001 f942 	bl	8014120 <__tzcalc_limits>
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	d1e0      	bne.n	8012e62 <localtime_r+0x5e>
 8012ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea4:	e004      	b.n	8012eb0 <localtime_r+0xac>
 8012ea6:	4296      	cmp	r6, r2
 8012ea8:	eb77 0303 	sbcs.w	r3, r7, r3
 8012eac:	da02      	bge.n	8012eb4 <localtime_r+0xb0>
 8012eae:	2300      	movs	r3, #0
 8012eb0:	6223      	str	r3, [r4, #32]
 8012eb2:	e7eb      	b.n	8012e8c <localtime_r+0x88>
 8012eb4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8012eb8:	4296      	cmp	r6, r2
 8012eba:	eb77 0303 	sbcs.w	r3, r7, r3
 8012ebe:	daf6      	bge.n	8012eae <localtime_r+0xaa>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	6223      	str	r3, [r4, #32]
 8012ec4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8012ec8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012ecc:	203c      	movs	r0, #60	; 0x3c
 8012ece:	fb91 f6f3 	sdiv	r6, r1, r3
 8012ed2:	fb03 1316 	mls	r3, r3, r6, r1
 8012ed6:	6861      	ldr	r1, [r4, #4]
 8012ed8:	fb93 f2f0 	sdiv	r2, r3, r0
 8012edc:	fb00 3012 	mls	r0, r0, r2, r3
 8012ee0:	6823      	ldr	r3, [r4, #0]
 8012ee2:	1a89      	subs	r1, r1, r2
 8012ee4:	68a2      	ldr	r2, [r4, #8]
 8012ee6:	6061      	str	r1, [r4, #4]
 8012ee8:	1a1b      	subs	r3, r3, r0
 8012eea:	1b92      	subs	r2, r2, r6
 8012eec:	2b3b      	cmp	r3, #59	; 0x3b
 8012eee:	6023      	str	r3, [r4, #0]
 8012ef0:	60a2      	str	r2, [r4, #8]
 8012ef2:	dd35      	ble.n	8012f60 <localtime_r+0x15c>
 8012ef4:	3101      	adds	r1, #1
 8012ef6:	6061      	str	r1, [r4, #4]
 8012ef8:	3b3c      	subs	r3, #60	; 0x3c
 8012efa:	6023      	str	r3, [r4, #0]
 8012efc:	6863      	ldr	r3, [r4, #4]
 8012efe:	2b3b      	cmp	r3, #59	; 0x3b
 8012f00:	dd34      	ble.n	8012f6c <localtime_r+0x168>
 8012f02:	3201      	adds	r2, #1
 8012f04:	60a2      	str	r2, [r4, #8]
 8012f06:	3b3c      	subs	r3, #60	; 0x3c
 8012f08:	6063      	str	r3, [r4, #4]
 8012f0a:	68a3      	ldr	r3, [r4, #8]
 8012f0c:	2b17      	cmp	r3, #23
 8012f0e:	dd33      	ble.n	8012f78 <localtime_r+0x174>
 8012f10:	69e2      	ldr	r2, [r4, #28]
 8012f12:	3201      	adds	r2, #1
 8012f14:	61e2      	str	r2, [r4, #28]
 8012f16:	69a2      	ldr	r2, [r4, #24]
 8012f18:	3201      	adds	r2, #1
 8012f1a:	2a06      	cmp	r2, #6
 8012f1c:	bfc8      	it	gt
 8012f1e:	2200      	movgt	r2, #0
 8012f20:	61a2      	str	r2, [r4, #24]
 8012f22:	68e2      	ldr	r2, [r4, #12]
 8012f24:	3b18      	subs	r3, #24
 8012f26:	3201      	adds	r2, #1
 8012f28:	60a3      	str	r3, [r4, #8]
 8012f2a:	6923      	ldr	r3, [r4, #16]
 8012f2c:	60e2      	str	r2, [r4, #12]
 8012f2e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8012f32:	428a      	cmp	r2, r1
 8012f34:	dd0e      	ble.n	8012f54 <localtime_r+0x150>
 8012f36:	2b0b      	cmp	r3, #11
 8012f38:	eba2 0201 	sub.w	r2, r2, r1
 8012f3c:	60e2      	str	r2, [r4, #12]
 8012f3e:	f103 0201 	add.w	r2, r3, #1
 8012f42:	bf09      	itett	eq
 8012f44:	6963      	ldreq	r3, [r4, #20]
 8012f46:	6122      	strne	r2, [r4, #16]
 8012f48:	2200      	moveq	r2, #0
 8012f4a:	3301      	addeq	r3, #1
 8012f4c:	bf02      	ittt	eq
 8012f4e:	6122      	streq	r2, [r4, #16]
 8012f50:	6163      	streq	r3, [r4, #20]
 8012f52:	61e2      	streq	r2, [r4, #28]
 8012f54:	f001 f992 	bl	801427c <__tz_unlock>
 8012f58:	4620      	mov	r0, r4
 8012f5a:	b002      	add	sp, #8
 8012f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	dacb      	bge.n	8012efc <localtime_r+0xf8>
 8012f64:	3901      	subs	r1, #1
 8012f66:	6061      	str	r1, [r4, #4]
 8012f68:	333c      	adds	r3, #60	; 0x3c
 8012f6a:	e7c6      	b.n	8012efa <localtime_r+0xf6>
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	dacc      	bge.n	8012f0a <localtime_r+0x106>
 8012f70:	3a01      	subs	r2, #1
 8012f72:	60a2      	str	r2, [r4, #8]
 8012f74:	333c      	adds	r3, #60	; 0x3c
 8012f76:	e7c7      	b.n	8012f08 <localtime_r+0x104>
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	daeb      	bge.n	8012f54 <localtime_r+0x150>
 8012f7c:	69e2      	ldr	r2, [r4, #28]
 8012f7e:	3a01      	subs	r2, #1
 8012f80:	61e2      	str	r2, [r4, #28]
 8012f82:	69a2      	ldr	r2, [r4, #24]
 8012f84:	3a01      	subs	r2, #1
 8012f86:	bf48      	it	mi
 8012f88:	2206      	movmi	r2, #6
 8012f8a:	61a2      	str	r2, [r4, #24]
 8012f8c:	68e2      	ldr	r2, [r4, #12]
 8012f8e:	3318      	adds	r3, #24
 8012f90:	3a01      	subs	r2, #1
 8012f92:	60e2      	str	r2, [r4, #12]
 8012f94:	60a3      	str	r3, [r4, #8]
 8012f96:	2a00      	cmp	r2, #0
 8012f98:	d1dc      	bne.n	8012f54 <localtime_r+0x150>
 8012f9a:	6923      	ldr	r3, [r4, #16]
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	d405      	bmi.n	8012fac <localtime_r+0x1a8>
 8012fa0:	6123      	str	r3, [r4, #16]
 8012fa2:	6923      	ldr	r3, [r4, #16]
 8012fa4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8012fa8:	60e3      	str	r3, [r4, #12]
 8012faa:	e7d3      	b.n	8012f54 <localtime_r+0x150>
 8012fac:	230b      	movs	r3, #11
 8012fae:	6123      	str	r3, [r4, #16]
 8012fb0:	6963      	ldr	r3, [r4, #20]
 8012fb2:	1e5a      	subs	r2, r3, #1
 8012fb4:	6162      	str	r2, [r4, #20]
 8012fb6:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8012fba:	0793      	lsls	r3, r2, #30
 8012fbc:	d105      	bne.n	8012fca <localtime_r+0x1c6>
 8012fbe:	2164      	movs	r1, #100	; 0x64
 8012fc0:	fb92 f3f1 	sdiv	r3, r2, r1
 8012fc4:	fb01 2313 	mls	r3, r1, r3, r2
 8012fc8:	b963      	cbnz	r3, 8012fe4 <localtime_r+0x1e0>
 8012fca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012fce:	fb92 f3f1 	sdiv	r3, r2, r1
 8012fd2:	fb01 2313 	mls	r3, r1, r3, r2
 8012fd6:	fab3 f383 	clz	r3, r3
 8012fda:	095b      	lsrs	r3, r3, #5
 8012fdc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8012fe0:	61e3      	str	r3, [r4, #28]
 8012fe2:	e7de      	b.n	8012fa2 <localtime_r+0x19e>
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	e7f9      	b.n	8012fdc <localtime_r+0x1d8>
 8012fe8:	08019514 	.word	0x08019514
 8012fec:	20000c14 	.word	0x20000c14

08012ff0 <__retarget_lock_init_recursive>:
 8012ff0:	4770      	bx	lr

08012ff2 <__retarget_lock_close_recursive>:
 8012ff2:	4770      	bx	lr

08012ff4 <__retarget_lock_acquire>:
 8012ff4:	4770      	bx	lr

08012ff6 <__retarget_lock_acquire_recursive>:
 8012ff6:	4770      	bx	lr

08012ff8 <__retarget_lock_release>:
 8012ff8:	4770      	bx	lr

08012ffa <__retarget_lock_release_recursive>:
 8012ffa:	4770      	bx	lr

08012ffc <__swhatbuf_r>:
 8012ffc:	b570      	push	{r4, r5, r6, lr}
 8012ffe:	460e      	mov	r6, r1
 8013000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013004:	2900      	cmp	r1, #0
 8013006:	b096      	sub	sp, #88	; 0x58
 8013008:	4614      	mov	r4, r2
 801300a:	461d      	mov	r5, r3
 801300c:	da07      	bge.n	801301e <__swhatbuf_r+0x22>
 801300e:	2300      	movs	r3, #0
 8013010:	602b      	str	r3, [r5, #0]
 8013012:	89b3      	ldrh	r3, [r6, #12]
 8013014:	061a      	lsls	r2, r3, #24
 8013016:	d410      	bmi.n	801303a <__swhatbuf_r+0x3e>
 8013018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801301c:	e00e      	b.n	801303c <__swhatbuf_r+0x40>
 801301e:	466a      	mov	r2, sp
 8013020:	f001 fc9c 	bl	801495c <_fstat_r>
 8013024:	2800      	cmp	r0, #0
 8013026:	dbf2      	blt.n	801300e <__swhatbuf_r+0x12>
 8013028:	9a01      	ldr	r2, [sp, #4]
 801302a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801302e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013032:	425a      	negs	r2, r3
 8013034:	415a      	adcs	r2, r3
 8013036:	602a      	str	r2, [r5, #0]
 8013038:	e7ee      	b.n	8013018 <__swhatbuf_r+0x1c>
 801303a:	2340      	movs	r3, #64	; 0x40
 801303c:	2000      	movs	r0, #0
 801303e:	6023      	str	r3, [r4, #0]
 8013040:	b016      	add	sp, #88	; 0x58
 8013042:	bd70      	pop	{r4, r5, r6, pc}

08013044 <__smakebuf_r>:
 8013044:	898b      	ldrh	r3, [r1, #12]
 8013046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013048:	079d      	lsls	r5, r3, #30
 801304a:	4606      	mov	r6, r0
 801304c:	460c      	mov	r4, r1
 801304e:	d507      	bpl.n	8013060 <__smakebuf_r+0x1c>
 8013050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013054:	6023      	str	r3, [r4, #0]
 8013056:	6123      	str	r3, [r4, #16]
 8013058:	2301      	movs	r3, #1
 801305a:	6163      	str	r3, [r4, #20]
 801305c:	b002      	add	sp, #8
 801305e:	bd70      	pop	{r4, r5, r6, pc}
 8013060:	ab01      	add	r3, sp, #4
 8013062:	466a      	mov	r2, sp
 8013064:	f7ff ffca 	bl	8012ffc <__swhatbuf_r>
 8013068:	9900      	ldr	r1, [sp, #0]
 801306a:	4605      	mov	r5, r0
 801306c:	4630      	mov	r0, r6
 801306e:	f000 f8af 	bl	80131d0 <_malloc_r>
 8013072:	b948      	cbnz	r0, 8013088 <__smakebuf_r+0x44>
 8013074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013078:	059a      	lsls	r2, r3, #22
 801307a:	d4ef      	bmi.n	801305c <__smakebuf_r+0x18>
 801307c:	f023 0303 	bic.w	r3, r3, #3
 8013080:	f043 0302 	orr.w	r3, r3, #2
 8013084:	81a3      	strh	r3, [r4, #12]
 8013086:	e7e3      	b.n	8013050 <__smakebuf_r+0xc>
 8013088:	4b0d      	ldr	r3, [pc, #52]	; (80130c0 <__smakebuf_r+0x7c>)
 801308a:	62b3      	str	r3, [r6, #40]	; 0x28
 801308c:	89a3      	ldrh	r3, [r4, #12]
 801308e:	6020      	str	r0, [r4, #0]
 8013090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013094:	81a3      	strh	r3, [r4, #12]
 8013096:	9b00      	ldr	r3, [sp, #0]
 8013098:	6163      	str	r3, [r4, #20]
 801309a:	9b01      	ldr	r3, [sp, #4]
 801309c:	6120      	str	r0, [r4, #16]
 801309e:	b15b      	cbz	r3, 80130b8 <__smakebuf_r+0x74>
 80130a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130a4:	4630      	mov	r0, r6
 80130a6:	f001 fd73 	bl	8014b90 <_isatty_r>
 80130aa:	b128      	cbz	r0, 80130b8 <__smakebuf_r+0x74>
 80130ac:	89a3      	ldrh	r3, [r4, #12]
 80130ae:	f023 0303 	bic.w	r3, r3, #3
 80130b2:	f043 0301 	orr.w	r3, r3, #1
 80130b6:	81a3      	strh	r3, [r4, #12]
 80130b8:	89a0      	ldrh	r0, [r4, #12]
 80130ba:	4305      	orrs	r5, r0
 80130bc:	81a5      	strh	r5, [r4, #12]
 80130be:	e7cd      	b.n	801305c <__smakebuf_r+0x18>
 80130c0:	08012829 	.word	0x08012829

080130c4 <malloc>:
 80130c4:	4b02      	ldr	r3, [pc, #8]	; (80130d0 <malloc+0xc>)
 80130c6:	4601      	mov	r1, r0
 80130c8:	6818      	ldr	r0, [r3, #0]
 80130ca:	f000 b881 	b.w	80131d0 <_malloc_r>
 80130ce:	bf00      	nop
 80130d0:	20000100 	.word	0x20000100

080130d4 <free>:
 80130d4:	4b02      	ldr	r3, [pc, #8]	; (80130e0 <free+0xc>)
 80130d6:	4601      	mov	r1, r0
 80130d8:	6818      	ldr	r0, [r3, #0]
 80130da:	f000 b829 	b.w	8013130 <_free_r>
 80130de:	bf00      	nop
 80130e0:	20000100 	.word	0x20000100

080130e4 <memcpy>:
 80130e4:	440a      	add	r2, r1
 80130e6:	4291      	cmp	r1, r2
 80130e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80130ec:	d100      	bne.n	80130f0 <memcpy+0xc>
 80130ee:	4770      	bx	lr
 80130f0:	b510      	push	{r4, lr}
 80130f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130fa:	4291      	cmp	r1, r2
 80130fc:	d1f9      	bne.n	80130f2 <memcpy+0xe>
 80130fe:	bd10      	pop	{r4, pc}

08013100 <memset>:
 8013100:	4402      	add	r2, r0
 8013102:	4603      	mov	r3, r0
 8013104:	4293      	cmp	r3, r2
 8013106:	d100      	bne.n	801310a <memset+0xa>
 8013108:	4770      	bx	lr
 801310a:	f803 1b01 	strb.w	r1, [r3], #1
 801310e:	e7f9      	b.n	8013104 <memset+0x4>

08013110 <_calloc_r>:
 8013110:	b513      	push	{r0, r1, r4, lr}
 8013112:	434a      	muls	r2, r1
 8013114:	4611      	mov	r1, r2
 8013116:	9201      	str	r2, [sp, #4]
 8013118:	f000 f85a 	bl	80131d0 <_malloc_r>
 801311c:	4604      	mov	r4, r0
 801311e:	b118      	cbz	r0, 8013128 <_calloc_r+0x18>
 8013120:	9a01      	ldr	r2, [sp, #4]
 8013122:	2100      	movs	r1, #0
 8013124:	f7ff ffec 	bl	8013100 <memset>
 8013128:	4620      	mov	r0, r4
 801312a:	b002      	add	sp, #8
 801312c:	bd10      	pop	{r4, pc}
	...

08013130 <_free_r>:
 8013130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013132:	2900      	cmp	r1, #0
 8013134:	d048      	beq.n	80131c8 <_free_r+0x98>
 8013136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801313a:	9001      	str	r0, [sp, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	f1a1 0404 	sub.w	r4, r1, #4
 8013142:	bfb8      	it	lt
 8013144:	18e4      	addlt	r4, r4, r3
 8013146:	f001 fd5b 	bl	8014c00 <__malloc_lock>
 801314a:	4a20      	ldr	r2, [pc, #128]	; (80131cc <_free_r+0x9c>)
 801314c:	9801      	ldr	r0, [sp, #4]
 801314e:	6813      	ldr	r3, [r2, #0]
 8013150:	4615      	mov	r5, r2
 8013152:	b933      	cbnz	r3, 8013162 <_free_r+0x32>
 8013154:	6063      	str	r3, [r4, #4]
 8013156:	6014      	str	r4, [r2, #0]
 8013158:	b003      	add	sp, #12
 801315a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801315e:	f001 bd55 	b.w	8014c0c <__malloc_unlock>
 8013162:	42a3      	cmp	r3, r4
 8013164:	d90b      	bls.n	801317e <_free_r+0x4e>
 8013166:	6821      	ldr	r1, [r4, #0]
 8013168:	1862      	adds	r2, r4, r1
 801316a:	4293      	cmp	r3, r2
 801316c:	bf04      	itt	eq
 801316e:	681a      	ldreq	r2, [r3, #0]
 8013170:	685b      	ldreq	r3, [r3, #4]
 8013172:	6063      	str	r3, [r4, #4]
 8013174:	bf04      	itt	eq
 8013176:	1852      	addeq	r2, r2, r1
 8013178:	6022      	streq	r2, [r4, #0]
 801317a:	602c      	str	r4, [r5, #0]
 801317c:	e7ec      	b.n	8013158 <_free_r+0x28>
 801317e:	461a      	mov	r2, r3
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	b10b      	cbz	r3, 8013188 <_free_r+0x58>
 8013184:	42a3      	cmp	r3, r4
 8013186:	d9fa      	bls.n	801317e <_free_r+0x4e>
 8013188:	6811      	ldr	r1, [r2, #0]
 801318a:	1855      	adds	r5, r2, r1
 801318c:	42a5      	cmp	r5, r4
 801318e:	d10b      	bne.n	80131a8 <_free_r+0x78>
 8013190:	6824      	ldr	r4, [r4, #0]
 8013192:	4421      	add	r1, r4
 8013194:	1854      	adds	r4, r2, r1
 8013196:	42a3      	cmp	r3, r4
 8013198:	6011      	str	r1, [r2, #0]
 801319a:	d1dd      	bne.n	8013158 <_free_r+0x28>
 801319c:	681c      	ldr	r4, [r3, #0]
 801319e:	685b      	ldr	r3, [r3, #4]
 80131a0:	6053      	str	r3, [r2, #4]
 80131a2:	4421      	add	r1, r4
 80131a4:	6011      	str	r1, [r2, #0]
 80131a6:	e7d7      	b.n	8013158 <_free_r+0x28>
 80131a8:	d902      	bls.n	80131b0 <_free_r+0x80>
 80131aa:	230c      	movs	r3, #12
 80131ac:	6003      	str	r3, [r0, #0]
 80131ae:	e7d3      	b.n	8013158 <_free_r+0x28>
 80131b0:	6825      	ldr	r5, [r4, #0]
 80131b2:	1961      	adds	r1, r4, r5
 80131b4:	428b      	cmp	r3, r1
 80131b6:	bf04      	itt	eq
 80131b8:	6819      	ldreq	r1, [r3, #0]
 80131ba:	685b      	ldreq	r3, [r3, #4]
 80131bc:	6063      	str	r3, [r4, #4]
 80131be:	bf04      	itt	eq
 80131c0:	1949      	addeq	r1, r1, r5
 80131c2:	6021      	streq	r1, [r4, #0]
 80131c4:	6054      	str	r4, [r2, #4]
 80131c6:	e7c7      	b.n	8013158 <_free_r+0x28>
 80131c8:	b003      	add	sp, #12
 80131ca:	bd30      	pop	{r4, r5, pc}
 80131cc:	20000bf0 	.word	0x20000bf0

080131d0 <_malloc_r>:
 80131d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131d2:	1ccd      	adds	r5, r1, #3
 80131d4:	f025 0503 	bic.w	r5, r5, #3
 80131d8:	3508      	adds	r5, #8
 80131da:	2d0c      	cmp	r5, #12
 80131dc:	bf38      	it	cc
 80131de:	250c      	movcc	r5, #12
 80131e0:	2d00      	cmp	r5, #0
 80131e2:	4606      	mov	r6, r0
 80131e4:	db01      	blt.n	80131ea <_malloc_r+0x1a>
 80131e6:	42a9      	cmp	r1, r5
 80131e8:	d903      	bls.n	80131f2 <_malloc_r+0x22>
 80131ea:	230c      	movs	r3, #12
 80131ec:	6033      	str	r3, [r6, #0]
 80131ee:	2000      	movs	r0, #0
 80131f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131f2:	f001 fd05 	bl	8014c00 <__malloc_lock>
 80131f6:	4921      	ldr	r1, [pc, #132]	; (801327c <_malloc_r+0xac>)
 80131f8:	680a      	ldr	r2, [r1, #0]
 80131fa:	4614      	mov	r4, r2
 80131fc:	b99c      	cbnz	r4, 8013226 <_malloc_r+0x56>
 80131fe:	4f20      	ldr	r7, [pc, #128]	; (8013280 <_malloc_r+0xb0>)
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	b923      	cbnz	r3, 801320e <_malloc_r+0x3e>
 8013204:	4621      	mov	r1, r4
 8013206:	4630      	mov	r0, r6
 8013208:	f000 f8da 	bl	80133c0 <_sbrk_r>
 801320c:	6038      	str	r0, [r7, #0]
 801320e:	4629      	mov	r1, r5
 8013210:	4630      	mov	r0, r6
 8013212:	f000 f8d5 	bl	80133c0 <_sbrk_r>
 8013216:	1c43      	adds	r3, r0, #1
 8013218:	d123      	bne.n	8013262 <_malloc_r+0x92>
 801321a:	230c      	movs	r3, #12
 801321c:	6033      	str	r3, [r6, #0]
 801321e:	4630      	mov	r0, r6
 8013220:	f001 fcf4 	bl	8014c0c <__malloc_unlock>
 8013224:	e7e3      	b.n	80131ee <_malloc_r+0x1e>
 8013226:	6823      	ldr	r3, [r4, #0]
 8013228:	1b5b      	subs	r3, r3, r5
 801322a:	d417      	bmi.n	801325c <_malloc_r+0x8c>
 801322c:	2b0b      	cmp	r3, #11
 801322e:	d903      	bls.n	8013238 <_malloc_r+0x68>
 8013230:	6023      	str	r3, [r4, #0]
 8013232:	441c      	add	r4, r3
 8013234:	6025      	str	r5, [r4, #0]
 8013236:	e004      	b.n	8013242 <_malloc_r+0x72>
 8013238:	6863      	ldr	r3, [r4, #4]
 801323a:	42a2      	cmp	r2, r4
 801323c:	bf0c      	ite	eq
 801323e:	600b      	streq	r3, [r1, #0]
 8013240:	6053      	strne	r3, [r2, #4]
 8013242:	4630      	mov	r0, r6
 8013244:	f001 fce2 	bl	8014c0c <__malloc_unlock>
 8013248:	f104 000b 	add.w	r0, r4, #11
 801324c:	1d23      	adds	r3, r4, #4
 801324e:	f020 0007 	bic.w	r0, r0, #7
 8013252:	1ac2      	subs	r2, r0, r3
 8013254:	d0cc      	beq.n	80131f0 <_malloc_r+0x20>
 8013256:	1a1b      	subs	r3, r3, r0
 8013258:	50a3      	str	r3, [r4, r2]
 801325a:	e7c9      	b.n	80131f0 <_malloc_r+0x20>
 801325c:	4622      	mov	r2, r4
 801325e:	6864      	ldr	r4, [r4, #4]
 8013260:	e7cc      	b.n	80131fc <_malloc_r+0x2c>
 8013262:	1cc4      	adds	r4, r0, #3
 8013264:	f024 0403 	bic.w	r4, r4, #3
 8013268:	42a0      	cmp	r0, r4
 801326a:	d0e3      	beq.n	8013234 <_malloc_r+0x64>
 801326c:	1a21      	subs	r1, r4, r0
 801326e:	4630      	mov	r0, r6
 8013270:	f000 f8a6 	bl	80133c0 <_sbrk_r>
 8013274:	3001      	adds	r0, #1
 8013276:	d1dd      	bne.n	8013234 <_malloc_r+0x64>
 8013278:	e7cf      	b.n	801321a <_malloc_r+0x4a>
 801327a:	bf00      	nop
 801327c:	20000bf0 	.word	0x20000bf0
 8013280:	20000bf4 	.word	0x20000bf4

08013284 <_open_r>:
 8013284:	b538      	push	{r3, r4, r5, lr}
 8013286:	4d07      	ldr	r5, [pc, #28]	; (80132a4 <_open_r+0x20>)
 8013288:	4604      	mov	r4, r0
 801328a:	4608      	mov	r0, r1
 801328c:	4611      	mov	r1, r2
 801328e:	2200      	movs	r2, #0
 8013290:	602a      	str	r2, [r5, #0]
 8013292:	461a      	mov	r2, r3
 8013294:	f7ed fdec 	bl	8000e70 <_open>
 8013298:	1c43      	adds	r3, r0, #1
 801329a:	d102      	bne.n	80132a2 <_open_r+0x1e>
 801329c:	682b      	ldr	r3, [r5, #0]
 801329e:	b103      	cbz	r3, 80132a2 <_open_r+0x1e>
 80132a0:	6023      	str	r3, [r4, #0]
 80132a2:	bd38      	pop	{r3, r4, r5, pc}
 80132a4:	20000cbc 	.word	0x20000cbc

080132a8 <putchar>:
 80132a8:	4b09      	ldr	r3, [pc, #36]	; (80132d0 <putchar+0x28>)
 80132aa:	b513      	push	{r0, r1, r4, lr}
 80132ac:	681c      	ldr	r4, [r3, #0]
 80132ae:	4601      	mov	r1, r0
 80132b0:	b134      	cbz	r4, 80132c0 <putchar+0x18>
 80132b2:	69a3      	ldr	r3, [r4, #24]
 80132b4:	b923      	cbnz	r3, 80132c0 <putchar+0x18>
 80132b6:	9001      	str	r0, [sp, #4]
 80132b8:	4620      	mov	r0, r4
 80132ba:	f7ff fae9 	bl	8012890 <__sinit>
 80132be:	9901      	ldr	r1, [sp, #4]
 80132c0:	68a2      	ldr	r2, [r4, #8]
 80132c2:	4620      	mov	r0, r4
 80132c4:	b002      	add	sp, #8
 80132c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132ca:	f002 b915 	b.w	80154f8 <_putc_r>
 80132ce:	bf00      	nop
 80132d0:	20000100 	.word	0x20000100

080132d4 <srand>:
 80132d4:	b538      	push	{r3, r4, r5, lr}
 80132d6:	4b10      	ldr	r3, [pc, #64]	; (8013318 <srand+0x44>)
 80132d8:	681d      	ldr	r5, [r3, #0]
 80132da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80132dc:	4604      	mov	r4, r0
 80132de:	b9b3      	cbnz	r3, 801330e <srand+0x3a>
 80132e0:	2018      	movs	r0, #24
 80132e2:	f7ff feef 	bl	80130c4 <malloc>
 80132e6:	4602      	mov	r2, r0
 80132e8:	63a8      	str	r0, [r5, #56]	; 0x38
 80132ea:	b920      	cbnz	r0, 80132f6 <srand+0x22>
 80132ec:	4b0b      	ldr	r3, [pc, #44]	; (801331c <srand+0x48>)
 80132ee:	480c      	ldr	r0, [pc, #48]	; (8013320 <srand+0x4c>)
 80132f0:	2142      	movs	r1, #66	; 0x42
 80132f2:	f001 fabd 	bl	8014870 <__assert_func>
 80132f6:	490b      	ldr	r1, [pc, #44]	; (8013324 <srand+0x50>)
 80132f8:	4b0b      	ldr	r3, [pc, #44]	; (8013328 <srand+0x54>)
 80132fa:	e9c0 1300 	strd	r1, r3, [r0]
 80132fe:	4b0b      	ldr	r3, [pc, #44]	; (801332c <srand+0x58>)
 8013300:	6083      	str	r3, [r0, #8]
 8013302:	230b      	movs	r3, #11
 8013304:	8183      	strh	r3, [r0, #12]
 8013306:	2100      	movs	r1, #0
 8013308:	2001      	movs	r0, #1
 801330a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801330e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013310:	2200      	movs	r2, #0
 8013312:	611c      	str	r4, [r3, #16]
 8013314:	615a      	str	r2, [r3, #20]
 8013316:	bd38      	pop	{r3, r4, r5, pc}
 8013318:	20000100 	.word	0x20000100
 801331c:	0801949c 	.word	0x0801949c
 8013320:	08019574 	.word	0x08019574
 8013324:	abcd330e 	.word	0xabcd330e
 8013328:	e66d1234 	.word	0xe66d1234
 801332c:	0005deec 	.word	0x0005deec

08013330 <rand>:
 8013330:	4b17      	ldr	r3, [pc, #92]	; (8013390 <rand+0x60>)
 8013332:	b510      	push	{r4, lr}
 8013334:	681c      	ldr	r4, [r3, #0]
 8013336:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013338:	b9b3      	cbnz	r3, 8013368 <rand+0x38>
 801333a:	2018      	movs	r0, #24
 801333c:	f7ff fec2 	bl	80130c4 <malloc>
 8013340:	63a0      	str	r0, [r4, #56]	; 0x38
 8013342:	b928      	cbnz	r0, 8013350 <rand+0x20>
 8013344:	4602      	mov	r2, r0
 8013346:	4b13      	ldr	r3, [pc, #76]	; (8013394 <rand+0x64>)
 8013348:	4813      	ldr	r0, [pc, #76]	; (8013398 <rand+0x68>)
 801334a:	214e      	movs	r1, #78	; 0x4e
 801334c:	f001 fa90 	bl	8014870 <__assert_func>
 8013350:	4a12      	ldr	r2, [pc, #72]	; (801339c <rand+0x6c>)
 8013352:	4b13      	ldr	r3, [pc, #76]	; (80133a0 <rand+0x70>)
 8013354:	e9c0 2300 	strd	r2, r3, [r0]
 8013358:	4b12      	ldr	r3, [pc, #72]	; (80133a4 <rand+0x74>)
 801335a:	6083      	str	r3, [r0, #8]
 801335c:	230b      	movs	r3, #11
 801335e:	8183      	strh	r3, [r0, #12]
 8013360:	2201      	movs	r2, #1
 8013362:	2300      	movs	r3, #0
 8013364:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013368:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801336a:	480f      	ldr	r0, [pc, #60]	; (80133a8 <rand+0x78>)
 801336c:	690a      	ldr	r2, [r1, #16]
 801336e:	694b      	ldr	r3, [r1, #20]
 8013370:	4c0e      	ldr	r4, [pc, #56]	; (80133ac <rand+0x7c>)
 8013372:	4350      	muls	r0, r2
 8013374:	fb04 0003 	mla	r0, r4, r3, r0
 8013378:	fba2 3404 	umull	r3, r4, r2, r4
 801337c:	1c5a      	adds	r2, r3, #1
 801337e:	4404      	add	r4, r0
 8013380:	f144 0000 	adc.w	r0, r4, #0
 8013384:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013388:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801338c:	bd10      	pop	{r4, pc}
 801338e:	bf00      	nop
 8013390:	20000100 	.word	0x20000100
 8013394:	0801949c 	.word	0x0801949c
 8013398:	08019574 	.word	0x08019574
 801339c:	abcd330e 	.word	0xabcd330e
 80133a0:	e66d1234 	.word	0xe66d1234
 80133a4:	0005deec 	.word	0x0005deec
 80133a8:	5851f42d 	.word	0x5851f42d
 80133ac:	4c957f2d 	.word	0x4c957f2d

080133b0 <realloc>:
 80133b0:	4b02      	ldr	r3, [pc, #8]	; (80133bc <realloc+0xc>)
 80133b2:	460a      	mov	r2, r1
 80133b4:	4601      	mov	r1, r0
 80133b6:	6818      	ldr	r0, [r3, #0]
 80133b8:	f001 bc2e 	b.w	8014c18 <_realloc_r>
 80133bc:	20000100 	.word	0x20000100

080133c0 <_sbrk_r>:
 80133c0:	b538      	push	{r3, r4, r5, lr}
 80133c2:	4d06      	ldr	r5, [pc, #24]	; (80133dc <_sbrk_r+0x1c>)
 80133c4:	2300      	movs	r3, #0
 80133c6:	4604      	mov	r4, r0
 80133c8:	4608      	mov	r0, r1
 80133ca:	602b      	str	r3, [r5, #0]
 80133cc:	f7ed fd5e 	bl	8000e8c <_sbrk>
 80133d0:	1c43      	adds	r3, r0, #1
 80133d2:	d102      	bne.n	80133da <_sbrk_r+0x1a>
 80133d4:	682b      	ldr	r3, [r5, #0]
 80133d6:	b103      	cbz	r3, 80133da <_sbrk_r+0x1a>
 80133d8:	6023      	str	r3, [r4, #0]
 80133da:	bd38      	pop	{r3, r4, r5, pc}
 80133dc:	20000cbc 	.word	0x20000cbc

080133e0 <_raise_r>:
 80133e0:	291f      	cmp	r1, #31
 80133e2:	b538      	push	{r3, r4, r5, lr}
 80133e4:	4604      	mov	r4, r0
 80133e6:	460d      	mov	r5, r1
 80133e8:	d904      	bls.n	80133f4 <_raise_r+0x14>
 80133ea:	2316      	movs	r3, #22
 80133ec:	6003      	str	r3, [r0, #0]
 80133ee:	f04f 30ff 	mov.w	r0, #4294967295
 80133f2:	bd38      	pop	{r3, r4, r5, pc}
 80133f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80133f6:	b112      	cbz	r2, 80133fe <_raise_r+0x1e>
 80133f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133fc:	b94b      	cbnz	r3, 8013412 <_raise_r+0x32>
 80133fe:	4620      	mov	r0, r4
 8013400:	f000 f830 	bl	8013464 <_getpid_r>
 8013404:	462a      	mov	r2, r5
 8013406:	4601      	mov	r1, r0
 8013408:	4620      	mov	r0, r4
 801340a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801340e:	f000 b817 	b.w	8013440 <_kill_r>
 8013412:	2b01      	cmp	r3, #1
 8013414:	d00a      	beq.n	801342c <_raise_r+0x4c>
 8013416:	1c59      	adds	r1, r3, #1
 8013418:	d103      	bne.n	8013422 <_raise_r+0x42>
 801341a:	2316      	movs	r3, #22
 801341c:	6003      	str	r3, [r0, #0]
 801341e:	2001      	movs	r0, #1
 8013420:	e7e7      	b.n	80133f2 <_raise_r+0x12>
 8013422:	2400      	movs	r4, #0
 8013424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013428:	4628      	mov	r0, r5
 801342a:	4798      	blx	r3
 801342c:	2000      	movs	r0, #0
 801342e:	e7e0      	b.n	80133f2 <_raise_r+0x12>

08013430 <raise>:
 8013430:	4b02      	ldr	r3, [pc, #8]	; (801343c <raise+0xc>)
 8013432:	4601      	mov	r1, r0
 8013434:	6818      	ldr	r0, [r3, #0]
 8013436:	f7ff bfd3 	b.w	80133e0 <_raise_r>
 801343a:	bf00      	nop
 801343c:	20000100 	.word	0x20000100

08013440 <_kill_r>:
 8013440:	b538      	push	{r3, r4, r5, lr}
 8013442:	4d07      	ldr	r5, [pc, #28]	; (8013460 <_kill_r+0x20>)
 8013444:	2300      	movs	r3, #0
 8013446:	4604      	mov	r4, r0
 8013448:	4608      	mov	r0, r1
 801344a:	4611      	mov	r1, r2
 801344c:	602b      	str	r3, [r5, #0]
 801344e:	f7ed fc88 	bl	8000d62 <_kill>
 8013452:	1c43      	adds	r3, r0, #1
 8013454:	d102      	bne.n	801345c <_kill_r+0x1c>
 8013456:	682b      	ldr	r3, [r5, #0]
 8013458:	b103      	cbz	r3, 801345c <_kill_r+0x1c>
 801345a:	6023      	str	r3, [r4, #0]
 801345c:	bd38      	pop	{r3, r4, r5, pc}
 801345e:	bf00      	nop
 8013460:	20000cbc 	.word	0x20000cbc

08013464 <_getpid_r>:
 8013464:	f7ed bc75 	b.w	8000d52 <_getpid>

08013468 <__sread>:
 8013468:	b510      	push	{r4, lr}
 801346a:	460c      	mov	r4, r1
 801346c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013470:	f002 f88a 	bl	8015588 <_read_r>
 8013474:	2800      	cmp	r0, #0
 8013476:	bfab      	itete	ge
 8013478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801347a:	89a3      	ldrhlt	r3, [r4, #12]
 801347c:	181b      	addge	r3, r3, r0
 801347e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013482:	bfac      	ite	ge
 8013484:	6563      	strge	r3, [r4, #84]	; 0x54
 8013486:	81a3      	strhlt	r3, [r4, #12]
 8013488:	bd10      	pop	{r4, pc}

0801348a <__seofread>:
 801348a:	2000      	movs	r0, #0
 801348c:	4770      	bx	lr

0801348e <__swrite>:
 801348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013492:	461f      	mov	r7, r3
 8013494:	898b      	ldrh	r3, [r1, #12]
 8013496:	05db      	lsls	r3, r3, #23
 8013498:	4605      	mov	r5, r0
 801349a:	460c      	mov	r4, r1
 801349c:	4616      	mov	r6, r2
 801349e:	d505      	bpl.n	80134ac <__swrite+0x1e>
 80134a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134a4:	2302      	movs	r3, #2
 80134a6:	2200      	movs	r2, #0
 80134a8:	f001 fb86 	bl	8014bb8 <_lseek_r>
 80134ac:	89a3      	ldrh	r3, [r4, #12]
 80134ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80134b6:	81a3      	strh	r3, [r4, #12]
 80134b8:	4632      	mov	r2, r6
 80134ba:	463b      	mov	r3, r7
 80134bc:	4628      	mov	r0, r5
 80134be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134c2:	f001 b8ef 	b.w	80146a4 <_write_r>

080134c6 <__sseek>:
 80134c6:	b510      	push	{r4, lr}
 80134c8:	460c      	mov	r4, r1
 80134ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ce:	f001 fb73 	bl	8014bb8 <_lseek_r>
 80134d2:	1c43      	adds	r3, r0, #1
 80134d4:	89a3      	ldrh	r3, [r4, #12]
 80134d6:	bf15      	itete	ne
 80134d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80134da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80134de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80134e2:	81a3      	strheq	r3, [r4, #12]
 80134e4:	bf18      	it	ne
 80134e6:	81a3      	strhne	r3, [r4, #12]
 80134e8:	bd10      	pop	{r4, pc}

080134ea <__sclose>:
 80134ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ee:	f001 b9dd 	b.w	80148ac <_close_r>
	...

080134f4 <iso_year_adjust>:
 80134f4:	6941      	ldr	r1, [r0, #20]
 80134f6:	2900      	cmp	r1, #0
 80134f8:	f240 736c 	movw	r3, #1900	; 0x76c
 80134fc:	bfa8      	it	ge
 80134fe:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8013502:	18ca      	adds	r2, r1, r3
 8013504:	078b      	lsls	r3, r1, #30
 8013506:	d105      	bne.n	8013514 <iso_year_adjust+0x20>
 8013508:	2164      	movs	r1, #100	; 0x64
 801350a:	fb92 f3f1 	sdiv	r3, r2, r1
 801350e:	fb01 2313 	mls	r3, r1, r3, r2
 8013512:	b9db      	cbnz	r3, 801354c <iso_year_adjust+0x58>
 8013514:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013518:	fb92 f3f1 	sdiv	r3, r2, r1
 801351c:	fb01 2313 	mls	r3, r1, r3, r2
 8013520:	fab3 f383 	clz	r3, r3
 8013524:	095b      	lsrs	r3, r3, #5
 8013526:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801352a:	0040      	lsls	r0, r0, #1
 801352c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8013530:	4418      	add	r0, r3
 8013532:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8013536:	4298      	cmp	r0, r3
 8013538:	d03a      	beq.n	80135b0 <iso_year_adjust+0xbc>
 801353a:	dc21      	bgt.n	8013580 <iso_year_adjust+0x8c>
 801353c:	2801      	cmp	r0, #1
 801353e:	dc1a      	bgt.n	8013576 <iso_year_adjust+0x82>
 8013540:	2800      	cmp	r0, #0
 8013542:	bfb4      	ite	lt
 8013544:	2000      	movlt	r0, #0
 8013546:	f04f 30ff 	movge.w	r0, #4294967295
 801354a:	4770      	bx	lr
 801354c:	2301      	movs	r3, #1
 801354e:	e7ea      	b.n	8013526 <iso_year_adjust+0x32>
 8013550:	2817      	cmp	r0, #23
 8013552:	d813      	bhi.n	801357c <iso_year_adjust+0x88>
 8013554:	e8df f000 	tbb	[pc, r0]
 8013558:	0c0c0c0c 	.word	0x0c0c0c0c
 801355c:	0c0c1212 	.word	0x0c0c1212
 8013560:	12121212 	.word	0x12121212
 8013564:	12121212 	.word	0x12121212
 8013568:	0c0c1212 	.word	0x0c0c1212
 801356c:	0c0c1212 	.word	0x0c0c1212
 8013570:	f04f 30ff 	mov.w	r0, #4294967295
 8013574:	4770      	bx	lr
 8013576:	380a      	subs	r0, #10
 8013578:	2817      	cmp	r0, #23
 801357a:	d9e9      	bls.n	8013550 <iso_year_adjust+0x5c>
 801357c:	2000      	movs	r0, #0
 801357e:	4770      	bx	lr
 8013580:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8013584:	4298      	cmp	r0, r3
 8013586:	dc06      	bgt.n	8013596 <iso_year_adjust+0xa2>
 8013588:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801358c:	4298      	cmp	r0, r3
 801358e:	bfd4      	ite	le
 8013590:	2000      	movle	r0, #0
 8013592:	2001      	movgt	r0, #1
 8013594:	4770      	bx	lr
 8013596:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801359a:	3802      	subs	r0, #2
 801359c:	2815      	cmp	r0, #21
 801359e:	d8ed      	bhi.n	801357c <iso_year_adjust+0x88>
 80135a0:	2301      	movs	r3, #1
 80135a2:	4083      	lsls	r3, r0
 80135a4:	4803      	ldr	r0, [pc, #12]	; (80135b4 <iso_year_adjust+0xc0>)
 80135a6:	4018      	ands	r0, r3
 80135a8:	3800      	subs	r0, #0
 80135aa:	bf18      	it	ne
 80135ac:	2001      	movne	r0, #1
 80135ae:	4770      	bx	lr
 80135b0:	2001      	movs	r0, #1
 80135b2:	4770      	bx	lr
 80135b4:	002a001f 	.word	0x002a001f

080135b8 <__strftime>:
 80135b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135bc:	b091      	sub	sp, #68	; 0x44
 80135be:	461d      	mov	r5, r3
 80135c0:	2300      	movs	r3, #0
 80135c2:	4681      	mov	r9, r0
 80135c4:	4688      	mov	r8, r1
 80135c6:	9304      	str	r3, [sp, #16]
 80135c8:	461c      	mov	r4, r3
 80135ca:	7813      	ldrb	r3, [r2, #0]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	f000 84d1 	beq.w	8013f74 <__strftime+0x9bc>
 80135d2:	2b25      	cmp	r3, #37	; 0x25
 80135d4:	d11b      	bne.n	801360e <__strftime+0x56>
 80135d6:	7857      	ldrb	r7, [r2, #1]
 80135d8:	2f30      	cmp	r7, #48	; 0x30
 80135da:	d024      	beq.n	8013626 <__strftime+0x6e>
 80135dc:	2f2b      	cmp	r7, #43	; 0x2b
 80135de:	d022      	beq.n	8013626 <__strftime+0x6e>
 80135e0:	f102 0b01 	add.w	fp, r2, #1
 80135e4:	2700      	movs	r7, #0
 80135e6:	f89b 3000 	ldrb.w	r3, [fp]
 80135ea:	3b31      	subs	r3, #49	; 0x31
 80135ec:	2b08      	cmp	r3, #8
 80135ee:	d81d      	bhi.n	801362c <__strftime+0x74>
 80135f0:	4658      	mov	r0, fp
 80135f2:	220a      	movs	r2, #10
 80135f4:	a908      	add	r1, sp, #32
 80135f6:	f000 fd6f 	bl	80140d8 <strtoul>
 80135fa:	f8dd b020 	ldr.w	fp, [sp, #32]
 80135fe:	4606      	mov	r6, r0
 8013600:	f89b 3000 	ldrb.w	r3, [fp]
 8013604:	2b45      	cmp	r3, #69	; 0x45
 8013606:	d113      	bne.n	8013630 <__strftime+0x78>
 8013608:	f10b 0b01 	add.w	fp, fp, #1
 801360c:	e012      	b.n	8013634 <__strftime+0x7c>
 801360e:	f108 31ff 	add.w	r1, r8, #4294967295
 8013612:	42a1      	cmp	r1, r4
 8013614:	d802      	bhi.n	801361c <__strftime+0x64>
 8013616:	2400      	movs	r4, #0
 8013618:	f000 bcb2 	b.w	8013f80 <__strftime+0x9c8>
 801361c:	f809 3004 	strb.w	r3, [r9, r4]
 8013620:	3201      	adds	r2, #1
 8013622:	3401      	adds	r4, #1
 8013624:	e7d1      	b.n	80135ca <__strftime+0x12>
 8013626:	f102 0b02 	add.w	fp, r2, #2
 801362a:	e7dc      	b.n	80135e6 <__strftime+0x2e>
 801362c:	2600      	movs	r6, #0
 801362e:	e7e7      	b.n	8013600 <__strftime+0x48>
 8013630:	2b4f      	cmp	r3, #79	; 0x4f
 8013632:	d0e9      	beq.n	8013608 <__strftime+0x50>
 8013634:	f89b 0000 	ldrb.w	r0, [fp]
 8013638:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801363c:	2b55      	cmp	r3, #85	; 0x55
 801363e:	d8ea      	bhi.n	8013616 <__strftime+0x5e>
 8013640:	a201      	add	r2, pc, #4	; (adr r2, 8013648 <__strftime+0x90>)
 8013642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013646:	bf00      	nop
 8013648:	08013f67 	.word	0x08013f67
 801364c:	08013617 	.word	0x08013617
 8013650:	08013617 	.word	0x08013617
 8013654:	08013617 	.word	0x08013617
 8013658:	08013617 	.word	0x08013617
 801365c:	08013617 	.word	0x08013617
 8013660:	08013617 	.word	0x08013617
 8013664:	08013617 	.word	0x08013617
 8013668:	08013617 	.word	0x08013617
 801366c:	08013617 	.word	0x08013617
 8013670:	08013617 	.word	0x08013617
 8013674:	08013617 	.word	0x08013617
 8013678:	08013617 	.word	0x08013617
 801367c:	08013617 	.word	0x08013617
 8013680:	08013617 	.word	0x08013617
 8013684:	08013617 	.word	0x08013617
 8013688:	08013617 	.word	0x08013617
 801368c:	08013617 	.word	0x08013617
 8013690:	08013617 	.word	0x08013617
 8013694:	08013617 	.word	0x08013617
 8013698:	08013617 	.word	0x08013617
 801369c:	08013617 	.word	0x08013617
 80136a0:	08013617 	.word	0x08013617
 80136a4:	08013617 	.word	0x08013617
 80136a8:	08013617 	.word	0x08013617
 80136ac:	08013617 	.word	0x08013617
 80136b0:	08013617 	.word	0x08013617
 80136b4:	08013617 	.word	0x08013617
 80136b8:	080137df 	.word	0x080137df
 80136bc:	08013839 	.word	0x08013839
 80136c0:	080138af 	.word	0x080138af
 80136c4:	08013949 	.word	0x08013949
 80136c8:	08013617 	.word	0x08013617
 80136cc:	08013995 	.word	0x08013995
 80136d0:	08013a75 	.word	0x08013a75
 80136d4:	08013b77 	.word	0x08013b77
 80136d8:	08013b85 	.word	0x08013b85
 80136dc:	08013617 	.word	0x08013617
 80136e0:	08013617 	.word	0x08013617
 80136e4:	08013617 	.word	0x08013617
 80136e8:	08013bb5 	.word	0x08013bb5
 80136ec:	08013617 	.word	0x08013617
 80136f0:	08013617 	.word	0x08013617
 80136f4:	08013bcd 	.word	0x08013bcd
 80136f8:	08013617 	.word	0x08013617
 80136fc:	08013c1b 	.word	0x08013c1b
 8013700:	08013d31 	.word	0x08013d31
 8013704:	08013d43 	.word	0x08013d43
 8013708:	08013d9b 	.word	0x08013d9b
 801370c:	08013dab 	.word	0x08013dab
 8013710:	08013e21 	.word	0x08013e21
 8013714:	080138a7 	.word	0x080138a7
 8013718:	08013e55 	.word	0x08013e55
 801371c:	08013f13 	.word	0x08013f13
 8013720:	08013617 	.word	0x08013617
 8013724:	08013617 	.word	0x08013617
 8013728:	08013617 	.word	0x08013617
 801372c:	08013617 	.word	0x08013617
 8013730:	08013617 	.word	0x08013617
 8013734:	08013617 	.word	0x08013617
 8013738:	080137a1 	.word	0x080137a1
 801373c:	0801380d 	.word	0x0801380d
 8013740:	08013867 	.word	0x08013867
 8013744:	08013921 	.word	0x08013921
 8013748:	08013921 	.word	0x08013921
 801374c:	08013617 	.word	0x08013617
 8013750:	080139dd 	.word	0x080139dd
 8013754:	0801380d 	.word	0x0801380d
 8013758:	08013617 	.word	0x08013617
 801375c:	08013ba7 	.word	0x08013ba7
 8013760:	08013b77 	.word	0x08013b77
 8013764:	08013b85 	.word	0x08013b85
 8013768:	08013baf 	.word	0x08013baf
 801376c:	08013bb9 	.word	0x08013bb9
 8013770:	08013617 	.word	0x08013617
 8013774:	08013bcd 	.word	0x08013bcd
 8013778:	08013617 	.word	0x08013617
 801377c:	08013897 	.word	0x08013897
 8013780:	08013c31 	.word	0x08013c31
 8013784:	08013d35 	.word	0x08013d35
 8013788:	08013d7d 	.word	0x08013d7d
 801378c:	08013617 	.word	0x08013617
 8013790:	08013e11 	.word	0x08013e11
 8013794:	0801389f 	.word	0x0801389f
 8013798:	08013e39 	.word	0x08013e39
 801379c:	08013ea5 	.word	0x08013ea5
 80137a0:	69ab      	ldr	r3, [r5, #24]
 80137a2:	4aa7      	ldr	r2, [pc, #668]	; (8013a40 <__strftime+0x488>)
 80137a4:	3318      	adds	r3, #24
 80137a6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80137aa:	4630      	mov	r0, r6
 80137ac:	f7ec fd46 	bl	800023c <strlen>
 80137b0:	3e01      	subs	r6, #1
 80137b2:	4420      	add	r0, r4
 80137b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80137b8:	42a0      	cmp	r0, r4
 80137ba:	d107      	bne.n	80137cc <__strftime+0x214>
 80137bc:	f89b 3000 	ldrb.w	r3, [fp]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f000 83d7 	beq.w	8013f74 <__strftime+0x9bc>
 80137c6:	f10b 0201 	add.w	r2, fp, #1
 80137ca:	e6fe      	b.n	80135ca <__strftime+0x12>
 80137cc:	42a3      	cmp	r3, r4
 80137ce:	f67f af22 	bls.w	8013616 <__strftime+0x5e>
 80137d2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80137d6:	f809 2004 	strb.w	r2, [r9, r4]
 80137da:	3401      	adds	r4, #1
 80137dc:	e7ec      	b.n	80137b8 <__strftime+0x200>
 80137de:	69aa      	ldr	r2, [r5, #24]
 80137e0:	4b97      	ldr	r3, [pc, #604]	; (8013a40 <__strftime+0x488>)
 80137e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80137e6:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 80137e8:	4630      	mov	r0, r6
 80137ea:	f7ec fd27 	bl	800023c <strlen>
 80137ee:	3e01      	subs	r6, #1
 80137f0:	4420      	add	r0, r4
 80137f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80137f6:	42a0      	cmp	r0, r4
 80137f8:	d0e0      	beq.n	80137bc <__strftime+0x204>
 80137fa:	42a3      	cmp	r3, r4
 80137fc:	f67f af0b 	bls.w	8013616 <__strftime+0x5e>
 8013800:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013804:	f809 2004 	strb.w	r2, [r9, r4]
 8013808:	3401      	adds	r4, #1
 801380a:	e7f4      	b.n	80137f6 <__strftime+0x23e>
 801380c:	4b8c      	ldr	r3, [pc, #560]	; (8013a40 <__strftime+0x488>)
 801380e:	692a      	ldr	r2, [r5, #16]
 8013810:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013814:	4630      	mov	r0, r6
 8013816:	f7ec fd11 	bl	800023c <strlen>
 801381a:	3e01      	subs	r6, #1
 801381c:	4420      	add	r0, r4
 801381e:	f108 33ff 	add.w	r3, r8, #4294967295
 8013822:	42a0      	cmp	r0, r4
 8013824:	d0ca      	beq.n	80137bc <__strftime+0x204>
 8013826:	42a3      	cmp	r3, r4
 8013828:	f67f aef5 	bls.w	8013616 <__strftime+0x5e>
 801382c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013830:	f809 2004 	strb.w	r2, [r9, r4]
 8013834:	3401      	adds	r4, #1
 8013836:	e7f4      	b.n	8013822 <__strftime+0x26a>
 8013838:	692b      	ldr	r3, [r5, #16]
 801383a:	4a81      	ldr	r2, [pc, #516]	; (8013a40 <__strftime+0x488>)
 801383c:	330c      	adds	r3, #12
 801383e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8013842:	4630      	mov	r0, r6
 8013844:	f7ec fcfa 	bl	800023c <strlen>
 8013848:	3e01      	subs	r6, #1
 801384a:	4420      	add	r0, r4
 801384c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013850:	42a0      	cmp	r0, r4
 8013852:	d0b3      	beq.n	80137bc <__strftime+0x204>
 8013854:	42a3      	cmp	r3, r4
 8013856:	f67f aede 	bls.w	8013616 <__strftime+0x5e>
 801385a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801385e:	f809 2004 	strb.w	r2, [r9, r4]
 8013862:	3401      	adds	r4, #1
 8013864:	e7f4      	b.n	8013850 <__strftime+0x298>
 8013866:	4b76      	ldr	r3, [pc, #472]	; (8013a40 <__strftime+0x488>)
 8013868:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801386c:	4630      	mov	r0, r6
 801386e:	f7ec fce5 	bl	800023c <strlen>
 8013872:	7833      	ldrb	r3, [r6, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d0a1      	beq.n	80137bc <__strftime+0x204>
 8013878:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801387a:	9300      	str	r3, [sp, #0]
 801387c:	4632      	mov	r2, r6
 801387e:	462b      	mov	r3, r5
 8013880:	eba8 0104 	sub.w	r1, r8, r4
 8013884:	eb09 0004 	add.w	r0, r9, r4
 8013888:	f7ff fe96 	bl	80135b8 <__strftime>
 801388c:	2800      	cmp	r0, #0
 801388e:	f77f aec2 	ble.w	8013616 <__strftime+0x5e>
 8013892:	4404      	add	r4, r0
 8013894:	e792      	b.n	80137bc <__strftime+0x204>
 8013896:	4b6a      	ldr	r3, [pc, #424]	; (8013a40 <__strftime+0x488>)
 8013898:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801389c:	e7e6      	b.n	801386c <__strftime+0x2b4>
 801389e:	4b68      	ldr	r3, [pc, #416]	; (8013a40 <__strftime+0x488>)
 80138a0:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80138a4:	e7e2      	b.n	801386c <__strftime+0x2b4>
 80138a6:	4b66      	ldr	r3, [pc, #408]	; (8013a40 <__strftime+0x488>)
 80138a8:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80138ac:	e7de      	b.n	801386c <__strftime+0x2b4>
 80138ae:	4965      	ldr	r1, [pc, #404]	; (8013a44 <__strftime+0x48c>)
 80138b0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 80138b4:	458a      	cmp	sl, r1
 80138b6:	bfac      	ite	ge
 80138b8:	2100      	movge	r1, #0
 80138ba:	2101      	movlt	r1, #1
 80138bc:	f1ba 0f00 	cmp.w	sl, #0
 80138c0:	db0e      	blt.n	80138e0 <__strftime+0x328>
 80138c2:	2064      	movs	r0, #100	; 0x64
 80138c4:	fb9a f0f0 	sdiv	r0, sl, r0
 80138c8:	3013      	adds	r0, #19
 80138ca:	b19f      	cbz	r7, 80138f4 <__strftime+0x33c>
 80138cc:	2863      	cmp	r0, #99	; 0x63
 80138ce:	dd25      	ble.n	801391c <__strftime+0x364>
 80138d0:	4a5d      	ldr	r2, [pc, #372]	; (8013a48 <__strftime+0x490>)
 80138d2:	4b5e      	ldr	r3, [pc, #376]	; (8013a4c <__strftime+0x494>)
 80138d4:	2f2b      	cmp	r7, #43	; 0x2b
 80138d6:	bf14      	ite	ne
 80138d8:	4617      	movne	r7, r2
 80138da:	461f      	moveq	r7, r3
 80138dc:	4a5c      	ldr	r2, [pc, #368]	; (8013a50 <__strftime+0x498>)
 80138de:	e00b      	b.n	80138f8 <__strftime+0x340>
 80138e0:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80138e4:	9105      	str	r1, [sp, #20]
 80138e6:	f000 ffbf 	bl	8014868 <abs>
 80138ea:	2364      	movs	r3, #100	; 0x64
 80138ec:	9905      	ldr	r1, [sp, #20]
 80138ee:	fb90 f0f3 	sdiv	r0, r0, r3
 80138f2:	e7ea      	b.n	80138ca <__strftime+0x312>
 80138f4:	4f54      	ldr	r7, [pc, #336]	; (8013a48 <__strftime+0x490>)
 80138f6:	4a57      	ldr	r2, [pc, #348]	; (8013a54 <__strftime+0x49c>)
 80138f8:	4b57      	ldr	r3, [pc, #348]	; (8013a58 <__strftime+0x4a0>)
 80138fa:	9001      	str	r0, [sp, #4]
 80138fc:	2e02      	cmp	r6, #2
 80138fe:	bf2c      	ite	cs
 8013900:	ebc1 0606 	rsbcs	r6, r1, r6
 8013904:	f1c1 0602 	rsbcc	r6, r1, #2
 8013908:	494e      	ldr	r1, [pc, #312]	; (8013a44 <__strftime+0x48c>)
 801390a:	9600      	str	r6, [sp, #0]
 801390c:	458a      	cmp	sl, r1
 801390e:	bfa8      	it	ge
 8013910:	463b      	movge	r3, r7
 8013912:	eba8 0104 	sub.w	r1, r8, r4
 8013916:	eb09 0004 	add.w	r0, r9, r4
 801391a:	e02a      	b.n	8013972 <__strftime+0x3ba>
 801391c:	4f4a      	ldr	r7, [pc, #296]	; (8013a48 <__strftime+0x490>)
 801391e:	e7dd      	b.n	80138dc <__strftime+0x324>
 8013920:	494e      	ldr	r1, [pc, #312]	; (8013a5c <__strftime+0x4a4>)
 8013922:	4a4f      	ldr	r2, [pc, #316]	; (8013a60 <__strftime+0x4a8>)
 8013924:	68eb      	ldr	r3, [r5, #12]
 8013926:	2864      	cmp	r0, #100	; 0x64
 8013928:	bf08      	it	eq
 801392a:	460a      	moveq	r2, r1
 801392c:	eba8 0104 	sub.w	r1, r8, r4
 8013930:	eb09 0004 	add.w	r0, r9, r4
 8013934:	f001 fe3a 	bl	80155ac <sniprintf>
 8013938:	2800      	cmp	r0, #0
 801393a:	f6ff ae6c 	blt.w	8013616 <__strftime+0x5e>
 801393e:	4404      	add	r4, r0
 8013940:	45a0      	cmp	r8, r4
 8013942:	f63f af3b 	bhi.w	80137bc <__strftime+0x204>
 8013946:	e666      	b.n	8013616 <__strftime+0x5e>
 8013948:	6968      	ldr	r0, [r5, #20]
 801394a:	692b      	ldr	r3, [r5, #16]
 801394c:	68ef      	ldr	r7, [r5, #12]
 801394e:	2800      	cmp	r0, #0
 8013950:	eb09 0604 	add.w	r6, r9, r4
 8013954:	eba8 0104 	sub.w	r1, r8, r4
 8013958:	f103 0301 	add.w	r3, r3, #1
 801395c:	db0c      	blt.n	8013978 <__strftime+0x3c0>
 801395e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013962:	fb90 f2fc 	sdiv	r2, r0, ip
 8013966:	fb0c 0212 	mls	r2, ip, r2, r0
 801396a:	e9cd 7200 	strd	r7, r2, [sp]
 801396e:	4a3d      	ldr	r2, [pc, #244]	; (8013a64 <__strftime+0x4ac>)
 8013970:	4630      	mov	r0, r6
 8013972:	f001 fe1b 	bl	80155ac <sniprintf>
 8013976:	e7df      	b.n	8013938 <__strftime+0x380>
 8013978:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801397c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8013980:	f000 ff72 	bl	8014868 <abs>
 8013984:	2264      	movs	r2, #100	; 0x64
 8013986:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801398a:	fb90 fcf2 	sdiv	ip, r0, r2
 801398e:	fb0c 0212 	mls	r2, ip, r2, r0
 8013992:	e7ea      	b.n	801396a <__strftime+0x3b2>
 8013994:	2325      	movs	r3, #37	; 0x25
 8013996:	f88d 3020 	strb.w	r3, [sp, #32]
 801399a:	b187      	cbz	r7, 80139be <__strftime+0x406>
 801399c:	2e06      	cmp	r6, #6
 801399e:	bf38      	it	cc
 80139a0:	2606      	movcc	r6, #6
 80139a2:	1fb3      	subs	r3, r6, #6
 80139a4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80139a8:	d10c      	bne.n	80139c4 <__strftime+0x40c>
 80139aa:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80139ae:	492e      	ldr	r1, [pc, #184]	; (8013a68 <__strftime+0x4b0>)
 80139b0:	f001 fe5c 	bl	801566c <strcpy>
 80139b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80139b6:	9300      	str	r3, [sp, #0]
 80139b8:	aa08      	add	r2, sp, #32
 80139ba:	462b      	mov	r3, r5
 80139bc:	e760      	b.n	8013880 <__strftime+0x2c8>
 80139be:	272b      	movs	r7, #43	; 0x2b
 80139c0:	260a      	movs	r6, #10
 80139c2:	e7ee      	b.n	80139a2 <__strftime+0x3ea>
 80139c4:	4a29      	ldr	r2, [pc, #164]	; (8013a6c <__strftime+0x4b4>)
 80139c6:	211e      	movs	r1, #30
 80139c8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80139cc:	f001 fdee 	bl	80155ac <sniprintf>
 80139d0:	2800      	cmp	r0, #0
 80139d2:	ddea      	ble.n	80139aa <__strftime+0x3f2>
 80139d4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80139d8:	4418      	add	r0, r3
 80139da:	e7e8      	b.n	80139ae <__strftime+0x3f6>
 80139dc:	4628      	mov	r0, r5
 80139de:	f7ff fd89 	bl	80134f4 <iso_year_adjust>
 80139e2:	4606      	mov	r6, r0
 80139e4:	6968      	ldr	r0, [r5, #20]
 80139e6:	2800      	cmp	r0, #0
 80139e8:	db11      	blt.n	8013a0e <__strftime+0x456>
 80139ea:	2264      	movs	r2, #100	; 0x64
 80139ec:	fb90 f3f2 	sdiv	r3, r0, r2
 80139f0:	fb02 0313 	mls	r3, r2, r3, r0
 80139f4:	441e      	add	r6, r3
 80139f6:	2364      	movs	r3, #100	; 0x64
 80139f8:	fb96 f0f3 	sdiv	r0, r6, r3
 80139fc:	fb03 6610 	mls	r6, r3, r0, r6
 8013a00:	441e      	add	r6, r3
 8013a02:	fbb6 f2f3 	udiv	r2, r6, r3
 8013a06:	fb03 6312 	mls	r3, r3, r2, r6
 8013a0a:	4a14      	ldr	r2, [pc, #80]	; (8013a5c <__strftime+0x4a4>)
 8013a0c:	e78e      	b.n	801392c <__strftime+0x374>
 8013a0e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013a12:	f000 ff29 	bl	8014868 <abs>
 8013a16:	2364      	movs	r3, #100	; 0x64
 8013a18:	2e00      	cmp	r6, #0
 8013a1a:	fb90 f2f3 	sdiv	r2, r0, r3
 8013a1e:	fb02 0313 	mls	r3, r2, r3, r0
 8013a22:	da05      	bge.n	8013a30 <__strftime+0x478>
 8013a24:	6969      	ldr	r1, [r5, #20]
 8013a26:	4a12      	ldr	r2, [pc, #72]	; (8013a70 <__strftime+0x4b8>)
 8013a28:	4291      	cmp	r1, r2
 8013a2a:	bfb8      	it	lt
 8013a2c:	2601      	movlt	r6, #1
 8013a2e:	e7e1      	b.n	80139f4 <__strftime+0x43c>
 8013a30:	d0e0      	beq.n	80139f4 <__strftime+0x43c>
 8013a32:	6969      	ldr	r1, [r5, #20]
 8013a34:	4a03      	ldr	r2, [pc, #12]	; (8013a44 <__strftime+0x48c>)
 8013a36:	4291      	cmp	r1, r2
 8013a38:	bfb8      	it	lt
 8013a3a:	f04f 36ff 	movlt.w	r6, #4294967295
 8013a3e:	e7d9      	b.n	80139f4 <__strftime+0x43c>
 8013a40:	08019758 	.word	0x08019758
 8013a44:	fffff894 	.word	0xfffff894
 8013a48:	080198cb 	.word	0x080198cb
 8013a4c:	080195e2 	.word	0x080195e2
 8013a50:	080195da 	.word	0x080195da
 8013a54:	080195d3 	.word	0x080195d3
 8013a58:	08019a0b 	.word	0x08019a0b
 8013a5c:	080195f2 	.word	0x080195f2
 8013a60:	080195e4 	.word	0x080195e4
 8013a64:	080195e8 	.word	0x080195e8
 8013a68:	080195fb 	.word	0x080195fb
 8013a6c:	080195f7 	.word	0x080195f7
 8013a70:	fffff895 	.word	0xfffff895
 8013a74:	4bb6      	ldr	r3, [pc, #728]	; (8013d50 <__strftime+0x798>)
 8013a76:	6969      	ldr	r1, [r5, #20]
 8013a78:	4299      	cmp	r1, r3
 8013a7a:	bfac      	ite	ge
 8013a7c:	2300      	movge	r3, #0
 8013a7e:	2301      	movlt	r3, #1
 8013a80:	4628      	mov	r0, r5
 8013a82:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8013a86:	f7ff fd35 	bl	80134f4 <iso_year_adjust>
 8013a8a:	9906      	ldr	r1, [sp, #24]
 8013a8c:	2900      	cmp	r1, #0
 8013a8e:	4682      	mov	sl, r0
 8013a90:	db27      	blt.n	8013ae2 <__strftime+0x52a>
 8013a92:	2264      	movs	r2, #100	; 0x64
 8013a94:	fb91 f2f2 	sdiv	r2, r1, r2
 8013a98:	3213      	adds	r2, #19
 8013a9a:	6968      	ldr	r0, [r5, #20]
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	db2b      	blt.n	8013af8 <__strftime+0x540>
 8013aa0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013aa4:	fb90 fefc 	sdiv	lr, r0, ip
 8013aa8:	fb0c 001e 	mls	r0, ip, lr, r0
 8013aac:	f1ba 0f00 	cmp.w	sl, #0
 8013ab0:	da31      	bge.n	8013b16 <__strftime+0x55e>
 8013ab2:	6969      	ldr	r1, [r5, #20]
 8013ab4:	4ba7      	ldr	r3, [pc, #668]	; (8013d54 <__strftime+0x79c>)
 8013ab6:	4299      	cmp	r1, r3
 8013ab8:	db38      	blt.n	8013b2c <__strftime+0x574>
 8013aba:	eb0a 0300 	add.w	r3, sl, r0
 8013abe:	1c59      	adds	r1, r3, #1
 8013ac0:	d139      	bne.n	8013b36 <__strftime+0x57e>
 8013ac2:	3a01      	subs	r2, #1
 8013ac4:	2363      	movs	r3, #99	; 0x63
 8013ac6:	2064      	movs	r0, #100	; 0x64
 8013ac8:	fb00 3202 	mla	r2, r0, r2, r3
 8013acc:	9b05      	ldr	r3, [sp, #20]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d036      	beq.n	8013b40 <__strftime+0x588>
 8013ad2:	232d      	movs	r3, #45	; 0x2d
 8013ad4:	f88d 3020 	strb.w	r3, [sp, #32]
 8013ad8:	b106      	cbz	r6, 8013adc <__strftime+0x524>
 8013ada:	3e01      	subs	r6, #1
 8013adc:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8013ae0:	e038      	b.n	8013b54 <__strftime+0x59c>
 8013ae2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8013ae6:	9106      	str	r1, [sp, #24]
 8013ae8:	f000 febe 	bl	8014868 <abs>
 8013aec:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013af0:	9906      	ldr	r1, [sp, #24]
 8013af2:	fb90 f2fc 	sdiv	r2, r0, ip
 8013af6:	e7d0      	b.n	8013a9a <__strftime+0x4e2>
 8013af8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013afc:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013b00:	f000 feb2 	bl	8014868 <abs>
 8013b04:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013b08:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013b0c:	fb90 fefc 	sdiv	lr, r0, ip
 8013b10:	fb0e 001c 	mls	r0, lr, ip, r0
 8013b14:	e7ca      	b.n	8013aac <__strftime+0x4f4>
 8013b16:	d0d0      	beq.n	8013aba <__strftime+0x502>
 8013b18:	4b8d      	ldr	r3, [pc, #564]	; (8013d50 <__strftime+0x798>)
 8013b1a:	4299      	cmp	r1, r3
 8013b1c:	bfb4      	ite	lt
 8013b1e:	2301      	movlt	r3, #1
 8013b20:	2300      	movge	r3, #0
 8013b22:	9305      	str	r3, [sp, #20]
 8013b24:	bfb8      	it	lt
 8013b26:	f04f 3aff 	movlt.w	sl, #4294967295
 8013b2a:	e7c6      	b.n	8013aba <__strftime+0x502>
 8013b2c:	f04f 0a01 	mov.w	sl, #1
 8013b30:	f8cd a014 	str.w	sl, [sp, #20]
 8013b34:	e7c1      	b.n	8013aba <__strftime+0x502>
 8013b36:	2b64      	cmp	r3, #100	; 0x64
 8013b38:	bf04      	itt	eq
 8013b3a:	3201      	addeq	r2, #1
 8013b3c:	2300      	moveq	r3, #0
 8013b3e:	e7c2      	b.n	8013ac6 <__strftime+0x50e>
 8013b40:	2f2b      	cmp	r7, #43	; 0x2b
 8013b42:	d106      	bne.n	8013b52 <__strftime+0x59a>
 8013b44:	f242 730f 	movw	r3, #9999	; 0x270f
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d902      	bls.n	8013b52 <__strftime+0x59a>
 8013b4c:	f88d 7020 	strb.w	r7, [sp, #32]
 8013b50:	e7c2      	b.n	8013ad8 <__strftime+0x520>
 8013b52:	ab08      	add	r3, sp, #32
 8013b54:	2125      	movs	r1, #37	; 0x25
 8013b56:	7019      	strb	r1, [r3, #0]
 8013b58:	b94f      	cbnz	r7, 8013b6e <__strftime+0x5b6>
 8013b5a:	1c58      	adds	r0, r3, #1
 8013b5c:	497e      	ldr	r1, [pc, #504]	; (8013d58 <__strftime+0x7a0>)
 8013b5e:	9205      	str	r2, [sp, #20]
 8013b60:	f001 fd84 	bl	801566c <strcpy>
 8013b64:	9a05      	ldr	r2, [sp, #20]
 8013b66:	9200      	str	r2, [sp, #0]
 8013b68:	4633      	mov	r3, r6
 8013b6a:	aa08      	add	r2, sp, #32
 8013b6c:	e059      	b.n	8013c22 <__strftime+0x66a>
 8013b6e:	2130      	movs	r1, #48	; 0x30
 8013b70:	1c98      	adds	r0, r3, #2
 8013b72:	7059      	strb	r1, [r3, #1]
 8013b74:	e7f2      	b.n	8013b5c <__strftime+0x5a4>
 8013b76:	4979      	ldr	r1, [pc, #484]	; (8013d5c <__strftime+0x7a4>)
 8013b78:	4a79      	ldr	r2, [pc, #484]	; (8013d60 <__strftime+0x7a8>)
 8013b7a:	68ab      	ldr	r3, [r5, #8]
 8013b7c:	286b      	cmp	r0, #107	; 0x6b
 8013b7e:	bf08      	it	eq
 8013b80:	460a      	moveq	r2, r1
 8013b82:	e6d3      	b.n	801392c <__strftime+0x374>
 8013b84:	68ab      	ldr	r3, [r5, #8]
 8013b86:	b163      	cbz	r3, 8013ba2 <__strftime+0x5ea>
 8013b88:	2b0c      	cmp	r3, #12
 8013b8a:	d004      	beq.n	8013b96 <__strftime+0x5de>
 8013b8c:	210c      	movs	r1, #12
 8013b8e:	fb93 f2f1 	sdiv	r2, r3, r1
 8013b92:	fb01 3312 	mls	r3, r1, r2, r3
 8013b96:	4972      	ldr	r1, [pc, #456]	; (8013d60 <__strftime+0x7a8>)
 8013b98:	4a70      	ldr	r2, [pc, #448]	; (8013d5c <__strftime+0x7a4>)
 8013b9a:	2849      	cmp	r0, #73	; 0x49
 8013b9c:	bf08      	it	eq
 8013b9e:	460a      	moveq	r2, r1
 8013ba0:	e6c4      	b.n	801392c <__strftime+0x374>
 8013ba2:	230c      	movs	r3, #12
 8013ba4:	e7f7      	b.n	8013b96 <__strftime+0x5de>
 8013ba6:	69eb      	ldr	r3, [r5, #28]
 8013ba8:	4a6e      	ldr	r2, [pc, #440]	; (8013d64 <__strftime+0x7ac>)
 8013baa:	3301      	adds	r3, #1
 8013bac:	e6be      	b.n	801392c <__strftime+0x374>
 8013bae:	692b      	ldr	r3, [r5, #16]
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	e72a      	b.n	8013a0a <__strftime+0x452>
 8013bb4:	686b      	ldr	r3, [r5, #4]
 8013bb6:	e728      	b.n	8013a0a <__strftime+0x452>
 8013bb8:	f108 33ff 	add.w	r3, r8, #4294967295
 8013bbc:	42a3      	cmp	r3, r4
 8013bbe:	f67f ad2a 	bls.w	8013616 <__strftime+0x5e>
 8013bc2:	230a      	movs	r3, #10
 8013bc4:	f809 3004 	strb.w	r3, [r9, r4]
 8013bc8:	3401      	adds	r4, #1
 8013bca:	e5f7      	b.n	80137bc <__strftime+0x204>
 8013bcc:	68ab      	ldr	r3, [r5, #8]
 8013bce:	2b0b      	cmp	r3, #11
 8013bd0:	bfcc      	ite	gt
 8013bd2:	22a4      	movgt	r2, #164	; 0xa4
 8013bd4:	22a0      	movle	r2, #160	; 0xa0
 8013bd6:	4b64      	ldr	r3, [pc, #400]	; (8013d68 <__strftime+0x7b0>)
 8013bd8:	4413      	add	r3, r2
 8013bda:	685e      	ldr	r6, [r3, #4]
 8013bdc:	4630      	mov	r0, r6
 8013bde:	f7ec fb2d 	bl	800023c <strlen>
 8013be2:	1e72      	subs	r2, r6, #1
 8013be4:	4420      	add	r0, r4
 8013be6:	f108 36ff 	add.w	r6, r8, #4294967295
 8013bea:	42a0      	cmp	r0, r4
 8013bec:	f43f ade6 	beq.w	80137bc <__strftime+0x204>
 8013bf0:	42a6      	cmp	r6, r4
 8013bf2:	f67f ad10 	bls.w	8013616 <__strftime+0x5e>
 8013bf6:	f89b 1000 	ldrb.w	r1, [fp]
 8013bfa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013bfe:	2950      	cmp	r1, #80	; 0x50
 8013c00:	d107      	bne.n	8013c12 <__strftime+0x65a>
 8013c02:	495a      	ldr	r1, [pc, #360]	; (8013d6c <__strftime+0x7b4>)
 8013c04:	5cc9      	ldrb	r1, [r1, r3]
 8013c06:	f001 0103 	and.w	r1, r1, #3
 8013c0a:	2901      	cmp	r1, #1
 8013c0c:	bf08      	it	eq
 8013c0e:	3320      	addeq	r3, #32
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	f809 3004 	strb.w	r3, [r9, r4]
 8013c16:	3401      	adds	r4, #1
 8013c18:	e7e7      	b.n	8013bea <__strftime+0x632>
 8013c1a:	686b      	ldr	r3, [r5, #4]
 8013c1c:	9300      	str	r3, [sp, #0]
 8013c1e:	4a54      	ldr	r2, [pc, #336]	; (8013d70 <__strftime+0x7b8>)
 8013c20:	68ab      	ldr	r3, [r5, #8]
 8013c22:	eba8 0104 	sub.w	r1, r8, r4
 8013c26:	eb09 0004 	add.w	r0, r9, r4
 8013c2a:	f001 fcbf 	bl	80155ac <sniprintf>
 8013c2e:	e683      	b.n	8013938 <__strftime+0x380>
 8013c30:	6a2b      	ldr	r3, [r5, #32]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	db79      	blt.n	8013d2a <__strftime+0x772>
 8013c36:	f000 fb1b 	bl	8014270 <__tz_lock>
 8013c3a:	9b04      	ldr	r3, [sp, #16]
 8013c3c:	b90b      	cbnz	r3, 8013c42 <__strftime+0x68a>
 8013c3e:	f000 fb23 	bl	8014288 <_tzset_unlocked>
 8013c42:	f000 fef1 	bl	8014a28 <__gettzinfo>
 8013c46:	6a2b      	ldr	r3, [r5, #32]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	bfcc      	ite	gt
 8013c4c:	2350      	movgt	r3, #80	; 0x50
 8013c4e:	2328      	movle	r3, #40	; 0x28
 8013c50:	58c3      	ldr	r3, [r0, r3]
 8013c52:	f1c3 0a00 	rsb	sl, r3, #0
 8013c56:	f000 fb11 	bl	801427c <__tz_unlock>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	9304      	str	r3, [sp, #16]
 8013c5e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8013c62:	4662      	mov	r2, ip
 8013c64:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8013c68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013c6c:	9602      	str	r6, [sp, #8]
 8013c6e:	f143 36ff 	adc.w	r6, r3, #4294967295
 8013c72:	9603      	str	r6, [sp, #12]
 8013c74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013c78:	2e00      	cmp	r6, #0
 8013c7a:	f177 0600 	sbcs.w	r6, r7, #0
 8013c7e:	eba8 0104 	sub.w	r1, r8, r4
 8013c82:	eb09 0004 	add.w	r0, r9, r4
 8013c86:	da05      	bge.n	8013c94 <__strftime+0x6dc>
 8013c88:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8013c8c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8013c90:	9602      	str	r6, [sp, #8]
 8013c92:	9303      	str	r3, [sp, #12]
 8013c94:	9b02      	ldr	r3, [sp, #8]
 8013c96:	089e      	lsrs	r6, r3, #2
 8013c98:	9b03      	ldr	r3, [sp, #12]
 8013c9a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8013c9e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8013ca2:	109f      	asrs	r7, r3, #2
 8013ca4:	2364      	movs	r3, #100	; 0x64
 8013ca6:	fb92 f3f3 	sdiv	r3, r2, r3
 8013caa:	1af6      	subs	r6, r6, r3
 8013cac:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8013cb0:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8013cb4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013cb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8013cbc:	18f6      	adds	r6, r6, r3
 8013cbe:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8013cc2:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8013cc6:	f240 136d 	movw	r3, #365	; 0x16d
 8013cca:	fb03 fc0c 	mul.w	ip, r3, ip
 8013cce:	69eb      	ldr	r3, [r5, #28]
 8013cd0:	eb16 060c 	adds.w	r6, r6, ip
 8013cd4:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8013cd8:	18f6      	adds	r6, r6, r3
 8013cda:	f04f 0c18 	mov.w	ip, #24
 8013cde:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8013ce2:	fba6 230c 	umull	r2, r3, r6, ip
 8013ce6:	68ae      	ldr	r6, [r5, #8]
 8013ce8:	fb0c 3307 	mla	r3, ip, r7, r3
 8013cec:	1992      	adds	r2, r2, r6
 8013cee:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8013cf2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8013cf6:	fba2 670c 	umull	r6, r7, r2, ip
 8013cfa:	fb0c 7703 	mla	r7, ip, r3, r7
 8013cfe:	686b      	ldr	r3, [r5, #4]
 8013d00:	18f6      	adds	r6, r6, r3
 8013d02:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8013d06:	fba6 230c 	umull	r2, r3, r6, ip
 8013d0a:	682e      	ldr	r6, [r5, #0]
 8013d0c:	fb0c 3307 	mla	r3, ip, r7, r3
 8013d10:	1992      	adds	r2, r2, r6
 8013d12:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8013d16:	ebb2 020a 	subs.w	r2, r2, sl
 8013d1a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8013d1e:	e9cd 2300 	strd	r2, r3, [sp]
 8013d22:	4a14      	ldr	r2, [pc, #80]	; (8013d74 <__strftime+0x7bc>)
 8013d24:	f001 fc42 	bl	80155ac <sniprintf>
 8013d28:	e606      	b.n	8013938 <__strftime+0x380>
 8013d2a:	f04f 0a00 	mov.w	sl, #0
 8013d2e:	e796      	b.n	8013c5e <__strftime+0x6a6>
 8013d30:	682b      	ldr	r3, [r5, #0]
 8013d32:	e66a      	b.n	8013a0a <__strftime+0x452>
 8013d34:	f108 33ff 	add.w	r3, r8, #4294967295
 8013d38:	42a3      	cmp	r3, r4
 8013d3a:	f67f ac6c 	bls.w	8013616 <__strftime+0x5e>
 8013d3e:	2309      	movs	r3, #9
 8013d40:	e740      	b.n	8013bc4 <__strftime+0x60c>
 8013d42:	682b      	ldr	r3, [r5, #0]
 8013d44:	9301      	str	r3, [sp, #4]
 8013d46:	686b      	ldr	r3, [r5, #4]
 8013d48:	9300      	str	r3, [sp, #0]
 8013d4a:	4a0b      	ldr	r2, [pc, #44]	; (8013d78 <__strftime+0x7c0>)
 8013d4c:	68ab      	ldr	r3, [r5, #8]
 8013d4e:	e5e0      	b.n	8013912 <__strftime+0x35a>
 8013d50:	fffff894 	.word	0xfffff894
 8013d54:	fffff895 	.word	0xfffff895
 8013d58:	08019603 	.word	0x08019603
 8013d5c:	080195e4 	.word	0x080195e4
 8013d60:	080195f2 	.word	0x080195f2
 8013d64:	08019607 	.word	0x08019607
 8013d68:	08019758 	.word	0x08019758
 8013d6c:	080198cd 	.word	0x080198cd
 8013d70:	08019616 	.word	0x08019616
 8013d74:	0801960c 	.word	0x0801960c
 8013d78:	08019611 	.word	0x08019611
 8013d7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013d80:	42a3      	cmp	r3, r4
 8013d82:	f67f ac48 	bls.w	8013616 <__strftime+0x5e>
 8013d86:	69ab      	ldr	r3, [r5, #24]
 8013d88:	eb09 0204 	add.w	r2, r9, r4
 8013d8c:	3401      	adds	r4, #1
 8013d8e:	b913      	cbnz	r3, 8013d96 <__strftime+0x7de>
 8013d90:	2337      	movs	r3, #55	; 0x37
 8013d92:	7013      	strb	r3, [r2, #0]
 8013d94:	e512      	b.n	80137bc <__strftime+0x204>
 8013d96:	3330      	adds	r3, #48	; 0x30
 8013d98:	e7fb      	b.n	8013d92 <__strftime+0x7da>
 8013d9a:	69eb      	ldr	r3, [r5, #28]
 8013d9c:	69aa      	ldr	r2, [r5, #24]
 8013d9e:	3307      	adds	r3, #7
 8013da0:	1a9b      	subs	r3, r3, r2
 8013da2:	2207      	movs	r2, #7
 8013da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8013da8:	e62f      	b.n	8013a0a <__strftime+0x452>
 8013daa:	4628      	mov	r0, r5
 8013dac:	f7ff fba2 	bl	80134f4 <iso_year_adjust>
 8013db0:	69aa      	ldr	r2, [r5, #24]
 8013db2:	b132      	cbz	r2, 8013dc2 <__strftime+0x80a>
 8013db4:	3a01      	subs	r2, #1
 8013db6:	2800      	cmp	r0, #0
 8013db8:	dc28      	bgt.n	8013e0c <__strftime+0x854>
 8013dba:	69eb      	ldr	r3, [r5, #28]
 8013dbc:	d103      	bne.n	8013dc6 <__strftime+0x80e>
 8013dbe:	330a      	adds	r3, #10
 8013dc0:	e7ee      	b.n	8013da0 <__strftime+0x7e8>
 8013dc2:	2206      	movs	r2, #6
 8013dc4:	e7f7      	b.n	8013db6 <__strftime+0x7fe>
 8013dc6:	6968      	ldr	r0, [r5, #20]
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	eba2 0303 	sub.w	r3, r2, r3
 8013dce:	f240 726b 	movw	r2, #1899	; 0x76b
 8013dd2:	bfa8      	it	ge
 8013dd4:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8013dd8:	4410      	add	r0, r2
 8013dda:	0782      	lsls	r2, r0, #30
 8013ddc:	d105      	bne.n	8013dea <__strftime+0x832>
 8013dde:	2264      	movs	r2, #100	; 0x64
 8013de0:	fb90 f1f2 	sdiv	r1, r0, r2
 8013de4:	fb02 0111 	mls	r1, r2, r1, r0
 8013de8:	b971      	cbnz	r1, 8013e08 <__strftime+0x850>
 8013dea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8013dee:	fb90 f2f1 	sdiv	r2, r0, r1
 8013df2:	fb01 0212 	mls	r2, r1, r2, r0
 8013df6:	fab2 f282 	clz	r2, r2
 8013dfa:	0952      	lsrs	r2, r2, #5
 8013dfc:	1a9a      	subs	r2, r3, r2
 8013dfe:	2a05      	cmp	r2, #5
 8013e00:	bfb4      	ite	lt
 8013e02:	2335      	movlt	r3, #53	; 0x35
 8013e04:	2334      	movge	r3, #52	; 0x34
 8013e06:	e600      	b.n	8013a0a <__strftime+0x452>
 8013e08:	2201      	movs	r2, #1
 8013e0a:	e7f7      	b.n	8013dfc <__strftime+0x844>
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	e5fc      	b.n	8013a0a <__strftime+0x452>
 8013e10:	f108 33ff 	add.w	r3, r8, #4294967295
 8013e14:	42a3      	cmp	r3, r4
 8013e16:	f67f abfe 	bls.w	8013616 <__strftime+0x5e>
 8013e1a:	69ab      	ldr	r3, [r5, #24]
 8013e1c:	3330      	adds	r3, #48	; 0x30
 8013e1e:	e6d1      	b.n	8013bc4 <__strftime+0x60c>
 8013e20:	69ab      	ldr	r3, [r5, #24]
 8013e22:	b13b      	cbz	r3, 8013e34 <__strftime+0x87c>
 8013e24:	3b01      	subs	r3, #1
 8013e26:	69ea      	ldr	r2, [r5, #28]
 8013e28:	3207      	adds	r2, #7
 8013e2a:	1ad2      	subs	r2, r2, r3
 8013e2c:	2307      	movs	r3, #7
 8013e2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e32:	e5ea      	b.n	8013a0a <__strftime+0x452>
 8013e34:	2306      	movs	r3, #6
 8013e36:	e7f6      	b.n	8013e26 <__strftime+0x86e>
 8013e38:	6968      	ldr	r0, [r5, #20]
 8013e3a:	2800      	cmp	r0, #0
 8013e3c:	db05      	blt.n	8013e4a <__strftime+0x892>
 8013e3e:	2264      	movs	r2, #100	; 0x64
 8013e40:	fb90 f3f2 	sdiv	r3, r0, r2
 8013e44:	fb03 0312 	mls	r3, r3, r2, r0
 8013e48:	e5df      	b.n	8013a0a <__strftime+0x452>
 8013e4a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013e4e:	f000 fd0b 	bl	8014868 <abs>
 8013e52:	e7f4      	b.n	8013e3e <__strftime+0x886>
 8013e54:	696b      	ldr	r3, [r5, #20]
 8013e56:	4a4c      	ldr	r2, [pc, #304]	; (8013f88 <__strftime+0x9d0>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	da09      	bge.n	8013e70 <__strftime+0x8b8>
 8013e5c:	212d      	movs	r1, #45	; 0x2d
 8013e5e:	f88d 1020 	strb.w	r1, [sp, #32]
 8013e62:	eba2 0a03 	sub.w	sl, r2, r3
 8013e66:	b106      	cbz	r6, 8013e6a <__strftime+0x8b2>
 8013e68:	3e01      	subs	r6, #1
 8013e6a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8013e6e:	e00b      	b.n	8013e88 <__strftime+0x8d0>
 8013e70:	2f2b      	cmp	r7, #43	; 0x2b
 8013e72:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8013e76:	d106      	bne.n	8013e86 <__strftime+0x8ce>
 8013e78:	f242 730f 	movw	r3, #9999	; 0x270f
 8013e7c:	459a      	cmp	sl, r3
 8013e7e:	d902      	bls.n	8013e86 <__strftime+0x8ce>
 8013e80:	f88d 7020 	strb.w	r7, [sp, #32]
 8013e84:	e7ef      	b.n	8013e66 <__strftime+0x8ae>
 8013e86:	ab08      	add	r3, sp, #32
 8013e88:	2225      	movs	r2, #37	; 0x25
 8013e8a:	701a      	strb	r2, [r3, #0]
 8013e8c:	b937      	cbnz	r7, 8013e9c <__strftime+0x8e4>
 8013e8e:	1c58      	adds	r0, r3, #1
 8013e90:	493e      	ldr	r1, [pc, #248]	; (8013f8c <__strftime+0x9d4>)
 8013e92:	f001 fbeb 	bl	801566c <strcpy>
 8013e96:	f8cd a000 	str.w	sl, [sp]
 8013e9a:	e665      	b.n	8013b68 <__strftime+0x5b0>
 8013e9c:	2230      	movs	r2, #48	; 0x30
 8013e9e:	1c98      	adds	r0, r3, #2
 8013ea0:	705a      	strb	r2, [r3, #1]
 8013ea2:	e7f5      	b.n	8013e90 <__strftime+0x8d8>
 8013ea4:	6a2b      	ldr	r3, [r5, #32]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	f6ff ac88 	blt.w	80137bc <__strftime+0x204>
 8013eac:	f000 f9e0 	bl	8014270 <__tz_lock>
 8013eb0:	9b04      	ldr	r3, [sp, #16]
 8013eb2:	b90b      	cbnz	r3, 8013eb8 <__strftime+0x900>
 8013eb4:	f000 f9e8 	bl	8014288 <_tzset_unlocked>
 8013eb8:	f000 fdb6 	bl	8014a28 <__gettzinfo>
 8013ebc:	6a2b      	ldr	r3, [r5, #32]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	bfcc      	ite	gt
 8013ec2:	2350      	movgt	r3, #80	; 0x50
 8013ec4:	2328      	movle	r3, #40	; 0x28
 8013ec6:	eb09 0704 	add.w	r7, r9, r4
 8013eca:	58c6      	ldr	r6, [r0, r3]
 8013ecc:	f000 f9d6 	bl	801427c <__tz_unlock>
 8013ed0:	4276      	negs	r6, r6
 8013ed2:	233c      	movs	r3, #60	; 0x3c
 8013ed4:	fb96 f0f3 	sdiv	r0, r6, r3
 8013ed8:	f000 fe6a 	bl	8014bb0 <labs>
 8013edc:	233c      	movs	r3, #60	; 0x3c
 8013ede:	eba8 0a04 	sub.w	sl, r8, r4
 8013ee2:	fb90 f2f3 	sdiv	r2, r0, r3
 8013ee6:	fb02 0013 	mls	r0, r2, r3, r0
 8013eea:	9000      	str	r0, [sp, #0]
 8013eec:	4a28      	ldr	r2, [pc, #160]	; (8013f90 <__strftime+0x9d8>)
 8013eee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013ef2:	4651      	mov	r1, sl
 8013ef4:	4638      	mov	r0, r7
 8013ef6:	fb96 f3f3 	sdiv	r3, r6, r3
 8013efa:	f001 fb57 	bl	80155ac <sniprintf>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	f6ff ab89 	blt.w	8013616 <__strftime+0x5e>
 8013f04:	4404      	add	r4, r0
 8013f06:	45a0      	cmp	r8, r4
 8013f08:	f67f ab85 	bls.w	8013616 <__strftime+0x5e>
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	9304      	str	r3, [sp, #16]
 8013f10:	e454      	b.n	80137bc <__strftime+0x204>
 8013f12:	6a2b      	ldr	r3, [r5, #32]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f6ff ac51 	blt.w	80137bc <__strftime+0x204>
 8013f1a:	f000 f9a9 	bl	8014270 <__tz_lock>
 8013f1e:	9b04      	ldr	r3, [sp, #16]
 8013f20:	b90b      	cbnz	r3, 8013f26 <__strftime+0x96e>
 8013f22:	f000 f9b1 	bl	8014288 <_tzset_unlocked>
 8013f26:	6a2b      	ldr	r3, [r5, #32]
 8013f28:	4a1a      	ldr	r2, [pc, #104]	; (8013f94 <__strftime+0x9dc>)
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	bfd4      	ite	le
 8013f2e:	2300      	movle	r3, #0
 8013f30:	2301      	movgt	r3, #1
 8013f32:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8013f36:	4630      	mov	r0, r6
 8013f38:	f7ec f980 	bl	800023c <strlen>
 8013f3c:	3e01      	subs	r6, #1
 8013f3e:	4420      	add	r0, r4
 8013f40:	f108 33ff 	add.w	r3, r8, #4294967295
 8013f44:	42a0      	cmp	r0, r4
 8013f46:	d102      	bne.n	8013f4e <__strftime+0x996>
 8013f48:	f000 f998 	bl	801427c <__tz_unlock>
 8013f4c:	e7de      	b.n	8013f0c <__strftime+0x954>
 8013f4e:	42a3      	cmp	r3, r4
 8013f50:	d905      	bls.n	8013f5e <__strftime+0x9a6>
 8013f52:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013f56:	f809 2004 	strb.w	r2, [r9, r4]
 8013f5a:	3401      	adds	r4, #1
 8013f5c:	e7f2      	b.n	8013f44 <__strftime+0x98c>
 8013f5e:	f000 f98d 	bl	801427c <__tz_unlock>
 8013f62:	f7ff bb58 	b.w	8013616 <__strftime+0x5e>
 8013f66:	f108 33ff 	add.w	r3, r8, #4294967295
 8013f6a:	42a3      	cmp	r3, r4
 8013f6c:	f67f ab53 	bls.w	8013616 <__strftime+0x5e>
 8013f70:	2325      	movs	r3, #37	; 0x25
 8013f72:	e627      	b.n	8013bc4 <__strftime+0x60c>
 8013f74:	f1b8 0f00 	cmp.w	r8, #0
 8013f78:	d002      	beq.n	8013f80 <__strftime+0x9c8>
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	f809 3004 	strb.w	r3, [r9, r4]
 8013f80:	4620      	mov	r0, r4
 8013f82:	b011      	add	sp, #68	; 0x44
 8013f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f88:	fffff894 	.word	0xfffff894
 8013f8c:	08019603 	.word	0x08019603
 8013f90:	08019620 	.word	0x08019620
 8013f94:	20000164 	.word	0x20000164

08013f98 <strftime>:
 8013f98:	b513      	push	{r0, r1, r4, lr}
 8013f9a:	4c03      	ldr	r4, [pc, #12]	; (8013fa8 <strftime+0x10>)
 8013f9c:	9400      	str	r4, [sp, #0]
 8013f9e:	f7ff fb0b 	bl	80135b8 <__strftime>
 8013fa2:	b002      	add	sp, #8
 8013fa4:	bd10      	pop	{r4, pc}
 8013fa6:	bf00      	nop
 8013fa8:	200001c8 	.word	0x200001c8

08013fac <strstr>:
 8013fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fae:	780c      	ldrb	r4, [r1, #0]
 8013fb0:	b164      	cbz	r4, 8013fcc <strstr+0x20>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	781a      	ldrb	r2, [r3, #0]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	1c5e      	adds	r6, r3, #1
 8013fba:	b90a      	cbnz	r2, 8013fc0 <strstr+0x14>
 8013fbc:	4610      	mov	r0, r2
 8013fbe:	e005      	b.n	8013fcc <strstr+0x20>
 8013fc0:	4294      	cmp	r4, r2
 8013fc2:	d108      	bne.n	8013fd6 <strstr+0x2a>
 8013fc4:	460d      	mov	r5, r1
 8013fc6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8013fca:	b902      	cbnz	r2, 8013fce <strstr+0x22>
 8013fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8013fd2:	4297      	cmp	r7, r2
 8013fd4:	d0f7      	beq.n	8013fc6 <strstr+0x1a>
 8013fd6:	4633      	mov	r3, r6
 8013fd8:	e7ec      	b.n	8013fb4 <strstr+0x8>
	...

08013fdc <_strtoul_l.isra.0>:
 8013fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fe0:	4e3b      	ldr	r6, [pc, #236]	; (80140d0 <_strtoul_l.isra.0+0xf4>)
 8013fe2:	4686      	mov	lr, r0
 8013fe4:	468c      	mov	ip, r1
 8013fe6:	4660      	mov	r0, ip
 8013fe8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013fec:	5da5      	ldrb	r5, [r4, r6]
 8013fee:	f015 0508 	ands.w	r5, r5, #8
 8013ff2:	d1f8      	bne.n	8013fe6 <_strtoul_l.isra.0+0xa>
 8013ff4:	2c2d      	cmp	r4, #45	; 0x2d
 8013ff6:	d134      	bne.n	8014062 <_strtoul_l.isra.0+0x86>
 8013ff8:	f89c 4000 	ldrb.w	r4, [ip]
 8013ffc:	f04f 0801 	mov.w	r8, #1
 8014000:	f100 0c02 	add.w	ip, r0, #2
 8014004:	2b00      	cmp	r3, #0
 8014006:	d05e      	beq.n	80140c6 <_strtoul_l.isra.0+0xea>
 8014008:	2b10      	cmp	r3, #16
 801400a:	d10c      	bne.n	8014026 <_strtoul_l.isra.0+0x4a>
 801400c:	2c30      	cmp	r4, #48	; 0x30
 801400e:	d10a      	bne.n	8014026 <_strtoul_l.isra.0+0x4a>
 8014010:	f89c 0000 	ldrb.w	r0, [ip]
 8014014:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014018:	2858      	cmp	r0, #88	; 0x58
 801401a:	d14f      	bne.n	80140bc <_strtoul_l.isra.0+0xe0>
 801401c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014020:	2310      	movs	r3, #16
 8014022:	f10c 0c02 	add.w	ip, ip, #2
 8014026:	f04f 37ff 	mov.w	r7, #4294967295
 801402a:	2500      	movs	r5, #0
 801402c:	fbb7 f7f3 	udiv	r7, r7, r3
 8014030:	fb03 f907 	mul.w	r9, r3, r7
 8014034:	ea6f 0909 	mvn.w	r9, r9
 8014038:	4628      	mov	r0, r5
 801403a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801403e:	2e09      	cmp	r6, #9
 8014040:	d818      	bhi.n	8014074 <_strtoul_l.isra.0+0x98>
 8014042:	4634      	mov	r4, r6
 8014044:	42a3      	cmp	r3, r4
 8014046:	dd24      	ble.n	8014092 <_strtoul_l.isra.0+0xb6>
 8014048:	2d00      	cmp	r5, #0
 801404a:	db1f      	blt.n	801408c <_strtoul_l.isra.0+0xb0>
 801404c:	4287      	cmp	r7, r0
 801404e:	d31d      	bcc.n	801408c <_strtoul_l.isra.0+0xb0>
 8014050:	d101      	bne.n	8014056 <_strtoul_l.isra.0+0x7a>
 8014052:	45a1      	cmp	r9, r4
 8014054:	db1a      	blt.n	801408c <_strtoul_l.isra.0+0xb0>
 8014056:	fb00 4003 	mla	r0, r0, r3, r4
 801405a:	2501      	movs	r5, #1
 801405c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014060:	e7eb      	b.n	801403a <_strtoul_l.isra.0+0x5e>
 8014062:	2c2b      	cmp	r4, #43	; 0x2b
 8014064:	bf08      	it	eq
 8014066:	f89c 4000 	ldrbeq.w	r4, [ip]
 801406a:	46a8      	mov	r8, r5
 801406c:	bf08      	it	eq
 801406e:	f100 0c02 	addeq.w	ip, r0, #2
 8014072:	e7c7      	b.n	8014004 <_strtoul_l.isra.0+0x28>
 8014074:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014078:	2e19      	cmp	r6, #25
 801407a:	d801      	bhi.n	8014080 <_strtoul_l.isra.0+0xa4>
 801407c:	3c37      	subs	r4, #55	; 0x37
 801407e:	e7e1      	b.n	8014044 <_strtoul_l.isra.0+0x68>
 8014080:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014084:	2e19      	cmp	r6, #25
 8014086:	d804      	bhi.n	8014092 <_strtoul_l.isra.0+0xb6>
 8014088:	3c57      	subs	r4, #87	; 0x57
 801408a:	e7db      	b.n	8014044 <_strtoul_l.isra.0+0x68>
 801408c:	f04f 35ff 	mov.w	r5, #4294967295
 8014090:	e7e4      	b.n	801405c <_strtoul_l.isra.0+0x80>
 8014092:	2d00      	cmp	r5, #0
 8014094:	da07      	bge.n	80140a6 <_strtoul_l.isra.0+0xca>
 8014096:	2322      	movs	r3, #34	; 0x22
 8014098:	f8ce 3000 	str.w	r3, [lr]
 801409c:	f04f 30ff 	mov.w	r0, #4294967295
 80140a0:	b942      	cbnz	r2, 80140b4 <_strtoul_l.isra.0+0xd8>
 80140a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140a6:	f1b8 0f00 	cmp.w	r8, #0
 80140aa:	d000      	beq.n	80140ae <_strtoul_l.isra.0+0xd2>
 80140ac:	4240      	negs	r0, r0
 80140ae:	2a00      	cmp	r2, #0
 80140b0:	d0f7      	beq.n	80140a2 <_strtoul_l.isra.0+0xc6>
 80140b2:	b10d      	cbz	r5, 80140b8 <_strtoul_l.isra.0+0xdc>
 80140b4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80140b8:	6011      	str	r1, [r2, #0]
 80140ba:	e7f2      	b.n	80140a2 <_strtoul_l.isra.0+0xc6>
 80140bc:	2430      	movs	r4, #48	; 0x30
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d1b1      	bne.n	8014026 <_strtoul_l.isra.0+0x4a>
 80140c2:	2308      	movs	r3, #8
 80140c4:	e7af      	b.n	8014026 <_strtoul_l.isra.0+0x4a>
 80140c6:	2c30      	cmp	r4, #48	; 0x30
 80140c8:	d0a2      	beq.n	8014010 <_strtoul_l.isra.0+0x34>
 80140ca:	230a      	movs	r3, #10
 80140cc:	e7ab      	b.n	8014026 <_strtoul_l.isra.0+0x4a>
 80140ce:	bf00      	nop
 80140d0:	080198cd 	.word	0x080198cd

080140d4 <_strtoul_r>:
 80140d4:	f7ff bf82 	b.w	8013fdc <_strtoul_l.isra.0>

080140d8 <strtoul>:
 80140d8:	4613      	mov	r3, r2
 80140da:	460a      	mov	r2, r1
 80140dc:	4601      	mov	r1, r0
 80140de:	4802      	ldr	r0, [pc, #8]	; (80140e8 <strtoul+0x10>)
 80140e0:	6800      	ldr	r0, [r0, #0]
 80140e2:	f7ff bf7b 	b.w	8013fdc <_strtoul_l.isra.0>
 80140e6:	bf00      	nop
 80140e8:	20000100 	.word	0x20000100

080140ec <time>:
 80140ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140ee:	4b0b      	ldr	r3, [pc, #44]	; (801411c <time+0x30>)
 80140f0:	2200      	movs	r2, #0
 80140f2:	4669      	mov	r1, sp
 80140f4:	4604      	mov	r4, r0
 80140f6:	6818      	ldr	r0, [r3, #0]
 80140f8:	f000 fc84 	bl	8014a04 <_gettimeofday_r>
 80140fc:	2800      	cmp	r0, #0
 80140fe:	bfbe      	ittt	lt
 8014100:	f04f 32ff 	movlt.w	r2, #4294967295
 8014104:	f04f 33ff 	movlt.w	r3, #4294967295
 8014108:	e9cd 2300 	strdlt	r2, r3, [sp]
 801410c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014110:	b10c      	cbz	r4, 8014116 <time+0x2a>
 8014112:	e9c4 0100 	strd	r0, r1, [r4]
 8014116:	b004      	add	sp, #16
 8014118:	bd10      	pop	{r4, pc}
 801411a:	bf00      	nop
 801411c:	20000100 	.word	0x20000100

08014120 <__tzcalc_limits>:
 8014120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014124:	4680      	mov	r8, r0
 8014126:	f000 fc7f 	bl	8014a28 <__gettzinfo>
 801412a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801412e:	4598      	cmp	r8, r3
 8014130:	f340 8098 	ble.w	8014264 <__tzcalc_limits+0x144>
 8014134:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8014138:	4443      	add	r3, r8
 801413a:	109b      	asrs	r3, r3, #2
 801413c:	f240 126d 	movw	r2, #365	; 0x16d
 8014140:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8014144:	fb02 3505 	mla	r5, r2, r5, r3
 8014148:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801414c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8014150:	fb93 f3f2 	sdiv	r3, r3, r2
 8014154:	441d      	add	r5, r3
 8014156:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801415a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801415e:	fb98 f7f3 	sdiv	r7, r8, r3
 8014162:	fb03 8717 	mls	r7, r3, r7, r8
 8014166:	4442      	add	r2, r8
 8014168:	fab7 fc87 	clz	ip, r7
 801416c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014170:	f008 0303 	and.w	r3, r8, #3
 8014174:	4415      	add	r5, r2
 8014176:	2264      	movs	r2, #100	; 0x64
 8014178:	f8c0 8004 	str.w	r8, [r0, #4]
 801417c:	fb98 f6f2 	sdiv	r6, r8, r2
 8014180:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014184:	fb02 8616 	mls	r6, r2, r6, r8
 8014188:	4604      	mov	r4, r0
 801418a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	f04f 0e07 	mov.w	lr, #7
 8014194:	7a22      	ldrb	r2, [r4, #8]
 8014196:	6963      	ldr	r3, [r4, #20]
 8014198:	2a4a      	cmp	r2, #74	; 0x4a
 801419a:	d128      	bne.n	80141ee <__tzcalc_limits+0xce>
 801419c:	9900      	ldr	r1, [sp, #0]
 801419e:	18ea      	adds	r2, r5, r3
 80141a0:	b901      	cbnz	r1, 80141a4 <__tzcalc_limits+0x84>
 80141a2:	b906      	cbnz	r6, 80141a6 <__tzcalc_limits+0x86>
 80141a4:	bb0f      	cbnz	r7, 80141ea <__tzcalc_limits+0xca>
 80141a6:	2b3b      	cmp	r3, #59	; 0x3b
 80141a8:	bfd4      	ite	le
 80141aa:	2300      	movle	r3, #0
 80141ac:	2301      	movgt	r3, #1
 80141ae:	4413      	add	r3, r2
 80141b0:	1e5a      	subs	r2, r3, #1
 80141b2:	69a3      	ldr	r3, [r4, #24]
 80141b4:	492c      	ldr	r1, [pc, #176]	; (8014268 <__tzcalc_limits+0x148>)
 80141b6:	fb01 3202 	mla	r2, r1, r2, r3
 80141ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80141bc:	4413      	add	r3, r2
 80141be:	461a      	mov	r2, r3
 80141c0:	17db      	asrs	r3, r3, #31
 80141c2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80141c6:	3428      	adds	r4, #40	; 0x28
 80141c8:	45a3      	cmp	fp, r4
 80141ca:	d1e3      	bne.n	8014194 <__tzcalc_limits+0x74>
 80141cc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80141d0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80141d4:	4294      	cmp	r4, r2
 80141d6:	eb75 0303 	sbcs.w	r3, r5, r3
 80141da:	bfb4      	ite	lt
 80141dc:	2301      	movlt	r3, #1
 80141de:	2300      	movge	r3, #0
 80141e0:	6003      	str	r3, [r0, #0]
 80141e2:	2001      	movs	r0, #1
 80141e4:	b003      	add	sp, #12
 80141e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ea:	2300      	movs	r3, #0
 80141ec:	e7df      	b.n	80141ae <__tzcalc_limits+0x8e>
 80141ee:	2a44      	cmp	r2, #68	; 0x44
 80141f0:	d101      	bne.n	80141f6 <__tzcalc_limits+0xd6>
 80141f2:	18ea      	adds	r2, r5, r3
 80141f4:	e7dd      	b.n	80141b2 <__tzcalc_limits+0x92>
 80141f6:	9a00      	ldr	r2, [sp, #0]
 80141f8:	bb72      	cbnz	r2, 8014258 <__tzcalc_limits+0x138>
 80141fa:	2e00      	cmp	r6, #0
 80141fc:	bf0c      	ite	eq
 80141fe:	46e0      	moveq	r8, ip
 8014200:	f04f 0801 	movne.w	r8, #1
 8014204:	4919      	ldr	r1, [pc, #100]	; (801426c <__tzcalc_limits+0x14c>)
 8014206:	68e2      	ldr	r2, [r4, #12]
 8014208:	9201      	str	r2, [sp, #4]
 801420a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801420e:	fb0a 1808 	mla	r8, sl, r8, r1
 8014212:	462a      	mov	r2, r5
 8014214:	f04f 0900 	mov.w	r9, #0
 8014218:	f1a8 0804 	sub.w	r8, r8, #4
 801421c:	9901      	ldr	r1, [sp, #4]
 801421e:	f109 0901 	add.w	r9, r9, #1
 8014222:	4549      	cmp	r1, r9
 8014224:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8014228:	dc18      	bgt.n	801425c <__tzcalc_limits+0x13c>
 801422a:	f102 0804 	add.w	r8, r2, #4
 801422e:	fb98 f9fe 	sdiv	r9, r8, lr
 8014232:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8014236:	eba8 0909 	sub.w	r9, r8, r9
 801423a:	ebb3 0909 	subs.w	r9, r3, r9
 801423e:	6923      	ldr	r3, [r4, #16]
 8014240:	f103 33ff 	add.w	r3, r3, #4294967295
 8014244:	bf48      	it	mi
 8014246:	f109 0907 	addmi.w	r9, r9, #7
 801424a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801424e:	444b      	add	r3, r9
 8014250:	4553      	cmp	r3, sl
 8014252:	da05      	bge.n	8014260 <__tzcalc_limits+0x140>
 8014254:	441a      	add	r2, r3
 8014256:	e7ac      	b.n	80141b2 <__tzcalc_limits+0x92>
 8014258:	46e0      	mov	r8, ip
 801425a:	e7d3      	b.n	8014204 <__tzcalc_limits+0xe4>
 801425c:	4452      	add	r2, sl
 801425e:	e7dd      	b.n	801421c <__tzcalc_limits+0xfc>
 8014260:	3b07      	subs	r3, #7
 8014262:	e7f5      	b.n	8014250 <__tzcalc_limits+0x130>
 8014264:	2000      	movs	r0, #0
 8014266:	e7bd      	b.n	80141e4 <__tzcalc_limits+0xc4>
 8014268:	00015180 	.word	0x00015180
 801426c:	08019514 	.word	0x08019514

08014270 <__tz_lock>:
 8014270:	4801      	ldr	r0, [pc, #4]	; (8014278 <__tz_lock+0x8>)
 8014272:	f7fe bebf 	b.w	8012ff4 <__retarget_lock_acquire>
 8014276:	bf00      	nop
 8014278:	20000cb7 	.word	0x20000cb7

0801427c <__tz_unlock>:
 801427c:	4801      	ldr	r0, [pc, #4]	; (8014284 <__tz_unlock+0x8>)
 801427e:	f7fe bebb 	b.w	8012ff8 <__retarget_lock_release>
 8014282:	bf00      	nop
 8014284:	20000cb7 	.word	0x20000cb7

08014288 <_tzset_unlocked>:
 8014288:	4b01      	ldr	r3, [pc, #4]	; (8014290 <_tzset_unlocked+0x8>)
 801428a:	6818      	ldr	r0, [r3, #0]
 801428c:	f000 b802 	b.w	8014294 <_tzset_unlocked_r>
 8014290:	20000100 	.word	0x20000100

08014294 <_tzset_unlocked_r>:
 8014294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014298:	b08d      	sub	sp, #52	; 0x34
 801429a:	4607      	mov	r7, r0
 801429c:	f000 fbc4 	bl	8014a28 <__gettzinfo>
 80142a0:	49ae      	ldr	r1, [pc, #696]	; (801455c <_tzset_unlocked_r+0x2c8>)
 80142a2:	4eaf      	ldr	r6, [pc, #700]	; (8014560 <_tzset_unlocked_r+0x2cc>)
 80142a4:	4605      	mov	r5, r0
 80142a6:	4638      	mov	r0, r7
 80142a8:	f000 fba4 	bl	80149f4 <_getenv_r>
 80142ac:	4604      	mov	r4, r0
 80142ae:	b970      	cbnz	r0, 80142ce <_tzset_unlocked_r+0x3a>
 80142b0:	4bac      	ldr	r3, [pc, #688]	; (8014564 <_tzset_unlocked_r+0x2d0>)
 80142b2:	4aad      	ldr	r2, [pc, #692]	; (8014568 <_tzset_unlocked_r+0x2d4>)
 80142b4:	6018      	str	r0, [r3, #0]
 80142b6:	4bad      	ldr	r3, [pc, #692]	; (801456c <_tzset_unlocked_r+0x2d8>)
 80142b8:	6018      	str	r0, [r3, #0]
 80142ba:	4bad      	ldr	r3, [pc, #692]	; (8014570 <_tzset_unlocked_r+0x2dc>)
 80142bc:	6830      	ldr	r0, [r6, #0]
 80142be:	e9c3 2200 	strd	r2, r2, [r3]
 80142c2:	f7fe ff07 	bl	80130d4 <free>
 80142c6:	6034      	str	r4, [r6, #0]
 80142c8:	b00d      	add	sp, #52	; 0x34
 80142ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ce:	6831      	ldr	r1, [r6, #0]
 80142d0:	2900      	cmp	r1, #0
 80142d2:	d15f      	bne.n	8014394 <_tzset_unlocked_r+0x100>
 80142d4:	6830      	ldr	r0, [r6, #0]
 80142d6:	f7fe fefd 	bl	80130d4 <free>
 80142da:	4620      	mov	r0, r4
 80142dc:	f7eb ffae 	bl	800023c <strlen>
 80142e0:	1c41      	adds	r1, r0, #1
 80142e2:	4638      	mov	r0, r7
 80142e4:	f7fe ff74 	bl	80131d0 <_malloc_r>
 80142e8:	6030      	str	r0, [r6, #0]
 80142ea:	2800      	cmp	r0, #0
 80142ec:	d157      	bne.n	801439e <_tzset_unlocked_r+0x10a>
 80142ee:	7823      	ldrb	r3, [r4, #0]
 80142f0:	4aa0      	ldr	r2, [pc, #640]	; (8014574 <_tzset_unlocked_r+0x2e0>)
 80142f2:	49a1      	ldr	r1, [pc, #644]	; (8014578 <_tzset_unlocked_r+0x2e4>)
 80142f4:	2b3a      	cmp	r3, #58	; 0x3a
 80142f6:	bf08      	it	eq
 80142f8:	3401      	addeq	r4, #1
 80142fa:	ae0a      	add	r6, sp, #40	; 0x28
 80142fc:	4633      	mov	r3, r6
 80142fe:	4620      	mov	r0, r4
 8014300:	f001 f988 	bl	8015614 <siscanf>
 8014304:	2800      	cmp	r0, #0
 8014306:	dddf      	ble.n	80142c8 <_tzset_unlocked_r+0x34>
 8014308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801430a:	18e7      	adds	r7, r4, r3
 801430c:	5ce3      	ldrb	r3, [r4, r3]
 801430e:	2b2d      	cmp	r3, #45	; 0x2d
 8014310:	d149      	bne.n	80143a6 <_tzset_unlocked_r+0x112>
 8014312:	3701      	adds	r7, #1
 8014314:	f04f 34ff 	mov.w	r4, #4294967295
 8014318:	f10d 0a20 	add.w	sl, sp, #32
 801431c:	f10d 0b1e 	add.w	fp, sp, #30
 8014320:	f04f 0800 	mov.w	r8, #0
 8014324:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8014328:	4994      	ldr	r1, [pc, #592]	; (801457c <_tzset_unlocked_r+0x2e8>)
 801432a:	9603      	str	r6, [sp, #12]
 801432c:	f8cd b000 	str.w	fp, [sp]
 8014330:	4633      	mov	r3, r6
 8014332:	aa07      	add	r2, sp, #28
 8014334:	4638      	mov	r0, r7
 8014336:	f8ad 801e 	strh.w	r8, [sp, #30]
 801433a:	f8ad 8020 	strh.w	r8, [sp, #32]
 801433e:	f001 f969 	bl	8015614 <siscanf>
 8014342:	4540      	cmp	r0, r8
 8014344:	ddc0      	ble.n	80142c8 <_tzset_unlocked_r+0x34>
 8014346:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801434a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801434e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8014588 <_tzset_unlocked_r+0x2f4>
 8014352:	213c      	movs	r1, #60	; 0x3c
 8014354:	fb01 2203 	mla	r2, r1, r3, r2
 8014358:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801435c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014360:	fb01 2303 	mla	r3, r1, r3, r2
 8014364:	435c      	muls	r4, r3
 8014366:	62ac      	str	r4, [r5, #40]	; 0x28
 8014368:	4c81      	ldr	r4, [pc, #516]	; (8014570 <_tzset_unlocked_r+0x2dc>)
 801436a:	4b82      	ldr	r3, [pc, #520]	; (8014574 <_tzset_unlocked_r+0x2e0>)
 801436c:	6023      	str	r3, [r4, #0]
 801436e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014370:	4981      	ldr	r1, [pc, #516]	; (8014578 <_tzset_unlocked_r+0x2e4>)
 8014372:	441f      	add	r7, r3
 8014374:	464a      	mov	r2, r9
 8014376:	4633      	mov	r3, r6
 8014378:	4638      	mov	r0, r7
 801437a:	f001 f94b 	bl	8015614 <siscanf>
 801437e:	4540      	cmp	r0, r8
 8014380:	dc16      	bgt.n	80143b0 <_tzset_unlocked_r+0x11c>
 8014382:	6823      	ldr	r3, [r4, #0]
 8014384:	6063      	str	r3, [r4, #4]
 8014386:	4b77      	ldr	r3, [pc, #476]	; (8014564 <_tzset_unlocked_r+0x2d0>)
 8014388:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801438a:	601a      	str	r2, [r3, #0]
 801438c:	4b77      	ldr	r3, [pc, #476]	; (801456c <_tzset_unlocked_r+0x2d8>)
 801438e:	f8c3 8000 	str.w	r8, [r3]
 8014392:	e799      	b.n	80142c8 <_tzset_unlocked_r+0x34>
 8014394:	f7eb ff5a 	bl	800024c <strcmp>
 8014398:	2800      	cmp	r0, #0
 801439a:	d19b      	bne.n	80142d4 <_tzset_unlocked_r+0x40>
 801439c:	e794      	b.n	80142c8 <_tzset_unlocked_r+0x34>
 801439e:	4621      	mov	r1, r4
 80143a0:	f001 f964 	bl	801566c <strcpy>
 80143a4:	e7a3      	b.n	80142ee <_tzset_unlocked_r+0x5a>
 80143a6:	2b2b      	cmp	r3, #43	; 0x2b
 80143a8:	bf08      	it	eq
 80143aa:	3701      	addeq	r7, #1
 80143ac:	2401      	movs	r4, #1
 80143ae:	e7b3      	b.n	8014318 <_tzset_unlocked_r+0x84>
 80143b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143b2:	f8c4 9004 	str.w	r9, [r4, #4]
 80143b6:	18fc      	adds	r4, r7, r3
 80143b8:	5cfb      	ldrb	r3, [r7, r3]
 80143ba:	2b2d      	cmp	r3, #45	; 0x2d
 80143bc:	f040 808b 	bne.w	80144d6 <_tzset_unlocked_r+0x242>
 80143c0:	3401      	adds	r4, #1
 80143c2:	f04f 37ff 	mov.w	r7, #4294967295
 80143c6:	2300      	movs	r3, #0
 80143c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80143cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80143d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80143d4:	930a      	str	r3, [sp, #40]	; 0x28
 80143d6:	e9cd a602 	strd	sl, r6, [sp, #8]
 80143da:	e9cd b600 	strd	fp, r6, [sp]
 80143de:	4967      	ldr	r1, [pc, #412]	; (801457c <_tzset_unlocked_r+0x2e8>)
 80143e0:	4633      	mov	r3, r6
 80143e2:	aa07      	add	r2, sp, #28
 80143e4:	4620      	mov	r0, r4
 80143e6:	f001 f915 	bl	8015614 <siscanf>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	dc78      	bgt.n	80144e0 <_tzset_unlocked_r+0x24c>
 80143ee:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80143f0:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80143f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143f6:	652f      	str	r7, [r5, #80]	; 0x50
 80143f8:	441c      	add	r4, r3
 80143fa:	462f      	mov	r7, r5
 80143fc:	f04f 0900 	mov.w	r9, #0
 8014400:	7823      	ldrb	r3, [r4, #0]
 8014402:	2b2c      	cmp	r3, #44	; 0x2c
 8014404:	bf08      	it	eq
 8014406:	3401      	addeq	r4, #1
 8014408:	f894 8000 	ldrb.w	r8, [r4]
 801440c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8014410:	d178      	bne.n	8014504 <_tzset_unlocked_r+0x270>
 8014412:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8014416:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801441a:	ab09      	add	r3, sp, #36	; 0x24
 801441c:	9300      	str	r3, [sp, #0]
 801441e:	4958      	ldr	r1, [pc, #352]	; (8014580 <_tzset_unlocked_r+0x2ec>)
 8014420:	9603      	str	r6, [sp, #12]
 8014422:	4633      	mov	r3, r6
 8014424:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8014428:	4620      	mov	r0, r4
 801442a:	f001 f8f3 	bl	8015614 <siscanf>
 801442e:	2803      	cmp	r0, #3
 8014430:	f47f af4a 	bne.w	80142c8 <_tzset_unlocked_r+0x34>
 8014434:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014438:	1e4b      	subs	r3, r1, #1
 801443a:	2b0b      	cmp	r3, #11
 801443c:	f63f af44 	bhi.w	80142c8 <_tzset_unlocked_r+0x34>
 8014440:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8014444:	1e53      	subs	r3, r2, #1
 8014446:	2b04      	cmp	r3, #4
 8014448:	f63f af3e 	bhi.w	80142c8 <_tzset_unlocked_r+0x34>
 801444c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8014450:	2b06      	cmp	r3, #6
 8014452:	f63f af39 	bhi.w	80142c8 <_tzset_unlocked_r+0x34>
 8014456:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801445a:	f887 8008 	strb.w	r8, [r7, #8]
 801445e:	617b      	str	r3, [r7, #20]
 8014460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014462:	eb04 0803 	add.w	r8, r4, r3
 8014466:	2302      	movs	r3, #2
 8014468:	f8ad 301c 	strh.w	r3, [sp, #28]
 801446c:	2300      	movs	r3, #0
 801446e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014472:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014476:	930a      	str	r3, [sp, #40]	; 0x28
 8014478:	f898 3000 	ldrb.w	r3, [r8]
 801447c:	2b2f      	cmp	r3, #47	; 0x2f
 801447e:	d109      	bne.n	8014494 <_tzset_unlocked_r+0x200>
 8014480:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014484:	e9cd b600 	strd	fp, r6, [sp]
 8014488:	493e      	ldr	r1, [pc, #248]	; (8014584 <_tzset_unlocked_r+0x2f0>)
 801448a:	4633      	mov	r3, r6
 801448c:	aa07      	add	r2, sp, #28
 801448e:	4640      	mov	r0, r8
 8014490:	f001 f8c0 	bl	8015614 <siscanf>
 8014494:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014498:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801449c:	213c      	movs	r1, #60	; 0x3c
 801449e:	fb01 2203 	mla	r2, r1, r3, r2
 80144a2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80144a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80144aa:	fb01 2303 	mla	r3, r1, r3, r2
 80144ae:	61bb      	str	r3, [r7, #24]
 80144b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80144b2:	3728      	adds	r7, #40	; 0x28
 80144b4:	4444      	add	r4, r8
 80144b6:	f1b9 0f00 	cmp.w	r9, #0
 80144ba:	d020      	beq.n	80144fe <_tzset_unlocked_r+0x26a>
 80144bc:	6868      	ldr	r0, [r5, #4]
 80144be:	f7ff fe2f 	bl	8014120 <__tzcalc_limits>
 80144c2:	4b28      	ldr	r3, [pc, #160]	; (8014564 <_tzset_unlocked_r+0x2d0>)
 80144c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80144c6:	601a      	str	r2, [r3, #0]
 80144c8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80144ca:	1a9b      	subs	r3, r3, r2
 80144cc:	4a27      	ldr	r2, [pc, #156]	; (801456c <_tzset_unlocked_r+0x2d8>)
 80144ce:	bf18      	it	ne
 80144d0:	2301      	movne	r3, #1
 80144d2:	6013      	str	r3, [r2, #0]
 80144d4:	e6f8      	b.n	80142c8 <_tzset_unlocked_r+0x34>
 80144d6:	2b2b      	cmp	r3, #43	; 0x2b
 80144d8:	bf08      	it	eq
 80144da:	3401      	addeq	r4, #1
 80144dc:	2701      	movs	r7, #1
 80144de:	e772      	b.n	80143c6 <_tzset_unlocked_r+0x132>
 80144e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80144e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80144e8:	213c      	movs	r1, #60	; 0x3c
 80144ea:	fb01 2203 	mla	r2, r1, r3, r2
 80144ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80144f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80144f6:	fb01 2303 	mla	r3, r1, r3, r2
 80144fa:	435f      	muls	r7, r3
 80144fc:	e77a      	b.n	80143f4 <_tzset_unlocked_r+0x160>
 80144fe:	f04f 0901 	mov.w	r9, #1
 8014502:	e77d      	b.n	8014400 <_tzset_unlocked_r+0x16c>
 8014504:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014508:	bf06      	itte	eq
 801450a:	3401      	addeq	r4, #1
 801450c:	4643      	moveq	r3, r8
 801450e:	2344      	movne	r3, #68	; 0x44
 8014510:	220a      	movs	r2, #10
 8014512:	a90b      	add	r1, sp, #44	; 0x2c
 8014514:	4620      	mov	r0, r4
 8014516:	9305      	str	r3, [sp, #20]
 8014518:	f7ff fdde 	bl	80140d8 <strtoul>
 801451c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014520:	9b05      	ldr	r3, [sp, #20]
 8014522:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8014526:	45a0      	cmp	r8, r4
 8014528:	d114      	bne.n	8014554 <_tzset_unlocked_r+0x2c0>
 801452a:	234d      	movs	r3, #77	; 0x4d
 801452c:	f1b9 0f00 	cmp.w	r9, #0
 8014530:	d107      	bne.n	8014542 <_tzset_unlocked_r+0x2ae>
 8014532:	722b      	strb	r3, [r5, #8]
 8014534:	2103      	movs	r1, #3
 8014536:	2302      	movs	r3, #2
 8014538:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801453c:	f8c5 9014 	str.w	r9, [r5, #20]
 8014540:	e791      	b.n	8014466 <_tzset_unlocked_r+0x1d2>
 8014542:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8014546:	220b      	movs	r2, #11
 8014548:	2301      	movs	r3, #1
 801454a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801454e:	2300      	movs	r3, #0
 8014550:	63eb      	str	r3, [r5, #60]	; 0x3c
 8014552:	e788      	b.n	8014466 <_tzset_unlocked_r+0x1d2>
 8014554:	b280      	uxth	r0, r0
 8014556:	723b      	strb	r3, [r7, #8]
 8014558:	6178      	str	r0, [r7, #20]
 801455a:	e784      	b.n	8014466 <_tzset_unlocked_r+0x1d2>
 801455c:	08019854 	.word	0x08019854
 8014560:	20000c10 	.word	0x20000c10
 8014564:	20000c18 	.word	0x20000c18
 8014568:	08019857 	.word	0x08019857
 801456c:	20000c14 	.word	0x20000c14
 8014570:	20000164 	.word	0x20000164
 8014574:	20000c03 	.word	0x20000c03
 8014578:	0801985b 	.word	0x0801985b
 801457c:	0801987e 	.word	0x0801987e
 8014580:	0801986a 	.word	0x0801986a
 8014584:	0801987d 	.word	0x0801987d
 8014588:	20000bf8 	.word	0x20000bf8

0801458c <_vsniprintf_r>:
 801458c:	b530      	push	{r4, r5, lr}
 801458e:	1e14      	subs	r4, r2, #0
 8014590:	4605      	mov	r5, r0
 8014592:	b09b      	sub	sp, #108	; 0x6c
 8014594:	4618      	mov	r0, r3
 8014596:	da05      	bge.n	80145a4 <_vsniprintf_r+0x18>
 8014598:	238b      	movs	r3, #139	; 0x8b
 801459a:	602b      	str	r3, [r5, #0]
 801459c:	f04f 30ff 	mov.w	r0, #4294967295
 80145a0:	b01b      	add	sp, #108	; 0x6c
 80145a2:	bd30      	pop	{r4, r5, pc}
 80145a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80145a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80145ac:	bf14      	ite	ne
 80145ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80145b2:	4623      	moveq	r3, r4
 80145b4:	9302      	str	r3, [sp, #8]
 80145b6:	9305      	str	r3, [sp, #20]
 80145b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145bc:	9100      	str	r1, [sp, #0]
 80145be:	9104      	str	r1, [sp, #16]
 80145c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80145c4:	4602      	mov	r2, r0
 80145c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80145c8:	4669      	mov	r1, sp
 80145ca:	4628      	mov	r0, r5
 80145cc:	f000 fba6 	bl	8014d1c <_svfiprintf_r>
 80145d0:	1c43      	adds	r3, r0, #1
 80145d2:	bfbc      	itt	lt
 80145d4:	238b      	movlt	r3, #139	; 0x8b
 80145d6:	602b      	strlt	r3, [r5, #0]
 80145d8:	2c00      	cmp	r4, #0
 80145da:	d0e1      	beq.n	80145a0 <_vsniprintf_r+0x14>
 80145dc:	9b00      	ldr	r3, [sp, #0]
 80145de:	2200      	movs	r2, #0
 80145e0:	701a      	strb	r2, [r3, #0]
 80145e2:	e7dd      	b.n	80145a0 <_vsniprintf_r+0x14>

080145e4 <vsniprintf>:
 80145e4:	b507      	push	{r0, r1, r2, lr}
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	4613      	mov	r3, r2
 80145ea:	460a      	mov	r2, r1
 80145ec:	4601      	mov	r1, r0
 80145ee:	4803      	ldr	r0, [pc, #12]	; (80145fc <vsniprintf+0x18>)
 80145f0:	6800      	ldr	r0, [r0, #0]
 80145f2:	f7ff ffcb 	bl	801458c <_vsniprintf_r>
 80145f6:	b003      	add	sp, #12
 80145f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80145fc:	20000100 	.word	0x20000100

08014600 <__swbuf_r>:
 8014600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014602:	460e      	mov	r6, r1
 8014604:	4614      	mov	r4, r2
 8014606:	4605      	mov	r5, r0
 8014608:	b118      	cbz	r0, 8014612 <__swbuf_r+0x12>
 801460a:	6983      	ldr	r3, [r0, #24]
 801460c:	b90b      	cbnz	r3, 8014612 <__swbuf_r+0x12>
 801460e:	f7fe f93f 	bl	8012890 <__sinit>
 8014612:	4b21      	ldr	r3, [pc, #132]	; (8014698 <__swbuf_r+0x98>)
 8014614:	429c      	cmp	r4, r3
 8014616:	d12b      	bne.n	8014670 <__swbuf_r+0x70>
 8014618:	686c      	ldr	r4, [r5, #4]
 801461a:	69a3      	ldr	r3, [r4, #24]
 801461c:	60a3      	str	r3, [r4, #8]
 801461e:	89a3      	ldrh	r3, [r4, #12]
 8014620:	071a      	lsls	r2, r3, #28
 8014622:	d52f      	bpl.n	8014684 <__swbuf_r+0x84>
 8014624:	6923      	ldr	r3, [r4, #16]
 8014626:	b36b      	cbz	r3, 8014684 <__swbuf_r+0x84>
 8014628:	6923      	ldr	r3, [r4, #16]
 801462a:	6820      	ldr	r0, [r4, #0]
 801462c:	1ac0      	subs	r0, r0, r3
 801462e:	6963      	ldr	r3, [r4, #20]
 8014630:	b2f6      	uxtb	r6, r6
 8014632:	4283      	cmp	r3, r0
 8014634:	4637      	mov	r7, r6
 8014636:	dc04      	bgt.n	8014642 <__swbuf_r+0x42>
 8014638:	4621      	mov	r1, r4
 801463a:	4628      	mov	r0, r5
 801463c:	f7fe f882 	bl	8012744 <_fflush_r>
 8014640:	bb30      	cbnz	r0, 8014690 <__swbuf_r+0x90>
 8014642:	68a3      	ldr	r3, [r4, #8]
 8014644:	3b01      	subs	r3, #1
 8014646:	60a3      	str	r3, [r4, #8]
 8014648:	6823      	ldr	r3, [r4, #0]
 801464a:	1c5a      	adds	r2, r3, #1
 801464c:	6022      	str	r2, [r4, #0]
 801464e:	701e      	strb	r6, [r3, #0]
 8014650:	6963      	ldr	r3, [r4, #20]
 8014652:	3001      	adds	r0, #1
 8014654:	4283      	cmp	r3, r0
 8014656:	d004      	beq.n	8014662 <__swbuf_r+0x62>
 8014658:	89a3      	ldrh	r3, [r4, #12]
 801465a:	07db      	lsls	r3, r3, #31
 801465c:	d506      	bpl.n	801466c <__swbuf_r+0x6c>
 801465e:	2e0a      	cmp	r6, #10
 8014660:	d104      	bne.n	801466c <__swbuf_r+0x6c>
 8014662:	4621      	mov	r1, r4
 8014664:	4628      	mov	r0, r5
 8014666:	f7fe f86d 	bl	8012744 <_fflush_r>
 801466a:	b988      	cbnz	r0, 8014690 <__swbuf_r+0x90>
 801466c:	4638      	mov	r0, r7
 801466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014670:	4b0a      	ldr	r3, [pc, #40]	; (801469c <__swbuf_r+0x9c>)
 8014672:	429c      	cmp	r4, r3
 8014674:	d101      	bne.n	801467a <__swbuf_r+0x7a>
 8014676:	68ac      	ldr	r4, [r5, #8]
 8014678:	e7cf      	b.n	801461a <__swbuf_r+0x1a>
 801467a:	4b09      	ldr	r3, [pc, #36]	; (80146a0 <__swbuf_r+0xa0>)
 801467c:	429c      	cmp	r4, r3
 801467e:	bf08      	it	eq
 8014680:	68ec      	ldreq	r4, [r5, #12]
 8014682:	e7ca      	b.n	801461a <__swbuf_r+0x1a>
 8014684:	4621      	mov	r1, r4
 8014686:	4628      	mov	r0, r5
 8014688:	f000 f81e 	bl	80146c8 <__swsetup_r>
 801468c:	2800      	cmp	r0, #0
 801468e:	d0cb      	beq.n	8014628 <__swbuf_r+0x28>
 8014690:	f04f 37ff 	mov.w	r7, #4294967295
 8014694:	e7ea      	b.n	801466c <__swbuf_r+0x6c>
 8014696:	bf00      	nop
 8014698:	08019458 	.word	0x08019458
 801469c:	08019478 	.word	0x08019478
 80146a0:	08019438 	.word	0x08019438

080146a4 <_write_r>:
 80146a4:	b538      	push	{r3, r4, r5, lr}
 80146a6:	4d07      	ldr	r5, [pc, #28]	; (80146c4 <_write_r+0x20>)
 80146a8:	4604      	mov	r4, r0
 80146aa:	4608      	mov	r0, r1
 80146ac:	4611      	mov	r1, r2
 80146ae:	2200      	movs	r2, #0
 80146b0:	602a      	str	r2, [r5, #0]
 80146b2:	461a      	mov	r2, r3
 80146b4:	f7ec fb8c 	bl	8000dd0 <_write>
 80146b8:	1c43      	adds	r3, r0, #1
 80146ba:	d102      	bne.n	80146c2 <_write_r+0x1e>
 80146bc:	682b      	ldr	r3, [r5, #0]
 80146be:	b103      	cbz	r3, 80146c2 <_write_r+0x1e>
 80146c0:	6023      	str	r3, [r4, #0]
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	20000cbc 	.word	0x20000cbc

080146c8 <__swsetup_r>:
 80146c8:	4b32      	ldr	r3, [pc, #200]	; (8014794 <__swsetup_r+0xcc>)
 80146ca:	b570      	push	{r4, r5, r6, lr}
 80146cc:	681d      	ldr	r5, [r3, #0]
 80146ce:	4606      	mov	r6, r0
 80146d0:	460c      	mov	r4, r1
 80146d2:	b125      	cbz	r5, 80146de <__swsetup_r+0x16>
 80146d4:	69ab      	ldr	r3, [r5, #24]
 80146d6:	b913      	cbnz	r3, 80146de <__swsetup_r+0x16>
 80146d8:	4628      	mov	r0, r5
 80146da:	f7fe f8d9 	bl	8012890 <__sinit>
 80146de:	4b2e      	ldr	r3, [pc, #184]	; (8014798 <__swsetup_r+0xd0>)
 80146e0:	429c      	cmp	r4, r3
 80146e2:	d10f      	bne.n	8014704 <__swsetup_r+0x3c>
 80146e4:	686c      	ldr	r4, [r5, #4]
 80146e6:	89a3      	ldrh	r3, [r4, #12]
 80146e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146ec:	0719      	lsls	r1, r3, #28
 80146ee:	d42c      	bmi.n	801474a <__swsetup_r+0x82>
 80146f0:	06dd      	lsls	r5, r3, #27
 80146f2:	d411      	bmi.n	8014718 <__swsetup_r+0x50>
 80146f4:	2309      	movs	r3, #9
 80146f6:	6033      	str	r3, [r6, #0]
 80146f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80146fc:	81a3      	strh	r3, [r4, #12]
 80146fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014702:	e03e      	b.n	8014782 <__swsetup_r+0xba>
 8014704:	4b25      	ldr	r3, [pc, #148]	; (801479c <__swsetup_r+0xd4>)
 8014706:	429c      	cmp	r4, r3
 8014708:	d101      	bne.n	801470e <__swsetup_r+0x46>
 801470a:	68ac      	ldr	r4, [r5, #8]
 801470c:	e7eb      	b.n	80146e6 <__swsetup_r+0x1e>
 801470e:	4b24      	ldr	r3, [pc, #144]	; (80147a0 <__swsetup_r+0xd8>)
 8014710:	429c      	cmp	r4, r3
 8014712:	bf08      	it	eq
 8014714:	68ec      	ldreq	r4, [r5, #12]
 8014716:	e7e6      	b.n	80146e6 <__swsetup_r+0x1e>
 8014718:	0758      	lsls	r0, r3, #29
 801471a:	d512      	bpl.n	8014742 <__swsetup_r+0x7a>
 801471c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801471e:	b141      	cbz	r1, 8014732 <__swsetup_r+0x6a>
 8014720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014724:	4299      	cmp	r1, r3
 8014726:	d002      	beq.n	801472e <__swsetup_r+0x66>
 8014728:	4630      	mov	r0, r6
 801472a:	f7fe fd01 	bl	8013130 <_free_r>
 801472e:	2300      	movs	r3, #0
 8014730:	6363      	str	r3, [r4, #52]	; 0x34
 8014732:	89a3      	ldrh	r3, [r4, #12]
 8014734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014738:	81a3      	strh	r3, [r4, #12]
 801473a:	2300      	movs	r3, #0
 801473c:	6063      	str	r3, [r4, #4]
 801473e:	6923      	ldr	r3, [r4, #16]
 8014740:	6023      	str	r3, [r4, #0]
 8014742:	89a3      	ldrh	r3, [r4, #12]
 8014744:	f043 0308 	orr.w	r3, r3, #8
 8014748:	81a3      	strh	r3, [r4, #12]
 801474a:	6923      	ldr	r3, [r4, #16]
 801474c:	b94b      	cbnz	r3, 8014762 <__swsetup_r+0x9a>
 801474e:	89a3      	ldrh	r3, [r4, #12]
 8014750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014758:	d003      	beq.n	8014762 <__swsetup_r+0x9a>
 801475a:	4621      	mov	r1, r4
 801475c:	4630      	mov	r0, r6
 801475e:	f7fe fc71 	bl	8013044 <__smakebuf_r>
 8014762:	89a0      	ldrh	r0, [r4, #12]
 8014764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014768:	f010 0301 	ands.w	r3, r0, #1
 801476c:	d00a      	beq.n	8014784 <__swsetup_r+0xbc>
 801476e:	2300      	movs	r3, #0
 8014770:	60a3      	str	r3, [r4, #8]
 8014772:	6963      	ldr	r3, [r4, #20]
 8014774:	425b      	negs	r3, r3
 8014776:	61a3      	str	r3, [r4, #24]
 8014778:	6923      	ldr	r3, [r4, #16]
 801477a:	b943      	cbnz	r3, 801478e <__swsetup_r+0xc6>
 801477c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014780:	d1ba      	bne.n	80146f8 <__swsetup_r+0x30>
 8014782:	bd70      	pop	{r4, r5, r6, pc}
 8014784:	0781      	lsls	r1, r0, #30
 8014786:	bf58      	it	pl
 8014788:	6963      	ldrpl	r3, [r4, #20]
 801478a:	60a3      	str	r3, [r4, #8]
 801478c:	e7f4      	b.n	8014778 <__swsetup_r+0xb0>
 801478e:	2000      	movs	r0, #0
 8014790:	e7f7      	b.n	8014782 <__swsetup_r+0xba>
 8014792:	bf00      	nop
 8014794:	20000100 	.word	0x20000100
 8014798:	08019458 	.word	0x08019458
 801479c:	08019478 	.word	0x08019478
 80147a0:	08019438 	.word	0x08019438

080147a4 <__register_exitproc>:
 80147a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8014864 <__register_exitproc+0xc0>
 80147ac:	4606      	mov	r6, r0
 80147ae:	f8d8 0000 	ldr.w	r0, [r8]
 80147b2:	461f      	mov	r7, r3
 80147b4:	460d      	mov	r5, r1
 80147b6:	4691      	mov	r9, r2
 80147b8:	f7fe fc1d 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 80147bc:	4b25      	ldr	r3, [pc, #148]	; (8014854 <__register_exitproc+0xb0>)
 80147be:	681c      	ldr	r4, [r3, #0]
 80147c0:	b934      	cbnz	r4, 80147d0 <__register_exitproc+0x2c>
 80147c2:	4c25      	ldr	r4, [pc, #148]	; (8014858 <__register_exitproc+0xb4>)
 80147c4:	601c      	str	r4, [r3, #0]
 80147c6:	4b25      	ldr	r3, [pc, #148]	; (801485c <__register_exitproc+0xb8>)
 80147c8:	b113      	cbz	r3, 80147d0 <__register_exitproc+0x2c>
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80147d0:	6863      	ldr	r3, [r4, #4]
 80147d2:	2b1f      	cmp	r3, #31
 80147d4:	dd07      	ble.n	80147e6 <__register_exitproc+0x42>
 80147d6:	f8d8 0000 	ldr.w	r0, [r8]
 80147da:	f7fe fc0e 	bl	8012ffa <__retarget_lock_release_recursive>
 80147de:	f04f 30ff 	mov.w	r0, #4294967295
 80147e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147e6:	b34e      	cbz	r6, 801483c <__register_exitproc+0x98>
 80147e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80147ec:	b988      	cbnz	r0, 8014812 <__register_exitproc+0x6e>
 80147ee:	4b1c      	ldr	r3, [pc, #112]	; (8014860 <__register_exitproc+0xbc>)
 80147f0:	b923      	cbnz	r3, 80147fc <__register_exitproc+0x58>
 80147f2:	f8d8 0000 	ldr.w	r0, [r8]
 80147f6:	f7fe fbff 	bl	8012ff8 <__retarget_lock_release>
 80147fa:	e7f0      	b.n	80147de <__register_exitproc+0x3a>
 80147fc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8014800:	f7fe fc60 	bl	80130c4 <malloc>
 8014804:	2800      	cmp	r0, #0
 8014806:	d0f4      	beq.n	80147f2 <__register_exitproc+0x4e>
 8014808:	2300      	movs	r3, #0
 801480a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801480e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8014812:	6863      	ldr	r3, [r4, #4]
 8014814:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8014818:	2201      	movs	r2, #1
 801481a:	409a      	lsls	r2, r3
 801481c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8014820:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8014824:	4313      	orrs	r3, r2
 8014826:	2e02      	cmp	r6, #2
 8014828:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801482c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8014830:	bf02      	ittt	eq
 8014832:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8014836:	431a      	orreq	r2, r3
 8014838:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801483c:	6863      	ldr	r3, [r4, #4]
 801483e:	f8d8 0000 	ldr.w	r0, [r8]
 8014842:	1c5a      	adds	r2, r3, #1
 8014844:	3302      	adds	r3, #2
 8014846:	6062      	str	r2, [r4, #4]
 8014848:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801484c:	f7fe fbd5 	bl	8012ffa <__retarget_lock_release_recursive>
 8014850:	2000      	movs	r0, #0
 8014852:	e7c6      	b.n	80147e2 <__register_exitproc+0x3e>
 8014854:	20000ca8 	.word	0x20000ca8
 8014858:	20000c1c 	.word	0x20000c1c
 801485c:	00000000 	.word	0x00000000
 8014860:	080130c5 	.word	0x080130c5
 8014864:	2000016c 	.word	0x2000016c

08014868 <abs>:
 8014868:	2800      	cmp	r0, #0
 801486a:	bfb8      	it	lt
 801486c:	4240      	neglt	r0, r0
 801486e:	4770      	bx	lr

08014870 <__assert_func>:
 8014870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014872:	4614      	mov	r4, r2
 8014874:	461a      	mov	r2, r3
 8014876:	4b09      	ldr	r3, [pc, #36]	; (801489c <__assert_func+0x2c>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	4605      	mov	r5, r0
 801487c:	68d8      	ldr	r0, [r3, #12]
 801487e:	b14c      	cbz	r4, 8014894 <__assert_func+0x24>
 8014880:	4b07      	ldr	r3, [pc, #28]	; (80148a0 <__assert_func+0x30>)
 8014882:	9100      	str	r1, [sp, #0]
 8014884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014888:	4906      	ldr	r1, [pc, #24]	; (80148a4 <__assert_func+0x34>)
 801488a:	462b      	mov	r3, r5
 801488c:	f000 f854 	bl	8014938 <fiprintf>
 8014890:	f7fd fe42 	bl	8012518 <abort>
 8014894:	4b04      	ldr	r3, [pc, #16]	; (80148a8 <__assert_func+0x38>)
 8014896:	461c      	mov	r4, r3
 8014898:	e7f3      	b.n	8014882 <__assert_func+0x12>
 801489a:	bf00      	nop
 801489c:	20000100 	.word	0x20000100
 80148a0:	08019890 	.word	0x08019890
 80148a4:	0801989d 	.word	0x0801989d
 80148a8:	080198cb 	.word	0x080198cb

080148ac <_close_r>:
 80148ac:	b538      	push	{r3, r4, r5, lr}
 80148ae:	4d06      	ldr	r5, [pc, #24]	; (80148c8 <_close_r+0x1c>)
 80148b0:	2300      	movs	r3, #0
 80148b2:	4604      	mov	r4, r0
 80148b4:	4608      	mov	r0, r1
 80148b6:	602b      	str	r3, [r5, #0]
 80148b8:	f7ec faa6 	bl	8000e08 <_close>
 80148bc:	1c43      	adds	r3, r0, #1
 80148be:	d102      	bne.n	80148c6 <_close_r+0x1a>
 80148c0:	682b      	ldr	r3, [r5, #0]
 80148c2:	b103      	cbz	r3, 80148c6 <_close_r+0x1a>
 80148c4:	6023      	str	r3, [r4, #0]
 80148c6:	bd38      	pop	{r3, r4, r5, pc}
 80148c8:	20000cbc 	.word	0x20000cbc

080148cc <__sflags>:
 80148cc:	780b      	ldrb	r3, [r1, #0]
 80148ce:	2b72      	cmp	r3, #114	; 0x72
 80148d0:	b530      	push	{r4, r5, lr}
 80148d2:	d022      	beq.n	801491a <__sflags+0x4e>
 80148d4:	2b77      	cmp	r3, #119	; 0x77
 80148d6:	d024      	beq.n	8014922 <__sflags+0x56>
 80148d8:	2b61      	cmp	r3, #97	; 0x61
 80148da:	d027      	beq.n	801492c <__sflags+0x60>
 80148dc:	2316      	movs	r3, #22
 80148de:	6003      	str	r3, [r0, #0]
 80148e0:	2000      	movs	r0, #0
 80148e2:	bd30      	pop	{r4, r5, pc}
 80148e4:	2d62      	cmp	r5, #98	; 0x62
 80148e6:	d012      	beq.n	801490e <__sflags+0x42>
 80148e8:	2d78      	cmp	r5, #120	; 0x78
 80148ea:	d013      	beq.n	8014914 <__sflags+0x48>
 80148ec:	2d2b      	cmp	r5, #43	; 0x2b
 80148ee:	d107      	bne.n	8014900 <__sflags+0x34>
 80148f0:	f020 001c 	bic.w	r0, r0, #28
 80148f4:	f023 0303 	bic.w	r3, r3, #3
 80148f8:	f040 0010 	orr.w	r0, r0, #16
 80148fc:	f043 0302 	orr.w	r3, r3, #2
 8014900:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8014904:	2d00      	cmp	r5, #0
 8014906:	d1ed      	bne.n	80148e4 <__sflags+0x18>
 8014908:	4323      	orrs	r3, r4
 801490a:	6013      	str	r3, [r2, #0]
 801490c:	e7e9      	b.n	80148e2 <__sflags+0x16>
 801490e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014912:	e7f5      	b.n	8014900 <__sflags+0x34>
 8014914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014918:	e7f2      	b.n	8014900 <__sflags+0x34>
 801491a:	2400      	movs	r4, #0
 801491c:	4623      	mov	r3, r4
 801491e:	2004      	movs	r0, #4
 8014920:	e7ee      	b.n	8014900 <__sflags+0x34>
 8014922:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8014926:	2301      	movs	r3, #1
 8014928:	2008      	movs	r0, #8
 801492a:	e7e9      	b.n	8014900 <__sflags+0x34>
 801492c:	f44f 7402 	mov.w	r4, #520	; 0x208
 8014930:	2301      	movs	r3, #1
 8014932:	f44f 7084 	mov.w	r0, #264	; 0x108
 8014936:	e7e3      	b.n	8014900 <__sflags+0x34>

08014938 <fiprintf>:
 8014938:	b40e      	push	{r1, r2, r3}
 801493a:	b503      	push	{r0, r1, lr}
 801493c:	4601      	mov	r1, r0
 801493e:	ab03      	add	r3, sp, #12
 8014940:	4805      	ldr	r0, [pc, #20]	; (8014958 <fiprintf+0x20>)
 8014942:	f853 2b04 	ldr.w	r2, [r3], #4
 8014946:	6800      	ldr	r0, [r0, #0]
 8014948:	9301      	str	r3, [sp, #4]
 801494a:	f000 fb11 	bl	8014f70 <_vfiprintf_r>
 801494e:	b002      	add	sp, #8
 8014950:	f85d eb04 	ldr.w	lr, [sp], #4
 8014954:	b003      	add	sp, #12
 8014956:	4770      	bx	lr
 8014958:	20000100 	.word	0x20000100

0801495c <_fstat_r>:
 801495c:	b538      	push	{r3, r4, r5, lr}
 801495e:	4d07      	ldr	r5, [pc, #28]	; (801497c <_fstat_r+0x20>)
 8014960:	2300      	movs	r3, #0
 8014962:	4604      	mov	r4, r0
 8014964:	4608      	mov	r0, r1
 8014966:	4611      	mov	r1, r2
 8014968:	602b      	str	r3, [r5, #0]
 801496a:	f7ec fa59 	bl	8000e20 <_fstat>
 801496e:	1c43      	adds	r3, r0, #1
 8014970:	d102      	bne.n	8014978 <_fstat_r+0x1c>
 8014972:	682b      	ldr	r3, [r5, #0]
 8014974:	b103      	cbz	r3, 8014978 <_fstat_r+0x1c>
 8014976:	6023      	str	r3, [r4, #0]
 8014978:	bd38      	pop	{r3, r4, r5, pc}
 801497a:	bf00      	nop
 801497c:	20000cbc 	.word	0x20000cbc

08014980 <_findenv_r>:
 8014980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014984:	4607      	mov	r7, r0
 8014986:	4689      	mov	r9, r1
 8014988:	4616      	mov	r6, r2
 801498a:	f000 fe97 	bl	80156bc <__env_lock>
 801498e:	4b18      	ldr	r3, [pc, #96]	; (80149f0 <_findenv_r+0x70>)
 8014990:	681c      	ldr	r4, [r3, #0]
 8014992:	469a      	mov	sl, r3
 8014994:	b134      	cbz	r4, 80149a4 <_findenv_r+0x24>
 8014996:	464b      	mov	r3, r9
 8014998:	4698      	mov	r8, r3
 801499a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801499e:	b139      	cbz	r1, 80149b0 <_findenv_r+0x30>
 80149a0:	293d      	cmp	r1, #61	; 0x3d
 80149a2:	d1f9      	bne.n	8014998 <_findenv_r+0x18>
 80149a4:	4638      	mov	r0, r7
 80149a6:	f000 fe8f 	bl	80156c8 <__env_unlock>
 80149aa:	2000      	movs	r0, #0
 80149ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b0:	eba8 0809 	sub.w	r8, r8, r9
 80149b4:	46a3      	mov	fp, r4
 80149b6:	f854 0b04 	ldr.w	r0, [r4], #4
 80149ba:	2800      	cmp	r0, #0
 80149bc:	d0f2      	beq.n	80149a4 <_findenv_r+0x24>
 80149be:	4642      	mov	r2, r8
 80149c0:	4649      	mov	r1, r9
 80149c2:	f000 fe5b 	bl	801567c <strncmp>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d1f4      	bne.n	80149b4 <_findenv_r+0x34>
 80149ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80149ce:	eb03 0508 	add.w	r5, r3, r8
 80149d2:	f813 3008 	ldrb.w	r3, [r3, r8]
 80149d6:	2b3d      	cmp	r3, #61	; 0x3d
 80149d8:	d1ec      	bne.n	80149b4 <_findenv_r+0x34>
 80149da:	f8da 3000 	ldr.w	r3, [sl]
 80149de:	ebab 0303 	sub.w	r3, fp, r3
 80149e2:	109b      	asrs	r3, r3, #2
 80149e4:	4638      	mov	r0, r7
 80149e6:	6033      	str	r3, [r6, #0]
 80149e8:	f000 fe6e 	bl	80156c8 <__env_unlock>
 80149ec:	1c68      	adds	r0, r5, #1
 80149ee:	e7dd      	b.n	80149ac <_findenv_r+0x2c>
 80149f0:	20000000 	.word	0x20000000

080149f4 <_getenv_r>:
 80149f4:	b507      	push	{r0, r1, r2, lr}
 80149f6:	aa01      	add	r2, sp, #4
 80149f8:	f7ff ffc2 	bl	8014980 <_findenv_r>
 80149fc:	b003      	add	sp, #12
 80149fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014a04 <_gettimeofday_r>:
 8014a04:	b538      	push	{r3, r4, r5, lr}
 8014a06:	4d07      	ldr	r5, [pc, #28]	; (8014a24 <_gettimeofday_r+0x20>)
 8014a08:	2300      	movs	r3, #0
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	4608      	mov	r0, r1
 8014a0e:	4611      	mov	r1, r2
 8014a10:	602b      	str	r3, [r5, #0]
 8014a12:	f001 fa99 	bl	8015f48 <_gettimeofday>
 8014a16:	1c43      	adds	r3, r0, #1
 8014a18:	d102      	bne.n	8014a20 <_gettimeofday_r+0x1c>
 8014a1a:	682b      	ldr	r3, [r5, #0]
 8014a1c:	b103      	cbz	r3, 8014a20 <_gettimeofday_r+0x1c>
 8014a1e:	6023      	str	r3, [r4, #0]
 8014a20:	bd38      	pop	{r3, r4, r5, pc}
 8014a22:	bf00      	nop
 8014a24:	20000cbc 	.word	0x20000cbc

08014a28 <__gettzinfo>:
 8014a28:	4800      	ldr	r0, [pc, #0]	; (8014a2c <__gettzinfo+0x4>)
 8014a2a:	4770      	bx	lr
 8014a2c:	20000170 	.word	0x20000170

08014a30 <gmtime_r>:
 8014a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a34:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014a38:	460c      	mov	r4, r1
 8014a3a:	4a51      	ldr	r2, [pc, #324]	; (8014b80 <gmtime_r+0x150>)
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	4630      	mov	r0, r6
 8014a40:	4639      	mov	r1, r7
 8014a42:	f7eb feb7 	bl	80007b4 <__aeabi_ldivmod>
 8014a46:	4639      	mov	r1, r7
 8014a48:	4605      	mov	r5, r0
 8014a4a:	4a4d      	ldr	r2, [pc, #308]	; (8014b80 <gmtime_r+0x150>)
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	2300      	movs	r3, #0
 8014a50:	f7eb feb0 	bl	80007b4 <__aeabi_ldivmod>
 8014a54:	2a00      	cmp	r2, #0
 8014a56:	bfbc      	itt	lt
 8014a58:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014a5c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014a60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014a64:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014a68:	fbb2 f3f1 	udiv	r3, r2, r1
 8014a6c:	fb01 2213 	mls	r2, r1, r3, r2
 8014a70:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8014a74:	bfac      	ite	ge
 8014a76:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8014a7a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8014a7e:	60a3      	str	r3, [r4, #8]
 8014a80:	fbb2 f3f1 	udiv	r3, r2, r1
 8014a84:	fb01 2213 	mls	r2, r1, r3, r2
 8014a88:	6063      	str	r3, [r4, #4]
 8014a8a:	6022      	str	r2, [r4, #0]
 8014a8c:	1cc3      	adds	r3, r0, #3
 8014a8e:	2207      	movs	r2, #7
 8014a90:	fb93 f2f2 	sdiv	r2, r3, r2
 8014a94:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8014a98:	1a9b      	subs	r3, r3, r2
 8014a9a:	bf48      	it	mi
 8014a9c:	3307      	addmi	r3, #7
 8014a9e:	2800      	cmp	r0, #0
 8014aa0:	61a3      	str	r3, [r4, #24]
 8014aa2:	bfb8      	it	lt
 8014aa4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8014aa8:	4936      	ldr	r1, [pc, #216]	; (8014b84 <gmtime_r+0x154>)
 8014aaa:	bfae      	itee	ge
 8014aac:	fb90 f1f1 	sdivge	r1, r0, r1
 8014ab0:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8014ab4:	fb93 f1f1 	sdivlt	r1, r3, r1
 8014ab8:	4b33      	ldr	r3, [pc, #204]	; (8014b88 <gmtime_r+0x158>)
 8014aba:	fb03 0001 	mla	r0, r3, r1, r0
 8014abe:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8014ac2:	fbb0 f2f2 	udiv	r2, r0, r2
 8014ac6:	4402      	add	r2, r0
 8014ac8:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8014acc:	fbb0 f3fc 	udiv	r3, r0, ip
 8014ad0:	1ad2      	subs	r2, r2, r3
 8014ad2:	f240 176d 	movw	r7, #365	; 0x16d
 8014ad6:	4b2d      	ldr	r3, [pc, #180]	; (8014b8c <gmtime_r+0x15c>)
 8014ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8014adc:	2664      	movs	r6, #100	; 0x64
 8014ade:	1ad3      	subs	r3, r2, r3
 8014ae0:	fbb3 f5f7 	udiv	r5, r3, r7
 8014ae4:	fbb3 f3fc 	udiv	r3, r3, ip
 8014ae8:	fbb5 f2f6 	udiv	r2, r5, r6
 8014aec:	1ad3      	subs	r3, r2, r3
 8014aee:	4403      	add	r3, r0
 8014af0:	fb07 3315 	mls	r3, r7, r5, r3
 8014af4:	2099      	movs	r0, #153	; 0x99
 8014af6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8014afa:	f10c 0c02 	add.w	ip, ip, #2
 8014afe:	f103 0e01 	add.w	lr, r3, #1
 8014b02:	fbbc f7f0 	udiv	r7, ip, r0
 8014b06:	4378      	muls	r0, r7
 8014b08:	3002      	adds	r0, #2
 8014b0a:	f04f 0805 	mov.w	r8, #5
 8014b0e:	fbb0 f0f8 	udiv	r0, r0, r8
 8014b12:	ebae 0000 	sub.w	r0, lr, r0
 8014b16:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8014b1a:	45f4      	cmp	ip, lr
 8014b1c:	bf94      	ite	ls
 8014b1e:	f04f 0c02 	movls.w	ip, #2
 8014b22:	f06f 0c09 	mvnhi.w	ip, #9
 8014b26:	4467      	add	r7, ip
 8014b28:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8014b2c:	fb0c 5101 	mla	r1, ip, r1, r5
 8014b30:	2f01      	cmp	r7, #1
 8014b32:	bf98      	it	ls
 8014b34:	3101      	addls	r1, #1
 8014b36:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8014b3a:	d30c      	bcc.n	8014b56 <gmtime_r+0x126>
 8014b3c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014b40:	61e3      	str	r3, [r4, #28]
 8014b42:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8014b46:	2300      	movs	r3, #0
 8014b48:	60e0      	str	r0, [r4, #12]
 8014b4a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8014b4e:	6223      	str	r3, [r4, #32]
 8014b50:	4620      	mov	r0, r4
 8014b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b56:	f015 0f03 	tst.w	r5, #3
 8014b5a:	d102      	bne.n	8014b62 <gmtime_r+0x132>
 8014b5c:	fb06 5212 	mls	r2, r6, r2, r5
 8014b60:	b95a      	cbnz	r2, 8014b7a <gmtime_r+0x14a>
 8014b62:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8014b66:	fbb5 f2f6 	udiv	r2, r5, r6
 8014b6a:	fb06 5212 	mls	r2, r6, r2, r5
 8014b6e:	fab2 f282 	clz	r2, r2
 8014b72:	0952      	lsrs	r2, r2, #5
 8014b74:	333b      	adds	r3, #59	; 0x3b
 8014b76:	4413      	add	r3, r2
 8014b78:	e7e2      	b.n	8014b40 <gmtime_r+0x110>
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	e7fa      	b.n	8014b74 <gmtime_r+0x144>
 8014b7e:	bf00      	nop
 8014b80:	00015180 	.word	0x00015180
 8014b84:	00023ab1 	.word	0x00023ab1
 8014b88:	fffdc54f 	.word	0xfffdc54f
 8014b8c:	00023ab0 	.word	0x00023ab0

08014b90 <_isatty_r>:
 8014b90:	b538      	push	{r3, r4, r5, lr}
 8014b92:	4d06      	ldr	r5, [pc, #24]	; (8014bac <_isatty_r+0x1c>)
 8014b94:	2300      	movs	r3, #0
 8014b96:	4604      	mov	r4, r0
 8014b98:	4608      	mov	r0, r1
 8014b9a:	602b      	str	r3, [r5, #0]
 8014b9c:	f7ec f950 	bl	8000e40 <_isatty>
 8014ba0:	1c43      	adds	r3, r0, #1
 8014ba2:	d102      	bne.n	8014baa <_isatty_r+0x1a>
 8014ba4:	682b      	ldr	r3, [r5, #0]
 8014ba6:	b103      	cbz	r3, 8014baa <_isatty_r+0x1a>
 8014ba8:	6023      	str	r3, [r4, #0]
 8014baa:	bd38      	pop	{r3, r4, r5, pc}
 8014bac:	20000cbc 	.word	0x20000cbc

08014bb0 <labs>:
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	bfb8      	it	lt
 8014bb4:	4240      	neglt	r0, r0
 8014bb6:	4770      	bx	lr

08014bb8 <_lseek_r>:
 8014bb8:	b538      	push	{r3, r4, r5, lr}
 8014bba:	4d07      	ldr	r5, [pc, #28]	; (8014bd8 <_lseek_r+0x20>)
 8014bbc:	4604      	mov	r4, r0
 8014bbe:	4608      	mov	r0, r1
 8014bc0:	4611      	mov	r1, r2
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	602a      	str	r2, [r5, #0]
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	f7ec f945 	bl	8000e56 <_lseek>
 8014bcc:	1c43      	adds	r3, r0, #1
 8014bce:	d102      	bne.n	8014bd6 <_lseek_r+0x1e>
 8014bd0:	682b      	ldr	r3, [r5, #0]
 8014bd2:	b103      	cbz	r3, 8014bd6 <_lseek_r+0x1e>
 8014bd4:	6023      	str	r3, [r4, #0]
 8014bd6:	bd38      	pop	{r3, r4, r5, pc}
 8014bd8:	20000cbc 	.word	0x20000cbc

08014bdc <__ascii_mbtowc>:
 8014bdc:	b082      	sub	sp, #8
 8014bde:	b901      	cbnz	r1, 8014be2 <__ascii_mbtowc+0x6>
 8014be0:	a901      	add	r1, sp, #4
 8014be2:	b142      	cbz	r2, 8014bf6 <__ascii_mbtowc+0x1a>
 8014be4:	b14b      	cbz	r3, 8014bfa <__ascii_mbtowc+0x1e>
 8014be6:	7813      	ldrb	r3, [r2, #0]
 8014be8:	600b      	str	r3, [r1, #0]
 8014bea:	7812      	ldrb	r2, [r2, #0]
 8014bec:	1e10      	subs	r0, r2, #0
 8014bee:	bf18      	it	ne
 8014bf0:	2001      	movne	r0, #1
 8014bf2:	b002      	add	sp, #8
 8014bf4:	4770      	bx	lr
 8014bf6:	4610      	mov	r0, r2
 8014bf8:	e7fb      	b.n	8014bf2 <__ascii_mbtowc+0x16>
 8014bfa:	f06f 0001 	mvn.w	r0, #1
 8014bfe:	e7f8      	b.n	8014bf2 <__ascii_mbtowc+0x16>

08014c00 <__malloc_lock>:
 8014c00:	4801      	ldr	r0, [pc, #4]	; (8014c08 <__malloc_lock+0x8>)
 8014c02:	f7fe b9f8 	b.w	8012ff6 <__retarget_lock_acquire_recursive>
 8014c06:	bf00      	nop
 8014c08:	20000cb4 	.word	0x20000cb4

08014c0c <__malloc_unlock>:
 8014c0c:	4801      	ldr	r0, [pc, #4]	; (8014c14 <__malloc_unlock+0x8>)
 8014c0e:	f7fe b9f4 	b.w	8012ffa <__retarget_lock_release_recursive>
 8014c12:	bf00      	nop
 8014c14:	20000cb4 	.word	0x20000cb4

08014c18 <_realloc_r>:
 8014c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c1a:	4607      	mov	r7, r0
 8014c1c:	4614      	mov	r4, r2
 8014c1e:	460e      	mov	r6, r1
 8014c20:	b921      	cbnz	r1, 8014c2c <_realloc_r+0x14>
 8014c22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014c26:	4611      	mov	r1, r2
 8014c28:	f7fe bad2 	b.w	80131d0 <_malloc_r>
 8014c2c:	b922      	cbnz	r2, 8014c38 <_realloc_r+0x20>
 8014c2e:	f7fe fa7f 	bl	8013130 <_free_r>
 8014c32:	4625      	mov	r5, r4
 8014c34:	4628      	mov	r0, r5
 8014c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c38:	f000 fd66 	bl	8015708 <_malloc_usable_size_r>
 8014c3c:	42a0      	cmp	r0, r4
 8014c3e:	d20f      	bcs.n	8014c60 <_realloc_r+0x48>
 8014c40:	4621      	mov	r1, r4
 8014c42:	4638      	mov	r0, r7
 8014c44:	f7fe fac4 	bl	80131d0 <_malloc_r>
 8014c48:	4605      	mov	r5, r0
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	d0f2      	beq.n	8014c34 <_realloc_r+0x1c>
 8014c4e:	4631      	mov	r1, r6
 8014c50:	4622      	mov	r2, r4
 8014c52:	f7fe fa47 	bl	80130e4 <memcpy>
 8014c56:	4631      	mov	r1, r6
 8014c58:	4638      	mov	r0, r7
 8014c5a:	f7fe fa69 	bl	8013130 <_free_r>
 8014c5e:	e7e9      	b.n	8014c34 <_realloc_r+0x1c>
 8014c60:	4635      	mov	r5, r6
 8014c62:	e7e7      	b.n	8014c34 <_realloc_r+0x1c>

08014c64 <__ssputs_r>:
 8014c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c68:	688e      	ldr	r6, [r1, #8]
 8014c6a:	429e      	cmp	r6, r3
 8014c6c:	4682      	mov	sl, r0
 8014c6e:	460c      	mov	r4, r1
 8014c70:	4690      	mov	r8, r2
 8014c72:	461f      	mov	r7, r3
 8014c74:	d838      	bhi.n	8014ce8 <__ssputs_r+0x84>
 8014c76:	898a      	ldrh	r2, [r1, #12]
 8014c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014c7c:	d032      	beq.n	8014ce4 <__ssputs_r+0x80>
 8014c7e:	6825      	ldr	r5, [r4, #0]
 8014c80:	6909      	ldr	r1, [r1, #16]
 8014c82:	eba5 0901 	sub.w	r9, r5, r1
 8014c86:	6965      	ldr	r5, [r4, #20]
 8014c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014c90:	3301      	adds	r3, #1
 8014c92:	444b      	add	r3, r9
 8014c94:	106d      	asrs	r5, r5, #1
 8014c96:	429d      	cmp	r5, r3
 8014c98:	bf38      	it	cc
 8014c9a:	461d      	movcc	r5, r3
 8014c9c:	0553      	lsls	r3, r2, #21
 8014c9e:	d531      	bpl.n	8014d04 <__ssputs_r+0xa0>
 8014ca0:	4629      	mov	r1, r5
 8014ca2:	f7fe fa95 	bl	80131d0 <_malloc_r>
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	b950      	cbnz	r0, 8014cc0 <__ssputs_r+0x5c>
 8014caa:	230c      	movs	r3, #12
 8014cac:	f8ca 3000 	str.w	r3, [sl]
 8014cb0:	89a3      	ldrh	r3, [r4, #12]
 8014cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cb6:	81a3      	strh	r3, [r4, #12]
 8014cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8014cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cc0:	6921      	ldr	r1, [r4, #16]
 8014cc2:	464a      	mov	r2, r9
 8014cc4:	f7fe fa0e 	bl	80130e4 <memcpy>
 8014cc8:	89a3      	ldrh	r3, [r4, #12]
 8014cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014cd2:	81a3      	strh	r3, [r4, #12]
 8014cd4:	6126      	str	r6, [r4, #16]
 8014cd6:	6165      	str	r5, [r4, #20]
 8014cd8:	444e      	add	r6, r9
 8014cda:	eba5 0509 	sub.w	r5, r5, r9
 8014cde:	6026      	str	r6, [r4, #0]
 8014ce0:	60a5      	str	r5, [r4, #8]
 8014ce2:	463e      	mov	r6, r7
 8014ce4:	42be      	cmp	r6, r7
 8014ce6:	d900      	bls.n	8014cea <__ssputs_r+0x86>
 8014ce8:	463e      	mov	r6, r7
 8014cea:	4632      	mov	r2, r6
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	4641      	mov	r1, r8
 8014cf0:	f000 fcf0 	bl	80156d4 <memmove>
 8014cf4:	68a3      	ldr	r3, [r4, #8]
 8014cf6:	6822      	ldr	r2, [r4, #0]
 8014cf8:	1b9b      	subs	r3, r3, r6
 8014cfa:	4432      	add	r2, r6
 8014cfc:	60a3      	str	r3, [r4, #8]
 8014cfe:	6022      	str	r2, [r4, #0]
 8014d00:	2000      	movs	r0, #0
 8014d02:	e7db      	b.n	8014cbc <__ssputs_r+0x58>
 8014d04:	462a      	mov	r2, r5
 8014d06:	f7ff ff87 	bl	8014c18 <_realloc_r>
 8014d0a:	4606      	mov	r6, r0
 8014d0c:	2800      	cmp	r0, #0
 8014d0e:	d1e1      	bne.n	8014cd4 <__ssputs_r+0x70>
 8014d10:	6921      	ldr	r1, [r4, #16]
 8014d12:	4650      	mov	r0, sl
 8014d14:	f7fe fa0c 	bl	8013130 <_free_r>
 8014d18:	e7c7      	b.n	8014caa <__ssputs_r+0x46>
	...

08014d1c <_svfiprintf_r>:
 8014d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d20:	4698      	mov	r8, r3
 8014d22:	898b      	ldrh	r3, [r1, #12]
 8014d24:	061b      	lsls	r3, r3, #24
 8014d26:	b09d      	sub	sp, #116	; 0x74
 8014d28:	4607      	mov	r7, r0
 8014d2a:	460d      	mov	r5, r1
 8014d2c:	4614      	mov	r4, r2
 8014d2e:	d50e      	bpl.n	8014d4e <_svfiprintf_r+0x32>
 8014d30:	690b      	ldr	r3, [r1, #16]
 8014d32:	b963      	cbnz	r3, 8014d4e <_svfiprintf_r+0x32>
 8014d34:	2140      	movs	r1, #64	; 0x40
 8014d36:	f7fe fa4b 	bl	80131d0 <_malloc_r>
 8014d3a:	6028      	str	r0, [r5, #0]
 8014d3c:	6128      	str	r0, [r5, #16]
 8014d3e:	b920      	cbnz	r0, 8014d4a <_svfiprintf_r+0x2e>
 8014d40:	230c      	movs	r3, #12
 8014d42:	603b      	str	r3, [r7, #0]
 8014d44:	f04f 30ff 	mov.w	r0, #4294967295
 8014d48:	e0d1      	b.n	8014eee <_svfiprintf_r+0x1d2>
 8014d4a:	2340      	movs	r3, #64	; 0x40
 8014d4c:	616b      	str	r3, [r5, #20]
 8014d4e:	2300      	movs	r3, #0
 8014d50:	9309      	str	r3, [sp, #36]	; 0x24
 8014d52:	2320      	movs	r3, #32
 8014d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d5c:	2330      	movs	r3, #48	; 0x30
 8014d5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014f08 <_svfiprintf_r+0x1ec>
 8014d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d66:	f04f 0901 	mov.w	r9, #1
 8014d6a:	4623      	mov	r3, r4
 8014d6c:	469a      	mov	sl, r3
 8014d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d72:	b10a      	cbz	r2, 8014d78 <_svfiprintf_r+0x5c>
 8014d74:	2a25      	cmp	r2, #37	; 0x25
 8014d76:	d1f9      	bne.n	8014d6c <_svfiprintf_r+0x50>
 8014d78:	ebba 0b04 	subs.w	fp, sl, r4
 8014d7c:	d00b      	beq.n	8014d96 <_svfiprintf_r+0x7a>
 8014d7e:	465b      	mov	r3, fp
 8014d80:	4622      	mov	r2, r4
 8014d82:	4629      	mov	r1, r5
 8014d84:	4638      	mov	r0, r7
 8014d86:	f7ff ff6d 	bl	8014c64 <__ssputs_r>
 8014d8a:	3001      	adds	r0, #1
 8014d8c:	f000 80aa 	beq.w	8014ee4 <_svfiprintf_r+0x1c8>
 8014d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d92:	445a      	add	r2, fp
 8014d94:	9209      	str	r2, [sp, #36]	; 0x24
 8014d96:	f89a 3000 	ldrb.w	r3, [sl]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	f000 80a2 	beq.w	8014ee4 <_svfiprintf_r+0x1c8>
 8014da0:	2300      	movs	r3, #0
 8014da2:	f04f 32ff 	mov.w	r2, #4294967295
 8014da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014daa:	f10a 0a01 	add.w	sl, sl, #1
 8014dae:	9304      	str	r3, [sp, #16]
 8014db0:	9307      	str	r3, [sp, #28]
 8014db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014db6:	931a      	str	r3, [sp, #104]	; 0x68
 8014db8:	4654      	mov	r4, sl
 8014dba:	2205      	movs	r2, #5
 8014dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dc0:	4851      	ldr	r0, [pc, #324]	; (8014f08 <_svfiprintf_r+0x1ec>)
 8014dc2:	f7eb fa4d 	bl	8000260 <memchr>
 8014dc6:	9a04      	ldr	r2, [sp, #16]
 8014dc8:	b9d8      	cbnz	r0, 8014e02 <_svfiprintf_r+0xe6>
 8014dca:	06d0      	lsls	r0, r2, #27
 8014dcc:	bf44      	itt	mi
 8014dce:	2320      	movmi	r3, #32
 8014dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014dd4:	0711      	lsls	r1, r2, #28
 8014dd6:	bf44      	itt	mi
 8014dd8:	232b      	movmi	r3, #43	; 0x2b
 8014dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014dde:	f89a 3000 	ldrb.w	r3, [sl]
 8014de2:	2b2a      	cmp	r3, #42	; 0x2a
 8014de4:	d015      	beq.n	8014e12 <_svfiprintf_r+0xf6>
 8014de6:	9a07      	ldr	r2, [sp, #28]
 8014de8:	4654      	mov	r4, sl
 8014dea:	2000      	movs	r0, #0
 8014dec:	f04f 0c0a 	mov.w	ip, #10
 8014df0:	4621      	mov	r1, r4
 8014df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014df6:	3b30      	subs	r3, #48	; 0x30
 8014df8:	2b09      	cmp	r3, #9
 8014dfa:	d94e      	bls.n	8014e9a <_svfiprintf_r+0x17e>
 8014dfc:	b1b0      	cbz	r0, 8014e2c <_svfiprintf_r+0x110>
 8014dfe:	9207      	str	r2, [sp, #28]
 8014e00:	e014      	b.n	8014e2c <_svfiprintf_r+0x110>
 8014e02:	eba0 0308 	sub.w	r3, r0, r8
 8014e06:	fa09 f303 	lsl.w	r3, r9, r3
 8014e0a:	4313      	orrs	r3, r2
 8014e0c:	9304      	str	r3, [sp, #16]
 8014e0e:	46a2      	mov	sl, r4
 8014e10:	e7d2      	b.n	8014db8 <_svfiprintf_r+0x9c>
 8014e12:	9b03      	ldr	r3, [sp, #12]
 8014e14:	1d19      	adds	r1, r3, #4
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	9103      	str	r1, [sp, #12]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	bfbb      	ittet	lt
 8014e1e:	425b      	neglt	r3, r3
 8014e20:	f042 0202 	orrlt.w	r2, r2, #2
 8014e24:	9307      	strge	r3, [sp, #28]
 8014e26:	9307      	strlt	r3, [sp, #28]
 8014e28:	bfb8      	it	lt
 8014e2a:	9204      	strlt	r2, [sp, #16]
 8014e2c:	7823      	ldrb	r3, [r4, #0]
 8014e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8014e30:	d10c      	bne.n	8014e4c <_svfiprintf_r+0x130>
 8014e32:	7863      	ldrb	r3, [r4, #1]
 8014e34:	2b2a      	cmp	r3, #42	; 0x2a
 8014e36:	d135      	bne.n	8014ea4 <_svfiprintf_r+0x188>
 8014e38:	9b03      	ldr	r3, [sp, #12]
 8014e3a:	1d1a      	adds	r2, r3, #4
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	9203      	str	r2, [sp, #12]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	bfb8      	it	lt
 8014e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e48:	3402      	adds	r4, #2
 8014e4a:	9305      	str	r3, [sp, #20]
 8014e4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014f18 <_svfiprintf_r+0x1fc>
 8014e50:	7821      	ldrb	r1, [r4, #0]
 8014e52:	2203      	movs	r2, #3
 8014e54:	4650      	mov	r0, sl
 8014e56:	f7eb fa03 	bl	8000260 <memchr>
 8014e5a:	b140      	cbz	r0, 8014e6e <_svfiprintf_r+0x152>
 8014e5c:	2340      	movs	r3, #64	; 0x40
 8014e5e:	eba0 000a 	sub.w	r0, r0, sl
 8014e62:	fa03 f000 	lsl.w	r0, r3, r0
 8014e66:	9b04      	ldr	r3, [sp, #16]
 8014e68:	4303      	orrs	r3, r0
 8014e6a:	3401      	adds	r4, #1
 8014e6c:	9304      	str	r3, [sp, #16]
 8014e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e72:	4826      	ldr	r0, [pc, #152]	; (8014f0c <_svfiprintf_r+0x1f0>)
 8014e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e78:	2206      	movs	r2, #6
 8014e7a:	f7eb f9f1 	bl	8000260 <memchr>
 8014e7e:	2800      	cmp	r0, #0
 8014e80:	d038      	beq.n	8014ef4 <_svfiprintf_r+0x1d8>
 8014e82:	4b23      	ldr	r3, [pc, #140]	; (8014f10 <_svfiprintf_r+0x1f4>)
 8014e84:	bb1b      	cbnz	r3, 8014ece <_svfiprintf_r+0x1b2>
 8014e86:	9b03      	ldr	r3, [sp, #12]
 8014e88:	3307      	adds	r3, #7
 8014e8a:	f023 0307 	bic.w	r3, r3, #7
 8014e8e:	3308      	adds	r3, #8
 8014e90:	9303      	str	r3, [sp, #12]
 8014e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e94:	4433      	add	r3, r6
 8014e96:	9309      	str	r3, [sp, #36]	; 0x24
 8014e98:	e767      	b.n	8014d6a <_svfiprintf_r+0x4e>
 8014e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	2001      	movs	r0, #1
 8014ea2:	e7a5      	b.n	8014df0 <_svfiprintf_r+0xd4>
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	3401      	adds	r4, #1
 8014ea8:	9305      	str	r3, [sp, #20]
 8014eaa:	4619      	mov	r1, r3
 8014eac:	f04f 0c0a 	mov.w	ip, #10
 8014eb0:	4620      	mov	r0, r4
 8014eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014eb6:	3a30      	subs	r2, #48	; 0x30
 8014eb8:	2a09      	cmp	r2, #9
 8014eba:	d903      	bls.n	8014ec4 <_svfiprintf_r+0x1a8>
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d0c5      	beq.n	8014e4c <_svfiprintf_r+0x130>
 8014ec0:	9105      	str	r1, [sp, #20]
 8014ec2:	e7c3      	b.n	8014e4c <_svfiprintf_r+0x130>
 8014ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ec8:	4604      	mov	r4, r0
 8014eca:	2301      	movs	r3, #1
 8014ecc:	e7f0      	b.n	8014eb0 <_svfiprintf_r+0x194>
 8014ece:	ab03      	add	r3, sp, #12
 8014ed0:	9300      	str	r3, [sp, #0]
 8014ed2:	462a      	mov	r2, r5
 8014ed4:	4b0f      	ldr	r3, [pc, #60]	; (8014f14 <_svfiprintf_r+0x1f8>)
 8014ed6:	a904      	add	r1, sp, #16
 8014ed8:	4638      	mov	r0, r7
 8014eda:	f3af 8000 	nop.w
 8014ede:	1c42      	adds	r2, r0, #1
 8014ee0:	4606      	mov	r6, r0
 8014ee2:	d1d6      	bne.n	8014e92 <_svfiprintf_r+0x176>
 8014ee4:	89ab      	ldrh	r3, [r5, #12]
 8014ee6:	065b      	lsls	r3, r3, #25
 8014ee8:	f53f af2c 	bmi.w	8014d44 <_svfiprintf_r+0x28>
 8014eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014eee:	b01d      	add	sp, #116	; 0x74
 8014ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef4:	ab03      	add	r3, sp, #12
 8014ef6:	9300      	str	r3, [sp, #0]
 8014ef8:	462a      	mov	r2, r5
 8014efa:	4b06      	ldr	r3, [pc, #24]	; (8014f14 <_svfiprintf_r+0x1f8>)
 8014efc:	a904      	add	r1, sp, #16
 8014efe:	4638      	mov	r0, r7
 8014f00:	f000 f9d4 	bl	80152ac <_printf_i>
 8014f04:	e7eb      	b.n	8014ede <_svfiprintf_r+0x1c2>
 8014f06:	bf00      	nop
 8014f08:	080199d7 	.word	0x080199d7
 8014f0c:	080199e1 	.word	0x080199e1
 8014f10:	00000000 	.word	0x00000000
 8014f14:	08014c65 	.word	0x08014c65
 8014f18:	080199dd 	.word	0x080199dd

08014f1c <__sfputc_r>:
 8014f1c:	6893      	ldr	r3, [r2, #8]
 8014f1e:	3b01      	subs	r3, #1
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	b410      	push	{r4}
 8014f24:	6093      	str	r3, [r2, #8]
 8014f26:	da08      	bge.n	8014f3a <__sfputc_r+0x1e>
 8014f28:	6994      	ldr	r4, [r2, #24]
 8014f2a:	42a3      	cmp	r3, r4
 8014f2c:	db01      	blt.n	8014f32 <__sfputc_r+0x16>
 8014f2e:	290a      	cmp	r1, #10
 8014f30:	d103      	bne.n	8014f3a <__sfputc_r+0x1e>
 8014f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f36:	f7ff bb63 	b.w	8014600 <__swbuf_r>
 8014f3a:	6813      	ldr	r3, [r2, #0]
 8014f3c:	1c58      	adds	r0, r3, #1
 8014f3e:	6010      	str	r0, [r2, #0]
 8014f40:	7019      	strb	r1, [r3, #0]
 8014f42:	4608      	mov	r0, r1
 8014f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f48:	4770      	bx	lr

08014f4a <__sfputs_r>:
 8014f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f4c:	4606      	mov	r6, r0
 8014f4e:	460f      	mov	r7, r1
 8014f50:	4614      	mov	r4, r2
 8014f52:	18d5      	adds	r5, r2, r3
 8014f54:	42ac      	cmp	r4, r5
 8014f56:	d101      	bne.n	8014f5c <__sfputs_r+0x12>
 8014f58:	2000      	movs	r0, #0
 8014f5a:	e007      	b.n	8014f6c <__sfputs_r+0x22>
 8014f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f60:	463a      	mov	r2, r7
 8014f62:	4630      	mov	r0, r6
 8014f64:	f7ff ffda 	bl	8014f1c <__sfputc_r>
 8014f68:	1c43      	adds	r3, r0, #1
 8014f6a:	d1f3      	bne.n	8014f54 <__sfputs_r+0xa>
 8014f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014f70 <_vfiprintf_r>:
 8014f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f74:	460d      	mov	r5, r1
 8014f76:	b09d      	sub	sp, #116	; 0x74
 8014f78:	4614      	mov	r4, r2
 8014f7a:	4698      	mov	r8, r3
 8014f7c:	4606      	mov	r6, r0
 8014f7e:	b118      	cbz	r0, 8014f88 <_vfiprintf_r+0x18>
 8014f80:	6983      	ldr	r3, [r0, #24]
 8014f82:	b90b      	cbnz	r3, 8014f88 <_vfiprintf_r+0x18>
 8014f84:	f7fd fc84 	bl	8012890 <__sinit>
 8014f88:	4b89      	ldr	r3, [pc, #548]	; (80151b0 <_vfiprintf_r+0x240>)
 8014f8a:	429d      	cmp	r5, r3
 8014f8c:	d11b      	bne.n	8014fc6 <_vfiprintf_r+0x56>
 8014f8e:	6875      	ldr	r5, [r6, #4]
 8014f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f92:	07d9      	lsls	r1, r3, #31
 8014f94:	d405      	bmi.n	8014fa2 <_vfiprintf_r+0x32>
 8014f96:	89ab      	ldrh	r3, [r5, #12]
 8014f98:	059a      	lsls	r2, r3, #22
 8014f9a:	d402      	bmi.n	8014fa2 <_vfiprintf_r+0x32>
 8014f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f9e:	f7fe f82a 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 8014fa2:	89ab      	ldrh	r3, [r5, #12]
 8014fa4:	071b      	lsls	r3, r3, #28
 8014fa6:	d501      	bpl.n	8014fac <_vfiprintf_r+0x3c>
 8014fa8:	692b      	ldr	r3, [r5, #16]
 8014faa:	b9eb      	cbnz	r3, 8014fe8 <_vfiprintf_r+0x78>
 8014fac:	4629      	mov	r1, r5
 8014fae:	4630      	mov	r0, r6
 8014fb0:	f7ff fb8a 	bl	80146c8 <__swsetup_r>
 8014fb4:	b1c0      	cbz	r0, 8014fe8 <_vfiprintf_r+0x78>
 8014fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fb8:	07dc      	lsls	r4, r3, #31
 8014fba:	d50e      	bpl.n	8014fda <_vfiprintf_r+0x6a>
 8014fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fc0:	b01d      	add	sp, #116	; 0x74
 8014fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc6:	4b7b      	ldr	r3, [pc, #492]	; (80151b4 <_vfiprintf_r+0x244>)
 8014fc8:	429d      	cmp	r5, r3
 8014fca:	d101      	bne.n	8014fd0 <_vfiprintf_r+0x60>
 8014fcc:	68b5      	ldr	r5, [r6, #8]
 8014fce:	e7df      	b.n	8014f90 <_vfiprintf_r+0x20>
 8014fd0:	4b79      	ldr	r3, [pc, #484]	; (80151b8 <_vfiprintf_r+0x248>)
 8014fd2:	429d      	cmp	r5, r3
 8014fd4:	bf08      	it	eq
 8014fd6:	68f5      	ldreq	r5, [r6, #12]
 8014fd8:	e7da      	b.n	8014f90 <_vfiprintf_r+0x20>
 8014fda:	89ab      	ldrh	r3, [r5, #12]
 8014fdc:	0598      	lsls	r0, r3, #22
 8014fde:	d4ed      	bmi.n	8014fbc <_vfiprintf_r+0x4c>
 8014fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fe2:	f7fe f80a 	bl	8012ffa <__retarget_lock_release_recursive>
 8014fe6:	e7e9      	b.n	8014fbc <_vfiprintf_r+0x4c>
 8014fe8:	2300      	movs	r3, #0
 8014fea:	9309      	str	r3, [sp, #36]	; 0x24
 8014fec:	2320      	movs	r3, #32
 8014fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ff6:	2330      	movs	r3, #48	; 0x30
 8014ff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80151bc <_vfiprintf_r+0x24c>
 8014ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015000:	f04f 0901 	mov.w	r9, #1
 8015004:	4623      	mov	r3, r4
 8015006:	469a      	mov	sl, r3
 8015008:	f813 2b01 	ldrb.w	r2, [r3], #1
 801500c:	b10a      	cbz	r2, 8015012 <_vfiprintf_r+0xa2>
 801500e:	2a25      	cmp	r2, #37	; 0x25
 8015010:	d1f9      	bne.n	8015006 <_vfiprintf_r+0x96>
 8015012:	ebba 0b04 	subs.w	fp, sl, r4
 8015016:	d00b      	beq.n	8015030 <_vfiprintf_r+0xc0>
 8015018:	465b      	mov	r3, fp
 801501a:	4622      	mov	r2, r4
 801501c:	4629      	mov	r1, r5
 801501e:	4630      	mov	r0, r6
 8015020:	f7ff ff93 	bl	8014f4a <__sfputs_r>
 8015024:	3001      	adds	r0, #1
 8015026:	f000 80aa 	beq.w	801517e <_vfiprintf_r+0x20e>
 801502a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801502c:	445a      	add	r2, fp
 801502e:	9209      	str	r2, [sp, #36]	; 0x24
 8015030:	f89a 3000 	ldrb.w	r3, [sl]
 8015034:	2b00      	cmp	r3, #0
 8015036:	f000 80a2 	beq.w	801517e <_vfiprintf_r+0x20e>
 801503a:	2300      	movs	r3, #0
 801503c:	f04f 32ff 	mov.w	r2, #4294967295
 8015040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015044:	f10a 0a01 	add.w	sl, sl, #1
 8015048:	9304      	str	r3, [sp, #16]
 801504a:	9307      	str	r3, [sp, #28]
 801504c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015050:	931a      	str	r3, [sp, #104]	; 0x68
 8015052:	4654      	mov	r4, sl
 8015054:	2205      	movs	r2, #5
 8015056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801505a:	4858      	ldr	r0, [pc, #352]	; (80151bc <_vfiprintf_r+0x24c>)
 801505c:	f7eb f900 	bl	8000260 <memchr>
 8015060:	9a04      	ldr	r2, [sp, #16]
 8015062:	b9d8      	cbnz	r0, 801509c <_vfiprintf_r+0x12c>
 8015064:	06d1      	lsls	r1, r2, #27
 8015066:	bf44      	itt	mi
 8015068:	2320      	movmi	r3, #32
 801506a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801506e:	0713      	lsls	r3, r2, #28
 8015070:	bf44      	itt	mi
 8015072:	232b      	movmi	r3, #43	; 0x2b
 8015074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015078:	f89a 3000 	ldrb.w	r3, [sl]
 801507c:	2b2a      	cmp	r3, #42	; 0x2a
 801507e:	d015      	beq.n	80150ac <_vfiprintf_r+0x13c>
 8015080:	9a07      	ldr	r2, [sp, #28]
 8015082:	4654      	mov	r4, sl
 8015084:	2000      	movs	r0, #0
 8015086:	f04f 0c0a 	mov.w	ip, #10
 801508a:	4621      	mov	r1, r4
 801508c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015090:	3b30      	subs	r3, #48	; 0x30
 8015092:	2b09      	cmp	r3, #9
 8015094:	d94e      	bls.n	8015134 <_vfiprintf_r+0x1c4>
 8015096:	b1b0      	cbz	r0, 80150c6 <_vfiprintf_r+0x156>
 8015098:	9207      	str	r2, [sp, #28]
 801509a:	e014      	b.n	80150c6 <_vfiprintf_r+0x156>
 801509c:	eba0 0308 	sub.w	r3, r0, r8
 80150a0:	fa09 f303 	lsl.w	r3, r9, r3
 80150a4:	4313      	orrs	r3, r2
 80150a6:	9304      	str	r3, [sp, #16]
 80150a8:	46a2      	mov	sl, r4
 80150aa:	e7d2      	b.n	8015052 <_vfiprintf_r+0xe2>
 80150ac:	9b03      	ldr	r3, [sp, #12]
 80150ae:	1d19      	adds	r1, r3, #4
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	9103      	str	r1, [sp, #12]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	bfbb      	ittet	lt
 80150b8:	425b      	neglt	r3, r3
 80150ba:	f042 0202 	orrlt.w	r2, r2, #2
 80150be:	9307      	strge	r3, [sp, #28]
 80150c0:	9307      	strlt	r3, [sp, #28]
 80150c2:	bfb8      	it	lt
 80150c4:	9204      	strlt	r2, [sp, #16]
 80150c6:	7823      	ldrb	r3, [r4, #0]
 80150c8:	2b2e      	cmp	r3, #46	; 0x2e
 80150ca:	d10c      	bne.n	80150e6 <_vfiprintf_r+0x176>
 80150cc:	7863      	ldrb	r3, [r4, #1]
 80150ce:	2b2a      	cmp	r3, #42	; 0x2a
 80150d0:	d135      	bne.n	801513e <_vfiprintf_r+0x1ce>
 80150d2:	9b03      	ldr	r3, [sp, #12]
 80150d4:	1d1a      	adds	r2, r3, #4
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	9203      	str	r2, [sp, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	bfb8      	it	lt
 80150de:	f04f 33ff 	movlt.w	r3, #4294967295
 80150e2:	3402      	adds	r4, #2
 80150e4:	9305      	str	r3, [sp, #20]
 80150e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80151cc <_vfiprintf_r+0x25c>
 80150ea:	7821      	ldrb	r1, [r4, #0]
 80150ec:	2203      	movs	r2, #3
 80150ee:	4650      	mov	r0, sl
 80150f0:	f7eb f8b6 	bl	8000260 <memchr>
 80150f4:	b140      	cbz	r0, 8015108 <_vfiprintf_r+0x198>
 80150f6:	2340      	movs	r3, #64	; 0x40
 80150f8:	eba0 000a 	sub.w	r0, r0, sl
 80150fc:	fa03 f000 	lsl.w	r0, r3, r0
 8015100:	9b04      	ldr	r3, [sp, #16]
 8015102:	4303      	orrs	r3, r0
 8015104:	3401      	adds	r4, #1
 8015106:	9304      	str	r3, [sp, #16]
 8015108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801510c:	482c      	ldr	r0, [pc, #176]	; (80151c0 <_vfiprintf_r+0x250>)
 801510e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015112:	2206      	movs	r2, #6
 8015114:	f7eb f8a4 	bl	8000260 <memchr>
 8015118:	2800      	cmp	r0, #0
 801511a:	d03f      	beq.n	801519c <_vfiprintf_r+0x22c>
 801511c:	4b29      	ldr	r3, [pc, #164]	; (80151c4 <_vfiprintf_r+0x254>)
 801511e:	bb1b      	cbnz	r3, 8015168 <_vfiprintf_r+0x1f8>
 8015120:	9b03      	ldr	r3, [sp, #12]
 8015122:	3307      	adds	r3, #7
 8015124:	f023 0307 	bic.w	r3, r3, #7
 8015128:	3308      	adds	r3, #8
 801512a:	9303      	str	r3, [sp, #12]
 801512c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801512e:	443b      	add	r3, r7
 8015130:	9309      	str	r3, [sp, #36]	; 0x24
 8015132:	e767      	b.n	8015004 <_vfiprintf_r+0x94>
 8015134:	fb0c 3202 	mla	r2, ip, r2, r3
 8015138:	460c      	mov	r4, r1
 801513a:	2001      	movs	r0, #1
 801513c:	e7a5      	b.n	801508a <_vfiprintf_r+0x11a>
 801513e:	2300      	movs	r3, #0
 8015140:	3401      	adds	r4, #1
 8015142:	9305      	str	r3, [sp, #20]
 8015144:	4619      	mov	r1, r3
 8015146:	f04f 0c0a 	mov.w	ip, #10
 801514a:	4620      	mov	r0, r4
 801514c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015150:	3a30      	subs	r2, #48	; 0x30
 8015152:	2a09      	cmp	r2, #9
 8015154:	d903      	bls.n	801515e <_vfiprintf_r+0x1ee>
 8015156:	2b00      	cmp	r3, #0
 8015158:	d0c5      	beq.n	80150e6 <_vfiprintf_r+0x176>
 801515a:	9105      	str	r1, [sp, #20]
 801515c:	e7c3      	b.n	80150e6 <_vfiprintf_r+0x176>
 801515e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015162:	4604      	mov	r4, r0
 8015164:	2301      	movs	r3, #1
 8015166:	e7f0      	b.n	801514a <_vfiprintf_r+0x1da>
 8015168:	ab03      	add	r3, sp, #12
 801516a:	9300      	str	r3, [sp, #0]
 801516c:	462a      	mov	r2, r5
 801516e:	4b16      	ldr	r3, [pc, #88]	; (80151c8 <_vfiprintf_r+0x258>)
 8015170:	a904      	add	r1, sp, #16
 8015172:	4630      	mov	r0, r6
 8015174:	f3af 8000 	nop.w
 8015178:	4607      	mov	r7, r0
 801517a:	1c78      	adds	r0, r7, #1
 801517c:	d1d6      	bne.n	801512c <_vfiprintf_r+0x1bc>
 801517e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015180:	07d9      	lsls	r1, r3, #31
 8015182:	d405      	bmi.n	8015190 <_vfiprintf_r+0x220>
 8015184:	89ab      	ldrh	r3, [r5, #12]
 8015186:	059a      	lsls	r2, r3, #22
 8015188:	d402      	bmi.n	8015190 <_vfiprintf_r+0x220>
 801518a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801518c:	f7fd ff35 	bl	8012ffa <__retarget_lock_release_recursive>
 8015190:	89ab      	ldrh	r3, [r5, #12]
 8015192:	065b      	lsls	r3, r3, #25
 8015194:	f53f af12 	bmi.w	8014fbc <_vfiprintf_r+0x4c>
 8015198:	9809      	ldr	r0, [sp, #36]	; 0x24
 801519a:	e711      	b.n	8014fc0 <_vfiprintf_r+0x50>
 801519c:	ab03      	add	r3, sp, #12
 801519e:	9300      	str	r3, [sp, #0]
 80151a0:	462a      	mov	r2, r5
 80151a2:	4b09      	ldr	r3, [pc, #36]	; (80151c8 <_vfiprintf_r+0x258>)
 80151a4:	a904      	add	r1, sp, #16
 80151a6:	4630      	mov	r0, r6
 80151a8:	f000 f880 	bl	80152ac <_printf_i>
 80151ac:	e7e4      	b.n	8015178 <_vfiprintf_r+0x208>
 80151ae:	bf00      	nop
 80151b0:	08019458 	.word	0x08019458
 80151b4:	08019478 	.word	0x08019478
 80151b8:	08019438 	.word	0x08019438
 80151bc:	080199d7 	.word	0x080199d7
 80151c0:	080199e1 	.word	0x080199e1
 80151c4:	00000000 	.word	0x00000000
 80151c8:	08014f4b 	.word	0x08014f4b
 80151cc:	080199dd 	.word	0x080199dd

080151d0 <_printf_common>:
 80151d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151d4:	4616      	mov	r6, r2
 80151d6:	4699      	mov	r9, r3
 80151d8:	688a      	ldr	r2, [r1, #8]
 80151da:	690b      	ldr	r3, [r1, #16]
 80151dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80151e0:	4293      	cmp	r3, r2
 80151e2:	bfb8      	it	lt
 80151e4:	4613      	movlt	r3, r2
 80151e6:	6033      	str	r3, [r6, #0]
 80151e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80151ec:	4607      	mov	r7, r0
 80151ee:	460c      	mov	r4, r1
 80151f0:	b10a      	cbz	r2, 80151f6 <_printf_common+0x26>
 80151f2:	3301      	adds	r3, #1
 80151f4:	6033      	str	r3, [r6, #0]
 80151f6:	6823      	ldr	r3, [r4, #0]
 80151f8:	0699      	lsls	r1, r3, #26
 80151fa:	bf42      	ittt	mi
 80151fc:	6833      	ldrmi	r3, [r6, #0]
 80151fe:	3302      	addmi	r3, #2
 8015200:	6033      	strmi	r3, [r6, #0]
 8015202:	6825      	ldr	r5, [r4, #0]
 8015204:	f015 0506 	ands.w	r5, r5, #6
 8015208:	d106      	bne.n	8015218 <_printf_common+0x48>
 801520a:	f104 0a19 	add.w	sl, r4, #25
 801520e:	68e3      	ldr	r3, [r4, #12]
 8015210:	6832      	ldr	r2, [r6, #0]
 8015212:	1a9b      	subs	r3, r3, r2
 8015214:	42ab      	cmp	r3, r5
 8015216:	dc26      	bgt.n	8015266 <_printf_common+0x96>
 8015218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801521c:	1e13      	subs	r3, r2, #0
 801521e:	6822      	ldr	r2, [r4, #0]
 8015220:	bf18      	it	ne
 8015222:	2301      	movne	r3, #1
 8015224:	0692      	lsls	r2, r2, #26
 8015226:	d42b      	bmi.n	8015280 <_printf_common+0xb0>
 8015228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801522c:	4649      	mov	r1, r9
 801522e:	4638      	mov	r0, r7
 8015230:	47c0      	blx	r8
 8015232:	3001      	adds	r0, #1
 8015234:	d01e      	beq.n	8015274 <_printf_common+0xa4>
 8015236:	6823      	ldr	r3, [r4, #0]
 8015238:	68e5      	ldr	r5, [r4, #12]
 801523a:	6832      	ldr	r2, [r6, #0]
 801523c:	f003 0306 	and.w	r3, r3, #6
 8015240:	2b04      	cmp	r3, #4
 8015242:	bf08      	it	eq
 8015244:	1aad      	subeq	r5, r5, r2
 8015246:	68a3      	ldr	r3, [r4, #8]
 8015248:	6922      	ldr	r2, [r4, #16]
 801524a:	bf0c      	ite	eq
 801524c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015250:	2500      	movne	r5, #0
 8015252:	4293      	cmp	r3, r2
 8015254:	bfc4      	itt	gt
 8015256:	1a9b      	subgt	r3, r3, r2
 8015258:	18ed      	addgt	r5, r5, r3
 801525a:	2600      	movs	r6, #0
 801525c:	341a      	adds	r4, #26
 801525e:	42b5      	cmp	r5, r6
 8015260:	d11a      	bne.n	8015298 <_printf_common+0xc8>
 8015262:	2000      	movs	r0, #0
 8015264:	e008      	b.n	8015278 <_printf_common+0xa8>
 8015266:	2301      	movs	r3, #1
 8015268:	4652      	mov	r2, sl
 801526a:	4649      	mov	r1, r9
 801526c:	4638      	mov	r0, r7
 801526e:	47c0      	blx	r8
 8015270:	3001      	adds	r0, #1
 8015272:	d103      	bne.n	801527c <_printf_common+0xac>
 8015274:	f04f 30ff 	mov.w	r0, #4294967295
 8015278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801527c:	3501      	adds	r5, #1
 801527e:	e7c6      	b.n	801520e <_printf_common+0x3e>
 8015280:	18e1      	adds	r1, r4, r3
 8015282:	1c5a      	adds	r2, r3, #1
 8015284:	2030      	movs	r0, #48	; 0x30
 8015286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801528a:	4422      	add	r2, r4
 801528c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015294:	3302      	adds	r3, #2
 8015296:	e7c7      	b.n	8015228 <_printf_common+0x58>
 8015298:	2301      	movs	r3, #1
 801529a:	4622      	mov	r2, r4
 801529c:	4649      	mov	r1, r9
 801529e:	4638      	mov	r0, r7
 80152a0:	47c0      	blx	r8
 80152a2:	3001      	adds	r0, #1
 80152a4:	d0e6      	beq.n	8015274 <_printf_common+0xa4>
 80152a6:	3601      	adds	r6, #1
 80152a8:	e7d9      	b.n	801525e <_printf_common+0x8e>
	...

080152ac <_printf_i>:
 80152ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80152b0:	460c      	mov	r4, r1
 80152b2:	4691      	mov	r9, r2
 80152b4:	7e27      	ldrb	r7, [r4, #24]
 80152b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80152b8:	2f78      	cmp	r7, #120	; 0x78
 80152ba:	4680      	mov	r8, r0
 80152bc:	469a      	mov	sl, r3
 80152be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80152c2:	d807      	bhi.n	80152d4 <_printf_i+0x28>
 80152c4:	2f62      	cmp	r7, #98	; 0x62
 80152c6:	d80a      	bhi.n	80152de <_printf_i+0x32>
 80152c8:	2f00      	cmp	r7, #0
 80152ca:	f000 80d8 	beq.w	801547e <_printf_i+0x1d2>
 80152ce:	2f58      	cmp	r7, #88	; 0x58
 80152d0:	f000 80a3 	beq.w	801541a <_printf_i+0x16e>
 80152d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80152d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80152dc:	e03a      	b.n	8015354 <_printf_i+0xa8>
 80152de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80152e2:	2b15      	cmp	r3, #21
 80152e4:	d8f6      	bhi.n	80152d4 <_printf_i+0x28>
 80152e6:	a001      	add	r0, pc, #4	; (adr r0, 80152ec <_printf_i+0x40>)
 80152e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80152ec:	08015345 	.word	0x08015345
 80152f0:	08015359 	.word	0x08015359
 80152f4:	080152d5 	.word	0x080152d5
 80152f8:	080152d5 	.word	0x080152d5
 80152fc:	080152d5 	.word	0x080152d5
 8015300:	080152d5 	.word	0x080152d5
 8015304:	08015359 	.word	0x08015359
 8015308:	080152d5 	.word	0x080152d5
 801530c:	080152d5 	.word	0x080152d5
 8015310:	080152d5 	.word	0x080152d5
 8015314:	080152d5 	.word	0x080152d5
 8015318:	08015465 	.word	0x08015465
 801531c:	08015389 	.word	0x08015389
 8015320:	08015447 	.word	0x08015447
 8015324:	080152d5 	.word	0x080152d5
 8015328:	080152d5 	.word	0x080152d5
 801532c:	08015487 	.word	0x08015487
 8015330:	080152d5 	.word	0x080152d5
 8015334:	08015389 	.word	0x08015389
 8015338:	080152d5 	.word	0x080152d5
 801533c:	080152d5 	.word	0x080152d5
 8015340:	0801544f 	.word	0x0801544f
 8015344:	680b      	ldr	r3, [r1, #0]
 8015346:	1d1a      	adds	r2, r3, #4
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	600a      	str	r2, [r1, #0]
 801534c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015354:	2301      	movs	r3, #1
 8015356:	e0a3      	b.n	80154a0 <_printf_i+0x1f4>
 8015358:	6825      	ldr	r5, [r4, #0]
 801535a:	6808      	ldr	r0, [r1, #0]
 801535c:	062e      	lsls	r6, r5, #24
 801535e:	f100 0304 	add.w	r3, r0, #4
 8015362:	d50a      	bpl.n	801537a <_printf_i+0xce>
 8015364:	6805      	ldr	r5, [r0, #0]
 8015366:	600b      	str	r3, [r1, #0]
 8015368:	2d00      	cmp	r5, #0
 801536a:	da03      	bge.n	8015374 <_printf_i+0xc8>
 801536c:	232d      	movs	r3, #45	; 0x2d
 801536e:	426d      	negs	r5, r5
 8015370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015374:	485e      	ldr	r0, [pc, #376]	; (80154f0 <_printf_i+0x244>)
 8015376:	230a      	movs	r3, #10
 8015378:	e019      	b.n	80153ae <_printf_i+0x102>
 801537a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801537e:	6805      	ldr	r5, [r0, #0]
 8015380:	600b      	str	r3, [r1, #0]
 8015382:	bf18      	it	ne
 8015384:	b22d      	sxthne	r5, r5
 8015386:	e7ef      	b.n	8015368 <_printf_i+0xbc>
 8015388:	680b      	ldr	r3, [r1, #0]
 801538a:	6825      	ldr	r5, [r4, #0]
 801538c:	1d18      	adds	r0, r3, #4
 801538e:	6008      	str	r0, [r1, #0]
 8015390:	0628      	lsls	r0, r5, #24
 8015392:	d501      	bpl.n	8015398 <_printf_i+0xec>
 8015394:	681d      	ldr	r5, [r3, #0]
 8015396:	e002      	b.n	801539e <_printf_i+0xf2>
 8015398:	0669      	lsls	r1, r5, #25
 801539a:	d5fb      	bpl.n	8015394 <_printf_i+0xe8>
 801539c:	881d      	ldrh	r5, [r3, #0]
 801539e:	4854      	ldr	r0, [pc, #336]	; (80154f0 <_printf_i+0x244>)
 80153a0:	2f6f      	cmp	r7, #111	; 0x6f
 80153a2:	bf0c      	ite	eq
 80153a4:	2308      	moveq	r3, #8
 80153a6:	230a      	movne	r3, #10
 80153a8:	2100      	movs	r1, #0
 80153aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80153ae:	6866      	ldr	r6, [r4, #4]
 80153b0:	60a6      	str	r6, [r4, #8]
 80153b2:	2e00      	cmp	r6, #0
 80153b4:	bfa2      	ittt	ge
 80153b6:	6821      	ldrge	r1, [r4, #0]
 80153b8:	f021 0104 	bicge.w	r1, r1, #4
 80153bc:	6021      	strge	r1, [r4, #0]
 80153be:	b90d      	cbnz	r5, 80153c4 <_printf_i+0x118>
 80153c0:	2e00      	cmp	r6, #0
 80153c2:	d04d      	beq.n	8015460 <_printf_i+0x1b4>
 80153c4:	4616      	mov	r6, r2
 80153c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80153ca:	fb03 5711 	mls	r7, r3, r1, r5
 80153ce:	5dc7      	ldrb	r7, [r0, r7]
 80153d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80153d4:	462f      	mov	r7, r5
 80153d6:	42bb      	cmp	r3, r7
 80153d8:	460d      	mov	r5, r1
 80153da:	d9f4      	bls.n	80153c6 <_printf_i+0x11a>
 80153dc:	2b08      	cmp	r3, #8
 80153de:	d10b      	bne.n	80153f8 <_printf_i+0x14c>
 80153e0:	6823      	ldr	r3, [r4, #0]
 80153e2:	07df      	lsls	r7, r3, #31
 80153e4:	d508      	bpl.n	80153f8 <_printf_i+0x14c>
 80153e6:	6923      	ldr	r3, [r4, #16]
 80153e8:	6861      	ldr	r1, [r4, #4]
 80153ea:	4299      	cmp	r1, r3
 80153ec:	bfde      	ittt	le
 80153ee:	2330      	movle	r3, #48	; 0x30
 80153f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80153f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80153f8:	1b92      	subs	r2, r2, r6
 80153fa:	6122      	str	r2, [r4, #16]
 80153fc:	f8cd a000 	str.w	sl, [sp]
 8015400:	464b      	mov	r3, r9
 8015402:	aa03      	add	r2, sp, #12
 8015404:	4621      	mov	r1, r4
 8015406:	4640      	mov	r0, r8
 8015408:	f7ff fee2 	bl	80151d0 <_printf_common>
 801540c:	3001      	adds	r0, #1
 801540e:	d14c      	bne.n	80154aa <_printf_i+0x1fe>
 8015410:	f04f 30ff 	mov.w	r0, #4294967295
 8015414:	b004      	add	sp, #16
 8015416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801541a:	4835      	ldr	r0, [pc, #212]	; (80154f0 <_printf_i+0x244>)
 801541c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015420:	6823      	ldr	r3, [r4, #0]
 8015422:	680e      	ldr	r6, [r1, #0]
 8015424:	061f      	lsls	r7, r3, #24
 8015426:	f856 5b04 	ldr.w	r5, [r6], #4
 801542a:	600e      	str	r6, [r1, #0]
 801542c:	d514      	bpl.n	8015458 <_printf_i+0x1ac>
 801542e:	07d9      	lsls	r1, r3, #31
 8015430:	bf44      	itt	mi
 8015432:	f043 0320 	orrmi.w	r3, r3, #32
 8015436:	6023      	strmi	r3, [r4, #0]
 8015438:	b91d      	cbnz	r5, 8015442 <_printf_i+0x196>
 801543a:	6823      	ldr	r3, [r4, #0]
 801543c:	f023 0320 	bic.w	r3, r3, #32
 8015440:	6023      	str	r3, [r4, #0]
 8015442:	2310      	movs	r3, #16
 8015444:	e7b0      	b.n	80153a8 <_printf_i+0xfc>
 8015446:	6823      	ldr	r3, [r4, #0]
 8015448:	f043 0320 	orr.w	r3, r3, #32
 801544c:	6023      	str	r3, [r4, #0]
 801544e:	2378      	movs	r3, #120	; 0x78
 8015450:	4828      	ldr	r0, [pc, #160]	; (80154f4 <_printf_i+0x248>)
 8015452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015456:	e7e3      	b.n	8015420 <_printf_i+0x174>
 8015458:	065e      	lsls	r6, r3, #25
 801545a:	bf48      	it	mi
 801545c:	b2ad      	uxthmi	r5, r5
 801545e:	e7e6      	b.n	801542e <_printf_i+0x182>
 8015460:	4616      	mov	r6, r2
 8015462:	e7bb      	b.n	80153dc <_printf_i+0x130>
 8015464:	680b      	ldr	r3, [r1, #0]
 8015466:	6826      	ldr	r6, [r4, #0]
 8015468:	6960      	ldr	r0, [r4, #20]
 801546a:	1d1d      	adds	r5, r3, #4
 801546c:	600d      	str	r5, [r1, #0]
 801546e:	0635      	lsls	r5, r6, #24
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	d501      	bpl.n	8015478 <_printf_i+0x1cc>
 8015474:	6018      	str	r0, [r3, #0]
 8015476:	e002      	b.n	801547e <_printf_i+0x1d2>
 8015478:	0671      	lsls	r1, r6, #25
 801547a:	d5fb      	bpl.n	8015474 <_printf_i+0x1c8>
 801547c:	8018      	strh	r0, [r3, #0]
 801547e:	2300      	movs	r3, #0
 8015480:	6123      	str	r3, [r4, #16]
 8015482:	4616      	mov	r6, r2
 8015484:	e7ba      	b.n	80153fc <_printf_i+0x150>
 8015486:	680b      	ldr	r3, [r1, #0]
 8015488:	1d1a      	adds	r2, r3, #4
 801548a:	600a      	str	r2, [r1, #0]
 801548c:	681e      	ldr	r6, [r3, #0]
 801548e:	6862      	ldr	r2, [r4, #4]
 8015490:	2100      	movs	r1, #0
 8015492:	4630      	mov	r0, r6
 8015494:	f7ea fee4 	bl	8000260 <memchr>
 8015498:	b108      	cbz	r0, 801549e <_printf_i+0x1f2>
 801549a:	1b80      	subs	r0, r0, r6
 801549c:	6060      	str	r0, [r4, #4]
 801549e:	6863      	ldr	r3, [r4, #4]
 80154a0:	6123      	str	r3, [r4, #16]
 80154a2:	2300      	movs	r3, #0
 80154a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154a8:	e7a8      	b.n	80153fc <_printf_i+0x150>
 80154aa:	6923      	ldr	r3, [r4, #16]
 80154ac:	4632      	mov	r2, r6
 80154ae:	4649      	mov	r1, r9
 80154b0:	4640      	mov	r0, r8
 80154b2:	47d0      	blx	sl
 80154b4:	3001      	adds	r0, #1
 80154b6:	d0ab      	beq.n	8015410 <_printf_i+0x164>
 80154b8:	6823      	ldr	r3, [r4, #0]
 80154ba:	079b      	lsls	r3, r3, #30
 80154bc:	d413      	bmi.n	80154e6 <_printf_i+0x23a>
 80154be:	68e0      	ldr	r0, [r4, #12]
 80154c0:	9b03      	ldr	r3, [sp, #12]
 80154c2:	4298      	cmp	r0, r3
 80154c4:	bfb8      	it	lt
 80154c6:	4618      	movlt	r0, r3
 80154c8:	e7a4      	b.n	8015414 <_printf_i+0x168>
 80154ca:	2301      	movs	r3, #1
 80154cc:	4632      	mov	r2, r6
 80154ce:	4649      	mov	r1, r9
 80154d0:	4640      	mov	r0, r8
 80154d2:	47d0      	blx	sl
 80154d4:	3001      	adds	r0, #1
 80154d6:	d09b      	beq.n	8015410 <_printf_i+0x164>
 80154d8:	3501      	adds	r5, #1
 80154da:	68e3      	ldr	r3, [r4, #12]
 80154dc:	9903      	ldr	r1, [sp, #12]
 80154de:	1a5b      	subs	r3, r3, r1
 80154e0:	42ab      	cmp	r3, r5
 80154e2:	dcf2      	bgt.n	80154ca <_printf_i+0x21e>
 80154e4:	e7eb      	b.n	80154be <_printf_i+0x212>
 80154e6:	2500      	movs	r5, #0
 80154e8:	f104 0619 	add.w	r6, r4, #25
 80154ec:	e7f5      	b.n	80154da <_printf_i+0x22e>
 80154ee:	bf00      	nop
 80154f0:	080199e8 	.word	0x080199e8
 80154f4:	080199f9 	.word	0x080199f9

080154f8 <_putc_r>:
 80154f8:	b570      	push	{r4, r5, r6, lr}
 80154fa:	460d      	mov	r5, r1
 80154fc:	4614      	mov	r4, r2
 80154fe:	4606      	mov	r6, r0
 8015500:	b118      	cbz	r0, 801550a <_putc_r+0x12>
 8015502:	6983      	ldr	r3, [r0, #24]
 8015504:	b90b      	cbnz	r3, 801550a <_putc_r+0x12>
 8015506:	f7fd f9c3 	bl	8012890 <__sinit>
 801550a:	4b1c      	ldr	r3, [pc, #112]	; (801557c <_putc_r+0x84>)
 801550c:	429c      	cmp	r4, r3
 801550e:	d124      	bne.n	801555a <_putc_r+0x62>
 8015510:	6874      	ldr	r4, [r6, #4]
 8015512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015514:	07d8      	lsls	r0, r3, #31
 8015516:	d405      	bmi.n	8015524 <_putc_r+0x2c>
 8015518:	89a3      	ldrh	r3, [r4, #12]
 801551a:	0599      	lsls	r1, r3, #22
 801551c:	d402      	bmi.n	8015524 <_putc_r+0x2c>
 801551e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015520:	f7fd fd69 	bl	8012ff6 <__retarget_lock_acquire_recursive>
 8015524:	68a3      	ldr	r3, [r4, #8]
 8015526:	3b01      	subs	r3, #1
 8015528:	2b00      	cmp	r3, #0
 801552a:	60a3      	str	r3, [r4, #8]
 801552c:	da05      	bge.n	801553a <_putc_r+0x42>
 801552e:	69a2      	ldr	r2, [r4, #24]
 8015530:	4293      	cmp	r3, r2
 8015532:	db1c      	blt.n	801556e <_putc_r+0x76>
 8015534:	b2eb      	uxtb	r3, r5
 8015536:	2b0a      	cmp	r3, #10
 8015538:	d019      	beq.n	801556e <_putc_r+0x76>
 801553a:	6823      	ldr	r3, [r4, #0]
 801553c:	1c5a      	adds	r2, r3, #1
 801553e:	6022      	str	r2, [r4, #0]
 8015540:	701d      	strb	r5, [r3, #0]
 8015542:	b2ed      	uxtb	r5, r5
 8015544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015546:	07da      	lsls	r2, r3, #31
 8015548:	d405      	bmi.n	8015556 <_putc_r+0x5e>
 801554a:	89a3      	ldrh	r3, [r4, #12]
 801554c:	059b      	lsls	r3, r3, #22
 801554e:	d402      	bmi.n	8015556 <_putc_r+0x5e>
 8015550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015552:	f7fd fd52 	bl	8012ffa <__retarget_lock_release_recursive>
 8015556:	4628      	mov	r0, r5
 8015558:	bd70      	pop	{r4, r5, r6, pc}
 801555a:	4b09      	ldr	r3, [pc, #36]	; (8015580 <_putc_r+0x88>)
 801555c:	429c      	cmp	r4, r3
 801555e:	d101      	bne.n	8015564 <_putc_r+0x6c>
 8015560:	68b4      	ldr	r4, [r6, #8]
 8015562:	e7d6      	b.n	8015512 <_putc_r+0x1a>
 8015564:	4b07      	ldr	r3, [pc, #28]	; (8015584 <_putc_r+0x8c>)
 8015566:	429c      	cmp	r4, r3
 8015568:	bf08      	it	eq
 801556a:	68f4      	ldreq	r4, [r6, #12]
 801556c:	e7d1      	b.n	8015512 <_putc_r+0x1a>
 801556e:	4629      	mov	r1, r5
 8015570:	4622      	mov	r2, r4
 8015572:	4630      	mov	r0, r6
 8015574:	f7ff f844 	bl	8014600 <__swbuf_r>
 8015578:	4605      	mov	r5, r0
 801557a:	e7e3      	b.n	8015544 <_putc_r+0x4c>
 801557c:	08019458 	.word	0x08019458
 8015580:	08019478 	.word	0x08019478
 8015584:	08019438 	.word	0x08019438

08015588 <_read_r>:
 8015588:	b538      	push	{r3, r4, r5, lr}
 801558a:	4d07      	ldr	r5, [pc, #28]	; (80155a8 <_read_r+0x20>)
 801558c:	4604      	mov	r4, r0
 801558e:	4608      	mov	r0, r1
 8015590:	4611      	mov	r1, r2
 8015592:	2200      	movs	r2, #0
 8015594:	602a      	str	r2, [r5, #0]
 8015596:	461a      	mov	r2, r3
 8015598:	f7eb fbfd 	bl	8000d96 <_read>
 801559c:	1c43      	adds	r3, r0, #1
 801559e:	d102      	bne.n	80155a6 <_read_r+0x1e>
 80155a0:	682b      	ldr	r3, [r5, #0]
 80155a2:	b103      	cbz	r3, 80155a6 <_read_r+0x1e>
 80155a4:	6023      	str	r3, [r4, #0]
 80155a6:	bd38      	pop	{r3, r4, r5, pc}
 80155a8:	20000cbc 	.word	0x20000cbc

080155ac <sniprintf>:
 80155ac:	b40c      	push	{r2, r3}
 80155ae:	b530      	push	{r4, r5, lr}
 80155b0:	4b17      	ldr	r3, [pc, #92]	; (8015610 <sniprintf+0x64>)
 80155b2:	1e0c      	subs	r4, r1, #0
 80155b4:	681d      	ldr	r5, [r3, #0]
 80155b6:	b09d      	sub	sp, #116	; 0x74
 80155b8:	da08      	bge.n	80155cc <sniprintf+0x20>
 80155ba:	238b      	movs	r3, #139	; 0x8b
 80155bc:	602b      	str	r3, [r5, #0]
 80155be:	f04f 30ff 	mov.w	r0, #4294967295
 80155c2:	b01d      	add	sp, #116	; 0x74
 80155c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155c8:	b002      	add	sp, #8
 80155ca:	4770      	bx	lr
 80155cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80155d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80155d4:	bf14      	ite	ne
 80155d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80155da:	4623      	moveq	r3, r4
 80155dc:	9304      	str	r3, [sp, #16]
 80155de:	9307      	str	r3, [sp, #28]
 80155e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155e4:	9002      	str	r0, [sp, #8]
 80155e6:	9006      	str	r0, [sp, #24]
 80155e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80155ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80155ee:	ab21      	add	r3, sp, #132	; 0x84
 80155f0:	a902      	add	r1, sp, #8
 80155f2:	4628      	mov	r0, r5
 80155f4:	9301      	str	r3, [sp, #4]
 80155f6:	f7ff fb91 	bl	8014d1c <_svfiprintf_r>
 80155fa:	1c43      	adds	r3, r0, #1
 80155fc:	bfbc      	itt	lt
 80155fe:	238b      	movlt	r3, #139	; 0x8b
 8015600:	602b      	strlt	r3, [r5, #0]
 8015602:	2c00      	cmp	r4, #0
 8015604:	d0dd      	beq.n	80155c2 <sniprintf+0x16>
 8015606:	9b02      	ldr	r3, [sp, #8]
 8015608:	2200      	movs	r2, #0
 801560a:	701a      	strb	r2, [r3, #0]
 801560c:	e7d9      	b.n	80155c2 <sniprintf+0x16>
 801560e:	bf00      	nop
 8015610:	20000100 	.word	0x20000100

08015614 <siscanf>:
 8015614:	b40e      	push	{r1, r2, r3}
 8015616:	b510      	push	{r4, lr}
 8015618:	b09f      	sub	sp, #124	; 0x7c
 801561a:	ac21      	add	r4, sp, #132	; 0x84
 801561c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015620:	f854 2b04 	ldr.w	r2, [r4], #4
 8015624:	9201      	str	r2, [sp, #4]
 8015626:	f8ad 101c 	strh.w	r1, [sp, #28]
 801562a:	9004      	str	r0, [sp, #16]
 801562c:	9008      	str	r0, [sp, #32]
 801562e:	f7ea fe05 	bl	800023c <strlen>
 8015632:	4b0c      	ldr	r3, [pc, #48]	; (8015664 <siscanf+0x50>)
 8015634:	9005      	str	r0, [sp, #20]
 8015636:	9009      	str	r0, [sp, #36]	; 0x24
 8015638:	930d      	str	r3, [sp, #52]	; 0x34
 801563a:	480b      	ldr	r0, [pc, #44]	; (8015668 <siscanf+0x54>)
 801563c:	9a01      	ldr	r2, [sp, #4]
 801563e:	6800      	ldr	r0, [r0, #0]
 8015640:	9403      	str	r4, [sp, #12]
 8015642:	2300      	movs	r3, #0
 8015644:	9311      	str	r3, [sp, #68]	; 0x44
 8015646:	9316      	str	r3, [sp, #88]	; 0x58
 8015648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801564c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015650:	a904      	add	r1, sp, #16
 8015652:	4623      	mov	r3, r4
 8015654:	f000 f8ba 	bl	80157cc <__ssvfiscanf_r>
 8015658:	b01f      	add	sp, #124	; 0x7c
 801565a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801565e:	b003      	add	sp, #12
 8015660:	4770      	bx	lr
 8015662:	bf00      	nop
 8015664:	0801348b 	.word	0x0801348b
 8015668:	20000100 	.word	0x20000100

0801566c <strcpy>:
 801566c:	4603      	mov	r3, r0
 801566e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015672:	f803 2b01 	strb.w	r2, [r3], #1
 8015676:	2a00      	cmp	r2, #0
 8015678:	d1f9      	bne.n	801566e <strcpy+0x2>
 801567a:	4770      	bx	lr

0801567c <strncmp>:
 801567c:	b510      	push	{r4, lr}
 801567e:	b16a      	cbz	r2, 801569c <strncmp+0x20>
 8015680:	3901      	subs	r1, #1
 8015682:	1884      	adds	r4, r0, r2
 8015684:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015688:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801568c:	4293      	cmp	r3, r2
 801568e:	d103      	bne.n	8015698 <strncmp+0x1c>
 8015690:	42a0      	cmp	r0, r4
 8015692:	d001      	beq.n	8015698 <strncmp+0x1c>
 8015694:	2b00      	cmp	r3, #0
 8015696:	d1f5      	bne.n	8015684 <strncmp+0x8>
 8015698:	1a98      	subs	r0, r3, r2
 801569a:	bd10      	pop	{r4, pc}
 801569c:	4610      	mov	r0, r2
 801569e:	e7fc      	b.n	801569a <strncmp+0x1e>

080156a0 <__ascii_wctomb>:
 80156a0:	b149      	cbz	r1, 80156b6 <__ascii_wctomb+0x16>
 80156a2:	2aff      	cmp	r2, #255	; 0xff
 80156a4:	bf85      	ittet	hi
 80156a6:	238a      	movhi	r3, #138	; 0x8a
 80156a8:	6003      	strhi	r3, [r0, #0]
 80156aa:	700a      	strbls	r2, [r1, #0]
 80156ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80156b0:	bf98      	it	ls
 80156b2:	2001      	movls	r0, #1
 80156b4:	4770      	bx	lr
 80156b6:	4608      	mov	r0, r1
 80156b8:	4770      	bx	lr
	...

080156bc <__env_lock>:
 80156bc:	4801      	ldr	r0, [pc, #4]	; (80156c4 <__env_lock+0x8>)
 80156be:	f7fd bc9a 	b.w	8012ff6 <__retarget_lock_acquire_recursive>
 80156c2:	bf00      	nop
 80156c4:	20000cb2 	.word	0x20000cb2

080156c8 <__env_unlock>:
 80156c8:	4801      	ldr	r0, [pc, #4]	; (80156d0 <__env_unlock+0x8>)
 80156ca:	f7fd bc96 	b.w	8012ffa <__retarget_lock_release_recursive>
 80156ce:	bf00      	nop
 80156d0:	20000cb2 	.word	0x20000cb2

080156d4 <memmove>:
 80156d4:	4288      	cmp	r0, r1
 80156d6:	b510      	push	{r4, lr}
 80156d8:	eb01 0402 	add.w	r4, r1, r2
 80156dc:	d902      	bls.n	80156e4 <memmove+0x10>
 80156de:	4284      	cmp	r4, r0
 80156e0:	4623      	mov	r3, r4
 80156e2:	d807      	bhi.n	80156f4 <memmove+0x20>
 80156e4:	1e43      	subs	r3, r0, #1
 80156e6:	42a1      	cmp	r1, r4
 80156e8:	d008      	beq.n	80156fc <memmove+0x28>
 80156ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80156f2:	e7f8      	b.n	80156e6 <memmove+0x12>
 80156f4:	4402      	add	r2, r0
 80156f6:	4601      	mov	r1, r0
 80156f8:	428a      	cmp	r2, r1
 80156fa:	d100      	bne.n	80156fe <memmove+0x2a>
 80156fc:	bd10      	pop	{r4, pc}
 80156fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015706:	e7f7      	b.n	80156f8 <memmove+0x24>

08015708 <_malloc_usable_size_r>:
 8015708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801570c:	1f18      	subs	r0, r3, #4
 801570e:	2b00      	cmp	r3, #0
 8015710:	bfbc      	itt	lt
 8015712:	580b      	ldrlt	r3, [r1, r0]
 8015714:	18c0      	addlt	r0, r0, r3
 8015716:	4770      	bx	lr

08015718 <_sungetc_r>:
 8015718:	b538      	push	{r3, r4, r5, lr}
 801571a:	1c4b      	adds	r3, r1, #1
 801571c:	4614      	mov	r4, r2
 801571e:	d103      	bne.n	8015728 <_sungetc_r+0x10>
 8015720:	f04f 35ff 	mov.w	r5, #4294967295
 8015724:	4628      	mov	r0, r5
 8015726:	bd38      	pop	{r3, r4, r5, pc}
 8015728:	8993      	ldrh	r3, [r2, #12]
 801572a:	f023 0320 	bic.w	r3, r3, #32
 801572e:	8193      	strh	r3, [r2, #12]
 8015730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015732:	6852      	ldr	r2, [r2, #4]
 8015734:	b2cd      	uxtb	r5, r1
 8015736:	b18b      	cbz	r3, 801575c <_sungetc_r+0x44>
 8015738:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801573a:	4293      	cmp	r3, r2
 801573c:	dd08      	ble.n	8015750 <_sungetc_r+0x38>
 801573e:	6823      	ldr	r3, [r4, #0]
 8015740:	1e5a      	subs	r2, r3, #1
 8015742:	6022      	str	r2, [r4, #0]
 8015744:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015748:	6863      	ldr	r3, [r4, #4]
 801574a:	3301      	adds	r3, #1
 801574c:	6063      	str	r3, [r4, #4]
 801574e:	e7e9      	b.n	8015724 <_sungetc_r+0xc>
 8015750:	4621      	mov	r1, r4
 8015752:	f000 fbbf 	bl	8015ed4 <__submore>
 8015756:	2800      	cmp	r0, #0
 8015758:	d0f1      	beq.n	801573e <_sungetc_r+0x26>
 801575a:	e7e1      	b.n	8015720 <_sungetc_r+0x8>
 801575c:	6921      	ldr	r1, [r4, #16]
 801575e:	6823      	ldr	r3, [r4, #0]
 8015760:	b151      	cbz	r1, 8015778 <_sungetc_r+0x60>
 8015762:	4299      	cmp	r1, r3
 8015764:	d208      	bcs.n	8015778 <_sungetc_r+0x60>
 8015766:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801576a:	42a9      	cmp	r1, r5
 801576c:	d104      	bne.n	8015778 <_sungetc_r+0x60>
 801576e:	3b01      	subs	r3, #1
 8015770:	3201      	adds	r2, #1
 8015772:	6023      	str	r3, [r4, #0]
 8015774:	6062      	str	r2, [r4, #4]
 8015776:	e7d5      	b.n	8015724 <_sungetc_r+0xc>
 8015778:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801577c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015780:	6363      	str	r3, [r4, #52]	; 0x34
 8015782:	2303      	movs	r3, #3
 8015784:	63a3      	str	r3, [r4, #56]	; 0x38
 8015786:	4623      	mov	r3, r4
 8015788:	f803 5f46 	strb.w	r5, [r3, #70]!
 801578c:	6023      	str	r3, [r4, #0]
 801578e:	2301      	movs	r3, #1
 8015790:	e7dc      	b.n	801574c <_sungetc_r+0x34>

08015792 <__ssrefill_r>:
 8015792:	b510      	push	{r4, lr}
 8015794:	460c      	mov	r4, r1
 8015796:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015798:	b169      	cbz	r1, 80157b6 <__ssrefill_r+0x24>
 801579a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801579e:	4299      	cmp	r1, r3
 80157a0:	d001      	beq.n	80157a6 <__ssrefill_r+0x14>
 80157a2:	f7fd fcc5 	bl	8013130 <_free_r>
 80157a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157a8:	6063      	str	r3, [r4, #4]
 80157aa:	2000      	movs	r0, #0
 80157ac:	6360      	str	r0, [r4, #52]	; 0x34
 80157ae:	b113      	cbz	r3, 80157b6 <__ssrefill_r+0x24>
 80157b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80157b2:	6023      	str	r3, [r4, #0]
 80157b4:	bd10      	pop	{r4, pc}
 80157b6:	6923      	ldr	r3, [r4, #16]
 80157b8:	6023      	str	r3, [r4, #0]
 80157ba:	2300      	movs	r3, #0
 80157bc:	6063      	str	r3, [r4, #4]
 80157be:	89a3      	ldrh	r3, [r4, #12]
 80157c0:	f043 0320 	orr.w	r3, r3, #32
 80157c4:	81a3      	strh	r3, [r4, #12]
 80157c6:	f04f 30ff 	mov.w	r0, #4294967295
 80157ca:	e7f3      	b.n	80157b4 <__ssrefill_r+0x22>

080157cc <__ssvfiscanf_r>:
 80157cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d0:	460c      	mov	r4, r1
 80157d2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80157d6:	2100      	movs	r1, #0
 80157d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80157dc:	49b2      	ldr	r1, [pc, #712]	; (8015aa8 <__ssvfiscanf_r+0x2dc>)
 80157de:	91a0      	str	r1, [sp, #640]	; 0x280
 80157e0:	f10d 0804 	add.w	r8, sp, #4
 80157e4:	49b1      	ldr	r1, [pc, #708]	; (8015aac <__ssvfiscanf_r+0x2e0>)
 80157e6:	4fb2      	ldr	r7, [pc, #712]	; (8015ab0 <__ssvfiscanf_r+0x2e4>)
 80157e8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8015ab4 <__ssvfiscanf_r+0x2e8>
 80157ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80157f0:	4606      	mov	r6, r0
 80157f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80157f4:	9300      	str	r3, [sp, #0]
 80157f6:	f892 a000 	ldrb.w	sl, [r2]
 80157fa:	f1ba 0f00 	cmp.w	sl, #0
 80157fe:	f000 8151 	beq.w	8015aa4 <__ssvfiscanf_r+0x2d8>
 8015802:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8015806:	f013 0308 	ands.w	r3, r3, #8
 801580a:	f102 0501 	add.w	r5, r2, #1
 801580e:	d019      	beq.n	8015844 <__ssvfiscanf_r+0x78>
 8015810:	6863      	ldr	r3, [r4, #4]
 8015812:	2b00      	cmp	r3, #0
 8015814:	dd0f      	ble.n	8015836 <__ssvfiscanf_r+0x6a>
 8015816:	6823      	ldr	r3, [r4, #0]
 8015818:	781a      	ldrb	r2, [r3, #0]
 801581a:	5cba      	ldrb	r2, [r7, r2]
 801581c:	0712      	lsls	r2, r2, #28
 801581e:	d401      	bmi.n	8015824 <__ssvfiscanf_r+0x58>
 8015820:	462a      	mov	r2, r5
 8015822:	e7e8      	b.n	80157f6 <__ssvfiscanf_r+0x2a>
 8015824:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015826:	3201      	adds	r2, #1
 8015828:	9245      	str	r2, [sp, #276]	; 0x114
 801582a:	6862      	ldr	r2, [r4, #4]
 801582c:	3301      	adds	r3, #1
 801582e:	3a01      	subs	r2, #1
 8015830:	6062      	str	r2, [r4, #4]
 8015832:	6023      	str	r3, [r4, #0]
 8015834:	e7ec      	b.n	8015810 <__ssvfiscanf_r+0x44>
 8015836:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015838:	4621      	mov	r1, r4
 801583a:	4630      	mov	r0, r6
 801583c:	4798      	blx	r3
 801583e:	2800      	cmp	r0, #0
 8015840:	d0e9      	beq.n	8015816 <__ssvfiscanf_r+0x4a>
 8015842:	e7ed      	b.n	8015820 <__ssvfiscanf_r+0x54>
 8015844:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8015848:	f040 8083 	bne.w	8015952 <__ssvfiscanf_r+0x186>
 801584c:	9341      	str	r3, [sp, #260]	; 0x104
 801584e:	9343      	str	r3, [sp, #268]	; 0x10c
 8015850:	7853      	ldrb	r3, [r2, #1]
 8015852:	2b2a      	cmp	r3, #42	; 0x2a
 8015854:	bf02      	ittt	eq
 8015856:	2310      	moveq	r3, #16
 8015858:	1c95      	addeq	r5, r2, #2
 801585a:	9341      	streq	r3, [sp, #260]	; 0x104
 801585c:	220a      	movs	r2, #10
 801585e:	46ab      	mov	fp, r5
 8015860:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8015864:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015868:	2b09      	cmp	r3, #9
 801586a:	d91d      	bls.n	80158a8 <__ssvfiscanf_r+0xdc>
 801586c:	4891      	ldr	r0, [pc, #580]	; (8015ab4 <__ssvfiscanf_r+0x2e8>)
 801586e:	2203      	movs	r2, #3
 8015870:	f7ea fcf6 	bl	8000260 <memchr>
 8015874:	b140      	cbz	r0, 8015888 <__ssvfiscanf_r+0xbc>
 8015876:	2301      	movs	r3, #1
 8015878:	eba0 0009 	sub.w	r0, r0, r9
 801587c:	fa03 f000 	lsl.w	r0, r3, r0
 8015880:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015882:	4318      	orrs	r0, r3
 8015884:	9041      	str	r0, [sp, #260]	; 0x104
 8015886:	465d      	mov	r5, fp
 8015888:	f815 3b01 	ldrb.w	r3, [r5], #1
 801588c:	2b78      	cmp	r3, #120	; 0x78
 801588e:	d806      	bhi.n	801589e <__ssvfiscanf_r+0xd2>
 8015890:	2b57      	cmp	r3, #87	; 0x57
 8015892:	d810      	bhi.n	80158b6 <__ssvfiscanf_r+0xea>
 8015894:	2b25      	cmp	r3, #37	; 0x25
 8015896:	d05c      	beq.n	8015952 <__ssvfiscanf_r+0x186>
 8015898:	d856      	bhi.n	8015948 <__ssvfiscanf_r+0x17c>
 801589a:	2b00      	cmp	r3, #0
 801589c:	d074      	beq.n	8015988 <__ssvfiscanf_r+0x1bc>
 801589e:	2303      	movs	r3, #3
 80158a0:	9347      	str	r3, [sp, #284]	; 0x11c
 80158a2:	230a      	movs	r3, #10
 80158a4:	9342      	str	r3, [sp, #264]	; 0x108
 80158a6:	e081      	b.n	80159ac <__ssvfiscanf_r+0x1e0>
 80158a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80158aa:	fb02 1303 	mla	r3, r2, r3, r1
 80158ae:	3b30      	subs	r3, #48	; 0x30
 80158b0:	9343      	str	r3, [sp, #268]	; 0x10c
 80158b2:	465d      	mov	r5, fp
 80158b4:	e7d3      	b.n	801585e <__ssvfiscanf_r+0x92>
 80158b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80158ba:	2a20      	cmp	r2, #32
 80158bc:	d8ef      	bhi.n	801589e <__ssvfiscanf_r+0xd2>
 80158be:	a101      	add	r1, pc, #4	; (adr r1, 80158c4 <__ssvfiscanf_r+0xf8>)
 80158c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80158c4:	08015997 	.word	0x08015997
 80158c8:	0801589f 	.word	0x0801589f
 80158cc:	0801589f 	.word	0x0801589f
 80158d0:	080159f5 	.word	0x080159f5
 80158d4:	0801589f 	.word	0x0801589f
 80158d8:	0801589f 	.word	0x0801589f
 80158dc:	0801589f 	.word	0x0801589f
 80158e0:	0801589f 	.word	0x0801589f
 80158e4:	0801589f 	.word	0x0801589f
 80158e8:	0801589f 	.word	0x0801589f
 80158ec:	0801589f 	.word	0x0801589f
 80158f0:	08015a0b 	.word	0x08015a0b
 80158f4:	080159e1 	.word	0x080159e1
 80158f8:	0801594f 	.word	0x0801594f
 80158fc:	0801594f 	.word	0x0801594f
 8015900:	0801594f 	.word	0x0801594f
 8015904:	0801589f 	.word	0x0801589f
 8015908:	080159e5 	.word	0x080159e5
 801590c:	0801589f 	.word	0x0801589f
 8015910:	0801589f 	.word	0x0801589f
 8015914:	0801589f 	.word	0x0801589f
 8015918:	0801589f 	.word	0x0801589f
 801591c:	08015a1b 	.word	0x08015a1b
 8015920:	080159ed 	.word	0x080159ed
 8015924:	0801598f 	.word	0x0801598f
 8015928:	0801589f 	.word	0x0801589f
 801592c:	0801589f 	.word	0x0801589f
 8015930:	08015a17 	.word	0x08015a17
 8015934:	0801589f 	.word	0x0801589f
 8015938:	080159e1 	.word	0x080159e1
 801593c:	0801589f 	.word	0x0801589f
 8015940:	0801589f 	.word	0x0801589f
 8015944:	08015997 	.word	0x08015997
 8015948:	3b45      	subs	r3, #69	; 0x45
 801594a:	2b02      	cmp	r3, #2
 801594c:	d8a7      	bhi.n	801589e <__ssvfiscanf_r+0xd2>
 801594e:	2305      	movs	r3, #5
 8015950:	e02b      	b.n	80159aa <__ssvfiscanf_r+0x1de>
 8015952:	6863      	ldr	r3, [r4, #4]
 8015954:	2b00      	cmp	r3, #0
 8015956:	dd0d      	ble.n	8015974 <__ssvfiscanf_r+0x1a8>
 8015958:	6823      	ldr	r3, [r4, #0]
 801595a:	781a      	ldrb	r2, [r3, #0]
 801595c:	4552      	cmp	r2, sl
 801595e:	f040 80a1 	bne.w	8015aa4 <__ssvfiscanf_r+0x2d8>
 8015962:	3301      	adds	r3, #1
 8015964:	6862      	ldr	r2, [r4, #4]
 8015966:	6023      	str	r3, [r4, #0]
 8015968:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801596a:	3a01      	subs	r2, #1
 801596c:	3301      	adds	r3, #1
 801596e:	6062      	str	r2, [r4, #4]
 8015970:	9345      	str	r3, [sp, #276]	; 0x114
 8015972:	e755      	b.n	8015820 <__ssvfiscanf_r+0x54>
 8015974:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015976:	4621      	mov	r1, r4
 8015978:	4630      	mov	r0, r6
 801597a:	4798      	blx	r3
 801597c:	2800      	cmp	r0, #0
 801597e:	d0eb      	beq.n	8015958 <__ssvfiscanf_r+0x18c>
 8015980:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015982:	2800      	cmp	r0, #0
 8015984:	f040 8084 	bne.w	8015a90 <__ssvfiscanf_r+0x2c4>
 8015988:	f04f 30ff 	mov.w	r0, #4294967295
 801598c:	e086      	b.n	8015a9c <__ssvfiscanf_r+0x2d0>
 801598e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015990:	f042 0220 	orr.w	r2, r2, #32
 8015994:	9241      	str	r2, [sp, #260]	; 0x104
 8015996:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801599c:	9241      	str	r2, [sp, #260]	; 0x104
 801599e:	2210      	movs	r2, #16
 80159a0:	2b6f      	cmp	r3, #111	; 0x6f
 80159a2:	9242      	str	r2, [sp, #264]	; 0x108
 80159a4:	bf34      	ite	cc
 80159a6:	2303      	movcc	r3, #3
 80159a8:	2304      	movcs	r3, #4
 80159aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80159ac:	6863      	ldr	r3, [r4, #4]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	dd41      	ble.n	8015a36 <__ssvfiscanf_r+0x26a>
 80159b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80159b4:	0659      	lsls	r1, r3, #25
 80159b6:	d404      	bmi.n	80159c2 <__ssvfiscanf_r+0x1f6>
 80159b8:	6823      	ldr	r3, [r4, #0]
 80159ba:	781a      	ldrb	r2, [r3, #0]
 80159bc:	5cba      	ldrb	r2, [r7, r2]
 80159be:	0712      	lsls	r2, r2, #28
 80159c0:	d440      	bmi.n	8015a44 <__ssvfiscanf_r+0x278>
 80159c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80159c4:	2b02      	cmp	r3, #2
 80159c6:	dc4f      	bgt.n	8015a68 <__ssvfiscanf_r+0x29c>
 80159c8:	466b      	mov	r3, sp
 80159ca:	4622      	mov	r2, r4
 80159cc:	a941      	add	r1, sp, #260	; 0x104
 80159ce:	4630      	mov	r0, r6
 80159d0:	f000 f874 	bl	8015abc <_scanf_chars>
 80159d4:	2801      	cmp	r0, #1
 80159d6:	d065      	beq.n	8015aa4 <__ssvfiscanf_r+0x2d8>
 80159d8:	2802      	cmp	r0, #2
 80159da:	f47f af21 	bne.w	8015820 <__ssvfiscanf_r+0x54>
 80159de:	e7cf      	b.n	8015980 <__ssvfiscanf_r+0x1b4>
 80159e0:	220a      	movs	r2, #10
 80159e2:	e7dd      	b.n	80159a0 <__ssvfiscanf_r+0x1d4>
 80159e4:	2300      	movs	r3, #0
 80159e6:	9342      	str	r3, [sp, #264]	; 0x108
 80159e8:	2303      	movs	r3, #3
 80159ea:	e7de      	b.n	80159aa <__ssvfiscanf_r+0x1de>
 80159ec:	2308      	movs	r3, #8
 80159ee:	9342      	str	r3, [sp, #264]	; 0x108
 80159f0:	2304      	movs	r3, #4
 80159f2:	e7da      	b.n	80159aa <__ssvfiscanf_r+0x1de>
 80159f4:	4629      	mov	r1, r5
 80159f6:	4640      	mov	r0, r8
 80159f8:	f000 f9ac 	bl	8015d54 <__sccl>
 80159fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80159fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a02:	9341      	str	r3, [sp, #260]	; 0x104
 8015a04:	4605      	mov	r5, r0
 8015a06:	2301      	movs	r3, #1
 8015a08:	e7cf      	b.n	80159aa <__ssvfiscanf_r+0x1de>
 8015a0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a10:	9341      	str	r3, [sp, #260]	; 0x104
 8015a12:	2300      	movs	r3, #0
 8015a14:	e7c9      	b.n	80159aa <__ssvfiscanf_r+0x1de>
 8015a16:	2302      	movs	r3, #2
 8015a18:	e7c7      	b.n	80159aa <__ssvfiscanf_r+0x1de>
 8015a1a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015a1c:	06c3      	lsls	r3, r0, #27
 8015a1e:	f53f aeff 	bmi.w	8015820 <__ssvfiscanf_r+0x54>
 8015a22:	9b00      	ldr	r3, [sp, #0]
 8015a24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015a26:	1d19      	adds	r1, r3, #4
 8015a28:	9100      	str	r1, [sp, #0]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	07c0      	lsls	r0, r0, #31
 8015a2e:	bf4c      	ite	mi
 8015a30:	801a      	strhmi	r2, [r3, #0]
 8015a32:	601a      	strpl	r2, [r3, #0]
 8015a34:	e6f4      	b.n	8015820 <__ssvfiscanf_r+0x54>
 8015a36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015a38:	4621      	mov	r1, r4
 8015a3a:	4630      	mov	r0, r6
 8015a3c:	4798      	blx	r3
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	d0b7      	beq.n	80159b2 <__ssvfiscanf_r+0x1e6>
 8015a42:	e79d      	b.n	8015980 <__ssvfiscanf_r+0x1b4>
 8015a44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015a46:	3201      	adds	r2, #1
 8015a48:	9245      	str	r2, [sp, #276]	; 0x114
 8015a4a:	6862      	ldr	r2, [r4, #4]
 8015a4c:	3a01      	subs	r2, #1
 8015a4e:	2a00      	cmp	r2, #0
 8015a50:	6062      	str	r2, [r4, #4]
 8015a52:	dd02      	ble.n	8015a5a <__ssvfiscanf_r+0x28e>
 8015a54:	3301      	adds	r3, #1
 8015a56:	6023      	str	r3, [r4, #0]
 8015a58:	e7ae      	b.n	80159b8 <__ssvfiscanf_r+0x1ec>
 8015a5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015a5c:	4621      	mov	r1, r4
 8015a5e:	4630      	mov	r0, r6
 8015a60:	4798      	blx	r3
 8015a62:	2800      	cmp	r0, #0
 8015a64:	d0a8      	beq.n	80159b8 <__ssvfiscanf_r+0x1ec>
 8015a66:	e78b      	b.n	8015980 <__ssvfiscanf_r+0x1b4>
 8015a68:	2b04      	cmp	r3, #4
 8015a6a:	dc06      	bgt.n	8015a7a <__ssvfiscanf_r+0x2ae>
 8015a6c:	466b      	mov	r3, sp
 8015a6e:	4622      	mov	r2, r4
 8015a70:	a941      	add	r1, sp, #260	; 0x104
 8015a72:	4630      	mov	r0, r6
 8015a74:	f000 f87a 	bl	8015b6c <_scanf_i>
 8015a78:	e7ac      	b.n	80159d4 <__ssvfiscanf_r+0x208>
 8015a7a:	4b0f      	ldr	r3, [pc, #60]	; (8015ab8 <__ssvfiscanf_r+0x2ec>)
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	f43f aecf 	beq.w	8015820 <__ssvfiscanf_r+0x54>
 8015a82:	466b      	mov	r3, sp
 8015a84:	4622      	mov	r2, r4
 8015a86:	a941      	add	r1, sp, #260	; 0x104
 8015a88:	4630      	mov	r0, r6
 8015a8a:	f3af 8000 	nop.w
 8015a8e:	e7a1      	b.n	80159d4 <__ssvfiscanf_r+0x208>
 8015a90:	89a3      	ldrh	r3, [r4, #12]
 8015a92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015a96:	bf18      	it	ne
 8015a98:	f04f 30ff 	movne.w	r0, #4294967295
 8015a9c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015aa6:	e7f9      	b.n	8015a9c <__ssvfiscanf_r+0x2d0>
 8015aa8:	08015719 	.word	0x08015719
 8015aac:	08015793 	.word	0x08015793
 8015ab0:	080198cd 	.word	0x080198cd
 8015ab4:	080199dd 	.word	0x080199dd
 8015ab8:	00000000 	.word	0x00000000

08015abc <_scanf_chars>:
 8015abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ac0:	4615      	mov	r5, r2
 8015ac2:	688a      	ldr	r2, [r1, #8]
 8015ac4:	4680      	mov	r8, r0
 8015ac6:	460c      	mov	r4, r1
 8015ac8:	b932      	cbnz	r2, 8015ad8 <_scanf_chars+0x1c>
 8015aca:	698a      	ldr	r2, [r1, #24]
 8015acc:	2a00      	cmp	r2, #0
 8015ace:	bf0c      	ite	eq
 8015ad0:	2201      	moveq	r2, #1
 8015ad2:	f04f 32ff 	movne.w	r2, #4294967295
 8015ad6:	608a      	str	r2, [r1, #8]
 8015ad8:	6822      	ldr	r2, [r4, #0]
 8015ada:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8015b68 <_scanf_chars+0xac>
 8015ade:	06d1      	lsls	r1, r2, #27
 8015ae0:	bf5f      	itttt	pl
 8015ae2:	681a      	ldrpl	r2, [r3, #0]
 8015ae4:	1d11      	addpl	r1, r2, #4
 8015ae6:	6019      	strpl	r1, [r3, #0]
 8015ae8:	6816      	ldrpl	r6, [r2, #0]
 8015aea:	2700      	movs	r7, #0
 8015aec:	69a0      	ldr	r0, [r4, #24]
 8015aee:	b188      	cbz	r0, 8015b14 <_scanf_chars+0x58>
 8015af0:	2801      	cmp	r0, #1
 8015af2:	d107      	bne.n	8015b04 <_scanf_chars+0x48>
 8015af4:	682b      	ldr	r3, [r5, #0]
 8015af6:	781a      	ldrb	r2, [r3, #0]
 8015af8:	6963      	ldr	r3, [r4, #20]
 8015afa:	5c9b      	ldrb	r3, [r3, r2]
 8015afc:	b953      	cbnz	r3, 8015b14 <_scanf_chars+0x58>
 8015afe:	bb27      	cbnz	r7, 8015b4a <_scanf_chars+0x8e>
 8015b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b04:	2802      	cmp	r0, #2
 8015b06:	d120      	bne.n	8015b4a <_scanf_chars+0x8e>
 8015b08:	682b      	ldr	r3, [r5, #0]
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8015b10:	071b      	lsls	r3, r3, #28
 8015b12:	d41a      	bmi.n	8015b4a <_scanf_chars+0x8e>
 8015b14:	6823      	ldr	r3, [r4, #0]
 8015b16:	06da      	lsls	r2, r3, #27
 8015b18:	bf5e      	ittt	pl
 8015b1a:	682b      	ldrpl	r3, [r5, #0]
 8015b1c:	781b      	ldrbpl	r3, [r3, #0]
 8015b1e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015b22:	682a      	ldr	r2, [r5, #0]
 8015b24:	686b      	ldr	r3, [r5, #4]
 8015b26:	3201      	adds	r2, #1
 8015b28:	602a      	str	r2, [r5, #0]
 8015b2a:	68a2      	ldr	r2, [r4, #8]
 8015b2c:	3b01      	subs	r3, #1
 8015b2e:	3a01      	subs	r2, #1
 8015b30:	606b      	str	r3, [r5, #4]
 8015b32:	3701      	adds	r7, #1
 8015b34:	60a2      	str	r2, [r4, #8]
 8015b36:	b142      	cbz	r2, 8015b4a <_scanf_chars+0x8e>
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	dcd7      	bgt.n	8015aec <_scanf_chars+0x30>
 8015b3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015b40:	4629      	mov	r1, r5
 8015b42:	4640      	mov	r0, r8
 8015b44:	4798      	blx	r3
 8015b46:	2800      	cmp	r0, #0
 8015b48:	d0d0      	beq.n	8015aec <_scanf_chars+0x30>
 8015b4a:	6823      	ldr	r3, [r4, #0]
 8015b4c:	f013 0310 	ands.w	r3, r3, #16
 8015b50:	d105      	bne.n	8015b5e <_scanf_chars+0xa2>
 8015b52:	68e2      	ldr	r2, [r4, #12]
 8015b54:	3201      	adds	r2, #1
 8015b56:	60e2      	str	r2, [r4, #12]
 8015b58:	69a2      	ldr	r2, [r4, #24]
 8015b5a:	b102      	cbz	r2, 8015b5e <_scanf_chars+0xa2>
 8015b5c:	7033      	strb	r3, [r6, #0]
 8015b5e:	6923      	ldr	r3, [r4, #16]
 8015b60:	441f      	add	r7, r3
 8015b62:	6127      	str	r7, [r4, #16]
 8015b64:	2000      	movs	r0, #0
 8015b66:	e7cb      	b.n	8015b00 <_scanf_chars+0x44>
 8015b68:	080198cd 	.word	0x080198cd

08015b6c <_scanf_i>:
 8015b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b70:	4698      	mov	r8, r3
 8015b72:	4b74      	ldr	r3, [pc, #464]	; (8015d44 <_scanf_i+0x1d8>)
 8015b74:	460c      	mov	r4, r1
 8015b76:	4682      	mov	sl, r0
 8015b78:	4616      	mov	r6, r2
 8015b7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015b7e:	b087      	sub	sp, #28
 8015b80:	ab03      	add	r3, sp, #12
 8015b82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015b86:	4b70      	ldr	r3, [pc, #448]	; (8015d48 <_scanf_i+0x1dc>)
 8015b88:	69a1      	ldr	r1, [r4, #24]
 8015b8a:	4a70      	ldr	r2, [pc, #448]	; (8015d4c <_scanf_i+0x1e0>)
 8015b8c:	2903      	cmp	r1, #3
 8015b8e:	bf18      	it	ne
 8015b90:	461a      	movne	r2, r3
 8015b92:	68a3      	ldr	r3, [r4, #8]
 8015b94:	9201      	str	r2, [sp, #4]
 8015b96:	1e5a      	subs	r2, r3, #1
 8015b98:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015b9c:	bf88      	it	hi
 8015b9e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015ba2:	4627      	mov	r7, r4
 8015ba4:	bf82      	ittt	hi
 8015ba6:	eb03 0905 	addhi.w	r9, r3, r5
 8015baa:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015bae:	60a3      	strhi	r3, [r4, #8]
 8015bb0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015bb4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015bb8:	bf98      	it	ls
 8015bba:	f04f 0900 	movls.w	r9, #0
 8015bbe:	6023      	str	r3, [r4, #0]
 8015bc0:	463d      	mov	r5, r7
 8015bc2:	f04f 0b00 	mov.w	fp, #0
 8015bc6:	6831      	ldr	r1, [r6, #0]
 8015bc8:	ab03      	add	r3, sp, #12
 8015bca:	7809      	ldrb	r1, [r1, #0]
 8015bcc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015bd0:	2202      	movs	r2, #2
 8015bd2:	f7ea fb45 	bl	8000260 <memchr>
 8015bd6:	b328      	cbz	r0, 8015c24 <_scanf_i+0xb8>
 8015bd8:	f1bb 0f01 	cmp.w	fp, #1
 8015bdc:	d159      	bne.n	8015c92 <_scanf_i+0x126>
 8015bde:	6862      	ldr	r2, [r4, #4]
 8015be0:	b92a      	cbnz	r2, 8015bee <_scanf_i+0x82>
 8015be2:	6822      	ldr	r2, [r4, #0]
 8015be4:	2308      	movs	r3, #8
 8015be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015bea:	6063      	str	r3, [r4, #4]
 8015bec:	6022      	str	r2, [r4, #0]
 8015bee:	6822      	ldr	r2, [r4, #0]
 8015bf0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015bf4:	6022      	str	r2, [r4, #0]
 8015bf6:	68a2      	ldr	r2, [r4, #8]
 8015bf8:	1e51      	subs	r1, r2, #1
 8015bfa:	60a1      	str	r1, [r4, #8]
 8015bfc:	b192      	cbz	r2, 8015c24 <_scanf_i+0xb8>
 8015bfe:	6832      	ldr	r2, [r6, #0]
 8015c00:	1c51      	adds	r1, r2, #1
 8015c02:	6031      	str	r1, [r6, #0]
 8015c04:	7812      	ldrb	r2, [r2, #0]
 8015c06:	f805 2b01 	strb.w	r2, [r5], #1
 8015c0a:	6872      	ldr	r2, [r6, #4]
 8015c0c:	3a01      	subs	r2, #1
 8015c0e:	2a00      	cmp	r2, #0
 8015c10:	6072      	str	r2, [r6, #4]
 8015c12:	dc07      	bgt.n	8015c24 <_scanf_i+0xb8>
 8015c14:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8015c18:	4631      	mov	r1, r6
 8015c1a:	4650      	mov	r0, sl
 8015c1c:	4790      	blx	r2
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	f040 8085 	bne.w	8015d2e <_scanf_i+0x1c2>
 8015c24:	f10b 0b01 	add.w	fp, fp, #1
 8015c28:	f1bb 0f03 	cmp.w	fp, #3
 8015c2c:	d1cb      	bne.n	8015bc6 <_scanf_i+0x5a>
 8015c2e:	6863      	ldr	r3, [r4, #4]
 8015c30:	b90b      	cbnz	r3, 8015c36 <_scanf_i+0xca>
 8015c32:	230a      	movs	r3, #10
 8015c34:	6063      	str	r3, [r4, #4]
 8015c36:	6863      	ldr	r3, [r4, #4]
 8015c38:	4945      	ldr	r1, [pc, #276]	; (8015d50 <_scanf_i+0x1e4>)
 8015c3a:	6960      	ldr	r0, [r4, #20]
 8015c3c:	1ac9      	subs	r1, r1, r3
 8015c3e:	f000 f889 	bl	8015d54 <__sccl>
 8015c42:	f04f 0b00 	mov.w	fp, #0
 8015c46:	68a3      	ldr	r3, [r4, #8]
 8015c48:	6822      	ldr	r2, [r4, #0]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d03d      	beq.n	8015cca <_scanf_i+0x15e>
 8015c4e:	6831      	ldr	r1, [r6, #0]
 8015c50:	6960      	ldr	r0, [r4, #20]
 8015c52:	f891 c000 	ldrb.w	ip, [r1]
 8015c56:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	d035      	beq.n	8015cca <_scanf_i+0x15e>
 8015c5e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8015c62:	d124      	bne.n	8015cae <_scanf_i+0x142>
 8015c64:	0510      	lsls	r0, r2, #20
 8015c66:	d522      	bpl.n	8015cae <_scanf_i+0x142>
 8015c68:	f10b 0b01 	add.w	fp, fp, #1
 8015c6c:	f1b9 0f00 	cmp.w	r9, #0
 8015c70:	d003      	beq.n	8015c7a <_scanf_i+0x10e>
 8015c72:	3301      	adds	r3, #1
 8015c74:	f109 39ff 	add.w	r9, r9, #4294967295
 8015c78:	60a3      	str	r3, [r4, #8]
 8015c7a:	6873      	ldr	r3, [r6, #4]
 8015c7c:	3b01      	subs	r3, #1
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	6073      	str	r3, [r6, #4]
 8015c82:	dd1b      	ble.n	8015cbc <_scanf_i+0x150>
 8015c84:	6833      	ldr	r3, [r6, #0]
 8015c86:	3301      	adds	r3, #1
 8015c88:	6033      	str	r3, [r6, #0]
 8015c8a:	68a3      	ldr	r3, [r4, #8]
 8015c8c:	3b01      	subs	r3, #1
 8015c8e:	60a3      	str	r3, [r4, #8]
 8015c90:	e7d9      	b.n	8015c46 <_scanf_i+0xda>
 8015c92:	f1bb 0f02 	cmp.w	fp, #2
 8015c96:	d1ae      	bne.n	8015bf6 <_scanf_i+0x8a>
 8015c98:	6822      	ldr	r2, [r4, #0]
 8015c9a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8015c9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015ca2:	d1bf      	bne.n	8015c24 <_scanf_i+0xb8>
 8015ca4:	2310      	movs	r3, #16
 8015ca6:	6063      	str	r3, [r4, #4]
 8015ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015cac:	e7a2      	b.n	8015bf4 <_scanf_i+0x88>
 8015cae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015cb2:	6022      	str	r2, [r4, #0]
 8015cb4:	780b      	ldrb	r3, [r1, #0]
 8015cb6:	f805 3b01 	strb.w	r3, [r5], #1
 8015cba:	e7de      	b.n	8015c7a <_scanf_i+0x10e>
 8015cbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015cc0:	4631      	mov	r1, r6
 8015cc2:	4650      	mov	r0, sl
 8015cc4:	4798      	blx	r3
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	d0df      	beq.n	8015c8a <_scanf_i+0x11e>
 8015cca:	6823      	ldr	r3, [r4, #0]
 8015ccc:	05d9      	lsls	r1, r3, #23
 8015cce:	d50d      	bpl.n	8015cec <_scanf_i+0x180>
 8015cd0:	42bd      	cmp	r5, r7
 8015cd2:	d909      	bls.n	8015ce8 <_scanf_i+0x17c>
 8015cd4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015cdc:	4632      	mov	r2, r6
 8015cde:	4650      	mov	r0, sl
 8015ce0:	4798      	blx	r3
 8015ce2:	f105 39ff 	add.w	r9, r5, #4294967295
 8015ce6:	464d      	mov	r5, r9
 8015ce8:	42bd      	cmp	r5, r7
 8015cea:	d028      	beq.n	8015d3e <_scanf_i+0x1d2>
 8015cec:	6822      	ldr	r2, [r4, #0]
 8015cee:	f012 0210 	ands.w	r2, r2, #16
 8015cf2:	d113      	bne.n	8015d1c <_scanf_i+0x1b0>
 8015cf4:	702a      	strb	r2, [r5, #0]
 8015cf6:	6863      	ldr	r3, [r4, #4]
 8015cf8:	9e01      	ldr	r6, [sp, #4]
 8015cfa:	4639      	mov	r1, r7
 8015cfc:	4650      	mov	r0, sl
 8015cfe:	47b0      	blx	r6
 8015d00:	f8d8 3000 	ldr.w	r3, [r8]
 8015d04:	6821      	ldr	r1, [r4, #0]
 8015d06:	1d1a      	adds	r2, r3, #4
 8015d08:	f8c8 2000 	str.w	r2, [r8]
 8015d0c:	f011 0f20 	tst.w	r1, #32
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	d00f      	beq.n	8015d34 <_scanf_i+0x1c8>
 8015d14:	6018      	str	r0, [r3, #0]
 8015d16:	68e3      	ldr	r3, [r4, #12]
 8015d18:	3301      	adds	r3, #1
 8015d1a:	60e3      	str	r3, [r4, #12]
 8015d1c:	1bed      	subs	r5, r5, r7
 8015d1e:	44ab      	add	fp, r5
 8015d20:	6925      	ldr	r5, [r4, #16]
 8015d22:	445d      	add	r5, fp
 8015d24:	6125      	str	r5, [r4, #16]
 8015d26:	2000      	movs	r0, #0
 8015d28:	b007      	add	sp, #28
 8015d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d2e:	f04f 0b00 	mov.w	fp, #0
 8015d32:	e7ca      	b.n	8015cca <_scanf_i+0x15e>
 8015d34:	07ca      	lsls	r2, r1, #31
 8015d36:	bf4c      	ite	mi
 8015d38:	8018      	strhmi	r0, [r3, #0]
 8015d3a:	6018      	strpl	r0, [r3, #0]
 8015d3c:	e7eb      	b.n	8015d16 <_scanf_i+0x1aa>
 8015d3e:	2001      	movs	r0, #1
 8015d40:	e7f2      	b.n	8015d28 <_scanf_i+0x1bc>
 8015d42:	bf00      	nop
 8015d44:	0801824c 	.word	0x0801824c
 8015d48:	080140d5 	.word	0x080140d5
 8015d4c:	08015ed1 	.word	0x08015ed1
 8015d50:	08019a23 	.word	0x08019a23

08015d54 <__sccl>:
 8015d54:	b570      	push	{r4, r5, r6, lr}
 8015d56:	780b      	ldrb	r3, [r1, #0]
 8015d58:	4604      	mov	r4, r0
 8015d5a:	2b5e      	cmp	r3, #94	; 0x5e
 8015d5c:	bf0b      	itete	eq
 8015d5e:	784b      	ldrbeq	r3, [r1, #1]
 8015d60:	1c48      	addne	r0, r1, #1
 8015d62:	1c88      	addeq	r0, r1, #2
 8015d64:	2200      	movne	r2, #0
 8015d66:	bf08      	it	eq
 8015d68:	2201      	moveq	r2, #1
 8015d6a:	1e61      	subs	r1, r4, #1
 8015d6c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8015d70:	f801 2f01 	strb.w	r2, [r1, #1]!
 8015d74:	42a9      	cmp	r1, r5
 8015d76:	d1fb      	bne.n	8015d70 <__sccl+0x1c>
 8015d78:	b90b      	cbnz	r3, 8015d7e <__sccl+0x2a>
 8015d7a:	3801      	subs	r0, #1
 8015d7c:	bd70      	pop	{r4, r5, r6, pc}
 8015d7e:	f082 0101 	eor.w	r1, r2, #1
 8015d82:	54e1      	strb	r1, [r4, r3]
 8015d84:	1c42      	adds	r2, r0, #1
 8015d86:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8015d8a:	2d2d      	cmp	r5, #45	; 0x2d
 8015d8c:	f102 36ff 	add.w	r6, r2, #4294967295
 8015d90:	4610      	mov	r0, r2
 8015d92:	d006      	beq.n	8015da2 <__sccl+0x4e>
 8015d94:	2d5d      	cmp	r5, #93	; 0x5d
 8015d96:	d0f1      	beq.n	8015d7c <__sccl+0x28>
 8015d98:	b90d      	cbnz	r5, 8015d9e <__sccl+0x4a>
 8015d9a:	4630      	mov	r0, r6
 8015d9c:	e7ee      	b.n	8015d7c <__sccl+0x28>
 8015d9e:	462b      	mov	r3, r5
 8015da0:	e7ef      	b.n	8015d82 <__sccl+0x2e>
 8015da2:	7816      	ldrb	r6, [r2, #0]
 8015da4:	2e5d      	cmp	r6, #93	; 0x5d
 8015da6:	d0fa      	beq.n	8015d9e <__sccl+0x4a>
 8015da8:	42b3      	cmp	r3, r6
 8015daa:	dcf8      	bgt.n	8015d9e <__sccl+0x4a>
 8015dac:	4618      	mov	r0, r3
 8015dae:	3001      	adds	r0, #1
 8015db0:	4286      	cmp	r6, r0
 8015db2:	5421      	strb	r1, [r4, r0]
 8015db4:	dcfb      	bgt.n	8015dae <__sccl+0x5a>
 8015db6:	43d8      	mvns	r0, r3
 8015db8:	4430      	add	r0, r6
 8015dba:	1c5d      	adds	r5, r3, #1
 8015dbc:	42b3      	cmp	r3, r6
 8015dbe:	bfa8      	it	ge
 8015dc0:	2000      	movge	r0, #0
 8015dc2:	182b      	adds	r3, r5, r0
 8015dc4:	3202      	adds	r2, #2
 8015dc6:	e7de      	b.n	8015d86 <__sccl+0x32>

08015dc8 <_strtol_l.isra.0>:
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dce:	d001      	beq.n	8015dd4 <_strtol_l.isra.0+0xc>
 8015dd0:	2b24      	cmp	r3, #36	; 0x24
 8015dd2:	d906      	bls.n	8015de2 <_strtol_l.isra.0+0x1a>
 8015dd4:	f7fc fbb6 	bl	8012544 <__errno>
 8015dd8:	2316      	movs	r3, #22
 8015dda:	6003      	str	r3, [r0, #0]
 8015ddc:	2000      	movs	r0, #0
 8015dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015de2:	4f3a      	ldr	r7, [pc, #232]	; (8015ecc <_strtol_l.isra.0+0x104>)
 8015de4:	468e      	mov	lr, r1
 8015de6:	4676      	mov	r6, lr
 8015de8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015dec:	5de5      	ldrb	r5, [r4, r7]
 8015dee:	f015 0508 	ands.w	r5, r5, #8
 8015df2:	d1f8      	bne.n	8015de6 <_strtol_l.isra.0+0x1e>
 8015df4:	2c2d      	cmp	r4, #45	; 0x2d
 8015df6:	d134      	bne.n	8015e62 <_strtol_l.isra.0+0x9a>
 8015df8:	f89e 4000 	ldrb.w	r4, [lr]
 8015dfc:	f04f 0801 	mov.w	r8, #1
 8015e00:	f106 0e02 	add.w	lr, r6, #2
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d05c      	beq.n	8015ec2 <_strtol_l.isra.0+0xfa>
 8015e08:	2b10      	cmp	r3, #16
 8015e0a:	d10c      	bne.n	8015e26 <_strtol_l.isra.0+0x5e>
 8015e0c:	2c30      	cmp	r4, #48	; 0x30
 8015e0e:	d10a      	bne.n	8015e26 <_strtol_l.isra.0+0x5e>
 8015e10:	f89e 4000 	ldrb.w	r4, [lr]
 8015e14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015e18:	2c58      	cmp	r4, #88	; 0x58
 8015e1a:	d14d      	bne.n	8015eb8 <_strtol_l.isra.0+0xf0>
 8015e1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015e20:	2310      	movs	r3, #16
 8015e22:	f10e 0e02 	add.w	lr, lr, #2
 8015e26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015e2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015e2e:	2600      	movs	r6, #0
 8015e30:	fbbc f9f3 	udiv	r9, ip, r3
 8015e34:	4635      	mov	r5, r6
 8015e36:	fb03 ca19 	mls	sl, r3, r9, ip
 8015e3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015e3e:	2f09      	cmp	r7, #9
 8015e40:	d818      	bhi.n	8015e74 <_strtol_l.isra.0+0xac>
 8015e42:	463c      	mov	r4, r7
 8015e44:	42a3      	cmp	r3, r4
 8015e46:	dd24      	ble.n	8015e92 <_strtol_l.isra.0+0xca>
 8015e48:	2e00      	cmp	r6, #0
 8015e4a:	db1f      	blt.n	8015e8c <_strtol_l.isra.0+0xc4>
 8015e4c:	45a9      	cmp	r9, r5
 8015e4e:	d31d      	bcc.n	8015e8c <_strtol_l.isra.0+0xc4>
 8015e50:	d101      	bne.n	8015e56 <_strtol_l.isra.0+0x8e>
 8015e52:	45a2      	cmp	sl, r4
 8015e54:	db1a      	blt.n	8015e8c <_strtol_l.isra.0+0xc4>
 8015e56:	fb05 4503 	mla	r5, r5, r3, r4
 8015e5a:	2601      	movs	r6, #1
 8015e5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015e60:	e7eb      	b.n	8015e3a <_strtol_l.isra.0+0x72>
 8015e62:	2c2b      	cmp	r4, #43	; 0x2b
 8015e64:	bf08      	it	eq
 8015e66:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015e6a:	46a8      	mov	r8, r5
 8015e6c:	bf08      	it	eq
 8015e6e:	f106 0e02 	addeq.w	lr, r6, #2
 8015e72:	e7c7      	b.n	8015e04 <_strtol_l.isra.0+0x3c>
 8015e74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015e78:	2f19      	cmp	r7, #25
 8015e7a:	d801      	bhi.n	8015e80 <_strtol_l.isra.0+0xb8>
 8015e7c:	3c37      	subs	r4, #55	; 0x37
 8015e7e:	e7e1      	b.n	8015e44 <_strtol_l.isra.0+0x7c>
 8015e80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015e84:	2f19      	cmp	r7, #25
 8015e86:	d804      	bhi.n	8015e92 <_strtol_l.isra.0+0xca>
 8015e88:	3c57      	subs	r4, #87	; 0x57
 8015e8a:	e7db      	b.n	8015e44 <_strtol_l.isra.0+0x7c>
 8015e8c:	f04f 36ff 	mov.w	r6, #4294967295
 8015e90:	e7e4      	b.n	8015e5c <_strtol_l.isra.0+0x94>
 8015e92:	2e00      	cmp	r6, #0
 8015e94:	da05      	bge.n	8015ea2 <_strtol_l.isra.0+0xda>
 8015e96:	2322      	movs	r3, #34	; 0x22
 8015e98:	6003      	str	r3, [r0, #0]
 8015e9a:	4665      	mov	r5, ip
 8015e9c:	b942      	cbnz	r2, 8015eb0 <_strtol_l.isra.0+0xe8>
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	e79d      	b.n	8015dde <_strtol_l.isra.0+0x16>
 8015ea2:	f1b8 0f00 	cmp.w	r8, #0
 8015ea6:	d000      	beq.n	8015eaa <_strtol_l.isra.0+0xe2>
 8015ea8:	426d      	negs	r5, r5
 8015eaa:	2a00      	cmp	r2, #0
 8015eac:	d0f7      	beq.n	8015e9e <_strtol_l.isra.0+0xd6>
 8015eae:	b10e      	cbz	r6, 8015eb4 <_strtol_l.isra.0+0xec>
 8015eb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015eb4:	6011      	str	r1, [r2, #0]
 8015eb6:	e7f2      	b.n	8015e9e <_strtol_l.isra.0+0xd6>
 8015eb8:	2430      	movs	r4, #48	; 0x30
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d1b3      	bne.n	8015e26 <_strtol_l.isra.0+0x5e>
 8015ebe:	2308      	movs	r3, #8
 8015ec0:	e7b1      	b.n	8015e26 <_strtol_l.isra.0+0x5e>
 8015ec2:	2c30      	cmp	r4, #48	; 0x30
 8015ec4:	d0a4      	beq.n	8015e10 <_strtol_l.isra.0+0x48>
 8015ec6:	230a      	movs	r3, #10
 8015ec8:	e7ad      	b.n	8015e26 <_strtol_l.isra.0+0x5e>
 8015eca:	bf00      	nop
 8015ecc:	080198cd 	.word	0x080198cd

08015ed0 <_strtol_r>:
 8015ed0:	f7ff bf7a 	b.w	8015dc8 <_strtol_l.isra.0>

08015ed4 <__submore>:
 8015ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ed8:	460c      	mov	r4, r1
 8015eda:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ee0:	4299      	cmp	r1, r3
 8015ee2:	d11d      	bne.n	8015f20 <__submore+0x4c>
 8015ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015ee8:	f7fd f972 	bl	80131d0 <_malloc_r>
 8015eec:	b918      	cbnz	r0, 8015ef6 <__submore+0x22>
 8015eee:	f04f 30ff 	mov.w	r0, #4294967295
 8015ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015efa:	63a3      	str	r3, [r4, #56]	; 0x38
 8015efc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8015f00:	6360      	str	r0, [r4, #52]	; 0x34
 8015f02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8015f06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015f0a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8015f0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015f12:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8015f16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8015f1a:	6020      	str	r0, [r4, #0]
 8015f1c:	2000      	movs	r0, #0
 8015f1e:	e7e8      	b.n	8015ef2 <__submore+0x1e>
 8015f20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8015f22:	0077      	lsls	r7, r6, #1
 8015f24:	463a      	mov	r2, r7
 8015f26:	f7fe fe77 	bl	8014c18 <_realloc_r>
 8015f2a:	4605      	mov	r5, r0
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d0de      	beq.n	8015eee <__submore+0x1a>
 8015f30:	eb00 0806 	add.w	r8, r0, r6
 8015f34:	4601      	mov	r1, r0
 8015f36:	4632      	mov	r2, r6
 8015f38:	4640      	mov	r0, r8
 8015f3a:	f7fd f8d3 	bl	80130e4 <memcpy>
 8015f3e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8015f42:	f8c4 8000 	str.w	r8, [r4]
 8015f46:	e7e9      	b.n	8015f1c <__submore+0x48>

08015f48 <_gettimeofday>:
 8015f48:	4b02      	ldr	r3, [pc, #8]	; (8015f54 <_gettimeofday+0xc>)
 8015f4a:	2258      	movs	r2, #88	; 0x58
 8015f4c:	601a      	str	r2, [r3, #0]
 8015f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8015f52:	4770      	bx	lr
 8015f54:	20000cbc 	.word	0x20000cbc

08015f58 <_init>:
 8015f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f5a:	bf00      	nop
 8015f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f5e:	bc08      	pop	{r3}
 8015f60:	469e      	mov	lr, r3
 8015f62:	4770      	bx	lr

08015f64 <_fini>:
 8015f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f66:	bf00      	nop
 8015f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f6a:	bc08      	pop	{r3}
 8015f6c:	469e      	mov	lr, r3
 8015f6e:	4770      	bx	lr
