
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001544c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035ec  0801562c  0801562c  0002562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c18  08018c18  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08018c18  08018c18  00028c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018c20  08018c20  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08018c20  08018c20  00028c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08018c2c  08018c2c  00028c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08018c38  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  20000334  08018f6c  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c28  08018f6c  00030c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048f72  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000090e1  00000000  00000000  000792d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c40  00000000  00000000  000823b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a90  00000000  00000000  00084ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c740  00000000  00000000  00087a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000212dd  00000000  00000000  000b41c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100fa0  00000000  00000000  000d54a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d6445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000da20  00000000  00000000  001d6498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001e3eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001e3edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000334 	.word	0x20000334
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015614 	.word	0x08015614

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000338 	.word	0x20000338
 800021c:	08015614 	.word	0x08015614

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003e8 	.word	0x200003e8

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f010 ff60 	bl	8011c30 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f010 feb8 	bl	8011c30 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000354 	.word	0x20000354
 8000ef4:	20000c28 	.word	0x20000c28

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f011 fa8f 	bl	801246c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fd80 	bl	8003a52 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000f60:	08018c38 	.word	0x08018c38
  ldr r2, =_sbss
 8000f64:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000f68:	20000c28 	.word	0x20000c28

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000c14 	.word	0x20000c14
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000c14 	.word	0x20000c14

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	08017798 	.word	0x08017798
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	080177a8 	.word	0x080177a8

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080177a8 	.word	0x080177a8

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	080177b0 	.word	0x080177b0
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	080177c8 	.word	0x080177c8
 8003904:	080177d0 	.word	0x080177d0

08003908 <ringBuffer_init>:
#include "ring_buffer.h"
#include <stdlib.h>
#include <string.h>

RingBuffer* ringBuffer_init(uint32_t size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003910:	2010      	movs	r0, #16
 8003912:	f00e ff4d 	bl	80127b0 <malloc>
 8003916:	4603      	mov	r3, r0
 8003918:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003920:	2300      	movs	r3, #0
 8003922:	e017      	b.n	8003954 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003936:	2101      	movs	r1, #1
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f00e f971 	bl	8011c20 <calloc>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <ringBuffer_deInit>:

void ringBuffer_deInit(RingBuffer* buffer)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f00e ff22 	bl	80127c0 <free>
		}
		free(buffer);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f00e ff1f 	bl	80127c0 <free>
	}
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <ringBuffer_push>:

void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	3b01      	subs	r3, #1
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d00c      	beq.n	80039be <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80039bc:	e009      	b.n	80039d2 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <ringBuffer_pop>:

uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d00d      	beq.n	8003a10 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	605a      	str	r2, [r3, #4]
		return data;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	e00a      	b.n	8003a26 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
		return data;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <ringBuffer_flush>:

void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68d8      	ldr	r0, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	461a      	mov	r2, r3
 8003a44:	2100      	movs	r1, #0
 8003a46:	f00e fed1 	bl	80127ec <memset>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a56:	f7fd fa8a 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a5a:	f000 f813 	bl	8003a84 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a5e:	f000 f947 	bl	8003cf0 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003a62:	f000 f887 	bl	8003b74 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003a66:	f000 f8e3 	bl	8003c30 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { };
  CommandLineTestRunner::RunAllTests(0, av_override);
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f001 f84f 	bl	8004b10 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003a72:	2120      	movs	r1, #32
 8003a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a78:	f7fd fe76 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003a7c:	2064      	movs	r0, #100	; 0x64
 8003a7e:	f7fd fae7 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003a82:	e7f6      	b.n	8003a72 <main+0x20>

08003a84 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0a8      	sub	sp, #160	; 0xa0
 8003a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a8e:	2238      	movs	r2, #56	; 0x38
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f00e feaa 	bl	80127ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	2254      	movs	r2, #84	; 0x54
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00e fe9c 	bl	80127ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7fd fe95 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003aba:	2302      	movs	r3, #2
 8003abc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ac4:	2340      	movs	r3, #64	; 0x40
 8003ac6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003ada:	2355      	movs	r3, #85	; 0x55
 8003adc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003aec:	2302      	movs	r3, #2
 8003aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd ff28 	bl	800194c <HAL_RCC_OscConfig>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003b0c:	f000 f960 	bl	8003dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b10:	230f      	movs	r3, #15
 8003b12:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b14:	2303      	movs	r3, #3
 8003b16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b20:	2300      	movs	r3, #0
 8003b22:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b28:	2104      	movs	r1, #4
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fa26 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf14      	ite	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	2300      	moveq	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003b40:	f000 f946 	bl	8003dd0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003b44:	2321      	movs	r3, #33	; 0x21
 8003b46:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b50:	463b      	mov	r3, r7
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fc2e 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	2300      	moveq	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003b68:	f000 f932 	bl	8003dd0 <Error_Handler>
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	37a0      	adds	r7, #160	; 0xa0
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003b7c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003b7e:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b84:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b86:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003b8c:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003b92:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003b98:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ba4:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003baa:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003bb6:	481c      	ldr	r0, [pc, #112]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bb8:	f7fe fe48 	bl	800284c <HAL_UART_Init>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003bcc:	f000 f900 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4815      	ldr	r0, [pc, #84]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bd4:	f7ff fdce 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf14      	ite	ne
 8003bde:	2301      	movne	r3, #1
 8003be0:	2300      	moveq	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003be8:	f000 f8f2 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bec:	2100      	movs	r1, #0
 8003bee:	480e      	ldr	r0, [pc, #56]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003bf0:	f7ff fdfe 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003c04:	f000 f8e4 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003c08:	4807      	ldr	r0, [pc, #28]	; (8003c28 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003c0a:	f7ff fd7a 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003c1e:	f000 f8d7 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000358 	.word	0x20000358
 8003c2c:	40008000 	.word	0x40008000

08003c30 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c34:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c36:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c42:	4b29      	ldr	r3, [pc, #164]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c54:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c56:	220c      	movs	r2, #12
 8003c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c5a:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c60:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c66:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c78:	481b      	ldr	r0, [pc, #108]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c7a:	f7fe fde7 	bl	800284c <HAL_UART_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003c8e:	f000 f89f 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c92:	2100      	movs	r1, #0
 8003c94:	4814      	ldr	r0, [pc, #80]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003c96:	f7ff fd6d 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003caa:	f000 f891 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cae:	2100      	movs	r1, #0
 8003cb0:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003cb2:	f7ff fd9d 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003cc6:	f000 f883 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003cca:	4807      	ldr	r0, [pc, #28]	; (8003ce8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ccc:	f7ff fd19 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003ce0:	f000 f876 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	200003e8 	.word	0x200003e8
 8003cec:	40013800 	.word	0x40013800

08003cf0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf6:	f107 0314 	add.w	r3, r7, #20
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
 8003d00:	609a      	str	r2, [r3, #8]
 8003d02:	60da      	str	r2, [r3, #12]
 8003d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	4a2e      	ldr	r2, [pc, #184]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d12:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d1e:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d22:	4a28      	ldr	r2, [pc, #160]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d24:	f043 0320 	orr.w	r3, r3, #32
 8003d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d2a:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d36:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3a:	4a22      	ldr	r2, [pc, #136]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d42:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d52:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2120      	movs	r1, #32
 8003d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d6e:	f7fd fce3 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <_ZL12MX_GPIO_Initv+0xd8>)
 8003d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	4619      	mov	r1, r3
 8003d86:	4811      	ldr	r0, [pc, #68]	; (8003dcc <_ZL12MX_GPIO_Initv+0xdc>)
 8003d88:	f7fd fb54 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d90:	2301      	movs	r3, #1
 8003d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003d9c:	f107 0314 	add.w	r3, r7, #20
 8003da0:	4619      	mov	r1, r3
 8003da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da6:	f7fd fb45 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	2028      	movs	r0, #40	; 0x28
 8003db0:	f7fd fa4b 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003db4:	2028      	movs	r0, #40	; 0x28
 8003db6:	f7fd fa62 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003dba:	bf00      	nop
 8003dbc:	3728      	adds	r7, #40	; 0x28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	10110000 	.word	0x10110000
 8003dcc:	48000800 	.word	0x48000800

08003dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd4:	b672      	cpsid	i
}
 8003dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <Error_Handler+0x8>

08003dda <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003de2:	2032      	movs	r0, #50	; 0x32
 8003de4:	f7ff fd90 	bl	8003908 <ringBuffer_init>
 8003de8:	4602      	mov	r2, r0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	605a      	str	r2, [r3, #4]

	}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fdaa 	bl	800395c <ringBuffer_deInit>
	}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f00a fd1c 	bl	800e858 <_ZN5UtestC1Ev>
 8003e20:	4a03      	ldr	r2, [pc, #12]	; (8003e30 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	08017ca8 	.word	0x08017ca8

08003e34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	4a05      	ldr	r2, [pc, #20]	; (8003e54 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00a fd17 	bl	800e878 <_ZN5UtestD1Ev>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	08017ca8 	.word	0x08017ca8

08003e58 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ffe7 	bl	8003e34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8003e66:	2108      	movs	r1, #8
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f002 fb33 	bl	80064d4 <_ZdlPvj>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ffbe 	bl	8003e10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003e94:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	08017c88 	.word	0x08017c88

08003ea8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8003ea8:	b590      	push	{r4, r7, lr}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	2222      	movs	r2, #34	; 0x22
 8003eb2:	4906      	ldr	r1, [pc, #24]	; (8003ecc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8003eb4:	2008      	movs	r0, #8
 8003eb6:	f002 faf9 	bl	80064ac <_ZnwjPKci>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f7ff ffdb 	bl	8003e78 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd90      	pop	{r4, r7, pc}
 8003ecc:	0801562c 	.word	0x0801562c

08003ed0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f009 f8ec 	bl	800d0b8 <_ZN10UtestShellC1Ev>
 8003ee0:	4a03      	ldr	r2, [pc, #12]	; (8003ef0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	08017bdc 	.word	0x08017bdc

08003ef4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8003ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af04      	add	r7, sp, #16
 8003efa:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8003efc:	f00a fc82 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 8003f00:	4604      	mov	r4, r0
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	3338      	adds	r3, #56	; 0x38
 8003f06:	681d      	ldr	r5, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	461e      	mov	r6, r3
 8003f10:	f00a fc88 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003f14:	4603      	mov	r3, r0
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	2325      	movs	r3, #37	; 0x25
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8003f22:	4632      	mov	r2, r6
 8003f24:	2132      	movs	r1, #50	; 0x32
 8003f26:	4620      	mov	r0, r4
 8003f28:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8003f2a:	f00a fc6b 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 8003f2e:	4604      	mov	r4, r0
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	3320      	adds	r3, #32
 8003f34:	681d      	ldr	r5, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2de      	uxtb	r6, r3
 8003f46:	f00a fc6d 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	2326      	movs	r3, #38	; 0x26
 8003f50:	9302      	str	r3, [sp, #8]
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	2300      	movs	r3, #0
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4620      	mov	r0, r4
 8003f62:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8003f64:	f00a fc4e 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 8003f68:	4604      	mov	r4, r0
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	3338      	adds	r3, #56	; 0x38
 8003f6e:	681d      	ldr	r5, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461e      	mov	r6, r3
 8003f78:	f00a fc54 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	9302      	str	r3, [sp, #8]
 8003f80:	2327      	movs	r3, #39	; 0x27
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4620      	mov	r0, r4
 8003f90:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8003f92:	f00a fc37 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 8003f96:	4604      	mov	r4, r0
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	3338      	adds	r3, #56	; 0x38
 8003f9c:	681d      	ldr	r5, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	461e      	mov	r6, r3
 8003fa6:	f00a fc3d 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8003faa:	4603      	mov	r3, r0
 8003fac:	9302      	str	r3, [sp, #8]
 8003fae:	2328      	movs	r3, #40	; 0x28
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8003fb8:	4632      	mov	r2, r6
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	47a8      	blx	r5

}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc8:	0801562c 	.word	0x0801562c
 8003fcc:	08015640 	.word	0x08015640
 8003fd0:	08015668 	.word	0x08015668
 8003fd4:	08015680 	.word	0x08015680
 8003fd8:	08015688 	.word	0x08015688
 8003fdc:	080156b0 	.word	0x080156b0

08003fe0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff0a 	bl	8003e10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8003ffc:	4a03      	ldr	r2, [pc, #12]	; (800400c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	08017bbc 	.word	0x08017bbc

08004010 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	222c      	movs	r2, #44	; 0x2c
 800401a:	4906      	ldr	r1, [pc, #24]	; (8004034 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 800401c:	2008      	movs	r0, #8
 800401e:	f002 fa45 	bl	80064ac <_ZnwjPKci>
 8004022:	4604      	mov	r4, r0
 8004024:	4620      	mov	r0, r4
 8004026:	f7ff ffdb 	bl	8003fe0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800402a:	4623      	mov	r3, r4
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bd90      	pop	{r4, r7, pc}
 8004034:	0801562c 	.word	0x0801562c

08004038 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	f009 f838 	bl	800d0b8 <_ZN10UtestShellC1Ev>
 8004048:	4a03      	ldr	r2, [pc, #12]	; (8004058 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	08017b10 	.word	0x08017b10

0800405c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 800405c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405e:	b087      	sub	sp, #28
 8004060:	af04      	add	r7, sp, #16
 8004062:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2145      	movs	r1, #69	; 0x45
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fc8d 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004070:	f00a fbc8 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 8004074:	4604      	mov	r4, r0
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	3338      	adds	r3, #56	; 0x38
 800407a:	681d      	ldr	r5, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	461e      	mov	r6, r3
 8004086:	f00a fbcd 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800408a:	4603      	mov	r3, r0
 800408c:	9302      	str	r3, [sp, #8]
 800408e:	232f      	movs	r3, #47	; 0x2f
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004098:	4632      	mov	r2, r6
 800409a:	2145      	movs	r1, #69	; 0x45
 800409c:	4620      	mov	r0, r4
 800409e:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2110      	movs	r1, #16
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fc6f 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80040ac:	f00a fbaa 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 80040b0:	4604      	mov	r4, r0
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	3338      	adds	r3, #56	; 0x38
 80040b6:	681d      	ldr	r5, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461e      	mov	r6, r3
 80040c4:	f00a fbae 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80040c8:	4603      	mov	r3, r0
 80040ca:	9302      	str	r3, [sp, #8]
 80040cc:	2332      	movs	r3, #50	; 0x32
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80040d6:	4632      	mov	r2, r6
 80040d8:	2110      	movs	r1, #16
 80040da:	4620      	mov	r0, r4
 80040dc:	47a8      	blx	r5

}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e6:	bf00      	nop
 80040e8:	0801562c 	.word	0x0801562c
 80040ec:	080156d8 	.word	0x080156d8
 80040f0:	08015708 	.word	0x08015708

080040f4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fe80 	bl	8003e10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004110:	4a03      	ldr	r2, [pc, #12]	; (8004120 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	08017af0 	.word	0x08017af0

08004124 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	2236      	movs	r2, #54	; 0x36
 800412e:	4906      	ldr	r1, [pc, #24]	; (8004148 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004130:	2008      	movs	r0, #8
 8004132:	f002 f9bb 	bl	80064ac <_ZnwjPKci>
 8004136:	4604      	mov	r4, r0
 8004138:	4620      	mov	r0, r4
 800413a:	f7ff ffdb 	bl	80040f4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800413e:	4623      	mov	r3, r4
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bd90      	pop	{r4, r7, pc}
 8004148:	0801562c 	.word	0x0801562c

0800414c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4618      	mov	r0, r3
 8004158:	f008 ffae 	bl	800d0b8 <_ZN10UtestShellC1Ev>
 800415c:	4a03      	ldr	r2, [pc, #12]	; (800416c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	08017a44 	.word	0x08017a44

08004170 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004172:	b089      	sub	sp, #36	; 0x24
 8004174:	af04      	add	r7, sp, #16
 8004176:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	3b01      	subs	r3, #1
 800418e:	429a      	cmp	r2, r3
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4293      	cmp	r3, r2
 800419e:	da0b      	bge.n	80041b8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fbed 	bl	800398a <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e7e3      	b.n	8004180 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	21ff      	movs	r1, #255	; 0xff
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fbe3 	bl	800398a <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80041c4:	f00a fb1e 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 80041c8:	4604      	mov	r4, r0
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	3338      	adds	r3, #56	; 0x38
 80041ce:	681d      	ldr	r5, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	461e      	mov	r6, r3
 80041da:	f00a fb23 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80041de:	4603      	mov	r3, r0
 80041e0:	9302      	str	r3, [sp, #8]
 80041e2:	233e      	movs	r3, #62	; 0x3e
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80041ec:	4632      	mov	r2, r6
 80041ee:	21ff      	movs	r1, #255	; 0xff
 80041f0:	4620      	mov	r0, r4
 80041f2:	47a8      	blx	r5
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041fc:	0801562c 	.word	0x0801562c
 8004200:	08015738 	.word	0x08015738

08004204 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fdf8 	bl	8003e10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004220:	4a03      	ldr	r2, [pc, #12]	; (8004230 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	08017a24 	.word	0x08017a24

08004234 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	2241      	movs	r2, #65	; 0x41
 800423e:	4906      	ldr	r1, [pc, #24]	; (8004258 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004240:	2008      	movs	r0, #8
 8004242:	f002 f933 	bl	80064ac <_ZnwjPKci>
 8004246:	4604      	mov	r4, r0
 8004248:	4620      	mov	r0, r4
 800424a:	f7ff ffdb 	bl	8004204 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800424e:	4623      	mov	r3, r4
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}
 8004258:	0801562c 	.word	0x0801562c

0800425c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4618      	mov	r0, r3
 8004268:	f008 ff26 	bl	800d0b8 <_ZN10UtestShellC1Ev>
 800426c:	4a03      	ldr	r2, [pc, #12]	; (800427c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	08017978 	.word	0x08017978

08004280 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004282:	b089      	sub	sp, #36	; 0x24
 8004284:	af04      	add	r7, sp, #16
 8004286:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	21ff      	movs	r1, #255	; 0xff
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fb7b 	bl	800398a <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fba0 	bl	80039de <ringBuffer_pop>
 800429e:	4603      	mov	r3, r0
 80042a0:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80042a2:	f00a faaf 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 80042a6:	4604      	mov	r4, r0
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	3338      	adds	r3, #56	; 0x38
 80042ac:	681d      	ldr	r5, [r3, #0]
 80042ae:	7bfe      	ldrb	r6, [r7, #15]
 80042b0:	f00a fab8 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80042b4:	4603      	mov	r3, r0
 80042b6:	9302      	str	r3, [sp, #8]
 80042b8:	2346      	movs	r3, #70	; 0x46
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80042c2:	4632      	mov	r2, r6
 80042c4:	21ff      	movs	r1, #255	; 0xff
 80042c6:	4620      	mov	r0, r4
 80042c8:	47a8      	blx	r5

}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d2:	bf00      	nop
 80042d4:	0801562c 	.word	0x0801562c
 80042d8:	08015768 	.word	0x08015768

080042dc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fd8c 	bl	8003e10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80042f8:	4a03      	ldr	r2, [pc, #12]	; (8004308 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	08017958 	.word	0x08017958

0800430c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	224a      	movs	r2, #74	; 0x4a
 8004316:	4906      	ldr	r1, [pc, #24]	; (8004330 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004318:	2008      	movs	r0, #8
 800431a:	f002 f8c7 	bl	80064ac <_ZnwjPKci>
 800431e:	4604      	mov	r4, r0
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff ffdb 	bl	80042dc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004326:	4623      	mov	r3, r4
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bd90      	pop	{r4, r7, pc}
 8004330:	0801562c 	.word	0x0801562c

08004334 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4618      	mov	r0, r3
 8004340:	f008 feba 	bl	800d0b8 <_ZN10UtestShellC1Ev>
 8004344:	4a03      	ldr	r2, [pc, #12]	; (8004354 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	080178ac 	.word	0x080178ac

08004358 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af04      	add	r7, sp, #16
 800435e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	21aa      	movs	r1, #170	; 0xaa
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fb0d 	bl	800398a <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	3b01      	subs	r3, #1
 8004386:	429a      	cmp	r2, r3
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4293      	cmp	r3, r2
 8004396:	da0a      	bge.n	80043ae <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fb1e 	bl	80039de <ringBuffer_pop>
 80043a2:	4603      	mov	r3, r0
 80043a4:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e7e4      	b.n	8004378 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fb13 	bl	80039de <ringBuffer_pop>
 80043b8:	4603      	mov	r3, r0
 80043ba:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80043bc:	f00a fa22 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 80043c0:	4604      	mov	r4, r0
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	3338      	adds	r3, #56	; 0x38
 80043c6:	681d      	ldr	r5, [r3, #0]
 80043c8:	7afe      	ldrb	r6, [r7, #11]
 80043ca:	f00a fa2b 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043ce:	4603      	mov	r3, r0
 80043d0:	9302      	str	r3, [sp, #8]
 80043d2:	2357      	movs	r3, #87	; 0x57
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80043dc:	4632      	mov	r2, r6
 80043de:	21aa      	movs	r1, #170	; 0xaa
 80043e0:	4620      	mov	r0, r4
 80043e2:	47a8      	blx	r5
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ec:	0801562c 	.word	0x0801562c
 80043f0:	08015788 	.word	0x08015788

080043f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	605a      	str	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fd00 	bl	8003e10 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004410:	4a03      	ldr	r2, [pc, #12]	; (8004420 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	0801788c 	.word	0x0801788c

08004424 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004424:	b590      	push	{r4, r7, lr}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	225a      	movs	r2, #90	; 0x5a
 800442e:	4906      	ldr	r1, [pc, #24]	; (8004448 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004430:	2008      	movs	r0, #8
 8004432:	f002 f83b 	bl	80064ac <_ZnwjPKci>
 8004436:	4604      	mov	r4, r0
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff ffdb 	bl	80043f4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800443e:	4623      	mov	r3, r4
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bd90      	pop	{r4, r7, pc}
 8004448:	0801562c 	.word	0x0801562c

0800444c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4618      	mov	r0, r3
 8004458:	f008 fe2e 	bl	800d0b8 <_ZN10UtestShellC1Ev>
 800445c:	4a03      	ldr	r2, [pc, #12]	; (800446c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	080177e0 	.word	0x080177e0

08004470 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004472:	b089      	sub	sp, #36	; 0x24
 8004474:	af04      	add	r7, sp, #16
 8004476:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d20b      	bcs.n	80044a0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fa79 	bl	800398a <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3301      	adds	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	e7ed      	b.n	800447c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 80044a0:	f00a f9b0 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 80044a4:	4604      	mov	r4, r0
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	3338      	adds	r3, #56	; 0x38
 80044aa:	681d      	ldr	r5, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	461e      	mov	r6, r3
 80044c0:	f00a f9b0 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044c4:	4603      	mov	r3, r0
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	2361      	movs	r3, #97	; 0x61
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	4b24      	ldr	r3, [pc, #144]	; (8004560 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4b24      	ldr	r3, [pc, #144]	; (8004564 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80044d2:	4632      	mov	r2, r6
 80044d4:	2131      	movs	r1, #49	; 0x31
 80044d6:	4620      	mov	r0, r4
 80044d8:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff faa7 	bl	8003a32 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 80044e4:	f00a f98e 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 80044e8:	4604      	mov	r4, r0
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	3338      	adds	r3, #56	; 0x38
 80044ee:	681d      	ldr	r5, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	4413      	add	r3, r2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461e      	mov	r6, r3
 8004504:	f00a f98e 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004508:	4603      	mov	r3, r0
 800450a:	9302      	str	r3, [sp, #8]
 800450c:	2365      	movs	r3, #101	; 0x65
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4b14      	ldr	r3, [pc, #80]	; (8004568 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004516:	4632      	mov	r2, r6
 8004518:	2100      	movs	r1, #0
 800451a:	4620      	mov	r0, r4
 800451c:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 800451e:	f00a f971 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 8004522:	4604      	mov	r4, r0
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	3338      	adds	r3, #56	; 0x38
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	4413      	add	r3, r2
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461e      	mov	r6, r3
 800453e:	f00a f971 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004542:	4603      	mov	r3, r0
 8004544:	9302      	str	r3, [sp, #8]
 8004546:	2366      	movs	r3, #102	; 0x66
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004550:	4632      	mov	r2, r6
 8004552:	2100      	movs	r1, #0
 8004554:	4620      	mov	r0, r4
 8004556:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004560:	0801562c 	.word	0x0801562c
 8004564:	080157a8 	.word	0x080157a8
 8004568:	080157e4 	.word	0x080157e4
 800456c:	08015820 	.word	0x08015820

08004570 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	4a05      	ldr	r2, [pc, #20]	; (8004590 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4618      	mov	r0, r3
 8004582:	f008 fded 	bl	800d160 <_ZN10UtestShellD1Ev>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	080177e0 	.word	0x080177e0

08004594 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ffe7 	bl	8004570 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80045a2:	211c      	movs	r1, #28
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 ff95 	bl	80064d4 <_ZdlPvj>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fc35 	bl	8003e34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	0801788c 	.word	0x0801788c

080045d8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ffe7 	bl	80045b4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80045e6:	2108      	movs	r1, #8
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f001 ff73 	bl	80064d4 <_ZdlPvj>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	4a05      	ldr	r2, [pc, #20]	; (8004618 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4618      	mov	r0, r3
 800460a:	f008 fda9 	bl	800d160 <_ZN10UtestShellD1Ev>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	080178ac 	.word	0x080178ac

0800461c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ffe7 	bl	80045f8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 800462a:	211c      	movs	r1, #28
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 ff51 	bl	80064d4 <_ZdlPvj>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	4a05      	ldr	r2, [pc, #20]	; (800465c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fbf1 	bl	8003e34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	08017958 	.word	0x08017958

08004660 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff ffe7 	bl	800463c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 800466e:	2108      	movs	r1, #8
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f001 ff2f 	bl	80064d4 <_ZdlPvj>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	f008 fd65 	bl	800d160 <_ZN10UtestShellD1Ev>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	08017978 	.word	0x08017978

080046a4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ffe7 	bl	8004680 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80046b2:	211c      	movs	r1, #28
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f001 ff0d 	bl	80064d4 <_ZdlPvj>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	4a05      	ldr	r2, [pc, #20]	; (80046e4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fbad 	bl	8003e34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	08017a24 	.word	0x08017a24

080046e8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff ffe7 	bl	80046c4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 80046f6:	2108      	movs	r1, #8
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 feeb 	bl	80064d4 <_ZdlPvj>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4618      	mov	r0, r3
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	4a05      	ldr	r2, [pc, #20]	; (8004728 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4618      	mov	r0, r3
 800471a:	f008 fd21 	bl	800d160 <_ZN10UtestShellD1Ev>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	08017a44 	.word	0x08017a44

0800472c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ffe7 	bl	8004708 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 800473a:	211c      	movs	r1, #28
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f001 fec9 	bl	80064d4 <_ZdlPvj>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	4a05      	ldr	r2, [pc, #20]	; (800476c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fb69 	bl	8003e34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	08017af0 	.word	0x08017af0

08004770 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ffe7 	bl	800474c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 800477e:	2108      	movs	r1, #8
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fea7 	bl	80064d4 <_ZdlPvj>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f008 fcdd 	bl	800d160 <_ZN10UtestShellD1Ev>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	08017b10 	.word	0x08017b10

080047b4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ffe7 	bl	8004790 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 80047c2:	211c      	movs	r1, #28
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f001 fe85 	bl	80064d4 <_ZdlPvj>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fb25 	bl	8003e34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	08017bbc 	.word	0x08017bbc

080047f8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ffe7 	bl	80047d4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8004806:	2108      	movs	r1, #8
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f001 fe63 	bl	80064d4 <_ZdlPvj>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	4a05      	ldr	r2, [pc, #20]	; (8004838 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4618      	mov	r0, r3
 800482a:	f008 fc99 	bl	800d160 <_ZN10UtestShellD1Ev>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	08017bdc 	.word	0x08017bdc

0800483c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ffe7 	bl	8004818 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 800484a:	211c      	movs	r1, #28
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f001 fe41 	bl	80064d4 <_ZdlPvj>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	4a05      	ldr	r2, [pc, #20]	; (800487c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fae1 	bl	8003e34 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	08017c88 	.word	0x08017c88

08004880 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ffe7 	bl	800485c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 800488e:	2108      	movs	r1, #8
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f001 fe1f 	bl	80064d4 <_ZdlPvj>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d152      	bne.n	8004956 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d14d      	bne.n	8004956 <_Z41__static_initialization_and_destruction_0ii+0xb6>
TEST(RingBuffer_Test_Group, InitTest)
 80048ba:	483f      	ldr	r0, [pc, #252]	; (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80048bc:	f7ff fb08 	bl	8003ed0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80048c0:	2322      	movs	r3, #34	; 0x22
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	4b3d      	ldr	r3, [pc, #244]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4b3d      	ldr	r3, [pc, #244]	; (80049c0 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80048ca:	4a3e      	ldr	r2, [pc, #248]	; (80049c4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80048cc:	493a      	ldr	r1, [pc, #232]	; (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80048ce:	483e      	ldr	r0, [pc, #248]	; (80049c8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80048d0:	f00a fa30 	bl	800ed34 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80048d4:	483d      	ldr	r0, [pc, #244]	; (80049cc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80048d6:	f7ff fbaf 	bl	8004038 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 80048da:	232c      	movs	r3, #44	; 0x2c
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	4b37      	ldr	r3, [pc, #220]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80048e4:	4a37      	ldr	r2, [pc, #220]	; (80049c4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80048e6:	4939      	ldr	r1, [pc, #228]	; (80049cc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80048e8:	483a      	ldr	r0, [pc, #232]	; (80049d4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80048ea:	f00a fa23 	bl	800ed34 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80048ee:	483a      	ldr	r0, [pc, #232]	; (80049d8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80048f0:	f7ff fc2c 	bl	800414c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 80048f4:	2336      	movs	r3, #54	; 0x36
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	4b30      	ldr	r3, [pc, #192]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	4b37      	ldr	r3, [pc, #220]	; (80049dc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80048fe:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004900:	4935      	ldr	r1, [pc, #212]	; (80049d8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004902:	4837      	ldr	r0, [pc, #220]	; (80049e0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004904:	f00a fa16 	bl	800ed34 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8004908:	4836      	ldr	r0, [pc, #216]	; (80049e4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800490a:	f7ff fca7 	bl	800425c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800490e:	2341      	movs	r3, #65	; 0x41
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800491a:	4932      	ldr	r1, [pc, #200]	; (80049e4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 800491c:	4833      	ldr	r0, [pc, #204]	; (80049ec <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800491e:	f00a fa09 	bl	800ed34 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004922:	4833      	ldr	r0, [pc, #204]	; (80049f0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004924:	f7ff fd06 	bl	8004334 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8004928:	234a      	movs	r3, #74	; 0x4a
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	4b23      	ldr	r3, [pc, #140]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004932:	4a24      	ldr	r2, [pc, #144]	; (80049c4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004934:	492e      	ldr	r1, [pc, #184]	; (80049f0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004936:	4830      	ldr	r0, [pc, #192]	; (80049f8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004938:	f00a f9fc 	bl	800ed34 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800493c:	482f      	ldr	r0, [pc, #188]	; (80049fc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800493e:	f7ff fd85 	bl	800444c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8004942:	235a      	movs	r3, #90	; 0x5a
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4b2d      	ldr	r3, [pc, #180]	; (8004a00 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800494e:	492b      	ldr	r1, [pc, #172]	; (80049fc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004950:	482c      	ldr	r0, [pc, #176]	; (8004a04 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004952:	f00a f9ef 	bl	800ed34 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d128      	bne.n	80049ae <_Z41__static_initialization_and_destruction_0ii+0x10e>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004962:	4293      	cmp	r3, r2
 8004964:	d123      	bne.n	80049ae <_Z41__static_initialization_and_destruction_0ii+0x10e>
 8004966:	4827      	ldr	r0, [pc, #156]	; (8004a04 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004968:	f00a fa0e 	bl	800ed88 <_ZN13TestInstallerD1Ev>
 800496c:	4823      	ldr	r0, [pc, #140]	; (80049fc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800496e:	f7ff fdff 	bl	8004570 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004972:	4821      	ldr	r0, [pc, #132]	; (80049f8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004974:	f00a fa08 	bl	800ed88 <_ZN13TestInstallerD1Ev>
 8004978:	481d      	ldr	r0, [pc, #116]	; (80049f0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800497a:	f7ff fe3d 	bl	80045f8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 800497e:	481b      	ldr	r0, [pc, #108]	; (80049ec <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004980:	f00a fa02 	bl	800ed88 <_ZN13TestInstallerD1Ev>
 8004984:	4817      	ldr	r0, [pc, #92]	; (80049e4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004986:	f7ff fe7b 	bl	8004680 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800498a:	4815      	ldr	r0, [pc, #84]	; (80049e0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800498c:	f00a f9fc 	bl	800ed88 <_ZN13TestInstallerD1Ev>
 8004990:	4811      	ldr	r0, [pc, #68]	; (80049d8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004992:	f7ff feb9 	bl	8004708 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8004996:	480f      	ldr	r0, [pc, #60]	; (80049d4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004998:	f00a f9f6 	bl	800ed88 <_ZN13TestInstallerD1Ev>
 800499c:	480b      	ldr	r0, [pc, #44]	; (80049cc <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800499e:	f7ff fef7 	bl	8004790 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 80049a2:	4809      	ldr	r0, [pc, #36]	; (80049c8 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80049a4:	f00a f9f0 	bl	800ed88 <_ZN13TestInstallerD1Ev>
 80049a8:	4803      	ldr	r0, [pc, #12]	; (80049b8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 80049aa:	f7ff ff35 	bl	8004818 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000478 	.word	0x20000478
 80049bc:	0801562c 	.word	0x0801562c
 80049c0:	08015858 	.word	0x08015858
 80049c4:	08015864 	.word	0x08015864
 80049c8:	20000494 	.word	0x20000494
 80049cc:	20000498 	.word	0x20000498
 80049d0:	0801587c 	.word	0x0801587c
 80049d4:	200004b4 	.word	0x200004b4
 80049d8:	200004b8 	.word	0x200004b8
 80049dc:	0801588c 	.word	0x0801588c
 80049e0:	200004d4 	.word	0x200004d4
 80049e4:	200004d8 	.word	0x200004d8
 80049e8:	080158a0 	.word	0x080158a0
 80049ec:	200004f4 	.word	0x200004f4
 80049f0:	200004f8 	.word	0x200004f8
 80049f4:	080158b0 	.word	0x080158b0
 80049f8:	20000514 	.word	0x20000514
 80049fc:	20000518 	.word	0x20000518
 8004a00:	080158c8 	.word	0x080158c8
 8004a04:	20000534 	.word	0x20000534

08004a08 <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a10:	2001      	movs	r0, #1
 8004a12:	f7ff ff45 	bl	80048a0 <_Z41__static_initialization_and_destruction_0ii>
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a20:	2000      	movs	r0, #0
 8004a22:	f7ff ff3d 	bl	80048a0 <_Z41__static_initialization_and_destruction_0ii>
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
    }
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
    }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
    }
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8004a70:	b590      	push	{r4, r7, lr}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ffed 	bl	8004a58 <_ZNK10TestResult15getFailureCountEv>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <_ZNK10TestResult9isFailureEv+0x2a>
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ffcf 	bl	8004a28 <_ZNK10TestResult11getRunCountEv>
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ffd7 	bl	8004a40 <_ZNK10TestResult15getIgnoredCountEv>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4423      	add	r3, r4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <_ZNK10TestResult9isFailureEv+0x2e>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <_ZNK10TestResult9isFailureEv+0x30>
 8004a9e:	2300      	movs	r3, #0
    }
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}

08004aa8 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
    {
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f005 fffe 	bl	800aab4 <_ZN10TestOutputC1Ev>
 8004ab8:	4a03      	ldr	r2, [pc, #12]	; (8004ac8 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
    }
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	080181e8 	.word	0x080181e8

08004acc <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
    {
 8004ad4:	4a05      	ldr	r2, [pc, #20]	; (8004aec <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f006 f807 	bl	800aaf0 <_ZN10TestOutputD1Ev>
    }
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	080181e8 	.word	0x080181e8

08004af0 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
    }
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ffe7 	bl	8004acc <_ZN17ConsoleTestOutputD1Ev>
 8004afe:	2110      	movs	r1, #16
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f001 fce7 	bl	80064d4 <_ZdlPvj>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8004b10:	b5b0      	push	{r4, r5, r7, lr}
 8004b12:	b098      	sub	sp, #96	; 0x60
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
    int result = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8004b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ffc0 	bl	8004aa8 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8004b28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b2c:	4935      	ldr	r1, [pc, #212]	; (8004c04 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f002 fba5 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8004b34:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004b38:	f107 0318 	add.w	r3, r7, #24
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 ff6a 	bl	8006a18 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8004b44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f002 ff50 	bl	80079ee <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8004b4e:	f107 0318 	add.w	r3, r7, #24
 8004b52:	2101      	movs	r1, #1
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 ff2f 	bl	80069b8 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8004b5a:	f007 fd39 	bl	800c5d0 <_ZN12TestRegistry18getCurrentRegistryEv>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	3234      	adds	r2, #52	; 0x34
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	f107 0118 	add.w	r1, r7, #24
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8004b6e:	f007 fd2f 	bl	800c5d0 <_ZN12TestRegistry18getCurrentRegistryEv>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f107 0008 	add.w	r0, r7, #8
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	f000 f844 	bl	8004c08 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f899 	bl	8004cbc <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8004b8a:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f863 	bl	8004c5c <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8004b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10c      	bne.n	8004bb6 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8004b9c:	f107 0318 	add.w	r3, r7, #24
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f002 f83a 	bl	8006c1c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f006 f83f 	bl	800ac34 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8004bb6:	f007 fd0b 	bl	800c5d0 <_ZN12TestRegistry18getCurrentRegistryEv>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	3344      	adds	r3, #68	; 0x44
 8004bc0:	681d      	ldr	r5, [r3, #0]
 8004bc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bc6:	490f      	ldr	r1, [pc, #60]	; (8004c04 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f002 fb58 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8004bce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	47a8      	blx	r5
 8004bd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f002 ff06 	bl	80079ee <_ZN12SimpleStringD1Ev>
    return result;
 8004be2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8004be4:	f107 0318 	add.w	r3, r7, #24
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 ff4d 	bl	8006a88 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8004bee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff6a 	bl	8004acc <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8004bf8:	4623      	mov	r3, r4
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3760      	adds	r7, #96	; 0x60
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bdb0      	pop	{r4, r5, r7, pc}
 8004c02:	bf00      	nop
 8004c04:	080158d8 	.word	0x080158d8

08004c08 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8004c16:	4a0f      	ldr	r2, [pc, #60]	; (8004c54 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	605a      	str	r2, [r3, #4]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8004c2e:	2241      	movs	r2, #65	; 0x41
 8004c30:	4909      	ldr	r1, [pc, #36]	; (8004c58 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8004c32:	2038      	movs	r0, #56	; 0x38
 8004c34:	f001 fc3a 	bl	80064ac <_ZnwjPKci>
 8004c38:	4604      	mov	r4, r0
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f00a fa50 	bl	800f0e4 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	609c      	str	r4, [r3, #8]
}
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	08017cc8 	.word	0x08017cc8
 8004c58:	080158ec 	.word	0x080158ec

08004c5c <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	3204      	adds	r2, #4
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	4790      	blx	r2
    delete output_;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	3204      	adds	r2, #4
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	4790      	blx	r2
}
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	08017cc8 	.word	0x08017cc8

08004c9c <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
}
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ffd9 	bl	8004c5c <_ZN21CommandLineTestRunnerD1Ev>
 8004caa:	2110      	movs	r1, #16
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f001 fc11 	bl	80064d4 <_ZdlPvj>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8004cbc:	b5b0      	push	{r4, r5, r7, lr}
 8004cbe:	b08c      	sub	sp, #48	; 0x30
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	4929      	ldr	r1, [pc, #164]	; (8004d74 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f002 fad5 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8004cd4:	f107 021c 	add.w	r2, r7, #28
 8004cd8:	f107 0308 	add.w	r3, r7, #8
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f007 f834 	bl	800bd4c <_ZN16SetPointerPluginC1ERK12SimpleString>
 8004ce4:	f107 031c 	add.w	r3, r7, #28
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f002 fe80 	bl	80079ee <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3334      	adds	r3, #52	; 0x34
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f107 0108 	add.w	r1, r7, #8
 8004d00:	4610      	mov	r0, r2
 8004d02:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	333c      	adds	r3, #60	; 0x3c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4610      	mov	r0, r2
 8004d14:	4798      	blx	r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa3e 	bl	800519c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8ac 	bl	8004e84 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8004d2c:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68dd      	ldr	r5, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3344      	adds	r3, #68	; 0x44
 8004d3a:	681c      	ldr	r4, [r3, #0]
 8004d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d40:	490c      	ldr	r1, [pc, #48]	; (8004d74 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	f002 fa9b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8004d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47a0      	blx	r4
 8004d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d56:	4618      	mov	r0, r3
 8004d58:	f002 fe49 	bl	80079ee <_ZN12SimpleStringD1Ev>
    return testResult;
 8004d5c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 faaa 	bl	80052bc <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8004d68:	4623      	mov	r3, r4
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3730      	adds	r7, #48	; 0x30
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bdb0      	pop	{r4, r5, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	08015910 	.word	0x08015910

08004d78 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8004d78:	b5b0      	push	{r4, r5, r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68dd      	ldr	r5, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3330      	adds	r3, #48	; 0x30
 8004d8c:	681c      	ldr	r4, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f00a fee6 	bl	800fb64 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68dd      	ldr	r5, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	332c      	adds	r3, #44	; 0x2c
 8004dac:	681c      	ldr	r4, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f00a fee2 	bl	800fb7c <_ZNK20CommandLineArguments14getNameFiltersEv>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f00a fe31 	bl	800fa2c <_ZNK20CommandLineArguments9isVerboseEv>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d009      	beq.n	8004de4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3320      	adds	r3, #32
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2101      	movs	r1, #1
 8004de0:	4610      	mov	r0, r2
 8004de2:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f00a fe2b 	bl	800fa44 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d009      	beq.n	8004e08 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3320      	adds	r3, #32
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2102      	movs	r1, #2
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f00a fe25 	bl	800fa5c <_ZNK20CommandLineArguments7isColorEv>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3324      	adds	r3, #36	; 0x24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4610      	mov	r0, r2
 8004e28:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f00a fe50 	bl	800fad4 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3360      	adds	r3, #96	; 0x60
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f00a fe33 	bl	800fabc <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d004      	beq.n	8004e66 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f007 fc31 	bl	800c6c8 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f00a fe56 	bl	800fb1c <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8004e76:	f009 fce1 	bl	800e83c <_ZN10UtestShell14setCrashOnFailEv>
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004e84 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b094      	sub	sp, #80	; 0x50
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ff73 	bl	8004d78 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f00a fe22 	bl	800faec <_ZNK20CommandLineArguments14getRepeatCountEv>
 8004ea8:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f00a fde0 	bl	800fa74 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d019      	beq.n	8004eee <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f007 fdc7 	bl	800ca58 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f107 0108 	add.w	r1, r7, #8
 8004edc:	4610      	mov	r0, r2
 8004ede:	4798      	blx	r3
        return 0;
 8004ee0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8004ee2:	f107 0308 	add.w	r3, r7, #8
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f007 fdee 	bl	800cac8 <_ZN10TestResultD1Ev>
 8004eec:	e0e1      	b.n	80050b2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f00a fdca 	bl	800fa8c <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d019      	beq.n	8004f32 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	f107 0308 	add.w	r3, r7, #8
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f007 fda5 	bl	800ca58 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f107 0108 	add.w	r1, r7, #8
 8004f20:	4610      	mov	r0, r2
 8004f22:	4798      	blx	r3
        return 0;
 8004f24:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8004f26:	f107 0308 	add.w	r3, r7, #8
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f007 fdcc 	bl	800cac8 <_ZN10TestResultD1Ev>
 8004f30:	e0bf      	b.n	80050b2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f00a fdb4 	bl	800faa4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d019      	beq.n	8004f76 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	f107 0308 	add.w	r3, r7, #8
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f007 fd83 	bl	800ca58 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3328      	adds	r3, #40	; 0x28
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f107 0108 	add.w	r1, r7, #8
 8004f64:	4610      	mov	r0, r2
 8004f66:	4798      	blx	r3
        return 0;
 8004f68:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8004f6a:	f107 0308 	add.w	r3, r7, #8
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f007 fdaa 	bl	800cac8 <_ZN10TestResultD1Ev>
 8004f74:	e09d      	b.n	80050b2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f00a fdc2 	bl	800fb04 <_ZNK20CommandLineArguments11isReversingEv>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	331c      	adds	r3, #28
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4610      	mov	r0, r2
 8004f96:	4798      	blx	r3

    if (arguments_->isShuffling())
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f00a fdc9 	bl	800fb34 <_ZNK20CommandLineArguments11isShufflingEv>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d023      	beq.n	8004ff0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	332c      	adds	r3, #44	; 0x2c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4941      	ldr	r1, [pc, #260]	; (80050bc <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8004fb8:	4610      	mov	r0, r2
 8004fba:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685d      	ldr	r5, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3334      	adds	r3, #52	; 0x34
 8004fc8:	681c      	ldr	r4, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f00a fdbc 	bl	800fb4c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4628      	mov	r0, r5
 8004fda:	47a0      	blx	r4
        output_->print("\n");
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	332c      	adds	r3, #44	; 0x2c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4935      	ldr	r1, [pc, #212]	; (80050c0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8004fec:	4610      	mov	r0, r2
 8004fee:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	bf8c      	ite	hi
 8004ffc:	2301      	movhi	r3, #1
 8004ffe:	2300      	movls	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d04e      	beq.n	80050a4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f00a fd92 	bl	800fb34 <_ZNK20CommandLineArguments11isShufflingEv>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00f      	beq.n	8005036 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68dd      	ldr	r5, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3318      	adds	r3, #24
 8005022:	681c      	ldr	r4, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4618      	mov	r0, r3
 800502a:	f00a fd8f 	bl	800fb4c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800502e:	4603      	mov	r3, r0
 8005030:	4619      	mov	r1, r3
 8005032:	4628      	mov	r0, r5
 8005034:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6858      	ldr	r0, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3340      	adds	r3, #64	; 0x40
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005046:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005048:	4798      	blx	r3
        TestResult tr(*output_);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f007 fcff 	bl	800ca58 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3314      	adds	r3, #20
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f107 0108 	add.w	r1, r7, #8
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8005070:	f107 0308 	add.w	r3, r7, #8
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fcef 	bl	8004a58 <_ZNK10TestResult15getFailureCountEv>
 800507a:	4602      	mov	r2, r0
 800507c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507e:	4413      	add	r3, r2
 8005080:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fcf2 	bl	8004a70 <_ZNK10TestResult9isFailureEv>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8005092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005094:	3301      	adds	r3, #1
 8005096:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8005098:	f107 0308 	add.w	r3, r7, #8
 800509c:	4618      	mov	r0, r3
 800509e:	f007 fd13 	bl	800cac8 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80050a2:	e7a5      	b.n	8004ff0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80050a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80050aa:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80050ac:	e000      	b.n	80050b0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80050ae:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80050b0:	bf00      	nop
 80050b2:	4623      	mov	r3, r4
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3750      	adds	r7, #80	; 0x50
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bdb0      	pop	{r4, r5, r7, pc}
 80050bc:	08015924 	.word	0x08015924
 80050c0:	08015950 	.word	0x08015950

080050c4 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 80050cc:	229d      	movs	r2, #157	; 0x9d
 80050ce:	4906      	ldr	r1, [pc, #24]	; (80050e8 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80050d0:	201c      	movs	r0, #28
 80050d2:	f001 f9eb 	bl	80064ac <_ZnwjPKci>
 80050d6:	4604      	mov	r4, r0
 80050d8:	4620      	mov	r0, r4
 80050da:	f003 fb6d 	bl	80087b8 <_ZN18TeamCityTestOutputC1Ev>
 80050de:	4623      	mov	r3, r4
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd90      	pop	{r4, r7, pc}
 80050e8:	080158ec 	.word	0x080158ec

080050ec <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 80050f6:	22a2      	movs	r2, #162	; 0xa2
 80050f8:	490a      	ldr	r1, [pc, #40]	; (8005124 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 80050fa:	2014      	movs	r0, #20
 80050fc:	f001 f9d6 	bl	80064ac <_ZnwjPKci>
 8005100:	4604      	mov	r4, r0
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f980 	bl	8005408 <_ZN15JUnitTestOutputC1Ev>
 8005108:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fbb2 	bl	800587c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8005118:	68fb      	ldr	r3, [r7, #12]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	bd90      	pop	{r4, r7, pc}
 8005122:	bf00      	nop
 8005124:	080158ec 	.word	0x080158ec

08005128 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8005130:	22ab      	movs	r2, #171	; 0xab
 8005132:	4906      	ldr	r1, [pc, #24]	; (800514c <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8005134:	2010      	movs	r0, #16
 8005136:	f001 f9b9 	bl	80064ac <_ZnwjPKci>
 800513a:	4604      	mov	r4, r0
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff fcb3 	bl	8004aa8 <_ZN17ConsoleTestOutputC1Ev>
 8005142:	4623      	mov	r3, r4
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	bd90      	pop	{r4, r7, pc}
 800514c:	080158ec 	.word	0x080158ec

08005150 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 800515c:	22b0      	movs	r2, #176	; 0xb0
 800515e:	490e      	ldr	r1, [pc, #56]	; (8005198 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8005160:	2018      	movs	r0, #24
 8005162:	f001 f9a3 	bl	80064ac <_ZnwjPKci>
 8005166:	4604      	mov	r4, r0
 8005168:	4620      	mov	r0, r4
 800516a:	f006 f99b 	bl	800b4a4 <_ZN19CompositeTestOutputC1Ev>
 800516e:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	335c      	adds	r3, #92	; 0x5c
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	6978      	ldr	r0, [r7, #20]
 800517c:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3360      	adds	r3, #96	; 0x60
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	6978      	ldr	r0, [r7, #20]
 800518a:	4798      	blx	r3
  return composite;
 800518c:	697b      	ldr	r3, [r7, #20]
}
 800518e:	4618      	mov	r0, r3
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	bd90      	pop	{r4, r7, pc}
 8005196:	bf00      	nop
 8005198:	080158ec 	.word	0x080158ec

0800519c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 800519c:	b5b0      	push	{r4, r5, r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f00a f855 	bl	800f25c <_ZN20CommandLineArguments5parseEP10TestPlugin>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f083 0301 	eor.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d029      	beq.n	8005212 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3310      	adds	r3, #16
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
 80051ca:	4602      	mov	r2, r0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685d      	ldr	r5, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	332c      	adds	r3, #44	; 0x2c
 80051dc:	681c      	ldr	r4, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f00a fc16 	bl	800fa14 <_ZNK20CommandLineArguments8needHelpEv>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f00a fc00 	bl	800f9f8 <_ZNK20CommandLineArguments4helpEv>
 80051f8:	4603      	mov	r3, r0
 80051fa:	e005      	b.n	8005208 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f00a fbeb 	bl	800f9dc <_ZNK20CommandLineArguments5usageEv>
 8005206:	4603      	mov	r3, r0
 8005208:	4619      	mov	r1, r3
 800520a:	4628      	mov	r0, r5
 800520c:	47a0      	blx	r4
    return false;
 800520e:	2300      	movs	r3, #0
 8005210:	e050      	b.n	80052b4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f00b fa52 	bl	80106c0 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d02c      	beq.n	800527c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	681c      	ldr	r4, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	4618      	mov	r0, r3
 8005230:	f00b fa6a 	bl	8010708 <_ZNK20CommandLineArguments14getPackageNameEv>
 8005234:	4603      	mov	r3, r0
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	47a0      	blx	r4
 800523c:	4602      	mov	r2, r0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	4618      	mov	r0, r3
 8005248:	f00a fbf0 	bl	800fa2c <_ZNK20CommandLineArguments9isVerboseEv>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d02f      	beq.n	80052b2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	681c      	ldr	r4, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685d      	ldr	r5, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3310      	adds	r3, #16
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	4629      	mov	r1, r5
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	47a0      	blx	r4
 8005274:	4602      	mov	r2, r0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	e01a      	b.n	80052b2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f00b fa2f 	bl	80106e4 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
 8005298:	4602      	mov	r2, r0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	e008      	b.n	80052b2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3310      	adds	r3, #16
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
 80052ac:	4602      	mov	r2, r0
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	605a      	str	r2, [r3, #4]
  return true;
 80052b2:	2301      	movs	r3, #1
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bdb0      	pop	{r4, r5, r7, pc}

080052bc <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	4a05      	ldr	r2, [pc, #20]	; (80052dc <_ZN16SetPointerPluginD1Ev+0x20>)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f006 fbff 	bl	800bad0 <_ZN10TestPluginD1Ev>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	080182f4 	.word	0x080182f4

080052e0 <_ZN16SetPointerPluginD0Ev>:
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff ffe7 	bl	80052bc <_ZN16SetPointerPluginD1Ev>
 80052ee:	2114      	movs	r1, #20
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 f8ef 	bl	80064d4 <_ZdlPvj>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
    }
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4910      	ldr	r1, [pc, #64]	; (8005364 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8005324:	4618      	mov	r0, r3
 8005326:	f001 ffaa 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	741a      	strb	r2, [r3, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3314      	adds	r3, #20
 8005340:	4908      	ldr	r1, [pc, #32]	; (8005364 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8005342:	4618      	mov	r0, r3
 8005344:	f001 ff9b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	61da      	str	r2, [r3, #28]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	621a      	str	r2, [r3, #32]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	08015954 	.word	0x08015954

08005368 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	605a      	str	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	609a      	str	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	611a      	str	r2, [r3, #16]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3314      	adds	r3, #20
 8005392:	4907      	ldr	r1, [pc, #28]	; (80053b0 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8005394:	4618      	mov	r0, r3
 8005396:	f001 ff72 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	61da      	str	r2, [r3, #28]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	621a      	str	r2, [r3, #32]
    {
    }
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	08015954 	.word	0x08015954

080053b4 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3314      	adds	r3, #20
 80053c0:	4618      	mov	r0, r3
 80053c2:	f002 fb14 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff ffc4 	bl	8005368 <_ZN20JUnitTestGroupResultC1Ev>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3328      	adds	r3, #40	; 0x28
 80053e4:	4907      	ldr	r1, [pc, #28]	; (8005404 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 ff49 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3330      	adds	r3, #48	; 0x30
 80053f0:	4904      	ldr	r1, [pc, #16]	; (8005404 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 ff43 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	08015954 	.word	0x08015954

08005408 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8005408:	b590      	push	{r4, r7, lr}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4618      	mov	r0, r3
 8005414:	f005 fb4e 	bl	800aab4 <_ZN10TestOutputC1Ev>
 8005418:	4a09      	ldr	r2, [pc, #36]	; (8005440 <_ZN15JUnitTestOutputC1Ev+0x38>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	224d      	movs	r2, #77	; 0x4d
 8005420:	4908      	ldr	r1, [pc, #32]	; (8005444 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8005422:	2038      	movs	r0, #56	; 0x38
 8005424:	f001 f842 	bl	80064ac <_ZnwjPKci>
 8005428:	4604      	mov	r4, r0
 800542a:	4620      	mov	r0, r4
 800542c:	f7ff ffd0 	bl	80053d0 <_ZN19JUnitTestOutputImplC1Ev>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	611c      	str	r4, [r3, #16]
{
}
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	bd90      	pop	{r4, r7, pc}
 800543e:	bf00      	nop
 8005440:	08017ce8 	.word	0x08017ce8
 8005444:	08015958 	.word	0x08015958

08005448 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3330      	adds	r3, #48	; 0x30
 8005454:	4618      	mov	r0, r3
 8005456:	f002 faca 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3328      	adds	r3, #40	; 0x28
 800545e:	4618      	mov	r0, r3
 8005460:	f002 fac5 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ffa4 	bl	80053b4 <_ZN20JUnitTestGroupResultD1Ev>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	4a0c      	ldr	r2, [pc, #48]	; (80054b4 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f838 	bl	80054fc <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691c      	ldr	r4, [r3, #16]
 8005490:	2c00      	cmp	r4, #0
 8005492:	d006      	beq.n	80054a2 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8005494:	4620      	mov	r0, r4
 8005496:	f7ff ffd7 	bl	8005448 <_ZN19JUnitTestOutputImplD1Ev>
 800549a:	2138      	movs	r1, #56	; 0x38
 800549c:	4620      	mov	r0, r4
 800549e:	f001 f819 	bl	80064d4 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f005 fb23 	bl	800aaf0 <_ZN10TestOutputD1Ev>
}
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd90      	pop	{r4, r7, pc}
 80054b4:	08017ce8 	.word	0x08017ce8

080054b8 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
}
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff ffd9 	bl	8005478 <_ZN15JUnitTestOutputD1Ev>
 80054c6:	2114      	movs	r1, #20
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 f803 	bl	80064d4 <_ZdlPvj>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3314      	adds	r3, #20
 80054e4:	4618      	mov	r0, r3
 80054e6:	f002 fa82 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f002 fa7e 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2200      	movs	r2, #0
 8005512:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f103 0414 	add.w	r4, r3, #20
 800551c:	f107 0308 	add.w	r3, r7, #8
 8005520:	491d      	ldr	r1, [pc, #116]	; (8005598 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8005522:	4618      	mov	r0, r3
 8005524:	f001 feab 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005528:	f107 0308 	add.w	r3, r7, #8
 800552c:	4619      	mov	r1, r3
 800552e:	4620      	mov	r0, r4
 8005530:	f001 ff11 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8005534:	f107 0308 	add.w	r3, r7, #8
 8005538:	4618      	mov	r0, r3
 800553a:	f002 fa58 	bl	80079ee <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	617b      	str	r3, [r7, #20]
    while (cur) {
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d018      	beq.n	800557e <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	3204      	adds	r2, #4
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	4790      	blx	r2
        delete cur;
 8005564:	697c      	ldr	r4, [r7, #20]
 8005566:	2c00      	cmp	r4, #0
 8005568:	d006      	beq.n	8005578 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff ffb4 	bl	80054d8 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8005570:	2128      	movs	r1, #40	; 0x28
 8005572:	4620      	mov	r0, r4
 8005574:	f000 ffae 	bl	80064d4 <_ZdlPvj>
        cur = tmp;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	617b      	str	r3, [r7, #20]
    while (cur) {
 800557c:	e7e3      	b.n	8005546 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2200      	movs	r2, #0
 8005584:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2200      	movs	r2, #0
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	08015954 	.word	0x08015954

0800559c <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
}
 80055ba:	bf00      	nop
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 80055c6:	b590      	push	{r4, r7, lr}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	6a1c      	ldr	r4, [r3, #32]
 80055d6:	6838      	ldr	r0, [r7, #0]
 80055d8:	f007 fbde 	bl	800cd98 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80055dc:	4603      	mov	r3, r0
 80055de:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	6a1c      	ldr	r4, [r3, #32]
 80055e6:	6838      	ldr	r0, [r7, #0]
 80055e8:	f7ff fe8a 	bl	8005300 <_ZNK10TestResult13getCheckCountEv>
 80055ec:	4603      	mov	r3, r0
 80055ee:	6223      	str	r3, [r4, #32]
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd90      	pop	{r4, r7, pc}

080055f8 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800560e:	b590      	push	{r4, r7, lr}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691c      	ldr	r4, [r3, #16]
 800561c:	6838      	ldr	r0, [r7, #0]
 800561e:	f007 fbc7 	bl	800cdb0 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8005622:	4603      	mov	r3, r0
 8005624:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3364      	adds	r3, #100	; 0x64
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
    resetTestGroupResult();
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff ff62 	bl	80054fc <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bd90      	pop	{r4, r7, pc}

08005640 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	3201      	adds	r2, #1
 8005652:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f103 0414 	add.w	r4, r3, #20
 800565c:	f107 0308 	add.w	r3, r7, #8
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f007 ff07 	bl	800d476 <_ZNK10UtestShell8getGroupEv>
 8005668:	f107 0308 	add.w	r3, r7, #8
 800566c:	4619      	mov	r1, r3
 800566e:	4620      	mov	r0, r4
 8005670:	f001 fe71 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4618      	mov	r0, r3
 800567a:	f002 f9b8 	bl	80079ee <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800567e:	4b3c      	ldr	r3, [pc, #240]	; (8005770 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4798      	blx	r3
 8005684:	4602      	mov	r2, r0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d110      	bne.n	80056b8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8005696:	2288      	movs	r2, #136	; 0x88
 8005698:	4936      	ldr	r1, [pc, #216]	; (8005774 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800569a:	2028      	movs	r0, #40	; 0x28
 800569c:	f000 ff06 	bl	80064ac <_ZnwjPKci>
 80056a0:	4604      	mov	r4, r0
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7ff fe38 	bl	8005318 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 80056ac:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6912      	ldr	r2, [r2, #16]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	61d3      	str	r3, [r2, #28]
 80056b6:	e013      	b.n	80056e0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 80056b8:	228b      	movs	r2, #139	; 0x8b
 80056ba:	492e      	ldr	r1, [pc, #184]	; (8005774 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80056bc:	2028      	movs	r0, #40	; 0x28
 80056be:	f000 fef5 	bl	80064ac <_ZnwjPKci>
 80056c2:	4604      	mov	r4, r0
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7ff fe27 	bl	8005318 <_ZN23JUnitTestCaseResultNodeC1Ev>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056de:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	461c      	mov	r4, r3
 80056e8:	f107 0310 	add.w	r3, r7, #16
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f007 feb2 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 80056f4:	f107 0310 	add.w	r3, r7, #16
 80056f8:	4619      	mov	r1, r3
 80056fa:	4620      	mov	r0, r4
 80056fc:	f001 fe2b 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8005700:	f107 0310 	add.w	r3, r7, #16
 8005704:	4618      	mov	r0, r3
 8005706:	f002 f972 	bl	80079ee <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f103 0414 	add.w	r4, r3, #20
 8005714:	f107 0318 	add.w	r3, r7, #24
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f007 ff5c 	bl	800d5d8 <_ZNK10UtestShell7getFileEv>
 8005720:	f107 0318 	add.w	r3, r7, #24
 8005724:	4619      	mov	r1, r3
 8005726:	4620      	mov	r0, r4
 8005728:	f001 fe15 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 800572c:	f107 0318 	add.w	r3, r7, #24
 8005730:	4618      	mov	r0, r3
 8005732:	f002 f95c 	bl	80079ee <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	6a1c      	ldr	r4, [r3, #32]
 800573c:	6838      	ldr	r0, [r7, #0]
 800573e:	f007 ff5a 	bl	800d5f6 <_ZNK10UtestShell13getLineNumberEv>
 8005742:	4603      	mov	r3, r0
 8005744:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3318      	adds	r3, #24
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6838      	ldr	r0, [r7, #0]
 8005750:	4798      	blx	r3
 8005752:	4603      	mov	r3, r0
 8005754:	f083 0301 	eor.w	r3, r3, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	2201      	movs	r2, #1
 8005766:	741a      	strb	r2, [r3, #16]
    }
}
 8005768:	bf00      	nop
 800576a:	3724      	adds	r7, #36	; 0x24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd90      	pop	{r4, r7, pc}
 8005770:	200000a4 	.word	0x200000a4
 8005774:	08015958 	.word	0x08015958

08005778 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	4928      	ldr	r1, [pc, #160]	; (800582c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800578a:	4618      	mov	r0, r3
 800578c:	f001 fd77 	bl	800727e <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	3328      	adds	r3, #40	; 0x28
 8005796:	4618      	mov	r0, r3
 8005798:	f002 f918 	bl	80079cc <_ZNK12SimpleString7isEmptyEv>
 800579c:	4603      	mov	r3, r0
 800579e:	f083 0301 	eor.w	r3, r3, #1
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00f      	beq.n	80057c8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	4611      	mov	r1, r2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f002 f996 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 80057bc:	f107 0310 	add.w	r3, r7, #16
 80057c0:	491b      	ldr	r1, [pc, #108]	; (8005830 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 80057c2:	4618      	mov	r0, r3
 80057c4:	f002 f9a2 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 80057c8:	f107 0310 	add.w	r3, r7, #16
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f002 f98a 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3384      	adds	r3, #132	; 0x84
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f107 0018 	add.w	r0, r7, #24
 80057e0:	f107 0210 	add.w	r2, r7, #16
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4798      	blx	r3
 80057e8:	f107 0320 	add.w	r3, r7, #32
 80057ec:	4911      	ldr	r1, [pc, #68]	; (8005834 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fd45 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f107 0220 	add.w	r2, r7, #32
 80057fa:	f107 0118 	add.w	r1, r7, #24
 80057fe:	4618      	mov	r0, r3
 8005800:	f002 f957 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8005804:	f107 0320 	add.w	r3, r7, #32
 8005808:	4618      	mov	r0, r3
 800580a:	f002 f8f0 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800580e:	f107 0318 	add.w	r3, r7, #24
 8005812:	4618      	mov	r0, r3
 8005814:	f002 f8eb 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8005818:	f107 0310 	add.w	r3, r7, #16
 800581c:	4618      	mov	r0, r3
 800581e:	f002 f8e6 	bl	80079ee <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8005822:	bf00      	nop
}
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	3728      	adds	r7, #40	; 0x28
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	08015974 	.word	0x08015974
 8005830:	08015980 	.word	0x08015980
 8005834:	08015984 	.word	0x08015984

08005838 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 fd6d 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	225f      	movs	r2, #95	; 0x5f
 800585e:	4619      	mov	r1, r3
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f001 fef2 	bl	800764a <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e7f0      	b.n	8005850 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800586e:	bf00      	nop
}
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	0801598c 	.word	0x0801598c

0800587c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d006      	beq.n	800589c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	3328      	adds	r3, #40	; 0x28
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f001 fd5d 	bl	8007356 <_ZN12SimpleStringaSERKS_>
    }
}
 800589c:	bf00      	nop
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3368      	adds	r3, #104	; 0x68
 80058b2:	681c      	ldr	r4, [r3, #0]
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4908      	ldr	r1, [pc, #32]	; (80058dc <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 fcdf 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	47a0      	blx	r4
 80058ca:	f107 0308 	add.w	r3, r7, #8
 80058ce:	4618      	mov	r0, r3
 80058d0:	f002 f88d 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd90      	pop	{r4, r7, pc}
 80058dc:	08015998 	.word	0x08015998

080058e0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 80058e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e4:	b08a      	sub	sp, #40	; 0x28
 80058e6:	af04      	add	r7, sp, #16
 80058e8:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 80058f0:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 80058f6:	3314      	adds	r3, #20
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 f84b 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 80058fe:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8005906:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	4a23      	ldr	r2, [pc, #140]	; (800599c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8005916:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	4b1f      	ldr	r3, [pc, #124]	; (800599c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8005920:	fba3 1302 	umull	r1, r3, r3, r2
 8005924:	099b      	lsrs	r3, r3, #6
 8005926:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4798      	blx	r3
 8005938:	4603      	mov	r3, r0
 800593a:	f107 0008 	add.w	r0, r7, #8
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	9302      	str	r3, [sp, #8]
 8005944:	9601      	str	r6, [sp, #4]
 8005946:	9500      	str	r5, [sp, #0]
 8005948:	4623      	mov	r3, r4
 800594a:	4642      	mov	r2, r8
 800594c:	4915      	ldr	r1, [pc, #84]	; (80059a4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800594e:	f002 fcdb 	bl	8008308 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3368      	adds	r3, #104	; 0x68
 8005958:	681c      	ldr	r4, [r3, #0]
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f002 f818 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005964:	4602      	mov	r2, r0
 8005966:	f107 0310 	add.w	r3, r7, #16
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f001 fc86 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005972:	f107 0310 	add.w	r3, r7, #16
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	47a0      	blx	r4
 800597c:	f107 0310 	add.w	r3, r7, #16
 8005980:	4618      	mov	r0, r3
 8005982:	f002 f834 	bl	80079ee <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8005986:	f107 0308 	add.w	r3, r7, #8
 800598a:	4618      	mov	r0, r3
 800598c:	f002 f82f 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599a:	bf00      	nop
 800599c:	10624dd3 	.word	0x10624dd3
 80059a0:	200000a8 	.word	0x200000a8
 80059a4:	080159c4 	.word	0x080159c4

080059a8 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3368      	adds	r3, #104	; 0x68
 80059b6:	681c      	ldr	r4, [r3, #0]
 80059b8:	f107 0308 	add.w	r3, r7, #8
 80059bc:	4912      	ldr	r1, [pc, #72]	; (8005a08 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 fc5d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80059c4:	f107 0308 	add.w	r3, r7, #8
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	47a0      	blx	r4
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f002 f80b 	bl	80079ee <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3368      	adds	r3, #104	; 0x68
 80059de:	681c      	ldr	r4, [r3, #0]
 80059e0:	f107 0310 	add.w	r3, r7, #16
 80059e4:	4909      	ldr	r1, [pc, #36]	; (8005a0c <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 80059e6:	4618      	mov	r0, r3
 80059e8:	f001 fc49 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80059ec:	f107 0310 	add.w	r3, r7, #16
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	47a0      	blx	r4
 80059f6:	f107 0310 	add.w	r3, r7, #16
 80059fa:	4618      	mov	r0, r3
 80059fc:	f001 fff7 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8005a00:	bf00      	nop
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd90      	pop	{r4, r7, pc}
 8005a08:	08015a34 	.word	0x08015a34
 8005a0c:	08015a44 	.word	0x08015a44

08005a10 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 ffb9 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005a22:	4603      	mov	r3, r0
 8005a24:	4619      	mov	r1, r3
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f001 fc29 	bl	800727e <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8005a2c:	4a0e      	ldr	r2, [pc, #56]	; (8005a68 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8005a2e:	490f      	ldr	r1, [pc, #60]	; (8005a6c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f001 fe39 	bl	80076a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8005a36:	4a0e      	ldr	r2, [pc, #56]	; (8005a70 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8005a38:	490e      	ldr	r1, [pc, #56]	; (8005a74 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f001 fe34 	bl	80076a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8005a40:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8005a42:	490e      	ldr	r1, [pc, #56]	; (8005a7c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f001 fe2f 	bl	80076a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8005a4a:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8005a4c:	490d      	ldr	r1, [pc, #52]	; (8005a84 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f001 fe2a 	bl	80076a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8005a54:	4a0c      	ldr	r2, [pc, #48]	; (8005a88 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8005a56:	490d      	ldr	r1, [pc, #52]	; (8005a8c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f001 fe25 	bl	80076a8 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8005a5e:	bf00      	nop
}
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	08015a54 	.word	0x08015a54
 8005a6c:	08015a5c 	.word	0x08015a5c
 8005a70:	08015a60 	.word	0x08015a60
 8005a74:	08015a68 	.word	0x08015a68
 8005a78:	08015a6c 	.word	0x08015a6c
 8005a7c:	08015a74 	.word	0x08015a74
 8005a80:	08015a78 	.word	0x08015a78
 8005a84:	08015a80 	.word	0x08015a80
 8005a88:	08015a84 	.word	0x08015a84
 8005a8c:	08015a90 	.word	0x08015a90

08005a90 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8005a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a94:	b096      	sub	sp, #88	; 0x58
 8005a96:	af08      	add	r7, sp, #32
 8005a98:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 80b2 	beq.w	8005c0e <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8005aae:	3328      	adds	r3, #40	; 0x28
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 ff6f 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005ab6:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	3328      	adds	r3, #40	; 0x28
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 ff84 	bl	80079cc <_ZNK12SimpleString7isEmptyEv>
 8005ac4:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8005aca:	4c53      	ldr	r4, [pc, #332]	; (8005c18 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8005acc:	e000      	b.n	8005ad0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8005ace:	4c53      	ldr	r4, [pc, #332]	; (8005c1c <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 ff5c 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005adc:	4605      	mov	r5, r0
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 ff57 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005ae6:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8005af4:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8005af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4a49      	ldr	r2, [pc, #292]	; (8005c20 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8005b02:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	4b45      	ldr	r3, [pc, #276]	; (8005c20 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8005b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0e:	099b      	lsrs	r3, r3, #6
 8005b10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	3314      	adds	r3, #20
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 ff37 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005b26:	4602      	mov	r2, r0
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f107 0014 	add.w	r0, r7, #20
 8005b30:	9306      	str	r3, [sp, #24]
 8005b32:	9205      	str	r2, [sp, #20]
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	9204      	str	r2, [sp, #16]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	9203      	str	r2, [sp, #12]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	9302      	str	r3, [sp, #8]
 8005b40:	9601      	str	r6, [sp, #4]
 8005b42:	9500      	str	r5, [sp, #0]
 8005b44:	4623      	mov	r3, r4
 8005b46:	4642      	mov	r2, r8
 8005b48:	4936      	ldr	r1, [pc, #216]	; (8005c24 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8005b4a:	f002 fbdd 	bl	8008308 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3368      	adds	r3, #104	; 0x68
 8005b54:	681c      	ldr	r4, [r3, #0]
 8005b56:	f107 0314 	add.w	r3, r7, #20
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 ff1a 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005b60:	4602      	mov	r2, r0
 8005b62:	f107 031c 	add.w	r3, r7, #28
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 fb88 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005b6e:	f107 031c 	add.w	r3, r7, #28
 8005b72:	4619      	mov	r1, r3
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	47a0      	blx	r4
 8005b78:	f107 031c 	add.w	r3, r7, #28
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 ff36 	bl	80079ee <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b88:	6a12      	ldr	r2, [r2, #32]
 8005b8a:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3388      	adds	r3, #136	; 0x88
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	4798      	blx	r3
 8005ba2:	e017      	b.n	8005bd4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba6:	7c1b      	ldrb	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d013      	beq.n	8005bd4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3368      	adds	r3, #104	; 0x68
 8005bb2:	681c      	ldr	r4, [r3, #0]
 8005bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bb8:	491b      	ldr	r1, [pc, #108]	; (8005c28 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 fb5f 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	47a0      	blx	r4
 8005bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 ff0d 	bl	80079ee <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3368      	adds	r3, #104	; 0x68
 8005bda:	681c      	ldr	r4, [r3, #0]
 8005bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005be0:	4912      	ldr	r1, [pc, #72]	; (8005c2c <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 fb4b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bec:	4619      	mov	r1, r3
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	47a0      	blx	r4
 8005bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fef9 	bl	80079ee <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8005c02:	f107 0314 	add.w	r3, r7, #20
 8005c06:	4618      	mov	r0, r3
 8005c08:	f001 fef1 	bl	80079ee <_ZN12SimpleStringD1Ev>
    while (cur) {
 8005c0c:	e749      	b.n	8005aa2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8005c0e:	bf00      	nop
 8005c10:	3738      	adds	r7, #56	; 0x38
 8005c12:	46bd      	mov	sp, r7
 8005c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c18:	08015954 	.word	0x08015954
 8005c1c:	08015a94 	.word	0x08015a94
 8005c20:	10624dd3 	.word	0x10624dd3
 8005c24:	08015a98 	.word	0x08015a98
 8005c28:	08015af4 	.word	0x08015af4
 8005c2c:	08015b04 	.word	0x08015b04

08005c30 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c32:	b091      	sub	sp, #68	; 0x44
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68d9      	ldr	r1, [r3, #12]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f107 0210 	add.w	r2, r7, #16
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8005c50:	f107 0310 	add.w	r3, r7, #16
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 fe9d 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005c5a:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4798      	blx	r3
 8005c6e:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8005c70:	461e      	mov	r6, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3380      	adds	r3, #128	; 0x80
 8005c78:	681c      	ldr	r4, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68d9      	ldr	r1, [r3, #12]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3318      	adds	r3, #24
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f107 0220 	add.w	r2, r7, #32
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	f107 0318 	add.w	r3, r7, #24
 8005c94:	f107 0220 	add.w	r2, r7, #32
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	47a0      	blx	r4
 8005c9e:	f107 0318 	add.w	r3, r7, #24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 fe76 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f107 0008 	add.w	r0, r7, #8
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	4633      	mov	r3, r6
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4924      	ldr	r1, [pc, #144]	; (8005d48 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8005cb6:	f002 fb27 	bl	8008308 <_Z16StringFromFormatPKcz>
 8005cba:	f107 0318 	add.w	r3, r7, #24
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fe95 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8005cc4:	f107 0320 	add.w	r3, r7, #32
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fe90 	bl	80079ee <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8005cce:	f107 0310 	add.w	r3, r7, #16
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fe8b 	bl	80079ee <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3368      	adds	r3, #104	; 0x68
 8005cde:	681c      	ldr	r4, [r3, #0]
 8005ce0:	f107 0308 	add.w	r3, r7, #8
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fe55 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005cea:	4602      	mov	r2, r0
 8005cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 fac3 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	47a0      	blx	r4
 8005d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 fe71 	bl	80079ee <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3368      	adds	r3, #104	; 0x68
 8005d12:	681c      	ldr	r4, [r3, #0]
 8005d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d18:	490c      	ldr	r1, [pc, #48]	; (8005d4c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 faaf 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005d20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	47a0      	blx	r4
 8005d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fe5d 	bl	80079ee <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8005d34:	f107 0308 	add.w	r3, r7, #8
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 fe58 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8005d3e:	bf00      	nop
 8005d40:	373c      	adds	r7, #60	; 0x3c
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d46:	bf00      	nop
 8005d48:	08015b14 	.word	0x08015b14
 8005d4c:	08015b50 	.word	0x08015b50

08005d50 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b08d      	sub	sp, #52	; 0x34
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3368      	adds	r3, #104	; 0x68
 8005d5e:	681c      	ldr	r4, [r3, #0]
 8005d60:	f107 0308 	add.w	r3, r7, #8
 8005d64:	4933      	ldr	r1, [pc, #204]	; (8005e34 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 fa89 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005d6c:	f107 0308 	add.w	r3, r7, #8
 8005d70:	4619      	mov	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	47a0      	blx	r4
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fe37 	bl	80079ee <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3368      	adds	r3, #104	; 0x68
 8005d86:	681c      	ldr	r4, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3380      	adds	r3, #128	; 0x80
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6912      	ldr	r2, [r2, #16]
 8005d94:	3230      	adds	r2, #48	; 0x30
 8005d96:	f107 0010 	add.w	r0, r7, #16
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4798      	blx	r3
 8005d9e:	f107 0310 	add.w	r3, r7, #16
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	47a0      	blx	r4
 8005da8:	f107 0310 	add.w	r3, r7, #16
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fe1e 	bl	80079ee <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3368      	adds	r3, #104	; 0x68
 8005db8:	681c      	ldr	r4, [r3, #0]
 8005dba:	f107 0318 	add.w	r3, r7, #24
 8005dbe:	491e      	ldr	r1, [pc, #120]	; (8005e38 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 fa5c 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005dc6:	f107 0318 	add.w	r3, r7, #24
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	47a0      	blx	r4
 8005dd0:	f107 0318 	add.w	r3, r7, #24
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 fe0a 	bl	80079ee <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3368      	adds	r3, #104	; 0x68
 8005de0:	681c      	ldr	r4, [r3, #0]
 8005de2:	f107 0320 	add.w	r3, r7, #32
 8005de6:	4915      	ldr	r1, [pc, #84]	; (8005e3c <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 fa48 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005dee:	f107 0320 	add.w	r3, r7, #32
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	47a0      	blx	r4
 8005df8:	f107 0320 	add.w	r3, r7, #32
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 fdf6 	bl	80079ee <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3368      	adds	r3, #104	; 0x68
 8005e08:	681c      	ldr	r4, [r3, #0]
 8005e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e0e:	490c      	ldr	r1, [pc, #48]	; (8005e40 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fa34 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8005e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	47a0      	blx	r4
 8005e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fde2 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8005e2a:	bf00      	nop
 8005e2c:	3734      	adds	r7, #52	; 0x34
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd90      	pop	{r4, r7, pc}
 8005e32:	bf00      	nop
 8005e34:	08015b5c 	.word	0x08015b5c
 8005e38:	08015b6c 	.word	0x08015b6c
 8005e3c:	08015b7c 	.word	0x08015b7c
 8005e40:	08015b98 	.word	0x08015b98

08005e44 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8005e44:	b590      	push	{r4, r7, lr}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3360      	adds	r3, #96	; 0x60
 8005e52:	681c      	ldr	r4, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	335c      	adds	r3, #92	; 0x5c
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6912      	ldr	r2, [r2, #16]
 8005e60:	3214      	adds	r2, #20
 8005e62:	f107 0008 	add.w	r0, r7, #8
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4798      	blx	r3
 8005e6a:	f107 0308 	add.w	r3, r7, #8
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	47a0      	blx	r4
 8005e74:	f107 0308 	add.w	r3, r7, #8
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 fdb8 	bl	80079ee <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3370      	adds	r3, #112	; 0x70
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	4798      	blx	r3
    writeTestSuiteSummary();
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3374      	adds	r3, #116	; 0x74
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	4798      	blx	r3
    writeProperties();
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3378      	adds	r3, #120	; 0x78
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4798      	blx	r3
    writeTestCases();
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	337c      	adds	r3, #124	; 0x7c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
    writeFileEnding();
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	338c      	adds	r3, #140	; 0x8c
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
    closeFile();
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	336c      	adds	r3, #108	; 0x6c
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd90      	pop	{r4, r7, pc}

08005ece <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b083      	sub	sp, #12
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	3330      	adds	r3, #48	; 0x30
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fe08 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d113      	bne.n	8005f82 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	3201      	adds	r2, #1
 8005f62:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8005f64:	f240 1233 	movw	r2, #307	; 0x133
 8005f68:	4908      	ldr	r1, [pc, #32]	; (8005f8c <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8005f6a:	2034      	movs	r0, #52	; 0x34
 8005f6c:	f000 fa9e 	bl	80064ac <_ZnwjPKci>
 8005f70:	4604      	mov	r4, r0
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	4620      	mov	r0, r4
 8005f76:	f002 ff4f 	bl	8008e18 <_ZN11TestFailureC1ERKS_>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	60dc      	str	r4, [r3, #12]
    }
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd90      	pop	{r4, r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	08015958 	.word	0x08015958

08005f90 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8005f90:	b5b0      	push	{r4, r5, r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8005f9a:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8005f9c:	681d      	ldr	r5, [r3, #0]
 8005f9e:	6838      	ldr	r0, [r7, #0]
 8005fa0:	f001 fcf8 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691c      	ldr	r4, [r3, #16]
 8005faa:	4905      	ldr	r1, [pc, #20]	; (8005fc0 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8005fac:	4610      	mov	r0, r2
 8005fae:	47a8      	blx	r5
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	6263      	str	r3, [r4, #36]	; 0x24
}
 8005fb4:	bf00      	nop
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bdb0      	pop	{r4, r5, r7, pc}
 8005fbc:	200000b0 	.word	0x200000b0
 8005fc0:	08015ba8 	.word	0x08015ba8

08005fc4 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8005fc4:	b590      	push	{r4, r7, lr}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8005fd0:	681c      	ldr	r4, [r3, #0]
 8005fd2:	6838      	ldr	r0, [r7, #0]
 8005fd4:	f001 fcde 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	47a0      	blx	r4
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd90      	pop	{r4, r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	200000b4 	.word	0x200000b4

08005ff4 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6912      	ldr	r2, [r2, #16]
 8006004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006006:	4610      	mov	r0, r2
 8006008:	4798      	blx	r3
}
 800600a:	bf00      	nop
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	200000b8 	.word	0x200000b8

08006018 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
        return false;
 8006026:	2300      	movs	r3, #0
    }
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
    {
 800603c:	4a04      	ldr	r2, [pc, #16]	; (8006050 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
    }
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	08017d94 	.word	0x08017d94

08006054 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
    }
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff ffe9 	bl	8006034 <_ZN17MemoryLeakFailureD1Ev>
 8006062:	2104      	movs	r1, #4
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa35 	bl	80064d4 <_ZdlPvj>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	687c      	ldr	r4, [r7, #4]
 800607e:	f000 fc71 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006082:	4603      	mov	r3, r0
 8006084:	4618      	mov	r0, r3
 8006086:	f00b f972 	bl	801136e <_ZN18MemoryLeakDetector8getMutexEv>
 800608a:	4603      	mov	r3, r0
 800608c:	4619      	mov	r1, r3
 800608e:	4620      	mov	r0, r4
 8006090:	f000 fe4a 	bl	8006d28 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	bd90      	pop	{r4, r7, pc}

0800609e <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fe4f 	bl	8006d4c <_ZN15ScopedMutexLockD1Ev>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 80060c4:	f000 fc4e 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80060c8:	4604      	mov	r4, r0
 80060ca:	f004 faf7 	bl	800a6bc <_Z25getCurrentMallocAllocatorv>
 80060ce:	4601      	mov	r1, r0
 80060d0:	2301      	movs	r3, #1
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4620      	mov	r0, r4
 80060de:	f00b fb89 	bl	80117f4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80060e2:	4603      	mov	r3, r0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd90      	pop	{r4, r7, pc}

080060ec <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 80060f8:	f000 fc34 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80060fc:	4603      	mov	r3, r0
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	4618      	mov	r0, r3
 8006102:	f00b f9e3 	bl	80114cc <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8006106:	f000 fc2d 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800610a:	4604      	mov	r4, r0
 800610c:	f004 fad6 	bl	800a6bc <_Z25getCurrentMallocAllocatorv>
 8006110:	4601      	mov	r1, r0
 8006112:	2301      	movs	r3, #1
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4620      	mov	r0, r4
 8006120:	f00b fb9c 	bl	801185c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	bd90      	pop	{r4, r7, pc}

0800612c <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800612c:	b590      	push	{r4, r7, lr}
 800612e:	b089      	sub	sp, #36	; 0x24
 8006130:	af04      	add	r7, sp, #16
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800613a:	f000 fc13 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800613e:	4604      	mov	r4, r0
 8006140:	f004 fabc 	bl	800a6bc <_Z25getCurrentMallocAllocatorv>
 8006144:	4601      	mov	r1, r0
 8006146:	2301      	movs	r3, #1
 8006148:	9302      	str	r3, [sp, #8]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4620      	mov	r0, r4
 8006158:	f00b fbe4 	bl	8011924 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800615c:	4603      	mov	r3, r0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	bd90      	pop	{r4, r7, pc}
	...

08006168 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006174:	4b04      	ldr	r3, [pc, #16]	; (8006188 <_ZL13normal_mallocjPKcj+0x20>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	4798      	blx	r3
 800617c:	4603      	mov	r3, r0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200000c4 	.word	0x200000c4

0800618c <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800619a:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <_ZL14normal_reallocPvjPKcj+0x24>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	4798      	blx	r3
 80061a4:	4603      	mov	r3, r0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	200000c8 	.word	0x200000c8

080061b4 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <_ZL11normal_freePvPKcj+0x1c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	4798      	blx	r3
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	200000cc 	.word	0x200000cc

080061d4 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff ff47 	bl	8006074 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80061e6:	f000 fbbd 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80061ea:	4604      	mov	r4, r0
 80061ec:	f004 f9b6 	bl	800a55c <_Z22getCurrentNewAllocatorv>
 80061f0:	4601      	mov	r1, r0
 80061f2:	2300      	movs	r3, #0
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	4620      	mov	r0, r4
 80061f8:	f00b fa6a 	bl	80116d0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80061fc:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80061fe:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8006200:	f107 0308 	add.w	r3, r7, #8
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff ff4a 	bl	800609e <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800620a:	4623      	mov	r3, r4
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bd90      	pop	{r4, r7, pc}

08006214 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8006214:	b590      	push	{r4, r7, lr}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800621c:	f000 fba2 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006220:	4604      	mov	r4, r0
 8006222:	f004 f99b 	bl	800a55c <_Z22getCurrentNewAllocatorv>
 8006226:	4601      	mov	r1, r0
 8006228:	2300      	movs	r3, #0
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4620      	mov	r0, r4
 800622e:	f00b fa4f 	bl	80116d0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8006232:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006234:	68fb      	ldr	r3, [r7, #12]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	bd90      	pop	{r4, r7, pc}

0800623e <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800623e:	b590      	push	{r4, r7, lr}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8006246:	f000 fb8d 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800624a:	4604      	mov	r4, r0
 800624c:	f004 f986 	bl	800a55c <_Z22getCurrentNewAllocatorv>
 8006250:	4601      	mov	r1, r0
 8006252:	2300      	movs	r3, #0
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	4620      	mov	r0, r4
 8006258:	f00b fa3a 	bl	80116d0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800625c:	4603      	mov	r3, r0
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	bd90      	pop	{r4, r7, pc}

08006266 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8006266:	b590      	push	{r4, r7, lr}
 8006268:	b089      	sub	sp, #36	; 0x24
 800626a:	af02      	add	r7, sp, #8
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8006272:	f000 fb77 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006276:	4604      	mov	r4, r0
 8006278:	f004 f970 	bl	800a55c <_Z22getCurrentNewAllocatorv>
 800627c:	4601      	mov	r1, r0
 800627e:	2300      	movs	r3, #0
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4620      	mov	r0, r4
 800628c:	f00b fab2 	bl	80117f4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006290:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006292:	697b      	ldr	r3, [r7, #20]
}
 8006294:	4618      	mov	r0, r3
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	bd90      	pop	{r4, r7, pc}

0800629c <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80062a4:	f000 fb5e 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80062a8:	4604      	mov	r4, r0
 80062aa:	f004 f9af 	bl	800a60c <_Z27getCurrentNewArrayAllocatorv>
 80062ae:	4601      	mov	r1, r0
 80062b0:	2300      	movs	r3, #0
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	4620      	mov	r0, r4
 80062b6:	f00b fa0b 	bl	80116d0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80062ba:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80062bc:	68fb      	ldr	r3, [r7, #12]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}

080062c6 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 80062c6:	b590      	push	{r4, r7, lr}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80062ce:	f000 fb49 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80062d2:	4604      	mov	r4, r0
 80062d4:	f004 f99a 	bl	800a60c <_Z27getCurrentNewArrayAllocatorv>
 80062d8:	4601      	mov	r1, r0
 80062da:	2300      	movs	r3, #0
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	4620      	mov	r0, r4
 80062e0:	f00b f9f6 	bl	80116d0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80062e4:	4603      	mov	r3, r0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd90      	pop	{r4, r7, pc}

080062ee <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 80062ee:	b590      	push	{r4, r7, lr}
 80062f0:	b089      	sub	sp, #36	; 0x24
 80062f2:	af02      	add	r7, sp, #8
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 80062fa:	f000 fb33 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80062fe:	4604      	mov	r4, r0
 8006300:	f004 f984 	bl	800a60c <_Z27getCurrentNewArrayAllocatorv>
 8006304:	4601      	mov	r1, r0
 8006306:	2300      	movs	r3, #0
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4620      	mov	r0, r4
 8006314:	f00b fa6e 	bl	80117f4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8006318:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800631a:	697b      	ldr	r3, [r7, #20]
}
 800631c:	4618      	mov	r0, r3
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd90      	pop	{r4, r7, pc}

08006324 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800632c:	f000 fb1a 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006330:	4603      	mov	r3, r0
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4618      	mov	r0, r3
 8006336:	f00b f8c9 	bl	80114cc <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800633a:	f000 fb13 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800633e:	4604      	mov	r4, r0
 8006340:	f004 f90c 	bl	800a55c <_Z22getCurrentNewAllocatorv>
 8006344:	4601      	mov	r1, r0
 8006346:	2300      	movs	r3, #0
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4620      	mov	r0, r4
 800634c:	f00b fad0 	bl	80118f0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bd90      	pop	{r4, r7, pc}

08006358 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8006360:	f000 fb00 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006364:	4603      	mov	r3, r0
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4618      	mov	r0, r3
 800636a:	f00b f8af 	bl	80114cc <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800636e:	f000 faf9 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006372:	4604      	mov	r4, r0
 8006374:	f004 f94a 	bl	800a60c <_Z27getCurrentNewArrayAllocatorv>
 8006378:	4601      	mov	r1, r0
 800637a:	2300      	movs	r3, #0
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4620      	mov	r0, r4
 8006380:	f00b fab6 	bl	80118f0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	bd90      	pop	{r4, r7, pc}

0800638c <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <_ZL19normal_operator_newj+0x1c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800639e:	68fb      	ldr	r3, [r7, #12]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	200000c4 	.word	0x200000c4

080063ac <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80063b4:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <_ZL27normal_operator_new_nothrowj+0x1c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
 80063bc:	4603      	mov	r3, r0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200000c4 	.word	0x200000c4

080063cc <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80063d8:	4b04      	ldr	r3, [pc, #16]	; (80063ec <_ZL25normal_operator_new_debugjPKcj+0x20>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	4798      	blx	r3
 80063e0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80063e2:	697b      	ldr	r3, [r7, #20]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	200000c4 	.word	0x200000c4

080063f0 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80063f8:	4b04      	ldr	r3, [pc, #16]	; (800640c <_ZL25normal_operator_new_arrayj+0x1c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
 8006400:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006402:	68fb      	ldr	r3, [r7, #12]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200000c4 	.word	0x200000c4

08006410 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8006418:	4b04      	ldr	r3, [pc, #16]	; (800642c <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
 8006420:	4603      	mov	r3, r0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200000c4 	.word	0x200000c4

08006430 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800643c:	4b04      	ldr	r3, [pc, #16]	; (8006450 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	4798      	blx	r3
 8006444:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8006446:	697b      	ldr	r3, [r7, #20]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200000c4 	.word	0x200000c4

08006454 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800645c:	4b03      	ldr	r3, [pc, #12]	; (800646c <_ZL22normal_operator_deletePv+0x18>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	200000cc 	.word	0x200000cc

08006470 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8006478:	4b03      	ldr	r3, [pc, #12]	; (8006488 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	200000cc 	.word	0x200000cc

0800648c <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8006494:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <_Znwj+0x1c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	4798      	blx	r3
 800649c:	4603      	mov	r3, r0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000028 	.word	0x20000028

080064ac <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <_ZnwjPKci+0x24>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	4798      	blx	r3
 80064c4:	4603      	mov	r3, r0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000030 	.word	0x20000030

080064d4 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <_ZdlPvj+0x1c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000040 	.word	0x20000040

080064f4 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8006500:	4b05      	ldr	r3, [pc, #20]	; (8006518 <_ZnajPKci+0x24>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	4798      	blx	r3
 800650c:	4603      	mov	r3, r0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	2000003c 	.word	0x2000003c

0800651c <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8006524:	4b03      	ldr	r3, [pc, #12]	; (8006534 <_ZdaPv+0x18>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
}
 800652c:	bf00      	nop
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000044 	.word	0x20000044

08006538 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8006542:	4b04      	ldr	r3, [pc, #16]	; (8006554 <_ZdaPvj+0x1c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000044 	.word	0x20000044

08006558 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800655c:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800655e:	4a13      	ldr	r2, [pc, #76]	; (80065ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8006560:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8006564:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8006566:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8006568:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800656a:	4a14      	ldr	r2, [pc, #80]	; (80065bc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800656c:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8006570:	4a14      	ldr	r2, [pc, #80]	; (80065c4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8006572:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8006574:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8006578:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800657c:	4a15      	ldr	r2, [pc, #84]	; (80065d4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800657e:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8006580:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8006582:	4a16      	ldr	r2, [pc, #88]	; (80065dc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8006584:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8006586:	4b16      	ldr	r3, [pc, #88]	; (80065e0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8006588:	4a16      	ldr	r2, [pc, #88]	; (80065e4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800658a:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800658c:	4b16      	ldr	r3, [pc, #88]	; (80065e8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800658e:	4a17      	ldr	r2, [pc, #92]	; (80065ec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8006590:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8006594:	4a17      	ldr	r2, [pc, #92]	; (80065f4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8006596:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8006598:	4b17      	ldr	r3, [pc, #92]	; (80065f8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800659a:	4a18      	ldr	r2, [pc, #96]	; (80065fc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800659c:	601a      	str	r2, [r3, #0]

#endif
}
 800659e:	bf00      	nop
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	20000028 	.word	0x20000028
 80065ac:	0800638d 	.word	0x0800638d
 80065b0:	2000002c 	.word	0x2000002c
 80065b4:	080063ad 	.word	0x080063ad
 80065b8:	20000030 	.word	0x20000030
 80065bc:	080063cd 	.word	0x080063cd
 80065c0:	20000034 	.word	0x20000034
 80065c4:	080063f1 	.word	0x080063f1
 80065c8:	20000038 	.word	0x20000038
 80065cc:	08006411 	.word	0x08006411
 80065d0:	2000003c 	.word	0x2000003c
 80065d4:	08006431 	.word	0x08006431
 80065d8:	20000040 	.word	0x20000040
 80065dc:	08006455 	.word	0x08006455
 80065e0:	20000044 	.word	0x20000044
 80065e4:	08006471 	.word	0x08006471
 80065e8:	20000010 	.word	0x20000010
 80065ec:	08006169 	.word	0x08006169
 80065f0:	20000018 	.word	0x20000018
 80065f4:	0800618d 	.word	0x0800618d
 80065f8:	20000014 	.word	0x20000014
 80065fc:	080061b5 	.word	0x080061b5

08006600 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8006604:	4b08      	ldr	r3, [pc, #32]	; (8006628 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a08      	ldr	r2, [pc, #32]	; (800662c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800660e:	4b06      	ldr	r3, [pc, #24]	; (8006628 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d101      	bne.n	800661c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800661c:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800661e:	4618      	mov	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20000028 	.word	0x20000028
 800662c:	08006215 	.word	0x08006215
 8006630:	080061d5 	.word	0x080061d5

08006634 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8006638:	4b1f      	ldr	r3, [pc, #124]	; (80066b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3301      	adds	r3, #1
 800663e:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b01      	cmp	r3, #1
 8006648:	bfcc      	ite	gt
 800664a:	2301      	movgt	r3, #1
 800664c:	2300      	movle	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d12e      	bne.n	80066b2 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8006654:	4b19      	ldr	r3, [pc, #100]	; (80066bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a19      	ldr	r2, [pc, #100]	; (80066c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800665a:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800665c:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8006662:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8006664:	4b19      	ldr	r3, [pc, #100]	; (80066cc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800666a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800666c:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8006672:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8006674:	4b19      	ldr	r3, [pc, #100]	; (80066dc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800667a:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800667c:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a19      	ldr	r2, [pc, #100]	; (80066e8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8006682:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8006684:	4b19      	ldr	r3, [pc, #100]	; (80066ec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800668a:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800668c:	4b19      	ldr	r3, [pc, #100]	; (80066f4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8006692:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8006694:	4b19      	ldr	r3, [pc, #100]	; (80066fc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a19      	ldr	r2, [pc, #100]	; (8006700 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800669a:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800669c:	4b19      	ldr	r3, [pc, #100]	; (8006704 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a19      	ldr	r2, [pc, #100]	; (8006708 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 80066a2:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 80066a4:	4b19      	ldr	r3, [pc, #100]	; (800670c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a19      	ldr	r2, [pc, #100]	; (8006710 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 80066aa:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 80066ac:	f7ff ff54 	bl	8006558 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 80066b0:	e000      	b.n	80066b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 80066b2:	bf00      	nop
#endif
}
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000538 	.word	0x20000538
 80066bc:	20000028 	.word	0x20000028
 80066c0:	20000048 	.word	0x20000048
 80066c4:	2000002c 	.word	0x2000002c
 80066c8:	2000004c 	.word	0x2000004c
 80066cc:	20000030 	.word	0x20000030
 80066d0:	20000050 	.word	0x20000050
 80066d4:	20000034 	.word	0x20000034
 80066d8:	20000054 	.word	0x20000054
 80066dc:	20000038 	.word	0x20000038
 80066e0:	20000058 	.word	0x20000058
 80066e4:	2000003c 	.word	0x2000003c
 80066e8:	2000005c 	.word	0x2000005c
 80066ec:	20000040 	.word	0x20000040
 80066f0:	20000060 	.word	0x20000060
 80066f4:	20000044 	.word	0x20000044
 80066f8:	20000064 	.word	0x20000064
 80066fc:	20000010 	.word	0x20000010
 8006700:	2000001c 	.word	0x2000001c
 8006704:	20000018 	.word	0x20000018
 8006708:	20000024 	.word	0x20000024
 800670c:	20000014 	.word	0x20000014
 8006710:	20000020 	.word	0x20000020

08006714 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8006718:	4b1f      	ldr	r3, [pc, #124]	; (8006798 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	4a1e      	ldr	r2, [pc, #120]	; (8006798 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	bfcc      	ite	gt
 800672a:	2301      	movgt	r3, #1
 800672c:	2300      	movle	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d12c      	bne.n	800678e <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8006734:	4b19      	ldr	r3, [pc, #100]	; (800679c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800673a:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800673c:	4b19      	ldr	r3, [pc, #100]	; (80067a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a19      	ldr	r2, [pc, #100]	; (80067a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8006742:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8006744:	4b19      	ldr	r3, [pc, #100]	; (80067ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a19      	ldr	r2, [pc, #100]	; (80067b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800674a:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800674c:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a19      	ldr	r2, [pc, #100]	; (80067b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8006752:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8006754:	4b19      	ldr	r3, [pc, #100]	; (80067bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a19      	ldr	r2, [pc, #100]	; (80067c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800675a:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8006762:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8006764:	4b19      	ldr	r3, [pc, #100]	; (80067cc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a19      	ldr	r2, [pc, #100]	; (80067d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800676a:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800676c:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a19      	ldr	r2, [pc, #100]	; (80067d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8006772:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8006774:	4b19      	ldr	r3, [pc, #100]	; (80067dc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a19      	ldr	r2, [pc, #100]	; (80067e0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800677a:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800677c:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a19      	ldr	r2, [pc, #100]	; (80067e8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8006782:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8006784:	4b19      	ldr	r3, [pc, #100]	; (80067ec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	e000      	b.n	8006790 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800678e:	bf00      	nop
#endif
}
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	20000538 	.word	0x20000538
 800679c:	20000048 	.word	0x20000048
 80067a0:	20000028 	.word	0x20000028
 80067a4:	2000004c 	.word	0x2000004c
 80067a8:	2000002c 	.word	0x2000002c
 80067ac:	20000050 	.word	0x20000050
 80067b0:	20000030 	.word	0x20000030
 80067b4:	20000054 	.word	0x20000054
 80067b8:	20000034 	.word	0x20000034
 80067bc:	20000058 	.word	0x20000058
 80067c0:	20000038 	.word	0x20000038
 80067c4:	2000005c 	.word	0x2000005c
 80067c8:	2000003c 	.word	0x2000003c
 80067cc:	20000060 	.word	0x20000060
 80067d0:	20000040 	.word	0x20000040
 80067d4:	20000064 	.word	0x20000064
 80067d8:	20000044 	.word	0x20000044
 80067dc:	2000001c 	.word	0x2000001c
 80067e0:	20000010 	.word	0x20000010
 80067e4:	20000024 	.word	0x20000024
 80067e8:	20000018 	.word	0x20000018
 80067ec:	20000020 	.word	0x20000020
 80067f0:	20000014 	.word	0x20000014

080067f4 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
    {
 80067fc:	4a05      	ldr	r2, [pc, #20]	; (8006814 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fc15 	bl	8006034 <_ZN17MemoryLeakFailureD1Ev>
    }
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	08017d80 	.word	0x08017d80

08006818 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
    }
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff ffe7 	bl	80067f4 <_ZN25MemoryLeakWarningReporterD1Ev>
 8006826:	2104      	movs	r1, #4
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fe53 	bl	80064d4 <_ZdlPvj>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	4a04      	ldr	r2, [pc, #16]	; (8006854 <_ZN14TestTerminatorC1Ev+0x1c>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	080185d8 	.word	0x080185d8

08006858 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff ffe8 	bl	8006838 <_ZN14TestTerminatorC1Ev>
 8006868:	4a03      	ldr	r2, [pc, #12]	; (8006878 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	080185b0 	.word	0x080185b0

0800687c <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800687c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687e:	b099      	sub	sp, #100	; 0x64
 8006880:	af02      	add	r7, sp, #8
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8006886:	f007 ffbd 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 800688a:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800688c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	339c      	adds	r3, #156	; 0x9c
 8006892:	681c      	ldr	r4, [r3, #0]
 8006894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006898:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800689a:	4618      	mov	r0, r3
 800689c:	f006 fddc 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 80068a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f875 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 80068aa:	4605      	mov	r5, r0
 80068ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80068ae:	f006 fea2 	bl	800d5f6 <_ZNK10UtestShell13getLineNumberEv>
 80068b2:	4606      	mov	r6, r0
 80068b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fcdf 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80068c0:	f107 000c 	add.w	r0, r7, #12
 80068c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	4633      	mov	r3, r6
 80068cc:	462a      	mov	r2, r5
 80068ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068d0:	f002 ff2c 	bl	800972c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80068d4:	2300      	movs	r3, #0
 80068d6:	653b      	str	r3, [r7, #80]	; 0x50
 80068d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff ffbb 	bl	8006858 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80068e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80068e6:	f107 030c 	add.w	r3, r7, #12
 80068ea:	4619      	mov	r1, r3
 80068ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80068ee:	47a0      	blx	r4
 80068f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80068f4:	4618      	mov	r0, r3
 80068f6:	f008 f87f 	bl	800e9f8 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 80068fa:	f107 030c 	add.w	r3, r7, #12
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 f9ac 	bl	8006c5c <_ZN11FailFailureD1Ev>
 8006904:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006908:	4618      	mov	r0, r3
 800690a:	f001 f870 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800690e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006912:	4618      	mov	r0, r3
 8006914:	f001 f86b 	bl	80079ee <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8006918:	bf00      	nop
 800691a:	375c      	adds	r7, #92	; 0x5c
 800691c:	46bd      	mov	sp, r7
 800691e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006920 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	4a04      	ldr	r2, [pc, #16]	; (800693c <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4618      	mov	r0, r3
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	08017d94 	.word	0x08017d94

08006940 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff ffe8 	bl	8006920 <_ZN17MemoryLeakFailureC1Ev>
 8006950:	4a03      	ldr	r2, [pc, #12]	; (8006960 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	08017d80 	.word	0x08017d80

08006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8006964:	b598      	push	{r3, r4, r7, lr}
 8006966:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8006968:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11b      	bne.n	80069a8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8006970:	f7ff fe60 	bl	8006634 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8006974:	2004      	movs	r0, #4
 8006976:	f7ff fd89 	bl	800648c <_Znwj>
 800697a:	4603      	mov	r3, r0
 800697c:	461c      	mov	r4, r3
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff ffde 	bl	8006940 <_ZN25MemoryLeakWarningReporterC1Ev>
 8006984:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8006986:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8006988:	f241 1050 	movw	r0, #4432	; 0x1150
 800698c:	f7ff fd7e 	bl	800648c <_Znwj>
 8006990:	4603      	mov	r3, r0
 8006992:	461c      	mov	r4, r3
 8006994:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	4620      	mov	r0, r4
 800699c:	f00a fc44 	bl	8011228 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 80069a0:	4b03      	ldr	r3, [pc, #12]	; (80069b0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80069a2:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 80069a4:	f7ff feb6 	bl	8006714 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 80069a8:	4b01      	ldr	r3, [pc, #4]	; (80069b0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	bd98      	pop	{r3, r4, r7, pc}
 80069b0:	20000540 	.word	0x20000540
 80069b4:	2000053c 	.word	0x2000053c

080069b8 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	765a      	strb	r2, [r3, #25]
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 80069dc:	f7ff fdbc 	bl	8006558 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	3204      	adds	r2, #4
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	4790      	blx	r2
    delete globalReporter;
 80069f2:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	3204      	adds	r2, #4
 80069fe:	6812      	ldr	r2, [r2, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	4790      	blx	r2
    globalDetector = NULLPTR;
 8006a04:	4b02      	ldr	r3, [pc, #8]	; (8006a10 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000540 	.word	0x20000540
 8006a14:	2000053c 	.word	0x2000053c

08006a18 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f005 f815 	bl	800ba58 <_ZN10TestPluginC1ERK12SimpleString>
 8006a2e:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	761a      	strb	r2, [r3, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	765a      	strb	r2, [r3, #25]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8006a4e:	4a0d      	ldr	r2, [pc, #52]	; (8006a84 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	615a      	str	r2, [r3, #20]
 8006a60:	e004      	b.n	8006a6c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8006a62:	f7ff ff7f 	bl	8006964 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8006a66:	4602      	mov	r2, r0
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f00a fc6f 	bl	8011354 <_ZN18MemoryLeakDetector6enableEv>
}
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	08017da8 	.word	0x08017da8
 8006a84:	20000544 	.word	0x20000544

08006a88 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	7e5b      	ldrb	r3, [r3, #25]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8006a9e:	f7ff fd5b 	bl	8006558 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8006aa2:	f7ff ff99 	bl	80069d8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f005 f811 	bl	800bad0 <_ZN10TestPluginD1Ev>
    }
}
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	08017da8 	.word	0x08017da8

08006abc <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
}
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ffdf 	bl	8006a88 <_ZN23MemoryLeakWarningPluginD1Ev>
 8006aca:	2124      	movs	r1, #36	; 0x24
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fd01 	bl	80064d4 <_ZdlPvj>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f00a fc14 	bl	801131a <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fd ffb0 	bl	8004a58 <_ZNK10TestResult15getFailureCountEv>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8006b08:	b590      	push	{r4, r7, lr}
 8006b0a:	b097      	sub	sp, #92	; 0x5c
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f00a fc0e 	bl	801133a <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	2103      	movs	r1, #3
 8006b24:	4618      	mov	r0, r3
 8006b26:	f00a ffab 	bl	8011a80 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8006b2a:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	7e1b      	ldrb	r3, [r3, #24]
 8006b30:	f083 0301 	eor.w	r3, r3, #1
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d009      	beq.n	8006b58 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a1c      	ldr	r4, [r3, #32]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7fd ff85 	bl	8004a58 <_ZNK10TestResult15getFailureCountEv>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	429c      	cmp	r4, r3
 8006b52:	d101      	bne.n	8006b58 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d04c      	beq.n	8006bf8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8006b5e:	f7ff fd4f 	bl	8006600 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d028      	beq.n	8006bba <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	2103      	movs	r1, #3
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f00a ff4b 	bl	8011a0a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8006b74:	4602      	mov	r2, r0
 8006b76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fb7e 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8006b82:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8006b86:	f107 0310 	add.w	r3, r7, #16
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f002 f8c7 	bl	8008d20 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8006b92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 ff29 	bl	80079ee <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3334      	adds	r3, #52	; 0x34
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f107 0210 	add.w	r2, r7, #16
 8006ba8:	4611      	mov	r1, r2
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8006bae:	f107 0310 	add.w	r3, r7, #16
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f002 f974 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 8006bb8:	e01e      	b.n	8006bf8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01a      	beq.n	8006bf8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3338      	adds	r3, #56	; 0x38
 8006bc8:	681c      	ldr	r4, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006bd4:	4910      	ldr	r1, [pc, #64]	; (8006c18 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 fb96 	bl	8008308 <_Z16StringFromFormatPKcz>
 8006bdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fed7 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8006be6:	4603      	mov	r3, r0
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	47a0      	blx	r4
 8006bee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fefb 	bl	80079ee <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f00a ff19 	bl	8011a34 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	61da      	str	r2, [r3, #28]
}
 8006c0e:	bf00      	nop
 8006c10:	375c      	adds	r7, #92	; 0x5c
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd90      	pop	{r4, r7, pc}
 8006c16:	bf00      	nop
 8006c18:	08015bac 	.word	0x08015bac

08006c1c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	2102      	movs	r1, #2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f00a ff27 	bl	8011a80 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8006c32:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d007      	beq.n	8006c4c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	2102      	movs	r1, #2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f00a fee1 	bl	8011a0a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	e000      	b.n	8006c4e <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8006c4c:	4b02      	ldr	r3, [pc, #8]	; (8006c58 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	08015bec 	.word	0x08015bec

08006c5c <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	4a05      	ldr	r2, [pc, #20]	; (8006c7c <_ZN11FailFailureD1Ev+0x20>)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f002 f917 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	08017df0 	.word	0x08017df0

08006c80 <_ZN11FailFailureD0Ev>:
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff ffe7 	bl	8006c5c <_ZN11FailFailureD1Ev>
 8006c8e:	2134      	movs	r1, #52	; 0x34
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff fc1f 	bl	80064d4 <_ZdlPvj>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <_ZN11SimpleMutexC1Ev+0x20>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4798      	blx	r3
 8006cae:	4602      	mov	r2, r0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	601a      	str	r2, [r3, #0]
}
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200000e8 	.word	0x200000e8

08006cc4 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <_ZN11SimpleMutexD1Ev+0x20>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
}
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200000f4 	.word	0x200000f4

08006ce8 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 8006cf0:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <_ZN11SimpleMutex4LockEv+0x1c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	200000ec 	.word	0x200000ec

08006d08 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	200000f0 	.word	0x200000f0

08006d28 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff ffd3 	bl	8006ce8 <_ZN11SimpleMutex4LockEv>
}
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff ffd5 	bl	8006d08 <_ZN11SimpleMutex6UnlockEv>
}
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 8006d74:	f003 fc6c 	bl	800a650 <_Z24defaultNewArrayAllocatorv>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	e001      	b.n	8006d80 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 8006d7c:	4b01      	ldr	r3, [pc, #4]	; (8006d84 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000548 	.word	0x20000548

08006d88 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 8006d88:	b590      	push	{r4, r7, lr}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 8006d94:	f7ff ffe8 	bl	8006d68 <_ZN12SimpleString18getStringAllocatorEv>
 8006d98:	6803      	ldr	r3, [r0, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	681c      	ldr	r4, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	47a0      	blx	r4
 8006da6:	4603      	mov	r3, r0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd90      	pop	{r4, r7, pc}

08006db0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 8006dbe:	f7ff ffd3 	bl	8006d68 <_ZN12SimpleString18getStringAllocatorEv>
 8006dc2:	6803      	ldr	r3, [r0, #0]
 8006dc4:	330c      	adds	r3, #12
 8006dc6:	681c      	ldr	r4, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	68f9      	ldr	r1, [r7, #12]
 8006dd2:	47a0      	blx	r4
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd90      	pop	{r4, r7, pc}

08006ddc <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 8006de4:	2284      	movs	r2, #132	; 0x84
 8006de6:	4906      	ldr	r1, [pc, #24]	; (8006e00 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8006de8:	2001      	movs	r0, #1
 8006dea:	f7ff ffcd 	bl	8006d88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8006dee:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]
    return empty;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	08015bf0 	.word	0x08015bf0

08006e04 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f001 f809 	bl	8007e28 <_ZN12SimpleString7isSpaceEc>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <_ZN12SimpleString4AtoUEPKc+0x20>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	607b      	str	r3, [r7, #4]
 8006e22:	e7f3      	b.n	8006e0c <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 ffe7 	bl	8007e00 <_ZN12SimpleString7isDigitEc>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <_ZN12SimpleString4AtoUEPKc+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b2f      	cmp	r3, #47	; 0x2f
 8006e3e:	d901      	bls.n	8006e44 <_ZN12SimpleString4AtoUEPKc+0x40>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <_ZN12SimpleString4AtoUEPKc+0x42>
 8006e44:	2300      	movs	r3, #0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d010      	beq.n	8006e6c <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	3b30      	subs	r3, #48	; 0x30
 8006e62:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3301      	adds	r3, #1
 8006e68:	607b      	str	r3, [r7, #4]
 8006e6a:	e7dd      	b.n	8006e28 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 ffd0 	bl	8007e28 <_ZN12SimpleString7isSpaceEc>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <_ZN12SimpleString4AtoIEPKc+0x20>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3301      	adds	r3, #1
 8006e92:	607b      	str	r3, [r7, #4]
 8006e94:	e7f3      	b.n	8006e7e <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	2b2d      	cmp	r3, #45	; 0x2d
 8006ea0:	d002      	beq.n	8006ea8 <_ZN12SimpleString4AtoIEPKc+0x32>
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	2b2b      	cmp	r3, #43	; 0x2b
 8006ea6:	d102      	bne.n	8006eae <_ZN12SimpleString4AtoIEPKc+0x38>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	607b      	str	r3, [r7, #4]

    int  result = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 ffa2 	bl	8007e00 <_ZN12SimpleString7isDigitEc>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00f      	beq.n	8006ee2 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	3b30      	subs	r3, #48	; 0x30
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3301      	adds	r3, #1
 8006ede:	607b      	str	r3, [r7, #4]
 8006ee0:	e7e7      	b.n	8006eb2 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	2b2d      	cmp	r3, #45	; 0x2d
 8006ee6:	d102      	bne.n	8006eee <_ZN12SimpleString4AtoIEPKc+0x78>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	425b      	negs	r3, r3
 8006eec:	e000      	b.n	8006ef0 <_ZN12SimpleString4AtoIEPKc+0x7a>
 8006eee:	68fb      	ldr	r3, [r7, #12]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00c      	beq.n	8006f24 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d106      	bne.n	8006f24 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	607b      	str	r3, [r7, #4]
       ++s2;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8006f22:	e7ee      	b.n	8006f02 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	1ad3      	subs	r3, r2, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 8006f44:	f04f 33ff 	mov.w	r3, #4294967295
 8006f48:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf14      	ite	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	2300      	moveq	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d000      	beq.n	8006f68 <_ZN12SimpleString6StrLenEPKc+0x2c>
 8006f66:	e7f0      	b.n	8006f4a <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 8006f68:	68fb      	ldr	r3, [r7, #12]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00f      	beq.n	8006fb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d109      	bne.n	8006fb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	607b      	str	r3, [r7, #4]
        ++s1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	60fb      	str	r3, [r7, #12]
        ++s2;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3301      	adds	r3, #1
 8006fac:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 8006fae:	e7e8      	b.n	8006f82 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	e000      	b.n	8006fc6 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
    char* result = s1;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	e01e      	b.n	8007030 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	607b      	str	r3, [r7, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800700e:	2301      	movs	r3, #1
 8007010:	e000      	b.n	8007014 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 8007012:	2300      	movs	r3, #0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3301      	adds	r3, #1
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800702c:	e7e5      	b.n	8006ffa <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800702e:	697b      	ldr	r3, [r7, #20]
}
 8007030:	4618      	mov	r0, r3
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	e01b      	b.n	800708a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d016      	beq.n	8007088 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800705a:	6838      	ldr	r0, [r7, #0]
 800705c:	f7ff ff6e 	bl	8006f3c <_ZN12SimpleString6StrLenEPKc>
 8007060:	4603      	mov	r3, r0
 8007062:	461a      	mov	r2, r3
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff ff85 	bl	8006f76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf0c      	ite	eq
 8007072:	2301      	moveq	r3, #1
 8007074:	2300      	movne	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	e004      	b.n	800708a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3301      	adds	r3, #1
 8007084:	607b      	str	r3, [r7, #4]
 8007086:	e7e4      	b.n	8007052 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	4603      	mov	r3, r0
 800709a:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fed9 	bl	8007e56 <_ZN12SimpleString7isUpperEc>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <_ZN12SimpleString7ToLowerEc+0x20>
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	3320      	adds	r3, #32
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	e000      	b.n	80070b4 <_ZN12SimpleString7ToLowerEc+0x22>
 80070b2:	79fb      	ldrb	r3, [r7, #7]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	613b      	str	r3, [r7, #16]

    while (n--)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	1e5a      	subs	r2, r3, #1
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bf14      	ite	ne
 80070da:	2301      	movne	r3, #1
 80070dc:	2300      	moveq	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d013      	beq.n	800710c <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	781a      	ldrb	r2, [r3, #0]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d006      	beq.n	80070fe <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	e007      	b.n	800710e <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	3301      	adds	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
            ++p2;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	3301      	adds	r3, #1
 8007108:	613b      	str	r3, [r7, #16]
    while (n--)
 800710a:	e7e1      	b.n	80070d0 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6859      	ldr	r1, [r3, #4]
 8007134:	23ee      	movs	r3, #238	; 0xee
 8007136:	4a06      	ldr	r2, [pc, #24]	; (8007150 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 8007138:	f7ff fe3a 	bl	8006db0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	605a      	str	r2, [r3, #4]
    }
}
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	08015bf0 	.word	0x08015bf0

08007154 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ffdd 	bl	800711c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fe37 	bl	8006ddc <_ZNK12SimpleString14getEmptyStringEv>
 800716e:	4602      	mov	r2, r0
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff ffc7 	bl	800711c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4619      	mov	r1, r3
 800719a:	68b8      	ldr	r0, [r7, #8]
 800719c:	f000 fe12 	bl	8007dc4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 80071a0:	4602      	mov	r2, r0
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	601a      	str	r2, [r3, #0]
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff ffae 	bl	800711c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f240 1209 	movw	r2, #265	; 0x109
 80071ce:	4907      	ldr	r1, [pc, #28]	; (80071ec <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fdd9 	bl	8006d88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 80071d6:	4602      	mov	r2, r0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2200      	movs	r2, #0
 80071e2:	701a      	strb	r2, [r3, #0]
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	08015bf0 	.word	0x08015bf0

080071f0 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff ff8d 	bl	800711c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	601a      	str	r2, [r3, #0]
}
 800720e:	bf00      	nop
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 8007216:	b590      	push	{r4, r7, lr}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681c      	ldr	r4, [r3, #0]
 8007224:	6838      	ldr	r0, [r7, #0]
 8007226:	f000 fbc1 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800722a:	4603      	mov	r3, r0
 800722c:	3301      	adds	r3, #1
 800722e:	461a      	mov	r2, r3
 8007230:	4621      	mov	r1, r4
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff ffa2 	bl	800717c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	bd90      	pop	{r4, r7, pc}

08007240 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800724a:	6838      	ldr	r0, [r7, #0]
 800724c:	f7ff fe76 	bl	8006f3c <_ZN12SimpleString6StrLenEPKc>
 8007250:	4603      	mov	r3, r0
 8007252:	3301      	adds	r3, #1
 8007254:	461a      	mov	r2, r3
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff ff8f 	bl	800717c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
    return buffer_;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d103      	bne.n	80072a2 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7ff ff5a 	bl	8007154 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 80072a0:	e003      	b.n	80072aa <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff ffcb 	bl	8007240 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 80072cc:	68b8      	ldr	r0, [r7, #8]
 80072ce:	f7ff fe35 	bl	8006f3c <_ZN12SimpleString6StrLenEPKc>
 80072d2:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
 80072dc:	3301      	adds	r3, #1
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff ff65 	bl	80071b0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d20e      	bcs.n	8007316 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3301      	adds	r3, #1
 80072fc:	461a      	mov	r2, r3
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	69f8      	ldr	r0, [r7, #28]
 8007302:	f7ff fe66 	bl	8006fd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	4413      	add	r3, r2
 800730c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	3301      	adds	r3, #1
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	e7ec      	b.n	80072f0 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
}
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800733c:	6838      	ldr	r0, [r7, #0]
 800733e:	f7ff ff92 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007342:	4603      	mov	r3, r0
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ff7a 	bl	8007240 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
    if (this != &other)
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d003      	beq.n	8007370 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff ff53 	bl	8007216 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 8007370:	687b      	ldr	r3, [r7, #4]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800737a:	b590      	push	{r4, r7, lr}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ff6e 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 800738a:	4604      	mov	r4, r0
 800738c:	6838      	ldr	r0, [r7, #0]
 800738e:	f7ff ff6a 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007392:	4603      	mov	r3, r0
 8007394:	4619      	mov	r1, r3
 8007396:	4620      	mov	r0, r4
 8007398:	f7ff fe50 	bl	800703c <_ZN12SimpleString6StrStrEPKcS1_>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bf14      	ite	ne
 80073a2:	2301      	movne	r3, #1
 80073a4:	2300      	moveq	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd90      	pop	{r4, r7, pc}

080073b0 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fabb 	bl	800793c <_ZNK12SimpleString9lowerCaseEv>
 80073c6:	f107 0310 	add.w	r3, r7, #16
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fab5 	bl	800793c <_ZNK12SimpleString9lowerCaseEv>
 80073d2:	f107 0210 	add.w	r2, r7, #16
 80073d6:	f107 0308 	add.w	r3, r7, #8
 80073da:	4611      	mov	r1, r2
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff ffcc 	bl	800737a <_ZNK12SimpleString8containsERKS_>
 80073e2:	4603      	mov	r3, r0
 80073e4:	461c      	mov	r4, r3
 80073e6:	bf00      	nop
 80073e8:	f107 0310 	add.w	r3, r7, #16
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fafe 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80073f2:	f107 0308 	add.w	r3, r7, #8
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 faf9 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80073fc:	4623      	mov	r3, r4
}
 80073fe:	4618      	mov	r0, r3
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	bd90      	pop	{r4, r7, pc}

08007406 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 8007406:	b590      	push	{r4, r7, lr}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 8007410:	6838      	ldr	r0, [r7, #0]
 8007412:	f000 facb 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	bf0c      	ite	eq
 800741c:	2301      	moveq	r3, #1
 800741e:	2300      	movne	r3, #0
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <_ZNK12SimpleString10startsWithERKS_+0x24>
 8007426:	2301      	movs	r3, #1
 8007428:	e022      	b.n	8007470 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fabe 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	bf0c      	ite	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	2300      	movne	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 8007440:	2300      	movs	r3, #0
 8007442:	e015      	b.n	8007470 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff ff0e 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 800744a:	4604      	mov	r4, r0
 800744c:	6838      	ldr	r0, [r7, #0]
 800744e:	f7ff ff0a 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007452:	4603      	mov	r3, r0
 8007454:	4619      	mov	r1, r3
 8007456:	4620      	mov	r0, r4
 8007458:	f7ff fdf0 	bl	800703c <_ZN12SimpleString6StrStrEPKcS1_>
 800745c:	4604      	mov	r4, r0
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7ff ff01 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007464:	4603      	mov	r3, r0
 8007466:	429c      	cmp	r4, r3
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	bd90      	pop	{r4, r7, pc}

08007478 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 8007478:	b590      	push	{r4, r7, lr}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
    size_t length = size();
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa92 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007488:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800748a:	6838      	ldr	r0, [r7, #0]
 800748c:	f000 fa8e 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007490:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <_ZNK12SimpleString8endsWithERKS_+0x24>
 8007498:	2301      	movs	r3, #1
 800749a:	e020      	b.n	80074de <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 80074a2:	2300      	movs	r3, #0
 80074a4:	e01b      	b.n	80074de <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d201      	bcs.n	80074b2 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 80074ae:	2300      	movs	r3, #0
 80074b0:	e015      	b.n	80074de <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fed7 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 80074b8:	4601      	mov	r1, r0
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	18cc      	adds	r4, r1, r3
 80074c2:	6838      	ldr	r0, [r7, #0]
 80074c4:	f7ff fecf 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 80074c8:	4603      	mov	r3, r0
 80074ca:	4619      	mov	r1, r3
 80074cc:	4620      	mov	r0, r4
 80074ce:	f7ff fd13 	bl	8006ef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bf0c      	ite	eq
 80074d8:	2301      	moveq	r3, #1
 80074da:	2300      	movne	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd90      	pop	{r4, r7, pc}

080074e6 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff feb6 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 80074fa:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
    if (*str){
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 8007508:	6838      	ldr	r0, [r7, #0]
 800750a:	f7ff feac 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 800750e:	4603      	mov	r3, r0
 8007510:	4619      	mov	r1, r3
 8007512:	6938      	ldr	r0, [r7, #16]
 8007514:	f7ff fd92 	bl	800703c <_ZN12SimpleString6StrStrEPKcS1_>
 8007518:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d014      	beq.n	800754c <_ZNK12SimpleString5countERKS_+0x66>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d011      	beq.n	800754c <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	613b      	str	r3, [r7, #16]
        str++;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	3301      	adds	r3, #1
 8007530:	613b      	str	r3, [r7, #16]
        num++;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	3301      	adds	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 8007538:	6838      	ldr	r0, [r7, #0]
 800753a:	f7ff fe94 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 800753e:	4603      	mov	r3, r0
 8007540:	4619      	mov	r1, r3
 8007542:	6938      	ldr	r0, [r7, #16]
 8007544:	f7ff fd7a 	bl	800703c <_ZN12SimpleString6StrStrEPKcS1_>
 8007548:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800754a:	e7e6      	b.n	800751a <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800754c:	697b      	ldr	r3, [r7, #20]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 8007556:	b590      	push	{r4, r7, lr}
 8007558:	b091      	sub	sp, #68	; 0x44
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7ff ffbe 	bl	80074e6 <_ZNK12SimpleString5countERKS_>
 800756a:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff ff82 	bl	8007478 <_ZNK12SimpleString8endsWithERKS_>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800757a:	2300      	movs	r3, #0
 800757c:	e000      	b.n	8007580 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800757e:	2301      	movs	r3, #1
 8007580:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 8007582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	4413      	add	r3, r2
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 f84e 	bl	800862c <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fe68 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007596:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 8007598:	2300      	movs	r3, #0
 800759a:	63bb      	str	r3, [r7, #56]	; 0x38
 800759c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800759e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d235      	bcs.n	8007610 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 80075a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 80075a8:	68b8      	ldr	r0, [r7, #8]
 80075aa:	f7ff fe5c 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 80075ae:	4603      	mov	r3, r0
 80075b0:	4619      	mov	r1, r3
 80075b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80075b4:	f7ff fd42 	bl	800703c <_ZN12SimpleString6StrStrEPKcS1_>
 80075b8:	4603      	mov	r3, r0
 80075ba:	3301      	adds	r3, #1
 80075bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 80075be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 f8cd 	bl	8008760 <_ZN22SimpleStringCollectionixEj>
 80075c6:	4604      	mov	r4, r0
 80075c8:	f107 031c 	add.w	r3, r7, #28
 80075cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff fe55 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80075d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f107 0014 	add.w	r0, r7, #20
 80075de:	f107 011c 	add.w	r1, r7, #28
 80075e2:	2200      	movs	r2, #0
 80075e4:	f000 fb0c 	bl	8007c00 <_ZNK12SimpleString9subStringEjj>
 80075e8:	f107 0314 	add.w	r3, r7, #20
 80075ec:	4619      	mov	r1, r3
 80075ee:	4620      	mov	r0, r4
 80075f0:	f7ff feb1 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 80075f4:	f107 0314 	add.w	r3, r7, #20
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f9f8 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80075fe:	f107 031c 	add.w	r3, r7, #28
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f9f3 	bl	80079ee <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 8007608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760a:	3301      	adds	r3, #1
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38
 800760e:	e7c5      	b.n	800759c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	2b00      	cmp	r3, #0
 8007614:	d015      	beq.n	8007642 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 8007616:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 f8a1 	bl	8008760 <_ZN22SimpleStringCollectionixEj>
 800761e:	4604      	mov	r4, r0
 8007620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff fe29 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800762c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007630:	4619      	mov	r1, r3
 8007632:	4620      	mov	r0, r4
 8007634:	f7ff fe8f 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8007638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f9d6 	bl	80079ee <_ZN12SimpleStringD1Ev>
    }
}
 8007642:	bf00      	nop
 8007644:	3744      	adds	r7, #68	; 0x44
 8007646:	46bd      	mov	sp, r7
 8007648:	bd90      	pop	{r4, r7, pc}

0800764a <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
 8007656:	4613      	mov	r3, r2
 8007658:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f9a6 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007660:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	429a      	cmp	r2, r3
 800766c:	d218      	bcs.n	80076a0 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fdf9 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007674:	4602      	mov	r2, r0
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	429a      	cmp	r2, r3
 8007680:	bf0c      	ite	eq
 8007682:	2301      	moveq	r3, #1
 8007684:	2300      	movne	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <_ZN12SimpleString7replaceEcc+0x4e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	78ba      	ldrb	r2, [r7, #2]
 8007696:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e7e2      	b.n	8007666 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 80076a0:	bf00      	nop
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08e      	sub	sp, #56	; 0x38
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 80076b4:	f107 0310 	add.w	r3, r7, #16
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fddf 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80076c0:	f107 0310 	add.w	r3, r7, #16
 80076c4:	4619      	mov	r1, r3
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff ff0d 	bl	80074e6 <_ZNK12SimpleString5countERKS_>
 80076cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80076ce:	f107 0310 	add.w	r3, r7, #16
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f98b 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d071      	beq.n	80077c2 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 f964 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 80076e4:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 80076e6:	68b8      	ldr	r0, [r7, #8]
 80076e8:	f7ff fc28 	bl	8006f3c <_ZN12SimpleString6StrLenEPKc>
 80076ec:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fc24 	bl	8006f3c <_ZN12SimpleString6StrLenEPKc>
 80076f4:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076fa:	fb02 f203 	mul.w	r2, r2, r3
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	441a      	add	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007706:	fb01 f303 	mul.w	r3, r1, r3
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	3301      	adds	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d951      	bls.n	80077ba <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 8007716:	f240 129d 	movw	r2, #413	; 0x19d
 800771a:	492c      	ldr	r1, [pc, #176]	; (80077cc <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800771c:	69f8      	ldr	r0, [r7, #28]
 800771e:	f7ff fb33 	bl	8006d88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007722:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 8007724:	2300      	movs	r3, #0
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
 8007728:	2300      	movs	r3, #0
 800772a:	633b      	str	r3, [r7, #48]	; 0x30
 800772c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	429a      	cmp	r2, r3
 8007732:	d236      	bcs.n	80077a2 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff fd96 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 800773a:	4602      	mov	r2, r0
 800773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773e:	4413      	add	r3, r2
 8007740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff fc16 	bl	8006f76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d011      	beq.n	800777e <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	18d0      	adds	r0, r2, r3
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	3301      	adds	r3, #1
 8007764:	461a      	mov	r2, r3
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	f7ff fc33 	bl	8006fd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800776c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	4413      	add	r3, r2
 8007772:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 8007774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	4413      	add	r3, r2
 800777a:	637b      	str	r3, [r7, #52]	; 0x34
 800777c:	e7d6      	b.n	800772c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff fd71 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007784:	4602      	mov	r2, r0
 8007786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007788:	441a      	add	r2, r3
 800778a:	69b9      	ldr	r1, [r7, #24]
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	440b      	add	r3, r1
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	701a      	strb	r2, [r3, #0]
                j++;
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	3301      	adds	r3, #1
 8007798:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800779a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779c:	3301      	adds	r3, #1
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 80077a0:	e7c4      	b.n	800772c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	4413      	add	r3, r2
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	69b9      	ldr	r1, [r7, #24]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff fd1c 	bl	80071f0 <_ZN12SimpleString19setInternalBufferToEPcj>
 80077b8:	e004      	b.n	80077c4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff fcca 	bl	8007154 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 80077c0:	e000      	b.n	80077c4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 80077c2:	bf00      	nop
}
 80077c4:	3738      	adds	r7, #56	; 0x38
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	08015bf0 	.word	0x08015bf0

080077d0 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b089      	sub	sp, #36	; 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 80077da:	493b      	ldr	r1, [pc, #236]	; (80078c8 <_ZNK12SimpleString9printableEv+0xf8>)
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff fd4e 	bl	800727e <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 80077e2:	6838      	ldr	r0, [r7, #0]
 80077e4:	f000 f876 	bl	80078d4 <_ZNK12SimpleString16getPrintableSizeEv>
 80077e8:	4603      	mov	r3, r0
 80077ea:	3301      	adds	r3, #1
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fcde 	bl	80071b0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 80077f4:	6838      	ldr	r0, [r7, #0]
 80077f6:	f000 f8d9 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 80077fa:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8007800:	2300      	movs	r3, #0
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	429a      	cmp	r2, r3
 800780a:	d252      	bcs.n	80078b2 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	4413      	add	r3, r2
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 8007818:	7cfb      	ldrb	r3, [r7, #19]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fb43 	bl	8007ea6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d012      	beq.n	800784c <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	18d0      	adds	r0, r2, r3
 800782e:	7cfb      	ldrb	r3, [r7, #19]
 8007830:	3b07      	subs	r3, #7
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	4b25      	ldr	r3, [pc, #148]	; (80078cc <_ZNK12SimpleString9printableEv+0xfc>)
 8007838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783c:	2202      	movs	r2, #2
 800783e:	4619      	mov	r1, r3
 8007840:	f7ff fbc7 	bl	8006fd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	3302      	adds	r3, #2
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	e02e      	b.n	80078aa <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800784c:	7cfb      	ldrb	r3, [r7, #19]
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fb15 	bl	8007e7e <_ZN12SimpleString9isControlEc>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01e      	beq.n	8007898 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800785a:	7cfa      	ldrb	r2, [r7, #19]
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	491b      	ldr	r1, [pc, #108]	; (80078d0 <_ZNK12SimpleString9printableEv+0x100>)
 8007862:	4618      	mov	r0, r3
 8007864:	f000 fd50 	bl	8008308 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	18d4      	adds	r4, r2, r3
 8007870:	f107 0308 	add.w	r3, r7, #8
 8007874:	4618      	mov	r0, r3
 8007876:	f000 f88d 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800787a:	4603      	mov	r3, r0
 800787c:	2204      	movs	r2, #4
 800787e:	4619      	mov	r1, r3
 8007880:	4620      	mov	r0, r4
 8007882:	f7ff fba6 	bl	8006fd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	3304      	adds	r3, #4
 800788a:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800788c:	f107 0308 	add.w	r3, r7, #8
 8007890:	4618      	mov	r0, r3
 8007892:	f000 f8ac 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8007896:	e008      	b.n	80078aa <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	7cfa      	ldrb	r2, [r7, #19]
 80078a2:	701a      	strb	r2, [r3, #0]
            j++;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	3301      	adds	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	3301      	adds	r3, #1
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	e7a8      	b.n	8007804 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	4413      	add	r3, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]

    return result;
 80078be:	bf00      	nop
}
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	3724      	adds	r7, #36	; 0x24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd90      	pop	{r4, r7, pc}
 80078c8:	08015cb0 	.word	0x08015cb0
 80078cc:	20000068 	.word	0x20000068
 80078d0:	08015cb4 	.word	0x08015cb4

080078d4 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f865 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 80078e2:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 80078e8:	2300      	movs	r3, #0
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d21e      	bcs.n	8007932 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	4413      	add	r3, r2
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 facf 	bl	8007ea6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	3301      	adds	r3, #1
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	e009      	b.n	800792a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fab0 	bl	8007e7e <_ZN12SimpleString9isControlEc>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	3303      	adds	r3, #3
 8007928:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	3301      	adds	r3, #1
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	e7dc      	b.n	80078ec <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 8007932:	697b      	ldr	r3, [r7, #20]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff fcec 	bl	8007326 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f82c 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007954:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	429a      	cmp	r2, r3
 8007960:	d213      	bcs.n	800798a <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fc7f 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007968:	4602      	mov	r2, r0
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4413      	add	r3, r2
 800796e:	7819      	ldrb	r1, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	18d4      	adds	r4, r2, r3
 8007978:	4608      	mov	r0, r1
 800797a:	f7ff fb8a 	bl	8007092 <_ZN12SimpleString7ToLowerEc>
 800797e:	4603      	mov	r3, r0
 8007980:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e7e7      	b.n	800795a <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800798a:	bf00      	nop
}
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	bd90      	pop	{r4, r7, pc}

08007994 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fc62 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 80079a2:	4603      	mov	r3, r0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fc56 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 80079ba:	4603      	mov	r3, r0
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fabd 	bl	8006f3c <_ZN12SimpleString6StrLenEPKc>
 80079c2:	4603      	mov	r3, r0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
    return size() == 0;
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ffe9 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff fb90 	bl	800711c <_ZN12SimpleString24deallocateInternalBufferEv>
}
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 8007a06:	b590      	push	{r4, r7, lr}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff ffbf 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8007a16:	4604      	mov	r4, r0
 8007a18:	6838      	ldr	r0, [r7, #0]
 8007a1a:	f7ff ffbb 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	4619      	mov	r1, r3
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7ff fa68 	bl	8006ef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bf0c      	ite	eq
 8007a2e:	2301      	moveq	r3, #1
 8007a30:	2300      	movne	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd90      	pop	{r4, r7, pc}

08007a3c <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff ff75 	bl	800793c <_ZNK12SimpleString9lowerCaseEv>
 8007a52:	f107 0310 	add.w	r3, r7, #16
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff ff6f 	bl	800793c <_ZNK12SimpleString9lowerCaseEv>
 8007a5e:	f107 0210 	add.w	r2, r7, #16
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff ffcc 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	461c      	mov	r4, r3
 8007a72:	f107 0310 	add.w	r3, r7, #16
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ffb9 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8007a7c:	f107 0308 	add.w	r3, r7, #8
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff ffb4 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8007a86:	4623      	mov	r3, r4
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd90      	pop	{r4, r7, pc}

08007a90 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
    return !(left == right);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ffb2 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f083 0301 	eor.w	r3, r3, #1
 8007aa8:	b2db      	uxtb	r3, r3
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 8007abe:	68b8      	ldr	r0, [r7, #8]
 8007ac0:	f7ff fbd1 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff fbd8 	bl	800727e <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fbc9 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f817 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    return t;
 8007ade:	bf00      	nop
}
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 8007af2:	6838      	ldr	r0, [r7, #0]
 8007af4:	f7ff fbb7 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007af8:	4603      	mov	r3, r0
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f805 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
 8007b02:	4603      	mov	r3, r0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff ff48 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007b1c:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 8007b1e:	6838      	ldr	r0, [r7, #0]
 8007b20:	f7ff fa0c 	bl	8006f3c <_ZN12SimpleString6StrLenEPKc>
 8007b24:	4603      	mov	r3, r0
 8007b26:	3301      	adds	r3, #1
 8007b28:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff fb97 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	68f9      	ldr	r1, [r7, #12]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 f941 	bl	8007dc4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 8007b42:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	4413      	add	r3, r2
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fa3f 	bl	8006fd2 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff fb49 	bl	80071f0 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 8007b5e:	687b      	ldr	r3, [r7, #4]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b08b      	sub	sp, #44	; 0x2c
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	4613      	mov	r3, r2
 8007b74:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff ff18 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	68b8      	ldr	r0, [r7, #8]
 8007b80:	f7ff ff14 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007b84:	4603      	mov	r3, r0
 8007b86:	429c      	cmp	r4, r3
 8007b88:	bf8c      	ite	hi
 8007b8a:	2301      	movhi	r3, #1
 8007b8c:	2300      	movls	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d006      	beq.n	8007ba2 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	461a      	mov	r2, r3
 8007b98:	68f9      	ldr	r1, [r7, #12]
 8007b9a:	68b8      	ldr	r0, [r7, #8]
 8007b9c:	f7ff ffe4 	bl	8007b68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 8007ba0:	e02b      	b.n	8007bfa <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 8007baa:	68b8      	ldr	r0, [r7, #8]
 8007bac:	f7ff fefe 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff fefa 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	1ae2      	subs	r2, r4, r3
 8007bbc:	f107 0114 	add.w	r1, r7, #20
 8007bc0:	f107 0320 	add.w	r3, r7, #32
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fb75 	bl	80072b4 <_ZN12SimpleStringC1EPKcj>
 8007bca:	f107 0318 	add.w	r3, r7, #24
 8007bce:	f107 0120 	add.w	r1, r7, #32
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff ff6c 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8007bda:	f107 0318 	add.w	r3, r7, #24
 8007bde:	4619      	mov	r1, r3
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff fbb8 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8007be6:	f107 0318 	add.w	r3, r7, #24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff feff 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8007bf0:	f107 0320 	add.w	r3, r7, #32
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fefa 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8007bfa:	372c      	adds	r7, #44	; 0x2c
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd90      	pop	{r4, r7, pc}

08007c00 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 8007c0e:	68b8      	ldr	r0, [r7, #8]
 8007c10:	f7ff fecc 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007c14:	4603      	mov	r3, r0
 8007c16:	3b01      	subs	r3, #1
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	bf8c      	ite	hi
 8007c1e:	2301      	movhi	r3, #1
 8007c20:	2300      	movls	r3, #0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <_ZNK12SimpleString9subStringEjj+0x32>
 8007c28:	4919      	ldr	r1, [pc, #100]	; (8007c90 <_ZNK12SimpleString9subStringEjj+0x90>)
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f7ff fb27 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8007c30:	e029      	b.n	8007c86 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 8007c32:	68b8      	ldr	r0, [r7, #8]
 8007c34:	f7ff fb17 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	441a      	add	r2, r3
 8007c3e:	f107 0310 	add.w	r3, r7, #16
 8007c42:	4611      	mov	r1, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fb1a 	bl	800727e <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 8007c4a:	f107 0310 	add.w	r3, r7, #16
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff feac 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007c54:	4602      	mov	r2, r0
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	bf34      	ite	cc
 8007c5c:	2301      	movcc	r3, #1
 8007c5e:	2300      	movcs	r3, #0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]

    return newString;
 8007c70:	f107 0310 	add.w	r3, r7, #16
 8007c74:	4619      	mov	r1, r3
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fb55 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 8007c7c:	f107 0310 	add.w	r3, r7, #16
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff feb4 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	08015cb0 	.word	0x08015cb0

08007c94 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	f7ff ffa9 	bl	8007c00 <_ZNK12SimpleString9subStringEjj>
}
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fad0 	bl	8007266 <_ZNK12SimpleString9getBufferEv>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	4413      	add	r3, r2
 8007ccc:	781b      	ldrb	r3, [r3, #0]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f805 	bl	8007cf8 <_ZNK12SimpleString8findFromEjc>
 8007cee:	4603      	mov	r3, r0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff fe50 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8007d0c:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d213      	bcs.n	8007d42 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 8007d1a:	6979      	ldr	r1, [r7, #20]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff ffca 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 8007d22:	4603      	mov	r3, r0
 8007d24:	461a      	mov	r2, r3
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2301      	moveq	r3, #1
 8007d2e:	2300      	movne	r3, #0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <_ZNK12SimpleString8findFromEjc+0x42>
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	e005      	b.n	8007d46 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	e7e7      	b.n	8007d12 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 8007d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	460b      	mov	r3, r1
 8007d60:	71fb      	strb	r3, [r7, #7]
 8007d62:	4613      	mov	r3, r2
 8007d64:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68b8      	ldr	r0, [r7, #8]
 8007d6c:	f7ff ffb3 	bl	8007cd6 <_ZNK12SimpleString4findEc>
 8007d70:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d104      	bne.n	8007d84 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 8007d7a:	4911      	ldr	r1, [pc, #68]	; (8007dc0 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff fa7e 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8007d82:	e019      	b.n	8007db8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 8007d84:	79bb      	ldrb	r3, [r7, #6]
 8007d86:	461a      	mov	r2, r3
 8007d88:	6979      	ldr	r1, [r7, #20]
 8007d8a:	68b8      	ldr	r0, [r7, #8]
 8007d8c:	f7ff ffb4 	bl	8007cf8 <_ZNK12SimpleString8findFromEjc>
 8007d90:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d98:	d106      	bne.n	8007da8 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff ff77 	bl	8007c94 <_ZNK12SimpleString9subStringEj>
 8007da6:	e007      	b.n	8007db8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	f7ff ff24 	bl	8007c00 <_ZNK12SimpleString9subStringEjj>
}
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	08015cb0 	.word	0x08015cb0

08007dc4 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 8007dce:	f240 2275 	movw	r2, #629	; 0x275
 8007dd2:	490a      	ldr	r1, [pc, #40]	; (8007dfc <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 8007dd4:	6838      	ldr	r0, [r7, #0]
 8007dd6:	f7fe ffd7 	bl	8006d88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8007dda:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff f8f6 	bl	8006fd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4413      	add	r3, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 8007df2:	68fb      	ldr	r3, [r7, #12]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	08015bf0 	.word	0x08015bf0

08007e00 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	2b2f      	cmp	r3, #47	; 0x2f
 8007e0e:	d904      	bls.n	8007e1a <_ZN12SimpleString7isDigitEc+0x1a>
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	2b39      	cmp	r3, #57	; 0x39
 8007e14:	d801      	bhi.n	8007e1a <_ZN12SimpleString7isDigitEc+0x1a>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <_ZN12SimpleString7isDigitEc+0x1c>
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 8007e32:	79fb      	ldrb	r3, [r7, #7]
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d005      	beq.n	8007e44 <_ZN12SimpleString7isSpaceEc+0x1c>
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	d904      	bls.n	8007e48 <_ZN12SimpleString7isSpaceEc+0x20>
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	2b0d      	cmp	r3, #13
 8007e42:	d801      	bhi.n	8007e48 <_ZN12SimpleString7isSpaceEc+0x20>
 8007e44:	2301      	movs	r3, #1
 8007e46:	e000      	b.n	8007e4a <_ZN12SimpleString7isSpaceEc+0x22>
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d904      	bls.n	8007e70 <_ZN12SimpleString7isUpperEc+0x1a>
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	2b5a      	cmp	r3, #90	; 0x5a
 8007e6a:	d801      	bhi.n	8007e70 <_ZN12SimpleString7isUpperEc+0x1a>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <_ZN12SimpleString7isUpperEc+0x1c>
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	4603      	mov	r3, r0
 8007e86:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b1f      	cmp	r3, #31
 8007e8c:	d902      	bls.n	8007e94 <_ZN12SimpleString9isControlEc+0x16>
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	2b7f      	cmp	r3, #127	; 0x7f
 8007e92:	d101      	bne.n	8007e98 <_ZN12SimpleString9isControlEc+0x1a>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e000      	b.n	8007e9a <_ZN12SimpleString9isControlEc+0x1c>
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	4603      	mov	r3, r0
 8007eae:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b06      	cmp	r3, #6
 8007eb4:	d904      	bls.n	8007ec0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	2b0d      	cmp	r3, #13
 8007eba:	d801      	bhi.n	8007ec0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <_Z10StringFromPKc>:
{
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
}

SimpleString StringFrom(const char *value)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff f9cf 	bl	800727e <_ZN12SimpleStringC1EPKc>
}
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 8007ef2:	2400      	movs	r4, #0
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00e      	beq.n	8007f18 <_Z25PrintableStringFromOrNullPKc+0x30>
 8007efa:	f107 0308 	add.w	r3, r7, #8
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff ffe4 	bl	8007ece <_Z10StringFromPKc>
 8007f06:	2401      	movs	r4, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f107 0208 	add.w	r2, r7, #8
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fc5d 	bl	80077d0 <_ZNK12SimpleString9printableEv>
 8007f16:	e004      	b.n	8007f22 <_Z25PrintableStringFromOrNullPKc+0x3a>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4908      	ldr	r1, [pc, #32]	; (8007f3c <_Z25PrintableStringFromOrNullPKc+0x54>)
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff ffd6 	bl	8007ece <_Z10StringFromPKc>
 8007f22:	2c00      	cmp	r4, #0
 8007f24:	d004      	beq.n	8007f30 <_Z25PrintableStringFromOrNullPKc+0x48>
 8007f26:	f107 0308 	add.w	r3, r7, #8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff fd5f 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8007f30:	bf00      	nop
}
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd90      	pop	{r4, r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	08015cd0 	.word	0x08015cd0

08007f40 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	4904      	ldr	r1, [pc, #16]	; (8007f60 <_Z10StringFromi+0x20>)
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f9d9 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	08015cd8 	.word	0x08015cd8

08007f64 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	4904      	ldr	r1, [pc, #16]	; (8007f84 <_Z10StringFroml+0x20>)
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 f9c7 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	08015cdc 	.word	0x08015cdc

08007f88 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 8007f92:	f107 0308 	add.w	r3, r7, #8
 8007f96:	4910      	ldr	r1, [pc, #64]	; (8007fd8 <_Z10StringFromPKv+0x50>)
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff f970 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8007f9e:	f107 0310 	add.w	r3, r7, #16
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f945 	bl	8008234 <_Z13HexStringFromPKv>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f107 0210 	add.w	r2, r7, #16
 8007fb0:	f107 0108 	add.w	r1, r7, #8
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fd7c 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8007fba:	f107 0310 	add.w	r3, r7, #16
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fd15 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8007fc4:	f107 0308 	add.w	r3, r7, #8
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff fd10 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8007fce:	bf00      	nop
}
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	08015ce0 	.word	0x08015ce0

08007fdc <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 8007fe6:	f107 0308 	add.w	r3, r7, #8
 8007fea:	4910      	ldr	r1, [pc, #64]	; (800802c <_Z10StringFromPFvvE+0x50>)
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff f946 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8007ff2:	f107 0310 	add.w	r3, r7, #16
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f92f 	bl	800825c <_Z13HexStringFromPFvvE>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f107 0210 	add.w	r2, r7, #16
 8008004:	f107 0108 	add.w	r1, r7, #8
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fd52 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 800800e:	f107 0310 	add.w	r3, r7, #16
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff fceb 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008018:	f107 0308 	add.w	r3, r7, #8
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff fce6 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008022:	bf00      	nop
}
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	08015ce0 	.word	0x08015ce0

08008030 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	4904      	ldr	r1, [pc, #16]	; (8008050 <_Z13HexStringFroml+0x20>)
 8008040:	4618      	mov	r0, r3
 8008042:	f000 f961 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	08015ce4 	.word	0x08015ce4

08008054 <_Z13HexStringFroma>:
{
    return StringFromFormat("%x", value);
}

SimpleString HexStringFrom(signed char value)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 8008060:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4912      	ldr	r1, [pc, #72]	; (80080b0 <_Z13HexStringFroma+0x5c>)
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f94d 	bl	8008308 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800806e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008072:	2b00      	cmp	r3, #0
 8008074:	da16      	bge.n	80080a4 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff fc98 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800807c:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	1e9a      	subs	r2, r3, #2
 8008082:	f107 030c 	add.w	r3, r7, #12
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff fe03 	bl	8007c94 <_ZNK12SimpleString9subStringEj>
 800808e:	f107 030c 	add.w	r3, r7, #12
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff f95e 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 800809a:	f107 030c 	add.w	r3, r7, #12
 800809e:	4618      	mov	r0, r3
 80080a0:	f7ff fca5 	bl	80079ee <_ZN12SimpleStringD1Ev>
    }
    return result;
 80080a4:	bf00      	nop
}
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	08015ce8 	.word	0x08015ce8

080080b4 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	4904      	ldr	r1, [pc, #16]	; (80080d4 <_Z13HexStringFromm+0x20>)
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f91f 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	08015ce4 	.word	0x08015ce4

080080d8 <_Z30BracketsFormattedHexStringFroml>:
{
    return BracketsFormattedHexString(HexStringFrom(value));
}

SimpleString BracketsFormattedHexStringFrom(long value)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 80080e2:	f107 0308 	add.w	r3, r7, #8
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff ffa1 	bl	8008030 <_Z13HexStringFroml>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f107 0208 	add.w	r2, r7, #8
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 f846 	bl	8008188 <_Z26BracketsFormattedHexString12SimpleString>
 80080fc:	f107 0308 	add.w	r3, r7, #8
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff fc74 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008106:	bf00      	nop
}
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800811a:	f107 0308 	add.w	r3, r7, #8
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff ffc7 	bl	80080b4 <_Z13HexStringFromm>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f107 0208 	add.w	r2, r7, #8
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f82a 	bl	8008188 <_Z26BracketsFormattedHexString12SimpleString>
 8008134:	f107 0308 	add.w	r3, r7, #8
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fc58 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800813e:	bf00      	nop
}
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 8008154:	f107 0308 	add.w	r3, r7, #8
 8008158:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800815c:	4611      	mov	r1, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff ff78 	bl	8008054 <_Z13HexStringFroma>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f107 0208 	add.w	r2, r7, #8
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f80b 	bl	8008188 <_Z26BracketsFormattedHexString12SimpleString>
 8008172:	f107 0308 	add.w	r3, r7, #8
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fc39 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800817c:	bf00      	nop
}
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 8008192:	f107 0310 	add.w	r3, r7, #16
 8008196:	4917      	ldr	r1, [pc, #92]	; (80081f4 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff f870 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	f107 0110 	add.w	r1, r7, #16
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff fc82 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 80081ae:	f107 0318 	add.w	r3, r7, #24
 80081b2:	4911      	ldr	r1, [pc, #68]	; (80081f8 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff f862 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f107 0218 	add.w	r2, r7, #24
 80081c0:	f107 0108 	add.w	r1, r7, #8
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff fc74 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 80081ca:	f107 0318 	add.w	r3, r7, #24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fc0d 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80081d4:	f107 0308 	add.w	r3, r7, #8
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fc08 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80081de:	f107 0310 	add.w	r3, r7, #16
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fc03 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80081e8:	bf00      	nop
}
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	3720      	adds	r7, #32
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	08015cec 	.word	0x08015cec
 80081f8:	08015cf0 	.word	0x08015cf0

080081fc <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8008204:	1d3b      	adds	r3, r7, #4
 8008206:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8008220:	1d3b      	adds	r3, r7, #4
 8008222:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800823e:	6838      	ldr	r0, [r7, #0]
 8008240:	f7ff ffdc 	bl	80081fc <_ZL25convertPointerToLongValuePKv>
 8008244:	4602      	mov	r2, r0
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4903      	ldr	r1, [pc, #12]	; (8008258 <_Z13HexStringFromPKv+0x24>)
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f85c 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	08015ce4 	.word	0x08015ce4

0800825c <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 8008266:	6838      	ldr	r0, [r7, #0]
 8008268:	f7ff ffd6 	bl	8008218 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800826c:	4602      	mov	r2, r0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4903      	ldr	r1, [pc, #12]	; (8008280 <_Z13HexStringFromPFvvE+0x24>)
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f848 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	08015ce4 	.word	0x08015ce4

08008284 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	ed87 0b00 	vstr	d0, [r7]
 8008290:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 8008292:	4b18      	ldr	r3, [pc, #96]	; (80082f4 <_Z10StringFromdi+0x70>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	ed97 0b00 	vldr	d0, [r7]
 800829a:	4798      	blx	r3
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bf14      	ite	ne
 80082a2:	2301      	movne	r3, #1
 80082a4:	2300      	moveq	r3, #0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 80082ac:	4912      	ldr	r1, [pc, #72]	; (80082f8 <_Z10StringFromdi+0x74>)
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f7fe ffe5 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80082b4:	e01a      	b.n	80082ec <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <_Z10StringFromdi+0x78>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	ed97 0b00 	vldr	d0, [r7]
 80082be:	4798      	blx	r3
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bf14      	ite	ne
 80082c6:	2301      	movne	r3, #1
 80082c8:	2300      	moveq	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d004      	beq.n	80082da <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 80082d0:	490b      	ldr	r1, [pc, #44]	; (8008300 <_Z10StringFromdi+0x7c>)
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7fe ffd3 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80082d8:	e008      	b.n	80082ec <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082e0:	e9cd 2300 	strd	r2, r3, [sp]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	4907      	ldr	r1, [pc, #28]	; (8008304 <_Z10StringFromdi+0x80>)
 80082e8:	f000 f80e 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200000e0 	.word	0x200000e0
 80082f8:	08015d24 	.word	0x08015d24
 80082fc:	200000e4 	.word	0x200000e4
 8008300:	08015d38 	.word	0x08015d38
 8008304:	08015d48 	.word	0x08015d48

08008308 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 8008308:	b40e      	push	{r1, r2, r3}
 800830a:	b580      	push	{r7, lr}
 800830c:	b087      	sub	sp, #28
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 8008312:	4910      	ldr	r1, [pc, #64]	; (8008354 <_Z16StringFromFormatPKcz+0x4c>)
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7fe ffb2 	bl	800727e <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800831a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800831e:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 8008320:	f107 0310 	add.w	r3, r7, #16
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f839 	bl	80083a0 <_Z17VStringFromFormatPKcSt9__va_list>
 800832e:	f107 0310 	add.w	r3, r7, #16
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff f80e 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 800833a:	f107 0310 	add.w	r3, r7, #16
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff fb55 	bl	80079ee <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 8008344:	bf00      	nop
}
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008350:	b003      	add	sp, #12
 8008352:	4770      	bx	lr
 8008354:	08015cb0 	.word	0x08015cb0

08008358 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	4904      	ldr	r1, [pc, #16]	; (8008378 <_Z10StringFromj+0x20>)
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff ffcd 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	08015d54 	.word	0x08015d54

0800837c <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	4904      	ldr	r1, [pc, #16]	; (800839c <_Z10StringFromm+0x20>)
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff ffbb 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	08015d58 	.word	0x08015d58

080083a0 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b0a7      	sub	sp, #156	; 0x9c
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 80083b0:	492e      	ldr	r1, [pc, #184]	; (800846c <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f7fe ff63 	bl	800727e <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 80083b8:	4b2d      	ldr	r3, [pc, #180]	; (8008470 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 80083ba:	681c      	ldr	r4, [r3, #0]
 80083bc:	f107 0014 	add.w	r0, r7, #20
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	2164      	movs	r1, #100	; 0x64
 80083c6:	47a0      	blx	r4
 80083c8:	4603      	mov	r3, r0
 80083ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 80083ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083d2:	2b63      	cmp	r3, #99	; 0x63
 80083d4:	d813      	bhi.n	80083fe <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 80083d6:	f107 0214 	add.w	r2, r7, #20
 80083da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe ff4c 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80083e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083ea:	4619      	mov	r1, r3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7fe ffb2 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 80083f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff faf9 	bl	80079ee <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 80083fc:	e031      	b.n	8008462 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 80083fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008402:	3301      	adds	r3, #1
 8008404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 8008408:	f240 32c3 	movw	r2, #963	; 0x3c3
 800840c:	4919      	ldr	r1, [pc, #100]	; (8008474 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800840e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008412:	f7fe fcb9 	bl	8006d88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8008416:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800841a:	4b15      	ldr	r3, [pc, #84]	; (8008470 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800841c:	681c      	ldr	r4, [r3, #0]
 800841e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008426:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800842a:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800842c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008430:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe ff22 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800843a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800843e:	4619      	mov	r1, r3
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7fe ff88 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8008446:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff facf 	bl	80079ee <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 8008450:	f240 33c7 	movw	r3, #967	; 0x3c7
 8008454:	4a07      	ldr	r2, [pc, #28]	; (8008474 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8008456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800845a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800845e:	f7fe fca7 	bl	8006db0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 8008462:	bf00      	nop
}
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	379c      	adds	r7, #156	; 0x9c
 8008468:	46bd      	mov	sp, r7
 800846a:	bd90      	pop	{r4, r7, pc}
 800846c:	08015cb0 	.word	0x08015cb0
 8008470:	200000ac 	.word	0x200000ac
 8008474:	08015bf0 	.word	0x08015bf0

08008478 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
    SimpleString result;
 8008484:	491f      	ldr	r1, [pc, #124]	; (8008504 <_Z16StringFromBinaryPKhj+0x8c>)
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7fe fef9 	bl	800727e <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800848c:	2300      	movs	r3, #0
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
 8008490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	d219      	bcs.n	80084cc <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	4413      	add	r3, r2
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	4918      	ldr	r1, [pc, #96]	; (8008508 <_Z16StringFromBinaryPKhj+0x90>)
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff ff2d 	bl	8008308 <_Z16StringFromFormatPKcz>
 80084ae:	f107 0314 	add.w	r3, r7, #20
 80084b2:	4619      	mov	r1, r3
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f7ff fb17 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 80084ba:	f107 0314 	add.w	r3, r7, #20
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff fa95 	bl	80079ee <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	3301      	adds	r3, #1
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
 80084ca:	e7e1      	b.n	8008490 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff fa6d 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 80084d2:	4603      	mov	r3, r0
 80084d4:	3b01      	subs	r3, #1
 80084d6:	f107 001c 	add.w	r0, r7, #28
 80084da:	2200      	movs	r2, #0
 80084dc:	68f9      	ldr	r1, [r7, #12]
 80084de:	f7ff fb8f 	bl	8007c00 <_ZNK12SimpleString9subStringEjj>
 80084e2:	f107 031c 	add.w	r3, r7, #28
 80084e6:	4619      	mov	r1, r3
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7fe ff34 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 80084ee:	f107 031c 	add.w	r3, r7, #28
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff fa7b 	bl	80079ee <_ZN12SimpleStringD1Ev>

    return result;
 80084f8:	bf00      	nop
}
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	3728      	adds	r7, #40	; 0x28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	08015cb0 	.word	0x08015cb0
 8008508:	08015d5c 	.word	0x08015d5c

0800850c <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d006      	beq.n	800852c <_Z22StringFromBinaryOrNullPKhj+0x20>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff ffa7 	bl	8008478 <_Z16StringFromBinaryPKhj>
 800852a:	e004      	b.n	8008536 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4904      	ldr	r1, [pc, #16]	; (8008540 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff fccc 	bl	8007ece <_Z10StringFromPKc>
}
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	08015cd0 	.word	0x08015cd0

08008544 <_Z20StringFromMaskedBitsmmj>:
{
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
}

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8008552:	4925      	ldr	r1, [pc, #148]	; (80085e8 <_Z20StringFromMaskedBitsmmj+0xa4>)
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7fe fe92 	bl	800727e <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b04      	cmp	r3, #4
 800855e:	d802      	bhi.n	8008566 <_Z20StringFromMaskedBitsmmj+0x22>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	e000      	b.n	8008568 <_Z20StringFromMaskedBitsmmj+0x24>
 8008566:	2320      	movs	r3, #32
 8008568:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	3b01      	subs	r3, #1
 800856e:	2201      	movs	r2, #1
 8008570:	fa02 f303 	lsl.w	r3, r2, r3
 8008574:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 8008576:	2300      	movs	r3, #0
 8008578:	61fb      	str	r3, [r7, #28]
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	429a      	cmp	r2, r3
 8008580:	d22d      	bcs.n	80085de <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4013      	ands	r3, r2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00c      	beq.n	80085a6 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	4013      	ands	r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <_Z20StringFromMaskedBitsmmj+0x56>
 8008596:	4b15      	ldr	r3, [pc, #84]	; (80085ec <_Z20StringFromMaskedBitsmmj+0xa8>)
 8008598:	e000      	b.n	800859c <_Z20StringFromMaskedBitsmmj+0x58>
 800859a:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <_Z20StringFromMaskedBitsmmj+0xac>)
 800859c:	4619      	mov	r1, r3
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff fab4 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
 80085a4:	e003      	b.n	80085ae <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 80085a6:	4913      	ldr	r1, [pc, #76]	; (80085f4 <_Z20StringFromMaskedBitsmmj+0xb0>)
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff faaf 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	2b07      	cmp	r3, #7
 80085b6:	d108      	bne.n	80085ca <_Z20StringFromMaskedBitsmmj+0x86>
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	69fa      	ldr	r2, [r7, #28]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d003      	beq.n	80085ca <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 80085c2:	490d      	ldr	r1, [pc, #52]	; (80085f8 <_Z20StringFromMaskedBitsmmj+0xb4>)
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f7ff faa1 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	3301      	adds	r3, #1
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	e7cd      	b.n	800857a <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 80085de:	bf00      	nop
}
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	3720      	adds	r7, #32
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	08015cb0 	.word	0x08015cb0
 80085ec:	08015d88 	.word	0x08015d88
 80085f0:	08015d8c 	.word	0x08015d8c
 80085f4:	08015d90 	.word	0x08015d90
 80085f8:	08015d94 	.word	0x08015d94

080085fc <_ZN22SimpleStringCollectionC1Ev>:
    }

    return StringFromFormat("%u%s", number, suffix);
}

SimpleStringCollection::SimpleStringCollection()
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3304      	adds	r3, #4
 8008608:	4907      	ldr	r1, [pc, #28]	; (8008628 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fe37 	bl	800727e <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
    size_ = 0;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	60da      	str	r2, [r3, #12]
}
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	08015cb0 	.word	0x08015cb0

0800862c <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800862c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01e      	beq.n	800867c <_ZN22SimpleStringCollection8allocateEj+0x50>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3b04      	subs	r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	18d4      	adds	r4, r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	429c      	cmp	r4, r3
 8008654:	d004      	beq.n	8008660 <_ZN22SimpleStringCollection8allocateEj+0x34>
 8008656:	3c08      	subs	r4, #8
 8008658:	4620      	mov	r0, r4
 800865a:	f7ff f9c8 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800865e:	e7f6      	b.n	800864e <_ZN22SimpleStringCollection8allocateEj+0x22>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f1a3 0208 	sub.w	r2, r3, #8
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3b04      	subs	r3, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f7fd ff5e 	bl	8006538 <_ZdaPvj>

    size_ = _size;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68dc      	ldr	r4, [r3, #12]
 8008686:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800868a:	d202      	bcs.n	8008692 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800868c:	1c63      	adds	r3, r4, #1
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	e001      	b.n	8008696 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	f240 4227 	movw	r2, #1063	; 0x427
 800869a:	4910      	ldr	r1, [pc, #64]	; (80086dc <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800869c:	4618      	mov	r0, r3
 800869e:	f7fd ff29 	bl	80064f4 <_ZnajPKci>
 80086a2:	4605      	mov	r5, r0
 80086a4:	1d2b      	adds	r3, r5, #4
 80086a6:	3b04      	subs	r3, #4
 80086a8:	2208      	movs	r2, #8
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	1d2b      	adds	r3, r5, #4
 80086ae:	601c      	str	r4, [r3, #0]
 80086b0:	f105 0308 	add.w	r3, r5, #8
 80086b4:	1e62      	subs	r2, r4, #1
 80086b6:	4614      	mov	r4, r2
 80086b8:	461e      	mov	r6, r3
 80086ba:	2c00      	cmp	r4, #0
 80086bc:	db06      	blt.n	80086cc <_ZN22SimpleStringCollection8allocateEj+0xa0>
 80086be:	4908      	ldr	r1, [pc, #32]	; (80086e0 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 80086c0:	4630      	mov	r0, r6
 80086c2:	f7fe fddc 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80086c6:	3608      	adds	r6, #8
 80086c8:	3c01      	subs	r4, #1
 80086ca:	e7f6      	b.n	80086ba <_ZN22SimpleStringCollection8allocateEj+0x8e>
 80086cc:	f105 0208 	add.w	r2, r5, #8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086dc:	08015bf0 	.word	0x08015bf0
 80086e0:	08015cb0 	.word	0x08015cb0

080086e4 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 80086e4:	b590      	push	{r4, r7, lr}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01e      	beq.n	8008732 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3b04      	subs	r3, #4
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	18d4      	adds	r4, r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	429c      	cmp	r4, r3
 800870a:	d004      	beq.n	8008716 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800870c:	3c08      	subs	r4, #8
 800870e:	4620      	mov	r0, r4
 8008710:	f7ff f96d 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008714:	e7f6      	b.n	8008704 <_ZN22SimpleStringCollectionD1Ev+0x20>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f1a3 0208 	sub.w	r2, r3, #8
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3b04      	subs	r3, #4
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f7fd ff03 	bl	8006538 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3304      	adds	r3, #4
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff f959 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	bd90      	pop	{r4, r7, pc}

08008746 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
    return size_;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
	...

08008760 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 8008760:	b590      	push	{r4, r7, lr}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d315      	bcc.n	80087a0 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	1d1c      	adds	r4, r3, #4
 8008778:	f107 0308 	add.w	r3, r7, #8
 800877c:	490d      	ldr	r1, [pc, #52]	; (80087b4 <_ZN22SimpleStringCollectionixEj+0x54>)
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fd7d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8008784:	f107 0308 	add.w	r3, r7, #8
 8008788:	4619      	mov	r1, r3
 800878a:	4620      	mov	r0, r4
 800878c:	f7fe fde3 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8008790:	f107 0308 	add.w	r3, r7, #8
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff f92a 	bl	80079ee <_ZN12SimpleStringD1Ev>
        return empty_;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3304      	adds	r3, #4
 800879e:	e004      	b.n	80087aa <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4413      	add	r3, r2
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd90      	pop	{r4, r7, pc}
 80087b2:	bf00      	nop
 80087b4:	08015cb0 	.word	0x08015cb0

080087b8 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fc f970 	bl	8004aa8 <_ZN17ConsoleTestOutputC1Ev>
 80087c8:	4a08      	ldr	r2, [pc, #32]	; (80087ec <_ZN18TeamCityTestOutputC1Ev+0x34>)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	611a      	str	r2, [r3, #16]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3314      	adds	r3, #20
 80087d8:	4905      	ldr	r1, [pc, #20]	; (80087f0 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fd4f 	bl	800727e <_ZN12SimpleStringC1EPKc>
{
}
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	08017e1c 	.word	0x08017e1c
 80087f0:	08015db0 	.word	0x08015db0

080087f4 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	4a08      	ldr	r2, [pc, #32]	; (8008820 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3314      	adds	r3, #20
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff f8f1 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4618      	mov	r0, r3
 8008810:	f7fc f95c 	bl	8004acc <_ZN17ConsoleTestOutputD1Ev>
{
}
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	08017e1c 	.word	0x08017e1c

08008824 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
}
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ffe1 	bl	80087f4 <_ZN18TeamCityTestOutputD1Ev>
 8008832:	211c      	movs	r1, #28
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7fd fe4d 	bl	80064d4 <_ZdlPvj>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	332c      	adds	r3, #44	; 0x2c
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	492b      	ldr	r1, [pc, #172]	; (8008908 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800885a:	4610      	mov	r0, r2
 800885c:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800885e:	f107 0308 	add.w	r3, r7, #8
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	4618      	mov	r0, r3
 8008866:	f004 fdf7 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 800886a:	f107 0308 	add.w	r3, r7, #8
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff f890 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8008874:	4603      	mov	r3, r0
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f919 	bl	8008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800887e:	f107 0308 	add.w	r3, r7, #8
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff f8b3 	bl	80079ee <_ZN12SimpleStringD1Ev>
    print("']\n");
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	332c      	adds	r3, #44	; 0x2c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	491e      	ldr	r1, [pc, #120]	; (800890c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
    if (!test.willRun()) {
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3318      	adds	r3, #24
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6838      	ldr	r0, [r7, #0]
 80088a2:	4798      	blx	r3
 80088a4:	4603      	mov	r3, r0
 80088a6:	f083 0301 	eor.w	r3, r3, #1
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d024      	beq.n	80088fa <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	332c      	adds	r3, #44	; 0x2c
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4915      	ldr	r1, [pc, #84]	; (8008910 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 80088bc:	4610      	mov	r0, r2
 80088be:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 80088c0:	f107 0310 	add.w	r3, r7, #16
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f004 fdc6 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 80088cc:	f107 0310 	add.w	r3, r7, #16
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff f85f 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 80088d6:	4603      	mov	r3, r0
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f8e8 	bl	8008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80088e0:	f107 0310 	add.w	r3, r7, #16
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff f882 	bl	80079ee <_ZN12SimpleStringD1Ev>
        print("']\n");
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	332c      	adds	r3, #44	; 0x2c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4905      	ldr	r1, [pc, #20]	; (800890c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 80088f6:	4610      	mov	r0, r2
 80088f8:	4798      	blx	r3
    }
    currtest_ = &test;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	611a      	str	r2, [r3, #16]
}
 8008900:	bf00      	nop
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	08015db4 	.word	0x08015db4
 800890c:	08015dd4 	.word	0x08015dd4
 8008910:	08015dd8 	.word	0x08015dd8

08008914 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8008914:	b5b0      	push	{r4, r5, r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d03b      	beq.n	800899e <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	332c      	adds	r3, #44	; 0x2c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	491d      	ldr	r1, [pc, #116]	; (80089a8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 8008932:	4610      	mov	r0, r2
 8008934:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691a      	ldr	r2, [r3, #16]
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f004 fd89 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 8008946:	f107 0308 	add.w	r3, r7, #8
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff f822 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8008950:	4603      	mov	r3, r0
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f8ab 	bl	8008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800895a:	f107 0308 	add.w	r3, r7, #8
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff f845 	bl	80079ee <_ZN12SimpleStringD1Ev>
    print("' duration='");
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	332c      	adds	r3, #44	; 0x2c
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	490f      	ldr	r1, [pc, #60]	; (80089ac <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 8008974:	687d      	ldr	r5, [r7, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3334      	adds	r3, #52	; 0x34
 800897c:	681c      	ldr	r4, [r3, #0]
 800897e:	6838      	ldr	r0, [r7, #0]
 8008980:	f004 fa0a 	bl	800cd98 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8008984:	4603      	mov	r3, r0
 8008986:	4619      	mov	r1, r3
 8008988:	4628      	mov	r0, r5
 800898a:	47a0      	blx	r4
    print("']\n");
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	332c      	adds	r3, #44	; 0x2c
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4906      	ldr	r1, [pc, #24]	; (80089b0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	e000      	b.n	80089a0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800899e:	bf00      	nop
}
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bdb0      	pop	{r4, r5, r7, pc}
 80089a6:	bf00      	nop
 80089a8:	08015df8 	.word	0x08015df8
 80089ac:	08015e18 	.word	0x08015e18
 80089b0:	08015dd4 	.word	0x08015dd4

080089b4 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80089b4:	b590      	push	{r4, r7, lr}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f103 0414 	add.w	r4, r3, #20
 80089c4:	f107 0308 	add.w	r3, r7, #8
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f004 fd53 	bl	800d476 <_ZNK10UtestShell8getGroupEv>
 80089d0:	f107 0308 	add.w	r3, r7, #8
 80089d4:	4619      	mov	r1, r3
 80089d6:	4620      	mov	r0, r4
 80089d8:	f7fe fcbd 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 80089dc:	f107 0308 	add.w	r3, r7, #8
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff f804 	bl	80079ee <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	332c      	adds	r3, #44	; 0x2c
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	490c      	ldr	r1, [pc, #48]	; (8008a24 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 80089f2:	4610      	mov	r0, r2
 80089f4:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3314      	adds	r3, #20
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe ffca 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8008a00:	4603      	mov	r3, r0
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f853 	bl	8008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	332c      	adds	r3, #44	; 0x2c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4904      	ldr	r1, [pc, #16]	; (8008a28 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 8008a16:	4610      	mov	r0, r2
 8008a18:	4798      	blx	r3
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd90      	pop	{r4, r7, pc}
 8008a22:	bf00      	nop
 8008a24:	08015e28 	.word	0x08015e28
 8008a28:	08015dd4 	.word	0x08015dd4

08008a2c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f103 0414 	add.w	r4, r3, #20
 8008a3c:	f107 0308 	add.w	r3, r7, #8
 8008a40:	4918      	ldr	r1, [pc, #96]	; (8008aa4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe fc1b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7fe ffd9 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 8008a54:	4603      	mov	r3, r0
 8008a56:	461c      	mov	r4, r3
 8008a58:	f107 0308 	add.w	r3, r7, #8
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe ffc6 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008a62:	2c00      	cmp	r4, #0
 8008a64:	d11a      	bne.n	8008a9c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	332c      	adds	r3, #44	; 0x2c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	490d      	ldr	r1, [pc, #52]	; (8008aa8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 8008a72:	4610      	mov	r0, r2
 8008a74:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3314      	adds	r3, #20
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe ff8a 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8008a80:	4603      	mov	r3, r0
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f813 	bl	8008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	332c      	adds	r3, #44	; 0x2c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4905      	ldr	r1, [pc, #20]	; (8008aac <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 8008a96:	4610      	mov	r0, r2
 8008a98:	4798      	blx	r3
 8008a9a:	e000      	b.n	8008a9e <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 8008a9c:	bf00      	nop
}
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}
 8008aa4:	08015db0 	.word	0x08015db0
 8008aa8:	08015e4c 	.word	0x08015e4c
 8008aac:	08015dd4 	.word	0x08015dd4

08008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
    while (*s) {
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d03f      	beq.n	8008b42 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b27      	cmp	r3, #39	; 0x27
 8008ac8:	d00b      	beq.n	8008ae2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b7c      	cmp	r3, #124	; 0x7c
 8008ad0:	d007      	beq.n	8008ae2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b5b      	cmp	r3, #91	; 0x5b
 8008ad8:	d003      	beq.n	8008ae2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b5d      	cmp	r3, #93	; 0x5d
 8008ae0:	d107      	bne.n	8008af2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 8008ae2:	237c      	movs	r3, #124	; 0x7c
 8008ae4:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73bb      	strb	r3, [r7, #14]
 8008af0:	e01a      	b.n	8008b28 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b0d      	cmp	r3, #13
 8008af8:	d106      	bne.n	8008b08 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 8008afa:	237c      	movs	r3, #124	; 0x7c
 8008afc:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8008afe:	2372      	movs	r3, #114	; 0x72
 8008b00:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73bb      	strb	r3, [r7, #14]
 8008b06:	e00f      	b.n	8008b28 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b0a      	cmp	r3, #10
 8008b0e:	d106      	bne.n	8008b1e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8008b10:	237c      	movs	r3, #124	; 0x7c
 8008b12:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 8008b14:	236e      	movs	r3, #110	; 0x6e
 8008b16:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]
 8008b1c:	e004      	b.n	8008b28 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3328      	adds	r3, #40	; 0x28
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f107 010c 	add.w	r1, r7, #12
 8008b36:	4610      	mov	r0, r2
 8008b38:	4798      	blx	r3
        s++;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	603b      	str	r3, [r7, #0]
    while (*s) {
 8008b40:	e7bb      	b.n	8008aba <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 8008b42:	bf00      	nop
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 8008b4c:	b5b0      	push	{r4, r5, r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	332c      	adds	r3, #44	; 0x2c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4968      	ldr	r1, [pc, #416]	; (8008d04 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 8008b62:	4610      	mov	r0, r2
 8008b64:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3310      	adds	r3, #16
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f107 0208 	add.w	r2, r7, #8
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	f107 0308 	add.w	r3, r7, #8
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe ff09 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8008b82:	4603      	mov	r3, r0
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff ff92 	bl	8008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008b8c:	f107 0308 	add.w	r3, r7, #8
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fe ff2c 	bl	80079ee <_ZN12SimpleStringD1Ev>
    print("' message='");
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	332c      	adds	r3, #44	; 0x2c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4959      	ldr	r1, [pc, #356]	; (8008d08 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 8008ba6:	6838      	ldr	r0, [r7, #0]
 8008ba8:	f000 fa15 	bl	8008fd6 <_ZNK11TestFailure17isOutsideTestFileEv>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d105      	bne.n	8008bbe <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 8008bb2:	6838      	ldr	r0, [r7, #0]
 8008bb4:	f000 fa21 	bl	8008ffa <_ZNK11TestFailure18isInHelperFunctionEv>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e000      	b.n	8008bc4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d042      	beq.n	8008c4e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	332c      	adds	r3, #44	; 0x2c
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	494e      	ldr	r1, [pc, #312]	; (8008d0c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 8008bd8:	687d      	ldr	r5, [r7, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	332c      	adds	r3, #44	; 0x2c
 8008be0:	681c      	ldr	r4, [r3, #0]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	331c      	adds	r3, #28
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f107 0210 	add.w	r2, r7, #16
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4798      	blx	r3
 8008bf4:	f107 0310 	add.w	r3, r7, #16
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fecb 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4619      	mov	r1, r3
 8008c02:	4628      	mov	r0, r5
 8008c04:	47a0      	blx	r4
 8008c06:	f107 0310 	add.w	r3, r7, #16
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe feef 	bl	80079ee <_ZN12SimpleStringD1Ev>
        print(":");
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	332c      	adds	r3, #44	; 0x2c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	493d      	ldr	r1, [pc, #244]	; (8008d10 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4798      	blx	r3
        print(failure.getTestLineNumber());
 8008c20:	687d      	ldr	r5, [r7, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3334      	adds	r3, #52	; 0x34
 8008c28:	681c      	ldr	r4, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3320      	adds	r3, #32
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6838      	ldr	r0, [r7, #0]
 8008c34:	4798      	blx	r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	47a0      	blx	r4
        print("): ");
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	332c      	adds	r3, #44	; 0x2c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4932      	ldr	r1, [pc, #200]	; (8008d14 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3308      	adds	r3, #8
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f107 0218 	add.w	r2, r7, #24
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	4798      	blx	r3
 8008c60:	f107 0318 	add.w	r3, r7, #24
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe fe95 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff ff1e 	bl	8008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008c74:	f107 0318 	add.w	r3, r7, #24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe feb8 	bl	80079ee <_ZN12SimpleStringD1Ev>
    print(":");
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	332c      	adds	r3, #44	; 0x2c
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4921      	ldr	r1, [pc, #132]	; (8008d10 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 8008c8e:	687d      	ldr	r5, [r7, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3334      	adds	r3, #52	; 0x34
 8008c96:	681c      	ldr	r4, [r3, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3314      	adds	r3, #20
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6838      	ldr	r0, [r7, #0]
 8008ca2:	4798      	blx	r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47a0      	blx	r4

    print("' details='");
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	332c      	adds	r3, #44	; 0x2c
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4918      	ldr	r1, [pc, #96]	; (8008d18 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3318      	adds	r3, #24
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f107 0220 	add.w	r2, r7, #32
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4798      	blx	r3
 8008cce:	f107 0320 	add.w	r3, r7, #32
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fe5e 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff fee7 	bl	8008ab0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8008ce2:	f107 0320 	add.w	r3, r7, #32
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fe81 	bl	80079ee <_ZN12SimpleStringD1Ev>
    print("']\n");
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	332c      	adds	r3, #44	; 0x2c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4909      	ldr	r1, [pc, #36]	; (8008d1c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
}
 8008cfc:	bf00      	nop
 8008cfe:	3728      	adds	r7, #40	; 0x28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bdb0      	pop	{r4, r5, r7, pc}
 8008d04:	08015e70 	.word	0x08015e70
 8008d08:	08015e90 	.word	0x08015e90
 8008d0c:	08015e9c 	.word	0x08015e9c
 8008d10:	08015eac 	.word	0x08015eac
 8008d14:	08015eb0 	.word	0x08015eb0
 8008d18:	08015eb4 	.word	0x08015eb4
 8008d1c:	08015dd4 	.word	0x08015dd4

08008d20 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 8008d2c:	4a1a      	ldr	r2, [pc, #104]	; (8008d98 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3314      	adds	r3, #20
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	3204      	adds	r2, #4
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	330c      	adds	r3, #12
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f004 fb84 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	3314      	adds	r3, #20
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f004 fc3e 	bl	800d5d8 <_ZNK10UtestShell7getFileEv>
 8008d5c:	68b8      	ldr	r0, [r7, #8]
 8008d5e:	f004 fc4a 	bl	800d5f6 <_ZNK10UtestShell13getLineNumberEv>
 8008d62:	4602      	mov	r2, r0
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	61da      	str	r2, [r3, #28]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3320      	adds	r3, #32
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f004 fc32 	bl	800d5d8 <_ZNK10UtestShell7getFileEv>
 8008d74:	68b8      	ldr	r0, [r7, #8]
 8008d76:	f004 fc3e 	bl	800d5f6 <_ZNK10UtestShell13getLineNumberEv>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	332c      	adds	r3, #44	; 0x2c
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe facd 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
{
}
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	080180e8 	.word	0x080180e8

08008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 8008daa:	4a19      	ldr	r2, [pc, #100]	; (8008e10 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3314      	adds	r3, #20
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	3204      	adds	r2, #4
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4798      	blx	r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	330c      	adds	r3, #12
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f004 fb45 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3314      	adds	r3, #20
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe fa52 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	61da      	str	r2, [r3, #28]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3320      	adds	r3, #32
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f004 fbf6 	bl	800d5d8 <_ZNK10UtestShell7getFileEv>
 8008dec:	68b8      	ldr	r0, [r7, #8]
 8008dee:	f004 fc02 	bl	800d5f6 <_ZNK10UtestShell13getLineNumberEv>
 8008df2:	4602      	mov	r2, r0
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	629a      	str	r2, [r3, #40]	; 0x28
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	332c      	adds	r3, #44	; 0x2c
 8008dfc:	4905      	ldr	r1, [pc, #20]	; (8008e14 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fa3d 	bl	800727e <_ZN12SimpleStringC1EPKc>
{
}
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	080180e8 	.word	0x080180e8
 8008e14:	08015ec0 	.word	0x08015ec0

08008e18 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 8008e22:	4a1e      	ldr	r2, [pc, #120]	; (8008e9c <_ZN11TestFailureC1ERKS_+0x84>)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	4619      	mov	r1, r3
 8008e32:	4610      	mov	r0, r2
 8008e34:	f7fe fa77 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f103 020c 	add.w	r2, r3, #12
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	330c      	adds	r3, #12
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f7fe fa6e 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f103 0214 	add.w	r2, r3, #20
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	3314      	adds	r3, #20
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7fe fa65 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	69da      	ldr	r2, [r3, #28]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	61da      	str	r2, [r3, #28]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f103 0220 	add.w	r2, r3, #32
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	3320      	adds	r3, #32
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f7fe fa58 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	629a      	str	r2, [r3, #40]	; 0x28
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	332c      	adds	r3, #44	; 0x2c
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f7fe fa4b 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
{
}
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	080180e8 	.word	0x080180e8

08008ea0 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	4a10      	ldr	r2, [pc, #64]	; (8008eec <_ZN11TestFailureD1Ev+0x4c>)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	332c      	adds	r3, #44	; 0x2c
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fd9b 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	3320      	adds	r3, #32
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe fd96 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe fd91 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	330c      	adds	r3, #12
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fe fd8c 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fd87 	bl	80079ee <_ZN12SimpleStringD1Ev>
{
}
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	080180e8 	.word	0x080180e8

08008ef0 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
}
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff ffd1 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 8008efe:	2134      	movs	r1, #52	; 0x34
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fd fae7 	bl	80064d4 <_ZdlPvj>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
    return fileName_;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	3314      	adds	r3, #20
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe fa00 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
}
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b082      	sub	sp, #8
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
    return testFileName_;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	3320      	adds	r3, #32
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f7fe f9f1 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
}
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
    return testName_;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7fe f9e2 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
}
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	330c      	adds	r3, #12
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7fe f9d3 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
}
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	69db      	ldr	r3, [r3, #28]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
    return message_;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	332c      	adds	r3, #44	; 0x2c
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7fe f9ac 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
}
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f103 0220 	add.w	r2, r3, #32
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3314      	adds	r3, #20
 8008fe8:	4619      	mov	r1, r3
 8008fea:	4610      	mov	r0, r2
 8008fec:	f7fe fd50 	bl	8007a90 <_ZneRK12SimpleStringS1_>
 8008ff0:	4603      	mov	r3, r0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	69da      	ldr	r2, [r3, #28]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	429a      	cmp	r2, r3
 800900c:	bf34      	ite	cc
 800900e:	2301      	movcc	r3, #1
 8009010:	2300      	movcs	r3, #0
 8009012:	b2db      	uxtb	r3, r3
}
 8009014:	4618      	mov	r0, r3
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 8009020:	b590      	push	{r4, r7, lr}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fe fcb0 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8009034:	4604      	mov	r4, r0
 8009036:	6838      	ldr	r0, [r7, #0]
 8009038:	f7fe fcac 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800903c:	4603      	mov	r3, r0
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	4622      	mov	r2, r4
 8009042:	4903      	ldr	r1, [pc, #12]	; (8009050 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 8009044:	f7ff f960 	bl	8008308 <_Z16StringFromFormatPKcz>
}
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	bd90      	pop	{r4, r7, pc}
 8009050:	08015ecc 	.word	0x08015ecc

08009054 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 8009054:	b590      	push	{r4, r7, lr}
 8009056:	b097      	sub	sp, #92	; 0x5c
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8009062:	494c      	ldr	r1, [pc, #304]	; (8009194 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7fe f90a 	bl	800727e <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800906a:	2314      	movs	r3, #20
 800906c:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800906e:	230a      	movs	r3, #10
 8009070:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8009072:	f107 0320 	add.w	r3, r7, #32
 8009076:	220a      	movs	r2, #10
 8009078:	4947      	ldr	r1, [pc, #284]	; (8009198 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe f91a 	bl	80072b4 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8009080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009084:	f107 0120 	add.w	r1, r7, #32
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	4618      	mov	r0, r3
 800908c:	f7fe fd11 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8009090:	f107 0318 	add.w	r3, r7, #24
 8009094:	f107 0220 	add.w	r2, r7, #32
 8009098:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fd08 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 80090a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fca1 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 80090ac:	f107 0310 	add.w	r3, r7, #16
 80090b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090b2:	493a      	ldr	r1, [pc, #232]	; (800919c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff f927 	bl	8008308 <_Z16StringFromFormatPKcz>

    result += "\n";
 80090ba:	4939      	ldr	r1, [pc, #228]	; (80091a0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f7fe fd25 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 80090c2:	f107 0310 	add.w	r3, r7, #16
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe fc64 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 80090cc:	4604      	mov	r4, r0
 80090ce:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80090d2:	f107 0118 	add.w	r1, r7, #24
 80090d6:	2314      	movs	r3, #20
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	f7fe fd91 	bl	8007c00 <_ZNK12SimpleString9subStringEjj>
 80090de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fc56 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 80090e8:	4603      	mov	r3, r0
 80090ea:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80090ee:	4622      	mov	r2, r4
 80090f0:	492c      	ldr	r1, [pc, #176]	; (80091a4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 80090f2:	f7ff f909 	bl	8008308 <_Z16StringFromFormatPKcz>
 80090f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090fa:	4619      	mov	r1, r3
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7fe fcf3 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fc71 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800910c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe fc6c 	bl	80079ee <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 8009116:	f107 0310 	add.w	r3, r7, #16
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fc46 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8009120:	4603      	mov	r3, r0
 8009122:	f103 020a 	add.w	r2, r3, #10
 8009126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800912a:	491b      	ldr	r1, [pc, #108]	; (8009198 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe f8c1 	bl	80072b4 <_ZN12SimpleStringC1EPKcj>
 8009132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe fc2c 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800913c:	4602      	mov	r2, r0
 800913e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009142:	4919      	ldr	r1, [pc, #100]	; (80091a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff f8df 	bl	8008308 <_Z16StringFromFormatPKcz>
 800914a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800914e:	4619      	mov	r1, r3
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f7fe fcc9 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009156:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fc47 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009160:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fc42 	bl	80079ee <_ZN12SimpleStringD1Ev>
    return result;
 800916a:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800916c:	f107 0310 	add.w	r3, r7, #16
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe fc3c 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8009176:	f107 0318 	add.w	r3, r7, #24
 800917a:	4618      	mov	r0, r3
 800917c:	f7fe fc37 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8009180:	f107 0320 	add.w	r3, r7, #32
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe fc32 	bl	80079ee <_ZN12SimpleStringD1Ev>
    return result;
 800918a:	bf00      	nop
}
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	375c      	adds	r7, #92	; 0x5c
 8009190:	46bd      	mov	sp, r7
 8009192:	bd90      	pop	{r4, r7, pc}
 8009194:	08015eec 	.word	0x08015eec
 8009198:	08015ef0 	.word	0x08015ef0
 800919c:	08015ef4 	.word	0x08015ef4
 80091a0:	08015f1c 	.word	0x08015f1c
 80091a4:	08015f20 	.word	0x08015f20
 80091a8:	08015f28 	.word	0x08015f28

080091ac <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 80091b8:	491a      	ldr	r1, [pc, #104]	; (8009224 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f7fe f85f 	bl	800727e <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7fe fc03 	bl	80079cc <_ZNK12SimpleString7isEmptyEv>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f083 0301 	eor.w	r3, r3, #1
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d022      	beq.n	8009218 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 80091d2:	f107 0310 	add.w	r3, r7, #16
 80091d6:	4914      	ldr	r1, [pc, #80]	; (8009228 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe f850 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80091de:	f107 0310 	add.w	r3, r7, #16
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7fe f90e 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f083 0301 	eor.w	r3, r3, #1
 80091f0:	b2dc      	uxtb	r4, r3
 80091f2:	f107 0310 	add.w	r3, r7, #16
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fbf9 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80091fc:	2c00      	cmp	r4, #0
 80091fe:	d003      	beq.n	8009208 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 8009200:	490a      	ldr	r1, [pc, #40]	; (800922c <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7fe fc82 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f7fe fc6c 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 8009210:	4907      	ldr	r1, [pc, #28]	; (8009230 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7fe fc7a 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 8009218:	bf00      	nop
}
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	371c      	adds	r7, #28
 800921e:	46bd      	mov	sp, r7
 8009220:	bd90      	pop	{r4, r7, pc}
 8009222:	bf00      	nop
 8009224:	08015eec 	.word	0x08015eec
 8009228:	08015f30 	.word	0x08015f30
 800922c:	08015f3c 	.word	0x08015f3c
 8009230:	08015f48 	.word	0x08015f48

08009234 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009234:	b590      	push	{r4, r7, lr}
 8009236:	b089      	sub	sp, #36	; 0x24
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	68b9      	ldr	r1, [r7, #8]
 800924a:	f7ff fda7 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800924e:	4a19      	ldr	r2, [pc, #100]	; (80092b4 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800925a:	68f9      	ldr	r1, [r7, #12]
 800925c:	f107 0310 	add.w	r3, r7, #16
 8009260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff ffa2 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009268:	f107 0310 	add.w	r3, r7, #16
 800926c:	4619      	mov	r1, r3
 800926e:	4620      	mov	r0, r4
 8009270:	f7fe f871 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8009274:	f107 0310 	add.w	r3, r7, #16
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fbb8 	bl	80079ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009284:	68f9      	ldr	r1, [r7, #12]
 8009286:	f107 0018 	add.w	r0, r7, #24
 800928a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800928e:	f7ff fec7 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009292:	f107 0318 	add.w	r3, r7, #24
 8009296:	4619      	mov	r1, r3
 8009298:	4620      	mov	r0, r4
 800929a:	f7fe fc25 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800929e:	f107 0318 	add.w	r3, r7, #24
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe fba3 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4618      	mov	r0, r3
 80092ac:	3724      	adds	r7, #36	; 0x24
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd90      	pop	{r4, r7, pc}
 80092b2:	bf00      	nop
 80092b4:	080180bc 	.word	0x080180bc

080092b8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 80092b8:	b5b0      	push	{r4, r5, r7, lr}
 80092ba:	b094      	sub	sp, #80	; 0x50
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6278      	str	r0, [r7, #36]	; 0x24
 80092c0:	6239      	str	r1, [r7, #32]
 80092c2:	61fa      	str	r2, [r7, #28]
 80092c4:	61bb      	str	r3, [r7, #24]
 80092c6:	ed87 0b04 	vstr	d0, [r7, #16]
 80092ca:	ed87 1b02 	vstr	d1, [r7, #8]
 80092ce:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 80092d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	6a39      	ldr	r1, [r7, #32]
 80092da:	f7ff fd5f 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 80092de:	4a4a      	ldr	r2, [pc, #296]	; (8009408 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80092ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff ff5a 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 80092f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092fc:	4619      	mov	r1, r3
 80092fe:	4620      	mov	r0, r4
 8009300:	f7fe f829 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8009304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fb70 	bl	80079ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009314:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8009316:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800931a:	2107      	movs	r1, #7
 800931c:	ed97 0b04 	vldr	d0, [r7, #16]
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe ffaf 	bl	8008284 <_Z10StringFromdi>
 8009326:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800932a:	2107      	movs	r1, #7
 800932c:	ed97 0b02 	vldr	d0, [r7, #8]
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe ffa7 	bl	8008284 <_Z10StringFromdi>
 8009336:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800933a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800933e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009342:	4629      	mov	r1, r5
 8009344:	f7ff fe6c 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800934c:	4619      	mov	r1, r3
 800934e:	4620      	mov	r0, r4
 8009350:	f7fe fbca 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009354:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe fb48 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800935e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fb43 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009368:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe fb3e 	bl	80079ee <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	332c      	adds	r3, #44	; 0x2c
 8009376:	4925      	ldr	r1, [pc, #148]	; (800940c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fbc7 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009384:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009388:	2107      	movs	r1, #7
 800938a:	ed97 0b00 	vldr	d0, [r7]
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe ff78 	bl	8008284 <_Z10StringFromdi>
 8009394:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009398:	4619      	mov	r1, r3
 800939a:	4620      	mov	r0, r4
 800939c:	f7fe fba4 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 80093a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fe fb22 	bl	80079ee <_ZN12SimpleStringD1Ev>
    message_ += ">";
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	332c      	adds	r3, #44	; 0x2c
 80093ae:	4918      	ldr	r1, [pc, #96]	; (8009410 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe fbab 	bl	8007b0c <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 80093b6:	4b17      	ldr	r3, [pc, #92]	; (8009414 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	ed97 0b04 	vldr	d0, [r7, #16]
 80093be:	4798      	blx	r3
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10f      	bne.n	80093e6 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 80093c6:	4b13      	ldr	r3, [pc, #76]	; (8009414 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	ed97 0b02 	vldr	d0, [r7, #8]
 80093ce:	4798      	blx	r3
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d107      	bne.n	80093e6 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 80093d6:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	ed97 0b00 	vldr	d0, [r7]
 80093de:	4798      	blx	r3
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 80093ea:	2300      	movs	r3, #0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	332c      	adds	r3, #44	; 0x2c
 80093f4:	4908      	ldr	r1, [pc, #32]	; (8009418 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fb88 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
}
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	4618      	mov	r0, r3
 8009400:	3750      	adds	r7, #80	; 0x50
 8009402:	46bd      	mov	sp, r7
 8009404:	bdb0      	pop	{r4, r5, r7, pc}
 8009406:	bf00      	nop
 8009408:	08018090 	.word	0x08018090
 800940c:	08015f4c 	.word	0x08015f4c
 8009410:	08015f64 	.word	0x08015f64
 8009414:	200000e0 	.word	0x200000e0
 8009418:	08015f68 	.word	0x08015f68

0800941c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800941c:	b590      	push	{r4, r7, lr}
 800941e:	b093      	sub	sp, #76	; 0x4c
 8009420:	af02      	add	r7, sp, #8
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	68b9      	ldr	r1, [r7, #8]
 8009432:	f7ff fcb3 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009436:	4a4f      	ldr	r2, [pc, #316]	; (8009574 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009442:	68f9      	ldr	r1, [r7, #12]
 8009444:	f107 0320 	add.w	r3, r7, #32
 8009448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800944a:	4618      	mov	r0, r3
 800944c:	f7ff feae 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009450:	f107 0320 	add.w	r3, r7, #32
 8009454:	4619      	mov	r1, r3
 8009456:	4620      	mov	r0, r4
 8009458:	f7fd ff7d 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 800945c:	f107 0320 	add.w	r3, r7, #32
 8009460:	4618      	mov	r0, r3
 8009462:	f7fe fac4 	bl	80079ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8009466:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009468:	f7fe fa94 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800946c:	4602      	mov	r2, r0
 800946e:	f107 0318 	add.w	r3, r7, #24
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fd37 	bl	8007ee8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800947a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800947c:	f7fe fa8a 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8009480:	4602      	mov	r2, r0
 8009482:	f107 0310 	add.w	r3, r7, #16
 8009486:	4611      	mov	r1, r2
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe fd2d 	bl	8007ee8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009494:	68f9      	ldr	r1, [r7, #12]
 8009496:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800949a:	f107 0310 	add.w	r3, r7, #16
 800949e:	f107 0218 	add.w	r2, r7, #24
 80094a2:	f7ff fdbd 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80094a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094aa:	4619      	mov	r1, r3
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7fe fb1b 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 80094b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fa99 	bl	80079ee <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 80094bc:	2300      	movs	r3, #0
 80094be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80094c4:	f7fe fbf7 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461c      	mov	r4, r3
 80094cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80094d0:	f7fe fbf1 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 80094d4:	4603      	mov	r3, r0
 80094d6:	429c      	cmp	r4, r3
 80094d8:	bf0c      	ite	eq
 80094da:	2301      	moveq	r3, #1
 80094dc:	2300      	movne	r3, #0
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 80094e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e6:	3301      	adds	r3, #1
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ea:	e7e9      	b.n	80094c0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 80094ec:	2300      	movs	r3, #0
 80094ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80094f0:	f107 0310 	add.w	r3, r7, #16
 80094f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fbdd 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461c      	mov	r4, r3
 8009500:	f107 0318 	add.w	r3, r7, #24
 8009504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe fbd5 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 800950c:	4603      	mov	r3, r0
 800950e:	429c      	cmp	r4, r3
 8009510:	bf0c      	ite	eq
 8009512:	2301      	moveq	r3, #1
 8009514:	2300      	movne	r3, #0
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	3301      	adds	r3, #1
 8009520:	63bb      	str	r3, [r7, #56]	; 0x38
 8009522:	e7e5      	b.n	80094f0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800952a:	68f9      	ldr	r1, [r7, #12]
 800952c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009530:	f107 0210 	add.w	r2, r7, #16
 8009534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	f7ff fd8b 	bl	8009054 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800953e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009542:	4619      	mov	r1, r3
 8009544:	4620      	mov	r0, r4
 8009546:	f7fe facf 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800954a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe fa4d 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8009554:	f107 0310 	add.w	r3, r7, #16
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe fa48 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800955e:	f107 0318 	add.w	r3, r7, #24
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe fa43 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4618      	mov	r0, r3
 800956c:	3744      	adds	r7, #68	; 0x44
 800956e:	46bd      	mov	sp, r7
 8009570:	bd90      	pop	{r4, r7, pc}
 8009572:	bf00      	nop
 8009574:	08018064 	.word	0x08018064

08009578 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 8009578:	b590      	push	{r4, r7, lr}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	f7ff fc05 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009592:	4a1a      	ldr	r2, [pc, #104]	; (80095fc <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	f107 0310 	add.w	r3, r7, #16
 80095a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff fe00 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 80095ac:	f107 0310 	add.w	r3, r7, #16
 80095b0:	4619      	mov	r1, r3
 80095b2:	4620      	mov	r0, r4
 80095b4:	f7fd fecf 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 80095b8:	f107 0310 	add.w	r3, r7, #16
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fa16 	bl	80079ee <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	332c      	adds	r3, #44	; 0x2c
 80095c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fa8d 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	332c      	adds	r3, #44	; 0x2c
 80095d2:	490b      	ldr	r1, [pc, #44]	; (8009600 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fa99 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	332c      	adds	r3, #44	; 0x2c
 80095de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fa81 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	332c      	adds	r3, #44	; 0x2c
 80095ea:	4906      	ldr	r1, [pc, #24]	; (8009604 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fa8d 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
}
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4618      	mov	r0, r3
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd90      	pop	{r4, r7, pc}
 80095fc:	08018038 	.word	0x08018038
 8009600:	08015f8c 	.word	0x08015f8c
 8009604:	08015f90 	.word	0x08015f90

08009608 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8009608:	b5b0      	push	{r4, r5, r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	f7ff fbbd 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009622:	4a1c      	ldr	r2, [pc, #112]	; (8009694 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	f107 0310 	add.w	r3, r7, #16
 8009634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fdb8 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 800963c:	f107 0310 	add.w	r3, r7, #16
 8009640:	4619      	mov	r1, r3
 8009642:	4620      	mov	r0, r4
 8009644:	f7fd fe87 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8009648:	f107 0310 	add.w	r3, r7, #16
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe f9ce 	bl	80079ee <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009658:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800965a:	f7fe f99b 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800965e:	4605      	mov	r5, r0
 8009660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009662:	f7fe f997 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 8009666:	4603      	mov	r3, r0
 8009668:	f107 0018 	add.w	r0, r7, #24
 800966c:	462a      	mov	r2, r5
 800966e:	490a      	ldr	r1, [pc, #40]	; (8009698 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8009670:	f7fe fe4a 	bl	8008308 <_Z16StringFromFormatPKcz>
 8009674:	f107 0318 	add.w	r3, r7, #24
 8009678:	4619      	mov	r1, r3
 800967a:	4620      	mov	r0, r4
 800967c:	f7fe fa34 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009680:	f107 0318 	add.w	r3, r7, #24
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe f9b2 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4618      	mov	r0, r3
 800968e:	3720      	adds	r7, #32
 8009690:	46bd      	mov	sp, r7
 8009692:	bdb0      	pop	{r4, r5, r7, pc}
 8009694:	0801800c 	.word	0x0801800c
 8009698:	08015f9c 	.word	0x08015f9c

0800969c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800969c:	b590      	push	{r4, r7, lr}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	f7ff fb73 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 80096b6:	4a1a      	ldr	r2, [pc, #104]	; (8009720 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80096c2:	68f9      	ldr	r1, [r7, #12]
 80096c4:	f107 0310 	add.w	r3, r7, #16
 80096c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff fd6e 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 80096d0:	f107 0310 	add.w	r3, r7, #16
 80096d4:	4619      	mov	r1, r3
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7fd fe3d 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 80096dc:	f107 0310 	add.w	r3, r7, #16
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe f984 	bl	80079ee <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	332c      	adds	r3, #44	; 0x2c
 80096ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe f9fb 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	332c      	adds	r3, #44	; 0x2c
 80096f6:	490b      	ldr	r1, [pc, #44]	; (8009724 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe fa07 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	332c      	adds	r3, #44	; 0x2c
 8009702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe f9ef 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	332c      	adds	r3, #44	; 0x2c
 800970e:	4906      	ldr	r1, [pc, #24]	; (8009728 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe f9fb 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
}
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4618      	mov	r0, r3
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	bd90      	pop	{r4, r7, pc}
 8009720:	08017fe0 	.word	0x08017fe0
 8009724:	08015f8c 	.word	0x08015f8c
 8009728:	08015f90 	.word	0x08015f90

0800972c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
 8009738:	603b      	str	r3, [r7, #0]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	f7ff fb2b 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009746:	4a07      	ldr	r2, [pc, #28]	; (8009764 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	332c      	adds	r3, #44	; 0x2c
 8009750:	69b9      	ldr	r1, [r7, #24]
 8009752:	4618      	mov	r0, r3
 8009754:	f7fd fdff 	bl	8007356 <_ZN12SimpleStringaSERKS_>
}
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	08017df0 	.word	0x08017df0

08009768 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 8009768:	b590      	push	{r4, r7, lr}
 800976a:	b09d      	sub	sp, #116	; 0x74
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	68b9      	ldr	r1, [r7, #8]
 800977e:	f7ff fb0d 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009782:	4a5d      	ldr	r2, [pc, #372]	; (80098f8 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800978e:	68f9      	ldr	r1, [r7, #12]
 8009790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009794:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff fd07 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 800979e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097a2:	4619      	mov	r1, r3
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7fd fdd6 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 80097aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe f91d 	bl	80079ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 80097b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097b8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fe fbd1 	bl	8007f64 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 80097c2:	f107 0320 	add.w	r3, r7, #32
 80097c6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fbca 	bl	8007f64 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 80097d0:	f107 0120 	add.w	r1, r7, #32
 80097d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097d8:	2220      	movs	r2, #32
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe f9c4 	bl	8007b68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80097e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80097e4:	4945      	ldr	r1, [pc, #276]	; (80098fc <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fd fd49 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80097ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80097f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80097f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe f95a 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 80097fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009802:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe fc66 	bl	80080d8 <_Z30BracketsFormattedHexStringFroml>
 800980c:	f107 0318 	add.w	r3, r7, #24
 8009810:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009814:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe f94a 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 800981e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe f8e3 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009828:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe f8de 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009832:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe f8d9 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800983c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009840:	492e      	ldr	r1, [pc, #184]	; (80098fc <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8009842:	4618      	mov	r0, r3
 8009844:	f7fd fd1b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8009848:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800984c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009850:	f107 0120 	add.w	r1, r7, #32
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe f92c 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 800985a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800985e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fc38 	bl	80080d8 <_Z30BracketsFormattedHexStringFroml>
 8009868:	f107 0310 	add.w	r3, r7, #16
 800986c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009870:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe f91c 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 800987a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe f8b5 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009884:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe f8b0 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800988e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe f8ab 	bl	80079ee <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80098a4:	f107 0318 	add.w	r3, r7, #24
 80098a8:	f107 0210 	add.w	r2, r7, #16
 80098ac:	f7ff fbb8 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80098b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80098b4:	4619      	mov	r1, r3
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7fe f916 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 80098bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe f894 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80098c6:	f107 0310 	add.w	r3, r7, #16
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe f88f 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80098d0:	f107 0318 	add.w	r3, r7, #24
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fe f88a 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 80098da:	f107 0320 	add.w	r3, r7, #32
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe f885 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 80098e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe f880 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	4618      	mov	r0, r3
 80098f2:	3774      	adds	r7, #116	; 0x74
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd90      	pop	{r4, r7, pc}
 80098f8:	08017fb4 	.word	0x08017fb4
 80098fc:	08015ef0 	.word	0x08015ef0

08009900 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b09d      	sub	sp, #116	; 0x74
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	68b9      	ldr	r1, [r7, #8]
 8009916:	f7ff fa41 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800991a:	4a5d      	ldr	r2, [pc, #372]	; (8009a90 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800992c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fc3b 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800993a:	4619      	mov	r1, r3
 800993c:	4620      	mov	r0, r4
 800993e:	f7fd fd0a 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8009942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe f851 	bl	80079ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800994c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009950:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009954:	4618      	mov	r0, r3
 8009956:	f7fe fd11 	bl	800837c <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800995a:	f107 0320 	add.w	r3, r7, #32
 800995e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fd0a 	bl	800837c <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8009968:	f107 0120 	add.w	r1, r7, #32
 800996c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009970:	2220      	movs	r2, #32
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe f8f8 	bl	8007b68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009978:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800997c:	4945      	ldr	r1, [pc, #276]	; (8009a94 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800997e:	4618      	mov	r0, r3
 8009980:	f7fd fc7d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8009984:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009988:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800998c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe f88e 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8009996:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800999a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fbb6 	bl	8008110 <_Z30BracketsFormattedHexStringFromm>
 80099a4:	f107 0318 	add.w	r3, r7, #24
 80099a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099ac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe f87e 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 80099b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fe f817 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80099c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fe f812 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80099ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe f80d 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80099d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80099d8:	492e      	ldr	r1, [pc, #184]	; (8009a94 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fd fc4f 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80099e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80099e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80099e8:	f107 0120 	add.w	r1, r7, #32
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fe f860 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 80099f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80099f6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fb88 	bl	8008110 <_Z30BracketsFormattedHexStringFromm>
 8009a00:	f107 0310 	add.w	r3, r7, #16
 8009a04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009a08:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe f850 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8009a12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fd ffe9 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009a1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fd ffe4 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009a26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fd ffdf 	bl	80079ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009a36:	68f9      	ldr	r1, [r7, #12]
 8009a38:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8009a3c:	f107 0318 	add.w	r3, r7, #24
 8009a40:	f107 0210 	add.w	r2, r7, #16
 8009a44:	f7ff faec 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009a48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f7fe f84a 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009a54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fd ffc8 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009a5e:	f107 0310 	add.w	r3, r7, #16
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fd ffc3 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009a68:	f107 0318 	add.w	r3, r7, #24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fd ffbe 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8009a72:	f107 0320 	add.w	r3, r7, #32
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd ffb9 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8009a7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fd ffb4 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3774      	adds	r7, #116	; 0x74
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd90      	pop	{r4, r7, pc}
 8009a90:	08017f88 	.word	0x08017f88
 8009a94:	08015ef0 	.word	0x08015ef0

08009a98 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 8009a98:	b590      	push	{r4, r7, lr}
 8009a9a:	b09d      	sub	sp, #116	; 0x74
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	68b9      	ldr	r1, [r7, #8]
 8009aae:	f7ff f975 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009ab2:	4a5f      	ldr	r2, [pc, #380]	; (8009c30 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ac4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff fb6f 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f7fd fc3e 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8009ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fd ff85 	bl	80079ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 8009ae4:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8009ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe fa26 	bl	8007f40 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 8009af4:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8009af8:	f107 0320 	add.w	r3, r7, #32
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fa1e 	bl	8007f40 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8009b04:	f107 0120 	add.w	r1, r7, #32
 8009b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fe f82a 	bl	8007b68 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009b14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b18:	4946      	ldr	r1, [pc, #280]	; (8009c34 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fd fbaf 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8009b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b24:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8009b28:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fd ffc0 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8009b32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b36:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe fb03 	bl	8008148 <_Z30BracketsFormattedHexStringFroma>
 8009b42:	f107 0318 	add.w	r3, r7, #24
 8009b46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b4a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fd ffaf 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8009b54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fd ff48 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009b5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fd ff43 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009b68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7fd ff3e 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009b72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b76:	492f      	ldr	r1, [pc, #188]	; (8009c34 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fd fb80 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8009b7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009b82:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009b86:	f107 0120 	add.w	r1, r7, #32
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fd ff91 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8009b90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009b94:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fad4 	bl	8008148 <_Z30BracketsFormattedHexStringFroma>
 8009ba0:	f107 0310 	add.w	r3, r7, #16
 8009ba4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009ba8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fd ff80 	bl	8007ab2 <_ZNK12SimpleStringplERKS_>
 8009bb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fd ff19 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009bbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fd ff14 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009bc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fd ff0f 	bl	80079ee <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8009bdc:	f107 0318 	add.w	r3, r7, #24
 8009be0:	f107 0210 	add.w	r2, r7, #16
 8009be4:	f7ff fa1c 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009be8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009bec:	4619      	mov	r1, r3
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f7fd ff7a 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009bf4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fd fef8 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8009bfe:	f107 0310 	add.w	r3, r7, #16
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fd fef3 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8009c08:	f107 0318 	add.w	r3, r7, #24
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fd feee 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 8009c12:	f107 0320 	add.w	r3, r7, #32
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fd fee9 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 8009c1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fd fee4 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3774      	adds	r7, #116	; 0x74
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd90      	pop	{r4, r7, pc}
 8009c30:	08017f5c 	.word	0x08017f5c
 8009c34:	08015ef0 	.word	0x08015ef0

08009c38 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8009c38:	b590      	push	{r4, r7, lr}
 8009c3a:	b093      	sub	sp, #76	; 0x4c
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	68b9      	ldr	r1, [r7, #8]
 8009c4e:	f7ff f8a5 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009c52:	4a4a      	ldr	r2, [pc, #296]	; (8009d7c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009c5e:	68f9      	ldr	r1, [r7, #12]
 8009c60:	f107 0320 	add.w	r3, r7, #32
 8009c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff faa0 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009c6c:	f107 0320 	add.w	r3, r7, #32
 8009c70:	4619      	mov	r1, r3
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7fd fb6f 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8009c78:	f107 0320 	add.w	r3, r7, #32
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fd feb6 	bl	80079ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8009c82:	f107 0318 	add.w	r3, r7, #24
 8009c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe f92d 	bl	8007ee8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8009c8e:	f107 0310 	add.w	r3, r7, #16
 8009c92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fe f927 	bl	8007ee8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009ca0:	68f9      	ldr	r1, [r7, #12]
 8009ca2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009ca6:	f107 0310 	add.w	r3, r7, #16
 8009caa:	f107 0218 	add.w	r2, r7, #24
 8009cae:	f7ff f9b7 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f7fd ff15 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fd fe93 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8009cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d046      	beq.n	8009d5c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8009cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d043      	beq.n	8009d5c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cdc:	4413      	add	r3, r2
 8009cde:	781a      	ldrb	r2, [r3, #0]
 8009ce0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce4:	440b      	add	r3, r1
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d103      	bne.n	8009cf4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8009cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cee:	3301      	adds	r3, #1
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf2:	e7f1      	b.n	8009cd8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cf8:	f107 0310 	add.w	r3, r7, #16
 8009cfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fd ffd9 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 8009d04:	4603      	mov	r3, r0
 8009d06:	461c      	mov	r4, r3
 8009d08:	f107 0318 	add.w	r3, r7, #24
 8009d0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fd ffd1 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 8009d14:	4603      	mov	r3, r0
 8009d16:	429c      	cmp	r4, r3
 8009d18:	bf0c      	ite	eq
 8009d1a:	2301      	moveq	r3, #1
 8009d1c:	2300      	movne	r3, #0
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d003      	beq.n	8009d2c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	3301      	adds	r3, #1
 8009d28:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d2a:	e7e5      	b.n	8009cf8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009d32:	68f9      	ldr	r1, [r7, #12]
 8009d34:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009d38:	f107 0210 	add.w	r2, r7, #16
 8009d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	f7ff f987 	bl	8009054 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8009d46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7fd fecb 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fd fe49 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8009d5c:	f107 0310 	add.w	r3, r7, #16
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fd fe44 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8009d66:	f107 0318 	add.w	r3, r7, #24
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fd fe3f 	bl	80079ee <_ZN12SimpleStringD1Ev>
    }
}
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4618      	mov	r0, r3
 8009d74:	3744      	adds	r7, #68	; 0x44
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd90      	pop	{r4, r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	08017f30 	.word	0x08017f30

08009d80 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	b093      	sub	sp, #76	; 0x4c
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	68b9      	ldr	r1, [r7, #8]
 8009d96:	f7ff f801 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009d9a:	4a55      	ldr	r2, [pc, #340]	; (8009ef0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	f107 0320 	add.w	r3, r7, #32
 8009dac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff f9fc 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009db4:	f107 0320 	add.w	r3, r7, #32
 8009db8:	4619      	mov	r1, r3
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7fd facb 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8009dc0:	f107 0320 	add.w	r3, r7, #32
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fd fe12 	bl	80079ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8009dca:	f107 0318 	add.w	r3, r7, #24
 8009dce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fe f889 	bl	8007ee8 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8009dd6:	f107 0310 	add.w	r3, r7, #16
 8009dda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fe f883 	bl	8007ee8 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009de8:	68f9      	ldr	r1, [r7, #12]
 8009dea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009dee:	f107 0310 	add.w	r3, r7, #16
 8009df2:	f107 0218 	add.w	r2, r7, #24
 8009df6:	f7ff f913 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4620      	mov	r0, r4
 8009e02:	f7fd fe71 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fd fdef 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8009e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d05c      	beq.n	8009ed0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 8009e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d059      	beq.n	8009ed0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e24:	4413      	add	r3, r2
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fd f932 	bl	8007092 <_ZN12SimpleString7ToLowerEc>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	461c      	mov	r4, r3
 8009e32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e36:	4413      	add	r3, r2
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fd f929 	bl	8007092 <_ZN12SimpleString7ToLowerEc>
 8009e40:	4603      	mov	r3, r0
 8009e42:	429c      	cmp	r4, r3
 8009e44:	bf0c      	ite	eq
 8009e46:	2301      	moveq	r3, #1
 8009e48:	2300      	movne	r3, #0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 8009e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e52:	3301      	adds	r3, #1
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e56:	e7e3      	b.n	8009e20 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 8009e5c:	f107 0310 	add.w	r3, r7, #16
 8009e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fd ff27 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fd f911 	bl	8007092 <_ZN12SimpleString7ToLowerEc>
 8009e70:	4603      	mov	r3, r0
 8009e72:	461c      	mov	r4, r3
 8009e74:	f107 0318 	add.w	r3, r7, #24
 8009e78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fd ff1b 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 8009e80:	4603      	mov	r3, r0
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fd f905 	bl	8007092 <_ZN12SimpleString7ToLowerEc>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	bf0c      	ite	eq
 8009e8e:	2301      	moveq	r3, #1
 8009e90:	2300      	movne	r3, #0
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e9e:	e7dd      	b.n	8009e5c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009eac:	f107 0210 	add.w	r2, r7, #16
 8009eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb6:	f7ff f8cd 	bl	8009054 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8009eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7fd fe11 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fd fd8f 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8009ed0:	f107 0310 	add.w	r3, r7, #16
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fd fd8a 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8009eda:	f107 0318 	add.w	r3, r7, #24
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fd fd85 	bl	80079ee <_ZN12SimpleStringD1Ev>
    }
}
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3744      	adds	r7, #68	; 0x44
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd90      	pop	{r4, r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	08017f04 	.word	0x08017f04

08009ef4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 8009ef4:	b5b0      	push	{r4, r5, r7, lr}
 8009ef6:	b092      	sub	sp, #72	; 0x48
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	68b9      	ldr	r1, [r7, #8]
 8009f0a:	f7fe ff47 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009f0e:	4a40      	ldr	r2, [pc, #256]	; (800a010 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009f1a:	68f9      	ldr	r1, [r7, #12]
 8009f1c:	f107 031c 	add.w	r3, r7, #28
 8009f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff f942 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 8009f28:	f107 031c 	add.w	r3, r7, #28
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f7fd fa11 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 8009f34:	f107 031c 	add.w	r3, r7, #28
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fd fd58 	bl	80079ee <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8009f3e:	f107 0314 	add.w	r3, r7, #20
 8009f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe fae0 	bl	800850c <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009f52:	68fd      	ldr	r5, [r7, #12]
 8009f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7fe fad5 	bl	800850c <_Z22StringFromBinaryOrNullPKhj>
 8009f62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f66:	f107 0314 	add.w	r3, r7, #20
 8009f6a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009f6e:	4629      	mov	r1, r5
 8009f70:	f7ff f856 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7fd fdb4 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fd fd32 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8009f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fd fd2d 	bl	80079ee <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 8009f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d02f      	beq.n	8009ffa <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 8009f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d02c      	beq.n	8009ffa <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa8:	4413      	add	r3, r2
 8009faa:	781a      	ldrb	r2, [r3, #0]
 8009fac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb0:	440b      	add	r3, r1
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d103      	bne.n	8009fc0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fba:	3301      	adds	r3, #1
 8009fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fbe:	e7f1      	b.n	8009fa4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fca:	4613      	mov	r3, r2
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	4413      	add	r3, r2
 8009fd0:	1c5d      	adds	r5, r3, #1
 8009fd2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009fd6:	f107 0214 	add.w	r2, r7, #20
 8009fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	462b      	mov	r3, r5
 8009fe0:	f7ff f838 	bl	8009054 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8009fe4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4620      	mov	r0, r4
 8009fec:	f7fd fd7c 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 8009ff0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fd fcfa 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8009ffa:	f107 0314 	add.w	r3, r7, #20
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fd fcf5 	bl	80079ee <_ZN12SimpleStringD1Ev>
	}
}
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4618      	mov	r0, r3
 800a008:	3740      	adds	r7, #64	; 0x40
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bdb0      	pop	{r4, r5, r7, pc}
 800a00e:	bf00      	nop
 800a010:	08017ed8 	.word	0x08017ed8

0800a014 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800a014:	b5b0      	push	{r4, r5, r7, lr}
 800a016:	b08c      	sub	sp, #48	; 0x30
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	f7fe feb7 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a02e:	4a26      	ldr	r2, [pc, #152]	; (800a0c8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	f107 0310 	add.w	r3, r7, #16
 800a040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff f8b2 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a048:	f107 0310 	add.w	r3, r7, #16
 800a04c:	4619      	mov	r1, r3
 800a04e:	4620      	mov	r0, r4
 800a050:	f7fd f981 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 800a054:	f107 0310 	add.w	r3, r7, #16
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fd fcc8 	bl	80079ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a064:	68fd      	ldr	r5, [r7, #12]
 800a066:	f107 0020 	add.w	r0, r7, #32
 800a06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a06c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a06e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a070:	f7fe fa68 	bl	8008544 <_Z20StringFromMaskedBitsmmj>
 800a074:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800a078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a07a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a07c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a07e:	f7fe fa61 	bl	8008544 <_Z20StringFromMaskedBitsmmj>
 800a082:	f107 0018 	add.w	r0, r7, #24
 800a086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a08a:	f107 0220 	add.w	r2, r7, #32
 800a08e:	4629      	mov	r1, r5
 800a090:	f7fe ffc6 	bl	8009020 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800a094:	f107 0318 	add.w	r3, r7, #24
 800a098:	4619      	mov	r1, r3
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7fd fd24 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800a0a0:	f107 0318 	add.w	r3, r7, #24
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fd fca2 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800a0aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fd fc9d 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800a0b4:	f107 0320 	add.w	r3, r7, #32
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fd fc98 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3730      	adds	r7, #48	; 0x30
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c8:	08017eac 	.word	0x08017eac

0800a0cc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800a0cc:	b590      	push	{r4, r7, lr}
 800a0ce:	b089      	sub	sp, #36	; 0x24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
 800a0d8:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	f7fe fe5b 	bl	8008d9c <_ZN11TestFailureC1EP10UtestShellPKcj>
 800a0e6:	4a1a      	ldr	r2, [pc, #104]	; (800a150 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	f107 0310 	add.w	r3, r7, #16
 800a0f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff f856 	bl	80091ac <_ZN11TestFailure14createUserTextERK12SimpleString>
 800a100:	f107 0310 	add.w	r3, r7, #16
 800a104:	4619      	mov	r1, r3
 800a106:	4620      	mov	r0, r4
 800a108:	f7fd f925 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 800a10c:	f107 0310 	add.w	r3, r7, #16
 800a110:	4618      	mov	r0, r3
 800a112:	f7fd fc6c 	bl	80079ee <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800a11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a11e:	f7fd fc39 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800a122:	4602      	mov	r2, r0
 800a124:	f107 0318 	add.w	r3, r7, #24
 800a128:	490a      	ldr	r1, [pc, #40]	; (800a154 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe f8ec 	bl	8008308 <_Z16StringFromFormatPKcz>
 800a130:	f107 0318 	add.w	r3, r7, #24
 800a134:	4619      	mov	r1, r3
 800a136:	4620      	mov	r0, r4
 800a138:	f7fd fcd6 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800a13c:	f107 0318 	add.w	r3, r7, #24
 800a140:	4618      	mov	r0, r3
 800a142:	f7fd fc54 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4618      	mov	r0, r3
 800a14a:	3724      	adds	r7, #36	; 0x24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd90      	pop	{r4, r7, pc}
 800a150:	08017e80 	.word	0x08017e80
 800a154:	08015fc0 	.word	0x08015fc0

0800a158 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	4a05      	ldr	r2, [pc, #20]	; (800a178 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe fe99 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	08017e80 	.word	0x08017e80

0800a17c <_ZN25FeatureUnsupportedFailureD0Ev>:
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff ffe7 	bl	800a158 <_ZN25FeatureUnsupportedFailureD1Ev>
 800a18a:	2134      	movs	r1, #52	; 0x34
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7fc f9a1 	bl	80064d4 <_ZdlPvj>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	4a05      	ldr	r2, [pc, #20]	; (800a1bc <_ZN16BitsEqualFailureD1Ev+0x20>)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe fe77 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	08017eac 	.word	0x08017eac

0800a1c0 <_ZN16BitsEqualFailureD0Ev>:
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff ffe7 	bl	800a19c <_ZN16BitsEqualFailureD1Ev>
 800a1ce:	2134      	movs	r1, #52	; 0x34
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7fc f97f 	bl	80064d4 <_ZdlPvj>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	4a05      	ldr	r2, [pc, #20]	; (800a200 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	601a      	str	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe fe55 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	08017ed8 	.word	0x08017ed8

0800a204 <_ZN18BinaryEqualFailureD0Ev>:
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7ff ffe7 	bl	800a1e0 <_ZN18BinaryEqualFailureD1Ev>
 800a212:	2134      	movs	r1, #52	; 0x34
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7fc f95d 	bl	80064d4 <_ZdlPvj>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	4a05      	ldr	r2, [pc, #20]	; (800a244 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4618      	mov	r0, r3
 800a236:	f7fe fe33 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4618      	mov	r0, r3
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	08017f04 	.word	0x08017f04

0800a248 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff ffe7 	bl	800a224 <_ZN24StringEqualNoCaseFailureD1Ev>
 800a256:	2134      	movs	r1, #52	; 0x34
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7fc f93b 	bl	80064d4 <_ZdlPvj>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	4a05      	ldr	r2, [pc, #20]	; (800a288 <_ZN18StringEqualFailureD1Ev+0x20>)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fe fe11 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4618      	mov	r0, r3
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	08017f30 	.word	0x08017f30

0800a28c <_ZN18StringEqualFailureD0Ev>:
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff ffe7 	bl	800a268 <_ZN18StringEqualFailureD1Ev>
 800a29a:	2134      	movs	r1, #52	; 0x34
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7fc f919 	bl	80064d4 <_ZdlPvj>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	4a05      	ldr	r2, [pc, #20]	; (800a2cc <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fe fdef 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	08017f5c 	.word	0x08017f5c

0800a2d0 <_ZN23SignedBytesEqualFailureD0Ev>:
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7ff ffe7 	bl	800a2ac <_ZN23SignedBytesEqualFailureD1Ev>
 800a2de:	2134      	movs	r1, #52	; 0x34
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7fc f8f7 	bl	80064d4 <_ZdlPvj>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	4a05      	ldr	r2, [pc, #20]	; (800a310 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe fdcd 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	08017f88 	.word	0x08017f88

0800a314 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff ffe7 	bl	800a2f0 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800a322:	2134      	movs	r1, #52	; 0x34
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7fc f8d5 	bl	80064d4 <_ZdlPvj>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	4a05      	ldr	r2, [pc, #20]	; (800a354 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe fdab 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	08017fb4 	.word	0x08017fb4

0800a358 <_ZN17LongsEqualFailureD0Ev>:
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff ffe7 	bl	800a334 <_ZN17LongsEqualFailureD1Ev>
 800a366:	2134      	movs	r1, #52	; 0x34
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7fc f8b3 	bl	80064d4 <_ZdlPvj>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	4a05      	ldr	r2, [pc, #20]	; (800a398 <_ZN12CheckFailureD1Ev+0x20>)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe fd89 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	08017fe0 	.word	0x08017fe0

0800a39c <_ZN12CheckFailureD0Ev>:
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff ffe7 	bl	800a378 <_ZN12CheckFailureD1Ev>
 800a3aa:	2134      	movs	r1, #52	; 0x34
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7fc f891 	bl	80064d4 <_ZdlPvj>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	4a05      	ldr	r2, [pc, #20]	; (800a3dc <_ZN15ContainsFailureD1Ev+0x20>)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe fd67 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	0801800c 	.word	0x0801800c

0800a3e0 <_ZN15ContainsFailureD0Ev>:
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ffe7 	bl	800a3bc <_ZN15ContainsFailureD1Ev>
 800a3ee:	2134      	movs	r1, #52	; 0x34
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7fc f86f 	bl	80064d4 <_ZdlPvj>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	4a05      	ldr	r2, [pc, #20]	; (800a420 <_ZN17ComparisonFailureD1Ev+0x20>)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe fd45 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	08018038 	.word	0x08018038

0800a424 <_ZN17ComparisonFailureD0Ev>:
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff ffe7 	bl	800a400 <_ZN17ComparisonFailureD1Ev>
 800a432:	2134      	movs	r1, #52	; 0x34
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7fc f84d 	bl	80064d4 <_ZdlPvj>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	4a05      	ldr	r2, [pc, #20]	; (800a464 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe fd23 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	08018064 	.word	0x08018064

0800a468 <_ZN17CheckEqualFailureD0Ev>:
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff ffe7 	bl	800a444 <_ZN17CheckEqualFailureD1Ev>
 800a476:	2134      	movs	r1, #52	; 0x34
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7fc f82b 	bl	80064d4 <_ZdlPvj>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4618      	mov	r0, r3
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	4a05      	ldr	r2, [pc, #20]	; (800a4a8 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fd01 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	08018090 	.word	0x08018090

0800a4ac <_ZN19DoublesEqualFailureD0Ev>:
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff ffe7 	bl	800a488 <_ZN19DoublesEqualFailureD1Ev>
 800a4ba:	2134      	movs	r1, #52	; 0x34
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7fc f809 	bl	80064d4 <_ZdlPvj>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	4a05      	ldr	r2, [pc, #20]	; (800a4ec <_ZN13EqualsFailureD1Ev+0x20>)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fcdf 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	080180bc 	.word	0x080180bc

0800a4f0 <_ZN13EqualsFailureD0Ev>:
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff ffe7 	bl	800a4cc <_ZN13EqualsFailureD1Ev>
 800a4fe:	2134      	movs	r1, #52	; 0x34
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7fb ffe7 	bl	80064d4 <_ZdlPvj>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800a510:	b5b0      	push	{r4, r5, r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af02      	add	r7, sp, #8
 800a516:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800a518:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <_ZL13checkedMallocj+0x40>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10e      	bne.n	800a546 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800a528:	f004 f96c 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 800a52c:	4604      	mov	r4, r0
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	3368      	adds	r3, #104	; 0x68
 800a532:	681d      	ldr	r5, [r3, #0]
 800a534:	f004 f976 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a538:	4603      	mov	r3, r0
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	2325      	movs	r3, #37	; 0x25
 800a53e:	4a05      	ldr	r2, [pc, #20]	; (800a554 <_ZL13checkedMallocj+0x44>)
 800a540:	4905      	ldr	r1, [pc, #20]	; (800a558 <_ZL13checkedMallocj+0x48>)
 800a542:	4620      	mov	r0, r4
 800a544:	47a8      	blx	r5
    return mem;
 800a546:	68fb      	ldr	r3, [r7, #12]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bdb0      	pop	{r4, r5, r7, pc}
 800a550:	200000c4 	.word	0x200000c4
 800a554:	08016034 	.word	0x08016034
 800a558:	08016054 	.word	0x08016054

0800a55c <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800a560:	4b04      	ldr	r3, [pc, #16]	; (800a574 <_Z22getCurrentNewAllocatorv+0x18>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <_Z22getCurrentNewAllocatorv+0x10>
 800a568:	f000 f806 	bl	800a578 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800a56c:	4b01      	ldr	r3, [pc, #4]	; (800a574 <_Z22getCurrentNewAllocatorv+0x18>)
 800a56e:	681b      	ldr	r3, [r3, #0]
}
 800a570:	4618      	mov	r0, r3
 800a572:	bd80      	pop	{r7, pc}
 800a574:	2000054c 	.word	0x2000054c

0800a578 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800a57c:	f000 f810 	bl	800a5a0 <_Z19defaultNewAllocatorv>
 800a580:	4603      	mov	r3, r0
 800a582:	4a02      	ldr	r2, [pc, #8]	; (800a58c <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800a584:	6013      	str	r3, [r2, #0]
}
 800a586:	bf00      	nop
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	2000054c 	.word	0x2000054c

0800a590 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
 800a594:	4801      	ldr	r0, [pc, #4]	; (800a59c <__tcf_0+0xc>)
 800a596:	f000 f909 	bl	800a7ac <_ZN19TestMemoryAllocatorD1Ev>
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	20000558 	.word	0x20000558

0800a5a0 <_Z19defaultNewAllocatorv>:
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800a5a4:	4b13      	ldr	r3, [pc, #76]	; (800a5f4 <_Z19defaultNewAllocatorv+0x54>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	f3bf 8f5b 	dmb	ish
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bf0c      	ite	eq
 800a5b6:	2301      	moveq	r3, #1
 800a5b8:	2300      	movne	r3, #0
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d016      	beq.n	800a5ee <_Z19defaultNewAllocatorv+0x4e>
 800a5c0:	480c      	ldr	r0, [pc, #48]	; (800a5f4 <_Z19defaultNewAllocatorv+0x54>)
 800a5c2:	f007 faf3 	bl	8011bac <__cxa_guard_acquire>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bf14      	ite	ne
 800a5cc:	2301      	movne	r3, #1
 800a5ce:	2300      	moveq	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00b      	beq.n	800a5ee <_Z19defaultNewAllocatorv+0x4e>
 800a5d6:	4b08      	ldr	r3, [pc, #32]	; (800a5f8 <_Z19defaultNewAllocatorv+0x58>)
 800a5d8:	4a08      	ldr	r2, [pc, #32]	; (800a5fc <_Z19defaultNewAllocatorv+0x5c>)
 800a5da:	4909      	ldr	r1, [pc, #36]	; (800a600 <_Z19defaultNewAllocatorv+0x60>)
 800a5dc:	4809      	ldr	r0, [pc, #36]	; (800a604 <_Z19defaultNewAllocatorv+0x64>)
 800a5de:	f000 f8c5 	bl	800a76c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800a5e2:	4804      	ldr	r0, [pc, #16]	; (800a5f4 <_Z19defaultNewAllocatorv+0x54>)
 800a5e4:	f007 faee 	bl	8011bc4 <__cxa_guard_release>
 800a5e8:	4807      	ldr	r0, [pc, #28]	; (800a608 <_Z19defaultNewAllocatorv+0x68>)
 800a5ea:	f007 fb12 	bl	8011c12 <atexit>
    return &allocator;
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <_Z19defaultNewAllocatorv+0x64>)
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	2000056c 	.word	0x2000056c
 800a5f8:	08016074 	.word	0x08016074
 800a5fc:	0801607c 	.word	0x0801607c
 800a600:	08016080 	.word	0x08016080
 800a604:	20000558 	.word	0x20000558
 800a608:	0800a591 	.word	0x0800a591

0800a60c <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800a610:	4b04      	ldr	r3, [pc, #16]	; (800a624 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <_Z27getCurrentNewArrayAllocatorv+0x10>
 800a618:	f000 f806 	bl	800a628 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800a61c:	4b01      	ldr	r3, [pc, #4]	; (800a624 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800a61e:	681b      	ldr	r3, [r3, #0]
}
 800a620:	4618      	mov	r0, r3
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20000550 	.word	0x20000550

0800a628 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800a62c:	f000 f810 	bl	800a650 <_Z24defaultNewArrayAllocatorv>
 800a630:	4603      	mov	r3, r0
 800a632:	4a02      	ldr	r2, [pc, #8]	; (800a63c <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800a634:	6013      	str	r3, [r2, #0]
}
 800a636:	bf00      	nop
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000550 	.word	0x20000550

0800a640 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
 800a644:	4801      	ldr	r0, [pc, #4]	; (800a64c <__tcf_1+0xc>)
 800a646:	f000 f8b1 	bl	800a7ac <_ZN19TestMemoryAllocatorD1Ev>
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000570 	.word	0x20000570

0800a650 <_Z24defaultNewArrayAllocatorv>:
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800a654:	4b13      	ldr	r3, [pc, #76]	; (800a6a4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f3bf 8f5b 	dmb	ish
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	bf0c      	ite	eq
 800a666:	2301      	moveq	r3, #1
 800a668:	2300      	movne	r3, #0
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d016      	beq.n	800a69e <_Z24defaultNewArrayAllocatorv+0x4e>
 800a670:	480c      	ldr	r0, [pc, #48]	; (800a6a4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800a672:	f007 fa9b 	bl	8011bac <__cxa_guard_acquire>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	bf14      	ite	ne
 800a67c:	2301      	movne	r3, #1
 800a67e:	2300      	moveq	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00b      	beq.n	800a69e <_Z24defaultNewArrayAllocatorv+0x4e>
 800a686:	4b08      	ldr	r3, [pc, #32]	; (800a6a8 <_Z24defaultNewArrayAllocatorv+0x58>)
 800a688:	4a08      	ldr	r2, [pc, #32]	; (800a6ac <_Z24defaultNewArrayAllocatorv+0x5c>)
 800a68a:	4909      	ldr	r1, [pc, #36]	; (800a6b0 <_Z24defaultNewArrayAllocatorv+0x60>)
 800a68c:	4809      	ldr	r0, [pc, #36]	; (800a6b4 <_Z24defaultNewArrayAllocatorv+0x64>)
 800a68e:	f000 f86d 	bl	800a76c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800a692:	4804      	ldr	r0, [pc, #16]	; (800a6a4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800a694:	f007 fa96 	bl	8011bc4 <__cxa_guard_release>
 800a698:	4807      	ldr	r0, [pc, #28]	; (800a6b8 <_Z24defaultNewArrayAllocatorv+0x68>)
 800a69a:	f007 faba 	bl	8011c12 <atexit>
    return &allocator;
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	20000584 	.word	0x20000584
 800a6a8:	08016098 	.word	0x08016098
 800a6ac:	080160a4 	.word	0x080160a4
 800a6b0:	080160ac 	.word	0x080160ac
 800a6b4:	20000570 	.word	0x20000570
 800a6b8:	0800a641 	.word	0x0800a641

0800a6bc <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800a6c0:	4b04      	ldr	r3, [pc, #16]	; (800a6d4 <_Z25getCurrentMallocAllocatorv+0x18>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <_Z25getCurrentMallocAllocatorv+0x10>
 800a6c8:	f000 f806 	bl	800a6d8 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800a6cc:	4b01      	ldr	r3, [pc, #4]	; (800a6d4 <_Z25getCurrentMallocAllocatorv+0x18>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	20000554 	.word	0x20000554

0800a6d8 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800a6dc:	f000 f810 	bl	800a700 <_Z22defaultMallocAllocatorv>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	4a02      	ldr	r2, [pc, #8]	; (800a6ec <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800a6e4:	6013      	str	r3, [r2, #0]
}
 800a6e6:	bf00      	nop
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20000554 	.word	0x20000554

0800a6f0 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__tcf_2+0xc>)
 800a6f6:	f000 f859 	bl	800a7ac <_ZN19TestMemoryAllocatorD1Ev>
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20000588 	.word	0x20000588

0800a700 <_Z22defaultMallocAllocatorv>:
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800a704:	4b13      	ldr	r3, [pc, #76]	; (800a754 <_Z22defaultMallocAllocatorv+0x54>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f3bf 8f5b 	dmb	ish
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	bf0c      	ite	eq
 800a716:	2301      	moveq	r3, #1
 800a718:	2300      	movne	r3, #0
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d016      	beq.n	800a74e <_Z22defaultMallocAllocatorv+0x4e>
 800a720:	480c      	ldr	r0, [pc, #48]	; (800a754 <_Z22defaultMallocAllocatorv+0x54>)
 800a722:	f007 fa43 	bl	8011bac <__cxa_guard_acquire>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bf14      	ite	ne
 800a72c:	2301      	movne	r3, #1
 800a72e:	2300      	moveq	r3, #0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00b      	beq.n	800a74e <_Z22defaultMallocAllocatorv+0x4e>
 800a736:	4b08      	ldr	r3, [pc, #32]	; (800a758 <_Z22defaultMallocAllocatorv+0x58>)
 800a738:	4a08      	ldr	r2, [pc, #32]	; (800a75c <_Z22defaultMallocAllocatorv+0x5c>)
 800a73a:	4909      	ldr	r1, [pc, #36]	; (800a760 <_Z22defaultMallocAllocatorv+0x60>)
 800a73c:	4809      	ldr	r0, [pc, #36]	; (800a764 <_Z22defaultMallocAllocatorv+0x64>)
 800a73e:	f000 f815 	bl	800a76c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800a742:	4804      	ldr	r0, [pc, #16]	; (800a754 <_Z22defaultMallocAllocatorv+0x54>)
 800a744:	f007 fa3e 	bl	8011bc4 <__cxa_guard_release>
 800a748:	4807      	ldr	r0, [pc, #28]	; (800a768 <_Z22defaultMallocAllocatorv+0x68>)
 800a74a:	f007 fa62 	bl	8011c12 <atexit>
    return &allocator;
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <_Z22defaultMallocAllocatorv+0x64>)
}
 800a750:	4618      	mov	r0, r3
 800a752:	bd80      	pop	{r7, pc}
 800a754:	2000059c 	.word	0x2000059c
 800a758:	080160c8 	.word	0x080160c8
 800a75c:	080160d0 	.word	0x080160d0
 800a760:	080160d8 	.word	0x080160d8
 800a764:	20000588 	.word	0x20000588
 800a768:	0800a6f1 	.word	0x0800a6f1

0800a76c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800a77a:	4a0b      	ldr	r2, [pc, #44]	; (800a7a8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	605a      	str	r2, [r3, #4]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	609a      	str	r2, [r3, #8]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	741a      	strb	r2, [r3, #16]
{
}
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	08018148 	.word	0x08018148

0800a7ac <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	4a06      	ldr	r2, [pc, #24]	; (800a7d0 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	741a      	strb	r2, [r3, #16]
}
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	08018148 	.word	0x08018148

0800a7d4 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
}
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff ffe5 	bl	800a7ac <_ZN19TestMemoryAllocatorD1Ev>
 800a7e2:	2114      	movs	r1, #20
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7fb fe75 	bl	80064d4 <_ZdlPvj>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	7c1b      	ldrb	r3, [r3, #16]
}
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800a80c:	b590      	push	{r4, r7, lr}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3310      	adds	r3, #16
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	4798      	blx	r3
 800a822:	4604      	mov	r4, r0
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3310      	adds	r3, #16
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6838      	ldr	r0, [r7, #0]
 800a82e:	4798      	blx	r3
 800a830:	4603      	mov	r3, r0
 800a832:	4619      	mov	r1, r3
 800a834:	4620      	mov	r0, r4
 800a836:	f7fc fb5f 	bl	8006ef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bf0c      	ite	eq
 800a840:	2301      	moveq	r3, #1
 800a842:	2300      	movne	r3, #0
 800a844:	b2db      	uxtb	r3, r3
}
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd90      	pop	{r4, r7, pc}
	...

0800a850 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800a850:	b590      	push	{r4, r7, lr}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3308      	adds	r3, #8
 800a860:	681c      	ldr	r4, [r3, #0]
 800a862:	2301      	movs	r3, #1
 800a864:	4a04      	ldr	r2, [pc, #16]	; (800a878 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	47a0      	blx	r4
 800a86c:	4603      	mov	r3, r0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	bd90      	pop	{r4, r7, pc}
 800a876:	bf00      	nop
 800a878:	080160f4 	.word	0x080160f4

0800a87c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800a87c:	b590      	push	{r4, r7, lr}
 800a87e:	b085      	sub	sp, #20
 800a880:	af02      	add	r7, sp, #8
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	330c      	adds	r3, #12
 800a88c:	681c      	ldr	r4, [r3, #0]
 800a88e:	2301      	movs	r3, #1
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800a894:	2200      	movs	r2, #0
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	47a0      	blx	r4
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd90      	pop	{r4, r7, pc}
 800a8a4:	080160f4 	.word	0x080160f4

0800a8a8 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800a8b6:	68b8      	ldr	r0, [r7, #8]
 800a8b8:	f7ff fe2a 	bl	800a510 <_ZL13checkedMallocj>
 800a8bc:	4603      	mov	r3, r0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
 800a8d4:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800a8d6:	4b04      	ldr	r3, [pc, #16]	; (800a8e8 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68b8      	ldr	r0, [r7, #8]
 800a8dc:	4798      	blx	r3
}
 800a8de:	bf00      	nop
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	200000cc 	.word	0x200000cc

0800a8ec <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
    return name_;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
    return free_name_;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
    return this;
 800a93c:	687b      	ldr	r3, [r7, #4]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
	...

0800a94c <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	4a05      	ldr	r2, [pc, #20]	; (800a96c <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	601a      	str	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff ff25 	bl	800a7ac <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	08018114 	.word	0x08018114

0800a970 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
}
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff ffe7 	bl	800a94c <_ZN20NullUnknownAllocatorD1Ev>
 800a97e:	2114      	movs	r1, #20
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7fb fda7 	bl	80064d4 <_ZdlPvj>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
	...

0800a9c8 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800a9d4:	4a05      	ldr	r2, [pc, #20]	; (800a9ec <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800a9d6:	4906      	ldr	r1, [pc, #24]	; (800a9f0 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800a9d8:	f7ff fec8 	bl	800a76c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800a9dc:	4a05      	ldr	r2, [pc, #20]	; (800a9f4 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	601a      	str	r2, [r3, #0]
{
}
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	08016128 	.word	0x08016128
 800a9f0:	08016130 	.word	0x08016130
 800a9f4:	08018114 	.word	0x08018114

0800a9f8 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	4801      	ldr	r0, [pc, #4]	; (800aa04 <__tcf_3+0xc>)
 800a9fe:	f7ff ffa5 	bl	800a94c <_ZN20NullUnknownAllocatorD1Ev>
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	200005a0 	.word	0x200005a0

0800aa08 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800aa0c:	4b12      	ldr	r3, [pc, #72]	; (800aa58 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f3bf 8f5b 	dmb	ish
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	bf0c      	ite	eq
 800aa1e:	2301      	moveq	r3, #1
 800aa20:	2300      	movne	r3, #0
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d013      	beq.n	800aa50 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800aa28:	480b      	ldr	r0, [pc, #44]	; (800aa58 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800aa2a:	f007 f8bf 	bl	8011bac <__cxa_guard_acquire>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	bf14      	ite	ne
 800aa34:	2301      	movne	r3, #1
 800aa36:	2300      	moveq	r3, #0
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d008      	beq.n	800aa50 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800aa3e:	4807      	ldr	r0, [pc, #28]	; (800aa5c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800aa40:	f7ff ffc2 	bl	800a9c8 <_ZN20NullUnknownAllocatorC1Ev>
 800aa44:	4804      	ldr	r0, [pc, #16]	; (800aa58 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800aa46:	f007 f8bd 	bl	8011bc4 <__cxa_guard_release>
 800aa4a:	4805      	ldr	r0, [pc, #20]	; (800aa60 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800aa4c:	f007 f8e1 	bl	8011c12 <atexit>
    return &allocator;
 800aa50:	4b02      	ldr	r3, [pc, #8]	; (800aa5c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	200005b4 	.word	0x200005b4
 800aa5c:	200005a0 	.word	0x200005a0
 800aa60:	0800a9f9 	.word	0x0800a9f9

0800aa64 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
        return testCount_;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
    }
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	699b      	ldr	r3, [r3, #24]
    }
 800aa88:	4618      	mov	r0, r3
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800aa98:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d103      	bne.n	800aaa8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800aaa0:	f004 fa38 	bl	800ef14 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	e001      	b.n	800aaac <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800aaa8:	4b01      	ldr	r3, [pc, #4]	; (800aab0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20000084 	.word	0x20000084

0800aab4 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800aabc:	4a0a      	ldr	r2, [pc, #40]	; (800aae8 <_ZN10TestOutputC1Ev+0x34>)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	601a      	str	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	605a      	str	r2, [r3, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	721a      	strb	r2, [r3, #8]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	725a      	strb	r2, [r3, #9]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a05      	ldr	r2, [pc, #20]	; (800aaec <_ZN10TestOutputC1Ev+0x38>)
 800aad8:	60da      	str	r2, [r3, #12]
{
}
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	0801824c 	.word	0x0801824c
 800aaec:	08016530 	.word	0x08016530

0800aaf0 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	4a04      	ldr	r2, [pc, #16]	; (800ab0c <_ZN10TestOutputD1Ev+0x1c>)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	601a      	str	r2, [r3, #0]
{
}
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	0801824c 	.word	0x0801824c

0800ab10 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	78fa      	ldrb	r2, [r7, #3]
 800ab20:	721a      	strb	r2, [r3, #8]
}
 800ab22:	bf00      	nop
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
    color_ = true;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	725a      	strb	r2, [r3, #9]
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3328      	adds	r3, #40	; 0x28
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	4798      	blx	r3
}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800ab68:	b590      	push	{r4, r7, lr}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	332c      	adds	r3, #44	; 0x2c
 800ab78:	681c      	ldr	r4, [r3, #0]
 800ab7a:	f107 0308 	add.w	r3, r7, #8
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7fd f9ef 	bl	8007f64 <_Z10StringFroml>
 800ab86:	f107 0308 	add.w	r3, r7, #8
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fc ff02 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800ab90:	4603      	mov	r3, r0
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	47a0      	blx	r4
 800ab98:	f107 0308 	add.w	r3, r7, #8
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fc ff26 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800aba2:	bf00      	nop
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd90      	pop	{r4, r7, pc}

0800abaa <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800abaa:	b590      	push	{r4, r7, lr}
 800abac:	b085      	sub	sp, #20
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	332c      	adds	r3, #44	; 0x2c
 800abba:	681c      	ldr	r4, [r3, #0]
 800abbc:	f107 0308 	add.w	r3, r7, #8
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fd fbc8 	bl	8008358 <_Z10StringFromj>
 800abc8:	f107 0308 	add.w	r3, r7, #8
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fc fee1 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800abd2:	4603      	mov	r3, r0
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	47a0      	blx	r4
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fc ff05 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800abe4:	bf00      	nop
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd90      	pop	{r4, r7, pc}

0800abec <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800abec:	b590      	push	{r4, r7, lr}
 800abee:	b087      	sub	sp, #28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	332c      	adds	r3, #44	; 0x2c
 800abfe:	681c      	ldr	r4, [r3, #0]
 800ac00:	f107 0310 	add.w	r3, r7, #16
 800ac04:	2106      	movs	r1, #6
 800ac06:	ed97 0b00 	vldr	d0, [r7]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fd fb3a 	bl	8008284 <_Z10StringFromdi>
 800ac10:	f107 0310 	add.w	r3, r7, #16
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fc febd 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	47a0      	blx	r4
 800ac22:	f107 0310 	add.w	r3, r7, #16
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fc fee1 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800ac2c:	bf00      	nop
 800ac2e:	371c      	adds	r7, #28
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd90      	pop	{r4, r7, pc}

0800ac34 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
    p.print(s);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	332c      	adds	r3, #44	; 0x2c
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	4798      	blx	r3
    return p;
 800ac4c:	687b      	ldr	r3, [r7, #4]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ac58:	b590      	push	{r4, r7, lr}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	7a1b      	ldrb	r3, [r3, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d01a      	beq.n	800aca0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	332c      	adds	r3, #44	; 0x2c
 800ac70:	681c      	ldr	r4, [r3, #0]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3314      	adds	r3, #20
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f107 0208 	add.w	r2, r7, #8
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	4610      	mov	r0, r2
 800ac82:	4798      	blx	r3
 800ac84:	f107 0308 	add.w	r3, r7, #8
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fc fe83 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	47a0      	blx	r4
 800ac96:	f107 0308 	add.w	r3, r7, #8
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fc fea7 	bl	80079ee <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3318      	adds	r3, #24
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6838      	ldr	r0, [r7, #0]
 800acaa:	4798      	blx	r3
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d007      	beq.n	800acc2 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3344      	adds	r3, #68	; 0x44
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4907      	ldr	r1, [pc, #28]	; (800acd8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800acc0:	e006      	b.n	800acd0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3344      	adds	r3, #68	; 0x44
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4904      	ldr	r1, [pc, #16]	; (800acdc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	4798      	blx	r3
}
 800acd0:	bf00      	nop
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd90      	pop	{r4, r7, pc}
 800acd8:	08016530 	.word	0x08016530
 800acdc:	08016534 	.word	0x08016534

0800ace0 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800ace0:	b590      	push	{r4, r7, lr}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	7a1b      	ldrb	r3, [r3, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d019      	beq.n	800ad26 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	332c      	adds	r3, #44	; 0x2c
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4910      	ldr	r1, [pc, #64]	; (800ad3c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3334      	adds	r3, #52	; 0x34
 800ad06:	681c      	ldr	r4, [r3, #0]
 800ad08:	6838      	ldr	r0, [r7, #0]
 800ad0a:	f002 f845 	bl	800cd98 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	47a0      	blx	r4
        print(" ms\n");
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	332c      	adds	r3, #44	; 0x2c
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4908      	ldr	r1, [pc, #32]	; (800ad40 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800ad24:	e005      	b.n	800ad32 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3358      	adds	r3, #88	; 0x58
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	4798      	blx	r3
}
 800ad32:	bf00      	nop
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd90      	pop	{r4, r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	08016538 	.word	0x08016538
 800ad40:	0801653c 	.word	0x0801653c

0800ad44 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	332c      	adds	r3, #44	; 0x2c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	68d2      	ldr	r2, [r2, #12]
 800ad58:	4611      	mov	r1, r2
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	1c5a      	adds	r2, r3, #1
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	605a      	str	r2, [r3, #4]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	4b0d      	ldr	r3, [pc, #52]	; (800ada4 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800ad6e:	fb83 1302 	smull	r1, r3, r3, r2
 800ad72:	1119      	asrs	r1, r3, #4
 800ad74:	17d3      	asrs	r3, r2, #31
 800ad76:	1acb      	subs	r3, r1, r3
 800ad78:	2132      	movs	r1, #50	; 0x32
 800ad7a:	fb01 f303 	mul.w	r3, r1, r3
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	bf0c      	ite	eq
 800ad84:	2301      	moveq	r3, #1
 800ad86:	2300      	movne	r3, #0
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d006      	beq.n	800ad9c <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	332c      	adds	r3, #44	; 0x2c
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4904      	ldr	r1, [pc, #16]	; (800ada8 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	4798      	blx	r3
}
 800ad9c:	bf00      	nop
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	51eb851f 	.word	0x51eb851f
 800ada8:	08016544 	.word	0x08016544

0800adac <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	60da      	str	r2, [r3, #12]
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800ae08:	b590      	push	{r4, r7, lr}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
    print("\n");
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	332c      	adds	r3, #44	; 0x2c
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	496f      	ldr	r1, [pc, #444]	; (800afd8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800ae20:	6838      	ldr	r0, [r7, #0]
 800ae22:	f7f9 fe25 	bl	8004a70 <_ZNK10TestResult9isFailureEv>
 800ae26:	4603      	mov	r3, r0
 800ae28:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800ae2a:	6838      	ldr	r0, [r7, #0]
 800ae2c:	f7f9 fe14 	bl	8004a58 <_ZNK10TestResult15getFailureCountEv>
 800ae30:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d02b      	beq.n	800ae90 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7a5b      	ldrb	r3, [r3, #9]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d006      	beq.n	800ae4e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	332c      	adds	r3, #44	; 0x2c
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4964      	ldr	r1, [pc, #400]	; (800afdc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	4798      	blx	r3
        }
        print("Errors (");
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	332c      	adds	r3, #44	; 0x2c
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4962      	ldr	r1, [pc, #392]	; (800afe0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	4798      	blx	r3
        if (failureCount > 0) {
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00e      	beq.n	800ae80 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3334      	adds	r3, #52	; 0x34
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	4798      	blx	r3
            print(" failures, ");
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	332c      	adds	r3, #44	; 0x2c
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	495a      	ldr	r1, [pc, #360]	; (800afe4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	4798      	blx	r3
 800ae7e:	e019      	b.n	800aeb4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	332c      	adds	r3, #44	; 0x2c
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4957      	ldr	r1, [pc, #348]	; (800afe8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
 800ae8e:	e011      	b.n	800aeb4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	7a5b      	ldrb	r3, [r3, #9]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d006      	beq.n	800aea6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	332c      	adds	r3, #44	; 0x2c
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4952      	ldr	r1, [pc, #328]	; (800afec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	4798      	blx	r3
        }
        print("OK (");
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	332c      	adds	r3, #44	; 0x2c
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4950      	ldr	r1, [pc, #320]	; (800aff0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	4798      	blx	r3
    }
    print(result.getTestCount());
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3334      	adds	r3, #52	; 0x34
 800aeba:	681c      	ldr	r4, [r3, #0]
 800aebc:	6838      	ldr	r0, [r7, #0]
 800aebe:	f7ff fdd1 	bl	800aa64 <_ZNK10TestResult12getTestCountEv>
 800aec2:	4603      	mov	r3, r0
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	47a0      	blx	r4
    print(" tests, ");
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	332c      	adds	r3, #44	; 0x2c
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4948      	ldr	r1, [pc, #288]	; (800aff4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	4798      	blx	r3
    print(result.getRunCount());
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3334      	adds	r3, #52	; 0x34
 800aede:	681c      	ldr	r4, [r3, #0]
 800aee0:	6838      	ldr	r0, [r7, #0]
 800aee2:	f7f9 fda1 	bl	8004a28 <_ZNK10TestResult11getRunCountEv>
 800aee6:	4603      	mov	r3, r0
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	47a0      	blx	r4
    print(" ran, ");
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	332c      	adds	r3, #44	; 0x2c
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4940      	ldr	r1, [pc, #256]	; (800aff8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	4798      	blx	r3
    print(result.getCheckCount());
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3334      	adds	r3, #52	; 0x34
 800af02:	681c      	ldr	r4, [r3, #0]
 800af04:	6838      	ldr	r0, [r7, #0]
 800af06:	f7fa f9fb 	bl	8005300 <_ZNK10TestResult13getCheckCountEv>
 800af0a:	4603      	mov	r3, r0
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	47a0      	blx	r4
    print(" checks, ");
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	332c      	adds	r3, #44	; 0x2c
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4938      	ldr	r1, [pc, #224]	; (800affc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	4798      	blx	r3
    print(result.getIgnoredCount());
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3334      	adds	r3, #52	; 0x34
 800af26:	681c      	ldr	r4, [r3, #0]
 800af28:	6838      	ldr	r0, [r7, #0]
 800af2a:	f7f9 fd89 	bl	8004a40 <_ZNK10TestResult15getIgnoredCountEv>
 800af2e:	4603      	mov	r3, r0
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	47a0      	blx	r4
    print(" ignored, ");
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	332c      	adds	r3, #44	; 0x2c
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4930      	ldr	r1, [pc, #192]	; (800b000 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3334      	adds	r3, #52	; 0x34
 800af4a:	681c      	ldr	r4, [r3, #0]
 800af4c:	6838      	ldr	r0, [r7, #0]
 800af4e:	f7ff fd95 	bl	800aa7c <_ZNK10TestResult19getFilteredOutCountEv>
 800af52:	4603      	mov	r3, r0
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	47a0      	blx	r4
    print(" filtered out, ");
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	332c      	adds	r3, #44	; 0x2c
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4928      	ldr	r1, [pc, #160]	; (800b004 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	3334      	adds	r3, #52	; 0x34
 800af6e:	681c      	ldr	r4, [r3, #0]
 800af70:	6838      	ldr	r0, [r7, #0]
 800af72:	f001 ff05 	bl	800cd80 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800af76:	4603      	mov	r3, r0
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	47a0      	blx	r4
    print(" ms)");
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	332c      	adds	r3, #44	; 0x2c
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4920      	ldr	r1, [pc, #128]	; (800b008 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	4798      	blx	r3
    if (color_) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7a5b      	ldrb	r3, [r3, #9]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d006      	beq.n	800afa2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	332c      	adds	r3, #44	; 0x2c
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	491b      	ldr	r1, [pc, #108]	; (800b00c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	332c      	adds	r3, #44	; 0x2c
 800afb4:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800afb6:	4916      	ldr	r1, [pc, #88]	; (800b010 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	4798      	blx	r3
    }
    print("\n\n");
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	332c      	adds	r3, #44	; 0x2c
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4913      	ldr	r1, [pc, #76]	; (800b014 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	4798      	blx	r3

    dotCount_ = 0;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	605a      	str	r2, [r3, #4]
}
 800afd0:	bf00      	nop
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd90      	pop	{r4, r7, pc}
 800afd8:	08016544 	.word	0x08016544
 800afdc:	08016548 	.word	0x08016548
 800afe0:	08016550 	.word	0x08016550
 800afe4:	0801655c 	.word	0x0801655c
 800afe8:	08016568 	.word	0x08016568
 800afec:	08016578 	.word	0x08016578
 800aff0:	08016580 	.word	0x08016580
 800aff4:	08016588 	.word	0x08016588
 800aff8:	08016594 	.word	0x08016594
 800affc:	0801659c 	.word	0x0801659c
 800b000:	080165a8 	.word	0x080165a8
 800b004:	080165b4 	.word	0x080165b4
 800b008:	080165c4 	.word	0x080165c4
 800b00c:	080165cc 	.word	0x080165cc
 800b010:	080165d0 	.word	0x080165d0
 800b014:	08016674 	.word	0x08016674

0800b018 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d922      	bls.n	800b070 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	332c      	adds	r3, #44	; 0x2c
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4911      	ldr	r1, [pc, #68]	; (800b078 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	4798      	blx	r3
        print(number);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3334      	adds	r3, #52	; 0x34
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68b9      	ldr	r1, [r7, #8]
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	4798      	blx	r3
        print(" of ");
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	332c      	adds	r3, #44	; 0x2c
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	490b      	ldr	r1, [pc, #44]	; (800b07c <_ZN10TestOutput12printTestRunEjj+0x64>)
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	4798      	blx	r3
        print(total);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	3334      	adds	r3, #52	; 0x34
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	4798      	blx	r3
        print("\n");
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	332c      	adds	r3, #44	; 0x2c
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4905      	ldr	r1, [pc, #20]	; (800b080 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	4798      	blx	r3
    }
}
 800b070:	bf00      	nop
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	08016678 	.word	0x08016678
 800b07c:	08016684 	.word	0x08016684
 800b080:	08016544 	.word	0x08016544

0800b084 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800b08e:	6838      	ldr	r0, [r7, #0]
 800b090:	f7fd ffa1 	bl	8008fd6 <_ZNK11TestFailure17isOutsideTestFileEv>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d105      	bne.n	800b0a6 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800b09a:	6838      	ldr	r0, [r7, #0]
 800b09c:	f7fd ffad 	bl	8008ffa <_ZNK11TestFailure18isInHelperFunctionEv>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e000      	b.n	800b0ac <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f81d 	bl	800b0f2 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800b0b8:	e003      	b.n	800b0c2 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 f86b 	bl	800b198 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	3318      	adds	r3, #24
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f107 0208 	add.w	r2, r7, #8
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	4798      	blx	r3
 800b0d4:	f107 0308 	add.w	r3, r7, #8
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f8b2 	bl	800b244 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800b0e0:	f107 0308 	add.w	r3, r7, #8
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fc fc82 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800b0ea:	bf00      	nop
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b088      	sub	sp, #32
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	331c      	adds	r3, #28
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f107 0208 	add.w	r2, r7, #8
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	4610      	mov	r0, r2
 800b10c:	4798      	blx	r3
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3320      	adds	r3, #32
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6838      	ldr	r0, [r7, #0]
 800b118:	4798      	blx	r3
 800b11a:	4602      	mov	r2, r0
 800b11c:	f107 0308 	add.w	r3, r7, #8
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f8be 	bl	800b2a4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b128:	f107 0308 	add.w	r3, r7, #8
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fc fc5e 	bl	80079ee <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	330c      	adds	r3, #12
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f107 0210 	add.w	r2, r7, #16
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	4610      	mov	r0, r2
 800b142:	4798      	blx	r3
 800b144:	f107 0310 	add.w	r3, r7, #16
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f85c 	bl	800b208 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800b150:	f107 0310 	add.w	r3, r7, #16
 800b154:	4618      	mov	r0, r3
 800b156:	f7fc fc4a 	bl	80079ee <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3308      	adds	r3, #8
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f107 0218 	add.w	r2, r7, #24
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	4610      	mov	r0, r2
 800b16a:	4798      	blx	r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3314      	adds	r3, #20
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6838      	ldr	r0, [r7, #0]
 800b176:	4798      	blx	r3
 800b178:	4602      	mov	r2, r0
 800b17a:	f107 0318 	add.w	r3, r7, #24
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f88f 	bl	800b2a4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b186:	f107 0318 	add.w	r3, r7, #24
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fc fc2f 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800b190:	bf00      	nop
 800b192:	3720      	adds	r7, #32
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f107 0208 	add.w	r2, r7, #8
 800b1ae:	6839      	ldr	r1, [r7, #0]
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	4798      	blx	r3
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3314      	adds	r3, #20
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6838      	ldr	r0, [r7, #0]
 800b1be:	4798      	blx	r3
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	f107 0308 	add.w	r3, r7, #8
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f86b 	bl	800b2a4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800b1ce:	f107 0308 	add.w	r3, r7, #8
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fc fc0b 	bl	80079ee <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	330c      	adds	r3, #12
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f107 0210 	add.w	r2, r7, #16
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	4610      	mov	r0, r2
 800b1e8:	4798      	blx	r3
 800b1ea:	f107 0310 	add.w	r3, r7, #16
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f809 	bl	800b208 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800b1f6:	f107 0310 	add.w	r3, r7, #16
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fc fbf7 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800b200:	bf00      	nop
 800b202:	3718      	adds	r7, #24
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	332c      	adds	r3, #44	; 0x2c
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4909      	ldr	r1, [pc, #36]	; (800b240 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	4798      	blx	r3
    print(testName.asCharString());
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	332c      	adds	r3, #44	; 0x2c
 800b226:	681c      	ldr	r4, [r3, #0]
 800b228:	6838      	ldr	r0, [r7, #0]
 800b22a:	f7fc fbb3 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800b22e:	4603      	mov	r3, r0
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	47a0      	blx	r4
}
 800b236:	bf00      	nop
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd90      	pop	{r4, r7, pc}
 800b23e:	bf00      	nop
 800b240:	0801668c 	.word	0x0801668c

0800b244 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800b244:	b590      	push	{r4, r7, lr}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
    print("\n");
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	332c      	adds	r3, #44	; 0x2c
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4910      	ldr	r1, [pc, #64]	; (800b298 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	4798      	blx	r3
    print("\t");
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	332c      	adds	r3, #44	; 0x2c
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	490d      	ldr	r1, [pc, #52]	; (800b29c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	4798      	blx	r3
    print(reason.asCharString());
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	332c      	adds	r3, #44	; 0x2c
 800b270:	681c      	ldr	r4, [r3, #0]
 800b272:	6838      	ldr	r0, [r7, #0]
 800b274:	f7fc fb8e 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800b278:	4603      	mov	r3, r0
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	47a0      	blx	r4
    print("\n\n");
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	332c      	adds	r3, #44	; 0x2c
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4905      	ldr	r1, [pc, #20]	; (800b2a0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	4798      	blx	r3
}
 800b28e:	bf00      	nop
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	bd90      	pop	{r4, r7, pc}
 800b296:	bf00      	nop
 800b298:	08016544 	.word	0x08016544
 800b29c:	0801669c 	.word	0x0801669c
 800b2a0:	08016674 	.word	0x08016674

0800b2a4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800b2a4:	b590      	push	{r4, r7, lr}
 800b2a6:	b089      	sub	sp, #36	; 0x24
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800b2b0:	f7ff fbf0 	bl	800aa94 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	bf0c      	ite	eq
 800b2ba:	2301      	moveq	r3, #1
 800b2bc:	2300      	movne	r3, #0
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d015      	beq.n	800b2f0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3354      	adds	r3, #84	; 0x54
 800b2ca:	681c      	ldr	r4, [r3, #0]
 800b2cc:	f107 0310 	add.w	r3, r7, #16
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fc f827 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
 800b2d8:	f107 0310 	add.w	r3, r7, #16
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	47a0      	blx	r4
 800b2e4:	f107 0310 	add.w	r3, r7, #16
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fc fb80 	bl	80079ee <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800b2ee:	e014      	b.n	800b31a <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3350      	adds	r3, #80	; 0x50
 800b2f6:	681c      	ldr	r4, [r3, #0]
 800b2f8:	f107 0318 	add.w	r3, r7, #24
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fc f811 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
 800b304:	f107 0318 	add.w	r3, r7, #24
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	4619      	mov	r1, r3
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	47a0      	blx	r4
 800b310:	f107 0318 	add.w	r3, r7, #24
 800b314:	4618      	mov	r0, r3
 800b316:	f7fc fb6a 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800b31a:	bf00      	nop
 800b31c:	3724      	adds	r7, #36	; 0x24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd90      	pop	{r4, r7, pc}
	...

0800b324 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
    print("\n");
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	332c      	adds	r3, #44	; 0x2c
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4916      	ldr	r1, [pc, #88]	; (800b394 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	4798      	blx	r3
    print(file.asCharString());
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	332c      	adds	r3, #44	; 0x2c
 800b344:	681c      	ldr	r4, [r3, #0]
 800b346:	68b8      	ldr	r0, [r7, #8]
 800b348:	f7fc fb24 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800b34c:	4603      	mov	r3, r0
 800b34e:	4619      	mov	r1, r3
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	47a0      	blx	r4
    print(":");
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	332c      	adds	r3, #44	; 0x2c
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	490e      	ldr	r1, [pc, #56]	; (800b398 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	4798      	blx	r3
    print(lineNumber);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3334      	adds	r3, #52	; 0x34
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6879      	ldr	r1, [r7, #4]
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	4798      	blx	r3
    print(":");
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	332c      	adds	r3, #44	; 0x2c
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4907      	ldr	r1, [pc, #28]	; (800b398 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	4798      	blx	r3
    print(" error:");
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	332c      	adds	r3, #44	; 0x2c
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4905      	ldr	r1, [pc, #20]	; (800b39c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	4798      	blx	r3
}
 800b38c:	bf00      	nop
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	bd90      	pop	{r4, r7, pc}
 800b394:	08016544 	.word	0x08016544
 800b398:	080166a0 	.word	0x080166a0
 800b39c:	080166a4 	.word	0x080166a4

0800b3a0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800b3a0:	b590      	push	{r4, r7, lr}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
    print("\n");
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	332c      	adds	r3, #44	; 0x2c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4916      	ldr	r1, [pc, #88]	; (800b410 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	4798      	blx	r3
    print(file.asCharString());
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	332c      	adds	r3, #44	; 0x2c
 800b3c0:	681c      	ldr	r4, [r3, #0]
 800b3c2:	68b8      	ldr	r0, [r7, #8]
 800b3c4:	f7fc fae6 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	47a0      	blx	r4
    print("(");
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	332c      	adds	r3, #44	; 0x2c
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	490e      	ldr	r1, [pc, #56]	; (800b414 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	4798      	blx	r3
    print(lineNumber);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3334      	adds	r3, #52	; 0x34
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	4798      	blx	r3
    print("):");
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	332c      	adds	r3, #44	; 0x2c
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4908      	ldr	r1, [pc, #32]	; (800b418 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	4798      	blx	r3
    print(" error:");
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	332c      	adds	r3, #44	; 0x2c
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4906      	ldr	r1, [pc, #24]	; (800b41c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	4798      	blx	r3
}
 800b408:	bf00      	nop
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd90      	pop	{r4, r7, pc}
 800b410:	08016544 	.word	0x08016544
 800b414:	080166ac 	.word	0x080166ac
 800b418:	080166b0 	.word	0x080166b0
 800b41c:	080166a4 	.word	0x080166a4

0800b420 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	7a1b      	ldrb	r3, [r3, #8]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d106      	bne.n	800b440 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3328      	adds	r3, #40	; 0x28
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	4798      	blx	r3
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
    while (*s) {
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d009      	beq.n	800b46e <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800b45a:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	7812      	ldrb	r2, [r2, #0]
 800b462:	4610      	mov	r0, r2
 800b464:	4798      	blx	r3
        s++;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	3301      	adds	r3, #1
 800b46a:	603b      	str	r3, [r7, #0]
    while (*s) {
 800b46c:	e7f1      	b.n	800b452 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	334c      	adds	r3, #76	; 0x4c
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	4798      	blx	r3
}
 800b47a:	bf00      	nop
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	200000bc 	.word	0x200000bc

0800b488 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800b490:	4b03      	ldr	r3, [pc, #12]	; (800b4a0 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4798      	blx	r3
}
 800b496:	bf00      	nop
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	200000c0 	.word	0x200000c0

0800b4a4 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff fb00 	bl	800aab4 <_ZN10TestOutputC1Ev>
 800b4b4:	4a06      	ldr	r2, [pc, #24]	; (800b4d0 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	611a      	str	r2, [r3, #16]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	615a      	str	r2, [r3, #20]
{
}
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	0801817c 	.word	0x0801817c

0800b4d4 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	4a0e      	ldr	r2, [pc, #56]	; (800b518 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <_ZN19CompositeTestOutputD1Ev+0x20>
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	3204      	adds	r2, #4
 800b4ee:	6812      	ldr	r2, [r2, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	4790      	blx	r2
  delete outputTwo_;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d004      	beq.n	800b506 <_ZN19CompositeTestOutputD1Ev+0x32>
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	3204      	adds	r2, #4
 800b500:	6812      	ldr	r2, [r2, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff faf1 	bl	800aaf0 <_ZN10TestOutputD1Ev>
}
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	0801817c 	.word	0x0801817c

0800b51c <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
}
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7ff ffd5 	bl	800b4d4 <_ZN19CompositeTestOutputD1Ev>
 800b52a:	2118      	movs	r1, #24
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7fa ffd1 	bl	80064d4 <_ZdlPvj>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4618      	mov	r0, r3
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d004      	beq.n	800b558 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	3204      	adds	r2, #4
 800b552:	6812      	ldr	r2, [r2, #0]
 800b554:	4618      	mov	r0, r3
 800b556:	4790      	blx	r2
  outputOne_ = output;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	611a      	str	r2, [r3, #16]
}
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d004      	beq.n	800b582 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	3204      	adds	r2, #4
 800b57c:	6812      	ldr	r2, [r2, #0]
 800b57e:	4618      	mov	r0, r3
 800b580:	4790      	blx	r2
  outputTwo_ = output;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	615a      	str	r2, [r3, #20]
}
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	691a      	ldr	r2, [r3, #16]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d008      	beq.n	800b5cc <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	695a      	ldr	r2, [r3, #20]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	695b      	ldr	r3, [r3, #20]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	4798      	blx	r3
}
 800b5cc:	bf00      	nop
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d009      	beq.n	800b5fa <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	691a      	ldr	r2, [r3, #16]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	330c      	adds	r3, #12
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d009      	beq.n	800b616 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	695a      	ldr	r2, [r3, #20]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	330c      	adds	r3, #12
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	4610      	mov	r0, r2
 800b614:	4798      	blx	r3
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b082      	sub	sp, #8
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d009      	beq.n	800b644 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	3310      	adds	r3, #16
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	4610      	mov	r0, r2
 800b642:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	695b      	ldr	r3, [r3, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d009      	beq.n	800b660 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	695a      	ldr	r2, [r3, #20]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3310      	adds	r3, #16
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	4610      	mov	r0, r2
 800b65e:	4798      	blx	r3
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d009      	beq.n	800b68e <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3314      	adds	r3, #20
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	4610      	mov	r0, r2
 800b68c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d009      	beq.n	800b6aa <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	695a      	ldr	r2, [r3, #20]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3314      	adds	r3, #20
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	4798      	blx	r3
}
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d009      	beq.n	800b6d8 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	691a      	ldr	r2, [r3, #16]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3318      	adds	r3, #24
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d009      	beq.n	800b6f4 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	695a      	ldr	r2, [r3, #20]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3318      	adds	r3, #24
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d009      	beq.n	800b722 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	691a      	ldr	r2, [r3, #16]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	331c      	adds	r3, #28
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	4610      	mov	r0, r2
 800b720:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	695a      	ldr	r2, [r3, #20]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	331c      	adds	r3, #28
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	4610      	mov	r0, r2
 800b73c:	4798      	blx	r3
}
 800b73e:	bf00      	nop
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b082      	sub	sp, #8
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	460b      	mov	r3, r1
 800b750:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d009      	beq.n	800b76e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	691a      	ldr	r2, [r3, #16]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3320      	adds	r3, #32
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	78f9      	ldrb	r1, [r7, #3]
 800b76a:	4610      	mov	r0, r2
 800b76c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d009      	beq.n	800b78a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	695a      	ldr	r2, [r3, #20]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3320      	adds	r3, #32
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	78f9      	ldrb	r1, [r7, #3]
 800b786:	4610      	mov	r0, r2
 800b788:	4798      	blx	r3
}
 800b78a:	bf00      	nop
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b082      	sub	sp, #8
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d008      	beq.n	800b7b4 <_ZN19CompositeTestOutput5colorEv+0x22>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	691a      	ldr	r2, [r3, #16]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3324      	adds	r3, #36	; 0x24
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d008      	beq.n	800b7ce <_ZN19CompositeTestOutput5colorEv+0x3c>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	695a      	ldr	r2, [r3, #20]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3324      	adds	r3, #36	; 0x24
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4798      	blx	r3
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b082      	sub	sp, #8
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d009      	beq.n	800b7fc <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	691a      	ldr	r2, [r3, #16]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3328      	adds	r3, #40	; 0x28
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d009      	beq.n	800b818 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	695a      	ldr	r2, [r3, #20]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	695b      	ldr	r3, [r3, #20]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3328      	adds	r3, #40	; 0x28
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	4610      	mov	r0, r2
 800b816:	4798      	blx	r3
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d009      	beq.n	800b846 <_ZN19CompositeTestOutput5printEPKc+0x26>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	691a      	ldr	r2, [r3, #16]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	332c      	adds	r3, #44	; 0x2c
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	4610      	mov	r0, r2
 800b844:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d009      	beq.n	800b862 <_ZN19CompositeTestOutput5printEPKc+0x42>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	695a      	ldr	r2, [r3, #20]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	332c      	adds	r3, #44	; 0x2c
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6839      	ldr	r1, [r7, #0]
 800b85e:	4610      	mov	r0, r2
 800b860:	4798      	blx	r3
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d009      	beq.n	800b890 <_ZN19CompositeTestOutput5printEl+0x26>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	691a      	ldr	r2, [r3, #16]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3330      	adds	r3, #48	; 0x30
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	4610      	mov	r0, r2
 800b88e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d009      	beq.n	800b8ac <_ZN19CompositeTestOutput5printEl+0x42>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	695a      	ldr	r2, [r3, #20]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	695b      	ldr	r3, [r3, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3330      	adds	r3, #48	; 0x30
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	4798      	blx	r3
}
 800b8ac:	bf00      	nop
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d009      	beq.n	800b8da <_ZN19CompositeTestOutput5printEj+0x26>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	691a      	ldr	r2, [r3, #16]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3334      	adds	r3, #52	; 0x34
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d009      	beq.n	800b8f6 <_ZN19CompositeTestOutput5printEj+0x42>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	695a      	ldr	r2, [r3, #20]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	3334      	adds	r3, #52	; 0x34
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	4798      	blx	r3
}
 800b8f6:	bf00      	nop
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	691a      	ldr	r2, [r3, #16]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	3338      	adds	r3, #56	; 0x38
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	ed97 0b00 	vldr	d0, [r7]
 800b924:	4610      	mov	r0, r2
 800b926:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	695a      	ldr	r2, [r3, #20]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3338      	adds	r3, #56	; 0x38
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	ed97 0b00 	vldr	d0, [r7]
 800b942:	4610      	mov	r0, r2
 800b944:	4798      	blx	r3
}
 800b946:	bf00      	nop
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b082      	sub	sp, #8
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d009      	beq.n	800b974 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	691a      	ldr	r2, [r3, #16]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	333c      	adds	r3, #60	; 0x3c
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	4610      	mov	r0, r2
 800b972:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	695b      	ldr	r3, [r3, #20]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d009      	beq.n	800b990 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	695a      	ldr	r2, [r3, #20]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	333c      	adds	r3, #60	; 0x3c
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	4610      	mov	r0, r2
 800b98e:	4798      	blx	r3
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d009      	beq.n	800b9be <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	691a      	ldr	r2, [r3, #16]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3344      	adds	r3, #68	; 0x44
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d009      	beq.n	800b9da <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	695a      	ldr	r2, [r3, #20]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	695b      	ldr	r3, [r3, #20]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3344      	adds	r3, #68	; 0x44
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	4798      	blx	r3
}
 800b9da:	bf00      	nop
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d008      	beq.n	800ba04 <_ZN19CompositeTestOutput5flushEv+0x22>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	691a      	ldr	r2, [r3, #16]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	334c      	adds	r3, #76	; 0x4c
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4610      	mov	r0, r2
 800ba02:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d008      	beq.n	800ba1e <_ZN19CompositeTestOutput5flushEv+0x3c>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	695a      	ldr	r2, [r3, #20]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	695b      	ldr	r3, [r3, #20]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	334c      	adds	r3, #76	; 0x4c
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	4798      	blx	r3
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800ba26:	b480      	push	{r7}
 800ba28:	b085      	sub	sp, #20
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	607a      	str	r2, [r7, #4]
    }
 800ba32:	bf00      	nop
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800ba3e:	b480      	push	{r7}
 800ba40:	b085      	sub	sp, #20
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	60f8      	str	r0, [r7, #12]
 800ba46:	60b9      	str	r1, [r7, #8]
 800ba48:	607a      	str	r2, [r7, #4]
    }
 800ba4a:	bf00      	nop
 800ba4c:	3714      	adds	r7, #20
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr
	...

0800ba58 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800ba62:	4a0b      	ldr	r2, [pc, #44]	; (800ba90 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	f000 f9ce 	bl	800be08 <_ZN14NullTestPlugin8instanceEv>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	605a      	str	r2, [r3, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	3308      	adds	r3, #8
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fb fc54 	bl	8007326 <_ZN12SimpleStringC1ERKS_>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	741a      	strb	r2, [r3, #16]
{
}
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	08018338 	.word	0x08018338

0800ba94 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800ba9e:	4a0a      	ldr	r2, [pc, #40]	; (800bac8 <_ZN10TestPluginC1EPS_+0x34>)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	683a      	ldr	r2, [r7, #0]
 800baa8:	605a      	str	r2, [r3, #4]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	3308      	adds	r3, #8
 800baae:	4907      	ldr	r1, [pc, #28]	; (800bacc <_ZN10TestPluginC1EPS_+0x38>)
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fb fbe4 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2201      	movs	r2, #1
 800baba:	741a      	strb	r2, [r3, #16]
{
}
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4618      	mov	r0, r3
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	08018338 	.word	0x08018338
 800bacc:	080166b4 	.word	0x080166b4

0800bad0 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	4a06      	ldr	r2, [pc, #24]	; (800baf4 <_ZN10TestPluginD1Ev+0x24>)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3308      	adds	r3, #8
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fb ff83 	bl	80079ee <_ZN12SimpleStringD1Ev>
{
}
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	08018338 	.word	0x08018338

0800baf8 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
}
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff ffe5 	bl	800bad0 <_ZN10TestPluginD1Ev>
 800bb06:	2114      	movs	r1, #20
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7fa fce3 	bl	80064d4 <_ZdlPvj>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4618      	mov	r0, r3
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	683a      	ldr	r2, [r7, #0]
 800bb26:	605a      	str	r2, [r3, #4]
    return this;
 800bb28:	687b      	ldr	r3, [r7, #4]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	370c      	adds	r7, #12
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b084      	sub	sp, #16
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	60f8      	str	r0, [r7, #12]
 800bb3e:	60b9      	str	r1, [r7, #8]
 800bb40:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	7c1b      	ldrb	r3, [r3, #16]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d007      	beq.n	800bb5a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	3308      	adds	r3, #8
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	68b9      	ldr	r1, [r7, #8]
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6858      	ldr	r0, [r3, #4]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3314      	adds	r3, #20
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	68b9      	ldr	r1, [r7, #8]
 800bb6c:	4798      	blx	r3
}
 800bb6e:	bf00      	nop
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	60b9      	str	r1, [r7, #8]
 800bb80:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6858      	ldr	r0, [r3, #4]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3318      	adds	r3, #24
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	7c1b      	ldrb	r3, [r3, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d007      	beq.n	800bbae <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	330c      	adds	r3, #12
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	4798      	blx	r3
}
 800bbae:	bf00      	nop
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800bbb6:	b590      	push	{r4, r7, lr}
 800bbb8:	b085      	sub	sp, #20
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	60b9      	str	r1, [r7, #8]
 800bbc0:	607a      	str	r2, [r7, #4]
 800bbc2:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	331c      	adds	r3, #28
 800bbca:	681c      	ldr	r4, [r3, #0]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	68b9      	ldr	r1, [r7, #8]
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	47a0      	blx	r4
 800bbd6:	4603      	mov	r3, r0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd90      	pop	{r4, r7, pc}

0800bbe0 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800bbe0:	b590      	push	{r4, r7, lr}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3310      	adds	r3, #16
 800bbf4:	681c      	ldr	r4, [r3, #0]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	47a0      	blx	r4
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e011      	b.n	800bc2e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00c      	beq.n	800bc2c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6858      	ldr	r0, [r3, #4]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	331c      	adds	r3, #28
 800bc1e:	681c      	ldr	r4, [r3, #0]
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	68b9      	ldr	r1, [r7, #8]
 800bc26:	47a0      	blx	r4
 800bc28:	4603      	mov	r3, r0
 800bc2a:	e000      	b.n	800bc2e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd90      	pop	{r4, r7, pc}

0800bc36 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800bc36:	b480      	push	{r7}
 800bc38:	b083      	sub	sp, #12
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
    return name_;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	3308      	adds	r3, #8
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b082      	sub	sp, #8
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	3308      	adds	r3, #8
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6838      	ldr	r0, [r7, #0]
 800bc60:	f7fb fed1 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	e00d      	b.n	800bc8a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d007      	beq.n	800bc86 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff ffe6 	bl	800bc4e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800bc82:	4603      	mov	r3, r0
 800bc84:	e001      	b.n	800bc8a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	685b      	ldr	r3, [r3, #4]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800bc92:	b480      	push	{r7}
 800bc94:	b083      	sub	sp, #12
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
    return next_;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00e      	beq.n	800bcde <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7ff ffb6 	bl	800bc36 <_ZN10TestPlugin7getNameEv>
 800bcca:	4603      	mov	r3, r0
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fb fe99 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e000      	b.n	800bce0 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800bcde:	2300      	movs	r3, #0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b083      	sub	sp, #12
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	741a      	strb	r2, [r3, #16]
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	741a      	strb	r2, [r3, #16]
}
 800bd26:	bf00      	nop
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
    return enabled_;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7c1b      	ldrb	r3, [r3, #16]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
	...

0800bd4c <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7ff fe7c 	bl	800ba58 <_ZN10TestPluginC1ERK12SimpleString>
 800bd60:	4a05      	ldr	r2, [pc, #20]	; (800bd78 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800bd66:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
}
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	080182f4 	.word	0x080182f4
 800bd7c:	200005b8 	.word	0x200005b8

0800bd80 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b087      	sub	sp, #28
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800bd8c:	4b0e      	ldr	r3, [pc, #56]	; (800bdc8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	db0d      	blt.n	800bdb6 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800bd9a:	4a0c      	ldr	r2, [pc, #48]	; (800bdcc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bda2:	490a      	ldr	r1, [pc, #40]	; (800bdcc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	440b      	add	r3, r1
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	617b      	str	r3, [r7, #20]
 800bdb4:	e7ee      	b.n	800bd94 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800bdb6:	4b04      	ldr	r3, [pc, #16]	; (800bdc8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	601a      	str	r2, [r3, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	371c      	adds	r7, #28
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	200005b8 	.word	0x200005b8
 800bdcc:	200005bc 	.word	0x200005bc

0800bdd0 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2100      	movs	r1, #0
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7ff fe59 	bl	800ba94 <_ZN10TestPluginC1EPS_>
 800bde2:	4a04      	ldr	r2, [pc, #16]	; (800bdf4 <_ZN14NullTestPluginC1Ev+0x24>)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	601a      	str	r2, [r3, #0]
{
}
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	080182b0 	.word	0x080182b0

0800bdf8 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	4801      	ldr	r0, [pc, #4]	; (800be04 <__tcf_0+0xc>)
 800bdfe:	f000 f849 	bl	800be94 <_ZN14NullTestPluginD1Ev>
 800be02:	bd80      	pop	{r7, pc}
 800be04:	200006bc 	.word	0x200006bc

0800be08 <_ZN14NullTestPlugin8instanceEv>:
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800be0c:	4b12      	ldr	r3, [pc, #72]	; (800be58 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	f3bf 8f5b 	dmb	ish
 800be14:	b2db      	uxtb	r3, r3
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	bf0c      	ite	eq
 800be1e:	2301      	moveq	r3, #1
 800be20:	2300      	movne	r3, #0
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b00      	cmp	r3, #0
 800be26:	d013      	beq.n	800be50 <_ZN14NullTestPlugin8instanceEv+0x48>
 800be28:	480b      	ldr	r0, [pc, #44]	; (800be58 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800be2a:	f005 febf 	bl	8011bac <__cxa_guard_acquire>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	bf14      	ite	ne
 800be34:	2301      	movne	r3, #1
 800be36:	2300      	moveq	r3, #0
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d008      	beq.n	800be50 <_ZN14NullTestPlugin8instanceEv+0x48>
 800be3e:	4807      	ldr	r0, [pc, #28]	; (800be5c <_ZN14NullTestPlugin8instanceEv+0x54>)
 800be40:	f7ff ffc6 	bl	800bdd0 <_ZN14NullTestPluginC1Ev>
 800be44:	4804      	ldr	r0, [pc, #16]	; (800be58 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800be46:	f005 febd 	bl	8011bc4 <__cxa_guard_release>
 800be4a:	4805      	ldr	r0, [pc, #20]	; (800be60 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800be4c:	f005 fee1 	bl	8011c12 <atexit>
    return &_instance;
 800be50:	4b02      	ldr	r3, [pc, #8]	; (800be5c <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800be52:	4618      	mov	r0, r3
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	200006d0 	.word	0x200006d0
 800be5c:	200006bc 	.word	0x200006bc
 800be60:	0800bdf9 	.word	0x0800bdf9

0800be64 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
}
 800be70:	bf00      	nop
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
}
 800be88:	bf00      	nop
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	4a05      	ldr	r2, [pc, #20]	; (800beb4 <_ZN14NullTestPluginD1Ev+0x20>)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fe13 	bl	800bad0 <_ZN10TestPluginD1Ev>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	080182b0 	.word	0x080182b0

0800beb8 <_ZN14NullTestPluginD0Ev>:
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff ffe7 	bl	800be94 <_ZN14NullTestPluginD1Ev>
 800bec6:	2114      	movs	r1, #20
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7fa fb03 	bl	80064d4 <_ZdlPvj>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4618      	mov	r0, r3
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800bee0:	4a0f      	ldr	r2, [pc, #60]	; (800bf20 <_ZN12TestRegistryC1Ev+0x48>)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	601a      	str	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	605a      	str	r2, [r3, #4]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	609a      	str	r2, [r3, #8]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	60da      	str	r2, [r3, #12]
 800bef8:	f7ff ff86 	bl	800be08 <_ZN14NullTestPlugin8instanceEv>
 800befc:	4602      	mov	r2, r0
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	611a      	str	r2, [r3, #16]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	751a      	strb	r2, [r3, #20]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	619a      	str	r2, [r3, #24]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	771a      	strb	r2, [r3, #28]
{
}
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	0801837c 	.word	0x0801837c

0800bf24 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	4a04      	ldr	r2, [pc, #16]	; (800bf40 <_ZN12TestRegistryD1Ev+0x1c>)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	601a      	str	r2, [r3, #0]
{
}
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4618      	mov	r0, r3
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	0801837c 	.word	0x0801837c

0800bf44 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
}
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff ffe9 	bl	800bf24 <_ZN12TestRegistryD1Ev>
 800bf52:	2120      	movs	r1, #32
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7fa fabd 	bl	80064d4 <_ZdlPvj>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3308      	adds	r3, #8
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	6852      	ldr	r2, [r2, #4]
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	6838      	ldr	r0, [r7, #0]
 800bf7e:	4798      	blx	r3
 800bf80:	4602      	mov	r2, r0
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	605a      	str	r2, [r3, #4]
}
 800bf86:	bf00      	nop
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6838      	ldr	r0, [r7, #0]
 800bfa6:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	60bb      	str	r3, [r7, #8]
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d05c      	beq.n	800c06e <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	7d1b      	ldrb	r3, [r3, #20]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d005      	beq.n	800bfc8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3380      	adds	r3, #128	; 0x80
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68b8      	ldr	r0, [r7, #8]
 800bfc6:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	7f1b      	ldrb	r3, [r3, #28]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d005      	beq.n	800bfdc <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3384      	adds	r3, #132	; 0x84
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68b8      	ldr	r0, [r7, #8]
 800bfda:	4798      	blx	r3

        if (groupStart) {
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d008      	beq.n	800bff4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3310      	adds	r3, #16
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68b9      	ldr	r1, [r7, #8]
 800bfec:	6838      	ldr	r0, [r7, #0]
 800bfee:	4798      	blx	r3
            groupStart = false;
 800bff0:	2300      	movs	r3, #0
 800bff2:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	3320      	adds	r3, #32
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6838      	ldr	r0, [r7, #0]
 800bffe:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	68b9      	ldr	r1, [r7, #8]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fb79 	bl	800c6fc <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d016      	beq.n	800c03e <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3318      	adds	r3, #24
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68b9      	ldr	r1, [r7, #8]
 800c01a:	6838      	ldr	r0, [r7, #0]
 800c01c:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3390      	adds	r3, #144	; 0x90
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	6911      	ldr	r1, [r2, #16]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	68b8      	ldr	r0, [r7, #8]
 800c02e:	4798      	blx	r3
            result.currentTestEnded(test);
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	331c      	adds	r3, #28
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68b9      	ldr	r1, [r7, #8]
 800c03a:	6838      	ldr	r0, [r7, #0]
 800c03c:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fa5b 	bl	800c4fc <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d008      	beq.n	800c05e <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800c04c:	2301      	movs	r3, #1
 800c04e:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3314      	adds	r3, #20
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68b9      	ldr	r1, [r7, #8]
 800c05a:	6838      	ldr	r0, [r7, #0]
 800c05c:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	330c      	adds	r3, #12
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68b8      	ldr	r0, [r7, #8]
 800c068:	4798      	blx	r3
 800c06a:	60b8      	str	r0, [r7, #8]
 800c06c:	e79f      	b.n	800bfae <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	330c      	adds	r3, #12
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6838      	ldr	r0, [r7, #0]
 800c078:	4798      	blx	r3
    currentRepetition_++;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	619a      	str	r2, [r3, #24]
}
 800c084:	bf00      	nop
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800c08c:	b590      	push	{r4, r7, lr}
 800c08e:	b08f      	sub	sp, #60	; 0x3c
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800c096:	f107 0314 	add.w	r3, r7, #20
 800c09a:	4953      	ldr	r1, [pc, #332]	; (800c1e8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fb f8ee 	bl	800727e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d04d      	beq.n	800c14a <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800c0ae:	f107 030c 	add.w	r3, r7, #12
 800c0b2:	494d      	ldr	r1, [pc, #308]	; (800c1e8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fb f8e2 	bl	800727e <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800c0ba:	f107 030c 	add.w	r3, r7, #12
 800c0be:	494b      	ldr	r1, [pc, #300]	; (800c1ec <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fb fd23 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800c0c6:	f107 031c 	add.w	r3, r7, #28
 800c0ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f001 f9d2 	bl	800d476 <_ZNK10UtestShell8getGroupEv>
 800c0d2:	f107 021c 	add.w	r2, r7, #28
 800c0d6:	f107 030c 	add.w	r3, r7, #12
 800c0da:	4611      	mov	r1, r2
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fb fd03 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800c0e2:	f107 031c 	add.w	r3, r7, #28
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fb fc81 	bl	80079ee <_ZN12SimpleStringD1Ev>
        gname += "#";
 800c0ec:	f107 030c 	add.w	r3, r7, #12
 800c0f0:	493e      	ldr	r1, [pc, #248]	; (800c1ec <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fb fd0a 	bl	8007b0c <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800c0f8:	f107 020c 	add.w	r2, r7, #12
 800c0fc:	f107 0314 	add.w	r3, r7, #20
 800c100:	4611      	mov	r1, r2
 800c102:	4618      	mov	r0, r3
 800c104:	f7fb f939 	bl	800737a <_ZNK12SimpleString8containsERKS_>
 800c108:	4603      	mov	r3, r0
 800c10a:	f083 0301 	eor.w	r3, r3, #1
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00d      	beq.n	800c130 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800c114:	f107 020c 	add.w	r2, r7, #12
 800c118:	f107 0314 	add.w	r3, r7, #20
 800c11c:	4611      	mov	r1, r2
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fb fce2 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800c124:	f107 0314 	add.w	r3, r7, #20
 800c128:	4931      	ldr	r1, [pc, #196]	; (800c1f0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fb fcee 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800c130:	f107 030c 	add.w	r3, r7, #12
 800c134:	4618      	mov	r0, r3
 800c136:	f7fb fc5a 	bl	80079ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	330c      	adds	r3, #12
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c144:	4798      	blx	r3
 800c146:	6378      	str	r0, [r7, #52]	; 0x34
 800c148:	e7ae      	b.n	800c0a8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800c14a:	f107 0314 	add.w	r3, r7, #20
 800c14e:	4a26      	ldr	r2, [pc, #152]	; (800c1e8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800c150:	4926      	ldr	r1, [pc, #152]	; (800c1ec <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800c152:	4618      	mov	r0, r3
 800c154:	f7fb faa8 	bl	80076a8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800c158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c15c:	4924      	ldr	r1, [pc, #144]	; (800c1f0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fb f88d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800c164:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c168:	f107 0314 	add.w	r3, r7, #20
 800c16c:	4611      	mov	r1, r2
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fb f982 	bl	8007478 <_ZNK12SimpleString8endsWithERKS_>
 800c174:	4603      	mov	r3, r0
 800c176:	461c      	mov	r4, r3
 800c178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fb fc36 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800c182:	2c00      	cmp	r4, #0
 800c184:	d01a      	beq.n	800c1bc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800c186:	f107 0314 	add.w	r3, r7, #20
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fb fc0e 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800c190:	4603      	mov	r3, r0
 800c192:	3b01      	subs	r3, #1
 800c194:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800c198:	f107 0114 	add.w	r1, r7, #20
 800c19c:	2200      	movs	r2, #0
 800c19e:	f7fb fd2f 	bl	8007c00 <_ZNK12SimpleString9subStringEjj>
 800c1a2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c1a6:	f107 0314 	add.w	r3, r7, #20
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fb f8d2 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 800c1b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fb fc19 	bl	80079ee <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	3338      	adds	r3, #56	; 0x38
 800c1c2:	681c      	ldr	r4, [r3, #0]
 800c1c4:	f107 0314 	add.w	r3, r7, #20
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fb fbe3 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6838      	ldr	r0, [r7, #0]
 800c1d4:	47a0      	blx	r4
    SimpleString groupList;
 800c1d6:	f107 0314 	add.w	r3, r7, #20
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fb fc07 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800c1e0:	bf00      	nop
 800c1e2:	373c      	adds	r7, #60	; 0x3c
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd90      	pop	{r4, r7, pc}
 800c1e8:	08016704 	.word	0x08016704
 800c1ec:	08016708 	.word	0x08016708
 800c1f0:	0801670c 	.word	0x0801670c

0800c1f4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800c1f4:	b590      	push	{r4, r7, lr}
 800c1f6:	b091      	sub	sp, #68	; 0x44
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800c1fe:	f107 0314 	add.w	r3, r7, #20
 800c202:	4964      	ldr	r1, [pc, #400]	; (800c394 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c204:	4618      	mov	r0, r3
 800c206:	f7fb f83a 	bl	800727e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d06e      	beq.n	800c2f4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fa6e 	bl	800c6fc <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d05e      	beq.n	800c2e4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800c226:	f107 030c 	add.w	r3, r7, #12
 800c22a:	495a      	ldr	r1, [pc, #360]	; (800c394 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fb f826 	bl	800727e <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800c232:	f107 030c 	add.w	r3, r7, #12
 800c236:	4958      	ldr	r1, [pc, #352]	; (800c398 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fb fc67 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800c23e:	f107 031c 	add.w	r3, r7, #28
 800c242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c244:	4618      	mov	r0, r3
 800c246:	f001 f916 	bl	800d476 <_ZNK10UtestShell8getGroupEv>
 800c24a:	f107 021c 	add.w	r2, r7, #28
 800c24e:	f107 030c 	add.w	r3, r7, #12
 800c252:	4611      	mov	r1, r2
 800c254:	4618      	mov	r0, r3
 800c256:	f7fb fc47 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800c25a:	f107 031c 	add.w	r3, r7, #28
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fb fbc5 	bl	80079ee <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800c264:	f107 030c 	add.w	r3, r7, #12
 800c268:	494c      	ldr	r1, [pc, #304]	; (800c39c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fb fc4e 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800c270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c274:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c276:	4618      	mov	r0, r3
 800c278:	f001 f8ee 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 800c27c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c280:	f107 030c 	add.w	r3, r7, #12
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7fb fc2e 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800c28c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c290:	4618      	mov	r0, r3
 800c292:	f7fb fbac 	bl	80079ee <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800c296:	f107 030c 	add.w	r3, r7, #12
 800c29a:	493f      	ldr	r1, [pc, #252]	; (800c398 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fb fc35 	bl	8007b0c <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800c2a2:	f107 020c 	add.w	r2, r7, #12
 800c2a6:	f107 0314 	add.w	r3, r7, #20
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fb f864 	bl	800737a <_ZNK12SimpleString8containsERKS_>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	f083 0301 	eor.w	r3, r3, #1
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00d      	beq.n	800c2da <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800c2be:	f107 020c 	add.w	r2, r7, #12
 800c2c2:	f107 0314 	add.w	r3, r7, #20
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fb fc0d 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800c2ce:	f107 0314 	add.w	r3, r7, #20
 800c2d2:	4933      	ldr	r1, [pc, #204]	; (800c3a0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fb fc19 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800c2da:	f107 030c 	add.w	r3, r7, #12
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fb fb85 	bl	80079ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	330c      	adds	r3, #12
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2ee:	4798      	blx	r3
 800c2f0:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c2f2:	e78d      	b.n	800c210 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	4a26      	ldr	r2, [pc, #152]	; (800c394 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800c2fa:	4927      	ldr	r1, [pc, #156]	; (800c398 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fb f9d3 	bl	80076a8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800c302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c306:	4926      	ldr	r1, [pc, #152]	; (800c3a0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fa ffb8 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800c30e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c312:	f107 0314 	add.w	r3, r7, #20
 800c316:	4611      	mov	r1, r2
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fb f8ad 	bl	8007478 <_ZNK12SimpleString8endsWithERKS_>
 800c31e:	4603      	mov	r3, r0
 800c320:	461c      	mov	r4, r3
 800c322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c326:	4618      	mov	r0, r3
 800c328:	f7fb fb61 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800c32c:	2c00      	cmp	r4, #0
 800c32e:	d01a      	beq.n	800c366 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800c330:	f107 0314 	add.w	r3, r7, #20
 800c334:	4618      	mov	r0, r3
 800c336:	f7fb fb39 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800c33a:	4603      	mov	r3, r0
 800c33c:	3b01      	subs	r3, #1
 800c33e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c342:	f107 0114 	add.w	r1, r7, #20
 800c346:	2200      	movs	r2, #0
 800c348:	f7fb fc5a 	bl	8007c00 <_ZNK12SimpleString9subStringEjj>
 800c34c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c350:	f107 0314 	add.w	r3, r7, #20
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f7fa fffd 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 800c35c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c360:	4618      	mov	r0, r3
 800c362:	f7fb fb44 	bl	80079ee <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3338      	adds	r3, #56	; 0x38
 800c36c:	681c      	ldr	r4, [r3, #0]
 800c36e:	f107 0314 	add.w	r3, r7, #20
 800c372:	4618      	mov	r0, r3
 800c374:	f7fb fb0e 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800c378:	4603      	mov	r3, r0
 800c37a:	4619      	mov	r1, r3
 800c37c:	6838      	ldr	r0, [r7, #0]
 800c37e:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800c380:	f107 0314 	add.w	r3, r7, #20
 800c384:	4618      	mov	r0, r3
 800c386:	f7fb fb32 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800c38a:	bf00      	nop
 800c38c:	3744      	adds	r7, #68	; 0x44
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd90      	pop	{r4, r7, pc}
 800c392:	bf00      	nop
 800c394:	08016704 	.word	0x08016704
 800c398:	08016708 	.word	0x08016708
 800c39c:	08016710 	.word	0x08016710
 800c3a0:	0801670c 	.word	0x0801670c

0800c3a4 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800c3a4:	b590      	push	{r4, r7, lr}
 800c3a6:	b091      	sub	sp, #68	; 0x44
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800c3ae:	f107 0314 	add.w	r3, r7, #20
 800c3b2:	494f      	ldr	r1, [pc, #316]	; (800c4f0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fa ff62 	bl	800727e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d07d      	beq.n	800c4c2 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	4949      	ldr	r1, [pc, #292]	; (800c4f0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fa ff56 	bl	800727e <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800c3d2:	f107 031c 	add.w	r3, r7, #28
 800c3d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f001 f84c 	bl	800d476 <_ZNK10UtestShell8getGroupEv>
 800c3de:	f107 021c 	add.w	r2, r7, #28
 800c3e2:	f107 030c 	add.w	r3, r7, #12
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fb fb7d 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800c3ee:	f107 031c 	add.w	r3, r7, #28
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fb fafb 	bl	80079ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800c3f8:	f107 030c 	add.w	r3, r7, #12
 800c3fc:	493d      	ldr	r1, [pc, #244]	; (800c4f4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fb fb84 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800c404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c408:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c40a:	4618      	mov	r0, r3
 800c40c:	f001 f824 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 800c410:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c414:	f107 030c 	add.w	r3, r7, #12
 800c418:	4611      	mov	r1, r2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fb fb64 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800c420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c424:	4618      	mov	r0, r3
 800c426:	f7fb fae2 	bl	80079ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800c42a:	f107 030c 	add.w	r3, r7, #12
 800c42e:	4931      	ldr	r1, [pc, #196]	; (800c4f4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800c430:	4618      	mov	r0, r3
 800c432:	f7fb fb6b 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800c436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c43a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 f8cb 	bl	800d5d8 <_ZNK10UtestShell7getFileEv>
 800c442:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c446:	f107 030c 	add.w	r3, r7, #12
 800c44a:	4611      	mov	r1, r2
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fb fb4b 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800c452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c456:	4618      	mov	r0, r3
 800c458:	f7fb fac9 	bl	80079ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800c45c:	f107 030c 	add.w	r3, r7, #12
 800c460:	4924      	ldr	r1, [pc, #144]	; (800c4f4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800c462:	4618      	mov	r0, r3
 800c464:	f7fb fb52 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800c468:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c46a:	f001 f8c4 	bl	800d5f6 <_ZNK10UtestShell13getLineNumberEv>
 800c46e:	4603      	mov	r3, r0
 800c470:	461a      	mov	r2, r3
 800c472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c476:	4920      	ldr	r1, [pc, #128]	; (800c4f8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fb ff45 	bl	8008308 <_Z16StringFromFormatPKcz>
 800c47e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c482:	f107 030c 	add.w	r3, r7, #12
 800c486:	4611      	mov	r1, r2
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fb fb2d 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800c48e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c492:	4618      	mov	r0, r3
 800c494:	f7fb faab 	bl	80079ee <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800c498:	f107 020c 	add.w	r2, r7, #12
 800c49c:	f107 0314 	add.w	r3, r7, #20
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fb fb20 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800c4a8:	f107 030c 	add.w	r3, r7, #12
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fb fa9e 	bl	80079ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800c4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	330c      	adds	r3, #12
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c4bc:	4798      	blx	r3
 800c4be:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c4c0:	e77e      	b.n	800c3c0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3338      	adds	r3, #56	; 0x38
 800c4c8:	681c      	ldr	r4, [r3, #0]
 800c4ca:	f107 0314 	add.w	r3, r7, #20
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fb fa60 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6838      	ldr	r0, [r7, #0]
 800c4da:	47a0      	blx	r4
    SimpleString testLocations;
 800c4dc:	f107 0314 	add.w	r3, r7, #20
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fb fa84 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800c4e6:	bf00      	nop
 800c4e8:	3744      	adds	r7, #68	; 0x44
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd90      	pop	{r4, r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	08016704 	.word	0x08016704
 800c4f4:	08016710 	.word	0x08016710
 800c4f8:	08016714 	.word	0x08016714

0800c4fc <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800c4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4fe:	b087      	sub	sp, #28
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800c506:	2400      	movs	r4, #0
 800c508:	2500      	movs	r5, #0
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d028      	beq.n	800c562 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	330c      	adds	r3, #12
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6838      	ldr	r0, [r7, #0]
 800c51a:	4798      	blx	r3
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d01f      	beq.n	800c562 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800c522:	f107 0308 	add.w	r3, r7, #8
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 ffa4 	bl	800d476 <_ZNK10UtestShell8getGroupEv>
 800c52e:	2401      	movs	r4, #1
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	330c      	adds	r3, #12
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6838      	ldr	r0, [r7, #0]
 800c53a:	4798      	blx	r3
 800c53c:	4602      	mov	r2, r0
 800c53e:	f107 0310 	add.w	r3, r7, #16
 800c542:	4611      	mov	r1, r2
 800c544:	4618      	mov	r0, r3
 800c546:	f000 ff96 	bl	800d476 <_ZNK10UtestShell8getGroupEv>
 800c54a:	2501      	movs	r5, #1
 800c54c:	f107 0210 	add.w	r2, r7, #16
 800c550:	f107 0308 	add.w	r3, r7, #8
 800c554:	4611      	mov	r1, r2
 800c556:	4618      	mov	r0, r3
 800c558:	f7fb fa9a 	bl	8007a90 <_ZneRK12SimpleStringS1_>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800c562:	2601      	movs	r6, #1
 800c564:	e000      	b.n	800c568 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800c566:	2600      	movs	r6, #0
 800c568:	2d00      	cmp	r5, #0
 800c56a:	d004      	beq.n	800c576 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800c56c:	f107 0310 	add.w	r3, r7, #16
 800c570:	4618      	mov	r0, r3
 800c572:	f7fb fa3c 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800c576:	2c00      	cmp	r4, #0
 800c578:	d004      	beq.n	800c584 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800c57a:	f107 0308 	add.w	r3, r7, #8
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fb fa35 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800c584:	4633      	mov	r3, r6
}
 800c586:	4618      	mov	r0, r3
 800c588:	371c      	adds	r7, #28
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c58e <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b082      	sub	sp, #8
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00a      	beq.n	800c5b4 <_ZN12TestRegistry10countTestsEv+0x26>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685a      	ldr	r2, [r3, #4]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3310      	adds	r3, #16
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	4798      	blx	r3
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	e000      	b.n	800c5b6 <_ZN12TestRegistry10countTestsEv+0x28>
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
	...

0800c5c0 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	4801      	ldr	r0, [pc, #4]	; (800c5cc <__tcf_0+0xc>)
 800c5c6:	f7ff fcad 	bl	800bf24 <_ZN12TestRegistryD1Ev>
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	200006d8 	.word	0x200006d8

0800c5d0 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800c5d4:	4b15      	ldr	r3, [pc, #84]	; (800c62c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	f3bf 8f5b 	dmb	ish
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	bf0c      	ite	eq
 800c5e6:	2301      	moveq	r3, #1
 800c5e8:	2300      	movne	r3, #0
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d013      	beq.n	800c618 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800c5f0:	480e      	ldr	r0, [pc, #56]	; (800c62c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800c5f2:	f005 fadb 	bl	8011bac <__cxa_guard_acquire>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	bf14      	ite	ne
 800c5fc:	2301      	movne	r3, #1
 800c5fe:	2300      	moveq	r3, #0
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d008      	beq.n	800c618 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800c606:	480a      	ldr	r0, [pc, #40]	; (800c630 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800c608:	f7ff fc66 	bl	800bed8 <_ZN12TestRegistryC1Ev>
 800c60c:	4807      	ldr	r0, [pc, #28]	; (800c62c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800c60e:	f005 fad9 	bl	8011bc4 <__cxa_guard_release>
 800c612:	4808      	ldr	r0, [pc, #32]	; (800c634 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800c614:	f005 fafd 	bl	8011c12 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800c618:	4b07      	ldr	r3, [pc, #28]	; (800c638 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800c620:	4b05      	ldr	r3, [pc, #20]	; (800c638 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	e000      	b.n	800c628 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800c626:	4b02      	ldr	r3, [pc, #8]	; (800c630 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800c628:	4618      	mov	r0, r3
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	200006f8 	.word	0x200006f8
 800c630:	200006d8 	.word	0x200006d8
 800c634:	0800c5c1 	.word	0x0800c5c1
 800c638:	200006d4 	.word	0x200006d4

0800c63c <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800c646:	4a04      	ldr	r2, [pc, #16]	; (800c658 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	6013      	str	r3, [r2, #0]
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	200006d4 	.word	0x200006d4

0800c65c <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00a      	beq.n	800c682 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	330c      	adds	r3, #12
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4610      	mov	r0, r2
 800c67c:	4798      	blx	r3
 800c67e:	4603      	mov	r3, r0
 800c680:	e000      	b.n	800c684 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800c682:	2300      	movs	r3, #0
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	6053      	str	r3, [r2, #4]

}
 800c688:	bf00      	nop
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	683a      	ldr	r2, [r7, #0]
 800c69e:	609a      	str	r2, [r3, #8]
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	60da      	str	r2, [r3, #12]
}
 800c6bc:	bf00      	nop
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	771a      	strb	r2, [r3, #28]
}
 800c6d6:	bf00      	nop
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b083      	sub	sp, #12
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	751a      	strb	r2, [r3, #20]
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	68d9      	ldr	r1, [r3, #12]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	461a      	mov	r2, r3
 800c712:	68b8      	ldr	r0, [r7, #8]
 800c714:	f000 ffaa 	bl	800d66c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800c71e:	2301      	movs	r3, #1
 800c720:	e006      	b.n	800c730 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	332c      	adds	r3, #44	; 0x2c
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	4798      	blx	r3
        return false;
 800c72e:	2300      	movs	r3, #0
    }
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800c740:	f7ff fb62 	bl	800be08 <_ZN14NullTestPlugin8instanceEv>
 800c744:	4602      	mov	r2, r0
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	611a      	str	r2, [r3, #16]
}
 800c74a:	bf00      	nop
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b082      	sub	sp, #8
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	3324      	adds	r3, #36	; 0x24
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	6912      	ldr	r2, [r2, #16]
 800c768:	4611      	mov	r1, r2
 800c76a:	6838      	ldr	r0, [r7, #0]
 800c76c:	4798      	blx	r3
 800c76e:	4602      	mov	r2, r0
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	611a      	str	r2, [r3, #16]
}
 800c774:	bf00      	nop
 800c776:	3708      	adds	r7, #8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	691b      	ldr	r3, [r3, #16]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7ff fa52 	bl	800bc4e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800c7aa:	4603      	mov	r3, r0
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	691a      	ldr	r2, [r3, #16]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3328      	adds	r3, #40	; 0x28
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	4610      	mov	r0, r2
 800c7d0:	4798      	blx	r3
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	bf0c      	ite	eq
 800c7dc:	2301      	moveq	r3, #1
 800c7de:	2300      	movne	r3, #0
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	691a      	ldr	r2, [r3, #16]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	332c      	adds	r3, #44	; 0x2c
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	4798      	blx	r3
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	4618      	mov	r0, r3
 800c804:	f7ff fa17 	bl	800bc36 <_ZN10TestPlugin7getNameEv>
 800c808:	4603      	mov	r3, r0
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7fb f8fa 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00b      	beq.n	800c830 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	691a      	ldr	r2, [r3, #16]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	332c      	adds	r3, #44	; 0x2c
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4610      	mov	r0, r2
 800c828:	4798      	blx	r3
 800c82a:	4602      	mov	r2, r0
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	691a      	ldr	r2, [r3, #16]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3328      	adds	r3, #40	; 0x28
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	4610      	mov	r0, r2
 800c842:	4798      	blx	r3
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
    int count = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	60bb      	str	r3, [r7, #8]
 800c85e:	f7ff fad3 	bl	800be08 <_ZN14NullTestPlugin8instanceEv>
 800c862:	4602      	mov	r2, r0
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	4293      	cmp	r3, r2
 800c868:	bf14      	ite	ne
 800c86a:	2301      	movne	r3, #1
 800c86c:	2300      	moveq	r3, #0
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00a      	beq.n	800c88a <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	3301      	adds	r3, #1
 800c878:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	332c      	adds	r3, #44	; 0x2c
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68b8      	ldr	r0, [r7, #8]
 800c884:	4798      	blx	r3
 800c886:	60b8      	str	r0, [r7, #8]
 800c888:	e7e9      	b.n	800c85e <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800c88a:	68fb      	ldr	r3, [r7, #12]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
    return tests_;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	334c      	adds	r3, #76	; 0x4c
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	4798      	blx	r3
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	f107 0308 	add.w	r3, r7, #8
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f002 f8e6 	bl	800ea9c <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800c8d0:	f107 0308 	add.w	r3, r7, #8
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f002 f96e 	bl	800ebb8 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800c8dc:	f107 0308 	add.w	r3, r7, #8
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f002 fa01 	bl	800ece8 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800c8ec:	f107 0308 	add.w	r3, r7, #8
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f002 f927 	bl	800eb44 <_ZN22UtestShellPointerArrayD1Ev>
}
 800c8f6:	bf00      	nop
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	334c      	adds	r3, #76	; 0x4c
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	4798      	blx	r3
 800c912:	4602      	mov	r2, r0
 800c914:	f107 0308 	add.w	r3, r7, #8
 800c918:	4611      	mov	r1, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f002 f8be 	bl	800ea9c <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800c920:	f107 0308 	add.w	r3, r7, #8
 800c924:	4618      	mov	r0, r3
 800c926:	f002 f983 	bl	800ec30 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800c92a:	f107 0308 	add.w	r3, r7, #8
 800c92e:	4618      	mov	r0, r3
 800c930:	f002 f9da 	bl	800ece8 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800c934:	4602      	mov	r2, r0
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800c93a:	f107 0308 	add.w	r3, r7, #8
 800c93e:	4618      	mov	r0, r3
 800c940:	f002 f900 	bl	800eb44 <_ZN22UtestShellPointerArrayD1Ev>
}
 800c944:	bf00      	nop
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00b      	beq.n	800c97a <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	330c      	adds	r3, #12
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	4798      	blx	r3
 800c96e:	4602      	mov	r2, r0
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	4293      	cmp	r3, r2
 800c974:	d001      	beq.n	800c97a <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800c976:	2301      	movs	r3, #1
 800c978:	e000      	b.n	800c97c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800c97a:	2300      	movs	r3, #0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d007      	beq.n	800c990 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	330c      	adds	r3, #12
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	4798      	blx	r3
 800c98c:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800c98e:	e7e5      	b.n	800c95c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800c990:	68fb      	ldr	r3, [r7, #12]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800c99a:	b590      	push	{r4, r7, lr}
 800c99c:	b087      	sub	sp, #28
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	617b      	str	r3, [r7, #20]
    while (current) {
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d01e      	beq.n	800c9ee <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800c9b0:	f107 030c 	add.w	r3, r7, #12
 800c9b4:	6979      	ldr	r1, [r7, #20]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 fd4e 	bl	800d458 <_ZNK10UtestShell7getNameEv>
 800c9bc:	f107 030c 	add.w	r3, r7, #12
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fb f81f 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	461c      	mov	r4, r3
 800c9cc:	f107 030c 	add.w	r3, r7, #12
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fb f80c 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800c9d6:	2c00      	cmp	r4, #0
 800c9d8:	d001      	beq.n	800c9de <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	e008      	b.n	800c9f0 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	330c      	adds	r3, #12
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6978      	ldr	r0, [r7, #20]
 800c9e8:	4798      	blx	r3
 800c9ea:	6178      	str	r0, [r7, #20]
    while (current) {
 800c9ec:	e7dd      	b.n	800c9aa <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	371c      	adds	r7, #28
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd90      	pop	{r4, r7, pc}

0800c9f8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800c9f8:	b590      	push	{r4, r7, lr}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	617b      	str	r3, [r7, #20]
    while (current) {
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d01e      	beq.n	800ca4c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800ca0e:	f107 030c 	add.w	r3, r7, #12
 800ca12:	6979      	ldr	r1, [r7, #20]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 fd2e 	bl	800d476 <_ZNK10UtestShell8getGroupEv>
 800ca1a:	f107 030c 	add.w	r3, r7, #12
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fa fff0 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800ca26:	4603      	mov	r3, r0
 800ca28:	461c      	mov	r4, r3
 800ca2a:	f107 030c 	add.w	r3, r7, #12
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fa ffdd 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800ca34:	2c00      	cmp	r4, #0
 800ca36:	d001      	beq.n	800ca3c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	e008      	b.n	800ca4e <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	330c      	adds	r3, #12
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	6978      	ldr	r0, [r7, #20]
 800ca46:	4798      	blx	r3
 800ca48:	6178      	str	r0, [r7, #20]
    while (current) {
 800ca4a:	e7dd      	b.n	800ca08 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	371c      	adds	r7, #28
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd90      	pop	{r4, r7, pc}
	...

0800ca58 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800ca62:	4a18      	ldr	r2, [pc, #96]	; (800cac4 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	601a      	str	r2, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	605a      	str	r2, [r3, #4]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	609a      	str	r2, [r3, #8]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	60da      	str	r2, [r3, #12]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	611a      	str	r2, [r3, #16]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	615a      	str	r2, [r3, #20]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	619a      	str	r2, [r3, #24]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	61da      	str	r2, [r3, #28]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	621a      	str	r2, [r3, #32]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	625a      	str	r2, [r3, #36]	; 0x24
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	629a      	str	r2, [r3, #40]	; 0x28
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	62da      	str	r2, [r3, #44]	; 0x2c
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	631a      	str	r2, [r3, #48]	; 0x30
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4618      	mov	r0, r3
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	080183e8 	.word	0x080183e8

0800cac8 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	4a04      	ldr	r2, [pc, #16]	; (800cae4 <_ZN10TestResultD1Ev+0x1c>)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	601a      	str	r2, [r3, #0]
{
}
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	080183e8 	.word	0x080183e8

0800cae8 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
}
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7ff ffe9 	bl	800cac8 <_ZN10TestResultD1Ev>
 800caf6:	2138      	movs	r1, #56	; 0x38
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7f9 fceb 	bl	80064d4 <_ZdlPvj>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4618      	mov	r0, r3
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3318      	adds	r3, #24
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	4610      	mov	r0, r2
 800cb24:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800cb26:	4b05      	ldr	r3, [pc, #20]	; (800cb3c <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4798      	blx	r3
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	461a      	mov	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cb34:	bf00      	nop
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	200000a4 	.word	0x200000a4

0800cb40 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4798      	blx	r3
 800cb50:	4603      	mov	r3, r0
 800cb52:	461a      	mov	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb58:	1ad2      	subs	r2, r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	331c      	adds	r3, #28
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6879      	ldr	r1, [r7, #4]
 800cb6e:	4610      	mov	r0, r2
 800cb70:	4798      	blx	r3
}
 800cb72:	bf00      	nop
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	200000a4 	.word	0x200000a4

0800cb80 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685a      	ldr	r2, [r3, #4]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3310      	adds	r3, #16
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800cb9e:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4798      	blx	r3
 800cba4:	4603      	mov	r3, r0
 800cba6:	461a      	mov	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	200000a4 	.word	0x200000a4

0800cbb8 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	332c      	adds	r3, #44	; 0x2c
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	4798      	blx	r3
}
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	3348      	adds	r3, #72	; 0x48
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6839      	ldr	r1, [r7, #0]
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	4798      	blx	r3
}
 800cbfc:	bf00      	nop
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800cc0e:	4b0c      	ldr	r3, [pc, #48]	; (800cc40 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4798      	blx	r3
 800cc14:	4603      	mov	r3, r0
 800cc16:	461a      	mov	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1c:	1ad2      	subs	r2, r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3314      	adds	r3, #20
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	6879      	ldr	r1, [r7, #4]
 800cc32:	4610      	mov	r0, r2
 800cc34:	4798      	blx	r3

}
 800cc36:	bf00      	nop
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	200000a4 	.word	0x200000a4

0800cc44 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685a      	ldr	r2, [r3, #4]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	333c      	adds	r3, #60	; 0x3c
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6839      	ldr	r1, [r7, #0]
 800cc5e:	4610      	mov	r0, r2
 800cc60:	4798      	blx	r3
    failureCount_++;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	695b      	ldr	r3, [r3, #20]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	615a      	str	r2, [r3, #20]
}
 800cc6c:	bf00      	nop
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
    testCount_++;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	609a      	str	r2, [r3, #8]
}
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr

0800cc92 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800cc92:	b480      	push	{r7}
 800cc94:	b083      	sub	sp, #12
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
    runCount_++;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	60da      	str	r2, [r3, #12]
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	611a      	str	r2, [r3, #16]
}
 800ccc2:	bf00      	nop
 800ccc4:	370c      	adds	r7, #12
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800ccce:	b480      	push	{r7}
 800ccd0:	b083      	sub	sp, #12
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	619a      	str	r2, [r3, #24]
}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	1c5a      	adds	r2, r3, #1
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	61da      	str	r2, [r3, #28]
}
 800ccfe:	bf00      	nop
 800cd00:	370c      	adds	r7, #12
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
	...

0800cd0c <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800cd14:	4b09      	ldr	r3, [pc, #36]	; (800cd3c <_ZN10TestResult12testsStartedEv+0x30>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4798      	blx	r3
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685a      	ldr	r2, [r3, #4]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3308      	adds	r3, #8
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4610      	mov	r0, r2
 800cd32:	4798      	blx	r3
}
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	200000a4 	.word	0x200000a4

0800cd40 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800cd48:	4b0c      	ldr	r3, [pc, #48]	; (800cd7c <_ZN10TestResult10testsEndedEv+0x3c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4798      	blx	r3
 800cd4e:	4603      	mov	r3, r0
 800cd50:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	1ad2      	subs	r2, r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	330c      	adds	r3, #12
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	4610      	mov	r0, r2
 800cd70:	4798      	blx	r3
}
 800cd72:	bf00      	nop
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	200000a4 	.word	0x200000a4

0800cd80 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6a1b      	ldr	r3, [r3, #32]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800cdc8:	b590      	push	{r4, r7, lr}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	ed87 0b04 	vstr	d0, [r7, #16]
 800cdd2:	ed87 1b02 	vstr	d1, [r7, #8]
 800cdd6:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800cdda:	4b2c      	ldr	r3, [pc, #176]	; (800ce8c <_Z13doubles_equalddd+0xc4>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	ed97 0b04 	vldr	d0, [r7, #16]
 800cde2:	4798      	blx	r3
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10f      	bne.n	800ce0a <_Z13doubles_equalddd+0x42>
 800cdea:	4b28      	ldr	r3, [pc, #160]	; (800ce8c <_Z13doubles_equalddd+0xc4>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	ed97 0b02 	vldr	d0, [r7, #8]
 800cdf2:	4798      	blx	r3
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d107      	bne.n	800ce0a <_Z13doubles_equalddd+0x42>
 800cdfa:	4b24      	ldr	r3, [pc, #144]	; (800ce8c <_Z13doubles_equalddd+0xc4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	ed97 0b00 	vldr	d0, [r7]
 800ce02:	4798      	blx	r3
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <_Z13doubles_equalddd+0x46>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e000      	b.n	800ce10 <_Z13doubles_equalddd+0x48>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <_Z13doubles_equalddd+0x50>
        return false;
 800ce14:	2300      	movs	r3, #0
 800ce16:	e035      	b.n	800ce84 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800ce18:	4b1d      	ldr	r3, [pc, #116]	; (800ce90 <_Z13doubles_equalddd+0xc8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	ed97 0b04 	vldr	d0, [r7, #16]
 800ce20:	4798      	blx	r3
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d009      	beq.n	800ce3c <_Z13doubles_equalddd+0x74>
 800ce28:	4b19      	ldr	r3, [pc, #100]	; (800ce90 <_Z13doubles_equalddd+0xc8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	ed97 0b02 	vldr	d0, [r7, #8]
 800ce30:	4798      	blx	r3
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <_Z13doubles_equalddd+0x74>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e000      	b.n	800ce3e <_Z13doubles_equalddd+0x76>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e01e      	b.n	800ce84 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800ce46:	4b13      	ldr	r3, [pc, #76]	; (800ce94 <_Z13doubles_equalddd+0xcc>)
 800ce48:	681c      	ldr	r4, [r3, #0]
 800ce4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ce52:	f7f3 fa59 	bl	8000308 <__aeabi_dsub>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	ec43 2b17 	vmov	d7, r2, r3
 800ce5e:	eeb0 0a47 	vmov.f32	s0, s14
 800ce62:	eef0 0a67 	vmov.f32	s1, s15
 800ce66:	47a0      	blx	r4
 800ce68:	ec53 2b10 	vmov	r2, r3, d0
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	460c      	mov	r4, r1
 800ce70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce74:	f7f3 fc74 	bl	8000760 <__aeabi_dcmpge>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d101      	bne.n	800ce82 <_Z13doubles_equalddd+0xba>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	461c      	mov	r4, r3
 800ce82:	b2e3      	uxtb	r3, r4
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	371c      	adds	r7, #28
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd90      	pop	{r4, r7, pc}
 800ce8c:	200000e0 	.word	0x200000e0
 800ce90:	200000e4 	.word	0x200000e4
 800ce94:	200000d4 	.word	0x200000d4

0800ce98 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	332c      	adds	r3, #44	; 0x2c
    }
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
    {
 800ceb8:	4a0a      	ldr	r2, [pc, #40]	; (800cee4 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	332c      	adds	r3, #44	; 0x2c
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff fe00 	bl	800cac8 <_ZN10TestResultD1Ev>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	331c      	adds	r3, #28
 800cecc:	4618      	mov	r0, r3
 800cece:	f7f7 fdfd 	bl	8004acc <_ZN17ConsoleTestOutputD1Ev>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 f943 	bl	800d160 <_ZN10UtestShellD1Ev>
    }
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4618      	mov	r0, r3
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	08018430 	.word	0x08018430

0800cee8 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
    }
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f7ff ffdd 	bl	800ceb0 <_ZN22OutsideTestRunnerUTestD1Ev>
 800cef6:	2164      	movs	r1, #100	; 0x64
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7f9 faeb 	bl	80064d4 <_ZdlPvj>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4618      	mov	r0, r3
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	2300      	movs	r3, #0
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	4b0d      	ldr	r3, [pc, #52]	; (800cf4c <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800cf18:	4a0d      	ldr	r2, [pc, #52]	; (800cf50 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800cf1a:	490e      	ldr	r1, [pc, #56]	; (800cf54 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800cf1c:	f000 f8f8 	bl	800d110 <_ZN10UtestShellC1EPKcS1_S1_j>
 800cf20:	4a0d      	ldr	r2, [pc, #52]	; (800cf58 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	331c      	adds	r3, #28
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7f7 fdbc 	bl	8004aa8 <_ZN17ConsoleTestOutputC1Ev>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	331c      	adds	r3, #28
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	f7ff fd8b 	bl	800ca58 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4618      	mov	r0, r3
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	08016718 	.word	0x08016718
 800cf50:	08016728 	.word	0x08016728
 800cf54:	08016768 	.word	0x08016768
 800cf58:	08018430 	.word	0x08018430

0800cf5c <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	4801      	ldr	r0, [pc, #4]	; (800cf68 <__tcf_0+0xc>)
 800cf62:	f7ff ffa5 	bl	800ceb0 <_ZN22OutsideTestRunnerUTestD1Ev>
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	200006fc 	.word	0x200006fc

0800cf6c <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800cf70:	4b12      	ldr	r3, [pc, #72]	; (800cfbc <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	f3bf 8f5b 	dmb	ish
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	bf0c      	ite	eq
 800cf82:	2301      	moveq	r3, #1
 800cf84:	2300      	movne	r3, #0
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d013      	beq.n	800cfb4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800cf8c:	480b      	ldr	r0, [pc, #44]	; (800cfbc <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800cf8e:	f004 fe0d 	bl	8011bac <__cxa_guard_acquire>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	bf14      	ite	ne
 800cf98:	2301      	movne	r3, #1
 800cf9a:	2300      	moveq	r3, #0
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d008      	beq.n	800cfb4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800cfa2:	4807      	ldr	r0, [pc, #28]	; (800cfc0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800cfa4:	f7ff ffb0 	bl	800cf08 <_ZN22OutsideTestRunnerUTestC1Ev>
 800cfa8:	4804      	ldr	r0, [pc, #16]	; (800cfbc <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800cfaa:	f004 fe0b 	bl	8011bc4 <__cxa_guard_release>
 800cfae:	4805      	ldr	r0, [pc, #20]	; (800cfc4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800cfb0:	f004 fe2f 	bl	8011c12 <atexit>
    return instance_;
 800cfb4:	4b02      	ldr	r3, [pc, #8]	; (800cfc0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	20000760 	.word	0x20000760
 800cfc0:	200006fc 	.word	0x200006fc
 800cfc4:	0800cf5d 	.word	0x0800cf5d

0800cfc8 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	330c      	adds	r3, #12
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	4798      	blx	r3
    }
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	3314      	adds	r3, #20
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	4798      	blx	r3
    }
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	3310      	adds	r3, #16
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	4798      	blx	r3
    }
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	603b      	str	r3, [r7, #0]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	605a      	str	r2, [r3, #4]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	683a      	ldr	r2, [r7, #0]
 800d03a:	609a      	str	r2, [r3, #8]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b086      	sub	sp, #24
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	3394      	adds	r3, #148	; 0x94
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	68f9      	ldr	r1, [r7, #12]
 800d074:	6938      	ldr	r0, [r7, #16]
 800d076:	4798      	blx	r3
    }
 800d078:	bf00      	nop
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800d09e:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <helperDoRunOneTestSeperateProcess+0x34>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	68f9      	ldr	r1, [r7, #12]
 800d0a6:	6938      	ldr	r0, [r7, #16]
 800d0a8:	4798      	blx	r3
    }
 800d0aa:	bf00      	nop
 800d0ac:	3718      	adds	r7, #24
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000098 	.word	0x20000098

0800d0b8 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800d0c0:	4a0f      	ldr	r2, [pc, #60]	; (800d100 <_ZN10UtestShellC1Ev+0x48>)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	601a      	str	r2, [r3, #0]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a0e      	ldr	r2, [pc, #56]	; (800d104 <_ZN10UtestShellC1Ev+0x4c>)
 800d0ca:	605a      	str	r2, [r3, #4]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a0e      	ldr	r2, [pc, #56]	; (800d108 <_ZN10UtestShellC1Ev+0x50>)
 800d0d0:	609a      	str	r2, [r3, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a0d      	ldr	r2, [pc, #52]	; (800d10c <_ZN10UtestShellC1Ev+0x54>)
 800d0d6:	60da      	str	r2, [r3, #12]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	611a      	str	r2, [r3, #16]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	615a      	str	r2, [r3, #20]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	761a      	strb	r2, [r3, #24]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	765a      	strb	r2, [r3, #25]
{
}
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	080184f0 	.word	0x080184f0
 800d104:	080167b4 	.word	0x080167b4
 800d108:	080167c8 	.word	0x080167c8
 800d10c:	080167d8 	.word	0x080167d8

0800d110 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800d11e:	4a0f      	ldr	r2, [pc, #60]	; (800d15c <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	601a      	str	r2, [r3, #0]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	605a      	str	r2, [r3, #4]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	609a      	str	r2, [r3, #8]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	60da      	str	r2, [r3, #12]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	69ba      	ldr	r2, [r7, #24]
 800d13a:	611a      	str	r2, [r3, #16]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	615a      	str	r2, [r3, #20]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	761a      	strb	r2, [r3, #24]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	765a      	strb	r2, [r3, #25]
{
}
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	4618      	mov	r0, r3
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr
 800d15c:	080184f0 	.word	0x080184f0

0800d160 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	4a04      	ldr	r2, [pc, #16]	; (800d17c <_ZN10UtestShellD1Ev+0x1c>)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
{
}
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4618      	mov	r0, r3
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	080184f0 	.word	0x080184f0

0800d180 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
}
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7ff ffe9 	bl	800d160 <_ZN10UtestShellD1Ev>
 800d18e:	211c      	movs	r1, #28
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7f9 f99f 	bl	80064d4 <_ZdlPvj>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4618      	mov	r0, r3
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	3310      	adds	r3, #16
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	4798      	blx	r3
}
 800d1b6:	bf00      	nop
 800d1b8:	3708      	adds	r7, #8
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
	...

0800d1c0 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800d1c4:	4b02      	ldr	r3, [pc, #8]	; (800d1d0 <_ZN10UtestShell5crashEv+0x10>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4798      	blx	r3
}
 800d1ca:	bf00      	nop
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20000094 	.word	0x20000094

0800d1d4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b088      	sub	sp, #32
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3324      	adds	r3, #36	; 0x24
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800d1f2:	f107 0014 	add.w	r0, r7, #20
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	68f9      	ldr	r1, [r7, #12]
 800d1fc:	f7ff ff0e 	bl	800d01c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	337c      	adds	r3, #124	; 0x7c
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	4798      	blx	r3
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d007      	beq.n	800d222 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800d212:	4b09      	ldr	r3, [pc, #36]	; (800d238 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f107 0214 	add.w	r2, r7, #20
 800d21a:	4611      	mov	r1, r2
 800d21c:	4807      	ldr	r0, [pc, #28]	; (800d23c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800d21e:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800d220:	e006      	b.n	800d230 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800d222:	4b05      	ldr	r3, [pc, #20]	; (800d238 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f107 0214 	add.w	r2, r7, #20
 800d22a:	4611      	mov	r1, r2
 800d22c:	4804      	ldr	r0, [pc, #16]	; (800d240 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800d22e:	4798      	blx	r3
}
 800d230:	bf00      	nop
 800d232:	3720      	adds	r7, #32
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	200000a0 	.word	0x200000a0
 800d23c:	0800d081 	.word	0x0800d081
 800d240:	0800d04b 	.word	0x0800d04b

0800d244 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800d244:	b590      	push	{r4, r7, lr}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
    return new Utest();
 800d24c:	22d3      	movs	r2, #211	; 0xd3
 800d24e:	4906      	ldr	r1, [pc, #24]	; (800d268 <_ZN10UtestShell10createTestEv+0x24>)
 800d250:	2004      	movs	r0, #4
 800d252:	f7f9 f92b 	bl	80064ac <_ZnwjPKci>
 800d256:	4604      	mov	r4, r0
 800d258:	4620      	mov	r0, r4
 800d25a:	f001 fafd 	bl	800e858 <_ZN5UtestC1Ev>
 800d25e:	4623      	mov	r3, r4
}
 800d260:	4618      	mov	r0, r3
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	bd90      	pop	{r4, r7, pc}
 800d268:	080167e8 	.word	0x080167e8

0800d26c <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
    delete test;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d004      	beq.n	800d286 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	3204      	adds	r2, #4
 800d280:	6812      	ldr	r2, [r2, #0]
 800d282:	4618      	mov	r0, r3
 800d284:	4790      	blx	r2
}
 800d286:	bf00      	nop
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
	...

0800d290 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b088      	sub	sp, #32
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	333c      	adds	r3, #60	; 0x3c
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4940      	ldr	r1, [pc, #256]	; (800d3a8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	3314      	adds	r3, #20
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	68f9      	ldr	r1, [r7, #12]
 800d2b6:	68b8      	ldr	r0, [r7, #8]
 800d2b8:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	333c      	adds	r3, #60	; 0x3c
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	493a      	ldr	r1, [pc, #232]	; (800d3ac <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800d2c8:	f001 fa9c 	bl	800e804 <_ZN10UtestShell10getCurrentEv>
 800d2cc:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f001 fa7e 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800d2d4:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800d2d6:	6879      	ldr	r1, [r7, #4]
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f001 fa59 	bl	800e790 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800d2de:	68f9      	ldr	r1, [r7, #12]
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f001 fa65 	bl	800e7b0 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	333c      	adds	r3, #60	; 0x3c
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4930      	ldr	r1, [pc, #192]	; (800d3b0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	4798      	blx	r3
    Utest* testToRun = createTest();
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	3388      	adds	r3, #136	; 0x88
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	4798      	blx	r3
 800d300:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	333c      	adds	r3, #60	; 0x3c
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	492a      	ldr	r1, [pc, #168]	; (800d3b4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	333c      	adds	r3, #60	; 0x3c
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4927      	ldr	r1, [pc, #156]	; (800d3b8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	4798      	blx	r3
    testToRun->run();
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3308      	adds	r3, #8
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6978      	ldr	r0, [r7, #20]
 800d328:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	333c      	adds	r3, #60	; 0x3c
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4922      	ldr	r1, [pc, #136]	; (800d3bc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800d338:	69f9      	ldr	r1, [r7, #28]
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f001 fa38 	bl	800e7b0 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800d340:	69b9      	ldr	r1, [r7, #24]
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f001 fa24 	bl	800e790 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	333c      	adds	r3, #60	; 0x3c
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	491b      	ldr	r1, [pc, #108]	; (800d3c0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	4798      	blx	r3
    destroyTest(testToRun);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	338c      	adds	r3, #140	; 0x8c
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6979      	ldr	r1, [r7, #20]
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	333c      	adds	r3, #60	; 0x3c
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4915      	ldr	r1, [pc, #84]	; (800d3c4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	333c      	adds	r3, #60	; 0x3c
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4913      	ldr	r1, [pc, #76]	; (800d3c8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3318      	adds	r3, #24
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	68f9      	ldr	r1, [r7, #12]
 800d38c:	68b8      	ldr	r0, [r7, #8]
 800d38e:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	333c      	adds	r3, #60	; 0x3c
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	490c      	ldr	r1, [pc, #48]	; (800d3cc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	4798      	blx	r3
}
 800d39e:	bf00      	nop
 800d3a0:	3720      	adds	r7, #32
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	080167fc 	.word	0x080167fc
 800d3ac:	08016820 	.word	0x08016820
 800d3b0:	08016840 	.word	0x08016840
 800d3b4:	0801685c 	.word	0x0801685c
 800d3b8:	08016878 	.word	0x08016878
 800d3bc:	08016894 	.word	0x08016894
 800d3c0:	080168ac 	.word	0x080168ac
 800d3c4:	080168c8 	.word	0x080168c8
 800d3c8:	080168e4 	.word	0x080168e4
 800d3cc:	08016908 	.word	0x08016908

0800d3d0 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
    return next_;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	695b      	ldr	r3, [r3, #20]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
    next_ = test;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	615a      	str	r2, [r3, #20]
    return this;
 800d3f8:	687b      	ldr	r3, [r7, #4]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	370c      	adds	r7, #12
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr

0800d406 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b082      	sub	sp, #8
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00b      	beq.n	800d42e <_ZN10UtestShell10countTestsEv+0x28>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	695a      	ldr	r2, [r3, #20]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	3310      	adds	r3, #16
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4610      	mov	r0, r2
 800d426:	4798      	blx	r3
 800d428:	4603      	mov	r3, r0
 800d42a:	3301      	adds	r3, #1
 800d42c:	e000      	b.n	800d430 <_ZN10UtestShell10countTestsEv+0x2a>
 800d42e:	2301      	movs	r3, #1
}
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
    return "TEST";
 800d442:	4904      	ldr	r1, [pc, #16]	; (800d454 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f7f9 ff1a 	bl	800727e <_ZN12SimpleStringC1EPKc>
}
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	0801692c 	.word	0x0801692c

0800d458 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	4619      	mov	r1, r3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f7f9 ff08 	bl	800727e <_ZN12SimpleStringC1EPKc>
}
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	3708      	adds	r7, #8
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b082      	sub	sp, #8
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
 800d47e:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7f9 fef9 	bl	800727e <_ZN12SimpleStringC1EPKc>
}
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	33a0      	adds	r3, #160	; 0xa0
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	4798      	blx	r3
    formattedName += "(";
 800d4ae:	490e      	ldr	r1, [pc, #56]	; (800d4e8 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7fa fb2b 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7fa fb25 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 800d4c2:	490a      	ldr	r1, [pc, #40]	; (800d4ec <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7fa fb21 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7fa fb1b 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 800d4d6:	4906      	ldr	r1, [pc, #24]	; (800d4f0 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7fa fb17 	bl	8007b0c <_ZN12SimpleStringpLEPKc>

    return formattedName;
 800d4de:	bf00      	nop
}
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	08016934 	.word	0x08016934
 800d4ec:	08016938 	.word	0x08016938
 800d4f0:	0801693c 	.word	0x0801693c

0800d4f4 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	7e5b      	ldrb	r3, [r3, #25]
}
 800d500:	4618      	mov	r0, r3
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <_ZNK10UtestShell7willRunEv>:
{
    getTestResult()->countCheck();
}

bool UtestShell::willRun() const
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
    return true;
 800d514:	2301      	movs	r3, #1
}
 800d516:	4618      	mov	r0, r3
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 800d522:	b480      	push	{r7}
 800d524:	b083      	sub	sp, #12
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7e1b      	ldrb	r3, [r3, #24]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr

0800d53a <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 800d53a:	b480      	push	{r7}
 800d53c:	b083      	sub	sp, #12
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2201      	movs	r2, #1
 800d546:	761a      	strb	r2, [r3, #24]
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]

}
 800d55c:	bf00      	nop
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	683a      	ldr	r2, [r7, #0]
 800d576:	60da      	str	r2, [r3, #12]
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	611a      	str	r2, [r3, #16]
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	683a      	ldr	r2, [r7, #0]
 800d5ae:	605a      	str	r2, [r3, #4]
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
    name_ = testName;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	683a      	ldr	r2, [r7, #0]
 800d5ca:	609a      	str	r2, [r3, #8]
}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7f9 fe48 	bl	800727e <_ZN12SimpleStringC1EPKc>
}
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	691b      	ldr	r3, [r3, #16]
}
 800d602:	4618      	mov	r0, r3
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 800d60e:	b590      	push	{r4, r7, lr}
 800d610:	b087      	sub	sp, #28
 800d612:	af00      	add	r7, sp, #0
 800d614:	60f8      	str	r0, [r7, #12]
 800d616:	60b9      	str	r1, [r7, #8]
 800d618:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 800d620:	2301      	movs	r3, #1
 800d622:	e01f      	b.n	800d664 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d01b      	beq.n	800d662 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 800d62a:	f107 0310 	add.w	r3, r7, #16
 800d62e:	68b9      	ldr	r1, [r7, #8]
 800d630:	4618      	mov	r0, r3
 800d632:	f7f9 fe24 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800d636:	f107 0310 	add.w	r3, r7, #16
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f004 fa88 	bl	8011b52 <_ZNK10TestFilter5matchERK12SimpleString>
 800d642:	4603      	mov	r3, r0
 800d644:	461c      	mov	r4, r3
 800d646:	f107 0310 	add.w	r3, r7, #16
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fa f9cf 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800d650:	2c00      	cmp	r4, #0
 800d652:	d001      	beq.n	800d658 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 800d654:	2301      	movs	r3, #1
 800d656:	e005      	b.n	800d664 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f004 fa54 	bl	8011b06 <_ZNK10TestFilter7getNextEv>
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	e7e0      	b.n	800d624 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	371c      	adds	r7, #28
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd90      	pop	{r4, r7, pc}

0800d66c <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	4619      	mov	r1, r3
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f7ff ffc4 	bl	800d60e <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00b      	beq.n	800d6a4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	4619      	mov	r1, r3
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f7ff ffba 	bl	800d60e <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d001      	beq.n	800d6a4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e000      	b.n	800d6a6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 800d6ae:	b590      	push	{r4, r7, lr}
 800d6b0:	b083      	sub	sp, #12
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	339c      	adds	r3, #156	; 0x9c
 800d6be:	681c      	ldr	r4, [r3, #0]
 800d6c0:	f001 f8b0 	bl	800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 800d6ce:	bf00      	nop
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd90      	pop	{r4, r7, pc}

0800d6d6 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b084      	sub	sp, #16
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	60f8      	str	r0, [r7, #12]
 800d6de:	60b9      	str	r1, [r7, #8]
 800d6e0:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f001 f871 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	3234      	adds	r2, #52	; 0x34
 800d6f4:	6812      	ldr	r2, [r2, #0]
 800d6f6:	68b9      	ldr	r1, [r7, #8]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	4790      	blx	r2
    terminator.exitCurrentTest();
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800d706:	bf00      	nop
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b082      	sub	sp, #8
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6838      	ldr	r0, [r7, #0]
 800d720:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d72a:	b590      	push	{r4, r7, lr}
 800d72c:	b09d      	sub	sp, #116	; 0x74
 800d72e:	af04      	add	r7, sp, #16
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	607a      	str	r2, [r7, #4]
 800d734:	603b      	str	r3, [r7, #0]
 800d736:	460b      	mov	r3, r1
 800d738:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f001 f848 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800d740:	4603      	mov	r3, r0
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	3228      	adds	r2, #40	; 0x28
 800d746:	6812      	ldr	r2, [r2, #0]
 800d748:	4618      	mov	r0, r3
 800d74a:	4790      	blx	r2
    if (!condition)
 800d74c:	7afb      	ldrb	r3, [r7, #11]
 800d74e:	f083 0301 	eor.w	r3, r3, #1
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d03f      	beq.n	800d7d8 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	339c      	adds	r3, #156	; 0x9c
 800d75e:	681c      	ldr	r4, [r3, #0]
 800d760:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d764:	6879      	ldr	r1, [r7, #4]
 800d766:	4618      	mov	r0, r3
 800d768:	f7f9 fd89 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800d76c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d770:	6839      	ldr	r1, [r7, #0]
 800d772:	4618      	mov	r0, r3
 800d774:	f7f9 fd83 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800d778:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d77c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d77e:	4618      	mov	r0, r3
 800d780:	f7f9 fd7d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800d784:	f107 0014 	add.w	r0, r7, #20
 800d788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d78c:	9302      	str	r3, [sp, #8]
 800d78e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d792:	9301      	str	r3, [sp, #4]
 800d794:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d79c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d79e:	68f9      	ldr	r1, [r7, #12]
 800d7a0:	f7fb ff7c 	bl	800969c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d7a4:	f107 0314 	add.w	r3, r7, #20
 800d7a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	47a0      	blx	r4
 800d7b0:	f107 0314 	add.w	r3, r7, #20
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fc fddf 	bl	800a378 <_ZN12CheckFailureD1Ev>
 800d7ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fa f915 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800d7c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fa f910 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800d7ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fa f90b 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800d7d8:	bf00      	nop
 800d7da:	3764      	adds	r7, #100	; 0x64
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd90      	pop	{r4, r7, pc}

0800d7e0 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d7e0:	b590      	push	{r4, r7, lr}
 800d7e2:	b097      	sub	sp, #92	; 0x5c
 800d7e4:	af02      	add	r7, sp, #8
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	607a      	str	r2, [r7, #4]
 800d7ec:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f000 ffee 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	3228      	adds	r2, #40	; 0x28
 800d7fa:	6812      	ldr	r2, [r2, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	339c      	adds	r3, #156	; 0x9c
 800d806:	681c      	ldr	r4, [r3, #0]
 800d808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d80c:	68b9      	ldr	r1, [r7, #8]
 800d80e:	4618      	mov	r0, r3
 800d810:	f7f9 fd35 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800d814:	f107 0014 	add.w	r0, r7, #20
 800d818:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	68f9      	ldr	r1, [r7, #12]
 800d824:	f7fb ff82 	bl	800972c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800d828:	f107 0314 	add.w	r3, r7, #20
 800d82c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d82e:	4619      	mov	r1, r3
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	47a0      	blx	r4
 800d834:	f107 0314 	add.w	r3, r7, #20
 800d838:	4618      	mov	r0, r3
 800d83a:	f7f9 fa0f 	bl	8006c5c <_ZN11FailFailureD1Ev>
 800d83e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d842:	4618      	mov	r0, r3
 800d844:	f7fa f8d3 	bl	80079ee <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 800d848:	bf00      	nop
 800d84a:	3754      	adds	r7, #84	; 0x54
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd90      	pop	{r4, r7, pc}

0800d850 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d850:	b590      	push	{r4, r7, lr}
 800d852:	b0a7      	sub	sp, #156	; 0x9c
 800d854:	af04      	add	r7, sp, #16
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f000 ffb6 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800d864:	4603      	mov	r3, r0
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	3228      	adds	r2, #40	; 0x28
 800d86a:	6812      	ldr	r2, [r2, #0]
 800d86c:	4618      	mov	r0, r3
 800d86e:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d102      	bne.n	800d87c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d068      	beq.n	800d94e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d002      	beq.n	800d888 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d12a      	bne.n	800d8de <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	339c      	adds	r3, #156	; 0x9c
 800d88e:	681c      	ldr	r4, [r3, #0]
 800d890:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	f7f9 fcf1 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800d89c:	f107 0010 	add.w	r0, r7, #16
 800d8a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d8a4:	9302      	str	r3, [sp, #8]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	9301      	str	r3, [sp, #4]
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d8b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d8b6:	68f9      	ldr	r1, [r7, #12]
 800d8b8:	f7fc f9be 	bl	8009c38 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d8bc:	f107 0310 	add.w	r3, r7, #16
 800d8c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	47a0      	blx	r4
 800d8ca:	f107 0310 	add.w	r3, r7, #16
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fc fcca 	bl	800a268 <_ZN18StringEqualFailureD1Ev>
 800d8d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fa f888 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 800d8de:	6879      	ldr	r1, [r7, #4]
 800d8e0:	68b8      	ldr	r0, [r7, #8]
 800d8e2:	f7f9 fb09 	bl	8006ef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	bf14      	ite	ne
 800d8ec:	2301      	movne	r3, #1
 800d8ee:	2300      	moveq	r3, #0
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d02c      	beq.n	800d950 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	339c      	adds	r3, #156	; 0x9c
 800d8fc:	681c      	ldr	r4, [r3, #0]
 800d8fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d902:	6839      	ldr	r1, [r7, #0]
 800d904:	4618      	mov	r0, r3
 800d906:	f7f9 fcba 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800d90a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800d90e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d912:	9302      	str	r3, [sp, #8]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	9301      	str	r3, [sp, #4]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d920:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d924:	68f9      	ldr	r1, [r7, #12]
 800d926:	f7fc f987 	bl	8009c38 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d92a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d92e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d932:	4619      	mov	r1, r3
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	47a0      	blx	r4
 800d938:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fc fc93 	bl	800a268 <_ZN18StringEqualFailureD1Ev>
 800d942:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d946:	4618      	mov	r0, r3
 800d948:	f7fa f851 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800d94c:	e000      	b.n	800d950 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d94e:	bf00      	nop
}
 800d950:	378c      	adds	r7, #140	; 0x8c
 800d952:	46bd      	mov	sp, r7
 800d954:	bd90      	pop	{r4, r7, pc}

0800d956 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d956:	b590      	push	{r4, r7, lr}
 800d958:	b0a7      	sub	sp, #156	; 0x9c
 800d95a:	af04      	add	r7, sp, #16
 800d95c:	60f8      	str	r0, [r7, #12]
 800d95e:	60b9      	str	r1, [r7, #8]
 800d960:	607a      	str	r2, [r7, #4]
 800d962:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f000 ff33 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800d96a:	4603      	mov	r3, r0
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	3228      	adds	r2, #40	; 0x28
 800d970:	6812      	ldr	r2, [r2, #0]
 800d972:	4618      	mov	r0, r3
 800d974:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d102      	bne.n	800d982 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d06b      	beq.n	800da5a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d12b      	bne.n	800d9e6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	339c      	adds	r3, #156	; 0x9c
 800d994:	681c      	ldr	r4, [r3, #0]
 800d996:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d99a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f9 fc6d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800d9a4:	f107 0010 	add.w	r0, r7, #16
 800d9a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d9ac:	9302      	str	r3, [sp, #8]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d9be:	68f9      	ldr	r1, [r7, #12]
 800d9c0:	f7fc f93a 	bl	8009c38 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800d9c4:	f107 0310 	add.w	r3, r7, #16
 800d9c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	47a0      	blx	r4
 800d9d2:	f107 0310 	add.w	r3, r7, #16
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fc fc46 	bl	800a268 <_ZN18StringEqualFailureD1Ev>
 800d9dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fa f804 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	6879      	ldr	r1, [r7, #4]
 800d9ea:	68b8      	ldr	r0, [r7, #8]
 800d9ec:	f7f9 fac3 	bl	8006f76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	bf14      	ite	ne
 800d9f6:	2301      	movne	r3, #1
 800d9f8:	2300      	moveq	r3, #0
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d02d      	beq.n	800da5c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	339c      	adds	r3, #156	; 0x9c
 800da06:	681c      	ldr	r4, [r3, #0]
 800da08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800da0c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800da10:	4618      	mov	r0, r3
 800da12:	f7f9 fc34 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800da16:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800da1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800da1e:	9302      	str	r3, [sp, #8]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	9301      	str	r3, [sp, #4]
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	9300      	str	r3, [sp, #0]
 800da28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da2c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800da30:	68f9      	ldr	r1, [r7, #12]
 800da32:	f7fc f901 	bl	8009c38 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800da36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da3a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800da3e:	4619      	mov	r1, r3
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	47a0      	blx	r4
 800da44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da48:	4618      	mov	r0, r3
 800da4a:	f7fc fc0d 	bl	800a268 <_ZN18StringEqualFailureD1Ev>
 800da4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800da52:	4618      	mov	r0, r3
 800da54:	f7f9 ffcb 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800da58:	e000      	b.n	800da5c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800da5a:	bf00      	nop
}
 800da5c:	378c      	adds	r7, #140	; 0x8c
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd90      	pop	{r4, r7, pc}

0800da62 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800da62:	b590      	push	{r4, r7, lr}
 800da64:	b0ab      	sub	sp, #172	; 0xac
 800da66:	af04      	add	r7, sp, #16
 800da68:	60f8      	str	r0, [r7, #12]
 800da6a:	60b9      	str	r1, [r7, #8]
 800da6c:	607a      	str	r2, [r7, #4]
 800da6e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f000 fead 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800da76:	4603      	mov	r3, r0
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	3228      	adds	r2, #40	; 0x28
 800da7c:	6812      	ldr	r2, [r2, #0]
 800da7e:	4618      	mov	r0, r3
 800da80:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d102      	bne.n	800da8e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d07c      	beq.n	800db88 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d128      	bne.n	800daec <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3398      	adds	r3, #152	; 0x98
 800daa0:	681c      	ldr	r4, [r3, #0]
 800daa2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7f9 fbe8 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800daae:	f107 0010 	add.w	r0, r7, #16
 800dab2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dab6:	9302      	str	r3, [sp, #8]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	9301      	str	r3, [sp, #4]
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dac4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dac8:	68f9      	ldr	r1, [r7, #12]
 800daca:	f7fc f959 	bl	8009d80 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800dace:	f107 0310 	add.w	r3, r7, #16
 800dad2:	4619      	mov	r1, r3
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	47a0      	blx	r4
 800dad8:	f107 0310 	add.w	r3, r7, #16
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fc fba1 	bl	800a224 <_ZN24StringEqualNoCaseFailureD1Ev>
 800dae2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7f9 ff81 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 800daec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800daf0:	68b9      	ldr	r1, [r7, #8]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7f9 fbc3 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800daf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	4618      	mov	r0, r3
 800db00:	f7f9 fbbd 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800db04:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800db08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7f9 ff94 	bl	8007a3c <_ZNK12SimpleString12equalsNoCaseERKS_>
 800db14:	4603      	mov	r3, r0
 800db16:	f083 0301 	eor.w	r3, r3, #1
 800db1a:	b2dc      	uxtb	r4, r3
 800db1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800db20:	4618      	mov	r0, r3
 800db22:	f7f9 ff64 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800db26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7f9 ff5f 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800db30:	2c00      	cmp	r4, #0
 800db32:	d02a      	beq.n	800db8a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3398      	adds	r3, #152	; 0x98
 800db3a:	681c      	ldr	r4, [r3, #0]
 800db3c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800db40:	6839      	ldr	r1, [r7, #0]
 800db42:	4618      	mov	r0, r3
 800db44:	f7f9 fb9b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800db48:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800db4c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800db50:	9302      	str	r3, [sp, #8]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	9300      	str	r3, [sp, #0]
 800db5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db62:	68f9      	ldr	r1, [r7, #12]
 800db64:	f7fc f90c 	bl	8009d80 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800db68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800db6c:	4619      	mov	r1, r3
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	47a0      	blx	r4
 800db72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800db76:	4618      	mov	r0, r3
 800db78:	f7fc fb54 	bl	800a224 <_ZN24StringEqualNoCaseFailureD1Ev>
 800db7c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800db80:	4618      	mov	r0, r3
 800db82:	f7f9 ff34 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800db86:	e000      	b.n	800db8a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800db88:	bf00      	nop
}
 800db8a:	379c      	adds	r7, #156	; 0x9c
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd90      	pop	{r4, r7, pc}

0800db90 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800db90:	b590      	push	{r4, r7, lr}
 800db92:	b0b3      	sub	sp, #204	; 0xcc
 800db94:	af04      	add	r7, sp, #16
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
 800db9c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f000 fe16 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800dba4:	4603      	mov	r3, r0
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	3228      	adds	r2, #40	; 0x28
 800dbaa:	6812      	ldr	r2, [r2, #0]
 800dbac:	4618      	mov	r0, r3
 800dbae:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d103      	bne.n	800dbbe <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f000 80ad 	beq.w	800dd18 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d002      	beq.n	800dbca <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d140      	bne.n	800dc4c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3398      	adds	r3, #152	; 0x98
 800dbd0:	681c      	ldr	r4, [r3, #0]
 800dbd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dbd6:	68b9      	ldr	r1, [r7, #8]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7f9 fb50 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dbde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dbe2:	6879      	ldr	r1, [r7, #4]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7f9 fb4a 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dbea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dbee:	6839      	ldr	r1, [r7, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7f9 fb44 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dbf6:	f107 0010 	add.w	r0, r7, #16
 800dbfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dbfe:	9302      	str	r3, [sp, #8]
 800dc00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dc10:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800dc14:	68f9      	ldr	r1, [r7, #12]
 800dc16:	f7fb fcf7 	bl	8009608 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800dc1a:	f107 0310 	add.w	r3, r7, #16
 800dc1e:	4619      	mov	r1, r3
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	47a0      	blx	r4
 800dc24:	f107 0310 	add.w	r3, r7, #16
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fc fbc7 	bl	800a3bc <_ZN15ContainsFailureD1Ev>
 800dc2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7f9 fedb 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800dc38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7f9 fed6 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800dc42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7f9 fed1 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 800dc4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dc50:	6879      	ldr	r1, [r7, #4]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7f9 fb13 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dc58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dc5c:	68b9      	ldr	r1, [r7, #8]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7f9 fb0d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dc64:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dc68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f9 fb83 	bl	800737a <_ZNK12SimpleString8containsERKS_>
 800dc74:	4603      	mov	r3, r0
 800dc76:	f083 0301 	eor.w	r3, r3, #1
 800dc7a:	b2dc      	uxtb	r4, r3
 800dc7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7f9 feb4 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800dc86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f9 feaf 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800dc90:	2c00      	cmp	r4, #0
 800dc92:	d042      	beq.n	800dd1a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3398      	adds	r3, #152	; 0x98
 800dc9a:	681c      	ldr	r4, [r3, #0]
 800dc9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800dca0:	68b9      	ldr	r1, [r7, #8]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7f9 faeb 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dca8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800dcac:	6879      	ldr	r1, [r7, #4]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7f9 fae5 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dcb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7f9 fadf 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dcc0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800dcc4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800dcc8:	9302      	str	r3, [sp, #8]
 800dcca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800dcce:	9301      	str	r3, [sp, #4]
 800dcd0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dcda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800dcde:	68f9      	ldr	r1, [r7, #12]
 800dce0:	f7fb fc92 	bl	8009608 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800dce4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dce8:	4619      	mov	r1, r3
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	47a0      	blx	r4
 800dcee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fc fb62 	bl	800a3bc <_ZN15ContainsFailureD1Ev>
 800dcf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7f9 fe76 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800dd02:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7f9 fe71 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800dd0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7f9 fe6c 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800dd16:	e000      	b.n	800dd1a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dd18:	bf00      	nop
}
 800dd1a:	37bc      	adds	r7, #188	; 0xbc
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd90      	pop	{r4, r7, pc}

0800dd20 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800dd20:	b590      	push	{r4, r7, lr}
 800dd22:	b0b3      	sub	sp, #204	; 0xcc
 800dd24:	af04      	add	r7, sp, #16
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	f000 fd4e 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800dd34:	4603      	mov	r3, r0
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	3228      	adds	r2, #40	; 0x28
 800dd3a:	6812      	ldr	r2, [r2, #0]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d103      	bne.n	800dd4e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 80ad 	beq.w	800dea8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d002      	beq.n	800dd5a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d140      	bne.n	800dddc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	3398      	adds	r3, #152	; 0x98
 800dd60:	681c      	ldr	r4, [r3, #0]
 800dd62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd66:	68b9      	ldr	r1, [r7, #8]
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7f9 fa88 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dd6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd72:	6879      	ldr	r1, [r7, #4]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7f9 fa82 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dd7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dd7e:	6839      	ldr	r1, [r7, #0]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7f9 fa7c 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dd86:	f107 0010 	add.w	r0, r7, #16
 800dd8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dd8e:	9302      	str	r3, [sp, #8]
 800dd90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dd94:	9301      	str	r3, [sp, #4]
 800dd96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dda0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800dda4:	68f9      	ldr	r1, [r7, #12]
 800dda6:	f7fb fc2f 	bl	8009608 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ddaa:	f107 0310 	add.w	r3, r7, #16
 800ddae:	4619      	mov	r1, r3
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	47a0      	blx	r4
 800ddb4:	f107 0310 	add.w	r3, r7, #16
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fc faff 	bl	800a3bc <_ZN15ContainsFailureD1Ev>
 800ddbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7f9 fe13 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800ddc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7f9 fe0e 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800ddd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7f9 fe09 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 800dddc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dde0:	6879      	ldr	r1, [r7, #4]
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7f9 fa4b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dde8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ddec:	68b9      	ldr	r1, [r7, #8]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7f9 fa45 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800ddf4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ddf8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7f9 fad6 	bl	80073b0 <_ZNK12SimpleString14containsNoCaseERKS_>
 800de04:	4603      	mov	r3, r0
 800de06:	f083 0301 	eor.w	r3, r3, #1
 800de0a:	b2dc      	uxtb	r4, r3
 800de0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800de10:	4618      	mov	r0, r3
 800de12:	f7f9 fdec 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800de16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7f9 fde7 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800de20:	2c00      	cmp	r4, #0
 800de22:	d042      	beq.n	800deaa <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	3398      	adds	r3, #152	; 0x98
 800de2a:	681c      	ldr	r4, [r3, #0]
 800de2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800de30:	68b9      	ldr	r1, [r7, #8]
 800de32:	4618      	mov	r0, r3
 800de34:	f7f9 fa23 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800de38:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800de3c:	6879      	ldr	r1, [r7, #4]
 800de3e:	4618      	mov	r0, r3
 800de40:	f7f9 fa1d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800de44:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7f9 fa17 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800de50:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800de54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800de58:	9302      	str	r3, [sp, #8]
 800de5a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800de5e:	9301      	str	r3, [sp, #4]
 800de60:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800de6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800de6e:	68f9      	ldr	r1, [r7, #12]
 800de70:	f7fb fbca 	bl	8009608 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800de74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800de78:	4619      	mov	r1, r3
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	47a0      	blx	r4
 800de7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800de82:	4618      	mov	r0, r3
 800de84:	f7fc fa9a 	bl	800a3bc <_ZN15ContainsFailureD1Ev>
 800de88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7f9 fdae 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800de92:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800de96:	4618      	mov	r0, r3
 800de98:	f7f9 fda9 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800de9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7f9 fda4 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800dea6:	e000      	b.n	800deaa <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800dea8:	bf00      	nop
}
 800deaa:	37bc      	adds	r7, #188	; 0xbc
 800deac:	46bd      	mov	sp, r7
 800deae:	bd90      	pop	{r4, r7, pc}

0800deb0 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800deb0:	b590      	push	{r4, r7, lr}
 800deb2:	b099      	sub	sp, #100	; 0x64
 800deb4:	af04      	add	r7, sp, #16
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]
 800debc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f000 fc86 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800dec4:	4603      	mov	r3, r0
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	3228      	adds	r2, #40	; 0x28
 800deca:	6812      	ldr	r2, [r2, #0]
 800decc:	4618      	mov	r0, r3
 800dece:	4790      	blx	r2
    if (expected != actual)
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d027      	beq.n	800df28 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	339c      	adds	r3, #156	; 0x9c
 800dede:	681c      	ldr	r4, [r3, #0]
 800dee0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dee4:	6839      	ldr	r1, [r7, #0]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7f9 f9c9 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800deec:	f107 0014 	add.w	r0, r7, #20
 800def0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800def4:	9302      	str	r3, [sp, #8]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df02:	68f9      	ldr	r1, [r7, #12]
 800df04:	f7fb fc30 	bl	8009768 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 800df08:	f107 0314 	add.w	r3, r7, #20
 800df0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df0e:	4619      	mov	r1, r3
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	47a0      	blx	r4
 800df14:	f107 0314 	add.w	r3, r7, #20
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fc fa0b 	bl	800a334 <_ZN17LongsEqualFailureD1Ev>
 800df1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df22:	4618      	mov	r0, r3
 800df24:	f7f9 fd63 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800df28:	bf00      	nop
 800df2a:	3754      	adds	r7, #84	; 0x54
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd90      	pop	{r4, r7, pc}

0800df30 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800df30:	b590      	push	{r4, r7, lr}
 800df32:	b099      	sub	sp, #100	; 0x64
 800df34:	af04      	add	r7, sp, #16
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
 800df3c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f000 fc46 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800df44:	4603      	mov	r3, r0
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	3228      	adds	r2, #40	; 0x28
 800df4a:	6812      	ldr	r2, [r2, #0]
 800df4c:	4618      	mov	r0, r3
 800df4e:	4790      	blx	r2
    if (expected != actual)
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	429a      	cmp	r2, r3
 800df56:	d027      	beq.n	800dfa8 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	339c      	adds	r3, #156	; 0x9c
 800df5e:	681c      	ldr	r4, [r3, #0]
 800df60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df64:	6839      	ldr	r1, [r7, #0]
 800df66:	4618      	mov	r0, r3
 800df68:	f7f9 f989 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800df6c:	f107 0014 	add.w	r0, r7, #20
 800df70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df74:	9302      	str	r3, [sp, #8]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	9301      	str	r3, [sp, #4]
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df82:	68f9      	ldr	r1, [r7, #12]
 800df84:	f7fb fcbc 	bl	8009900 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 800df88:	f107 0314 	add.w	r3, r7, #20
 800df8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df8e:	4619      	mov	r1, r3
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	47a0      	blx	r4
 800df94:	f107 0314 	add.w	r3, r7, #20
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fc f9a9 	bl	800a2f0 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800df9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7f9 fd23 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800dfa8:	bf00      	nop
 800dfaa:	3754      	adds	r7, #84	; 0x54
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd90      	pop	{r4, r7, pc}

0800dfb0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	b590      	push	{r4, r7, lr}
 800dfb4:	b099      	sub	sp, #100	; 0x64
 800dfb6:	af02      	add	r7, sp, #8
 800dfb8:	60f8      	str	r0, [r7, #12]
 800dfba:	1d38      	adds	r0, r7, #4
 800dfbc:	e880 0006 	stmia.w	r0, {r1, r2}
 800dfc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f000 fc04 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	3228      	adds	r2, #40	; 0x28
 800dfce:	6812      	ldr	r2, [r2, #0]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	339c      	adds	r3, #156	; 0x9c
 800dfda:	681c      	ldr	r4, [r3, #0]
 800dfdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfe0:	4919      	ldr	r1, [pc, #100]	; (800e048 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7f9 f94b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dfe8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dfec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7f9 f945 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800dff4:	f107 0014 	add.w	r0, r7, #20
 800dff8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e006:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e008:	68f9      	ldr	r1, [r7, #12]
 800e00a:	f7fc f85f 	bl	800a0cc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800e00e:	f107 0314 	add.w	r3, r7, #20
 800e012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e016:	4619      	mov	r1, r3
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	47a0      	blx	r4
 800e01c:	f107 0314 	add.w	r3, r7, #20
 800e020:	4618      	mov	r0, r3
 800e022:	f7fc f899 	bl	800a158 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e026:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7f9 fcdf 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e030:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e034:	4618      	mov	r0, r3
 800e036:	f7f9 fcda 	bl	80079ee <_ZN12SimpleStringD1Ev>
#endif
}
 800e03a:	bf00      	nop
 800e03c:	375c      	adds	r7, #92	; 0x5c
 800e03e:	46bd      	mov	sp, r7
 800e040:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e044:	b002      	add	sp, #8
 800e046:	4770      	bx	lr
 800e048:	08016940 	.word	0x08016940

0800e04c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e04c:	b082      	sub	sp, #8
 800e04e:	b590      	push	{r4, r7, lr}
 800e050:	b099      	sub	sp, #100	; 0x64
 800e052:	af02      	add	r7, sp, #8
 800e054:	60f8      	str	r0, [r7, #12]
 800e056:	1d38      	adds	r0, r7, #4
 800e058:	e880 0006 	stmia.w	r0, {r1, r2}
 800e05c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f000 fbb6 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e064:	4603      	mov	r3, r0
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	3228      	adds	r2, #40	; 0x28
 800e06a:	6812      	ldr	r2, [r2, #0]
 800e06c:	4618      	mov	r0, r3
 800e06e:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	339c      	adds	r3, #156	; 0x9c
 800e076:	681c      	ldr	r4, [r3, #0]
 800e078:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e07c:	4919      	ldr	r1, [pc, #100]	; (800e0e4 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 800e07e:	4618      	mov	r0, r3
 800e080:	f7f9 f8fd 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e084:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e088:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7f9 f8f7 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e090:	f107 0014 	add.w	r0, r7, #20
 800e094:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e098:	9301      	str	r3, [sp, #4]
 800e09a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e0a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e0a4:	68f9      	ldr	r1, [r7, #12]
 800e0a6:	f7fc f811 	bl	800a0cc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800e0aa:	f107 0314 	add.w	r3, r7, #20
 800e0ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	47a0      	blx	r4
 800e0b8:	f107 0314 	add.w	r3, r7, #20
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fc f84b 	bl	800a158 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e0c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7f9 fc91 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e0cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7f9 fc8c 	bl	80079ee <_ZN12SimpleStringD1Ev>
#endif
}
 800e0d6:	bf00      	nop
 800e0d8:	375c      	adds	r7, #92	; 0x5c
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800e0e0:	b002      	add	sp, #8
 800e0e2:	4770      	bx	lr
 800e0e4:	08016940 	.word	0x08016940

0800e0e8 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b099      	sub	sp, #100	; 0x64
 800e0ec:	af04      	add	r7, sp, #16
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	607b      	str	r3, [r7, #4]
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	72fb      	strb	r3, [r7, #11]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f000 fb68 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e100:	4603      	mov	r3, r0
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	3228      	adds	r2, #40	; 0x28
 800e106:	6812      	ldr	r2, [r2, #0]
 800e108:	4618      	mov	r0, r3
 800e10a:	4790      	blx	r2
    if (expected != actual)
 800e10c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e110:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800e114:	429a      	cmp	r2, r3
 800e116:	d029      	beq.n	800e16c <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	339c      	adds	r3, #156	; 0x9c
 800e11e:	681c      	ldr	r4, [r3, #0]
 800e120:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e124:	6879      	ldr	r1, [r7, #4]
 800e126:	4618      	mov	r0, r3
 800e128:	f7f9 f8a9 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e12c:	f107 0014 	add.w	r0, r7, #20
 800e130:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e134:	9302      	str	r3, [sp, #8]
 800e136:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800e13a:	9301      	str	r3, [sp, #4]
 800e13c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e140:	9300      	str	r3, [sp, #0]
 800e142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e146:	68f9      	ldr	r1, [r7, #12]
 800e148:	f7fb fca6 	bl	8009a98 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 800e14c:	f107 0314 	add.w	r3, r7, #20
 800e150:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e152:	4619      	mov	r1, r3
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	47a0      	blx	r4
 800e158:	f107 0314 	add.w	r3, r7, #20
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fc f8a5 	bl	800a2ac <_ZN23SignedBytesEqualFailureD1Ev>
 800e162:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e166:	4618      	mov	r0, r3
 800e168:	f7f9 fc41 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800e16c:	bf00      	nop
 800e16e:	3754      	adds	r7, #84	; 0x54
 800e170:	46bd      	mov	sp, r7
 800e172:	bd90      	pop	{r4, r7, pc}

0800e174 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e174:	b590      	push	{r4, r7, lr}
 800e176:	b09d      	sub	sp, #116	; 0x74
 800e178:	af04      	add	r7, sp, #16
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
 800e180:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f000 fb24 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e188:	4603      	mov	r3, r0
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	3228      	adds	r2, #40	; 0x28
 800e18e:	6812      	ldr	r2, [r2, #0]
 800e190:	4618      	mov	r0, r3
 800e192:	4790      	blx	r2
    if (expected != actual)
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d03f      	beq.n	800e21c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	339c      	adds	r3, #156	; 0x9c
 800e1a2:	681c      	ldr	r4, [r3, #0]
 800e1a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e1a8:	68b9      	ldr	r1, [r7, #8]
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7f9 feec 	bl	8007f88 <_Z10StringFromPKv>
 800e1b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e1b4:	6879      	ldr	r1, [r7, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f9 fee6 	bl	8007f88 <_Z10StringFromPKv>
 800e1bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e1c0:	6839      	ldr	r1, [r7, #0]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7f9 f85b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e1c8:	f107 0014 	add.w	r0, r7, #20
 800e1cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e1d0:	9302      	str	r3, [sp, #8]
 800e1d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e1d6:	9301      	str	r3, [sp, #4]
 800e1d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e1e2:	68f9      	ldr	r1, [r7, #12]
 800e1e4:	f7fb f826 	bl	8009234 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e1e8:	f107 0314 	add.w	r3, r7, #20
 800e1ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	47a0      	blx	r4
 800e1f4:	f107 0314 	add.w	r3, r7, #20
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fc f967 	bl	800a4cc <_ZN13EqualsFailureD1Ev>
 800e1fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e202:	4618      	mov	r0, r3
 800e204:	f7f9 fbf3 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e208:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f9 fbee 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e212:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e216:	4618      	mov	r0, r3
 800e218:	f7f9 fbe9 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800e21c:	bf00      	nop
 800e21e:	3764      	adds	r7, #100	; 0x64
 800e220:	46bd      	mov	sp, r7
 800e222:	bd90      	pop	{r4, r7, pc}

0800e224 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e224:	b590      	push	{r4, r7, lr}
 800e226:	b09d      	sub	sp, #116	; 0x74
 800e228:	af04      	add	r7, sp, #16
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
 800e230:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f000 facc 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e238:	4603      	mov	r3, r0
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	3228      	adds	r2, #40	; 0x28
 800e23e:	6812      	ldr	r2, [r2, #0]
 800e240:	4618      	mov	r0, r3
 800e242:	4790      	blx	r2
    if (expected != actual)
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d03f      	beq.n	800e2cc <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	339c      	adds	r3, #156	; 0x9c
 800e252:	681c      	ldr	r4, [r3, #0]
 800e254:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e258:	68b9      	ldr	r1, [r7, #8]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7f9 febe 	bl	8007fdc <_Z10StringFromPFvvE>
 800e260:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e264:	6879      	ldr	r1, [r7, #4]
 800e266:	4618      	mov	r0, r3
 800e268:	f7f9 feb8 	bl	8007fdc <_Z10StringFromPFvvE>
 800e26c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	4618      	mov	r0, r3
 800e274:	f7f9 f803 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e278:	f107 0014 	add.w	r0, r7, #20
 800e27c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e280:	9302      	str	r3, [sp, #8]
 800e282:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e286:	9301      	str	r3, [sp, #4]
 800e288:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e290:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e292:	68f9      	ldr	r1, [r7, #12]
 800e294:	f7fa ffce 	bl	8009234 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e298:	f107 0314 	add.w	r3, r7, #20
 800e29c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e29e:	4619      	mov	r1, r3
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	47a0      	blx	r4
 800e2a4:	f107 0314 	add.w	r3, r7, #20
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fc f90f 	bl	800a4cc <_ZN13EqualsFailureD1Ev>
 800e2ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f9 fb9b 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e2b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7f9 fb96 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e2c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7f9 fb91 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800e2cc:	bf00      	nop
 800e2ce:	3764      	adds	r7, #100	; 0x64
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd90      	pop	{r4, r7, pc}

0800e2d4 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e2d4:	b590      	push	{r4, r7, lr}
 800e2d6:	b09d      	sub	sp, #116	; 0x74
 800e2d8:	af02      	add	r7, sp, #8
 800e2da:	6278      	str	r0, [r7, #36]	; 0x24
 800e2dc:	ed87 0b06 	vstr	d0, [r7, #24]
 800e2e0:	ed87 1b04 	vstr	d1, [r7, #16]
 800e2e4:	ed87 2b02 	vstr	d2, [r7, #8]
 800e2e8:	6239      	str	r1, [r7, #32]
 800e2ea:	607a      	str	r2, [r7, #4]
 800e2ec:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e2ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2f0:	f000 fa6e 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	3228      	adds	r2, #40	; 0x28
 800e2fa:	6812      	ldr	r2, [r2, #0]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 800e300:	ed97 2b02 	vldr	d2, [r7, #8]
 800e304:	ed97 1b04 	vldr	d1, [r7, #16]
 800e308:	ed97 0b06 	vldr	d0, [r7, #24]
 800e30c:	f7fe fd5c 	bl	800cdc8 <_Z13doubles_equalddd>
 800e310:	4603      	mov	r3, r0
 800e312:	f083 0301 	eor.w	r3, r3, #1
 800e316:	b2db      	uxtb	r3, r3
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d029      	beq.n	800e370 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 800e31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	339c      	adds	r3, #156	; 0x9c
 800e322:	681c      	ldr	r4, [r3, #0]
 800e324:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e328:	6a39      	ldr	r1, [r7, #32]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7f8 ffa7 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e330:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e334:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	ed97 2b02 	vldr	d2, [r7, #8]
 800e33e:	ed97 1b04 	vldr	d1, [r7, #16]
 800e342:	ed97 0b06 	vldr	d0, [r7, #24]
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e34c:	f7fa ffb4 	bl	80092b8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 800e350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e356:	4619      	mov	r1, r3
 800e358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e35a:	47a0      	blx	r4
 800e35c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e360:	4618      	mov	r0, r3
 800e362:	f7fc f891 	bl	800a488 <_ZN19DoublesEqualFailureD1Ev>
 800e366:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7f9 fb3f 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800e370:	bf00      	nop
 800e372:	376c      	adds	r7, #108	; 0x6c
 800e374:	46bd      	mov	sp, r7
 800e376:	bd90      	pop	{r4, r7, pc}

0800e378 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e378:	b590      	push	{r4, r7, lr}
 800e37a:	b0a7      	sub	sp, #156	; 0x9c
 800e37c:	af04      	add	r7, sp, #16
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f000 fa22 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e38c:	4603      	mov	r3, r0
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	3228      	adds	r2, #40	; 0x28
 800e392:	6812      	ldr	r2, [r2, #0]
 800e394:	4618      	mov	r0, r3
 800e396:	4790      	blx	r2
	if (length == 0) return;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d075      	beq.n	800e48a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d102      	bne.n	800e3aa <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d071      	beq.n	800e48e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d002      	beq.n	800e3b6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d12d      	bne.n	800e412 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	339c      	adds	r3, #156	; 0x9c
 800e3bc:	681c      	ldr	r4, [r3, #0]
 800e3be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e3c2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7f8 ff59 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e3cc:	f107 0010 	add.w	r0, r7, #16
 800e3d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e3d4:	9303      	str	r3, [sp, #12]
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	9302      	str	r3, [sp, #8]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	9301      	str	r3, [sp, #4]
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e3ea:	68f9      	ldr	r1, [r7, #12]
 800e3ec:	f7fb fd82 	bl	8009ef4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800e3f0:	f107 0310 	add.w	r3, r7, #16
 800e3f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	47a0      	blx	r4
 800e3fe:	f107 0310 	add.w	r3, r7, #16
 800e402:	4618      	mov	r0, r3
 800e404:	f7fb feec 	bl	800a1e0 <_ZN18BinaryEqualFailureD1Ev>
 800e408:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7f9 faee 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	6879      	ldr	r1, [r7, #4]
 800e416:	68b8      	ldr	r0, [r7, #8]
 800e418:	f7f8 fe50 	bl	80070bc <_ZN12SimpleString6MemCmpEPKvS1_j>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	bf14      	ite	ne
 800e422:	2301      	movne	r3, #1
 800e424:	2300      	moveq	r3, #0
 800e426:	b2db      	uxtb	r3, r3
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d031      	beq.n	800e490 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	339c      	adds	r3, #156	; 0x9c
 800e432:	681c      	ldr	r4, [r3, #0]
 800e434:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e438:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7f8 ff1e 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e442:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800e446:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e44a:	9303      	str	r3, [sp, #12]
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	9302      	str	r3, [sp, #8]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	9301      	str	r3, [sp, #4]
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e45c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e460:	68f9      	ldr	r1, [r7, #12]
 800e462:	f7fb fd47 	bl	8009ef4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800e466:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e46a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e46e:	4619      	mov	r1, r3
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	47a0      	blx	r4
 800e474:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fb feb1 	bl	800a1e0 <_ZN18BinaryEqualFailureD1Ev>
 800e47e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e482:	4618      	mov	r0, r3
 800e484:	f7f9 fab3 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e488:	e002      	b.n	800e490 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 800e48a:	bf00      	nop
 800e48c:	e000      	b.n	800e490 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800e48e:	bf00      	nop
}
 800e490:	378c      	adds	r7, #140	; 0x8c
 800e492:	46bd      	mov	sp, r7
 800e494:	bd90      	pop	{r4, r7, pc}

0800e496 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800e496:	b590      	push	{r4, r7, lr}
 800e498:	b09b      	sub	sp, #108	; 0x6c
 800e49a:	af06      	add	r7, sp, #24
 800e49c:	60f8      	str	r0, [r7, #12]
 800e49e:	60b9      	str	r1, [r7, #8]
 800e4a0:	607a      	str	r2, [r7, #4]
 800e4a2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f000 f993 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	3228      	adds	r2, #40	; 0x28
 800e4b0:	6812      	ldr	r2, [r2, #0]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	405a      	eors	r2, r3
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	4013      	ands	r3, r2
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d02b      	beq.n	800e51c <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	339c      	adds	r3, #156	; 0x9c
 800e4ca:	681c      	ldr	r4, [r3, #0]
 800e4cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e4d0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7f8 fed3 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e4d8:	f107 0014 	add.w	r0, r7, #20
 800e4dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e4e0:	9304      	str	r3, [sp, #16]
 800e4e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4e4:	9303      	str	r3, [sp, #12]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	9302      	str	r3, [sp, #8]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	9301      	str	r3, [sp, #4]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4f6:	68f9      	ldr	r1, [r7, #12]
 800e4f8:	f7fb fd8c 	bl	800a014 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 800e4fc:	f107 0314 	add.w	r3, r7, #20
 800e500:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e502:	4619      	mov	r1, r3
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	47a0      	blx	r4
 800e508:	f107 0314 	add.w	r3, r7, #20
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7fb fe45 	bl	800a19c <_ZN16BitsEqualFailureD1Ev>
 800e512:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e516:	4618      	mov	r0, r3
 800e518:	f7f9 fa69 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800e51c:	bf00      	nop
 800e51e:	3754      	adds	r7, #84	; 0x54
 800e520:	46bd      	mov	sp, r7
 800e522:	bd90      	pop	{r4, r7, pc}

0800e524 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 800e524:	b590      	push	{r4, r7, lr}
 800e526:	b09d      	sub	sp, #116	; 0x74
 800e528:	af04      	add	r7, sp, #16
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	607a      	str	r2, [r7, #4]
 800e52e:	603b      	str	r3, [r7, #0]
 800e530:	460b      	mov	r3, r1
 800e532:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f000 f94b 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e53a:	4603      	mov	r3, r0
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	3228      	adds	r2, #40	; 0x28
 800e540:	6812      	ldr	r2, [r2, #0]
 800e542:	4618      	mov	r0, r3
 800e544:	4790      	blx	r2
    if (failed)
 800e546:	7afb      	ldrb	r3, [r7, #11]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d03f      	beq.n	800e5cc <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	339c      	adds	r3, #156	; 0x9c
 800e552:	681c      	ldr	r4, [r3, #0]
 800e554:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e558:	6879      	ldr	r1, [r7, #4]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7f8 fe8f 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e560:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e564:	6839      	ldr	r1, [r7, #0]
 800e566:	4618      	mov	r0, r3
 800e568:	f7f8 fe89 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e56c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e570:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e572:	4618      	mov	r0, r3
 800e574:	f7f8 fe83 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e578:	f107 0014 	add.w	r0, r7, #20
 800e57c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e580:	9302      	str	r3, [sp, #8]
 800e582:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e586:	9301      	str	r3, [sp, #4]
 800e588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e590:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e592:	68f9      	ldr	r1, [r7, #12]
 800e594:	f7fa ff42 	bl	800941c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e598:	f107 0314 	add.w	r3, r7, #20
 800e59c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e59e:	4619      	mov	r1, r3
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	47a0      	blx	r4
 800e5a4:	f107 0314 	add.w	r3, r7, #20
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fb ff4b 	bl	800a444 <_ZN17CheckEqualFailureD1Ev>
 800e5ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7f9 fa1b 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e5b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7f9 fa16 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e5c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7f9 fa11 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800e5cc:	bf00      	nop
 800e5ce:	3764      	adds	r7, #100	; 0x64
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd90      	pop	{r4, r7, pc}

0800e5d4 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 800e5d4:	b590      	push	{r4, r7, lr}
 800e5d6:	b09d      	sub	sp, #116	; 0x74
 800e5d8:	af04      	add	r7, sp, #16
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	607a      	str	r2, [r7, #4]
 800e5de:	603b      	str	r3, [r7, #0]
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f000 f8f3 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	3228      	adds	r2, #40	; 0x28
 800e5f0:	6812      	ldr	r2, [r2, #0]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	4790      	blx	r2
    if (!comparison)
 800e5f6:	7afb      	ldrb	r3, [r7, #11]
 800e5f8:	f083 0301 	eor.w	r3, r3, #1
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d03f      	beq.n	800e682 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	339c      	adds	r3, #156	; 0x9c
 800e608:	681c      	ldr	r4, [r3, #0]
 800e60a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e60e:	6879      	ldr	r1, [r7, #4]
 800e610:	4618      	mov	r0, r3
 800e612:	f7f8 fe34 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e616:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e61a:	6839      	ldr	r1, [r7, #0]
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7f8 fe2e 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e626:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e628:	4618      	mov	r0, r3
 800e62a:	f7f8 fe28 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800e62e:	f107 0014 	add.w	r0, r7, #20
 800e632:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e636:	9302      	str	r3, [sp, #8]
 800e638:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e646:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e648:	68f9      	ldr	r1, [r7, #12]
 800e64a:	f7fa ff95 	bl	8009578 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800e64e:	f107 0314 	add.w	r3, r7, #20
 800e652:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e654:	4619      	mov	r1, r3
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	47a0      	blx	r4
 800e65a:	f107 0314 	add.w	r3, r7, #20
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fb fece 	bl	800a400 <_ZN17ComparisonFailureD1Ev>
 800e664:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e668:	4618      	mov	r0, r3
 800e66a:	f7f9 f9c0 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e66e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e672:	4618      	mov	r0, r3
 800e674:	f7f9 f9bb 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800e678:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7f9 f9b6 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800e682:	bf00      	nop
 800e684:	3764      	adds	r7, #100	; 0x64
 800e686:	46bd      	mov	sp, r7
 800e688:	bd90      	pop	{r4, r7, pc}
	...

0800e68c <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 800e68c:	b5b0      	push	{r4, r5, r7, lr}
 800e68e:	b088      	sub	sp, #32
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 800e69a:	f107 0310 	add.w	r3, r7, #16
 800e69e:	4924      	ldr	r1, [pc, #144]	; (800e730 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7f8 fdec 	bl	800727e <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 800e6a6:	f107 0310 	add.w	r3, r7, #16
 800e6aa:	6879      	ldr	r1, [r7, #4]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7f9 fa2d 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 800e6b2:	f107 0310 	add.w	r3, r7, #16
 800e6b6:	491f      	ldr	r1, [pc, #124]	; (800e734 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7f9 fa27 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 800e6be:	f107 0318 	add.w	r3, r7, #24
 800e6c2:	6839      	ldr	r1, [r7, #0]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f9 fe47 	bl	8008358 <_Z10StringFromj>
 800e6ca:	f107 0218 	add.w	r2, r7, #24
 800e6ce:	f107 0310 	add.w	r3, r7, #16
 800e6d2:	4611      	mov	r1, r2
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f9 fa07 	bl	8007ae8 <_ZN12SimpleStringpLERKS_>
 800e6da:	f107 0318 	add.w	r3, r7, #24
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7f9 f985 	bl	80079ee <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 800e6e4:	f107 0310 	add.w	r3, r7, #16
 800e6e8:	4913      	ldr	r1, [pc, #76]	; (800e738 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7f9 fa0e 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 800e6f0:	f107 0310 	add.w	r3, r7, #16
 800e6f4:	68b9      	ldr	r1, [r7, #8]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7f9 fa08 	bl	8007b0c <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f000 f867 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e702:	4604      	mov	r4, r0
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	3338      	adds	r3, #56	; 0x38
 800e708:	681d      	ldr	r5, [r3, #0]
 800e70a:	f107 0310 	add.w	r3, r7, #16
 800e70e:	4618      	mov	r0, r3
 800e710:	f7f9 f940 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800e714:	4603      	mov	r3, r0
 800e716:	4619      	mov	r1, r3
 800e718:	4620      	mov	r0, r4
 800e71a:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 800e71c:	f107 0310 	add.w	r3, r7, #16
 800e720:	4618      	mov	r0, r3
 800e722:	f7f9 f964 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800e726:	bf00      	nop
 800e728:	3720      	adds	r7, #32
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bdb0      	pop	{r4, r5, r7, pc}
 800e72e:	bf00      	nop
 800e730:	08016958 	.word	0x08016958
 800e734:	0801695c 	.word	0x0801695c
 800e738:	08016960 	.word	0x08016960

0800e73c <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 800e73c:	b590      	push	{r4, r7, lr}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
 800e748:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	3370      	adds	r3, #112	; 0x70
 800e750:	681c      	ldr	r4, [r3, #0]
 800e752:	68b8      	ldr	r0, [r7, #8]
 800e754:	f7f9 f91e 	bl	8007994 <_ZNK12SimpleString12asCharStringEv>
 800e758:	4601      	mov	r1, r0
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	47a0      	blx	r4
}
 800e762:	bf00      	nop
 800e764:	3714      	adds	r7, #20
 800e766:	46bd      	mov	sp, r7
 800e768:	bd90      	pop	{r4, r7, pc}

0800e76a <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 f82b 	bl	800e7d0 <_ZN10UtestShell13getTestResultEv>
 800e77a:	4603      	mov	r3, r0
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	323c      	adds	r2, #60	; 0x3c
 800e780:	6812      	ldr	r2, [r2, #0]
 800e782:	6839      	ldr	r1, [r7, #0]
 800e784:	4618      	mov	r0, r3
 800e786:	4790      	blx	r2
}
 800e788:	bf00      	nop
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 800e79a:	4a04      	ldr	r2, [pc, #16]	; (800e7ac <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	6013      	str	r3, [r2, #0]
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr
 800e7ac:	20000764 	.word	0x20000764

0800e7b0 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 800e7ba:	4a04      	ldr	r2, [pc, #16]	; (800e7cc <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	6013      	str	r3, [r2, #0]
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	20000768 	.word	0x20000768

0800e7d0 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 800e7d8:	4b09      	ldr	r3, [pc, #36]	; (800e800 <_ZN10UtestShell13getTestResultEv+0x30>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d109      	bne.n	800e7f4 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 800e7e0:	f7fe fbc4 	bl	800cf6c <_ZN22OutsideTestRunnerUTest8instanceEv>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	32a4      	adds	r2, #164	; 0xa4
 800e7ea:	6812      	ldr	r2, [r2, #0]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	4790      	blx	r2
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	e001      	b.n	800e7f8 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 800e7f4:	4b02      	ldr	r3, [pc, #8]	; (800e800 <_ZN10UtestShell13getTestResultEv+0x30>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	20000764 	.word	0x20000764

0800e804 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 800e804:	b580      	push	{r7, lr}
 800e806:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 800e808:	4b05      	ldr	r3, [pc, #20]	; (800e820 <_ZN10UtestShell10getCurrentEv+0x1c>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d103      	bne.n	800e818 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 800e810:	f7fe fbac 	bl	800cf6c <_ZN22OutsideTestRunnerUTest8instanceEv>
 800e814:	4603      	mov	r3, r0
 800e816:	e001      	b.n	800e81c <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 800e818:	4b01      	ldr	r3, [pc, #4]	; (800e820 <_ZN10UtestShell10getCurrentEv+0x1c>)
 800e81a:	681b      	ldr	r3, [r3, #0]
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	20000768 	.word	0x20000768

0800e824 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 800e824:	b480      	push	{r7}
 800e826:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 800e828:	4b03      	ldr	r3, [pc, #12]	; (800e838 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 800e82a:	681b      	ldr	r3, [r3, #0]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	20000090 	.word	0x20000090

0800e83c <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 800e83c:	b480      	push	{r7}
 800e83e:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 800e840:	4b03      	ldr	r3, [pc, #12]	; (800e850 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 800e842:	4a04      	ldr	r2, [pc, #16]	; (800e854 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 800e844:	601a      	str	r2, [r3, #0]
}
 800e846:	bf00      	nop
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	20000090 	.word	0x20000090
 800e854:	2000008c 	.word	0x2000008c

0800e858 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	4a04      	ldr	r2, [pc, #16]	; (800e874 <_ZN5UtestC1Ev+0x1c>)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	601a      	str	r2, [r3, #0]
{
}
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr
 800e874:	080185ec 	.word	0x080185ec

0800e878 <_ZN5UtestD1Ev>:

Utest::~Utest()
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	4a04      	ldr	r2, [pc, #16]	; (800e894 <_ZN5UtestD1Ev+0x1c>)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	601a      	str	r2, [r3, #0]
{
}
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4618      	mov	r0, r3
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr
 800e894:	080185ec 	.word	0x080185ec

0800e898 <_ZN5UtestD0Ev>:
Utest::~Utest()
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
}
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7ff ffe9 	bl	800e878 <_ZN5UtestD1Ev>
 800e8a6:	2104      	movs	r1, #4
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7f7 fe13 	bl	80064d4 <_ZdlPvj>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 800e8c0:	4b0d      	ldr	r3, [pc, #52]	; (800e8f8 <_ZN5Utest3runEv+0x40>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	6879      	ldr	r1, [r7, #4]
 800e8c6:	480d      	ldr	r0, [pc, #52]	; (800e8fc <_ZN5Utest3runEv+0x44>)
 800e8c8:	4798      	blx	r3
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	bf14      	ite	ne
 800e8d0:	2301      	movne	r3, #1
 800e8d2:	2300      	moveq	r3, #0
 800e8d4:	b2db      	uxtb	r3, r3
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d004      	beq.n	800e8e4 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 800e8da:	4b07      	ldr	r3, [pc, #28]	; (800e8f8 <_ZN5Utest3runEv+0x40>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	6879      	ldr	r1, [r7, #4]
 800e8e0:	4807      	ldr	r0, [pc, #28]	; (800e900 <_ZN5Utest3runEv+0x48>)
 800e8e2:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 800e8e4:	4b04      	ldr	r3, [pc, #16]	; (800e8f8 <_ZN5Utest3runEv+0x40>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	6879      	ldr	r1, [r7, #4]
 800e8ea:	4806      	ldr	r0, [pc, #24]	; (800e904 <_ZN5Utest3runEv+0x4c>)
 800e8ec:	4798      	blx	r3
}
 800e8ee:	bf00      	nop
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	200000a0 	.word	0x200000a0
 800e8fc:	0800cfc9 	.word	0x0800cfc9
 800e900:	0800cfe5 	.word	0x0800cfe5
 800e904:	0800d001 	.word	0x0800d001

0800e908 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
}
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	4a04      	ldr	r2, [pc, #16]	; (800e960 <_ZN14TestTerminatorD1Ev+0x1c>)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	601a      	str	r2, [r3, #0]
{
}
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4618      	mov	r0, r3
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	080185d8 	.word	0x080185d8

0800e964 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 800e96c:	2300      	movs	r3, #0
 800e96e:	60fb      	str	r3, [r7, #12]
 800e970:	f107 030c 	add.w	r3, r7, #12
 800e974:	4618      	mov	r0, r3
 800e976:	f7f7 ff6f 	bl	8006858 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800e97a:	f107 030c 	add.w	r3, r7, #12
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 f82c 	bl	800e9dc <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 800e984:	f107 030c 	add.w	r3, r7, #12
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 f835 	bl	800e9f8 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 800e98e:	bf00      	nop
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
	...

0800e998 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	4a05      	ldr	r2, [pc, #20]	; (800e9b8 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	601a      	str	r2, [r3, #0]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7ff ffcb 	bl	800e944 <_ZN14TestTerminatorD1Ev>
{
}
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	080185c4 	.word	0x080185c4

0800e9bc <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
}
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff ffe7 	bl	800e998 <_ZN20NormalTestTerminatorD1Ev>
 800e9ca:	2104      	movs	r1, #4
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7f7 fd81 	bl	80064d4 <_ZdlPvj>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 800e9e4:	4b03      	ldr	r3, [pc, #12]	; (800e9f4 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800e9ea:	bf00      	nop
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	2000009c 	.word	0x2000009c

0800e9f8 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	4a05      	ldr	r2, [pc, #20]	; (800ea18 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff ff9b 	bl	800e944 <_ZN14TestTerminatorD1Ev>
{
}
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	4618      	mov	r0, r3
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	080185b0 	.word	0x080185b0

0800ea1c <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
}
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff ffe7 	bl	800e9f8 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800ea2a:	2104      	movs	r1, #4
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7f7 fd51 	bl	80064d4 <_ZdlPvj>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4618      	mov	r0, r3
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 800ea44:	f7fe fbbc 	bl	800d1c0 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff ff8a 	bl	800e964 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	4a05      	ldr	r2, [pc, #20]	; (800ea78 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	601a      	str	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7ff ff95 	bl	800e998 <_ZN20NormalTestTerminatorD1Ev>
{
}
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4618      	mov	r0, r3
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	0801859c 	.word	0x0801859c

0800ea7c <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
}
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7ff ffe7 	bl	800ea58 <_ZN22CrashingTestTerminatorD1Ev>
 800ea8a:	2104      	movs	r1, #4
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f7f7 fd21 	bl	80064d4 <_ZdlPvj>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4618      	mov	r0, r3
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d007      	beq.n	800eac8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3310      	adds	r3, #16
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6838      	ldr	r0, [r7, #0]
 800eac2:	4798      	blx	r3
 800eac4:	4603      	mov	r3, r0
 800eac6:	e000      	b.n	800eaca <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 800eac8:	2300      	movs	r3, #0
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d02d      	beq.n	800eb32 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800eade:	4293      	cmp	r3, r2
 800eae0:	d201      	bcs.n	800eae6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	e001      	b.n	800eaea <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 800eae6:	f04f 33ff 	mov.w	r3, #4294967295
 800eaea:	f240 3237 	movw	r2, #823	; 0x337
 800eaee:	4914      	ldr	r1, [pc, #80]	; (800eb40 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7f7 fcff 	bl	80064f4 <_ZnajPKci>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800eb00:	2300      	movs	r3, #0
 800eb02:	60bb      	str	r3, [r7, #8]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d212      	bcs.n	800eb34 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4413      	add	r3, r2
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	330c      	adds	r3, #12
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	4798      	blx	r3
 800eb28:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	60bb      	str	r3, [r7, #8]
 800eb30:	e7e8      	b.n	800eb04 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 800eb32:	bf00      	nop
    }
}
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4618      	mov	r0, r3
 800eb38:	3710      	adds	r7, #16
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	080167e8 	.word	0x080167e8

0800eb44 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d004      	beq.n	800eb5e <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7f7 fcdf 	bl	800651c <_ZdaPv>
}
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b087      	sub	sp, #28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4413      	add	r3, r2
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	009b      	lsls	r3, r3, #2
 800eb8a:	4413      	add	r3, r2
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4413      	add	r3, r2
 800eb9a:	697a      	ldr	r2, [r7, #20]
 800eb9c:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	4413      	add	r3, r2
 800eba8:	693a      	ldr	r2, [r7, #16]
 800ebaa:	601a      	str	r2, [r3, #0]
}
 800ebac:	bf00      	nop
 800ebae:	371c      	adds	r7, #28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d028      	beq.n	800ec1c <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 800ebca:	4b17      	ldr	r3, [pc, #92]	; (800ec28 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	6838      	ldr	r0, [r7, #0]
 800ebd0:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	60fb      	str	r3, [r7, #12]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d019      	beq.n	800ec14 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d01b      	beq.n	800ec20 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 800ebe8:	4b10      	ldr	r3, [pc, #64]	; (800ec2c <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4798      	blx	r3
 800ebee:	4603      	mov	r3, r0
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	fbb2 f1f3 	udiv	r1, r2, r3
 800ebfa:	fb03 f301 	mul.w	r3, r3, r1
 800ebfe:	1ad3      	subs	r3, r2, r3
 800ec00:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	68f9      	ldr	r1, [r7, #12]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7ff ffae 	bl	800eb68 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	3b01      	subs	r3, #1
 800ec10:	60fb      	str	r3, [r7, #12]
 800ec12:	e7e2      	b.n	800ebda <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f834 	bl	800ec82 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800ec1a:	e002      	b.n	800ec22 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 800ec1c:	bf00      	nop
 800ec1e:	e000      	b.n	800ec22 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 800ec20:	bf00      	nop
}
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	200000d8 	.word	0x200000d8
 800ec2c:	200000dc 	.word	0x200000dc

0800ec30 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d01c      	beq.n	800ec7a <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	085b      	lsrs	r3, r3, #1
 800ec46:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 800ec48:	2300      	movs	r3, #0
 800ec4a:	617b      	str	r3, [r7, #20]
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d20e      	bcs.n	800ec72 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685a      	ldr	r2, [r3, #4]
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	3b01      	subs	r3, #1
 800ec5e:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	6979      	ldr	r1, [r7, #20]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7ff ff7f 	bl	800eb68 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	617b      	str	r3, [r7, #20]
 800ec70:	e7ec      	b.n	800ec4c <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 f805 	bl	800ec82 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800ec78:	e000      	b.n	800ec7c <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 800ec7a:	bf00      	nop
}
 800ec7c:	3718      	adds	r7, #24
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b084      	sub	sp, #16
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60bb      	str	r3, [r7, #8]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d221      	bcs.n	800ece0 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6859      	ldr	r1, [r3, #4]
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	1acb      	subs	r3, r1, r3
 800eca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecac:	3b01      	subs	r3, #1
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4413      	add	r3, r2
 800ecb2:	6818      	ldr	r0, [r3, #0]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6859      	ldr	r1, [r3, #4]
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	1acb      	subs	r3, r1, r3
 800ecc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecc4:	3b01      	subs	r3, #1
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	4413      	add	r3, r2
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	3308      	adds	r3, #8
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	68f9      	ldr	r1, [r7, #12]
 800ecd4:	4798      	blx	r3
 800ecd6:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	60bb      	str	r3, [r7, #8]
 800ecde:	e7d8      	b.n	800ec92 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 800ece0:	bf00      	nop
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
    return get(0);
 800ecf0:	2100      	movs	r1, #0
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 f805 	bl	800ed02 <_ZNK22UtestShellPointerArray3getEj>
 800ecf8:	4603      	mov	r3, r0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 800ed02:	b480      	push	{r7}
 800ed04:	b083      	sub	sp, #12
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	683a      	ldr	r2, [r7, #0]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d301      	bcc.n	800ed1a <_ZNK22UtestShellPointerArray3getEj+0x18>
 800ed16:	2300      	movs	r3, #0
 800ed18:	e005      	b.n	800ed26 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	681b      	ldr	r3, [r3, #0]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
	...

0800ed34 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
 800ed40:	603b      	str	r3, [r7, #0]
 800ed42:	4a10      	ldr	r2, [pc, #64]	; (800ed84 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 800ed48:	6879      	ldr	r1, [r7, #4]
 800ed4a:	68b8      	ldr	r0, [r7, #8]
 800ed4c:	f7fe fc28 	bl	800d5a0 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	68b8      	ldr	r0, [r7, #8]
 800ed54:	f7fe fc32 	bl	800d5bc <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 800ed58:	69b9      	ldr	r1, [r7, #24]
 800ed5a:	68b8      	ldr	r0, [r7, #8]
 800ed5c:	f7fe fc04 	bl	800d568 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 800ed60:	69f9      	ldr	r1, [r7, #28]
 800ed62:	68b8      	ldr	r0, [r7, #8]
 800ed64:	f7fe fc0e 	bl	800d584 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 800ed68:	f7fd fc32 	bl	800c5d0 <_ZN12TestRegistry18getCurrentRegistryEv>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	3208      	adds	r2, #8
 800ed72:	6812      	ldr	r2, [r2, #0]
 800ed74:	68b9      	ldr	r1, [r7, #8]
 800ed76:	4618      	mov	r0, r3
 800ed78:	4790      	blx	r2
}
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	080184e0 	.word	0x080184e0

0800ed88 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	4a04      	ldr	r2, [pc, #16]	; (800eda4 <_ZN13TestInstallerD1Ev+0x1c>)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	601a      	str	r2, [r3, #0]
{
}
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr
 800eda4:	080184e0 	.word	0x080184e0

0800eda8 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
}
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7ff ffe9 	bl	800ed88 <_ZN13TestInstallerD1Ev>
 800edb6:	2104      	movs	r1, #4
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7f7 fb8b 	bl	80064d4 <_ZdlPvj>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4618      	mov	r0, r3
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10a      	bne.n	800edee <_Z41__static_initialization_and_destruction_0ii+0x26>
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edde:	4293      	cmp	r3, r2
 800ede0:	d105      	bne.n	800edee <_Z41__static_initialization_and_destruction_0ii+0x26>
 800ede2:	4805      	ldr	r0, [pc, #20]	; (800edf8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800ede4:	f7ff fe38 	bl	800ea58 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 800ede8:	4804      	ldr	r0, [pc, #16]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800edea:	f7ff fdd5 	bl	800e998 <_ZN20NormalTestTerminatorD1Ev>
}
 800edee:	bf00      	nop
 800edf0:	3708      	adds	r7, #8
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	2000008c 	.word	0x2000008c
 800edfc:	20000088 	.word	0x20000088

0800ee00 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 800ee00:	b580      	push	{r7, lr}
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ee08:	2001      	movs	r0, #1
 800ee0a:	f7ff ffdd 	bl	800edc8 <_Z41__static_initialization_and_destruction_0ii>
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 800ee10:	b580      	push	{r7, lr}
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f7ff ffd5 	bl	800edc8 <_Z41__static_initialization_and_destruction_0ii>
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 800ee20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	ed87 0b00 	vstr	d0, [r7]
 800ee2a:	683c      	ldr	r4, [r7, #0]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800ee32:	2301      	movs	r3, #1
 800ee34:	461e      	mov	r6, r3
 800ee36:	f04f 32ff 	mov.w	r2, #4294967295
 800ee3a:	4b10      	ldr	r3, [pc, #64]	; (800ee7c <_ZSt5isinfd+0x5c>)
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	4629      	mov	r1, r5
 800ee40:	f7f1 fca2 	bl	8000788 <__aeabi_dcmpun>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d10b      	bne.n	800ee62 <_ZSt5isinfd+0x42>
 800ee4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee4e:	4b0b      	ldr	r3, [pc, #44]	; (800ee7c <_ZSt5isinfd+0x5c>)
 800ee50:	4620      	mov	r0, r4
 800ee52:	4629      	mov	r1, r5
 800ee54:	f7f1 fc7a 	bl	800074c <__aeabi_dcmple>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <_ZSt5isinfd+0x42>
 800ee5e:	2300      	movs	r3, #0
 800ee60:	461e      	mov	r6, r3
 800ee62:	b2f3      	uxtb	r3, r6
 800ee64:	f083 0301 	eor.w	r3, r3, #1
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	bf14      	ite	ne
 800ee6e:	2301      	movne	r3, #1
 800ee70:	2300      	moveq	r3, #0
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	4618      	mov	r0, r3
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee7c:	7fefffff 	.word	0x7fefffff

0800ee80 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 800ee80:	b590      	push	{r4, r7, lr}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	ed87 0b00 	vstr	d0, [r7]
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	461c      	mov	r4, r3
 800ee8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee92:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ee96:	f7f1 fc77 	bl	8000788 <__aeabi_dcmpun>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d101      	bne.n	800eea4 <_ZSt5isnand+0x24>
 800eea0:	2300      	movs	r3, #0
 800eea2:	461c      	mov	r4, r3
 800eea4:	b2e3      	uxtb	r3, r4
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	bf14      	ite	ne
 800eeaa:	2301      	movne	r3, #1
 800eeac:	2300      	moveq	r3, #0
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd90      	pop	{r4, r7, pc}

0800eeb8 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 800eeb8:	b590      	push	{r4, r7, lr}
 800eeba:	b095      	sub	sp, #84	; 0x54
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	3334      	adds	r3, #52	; 0x34
 800eeca:	681c      	ldr	r4, [r3, #0]
 800eecc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800eed0:	490f      	ldr	r1, [pc, #60]	; (800ef10 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7f8 f9d3 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800eed8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800eedc:	f107 0314 	add.w	r3, r7, #20
 800eee0:	68f9      	ldr	r1, [r7, #12]
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7f9 ff1c 	bl	8008d20 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800eee8:	f107 0314 	add.w	r3, r7, #20
 800eeec:	4619      	mov	r1, r3
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	47a0      	blx	r4
 800eef2:	f107 0314 	add.w	r3, r7, #20
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7f9 ffd2 	bl	8008ea0 <_ZN11TestFailureD1Ev>
 800eefc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7f8 fd74 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800ef06:	bf00      	nop
 800ef08:	3754      	adds	r7, #84	; 0x54
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd90      	pop	{r4, r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	08016970 	.word	0x08016970

0800ef14 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 800ef14:	b480      	push	{r7}
 800ef16:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 800ef18:	2301      	movs	r3, #1
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 800ef2e:	4b13      	ldr	r3, [pc, #76]	; (800ef7c <PlatformSpecificSetJmpImplementation+0x58>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	225c      	movs	r2, #92	; 0x5c
 800ef34:	fb02 f303 	mul.w	r3, r2, r3
 800ef38:	4a11      	ldr	r2, [pc, #68]	; (800ef80 <PlatformSpecificSetJmpImplementation+0x5c>)
 800ef3a:	4413      	add	r3, r2
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7f1 f96f 	bl	8000220 <setjmp>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	bf0c      	ite	eq
 800ef48:	2301      	moveq	r3, #1
 800ef4a:	2300      	movne	r3, #0
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00e      	beq.n	800ef70 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 800ef52:	4b0a      	ldr	r3, [pc, #40]	; (800ef7c <PlatformSpecificSetJmpImplementation+0x58>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	3301      	adds	r3, #1
 800ef58:	4a08      	ldr	r2, [pc, #32]	; (800ef7c <PlatformSpecificSetJmpImplementation+0x58>)
 800ef5a:	6013      	str	r3, [r2, #0]
        function(data);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6838      	ldr	r0, [r7, #0]
 800ef60:	4798      	blx	r3
        jmp_buf_index--;
 800ef62:	4b06      	ldr	r3, [pc, #24]	; (800ef7c <PlatformSpecificSetJmpImplementation+0x58>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	3b01      	subs	r3, #1
 800ef68:	4a04      	ldr	r2, [pc, #16]	; (800ef7c <PlatformSpecificSetJmpImplementation+0x58>)
 800ef6a:	6013      	str	r3, [r2, #0]
        return 1;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e000      	b.n	800ef72 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3708      	adds	r7, #8
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20000b04 	.word	0x20000b04
 800ef80:	2000076c 	.word	0x2000076c

0800ef84 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 800ef88:	4b07      	ldr	r3, [pc, #28]	; (800efa8 <PlatformSpecificLongJmpImplementation+0x24>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	3b01      	subs	r3, #1
 800ef8e:	4a06      	ldr	r2, [pc, #24]	; (800efa8 <PlatformSpecificLongJmpImplementation+0x24>)
 800ef90:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 800ef92:	4b05      	ldr	r3, [pc, #20]	; (800efa8 <PlatformSpecificLongJmpImplementation+0x24>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	225c      	movs	r2, #92	; 0x5c
 800ef98:	fb02 f303 	mul.w	r3, r2, r3
 800ef9c:	4a03      	ldr	r2, [pc, #12]	; (800efac <PlatformSpecificLongJmpImplementation+0x28>)
 800ef9e:	4413      	add	r3, r2
 800efa0:	2101      	movs	r1, #1
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7f1 f942 	bl	800022c <longjmp>
 800efa8:	20000b04 	.word	0x20000b04
 800efac:	2000076c 	.word	0x2000076c

0800efb0 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 800efb0:	b480      	push	{r7}
 800efb2:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 800efb4:	2300      	movs	r3, #0
#endif
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 800efc6:	2000      	movs	r0, #0
 800efc8:	f004 fbee 	bl	80137a8 <time>
 800efcc:	4602      	mov	r2, r0
 800efce:	460b      	mov	r3, r1
 800efd0:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 800efd4:	463b      	mov	r3, r7
 800efd6:	4618      	mov	r0, r3
 800efd8:	f003 fa6c 	bl	80124b4 <localtime>
 800efdc:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	4a04      	ldr	r2, [pc, #16]	; (800eff4 <TimeStringImplementation+0x34>)
 800efe2:	2150      	movs	r1, #80	; 0x50
 800efe4:	4804      	ldr	r0, [pc, #16]	; (800eff8 <TimeStringImplementation+0x38>)
 800efe6:	f004 fb4d 	bl	8013684 <strftime>
    return dateTime;
 800efea:	4b03      	ldr	r3, [pc, #12]	; (800eff8 <TimeStringImplementation+0x38>)
}
 800efec:	4618      	mov	r0, r3
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	080169ac 	.word	0x080169ac
 800eff8:	20000b08 	.word	0x20000b08

0800effc <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 800f006:	6839      	ldr	r1, [r7, #0]
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f003 f889 	bl	8012120 <fopen>
 800f00e:	4603      	mov	r3, r0
#endif
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 800f022:	6839      	ldr	r1, [r7, #0]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f003 f8e9 	bl	80121fc <fputs>
}
 800f02a:	bf00      	nop
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b082      	sub	sp, #8
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f002 fe6a 	bl	8011d14 <fclose>
}
 800f040:	bf00      	nop
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	af00      	add	r7, sp, #0
  fflush(stdout);
 800f04c:	4b03      	ldr	r3, [pc, #12]	; (800f05c <PlatformSpecificFlushImplementation+0x14>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	4618      	mov	r0, r3
 800f054:	f002 ff28 	bl	8011ea8 <fflush>
}
 800f058:	bf00      	nop
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20000100 	.word	0x20000100

0800f060 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 800f06a:	ed97 0b00 	vldr	d0, [r7]
 800f06e:	f7ff ff07 	bl	800ee80 <_ZSt5isnand>
 800f072:	4603      	mov	r3, r0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 800f086:	ed97 0b00 	vldr	d0, [r7]
 800f08a:	f7ff fec9 	bl	800ee20 <_ZSt5isinfd>
 800f08e:	4603      	mov	r3, r0
}
 800f090:	4618      	mov	r0, r3
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 800f098:	b480      	push	{r7}
 800f09a:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 800f09c:	2300      	movs	r3, #0
#endif

}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
}
 800f0b0:	bf00      	nop
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
}
 800f0c4:	bf00      	nop
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
}
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 800f0f0:	4a25      	ldr	r2, [pc, #148]	; (800f188 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	601a      	str	r2, [r3, #0]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	68ba      	ldr	r2, [r7, #8]
 800f0fa:	605a      	str	r2, [r3, #4]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	609a      	str	r2, [r3, #8]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2200      	movs	r2, #0
 800f106:	731a      	strb	r2, [r3, #12]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2200      	movs	r2, #0
 800f10c:	735a      	strb	r2, [r3, #13]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	739a      	strb	r2, [r3, #14]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2200      	movs	r2, #0
 800f118:	73da      	strb	r2, [r3, #15]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2200      	movs	r2, #0
 800f11e:	741a      	strb	r2, [r3, #16]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2200      	movs	r2, #0
 800f124:	745a      	strb	r2, [r3, #17]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2200      	movs	r2, #0
 800f12a:	749a      	strb	r2, [r3, #18]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	74da      	strb	r2, [r3, #19]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2200      	movs	r2, #0
 800f136:	751a      	strb	r2, [r3, #20]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2200      	movs	r2, #0
 800f13c:	755a      	strb	r2, [r3, #21]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2200      	movs	r2, #0
 800f142:	759a      	strb	r2, [r3, #22]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2200      	movs	r2, #0
 800f148:	75da      	strb	r2, [r3, #23]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2200      	movs	r2, #0
 800f14e:	761a      	strb	r2, [r3, #24]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2201      	movs	r2, #1
 800f154:	61da      	str	r2, [r3, #28]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	621a      	str	r2, [r3, #32]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	625a      	str	r2, [r3, #36]	; 0x24
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2200      	movs	r2, #0
 800f166:	629a      	str	r2, [r3, #40]	; 0x28
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	3330      	adds	r3, #48	; 0x30
 800f174:	4905      	ldr	r1, [pc, #20]	; (800f18c <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 800f176:	4618      	mov	r0, r3
 800f178:	f7f8 f881 	bl	800727e <_ZN12SimpleStringC1EPKc>
{
}
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	0801860c 	.word	0x0801860c
 800f18c:	080169c0 	.word	0x080169c0

0800f190 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7f8 fc27 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
	...

0800f1ac <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 800f1ac:	b590      	push	{r4, r7, lr}
 800f1ae:	b085      	sub	sp, #20
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	4a20      	ldr	r2, [pc, #128]	; (800f238 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d015      	beq.n	800f1ee <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c6:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f002 fc9a 	bl	8011b06 <_ZNK10TestFilter7getNextEv>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 800f1d8:	68fc      	ldr	r4, [r7, #12]
 800f1da:	2c00      	cmp	r4, #0
 800f1dc:	d0ed      	beq.n	800f1ba <_ZN20CommandLineArgumentsD1Ev+0xe>
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f7ff ffd6 	bl	800f190 <_ZN10TestFilterD1Ev>
 800f1e4:	2110      	movs	r1, #16
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f7f7 f974 	bl	80064d4 <_ZdlPvj>
    while(groupFilters_) {
 800f1ec:	e7e5      	b.n	800f1ba <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d015      	beq.n	800f222 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1fa:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f200:	4618      	mov	r0, r3
 800f202:	f002 fc80 	bl	8011b06 <_ZNK10TestFilter7getNextEv>
 800f206:	4602      	mov	r2, r0
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 800f20c:	68bc      	ldr	r4, [r7, #8]
 800f20e:	2c00      	cmp	r4, #0
 800f210:	d0ed      	beq.n	800f1ee <_ZN20CommandLineArgumentsD1Ev+0x42>
 800f212:	4620      	mov	r0, r4
 800f214:	f7ff ffbc 	bl	800f190 <_ZN10TestFilterD1Ev>
 800f218:	2110      	movs	r1, #16
 800f21a:	4620      	mov	r0, r4
 800f21c:	f7f7 f95a 	bl	80064d4 <_ZdlPvj>
    while(nameFilters_) {
 800f220:	e7e5      	b.n	800f1ee <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	3330      	adds	r3, #48	; 0x30
 800f226:	4618      	mov	r0, r3
 800f228:	f7f8 fbe1 	bl	80079ee <_ZN12SimpleStringD1Ev>
    }
}
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4618      	mov	r0, r3
 800f230:	3714      	adds	r7, #20
 800f232:	46bd      	mov	sp, r7
 800f234:	bd90      	pop	{r4, r7, pc}
 800f236:	bf00      	nop
 800f238:	0801860c 	.word	0x0801860c

0800f23c <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
}
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff ffb1 	bl	800f1ac <_ZN20CommandLineArgumentsD1Ev>
 800f24a:	2138      	movs	r1, #56	; 0x38
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7f7 f941 	bl	80064d4 <_ZdlPvj>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4618      	mov	r0, r3
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 800f25c:	b5b0      	push	{r4, r5, r7, lr}
 800f25e:	b0be      	sub	sp, #248	; 0xf8
 800f260:	af02      	add	r7, sp, #8
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
 800f266:	2400      	movs	r4, #0
    bool correctParameters = true;
 800f268:	2301      	movs	r3, #1
 800f26a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 800f26e:	2301      	movs	r3, #1
 800f270:	613b      	str	r3, [r7, #16]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	429a      	cmp	r2, r3
 800f27a:	f340 83a4 	ble.w	800f9c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	689a      	ldr	r2, [r3, #8]
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4413      	add	r3, r2
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	f107 0308 	add.w	r3, r7, #8
 800f28e:	4611      	mov	r1, r2
 800f290:	4618      	mov	r0, r3
 800f292:	f7f7 fff4 	bl	800727e <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 800f296:	f107 0314 	add.w	r3, r7, #20
 800f29a:	49c8      	ldr	r1, [pc, #800]	; (800f5bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7f7 ffee 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f2a2:	f107 0214 	add.w	r2, r7, #20
 800f2a6:	f107 0308 	add.w	r3, r7, #8
 800f2aa:	4611      	mov	r1, r2
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7f8 fbaa 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	461d      	mov	r5, r3
 800f2b6:	f107 0314 	add.w	r3, r7, #20
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7f8 fb97 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f2c0:	2d00      	cmp	r5, #0
 800f2c2:	d006      	beq.n	800f2d2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f2d0:	e366      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 800f2d2:	f107 031c 	add.w	r3, r7, #28
 800f2d6:	49ba      	ldr	r1, [pc, #744]	; (800f5c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7f7 ffd0 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f2de:	f107 021c 	add.w	r2, r7, #28
 800f2e2:	f107 0308 	add.w	r3, r7, #8
 800f2e6:	4611      	mov	r1, r2
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7f8 fb8c 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	461d      	mov	r5, r3
 800f2f2:	f107 031c 	add.w	r3, r7, #28
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7f8 fb79 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f2fc:	2d00      	cmp	r5, #0
 800f2fe:	d003      	beq.n	800f308 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2201      	movs	r2, #1
 800f304:	735a      	strb	r2, [r3, #13]
 800f306:	e34b      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 800f308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f30c:	49ad      	ldr	r1, [pc, #692]	; (800f5c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 800f30e:	4618      	mov	r0, r3
 800f310:	f7f7 ffb5 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f314:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f318:	f107 0308 	add.w	r3, r7, #8
 800f31c:	4611      	mov	r1, r2
 800f31e:	4618      	mov	r0, r3
 800f320:	f7f8 fb71 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f324:	4603      	mov	r3, r0
 800f326:	461d      	mov	r5, r3
 800f328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7f8 fb5e 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f332:	2d00      	cmp	r5, #0
 800f334:	d003      	beq.n	800f33e <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	739a      	strb	r2, [r3, #14]
 800f33c:	e330      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 800f33e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f342:	49a1      	ldr	r1, [pc, #644]	; (800f5c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 800f344:	4618      	mov	r0, r3
 800f346:	f7f7 ff9a 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f34a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f34e:	f107 0308 	add.w	r3, r7, #8
 800f352:	4611      	mov	r1, r2
 800f354:	4618      	mov	r0, r3
 800f356:	f7f8 fb56 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f35a:	4603      	mov	r3, r0
 800f35c:	461d      	mov	r5, r3
 800f35e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f362:	4618      	mov	r0, r3
 800f364:	f7f8 fb43 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f368:	2d00      	cmp	r5, #0
 800f36a:	d003      	beq.n	800f374 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	73da      	strb	r2, [r3, #15]
 800f372:	e315      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 800f374:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f378:	4994      	ldr	r1, [pc, #592]	; (800f5cc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7f7 ff7f 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f380:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f384:	f107 0308 	add.w	r3, r7, #8
 800f388:	4611      	mov	r1, r2
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7f8 fb3b 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f390:	4603      	mov	r3, r0
 800f392:	461d      	mov	r5, r3
 800f394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f398:	4618      	mov	r0, r3
 800f39a:	f7f8 fb28 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f39e:	2d00      	cmp	r5, #0
 800f3a0:	d003      	beq.n	800f3aa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	741a      	strb	r2, [r3, #16]
 800f3a8:	e2fa      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 800f3aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f3ae:	4988      	ldr	r1, [pc, #544]	; (800f5d0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7f7 ff64 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f3b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f3ba:	f107 0308 	add.w	r3, r7, #8
 800f3be:	4611      	mov	r1, r2
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7f8 fb20 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	461d      	mov	r5, r3
 800f3ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7f8 fb0d 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f3d4:	2d00      	cmp	r5, #0
 800f3d6:	d003      	beq.n	800f3e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2201      	movs	r2, #1
 800f3dc:	755a      	strb	r2, [r3, #21]
 800f3de:	e2df      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 800f3e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f3e4:	497b      	ldr	r1, [pc, #492]	; (800f5d4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7f7 ff49 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f3ec:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f3f0:	f107 0308 	add.w	r3, r7, #8
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7f8 fb05 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	461d      	mov	r5, r3
 800f400:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f404:	4618      	mov	r0, r3
 800f406:	f7f8 faf2 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f40a:	2d00      	cmp	r5, #0
 800f40c:	d003      	beq.n	800f416 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2201      	movs	r2, #1
 800f412:	745a      	strb	r2, [r3, #17]
 800f414:	e2c4      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 800f416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f41a:	496f      	ldr	r1, [pc, #444]	; (800f5d8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7f7 ff2e 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f422:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f426:	f107 0308 	add.w	r3, r7, #8
 800f42a:	4611      	mov	r1, r2
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7f8 faea 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f432:	4603      	mov	r3, r0
 800f434:	461d      	mov	r5, r3
 800f436:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7f8 fad7 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f440:	2d00      	cmp	r5, #0
 800f442:	d003      	beq.n	800f44c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	749a      	strb	r2, [r3, #18]
 800f44a:	e2a9      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 800f44c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f450:	4962      	ldr	r1, [pc, #392]	; (800f5dc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 800f452:	4618      	mov	r0, r3
 800f454:	f7f7 ff13 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f458:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f45c:	f107 0308 	add.w	r3, r7, #8
 800f460:	4611      	mov	r1, r2
 800f462:	4618      	mov	r0, r3
 800f464:	f7f8 facf 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f468:	4603      	mov	r3, r0
 800f46a:	461d      	mov	r5, r3
 800f46c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f470:	4618      	mov	r0, r3
 800f472:	f7f8 fabc 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f476:	2d00      	cmp	r5, #0
 800f478:	d003      	beq.n	800f482 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2201      	movs	r2, #1
 800f47e:	74da      	strb	r2, [r3, #19]
 800f480:	e28e      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 800f482:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f486:	4956      	ldr	r1, [pc, #344]	; (800f5e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 800f488:	4618      	mov	r0, r3
 800f48a:	f7f7 fef8 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f48e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800f492:	f107 0308 	add.w	r3, r7, #8
 800f496:	4611      	mov	r1, r2
 800f498:	4618      	mov	r0, r3
 800f49a:	f7f8 fab4 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	461d      	mov	r5, r3
 800f4a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7f8 faa1 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f4ac:	2d00      	cmp	r5, #0
 800f4ae:	d003      	beq.n	800f4b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	751a      	strb	r2, [r3, #20]
 800f4b6:	e273      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 800f4b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f4bc:	4949      	ldr	r1, [pc, #292]	; (800f5e4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7f7 fedd 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f4c4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800f4c8:	f107 0308 	add.w	r3, r7, #8
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7f8 fa99 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	461d      	mov	r5, r3
 800f4d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7f8 fa86 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f4e2:	2d00      	cmp	r5, #0
 800f4e4:	d003      	beq.n	800f4ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	759a      	strb	r2, [r3, #22]
 800f4ec:	e258      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 800f4ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f4f2:	493d      	ldr	r1, [pc, #244]	; (800f5e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7f7 fec2 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f4fa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f4fe:	f107 0308 	add.w	r3, r7, #8
 800f502:	4611      	mov	r1, r2
 800f504:	4618      	mov	r0, r3
 800f506:	f7f7 ff7e 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f50a:	4603      	mov	r3, r0
 800f50c:	461d      	mov	r5, r3
 800f50e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f512:	4618      	mov	r0, r3
 800f514:	f7f8 fa6b 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f518:	2d00      	cmp	r5, #0
 800f51a:	d009      	beq.n	800f530 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6859      	ldr	r1, [r3, #4]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	689a      	ldr	r2, [r3, #8]
 800f524:	f107 0310 	add.w	r3, r7, #16
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 fb33 	bl	800fb94 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 800f52e:	e237      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 800f530:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f534:	492d      	ldr	r1, [pc, #180]	; (800f5ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 800f536:	4618      	mov	r0, r3
 800f538:	f7f7 fea1 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f53c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800f540:	f107 0308 	add.w	r3, r7, #8
 800f544:	4611      	mov	r1, r2
 800f546:	4618      	mov	r0, r3
 800f548:	f7f7 ff5d 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f54c:	4603      	mov	r3, r0
 800f54e:	461d      	mov	r5, r3
 800f550:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f554:	4618      	mov	r0, r3
 800f556:	f7f8 fa4a 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f55a:	2d00      	cmp	r5, #0
 800f55c:	d009      	beq.n	800f572 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6859      	ldr	r1, [r3, #4]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	689a      	ldr	r2, [r3, #8]
 800f566:	f107 0310 	add.w	r3, r7, #16
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fc40 	bl	800fdf0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 800f570:	e216      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 800f572:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f576:	491e      	ldr	r1, [pc, #120]	; (800f5f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 800f578:	4618      	mov	r0, r3
 800f57a:	f7f7 fe80 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f57e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800f582:	f107 0308 	add.w	r3, r7, #8
 800f586:	4611      	mov	r1, r2
 800f588:	4618      	mov	r0, r3
 800f58a:	f7f7 ff3c 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f58e:	4603      	mov	r3, r0
 800f590:	461d      	mov	r5, r3
 800f592:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f596:	4618      	mov	r0, r3
 800f598:	f7f8 fa29 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f59c:	2d00      	cmp	r5, #0
 800f59e:	d029      	beq.n	800f5f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6859      	ldr	r1, [r3, #4]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	689a      	ldr	r2, [r3, #8]
 800f5a8:	f107 0310 	add.w	r3, r7, #16
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 fc61 	bl	800fe74 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f5b8:	e1f2      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800f5ba:	bf00      	nop
 800f5bc:	080169c4 	.word	0x080169c4
 800f5c0:	080169c8 	.word	0x080169c8
 800f5c4:	080169cc 	.word	0x080169cc
 800f5c8:	080169d0 	.word	0x080169d0
 800f5cc:	080169d4 	.word	0x080169d4
 800f5d0:	080169d8 	.word	0x080169d8
 800f5d4:	080169dc 	.word	0x080169dc
 800f5d8:	080169e0 	.word	0x080169e0
 800f5dc:	080169e4 	.word	0x080169e4
 800f5e0:	080169e8 	.word	0x080169e8
 800f5e4:	080169ec 	.word	0x080169ec
 800f5e8:	080169f0 	.word	0x080169f0
 800f5ec:	080169f4 	.word	0x080169f4
 800f5f0:	080169f8 	.word	0x080169f8
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 800f5f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f5f8:	49b9      	ldr	r1, [pc, #740]	; (800f8e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f7 fe3f 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f600:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800f604:	f107 0308 	add.w	r3, r7, #8
 800f608:	4611      	mov	r1, r2
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7f7 fefb 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f610:	4603      	mov	r3, r0
 800f612:	461d      	mov	r5, r3
 800f614:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f618:	4618      	mov	r0, r3
 800f61a:	f7f8 f9e8 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f61e:	2d00      	cmp	r5, #0
 800f620:	d009      	beq.n	800f636 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6859      	ldr	r1, [r3, #4]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	689a      	ldr	r2, [r3, #8]
 800f62a:	f107 0310 	add.w	r3, r7, #16
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 fccc 	bl	800ffcc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 800f634:	e1b4      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 800f636:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f63a:	49aa      	ldr	r1, [pc, #680]	; (800f8e4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7f7 fe1e 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f642:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800f646:	f107 0308 	add.w	r3, r7, #8
 800f64a:	4611      	mov	r1, r2
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7f7 feda 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f652:	4603      	mov	r3, r0
 800f654:	461d      	mov	r5, r3
 800f656:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7f8 f9c7 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f660:	2d00      	cmp	r5, #0
 800f662:	d009      	beq.n	800f678 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6859      	ldr	r1, [r3, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	689a      	ldr	r2, [r3, #8]
 800f66c:	f107 0310 	add.w	r3, r7, #16
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 fcf1 	bl	8010058 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 800f676:	e193      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 800f678:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f67c:	499a      	ldr	r1, [pc, #616]	; (800f8e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 800f67e:	4618      	mov	r0, r3
 800f680:	f7f7 fdfd 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f684:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800f688:	f107 0308 	add.w	r3, r7, #8
 800f68c:	4611      	mov	r1, r2
 800f68e:	4618      	mov	r0, r3
 800f690:	f7f7 feb9 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f694:	4603      	mov	r3, r0
 800f696:	461d      	mov	r5, r3
 800f698:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7f8 f9a6 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f6a2:	2d00      	cmp	r5, #0
 800f6a4:	d009      	beq.n	800f6ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6859      	ldr	r1, [r3, #4]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	689a      	ldr	r2, [r3, #8]
 800f6ae:	f107 0310 	add.w	r3, r7, #16
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 fd16 	bl	80100e4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 800f6b8:	e172      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 800f6ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f6be:	498b      	ldr	r1, [pc, #556]	; (800f8ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7f7 fddc 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f6c6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800f6ca:	f107 0308 	add.w	r3, r7, #8
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7f7 fe98 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	461d      	mov	r5, r3
 800f6da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7f8 f985 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f6e4:	2d00      	cmp	r5, #0
 800f6e6:	d009      	beq.n	800f6fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6859      	ldr	r1, [r3, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	689a      	ldr	r2, [r3, #8]
 800f6f0:	f107 0310 	add.w	r3, r7, #16
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 fd3d 	bl	8010174 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 800f6fa:	e151      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 800f6fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f700:	497b      	ldr	r1, [pc, #492]	; (800f8f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 800f702:	4618      	mov	r0, r3
 800f704:	f7f7 fdbb 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f708:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800f70c:	f107 0308 	add.w	r3, r7, #8
 800f710:	4611      	mov	r1, r2
 800f712:	4618      	mov	r0, r3
 800f714:	f7f7 fe77 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f718:	4603      	mov	r3, r0
 800f71a:	461d      	mov	r5, r3
 800f71c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800f720:	4618      	mov	r0, r3
 800f722:	f7f8 f964 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f726:	2d00      	cmp	r5, #0
 800f728:	d009      	beq.n	800f73e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6859      	ldr	r1, [r3, #4]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	689a      	ldr	r2, [r3, #8]
 800f732:	f107 0310 	add.w	r3, r7, #16
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 fd5e 	bl	80101f8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 800f73c:	e130      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 800f73e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f742:	496c      	ldr	r1, [pc, #432]	; (800f8f4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 800f744:	4618      	mov	r0, r3
 800f746:	f7f7 fd9a 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f74a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800f74e:	f107 0308 	add.w	r3, r7, #8
 800f752:	4611      	mov	r1, r2
 800f754:	4618      	mov	r0, r3
 800f756:	f7f7 fe56 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f75a:	4603      	mov	r3, r0
 800f75c:	461d      	mov	r5, r3
 800f75e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f762:	4618      	mov	r0, r3
 800f764:	f7f8 f943 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f768:	2d00      	cmp	r5, #0
 800f76a:	d009      	beq.n	800f780 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6859      	ldr	r1, [r3, #4]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	689a      	ldr	r2, [r3, #8]
 800f774:	f107 0310 	add.w	r3, r7, #16
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fd83 	bl	8010284 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 800f77e:	e10f      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 800f780:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f784:	495c      	ldr	r1, [pc, #368]	; (800f8f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 800f786:	4618      	mov	r0, r3
 800f788:	f7f7 fd79 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f78c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800f790:	f107 0308 	add.w	r3, r7, #8
 800f794:	4611      	mov	r1, r2
 800f796:	4618      	mov	r0, r3
 800f798:	f7f7 fe35 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f79c:	4603      	mov	r3, r0
 800f79e:	461d      	mov	r5, r3
 800f7a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7f8 f922 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f7aa:	2d00      	cmp	r5, #0
 800f7ac:	d009      	beq.n	800f7c2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6859      	ldr	r1, [r3, #4]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	689a      	ldr	r2, [r3, #8]
 800f7b6:	f107 0310 	add.w	r3, r7, #16
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 fda8 	bl	8010310 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 800f7c0:	e0ee      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 800f7c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f7c6:	494d      	ldr	r1, [pc, #308]	; (800f8fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7f7 fd58 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f7ce:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800f7d2:	f107 0308 	add.w	r3, r7, #8
 800f7d6:	4611      	mov	r1, r2
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7f7 fe14 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	461d      	mov	r5, r3
 800f7e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7f8 f901 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f7ec:	2d00      	cmp	r5, #0
 800f7ee:	d00c      	beq.n	800f80a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6859      	ldr	r1, [r3, #4]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	689a      	ldr	r2, [r3, #8]
 800f7f8:	f107 0310 	add.w	r3, r7, #16
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 fa29 	bl	800fc54 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 800f802:	4603      	mov	r3, r0
 800f804:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f808:	e0ca      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 800f80a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f80e:	493c      	ldr	r1, [pc, #240]	; (800f900 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800f810:	4618      	mov	r0, r3
 800f812:	f7f7 fd34 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f816:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800f81a:	f107 0308 	add.w	r3, r7, #8
 800f81e:	4611      	mov	r1, r2
 800f820:	4618      	mov	r0, r3
 800f822:	f7f7 fdf0 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f826:	4603      	mov	r3, r0
 800f828:	461d      	mov	r5, r3
 800f82a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f82e:	4618      	mov	r0, r3
 800f830:	f7f8 f8dd 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f834:	2d00      	cmp	r5, #0
 800f836:	d00b      	beq.n	800f850 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6859      	ldr	r1, [r3, #4]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	689a      	ldr	r2, [r3, #8]
 800f840:	f107 0310 	add.w	r3, r7, #16
 800f844:	482e      	ldr	r0, [pc, #184]	; (800f900 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800f846:	9000      	str	r0, [sp, #0]
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 fda9 	bl	80103a0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800f84e:	e0a7      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 800f850:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f854:	492b      	ldr	r1, [pc, #172]	; (800f904 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800f856:	4618      	mov	r0, r3
 800f858:	f7f7 fd11 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f85c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800f860:	f107 0308 	add.w	r3, r7, #8
 800f864:	4611      	mov	r1, r2
 800f866:	4618      	mov	r0, r3
 800f868:	f7f7 fdcd 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f86c:	4603      	mov	r3, r0
 800f86e:	461d      	mov	r5, r3
 800f870:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f874:	4618      	mov	r0, r3
 800f876:	f7f8 f8ba 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f87a:	2d00      	cmp	r5, #0
 800f87c:	d00b      	beq.n	800f896 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6859      	ldr	r1, [r3, #4]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	689a      	ldr	r2, [r3, #8]
 800f886:	f107 0310 	add.w	r3, r7, #16
 800f88a:	481e      	ldr	r0, [pc, #120]	; (800f904 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800f88c:	9000      	str	r0, [sp, #0]
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 fd86 	bl	80103a0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800f894:	e084      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 800f896:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f89a:	491b      	ldr	r1, [pc, #108]	; (800f908 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7f7 fcee 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f8a2:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800f8a6:	f107 0308 	add.w	r3, r7, #8
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7f7 fdaa 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	461d      	mov	r5, r3
 800f8b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7f8 f897 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f8c0:	2d00      	cmp	r5, #0
 800f8c2:	d023      	beq.n	800f90c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6859      	ldr	r1, [r3, #4]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	689a      	ldr	r2, [r3, #8]
 800f8cc:	f107 0310 	add.w	r3, r7, #16
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 fe3b 	bl	801054c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f8dc:	e060      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800f8de:	bf00      	nop
 800f8e0:	080169fc 	.word	0x080169fc
 800f8e4:	08016a00 	.word	0x08016a00
 800f8e8:	08016a04 	.word	0x08016a04
 800f8ec:	08016a0c 	.word	0x08016a0c
 800f8f0:	08016a10 	.word	0x08016a10
 800f8f4:	08016a14 	.word	0x08016a14
 800f8f8:	08016a18 	.word	0x08016a18
 800f8fc:	08016a20 	.word	0x08016a20
 800f900:	08016a24 	.word	0x08016a24
 800f904:	08016a2c 	.word	0x08016a2c
 800f908:	08016a3c 	.word	0x08016a3c
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 800f90c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800f910:	4930      	ldr	r1, [pc, #192]	; (800f9d4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 800f912:	4618      	mov	r0, r3
 800f914:	f7f7 fcb3 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f918:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800f91c:	f107 0308 	add.w	r3, r7, #8
 800f920:	4611      	mov	r1, r2
 800f922:	4618      	mov	r0, r3
 800f924:	f7f7 fd6f 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f928:	4603      	mov	r3, r0
 800f92a:	461d      	mov	r5, r3
 800f92c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800f930:	4618      	mov	r0, r3
 800f932:	f7f8 f85c 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f936:	2d00      	cmp	r5, #0
 800f938:	d00e      	beq.n	800f958 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	331c      	adds	r3, #28
 800f940:	681d      	ldr	r5, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6859      	ldr	r1, [r3, #4]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	689a      	ldr	r2, [r3, #8]
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	6838      	ldr	r0, [r7, #0]
 800f94e:	47a8      	blx	r5
 800f950:	4603      	mov	r3, r0
 800f952:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f956:	e023      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 800f958:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f95c:	491e      	ldr	r1, [pc, #120]	; (800f9d8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 800f95e:	4618      	mov	r0, r3
 800f960:	f7f7 fc8d 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800f964:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800f968:	f107 0308 	add.w	r3, r7, #8
 800f96c:	4611      	mov	r1, r2
 800f96e:	4618      	mov	r0, r3
 800f970:	f7f7 fd49 	bl	8007406 <_ZNK12SimpleString10startsWithERKS_>
 800f974:	4603      	mov	r3, r0
 800f976:	461d      	mov	r5, r3
 800f978:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7f8 f836 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f982:	2d00      	cmp	r5, #0
 800f984:	d009      	beq.n	800f99a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6859      	ldr	r1, [r3, #4]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	689a      	ldr	r2, [r3, #8]
 800f98e:	f107 0310 	add.w	r3, r7, #16
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 fd98 	bl	80104c8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 800f998:	e002      	b.n	800f9a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 800f99a:	2300      	movs	r3, #0
 800f99c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 800f9a0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d102      	bne.n	800f9ae <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 800f9a8:	2400      	movs	r4, #0
 800f9aa:	2500      	movs	r5, #0
 800f9ac:	e000      	b.n	800f9b0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 800f9ae:	2501      	movs	r5, #1
 800f9b0:	f107 0308 	add.w	r3, r7, #8
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7f8 f81a 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800f9ba:	2d01      	cmp	r5, #1
 800f9bc:	d104      	bne.n	800f9c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	613b      	str	r3, [r7, #16]
 800f9c4:	e455      	b.n	800f272 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 800f9c6:	2401      	movs	r4, #1
 800f9c8:	4623      	mov	r3, r4
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	37f0      	adds	r7, #240	; 0xf0
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bdb0      	pop	{r4, r5, r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	080169d4 	.word	0x080169d4
 800f9d8:	08016a40 	.word	0x08016a40

0800f9dc <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 800f9e4:	4b03      	ldr	r3, [pc, #12]	; (800f9f4 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	370c      	adds	r7, #12
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop
 800f9f4:	08016a44 	.word	0x08016a44

0800f9f8 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 800fa00:	4b03      	ldr	r3, [pc, #12]	; (800fa10 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	370c      	adds	r7, #12
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr
 800fa0e:	bf00      	nop
 800fa10:	08016b74 	.word	0x08016b74

0800fa14 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
    return needHelp_;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7b1b      	ldrb	r3, [r3, #12]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr

0800fa2c <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
    return verbose_;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	7b5b      	ldrb	r3, [r3, #13]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	370c      	adds	r7, #12
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	7b9b      	ldrb	r3, [r3, #14]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
    return color_;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	7bdb      	ldrb	r3, [r3, #15]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	7c5b      	ldrb	r3, [r3, #17]
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr

0800fa8c <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	7c9b      	ldrb	r3, [r3, #18]
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	370c      	adds	r7, #12
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	7cdb      	ldrb	r3, [r3, #19]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	370c      	adds	r7, #12
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	7d1b      	ldrb	r3, [r3, #20]
}
 800fac8:	4618      	mov	r0, r3
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	7c1b      	ldrb	r3, [r3, #16]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    return repeat_;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	69db      	ldr	r3, [r3, #28]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
    return reversing_;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	7d5b      	ldrb	r3, [r3, #21]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	370c      	adds	r7, #12
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr

0800fb1c <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b083      	sub	sp, #12
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	7d9b      	ldrb	r3, [r3, #22]
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
    return shuffling_;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	7ddb      	ldrb	r3, [r3, #23]
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6a1b      	ldr	r3, [r3, #32]
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b086      	sub	sp, #24
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
 800fba0:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2200      	movs	r2, #0
 800fba6:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	f107 0310 	add.w	r3, r7, #16
 800fbb8:	4611      	mov	r1, r2
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7f7 fb5f 	bl	800727e <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 800fbc0:	f107 0310 	add.w	r3, r7, #16
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7f7 fef1 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	bf8c      	ite	hi
 800fbd0:	2301      	movhi	r3, #1
 800fbd2:	2300      	movls	r3, #0
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d00e      	beq.n	800fbf8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	3302      	adds	r3, #2
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7f7 f944 	bl	8006e76 <_ZN12SimpleString4AtoIEPKc>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	61da      	str	r2, [r3, #28]
 800fbf6:	e01c      	b.n	800fc32 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	dd16      	ble.n	800fc32 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	4413      	add	r3, r2
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7f7 f92f 	bl	8006e76 <_ZN12SimpleString4AtoIEPKc>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	69db      	ldr	r3, [r3, #28]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d004      	beq.n	800fc32 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	1c5a      	adds	r2, r3, #1
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	69db      	ldr	r3, [r3, #28]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d102      	bne.n	800fc40 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2202      	movs	r2, #2
 800fc3e:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 800fc40:	f107 0310 	add.w	r3, r7, #16
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7f7 fed2 	bl	80079ee <_ZN12SimpleStringD1Ev>

}
 800fc4a:	bf00      	nop
 800fc4c:	3718      	adds	r7, #24
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
	...

0800fc54 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 800fc54:	b590      	push	{r4, r7, lr}
 800fc56:	b089      	sub	sp, #36	; 0x24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
 800fc60:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2201      	movs	r2, #1
 800fc66:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 800fc68:	4b34      	ldr	r3, [pc, #208]	; (800fd3c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4798      	blx	r3
 800fc6e:	4603      	mov	r3, r0
 800fc70:	461a      	mov	r2, r3
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6a1b      	ldr	r3, [r3, #32]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d104      	bne.n	800fc88 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6a1b      	ldr	r3, [r3, #32]
 800fc82:	1c5a      	adds	r2, r3, #1
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	4413      	add	r3, r2
 800fc92:	681a      	ldr	r2, [r3, #0]
 800fc94:	f107 0314 	add.w	r3, r7, #20
 800fc98:	4611      	mov	r1, r2
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7f7 faef 	bl	800727e <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 800fca0:	f107 0314 	add.w	r3, r7, #20
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7f7 fe81 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	bf8c      	ite	hi
 800fcb0:	2301      	movhi	r3, #1
 800fcb2:	2300      	movls	r3, #0
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d010      	beq.n	800fcdc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	4413      	add	r3, r2
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	3302      	adds	r3, #2
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7f7 f898 	bl	8006e04 <_ZN12SimpleString4AtoUEPKc>
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	621a      	str	r2, [r3, #32]
 800fcda:	e01e      	b.n	800fd1a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	3301      	adds	r3, #1
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	dd18      	ble.n	800fd1a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	3301      	adds	r3, #1
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7f7 f884 	bl	8006e04 <_ZN12SimpleString4AtoUEPKc>
 800fcfc:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d00a      	beq.n	800fd1a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2201      	movs	r2, #1
 800fd08:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	69fa      	ldr	r2, [r7, #28]
 800fd0e:	621a      	str	r2, [r3, #32]
            i++;
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	1c5a      	adds	r2, r3, #1
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	6a1b      	ldr	r3, [r3, #32]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	bf14      	ite	ne
 800fd22:	2301      	movne	r3, #1
 800fd24:	2300      	moveq	r3, #0
 800fd26:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 800fd28:	f107 0314 	add.w	r3, r7, #20
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7f7 fe5e 	bl	80079ee <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 800fd32:	4623      	mov	r3, r4
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3724      	adds	r7, #36	; 0x24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd90      	pop	{r4, r7, pc}
 800fd3c:	200000a4 	.word	0x200000a4

0800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b088      	sub	sp, #32
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
 800fd4c:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 800fd4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd50:	f7f7 fe2c 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800fd54:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 800fd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	683a      	ldr	r2, [r7, #0]
 800fd5e:	4413      	add	r3, r2
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	f107 0314 	add.w	r3, r7, #20
 800fd66:	4611      	mov	r1, r2
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7f7 fa88 	bl	800727e <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 800fd6e:	f107 0314 	add.w	r3, r7, #20
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7f7 fe1a 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	bf34      	ite	cc
 800fd80:	2301      	movcc	r3, #1
 800fd82:	2300      	movcs	r3, #0
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00c      	beq.n	800fda4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 800fd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	683a      	ldr	r2, [r7, #0]
 800fd92:	4413      	add	r3, r2
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	4413      	add	r3, r2
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f7f7 fa6e 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800fda2:	e019      	b.n	800fdd8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	3301      	adds	r3, #1
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	dd0f      	ble.n	800fdd0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	1c5a      	adds	r2, r3, #1
 800fdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb8:	601a      	str	r2, [r3, #0]
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	009b      	lsls	r3, r3, #2
 800fdc0:	683a      	ldr	r2, [r7, #0]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f7f7 fa58 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800fdce:	e003      	b.n	800fdd8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 800fdd0:	4906      	ldr	r1, [pc, #24]	; (800fdec <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 800fdd2:	68f8      	ldr	r0, [r7, #12]
 800fdd4:	f7f7 fa53 	bl	800727e <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 800fdd8:	f107 0314 	add.w	r3, r7, #20
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7f7 fe06 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	3720      	adds	r7, #32
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	080169c0 	.word	0x080169c0

0800fdf0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 800fdf0:	b5b0      	push	{r4, r5, r7, lr}
 800fdf2:	b08c      	sub	sp, #48	; 0x30
 800fdf4:	af02      	add	r7, sp, #8
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	607a      	str	r2, [r7, #4]
 800fdfc:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 800fdfe:	f107 031c 	add.w	r3, r7, #28
 800fe02:	491a      	ldr	r1, [pc, #104]	; (800fe6c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7f7 fa3a 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800fe0a:	f107 0014 	add.w	r0, r7, #20
 800fe0e:	f107 031c 	add.w	r3, r7, #28
 800fe12:	9301      	str	r3, [sp, #4]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	68ba      	ldr	r2, [r7, #8]
 800fe1c:	68f9      	ldr	r1, [r7, #12]
 800fe1e:	f7ff ff8f 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fe22:	f107 0514 	add.w	r5, r7, #20
 800fe26:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fe2a:	4911      	ldr	r1, [pc, #68]	; (800fe70 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 800fe2c:	2010      	movs	r0, #16
 800fe2e:	f7f6 fb3d 	bl	80064ac <_ZnwjPKci>
 800fe32:	4604      	mov	r4, r0
 800fe34:	4629      	mov	r1, r5
 800fe36:	4620      	mov	r0, r4
 800fe38:	f001 fe36 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 800fe3c:	627c      	str	r4, [r7, #36]	; 0x24
 800fe3e:	f107 0314 	add.w	r3, r7, #20
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7f7 fdd3 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800fe48:	f107 031c 	add.w	r3, r7, #28
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7f7 fdce 	bl	80079ee <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe56:	4619      	mov	r1, r3
 800fe58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe5a:	f001 fe45 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fe64:	bf00      	nop
 800fe66:	3728      	adds	r7, #40	; 0x28
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bdb0      	pop	{r4, r5, r7, pc}
 800fe6c:	080169f4 	.word	0x080169f4
 800fe70:	08017388 	.word	0x08017388

0800fe74 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 800fe74:	b5b0      	push	{r4, r5, r7, lr}
 800fe76:	b092      	sub	sp, #72	; 0x48
 800fe78:	af02      	add	r7, sp, #8
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
 800fe80:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 800fe82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe86:	494e      	ldr	r1, [pc, #312]	; (800ffc0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7f7 f9f8 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800fe8e:	f107 0020 	add.w	r0, r7, #32
 800fe92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe96:	9301      	str	r3, [sp, #4]
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	68f9      	ldr	r1, [r7, #12]
 800fea2:	f7ff ff4d 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800feaa:	4618      	mov	r0, r3
 800feac:	f7f7 fd9f 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 800feb0:	f107 0310 	add.w	r3, r7, #16
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7f8 fba1 	bl	80085fc <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 800feba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800febe:	4941      	ldr	r1, [pc, #260]	; (800ffc4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7f7 f9dc 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800fec6:	f107 0210 	add.w	r2, r7, #16
 800feca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fece:	f107 0320 	add.w	r3, r7, #32
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f7 fb3f 	bl	8007556 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 800fed8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fedc:	4618      	mov	r0, r3
 800fede:	f7f7 fd86 	bl	80079ee <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 800fee2:	f107 0310 	add.w	r3, r7, #16
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7f8 fc2d 	bl	8008746 <_ZNK22SimpleStringCollection4sizeEv>
 800feec:	4603      	mov	r3, r0
 800feee:	2b02      	cmp	r3, #2
 800fef0:	bf14      	ite	ne
 800fef2:	2301      	movne	r3, #1
 800fef4:	2300      	moveq	r3, #0
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d001      	beq.n	800ff00 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 800fefc:	2400      	movs	r4, #0
 800fefe:	e04f      	b.n	800ffa0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 800ff00:	f107 0310 	add.w	r3, r7, #16
 800ff04:	2100      	movs	r1, #0
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7f8 fc2a 	bl	8008760 <_ZN22SimpleStringCollectionixEj>
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	f107 0310 	add.w	r3, r7, #16
 800ff12:	2100      	movs	r1, #0
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7f8 fc23 	bl	8008760 <_ZN22SimpleStringCollectionixEj>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7f7 fd45 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 800ff22:	4603      	mov	r3, r0
 800ff24:	3b01      	subs	r3, #1
 800ff26:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f7f7 fe67 	bl	8007c00 <_ZNK12SimpleString9subStringEjj>
 800ff32:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800ff36:	f44f 728f 	mov.w	r2, #286	; 0x11e
 800ff3a:	4923      	ldr	r1, [pc, #140]	; (800ffc8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 800ff3c:	2010      	movs	r0, #16
 800ff3e:	f7f6 fab5 	bl	80064ac <_ZnwjPKci>
 800ff42:	4604      	mov	r4, r0
 800ff44:	4629      	mov	r1, r5
 800ff46:	4620      	mov	r0, r4
 800ff48:	f001 fdae 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff50:	4619      	mov	r1, r3
 800ff52:	4620      	mov	r0, r4
 800ff54:	f001 fdc8 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 800ff58:	4602      	mov	r2, r0
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	625a      	str	r2, [r3, #36]	; 0x24
 800ff5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7f7 fd43 	bl	80079ee <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 800ff68:	f107 0310 	add.w	r3, r7, #16
 800ff6c:	2101      	movs	r1, #1
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7f8 fbf6 	bl	8008760 <_ZN22SimpleStringCollectionixEj>
 800ff74:	4605      	mov	r5, r0
 800ff76:	f240 121f 	movw	r2, #287	; 0x11f
 800ff7a:	4913      	ldr	r1, [pc, #76]	; (800ffc8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 800ff7c:	2010      	movs	r0, #16
 800ff7e:	f7f6 fa95 	bl	80064ac <_ZnwjPKci>
 800ff82:	4604      	mov	r4, r0
 800ff84:	4629      	mov	r1, r5
 800ff86:	4620      	mov	r0, r4
 800ff88:	f001 fd8e 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff90:	4619      	mov	r1, r3
 800ff92:	4620      	mov	r0, r4
 800ff94:	f001 fda8 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 800ff98:	4602      	mov	r2, r0
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 800ff9e:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 800ffa0:	f107 0310 	add.w	r3, r7, #16
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7f8 fb9d 	bl	80086e4 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 800ffaa:	f107 0320 	add.w	r3, r7, #32
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7f7 fd1d 	bl	80079ee <_ZN12SimpleStringD1Ev>
 800ffb4:	4623      	mov	r3, r4
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3740      	adds	r7, #64	; 0x40
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bdb0      	pop	{r4, r5, r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	080169f8 	.word	0x080169f8
 800ffc4:	080173a8 	.word	0x080173a8
 800ffc8:	08017388 	.word	0x08017388

0800ffcc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 800ffcc:	b5b0      	push	{r4, r5, r7, lr}
 800ffce:	b08c      	sub	sp, #48	; 0x30
 800ffd0:	af02      	add	r7, sp, #8
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
 800ffd8:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 800ffda:	f107 031c 	add.w	r3, r7, #28
 800ffde:	491c      	ldr	r1, [pc, #112]	; (8010050 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7f7 f94c 	bl	800727e <_ZN12SimpleStringC1EPKc>
 800ffe6:	f107 0014 	add.w	r0, r7, #20
 800ffea:	f107 031c 	add.w	r3, r7, #28
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	68f9      	ldr	r1, [r7, #12]
 800fffa:	f7ff fea1 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800fffe:	f107 0514 	add.w	r5, r7, #20
 8010002:	f240 1225 	movw	r2, #293	; 0x125
 8010006:	4913      	ldr	r1, [pc, #76]	; (8010054 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8010008:	2010      	movs	r0, #16
 801000a:	f7f6 fa4f 	bl	80064ac <_ZnwjPKci>
 801000e:	4604      	mov	r4, r0
 8010010:	4629      	mov	r1, r5
 8010012:	4620      	mov	r0, r4
 8010014:	f001 fd48 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 8010018:	627c      	str	r4, [r7, #36]	; 0x24
 801001a:	f107 0314 	add.w	r3, r7, #20
 801001e:	4618      	mov	r0, r3
 8010020:	f7f7 fce5 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8010024:	f107 031c 	add.w	r3, r7, #28
 8010028:	4618      	mov	r0, r3
 801002a:	f7f7 fce0 	bl	80079ee <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801002e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010030:	f001 fd75 	bl	8011b1e <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010038:	4619      	mov	r1, r3
 801003a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801003c:	f001 fd54 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 8010040:	4602      	mov	r2, r0
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010046:	bf00      	nop
 8010048:	3728      	adds	r7, #40	; 0x28
 801004a:	46bd      	mov	sp, r7
 801004c:	bdb0      	pop	{r4, r5, r7, pc}
 801004e:	bf00      	nop
 8010050:	080169fc 	.word	0x080169fc
 8010054:	08017388 	.word	0x08017388

08010058 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8010058:	b5b0      	push	{r4, r5, r7, lr}
 801005a:	b08c      	sub	sp, #48	; 0x30
 801005c:	af02      	add	r7, sp, #8
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
 8010064:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8010066:	f107 031c 	add.w	r3, r7, #28
 801006a:	491c      	ldr	r1, [pc, #112]	; (80100dc <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 801006c:	4618      	mov	r0, r3
 801006e:	f7f7 f906 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8010072:	f107 0014 	add.w	r0, r7, #20
 8010076:	f107 031c 	add.w	r3, r7, #28
 801007a:	9301      	str	r3, [sp, #4]
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	68f9      	ldr	r1, [r7, #12]
 8010086:	f7ff fe5b 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801008a:	f107 0514 	add.w	r5, r7, #20
 801008e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010092:	4913      	ldr	r1, [pc, #76]	; (80100e0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8010094:	2010      	movs	r0, #16
 8010096:	f7f6 fa09 	bl	80064ac <_ZnwjPKci>
 801009a:	4604      	mov	r4, r0
 801009c:	4629      	mov	r1, r5
 801009e:	4620      	mov	r0, r4
 80100a0:	f001 fd02 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 80100a4:	627c      	str	r4, [r7, #36]	; 0x24
 80100a6:	f107 0314 	add.w	r3, r7, #20
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7f7 fc9f 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80100b0:	f107 031c 	add.w	r3, r7, #28
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7f7 fc9a 	bl	80079ee <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 80100ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100bc:	f001 fd3c 	bl	8011b38 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c4:	4619      	mov	r1, r3
 80100c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100c8:	f001 fd0e 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 80100cc:	4602      	mov	r2, r0
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80100d2:	bf00      	nop
 80100d4:	3728      	adds	r7, #40	; 0x28
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bdb0      	pop	{r4, r5, r7, pc}
 80100da:	bf00      	nop
 80100dc:	08016a00 	.word	0x08016a00
 80100e0:	08017388 	.word	0x08017388

080100e4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 80100e4:	b5b0      	push	{r4, r5, r7, lr}
 80100e6:	b08c      	sub	sp, #48	; 0x30
 80100e8:	af02      	add	r7, sp, #8
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
 80100f0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 80100f2:	f107 031c 	add.w	r3, r7, #28
 80100f6:	491d      	ldr	r1, [pc, #116]	; (801016c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7f7 f8c0 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80100fe:	f107 0014 	add.w	r0, r7, #20
 8010102:	f107 031c 	add.w	r3, r7, #28
 8010106:	9301      	str	r3, [sp, #4]
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	9300      	str	r3, [sp, #0]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	68f9      	ldr	r1, [r7, #12]
 8010112:	f7ff fe15 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010116:	f107 0514 	add.w	r5, r7, #20
 801011a:	f240 1233 	movw	r2, #307	; 0x133
 801011e:	4914      	ldr	r1, [pc, #80]	; (8010170 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8010120:	2010      	movs	r0, #16
 8010122:	f7f6 f9c3 	bl	80064ac <_ZnwjPKci>
 8010126:	4604      	mov	r4, r0
 8010128:	4629      	mov	r1, r5
 801012a:	4620      	mov	r0, r4
 801012c:	f001 fcbc 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 8010130:	627c      	str	r4, [r7, #36]	; 0x24
 8010132:	f107 0314 	add.w	r3, r7, #20
 8010136:	4618      	mov	r0, r3
 8010138:	f7f7 fc59 	bl	80079ee <_ZN12SimpleStringD1Ev>
 801013c:	f107 031c 	add.w	r3, r7, #28
 8010140:	4618      	mov	r0, r3
 8010142:	f7f7 fc54 	bl	80079ee <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8010146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010148:	f001 fce9 	bl	8011b1e <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 801014c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801014e:	f001 fcf3 	bl	8011b38 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010156:	4619      	mov	r1, r3
 8010158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801015a:	f001 fcc5 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 801015e:	4602      	mov	r2, r0
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010164:	bf00      	nop
 8010166:	3728      	adds	r7, #40	; 0x28
 8010168:	46bd      	mov	sp, r7
 801016a:	bdb0      	pop	{r4, r5, r7, pc}
 801016c:	08016a04 	.word	0x08016a04
 8010170:	08017388 	.word	0x08017388

08010174 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8010174:	b5b0      	push	{r4, r5, r7, lr}
 8010176:	b08c      	sub	sp, #48	; 0x30
 8010178:	af02      	add	r7, sp, #8
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
 8010180:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8010182:	f107 031c 	add.w	r3, r7, #28
 8010186:	491a      	ldr	r1, [pc, #104]	; (80101f0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8010188:	4618      	mov	r0, r3
 801018a:	f7f7 f878 	bl	800727e <_ZN12SimpleStringC1EPKc>
 801018e:	f107 0014 	add.w	r0, r7, #20
 8010192:	f107 031c 	add.w	r3, r7, #28
 8010196:	9301      	str	r3, [sp, #4]
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	68f9      	ldr	r1, [r7, #12]
 80101a2:	f7ff fdcd 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80101a6:	f107 0514 	add.w	r5, r7, #20
 80101aa:	f240 123b 	movw	r2, #315	; 0x13b
 80101ae:	4911      	ldr	r1, [pc, #68]	; (80101f4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80101b0:	2010      	movs	r0, #16
 80101b2:	f7f6 f97b 	bl	80064ac <_ZnwjPKci>
 80101b6:	4604      	mov	r4, r0
 80101b8:	4629      	mov	r1, r5
 80101ba:	4620      	mov	r0, r4
 80101bc:	f001 fc74 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 80101c0:	627c      	str	r4, [r7, #36]	; 0x24
 80101c2:	f107 0314 	add.w	r3, r7, #20
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7f7 fc11 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80101cc:	f107 031c 	add.w	r3, r7, #28
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7f7 fc0c 	bl	80079ee <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101da:	4619      	mov	r1, r3
 80101dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101de:	f001 fc83 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 80101e2:	4602      	mov	r2, r0
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80101e8:	bf00      	nop
 80101ea:	3728      	adds	r7, #40	; 0x28
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bdb0      	pop	{r4, r5, r7, pc}
 80101f0:	08016a0c 	.word	0x08016a0c
 80101f4:	08017388 	.word	0x08017388

080101f8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 80101f8:	b5b0      	push	{r4, r5, r7, lr}
 80101fa:	b08c      	sub	sp, #48	; 0x30
 80101fc:	af02      	add	r7, sp, #8
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
 8010204:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8010206:	f107 031c 	add.w	r3, r7, #28
 801020a:	491c      	ldr	r1, [pc, #112]	; (801027c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 801020c:	4618      	mov	r0, r3
 801020e:	f7f7 f836 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8010212:	f107 0014 	add.w	r0, r7, #20
 8010216:	f107 031c 	add.w	r3, r7, #28
 801021a:	9301      	str	r3, [sp, #4]
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	68ba      	ldr	r2, [r7, #8]
 8010224:	68f9      	ldr	r1, [r7, #12]
 8010226:	f7ff fd8b 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801022a:	f107 0514 	add.w	r5, r7, #20
 801022e:	f240 1241 	movw	r2, #321	; 0x141
 8010232:	4913      	ldr	r1, [pc, #76]	; (8010280 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8010234:	2010      	movs	r0, #16
 8010236:	f7f6 f939 	bl	80064ac <_ZnwjPKci>
 801023a:	4604      	mov	r4, r0
 801023c:	4629      	mov	r1, r5
 801023e:	4620      	mov	r0, r4
 8010240:	f001 fc32 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 8010244:	627c      	str	r4, [r7, #36]	; 0x24
 8010246:	f107 0314 	add.w	r3, r7, #20
 801024a:	4618      	mov	r0, r3
 801024c:	f7f7 fbcf 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8010250:	f107 031c 	add.w	r3, r7, #28
 8010254:	4618      	mov	r0, r3
 8010256:	f7f7 fbca 	bl	80079ee <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 801025a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801025c:	f001 fc5f 	bl	8011b1e <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010264:	4619      	mov	r1, r3
 8010266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010268:	f001 fc3e 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 801026c:	4602      	mov	r2, r0
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010272:	bf00      	nop
 8010274:	3728      	adds	r7, #40	; 0x28
 8010276:	46bd      	mov	sp, r7
 8010278:	bdb0      	pop	{r4, r5, r7, pc}
 801027a:	bf00      	nop
 801027c:	08016a10 	.word	0x08016a10
 8010280:	08017388 	.word	0x08017388

08010284 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8010284:	b5b0      	push	{r4, r5, r7, lr}
 8010286:	b08c      	sub	sp, #48	; 0x30
 8010288:	af02      	add	r7, sp, #8
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	60b9      	str	r1, [r7, #8]
 801028e:	607a      	str	r2, [r7, #4]
 8010290:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8010292:	f107 031c 	add.w	r3, r7, #28
 8010296:	491c      	ldr	r1, [pc, #112]	; (8010308 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8010298:	4618      	mov	r0, r3
 801029a:	f7f6 fff0 	bl	800727e <_ZN12SimpleStringC1EPKc>
 801029e:	f107 0014 	add.w	r0, r7, #20
 80102a2:	f107 031c 	add.w	r3, r7, #28
 80102a6:	9301      	str	r3, [sp, #4]
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	9300      	str	r3, [sp, #0]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	68f9      	ldr	r1, [r7, #12]
 80102b2:	f7ff fd45 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80102b6:	f107 0514 	add.w	r5, r7, #20
 80102ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80102be:	4913      	ldr	r1, [pc, #76]	; (801030c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 80102c0:	2010      	movs	r0, #16
 80102c2:	f7f6 f8f3 	bl	80064ac <_ZnwjPKci>
 80102c6:	4604      	mov	r4, r0
 80102c8:	4629      	mov	r1, r5
 80102ca:	4620      	mov	r0, r4
 80102cc:	f001 fbec 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 80102d0:	627c      	str	r4, [r7, #36]	; 0x24
 80102d2:	f107 0314 	add.w	r3, r7, #20
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7f7 fb89 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80102dc:	f107 031c 	add.w	r3, r7, #28
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7f7 fb84 	bl	80079ee <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80102e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102e8:	f001 fc26 	bl	8011b38 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102f0:	4619      	mov	r1, r3
 80102f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102f4:	f001 fbf8 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 80102f8:	4602      	mov	r2, r0
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80102fe:	bf00      	nop
 8010300:	3728      	adds	r7, #40	; 0x28
 8010302:	46bd      	mov	sp, r7
 8010304:	bdb0      	pop	{r4, r5, r7, pc}
 8010306:	bf00      	nop
 8010308:	08016a14 	.word	0x08016a14
 801030c:	08017388 	.word	0x08017388

08010310 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8010310:	b5b0      	push	{r4, r5, r7, lr}
 8010312:	b08c      	sub	sp, #48	; 0x30
 8010314:	af02      	add	r7, sp, #8
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
 801031c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801031e:	f107 031c 	add.w	r3, r7, #28
 8010322:	491d      	ldr	r1, [pc, #116]	; (8010398 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8010324:	4618      	mov	r0, r3
 8010326:	f7f6 ffaa 	bl	800727e <_ZN12SimpleStringC1EPKc>
 801032a:	f107 0014 	add.w	r0, r7, #20
 801032e:	f107 031c 	add.w	r3, r7, #28
 8010332:	9301      	str	r3, [sp, #4]
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	68f9      	ldr	r1, [r7, #12]
 801033e:	f7ff fcff 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8010342:	f107 0514 	add.w	r5, r7, #20
 8010346:	f240 124f 	movw	r2, #335	; 0x14f
 801034a:	4914      	ldr	r1, [pc, #80]	; (801039c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 801034c:	2010      	movs	r0, #16
 801034e:	f7f6 f8ad 	bl	80064ac <_ZnwjPKci>
 8010352:	4604      	mov	r4, r0
 8010354:	4629      	mov	r1, r5
 8010356:	4620      	mov	r0, r4
 8010358:	f001 fba6 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 801035c:	627c      	str	r4, [r7, #36]	; 0x24
 801035e:	f107 0314 	add.w	r3, r7, #20
 8010362:	4618      	mov	r0, r3
 8010364:	f7f7 fb43 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8010368:	f107 031c 	add.w	r3, r7, #28
 801036c:	4618      	mov	r0, r3
 801036e:	f7f7 fb3e 	bl	80079ee <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8010372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010374:	f001 fbe0 	bl	8011b38 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8010378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801037a:	f001 fbd0 	bl	8011b1e <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010382:	4619      	mov	r1, r3
 8010384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010386:	f001 fbaf 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 801038a:	4602      	mov	r2, r0
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010390:	bf00      	nop
 8010392:	3728      	adds	r7, #40	; 0x28
 8010394:	46bd      	mov	sp, r7
 8010396:	bdb0      	pop	{r4, r5, r7, pc}
 8010398:	08016a18 	.word	0x08016a18
 801039c:	08017388 	.word	0x08017388

080103a0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80103a0:	b5b0      	push	{r4, r5, r7, lr}
 80103a2:	b092      	sub	sp, #72	; 0x48
 80103a4:	af02      	add	r7, sp, #8
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
 80103ac:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80103ae:	f107 0320 	add.w	r3, r7, #32
 80103b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7f6 ff62 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80103ba:	f107 0018 	add.w	r0, r7, #24
 80103be:	f107 0320 	add.w	r3, r7, #32
 80103c2:	9301      	str	r3, [sp, #4]
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	68f9      	ldr	r1, [r7, #12]
 80103ce:	f7ff fcb7 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80103d2:	f107 0320 	add.w	r3, r7, #32
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7f7 fb09 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80103dc:	f107 0010 	add.w	r0, r7, #16
 80103e0:	f107 0118 	add.w	r1, r7, #24
 80103e4:	2329      	movs	r3, #41	; 0x29
 80103e6:	222c      	movs	r2, #44	; 0x2c
 80103e8:	f7f7 fcb2 	bl	8007d50 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 80103ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103f0:	f107 0110 	add.w	r1, r7, #16
 80103f4:	2202      	movs	r2, #2
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7f7 fc4c 	bl	8007c94 <_ZNK12SimpleString9subStringEj>
 80103fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010400:	f107 0310 	add.w	r3, r7, #16
 8010404:	4611      	mov	r1, r2
 8010406:	4618      	mov	r0, r3
 8010408:	f7f6 ffa5 	bl	8007356 <_ZN12SimpleStringaSERKS_>
 801040c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010410:	4618      	mov	r0, r3
 8010412:	f7f7 faec 	bl	80079ee <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8010416:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801041a:	492a      	ldr	r1, [pc, #168]	; (80104c4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801041c:	2010      	movs	r0, #16
 801041e:	f7f6 f845 	bl	80064ac <_ZnwjPKci>
 8010422:	4604      	mov	r4, r0
 8010424:	f107 0310 	add.w	r3, r7, #16
 8010428:	4619      	mov	r1, r3
 801042a:	4620      	mov	r0, r4
 801042c:	f001 fb3c 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 8010430:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8010432:	f107 0318 	add.w	r3, r7, #24
 8010436:	2100      	movs	r1, #0
 8010438:	4618      	mov	r0, r3
 801043a:	f7f7 fc3c 	bl	8007cb6 <_ZNK12SimpleString2atEj>
 801043e:	4603      	mov	r3, r0
 8010440:	461a      	mov	r2, r3
 8010442:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010446:	f107 0118 	add.w	r1, r7, #24
 801044a:	232c      	movs	r3, #44	; 0x2c
 801044c:	f7f7 fc80 	bl	8007d50 <_ZNK12SimpleString17subStringFromTillEcc>
 8010450:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8010454:	f240 125b 	movw	r2, #347	; 0x15b
 8010458:	491a      	ldr	r1, [pc, #104]	; (80104c4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801045a:	2010      	movs	r0, #16
 801045c:	f7f6 f826 	bl	80064ac <_ZnwjPKci>
 8010460:	4604      	mov	r4, r0
 8010462:	4629      	mov	r1, r5
 8010464:	4620      	mov	r0, r4
 8010466:	f001 fb1f 	bl	8011aa8 <_ZN10TestFilterC1ERK12SimpleString>
 801046a:	63bc      	str	r4, [r7, #56]	; 0x38
 801046c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010470:	4618      	mov	r0, r3
 8010472:	f7f7 fabc 	bl	80079ee <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8010476:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010478:	f001 fb51 	bl	8011b1e <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 801047c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801047e:	f001 fb4e 	bl	8011b1e <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010486:	4619      	mov	r1, r3
 8010488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801048a:	f001 fb2d 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 801048e:	4602      	mov	r2, r0
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010498:	4619      	mov	r1, r3
 801049a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801049c:	f001 fb24 	bl	8011ae8 <_ZN10TestFilter3addEPS_>
 80104a0:	4602      	mov	r2, r0
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80104a6:	f107 0310 	add.w	r3, r7, #16
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7f7 fa9f 	bl	80079ee <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80104b0:	f107 0318 	add.w	r3, r7, #24
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7f7 fa9a 	bl	80079ee <_ZN12SimpleStringD1Ev>
}
 80104ba:	bf00      	nop
 80104bc:	3740      	adds	r7, #64	; 0x40
 80104be:	46bd      	mov	sp, r7
 80104c0:	bdb0      	pop	{r4, r5, r7, pc}
 80104c2:	bf00      	nop
 80104c4:	08017388 	.word	0x08017388

080104c8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 80104c8:	b590      	push	{r4, r7, lr}
 80104ca:	b08b      	sub	sp, #44	; 0x2c
 80104cc:	af02      	add	r7, sp, #8
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	607a      	str	r2, [r7, #4]
 80104d4:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80104d6:	f107 0318 	add.w	r3, r7, #24
 80104da:	491b      	ldr	r1, [pc, #108]	; (8010548 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 80104dc:	4618      	mov	r0, r3
 80104de:	f7f6 fece 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80104e2:	f107 0010 	add.w	r0, r7, #16
 80104e6:	f107 0318 	add.w	r3, r7, #24
 80104ea:	9301      	str	r3, [sp, #4]
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	68ba      	ldr	r2, [r7, #8]
 80104f4:	68f9      	ldr	r1, [r7, #12]
 80104f6:	f7ff fc23 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80104fa:	f107 0318 	add.w	r3, r7, #24
 80104fe:	4618      	mov	r0, r3
 8010500:	f7f7 fa75 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8010504:	f107 0310 	add.w	r3, r7, #16
 8010508:	4618      	mov	r0, r3
 801050a:	f7f7 fa4f 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 801050e:	4603      	mov	r3, r0
 8010510:	2b00      	cmp	r3, #0
 8010512:	bf0c      	ite	eq
 8010514:	2301      	moveq	r3, #1
 8010516:	2300      	movne	r3, #0
 8010518:	b2db      	uxtb	r3, r3
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801051e:	2400      	movs	r4, #0
 8010520:	e008      	b.n	8010534 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3330      	adds	r3, #48	; 0x30
 8010526:	f107 0210 	add.w	r2, r7, #16
 801052a:	4611      	mov	r1, r2
 801052c:	4618      	mov	r0, r3
 801052e:	f7f6 ff12 	bl	8007356 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8010532:	2401      	movs	r4, #1
 8010534:	f107 0310 	add.w	r3, r7, #16
 8010538:	4618      	mov	r0, r3
 801053a:	f7f7 fa58 	bl	80079ee <_ZN12SimpleStringD1Ev>
 801053e:	2c01      	cmp	r4, #1
}
 8010540:	3724      	adds	r7, #36	; 0x24
 8010542:	46bd      	mov	sp, r7
 8010544:	bd90      	pop	{r4, r7, pc}
 8010546:	bf00      	nop
 8010548:	08016a40 	.word	0x08016a40

0801054c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 801054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801054e:	b093      	sub	sp, #76	; 0x4c
 8010550:	af02      	add	r7, sp, #8
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
 8010558:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 801055a:	f107 0318 	add.w	r3, r7, #24
 801055e:	4953      	ldr	r1, [pc, #332]	; (80106ac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8010560:	4618      	mov	r0, r3
 8010562:	f7f6 fe8c 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8010566:	f107 0010 	add.w	r0, r7, #16
 801056a:	f107 0318 	add.w	r3, r7, #24
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	68ba      	ldr	r2, [r7, #8]
 8010578:	68f9      	ldr	r1, [r7, #12]
 801057a:	f7ff fbe1 	bl	800fd40 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801057e:	f107 0318 	add.w	r3, r7, #24
 8010582:	4618      	mov	r0, r3
 8010584:	f7f7 fa33 	bl	80079ee <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8010588:	f107 0310 	add.w	r3, r7, #16
 801058c:	4618      	mov	r0, r3
 801058e:	f7f7 fa0d 	bl	80079ac <_ZNK12SimpleString4sizeEv>
 8010592:	4603      	mov	r3, r0
 8010594:	2b00      	cmp	r3, #0
 8010596:	bf0c      	ite	eq
 8010598:	2301      	moveq	r3, #1
 801059a:	2300      	movne	r3, #0
 801059c:	b2db      	uxtb	r3, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d001      	beq.n	80105a6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80105a2:	2400      	movs	r4, #0
 80105a4:	e078      	b.n	8010698 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80105a6:	2500      	movs	r5, #0
 80105a8:	f107 0320 	add.w	r3, r7, #32
 80105ac:	4940      	ldr	r1, [pc, #256]	; (80106b0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7f6 fe65 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80105b4:	2601      	movs	r6, #1
 80105b6:	f107 0220 	add.w	r2, r7, #32
 80105ba:	f107 0310 	add.w	r3, r7, #16
 80105be:	4611      	mov	r1, r2
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7f7 fa20 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d111      	bne.n	80105f0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 80105cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80105d0:	4938      	ldr	r1, [pc, #224]	; (80106b4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7f6 fe53 	bl	800727e <_ZN12SimpleStringC1EPKc>
 80105d8:	2501      	movs	r5, #1
 80105da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80105de:	f107 0310 	add.w	r3, r7, #16
 80105e2:	4611      	mov	r1, r2
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7f7 fa0e 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 80105f0:	2401      	movs	r4, #1
 80105f2:	e000      	b.n	80105f6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 80105f4:	2400      	movs	r4, #0
 80105f6:	2d00      	cmp	r5, #0
 80105f8:	d004      	beq.n	8010604 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 80105fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80105fe:	4618      	mov	r0, r3
 8010600:	f7f7 f9f5 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8010604:	2e00      	cmp	r6, #0
 8010606:	d004      	beq.n	8010612 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8010608:	f107 0320 	add.w	r3, r7, #32
 801060c:	4618      	mov	r0, r3
 801060e:	f7f7 f9ee 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8010612:	2c00      	cmp	r4, #0
 8010614:	d005      	beq.n	8010622 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	2200      	movs	r2, #0
 801061a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801061e:	2401      	movs	r4, #1
 8010620:	e03a      	b.n	8010698 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8010622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010626:	4924      	ldr	r1, [pc, #144]	; (80106b8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8010628:	4618      	mov	r0, r3
 801062a:	f7f6 fe28 	bl	800727e <_ZN12SimpleStringC1EPKc>
 801062e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010632:	f107 0310 	add.w	r3, r7, #16
 8010636:	4611      	mov	r1, r2
 8010638:	4618      	mov	r0, r3
 801063a:	f7f7 f9e4 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 801063e:	4603      	mov	r3, r0
 8010640:	461c      	mov	r4, r3
 8010642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010646:	4618      	mov	r0, r3
 8010648:	f7f7 f9d1 	bl	80079ee <_ZN12SimpleStringD1Ev>
 801064c:	2c00      	cmp	r4, #0
 801064e:	d005      	beq.n	801065c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2201      	movs	r2, #1
 8010654:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010658:	2401      	movs	r4, #1
 801065a:	e01d      	b.n	8010698 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 801065c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010660:	4916      	ldr	r1, [pc, #88]	; (80106bc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8010662:	4618      	mov	r0, r3
 8010664:	f7f6 fe0b 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8010668:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801066c:	f107 0310 	add.w	r3, r7, #16
 8010670:	4611      	mov	r1, r2
 8010672:	4618      	mov	r0, r3
 8010674:	f7f7 f9c7 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 8010678:	4603      	mov	r3, r0
 801067a:	461c      	mov	r4, r3
 801067c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010680:	4618      	mov	r0, r3
 8010682:	f7f7 f9b4 	bl	80079ee <_ZN12SimpleStringD1Ev>
 8010686:	2c00      	cmp	r4, #0
 8010688:	d005      	beq.n	8010696 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2202      	movs	r2, #2
 801068e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8010692:	2401      	movs	r4, #1
 8010694:	e000      	b.n	8010698 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8010696:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8010698:	f107 0310 	add.w	r3, r7, #16
 801069c:	4618      	mov	r0, r3
 801069e:	f7f7 f9a6 	bl	80079ee <_ZN12SimpleStringD1Ev>
 80106a2:	4623      	mov	r3, r4
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3744      	adds	r7, #68	; 0x44
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106ac:	08016a3c 	.word	0x08016a3c
 80106b0:	080173ac 	.word	0x080173ac
 80106b4:	080173b4 	.word	0x080173b4
 80106b8:	080173bc 	.word	0x080173bc
 80106bc:	080173c4 	.word	0x080173c4

080106c0 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	bf0c      	ite	eq
 80106d2:	2301      	moveq	r3, #1
 80106d4:	2300      	movne	r3, #0
 80106d6:	b2db      	uxtb	r3, r3
}
 80106d8:	4618      	mov	r0, r3
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	bf0c      	ite	eq
 80106f6:	2301      	moveq	r3, #1
 80106f8:	2300      	movne	r3, #0
 80106fa:	b2db      	uxtb	r3, r3
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
    return packageName_;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	3330      	adds	r3, #48	; 0x30
}
 8010714:	4618      	mov	r0, r3
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2200      	movs	r2, #0
 801072c:	601a      	str	r2, [r3, #0]
    {}
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801074a:	2200      	movs	r2, #0
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010754:	3304      	adds	r3, #4
 8010756:	f640 72ff 	movw	r2, #4095	; 0xfff
 801075a:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	701a      	strb	r2, [r3, #0]
}
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	4618      	mov	r0, r3
 8010766:	370c      	adds	r7, #12
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801077e:	2200      	movs	r2, #0
 8010780:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	701a      	strb	r2, [r3, #0]
}
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8010794:	b40e      	push	{r1, r2, r3}
 8010796:	b590      	push	{r4, r7, lr}
 8010798:	b086      	sub	sp, #24
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107a4:	3304      	adds	r3, #4
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d032      	beq.n	8010820 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 80107ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107be:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 80107c0:	4b1b      	ldr	r3, [pc, #108]	; (8010830 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 80107c2:	681c      	ldr	r4, [r3, #0]
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	18d0      	adds	r0, r2, r3
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	1c59      	adds	r1, r3, #1
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107d8:	47a0      	blx	r4
 80107da:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	dd09      	ble.n	80107f6 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	441a      	add	r2, r3
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107f4:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010804:	3304      	adds	r3, #4
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	429a      	cmp	r2, r3
 801080a:	d90a      	bls.n	8010822 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010812:	3304      	adds	r3, #4
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	e000      	b.n	8010822 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8010820:	bf00      	nop
    va_end(arguments);
}
 8010822:	3718      	adds	r7, #24
 8010824:	46bd      	mov	sp, r7
 8010826:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801082a:	b003      	add	sp, #12
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop
 8010830:	200000ac 	.word	0x200000ac

08010834 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b08c      	sub	sp, #48	; 0x30
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8010844:	2310      	movs	r3, #16
 8010846:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8010848:	2300      	movs	r3, #0
 801084a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 801084c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	429a      	cmp	r2, r3
 8010852:	d273      	bcs.n	801093c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8010854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010856:	493b      	ldr	r1, [pc, #236]	; (8010944 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f7ff ff9b 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8010866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010868:	2b10      	cmp	r3, #16
 801086a:	d901      	bls.n	8010870 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 801086c:	2310      	movs	r3, #16
 801086e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8010870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010872:	f1c3 0310 	rsb	r3, r3, #16
 8010876:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8010878:	2300      	movs	r3, #0
 801087a:	62bb      	str	r3, [r7, #40]	; 0x28
 801087c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010880:	429a      	cmp	r2, r3
 8010882:	d215      	bcs.n	80108b0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8010884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010888:	4413      	add	r3, r2
 801088a:	69fa      	ldr	r2, [r7, #28]
 801088c:	4413      	add	r3, r2
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	461a      	mov	r2, r3
 8010892:	492d      	ldr	r1, [pc, #180]	; (8010948 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8010894:	68f8      	ldr	r0, [r7, #12]
 8010896:	f7ff ff7d 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 801089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089c:	2b07      	cmp	r3, #7
 801089e:	d103      	bne.n	80108a8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 80108a0:	492a      	ldr	r1, [pc, #168]	; (801094c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f7ff ff76 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80108a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108aa:	3301      	adds	r3, #1
 80108ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80108ae:	e7e5      	b.n	801087c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 80108b0:	2300      	movs	r3, #0
 80108b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80108b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d207      	bcs.n	80108cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 80108bc:	4924      	ldr	r1, [pc, #144]	; (8010950 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f7ff ff68 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 80108c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c6:	3301      	adds	r3, #1
 80108c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80108ca:	e7f3      	b.n	80108b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	2b08      	cmp	r3, #8
 80108d0:	d903      	bls.n	80108da <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 80108d2:	491e      	ldr	r1, [pc, #120]	; (801094c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f7ff ff5d 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 80108da:	491e      	ldr	r1, [pc, #120]	; (8010954 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f7ff ff59 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80108e2:	2300      	movs	r3, #0
 80108e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80108e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d21d      	bcs.n	801092a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 80108ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	4413      	add	r3, r2
 80108f4:	69fa      	ldr	r2, [r7, #28]
 80108f6:	4413      	add	r3, r2
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 80108fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010902:	2b1f      	cmp	r3, #31
 8010904:	d903      	bls.n	801090e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8010906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801090a:	2b7e      	cmp	r3, #126	; 0x7e
 801090c:	d902      	bls.n	8010914 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 801090e:	232e      	movs	r3, #46	; 0x2e
 8010910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8010914:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010918:	461a      	mov	r2, r3
 801091a:	490f      	ldr	r1, [pc, #60]	; (8010958 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f7ff ff39 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8010922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010924:	3301      	adds	r3, #1
 8010926:	62bb      	str	r3, [r7, #40]	; 0x28
 8010928:	e7dd      	b.n	80108e6 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 801092a:	490c      	ldr	r1, [pc, #48]	; (801095c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	f7ff ff31 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8010932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	4413      	add	r3, r2
 8010938:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 801093a:	e787      	b.n	801084c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 801093c:	bf00      	nop
 801093e:	3730      	adds	r7, #48	; 0x30
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	080173dc 	.word	0x080173dc
 8010948:	080173e8 	.word	0x080173e8
 801094c:	080173f0 	.word	0x080173f0
 8010950:	080173f4 	.word	0x080173f4
 8010954:	080173f8 	.word	0x080173f8
 8010958:	080173fc 	.word	0x080173fc
 801095c:	08017400 	.word	0x08017400

08010960 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8010960:	b480      	push	{r7}
 8010962:	b083      	sub	sp, #12
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
    return buffer_;
 8010968:	687b      	ldr	r3, [r7, #4]
}
 801096a:	4618      	mov	r0, r3
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr

08010976 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8010976:	b480      	push	{r7}
 8010978:	b083      	sub	sp, #12
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
 801097e:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010986:	3304      	adds	r3, #4
 8010988:	683a      	ldr	r2, [r7, #0]
 801098a:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010992:	3304      	adds	r3, #4
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801099a:	d306      	bcc.n	80109aa <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109a2:	3304      	adds	r3, #4
 80109a4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80109a8:	601a      	str	r2, [r3, #0]
}
 80109aa:	bf00      	nop
 80109ac:	370c      	adds	r7, #12
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 80109b6:	b480      	push	{r7}
 80109b8:	b083      	sub	sp, #12
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109c4:	3304      	adds	r3, #4
 80109c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80109ca:	601a      	str	r2, [r3, #0]
}
 80109cc:	bf00      	nop
 80109ce:	370c      	adds	r7, #12
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr

080109d8 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109ee:	3304      	adds	r3, #4
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	bf2c      	ite	cs
 80109f6:	2301      	movcs	r3, #1
 80109f8:	2300      	movcc	r3, #0
 80109fa:	b2db      	uxtb	r3, r3
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	370c      	adds	r7, #12
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr

08010a08 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	711a      	strb	r2, [r3, #4]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	3308      	adds	r3, #8
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7ff fe8b 	bl	801073c <_ZN18SimpleStringBufferC1Ev>
{
}
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8010a30:	b5b0      	push	{r4, r5, r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af02      	add	r7, sp, #8
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	607a      	str	r2, [r7, #4]
 8010a3c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f103 0408 	add.w	r4, r3, #8
 8010a44:	687d      	ldr	r5, [r7, #4]
 8010a46:	6a3b      	ldr	r3, [r7, #32]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3314      	adds	r3, #20
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	6a38      	ldr	r0, [r7, #32]
 8010a50:	4798      	blx	r3
 8010a52:	4603      	mov	r3, r0
 8010a54:	9301      	str	r3, [sp, #4]
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	462b      	mov	r3, r5
 8010a5c:	68ba      	ldr	r2, [r7, #8]
 8010a5e:	4904      	ldr	r1, [pc, #16]	; (8010a70 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8010a60:	4620      	mov	r0, r4
 8010a62:	f7ff fe97 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010a66:	bf00      	nop
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	08017404 	.word	0x08017404

08010a74 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8010a74:	b5b0      	push	{r4, r5, r7, lr}
 8010a76:	b086      	sub	sp, #24
 8010a78:	af02      	add	r7, sp, #8
 8010a7a:	60f8      	str	r0, [r7, #12]
 8010a7c:	60b9      	str	r1, [r7, #8]
 8010a7e:	607a      	str	r2, [r7, #4]
 8010a80:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f103 0408 	add.w	r4, r3, #8
 8010a88:	687d      	ldr	r5, [r7, #4]
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	3318      	adds	r3, #24
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	6838      	ldr	r0, [r7, #0]
 8010a94:	4798      	blx	r3
 8010a96:	4603      	mov	r3, r0
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	462b      	mov	r3, r5
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	4904      	ldr	r1, [pc, #16]	; (8010ab0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f7ff fe77 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010aa6:	bf00      	nop
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bdb0      	pop	{r4, r5, r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	0801743c 	.word	0x0801743c

08010ab4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3308      	adds	r3, #8
 8010ac0:	4903      	ldr	r1, [pc, #12]	; (8010ad0 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7ff fe66 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010ac8:	bf00      	nop
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	0801746c 	.word	0x0801746c

08010ad4 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8010ae8:	2367      	movs	r3, #103	; 0x67
 8010aea:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f203 1311 	addw	r3, r3, #273	; 0x111
 8010af2:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f103 0208 	add.w	r2, r3, #8
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8010b00:	4619      	mov	r1, r3
 8010b02:	4610      	mov	r0, r2
 8010b04:	f7ff ff37 	bl	8010976 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8010b08:	bf00      	nop
 8010b0a:	3710      	adds	r7, #16
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8010b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b12:	b089      	sub	sp, #36	; 0x24
 8010b14:	af04      	add	r7, sp, #16
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d102      	bne.n	8010b28 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f000 f882 	bl	8010c2c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	1c5a      	adds	r2, r3, #1
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f103 0508 	add.w	r5, r3, #8
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010b4a:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	695a      	ldr	r2, [r3, #20]
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	3314      	adds	r3, #20
 8010b58:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010b5a:	4610      	mov	r0, r2
 8010b5c:	4798      	blx	r3
 8010b5e:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8010b64:	9303      	str	r3, [sp, #12]
 8010b66:	9202      	str	r2, [sp, #8]
 8010b68:	683a      	ldr	r2, [r7, #0]
 8010b6a:	9201      	str	r2, [sp, #4]
 8010b6c:	9400      	str	r4, [sp, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4632      	mov	r2, r6
 8010b72:	4915      	ldr	r1, [pc, #84]	; (8010bc8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8010b74:	4628      	mov	r0, r5
 8010b76:	f7ff fe0d 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f103 0008 	add.w	r0, r3, #8
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	6899      	ldr	r1, [r3, #8]
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	f7ff fe53 	bl	8010834 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	695a      	ldr	r2, [r3, #20]
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	695b      	ldr	r3, [r3, #20]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	3314      	adds	r3, #20
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	4610      	mov	r0, r2
 8010b9e:	4798      	blx	r3
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	490a      	ldr	r1, [pc, #40]	; (8010bcc <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7f6 f9a7 	bl	8006ef8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	bf0c      	ite	eq
 8010bb0:	2301      	moveq	r3, #1
 8010bb2:	2300      	movne	r3, #0
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d002      	beq.n	8010bc0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2201      	movs	r2, #1
 8010bbe:	711a      	strb	r2, [r3, #4]
}
 8010bc0:	bf00      	nop
 8010bc2:	3714      	adds	r7, #20
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bc8:	0801748c 	.word	0x0801748c
 8010bcc:	080174ec 	.word	0x080174ec

08010bd0 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d103      	bne.n	8010be8 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7ff ff67 	bl	8010ab4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8010be6:	e01e      	b.n	8010c26 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	3308      	adds	r3, #8
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff fef3 	bl	80109d8 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	3308      	adds	r3, #8
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff fedb 	bl	80109b6 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d002      	beq.n	8010c0c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f000 f820 	bl	8010c4c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4619      	mov	r1, r3
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 f82a 	bl	8010c6c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	791b      	ldrb	r3, [r3, #4]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d002      	beq.n	8010c26 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f000 f839 	bl	8010c98 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8010c26:	3710      	adds	r7, #16
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b082      	sub	sp, #8
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	3308      	adds	r3, #8
 8010c38:	4903      	ldr	r1, [pc, #12]	; (8010c48 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff fdaa 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010c40:	bf00      	nop
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	080174f4 	.word	0x080174f4

08010c4c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	3308      	adds	r3, #8
 8010c58:	4903      	ldr	r1, [pc, #12]	; (8010c68 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7ff fd9a 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010c60:	bf00      	nop
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	0801750c 	.word	0x0801750c

08010c6c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f103 0008 	add.w	r0, r3, #8
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	4a04      	ldr	r2, [pc, #16]	; (8010c90 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8010c80:	4904      	ldr	r1, [pc, #16]	; (8010c94 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8010c82:	f7ff fd87 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010c86:	bf00      	nop
 8010c88:	3708      	adds	r7, #8
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	08017554 	.word	0x08017554
 8010c94:	0801756c 	.word	0x0801756c

08010c98 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	3308      	adds	r3, #8
 8010ca4:	4903      	ldr	r1, [pc, #12]	; (8010cb4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7ff fd74 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8010cac:	bf00      	nop
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	08017574 	.word	0x08017574

08010cb8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b08a      	sub	sp, #40	; 0x28
 8010cbc:	af06      	add	r7, sp, #24
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
 8010cc4:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8010cc6:	f7f9 fe9f 	bl	800aa08 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	9305      	str	r3, [sp, #20]
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	9304      	str	r3, [sp, #16]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	9303      	str	r3, [sp, #12]
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	9302      	str	r3, [sp, #8]
 8010cdc:	9201      	str	r2, [sp, #4]
 8010cde:	2300      	movs	r3, #0
 8010ce0:	9300      	str	r3, [sp, #0]
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	4a04      	ldr	r2, [pc, #16]	; (8010cf8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8010ce6:	4905      	ldr	r1, [pc, #20]	; (8010cfc <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f000 f855 	bl	8010d98 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8010cee:	bf00      	nop
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	080173d0 	.word	0x080173d0
 8010cfc:	08017688 	.word	0x08017688

08010d00 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010d00:	b590      	push	{r4, r7, lr}
 8010d02:	b08b      	sub	sp, #44	; 0x2c
 8010d04:	af06      	add	r7, sp, #24
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
 8010d0c:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	68d8      	ldr	r0, [r3, #12]
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	691c      	ldr	r4, [r3, #16]
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	68ba      	ldr	r2, [r7, #8]
 8010d1c:	6952      	ldr	r2, [r2, #20]
 8010d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d20:	9105      	str	r1, [sp, #20]
 8010d22:	6a39      	ldr	r1, [r7, #32]
 8010d24:	9104      	str	r1, [sp, #16]
 8010d26:	6839      	ldr	r1, [r7, #0]
 8010d28:	9103      	str	r1, [sp, #12]
 8010d2a:	6879      	ldr	r1, [r7, #4]
 8010d2c:	9102      	str	r1, [sp, #8]
 8010d2e:	9201      	str	r2, [sp, #4]
 8010d30:	9300      	str	r3, [sp, #0]
 8010d32:	4623      	mov	r3, r4
 8010d34:	4602      	mov	r2, r0
 8010d36:	4904      	ldr	r1, [pc, #16]	; (8010d48 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f000 f82d 	bl	8010d98 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8010d3e:	bf00      	nop
 8010d40:	3714      	adds	r7, #20
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd90      	pop	{r4, r7, pc}
 8010d46:	bf00      	nop
 8010d48:	080176ac 	.word	0x080176ac

08010d4c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010d4c:	b590      	push	{r4, r7, lr}
 8010d4e:	b08b      	sub	sp, #44	; 0x2c
 8010d50:	af06      	add	r7, sp, #24
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	607a      	str	r2, [r7, #4]
 8010d58:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	68d8      	ldr	r0, [r3, #12]
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	691c      	ldr	r4, [r3, #16]
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	68ba      	ldr	r2, [r7, #8]
 8010d68:	6952      	ldr	r2, [r2, #20]
 8010d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d6c:	9105      	str	r1, [sp, #20]
 8010d6e:	6a39      	ldr	r1, [r7, #32]
 8010d70:	9104      	str	r1, [sp, #16]
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	9103      	str	r1, [sp, #12]
 8010d76:	6879      	ldr	r1, [r7, #4]
 8010d78:	9102      	str	r1, [sp, #8]
 8010d7a:	9201      	str	r2, [sp, #4]
 8010d7c:	9300      	str	r3, [sp, #0]
 8010d7e:	4623      	mov	r3, r4
 8010d80:	4602      	mov	r2, r0
 8010d82:	4904      	ldr	r1, [pc, #16]	; (8010d94 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f000 f807 	bl	8010d98 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8010d8a:	bf00      	nop
 8010d8c:	3714      	adds	r7, #20
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd90      	pop	{r4, r7, pc}
 8010d92:	bf00      	nop
 8010d94:	080176d4 	.word	0x080176d4

08010d98 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8010d98:	b590      	push	{r4, r7, lr}
 8010d9a:	b087      	sub	sp, #28
 8010d9c:	af02      	add	r7, sp, #8
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	607a      	str	r2, [r7, #4]
 8010da4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	3308      	adds	r3, #8
 8010daa:	68ba      	ldr	r2, [r7, #8]
 8010dac:	4910      	ldr	r1, [pc, #64]	; (8010df0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7ff fcf0 	bl	8010794 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8010db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db6:	9300      	str	r3, [sp, #0]
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	6879      	ldr	r1, [r7, #4]
 8010dbe:	68f8      	ldr	r0, [r7, #12]
 8010dc0:	f7ff fe36 	bl	8010a30 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8010dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f7ff fe52 	bl	8010a74 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8010dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3308      	adds	r3, #8
 8010dd6:	681c      	ldr	r4, [r3, #0]
 8010dd8:	68f8      	ldr	r0, [r7, #12]
 8010dda:	f000 f80b 	bl	8010df4 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8010dde:	4603      	mov	r3, r0
 8010de0:	4619      	mov	r1, r3
 8010de2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010de4:	47a0      	blx	r4
}
 8010de6:	bf00      	nop
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd90      	pop	{r4, r7, pc}
 8010dee:	bf00      	nop
 8010df0:	08017700 	.word	0x08017700

08010df4 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	3308      	adds	r3, #8
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff fdad 	bl	8010960 <_ZN18SimpleStringBuffer8toStringEv>
 8010e06:	4603      	mov	r3, r0
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	3308      	adds	r3, #8
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7ff fca7 	bl	8010770 <_ZN18SimpleStringBuffer5clearEv>
}
 8010e22:	bf00      	nop
 8010e24:	3708      	adds	r7, #8
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8010e2a:	b480      	push	{r7}
 8010e2c:	b085      	sub	sp, #20
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	60f8      	str	r0, [r7, #12]
 8010e32:	60b9      	str	r1, [r7, #8]
 8010e34:	607a      	str	r2, [r7, #4]
 8010e36:	603b      	str	r3, [r7, #0]
    number_ = number;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	68ba      	ldr	r2, [r7, #8]
 8010e42:	609a      	str	r2, [r3, #8]
    size_ = size;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	683a      	ldr	r2, [r7, #0]
 8010e48:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	69ba      	ldr	r2, [r7, #24]
 8010e4e:	615a      	str	r2, [r3, #20]
    period_ = period;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	7f3a      	ldrb	r2, [r7, #28]
 8010e54:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010e5c:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e62:	60da      	str	r2, [r3, #12]
    line_ = line;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e68:	611a      	str	r2, [r3, #16]
}
 8010e6a:	bf00      	nop
 8010e6c:	3714      	adds	r7, #20
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr

08010e76 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8010e76:	b480      	push	{r7}
 8010e78:	b085      	sub	sp, #20
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	60f8      	str	r0, [r7, #12]
 8010e7e:	60b9      	str	r1, [r7, #8]
 8010e80:	4613      	mov	r3, r2
 8010e82:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8010e84:	79fb      	ldrb	r3, [r7, #7]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00b      	beq.n	8010ea2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	7e1b      	ldrb	r3, [r3, #24]
 8010e8e:	79fa      	ldrb	r2, [r7, #7]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d006      	beq.n	8010ea2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	7e1b      	ldrb	r3, [r3, #24]
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d004      	beq.n	8010ea6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8010e9c:	79fb      	ldrb	r3, [r7, #7]
 8010e9e:	2b02      	cmp	r3, #2
 8010ea0:	d101      	bne.n	8010ea6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	e000      	b.n	8010ea8 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8010ea6:	2300      	movs	r3, #0
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	61da      	str	r2, [r3, #28]
    head_ = node;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	683a      	ldr	r2, [r7, #0]
 8010eca:	601a      	str	r2, [r3, #0]
}
 8010ecc:	bf00      	nop
 8010ece:	370c      	adds	r7, #12
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr

08010ed8 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8010ed8:	b480      	push	{r7}
 8010eda:	b085      	sub	sp, #20
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d019      	beq.n	8010f26 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	689b      	ldr	r3, [r3, #8]
 8010ef6:	683a      	ldr	r2, [r7, #0]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d10e      	bne.n	8010f1a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d005      	beq.n	8010f0e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	69da      	ldr	r2, [r3, #28]
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	61da      	str	r2, [r3, #28]
                return cur;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	e00c      	b.n	8010f28 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	69da      	ldr	r2, [r3, #28]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	601a      	str	r2, [r3, #0]
                return cur;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	e006      	b.n	8010f28 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	69db      	ldr	r3, [r3, #28]
 8010f22:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8010f24:	e7e2      	b.n	8010eec <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3714      	adds	r7, #20
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8010f34:	b480      	push	{r7}
 8010f36:	b085      	sub	sp, #20
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00a      	beq.n	8010f60 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	683a      	ldr	r2, [r7, #0]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d101      	bne.n	8010f58 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	e004      	b.n	8010f62 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	69db      	ldr	r3, [r3, #28]
 8010f5c:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8010f5e:	e7f1      	b.n	8010f44 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8010f60:	2300      	movs	r3, #0
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3714      	adds	r7, #20
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr

08010f6e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b086      	sub	sp, #24
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	60f8      	str	r0, [r7, #12]
 8010f76:	60b9      	str	r1, [r7, #8]
 8010f78:	4613      	mov	r3, r2
 8010f7a:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	617b      	str	r3, [r7, #20]
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d00e      	beq.n	8010fa4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8010f86:	79fb      	ldrb	r3, [r7, #7]
 8010f88:	461a      	mov	r2, r3
 8010f8a:	6979      	ldr	r1, [r7, #20]
 8010f8c:	68f8      	ldr	r0, [r7, #12]
 8010f8e:	f7ff ff72 	bl	8010e76 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d001      	beq.n	8010f9c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	e004      	b.n	8010fa6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	69db      	ldr	r3, [r3, #28]
 8010fa0:	617b      	str	r3, [r7, #20]
 8010fa2:	e7ed      	b.n	8010f80 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3718      	adds	r7, #24
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b082      	sub	sp, #8
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	78fa      	ldrb	r2, [r7, #3]
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f7ff ffd3 	bl	8010f6e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010fc8:	4603      	mov	r3, r0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b084      	sub	sp, #16
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	60f8      	str	r0, [r7, #12]
 8010fda:	60b9      	str	r1, [r7, #8]
 8010fdc:	4613      	mov	r3, r2
 8010fde:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	69db      	ldr	r3, [r3, #28]
 8010fe4:	79fa      	ldrb	r2, [r7, #7]
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	f7ff ffc0 	bl	8010f6e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010fee:	4603      	mov	r3, r0
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3710      	adds	r7, #16
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	460b      	mov	r3, r1
 8011002:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8011004:	2300      	movs	r3, #0
 8011006:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	60bb      	str	r3, [r7, #8]
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00f      	beq.n	8011034 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8011014:	78fb      	ldrb	r3, [r7, #3]
 8011016:	461a      	mov	r2, r3
 8011018:	68b9      	ldr	r1, [r7, #8]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f7ff ff2b 	bl	8010e76 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011020:	4603      	mov	r3, r0
 8011022:	2b00      	cmp	r3, #0
 8011024:	d002      	beq.n	801102c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	3301      	adds	r3, #1
 801102a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	69db      	ldr	r3, [r3, #28]
 8011030:	60bb      	str	r3, [r7, #8]
 8011032:	e7ec      	b.n	801100e <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8011034:	68fb      	ldr	r3, [r7, #12]
}
 8011036:	4618      	mov	r0, r3
 8011038:	3710      	adds	r7, #16
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
	...

08011040 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 801104a:	6839      	ldr	r1, [r7, #0]
 801104c:	4b09      	ldr	r3, [pc, #36]	; (8011074 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 801104e:	fba3 2301 	umull	r2, r3, r3, r1
 8011052:	1aca      	subs	r2, r1, r3
 8011054:	0852      	lsrs	r2, r2, #1
 8011056:	4413      	add	r3, r2
 8011058:	099a      	lsrs	r2, r3, #6
 801105a:	4613      	mov	r3, r2
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	4413      	add	r3, r2
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	4413      	add	r3, r2
 8011064:	1aca      	subs	r2, r1, r3
 8011066:	4613      	mov	r3, r2
}
 8011068:	4618      	mov	r0, r3
 801106a:	370c      	adds	r7, #12
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr
 8011074:	c0e07039 	.word	0xc0e07039

08011078 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	689b      	ldr	r3, [r3, #8]
 8011086:	4619      	mov	r1, r3
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f7ff ffd9 	bl	8011040 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801108e:	4603      	mov	r3, r0
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	4413      	add	r3, r2
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	4618      	mov	r0, r3
 801109a:	f7ff ff0b 	bl	8010eb4 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 801109e:	bf00      	nop
 80110a0:	3708      	adds	r7, #8
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}

080110a6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b082      	sub	sp, #8
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	6078      	str	r0, [r7, #4]
 80110ae:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f7ff ffc4 	bl	8011040 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80110b8:	4603      	mov	r3, r0
 80110ba:	009b      	lsls	r3, r3, #2
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	4413      	add	r3, r2
 80110c0:	6839      	ldr	r1, [r7, #0]
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7ff ff08 	bl	8010ed8 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 80110c8:	4603      	mov	r3, r0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b082      	sub	sp, #8
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
 80110da:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff ffae 	bl	8011040 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80110e4:	4603      	mov	r3, r0
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	4413      	add	r3, r2
 80110ec:	6839      	ldr	r1, [r7, #0]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7ff ff20 	bl	8010f34 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 80110f4:	4603      	mov	r3, r0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b084      	sub	sp, #16
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
 8011106:	460b      	mov	r3, r1
 8011108:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801110e:	2300      	movs	r3, #0
 8011110:	60bb      	str	r3, [r7, #8]
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	2b48      	cmp	r3, #72	; 0x48
 8011116:	dc10      	bgt.n	801113a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	4413      	add	r3, r2
 8011120:	78fa      	ldrb	r2, [r7, #3]
 8011122:	4611      	mov	r1, r2
 8011124:	4618      	mov	r0, r3
 8011126:	f7ff ff67 	bl	8010ff8 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 801112a:	4602      	mov	r2, r0
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	4413      	add	r3, r2
 8011130:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	3301      	adds	r3, #1
 8011136:	60bb      	str	r3, [r7, #8]
 8011138:	e7eb      	b.n	8011112 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 801113a:	68fb      	ldr	r3, [r7, #12]
}
 801113c:	4618      	mov	r0, r3
 801113e:	3710      	adds	r7, #16
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	460b      	mov	r3, r1
 801114e:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8011150:	2300      	movs	r3, #0
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b48      	cmp	r3, #72	; 0x48
 8011158:	dc12      	bgt.n	8011180 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	4413      	add	r3, r2
 8011162:	78fa      	ldrb	r2, [r7, #3]
 8011164:	4611      	mov	r1, r2
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff ff21 	bl	8010fae <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801116c:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d001      	beq.n	8011178 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	e004      	b.n	8011182 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	3301      	adds	r3, #1
 801117c:	60fb      	str	r3, [r7, #12]
 801117e:	e7e9      	b.n	8011154 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8011180:	2300      	movs	r3, #0
}
 8011182:	4618      	mov	r0, r3
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b086      	sub	sp, #24
 801118e:	af00      	add	r7, sp, #0
 8011190:	60f8      	str	r0, [r7, #12]
 8011192:	60b9      	str	r1, [r7, #8]
 8011194:	4613      	mov	r3, r2
 8011196:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	689b      	ldr	r3, [r3, #8]
 801119c:	4619      	mov	r1, r3
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f7ff ff4e 	bl	8011040 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80111a4:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	009b      	lsls	r3, r3, #2
 80111aa:	68fa      	ldr	r2, [r7, #12]
 80111ac:	4413      	add	r3, r2
 80111ae:	79fa      	ldrb	r2, [r7, #7]
 80111b0:	68b9      	ldr	r1, [r7, #8]
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7ff ff0d 	bl	8010fd2 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80111b8:	6138      	str	r0, [r7, #16]
    if (node) return node;
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	e019      	b.n	80111f8 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	3301      	adds	r3, #1
 80111c8:	617b      	str	r3, [r7, #20]
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	2b48      	cmp	r3, #72	; 0x48
 80111ce:	d812      	bhi.n	80111f6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	68fa      	ldr	r2, [r7, #12]
 80111d6:	4413      	add	r3, r2
 80111d8:	79fa      	ldrb	r2, [r7, #7]
 80111da:	4611      	mov	r1, r2
 80111dc:	4618      	mov	r0, r3
 80111de:	f7ff fee6 	bl	8010fae <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80111e2:	6138      	str	r0, [r7, #16]
        if (node) return node;
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d001      	beq.n	80111ee <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	e004      	b.n	80111f8 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	3301      	adds	r3, #1
 80111f2:	617b      	str	r3, [r7, #20]
 80111f4:	e7e9      	b.n	80111ca <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 80111f6:	2300      	movs	r3, #0
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3718      	adds	r7, #24
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8011200:	b5b0      	push	{r4, r5, r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2448      	movs	r4, #72	; 0x48
 801120c:	461d      	mov	r5, r3
 801120e:	2c00      	cmp	r4, #0
 8011210:	db05      	blt.n	801121e <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8011212:	4628      	mov	r0, r5
 8011214:	f7ff fa84 	bl	8010720 <_ZN22MemoryLeakDetectorListC1Ev>
 8011218:	3504      	adds	r5, #4
 801121a:	3c01      	subs	r4, #1
 801121c:	e7f7      	b.n	801120e <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	4618      	mov	r0, r3
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bdb0      	pop	{r4, r5, r7, pc}

08011228 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8011228:	b590      	push	{r4, r7, lr}
 801122a:	b083      	sub	sp, #12
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
 8011232:	4a1d      	ldr	r2, [pc, #116]	; (80112a8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	601a      	str	r2, [r3, #0]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	330c      	adds	r3, #12
 801123c:	4618      	mov	r0, r3
 801123e:	f7ff fbe3 	bl	8010a08 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011248:	331c      	adds	r3, #28
 801124a:	4618      	mov	r0, r3
 801124c:	f7ff ffd8 	bl	8011200 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011256:	2201      	movs	r2, #1
 8011258:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011260:	3304      	adds	r3, #4
 8011262:	2201      	movs	r2, #1
 8011264:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2201      	movs	r2, #1
 801126a:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011272:	3308      	adds	r3, #8
 8011274:	2200      	movs	r2, #0
 8011276:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	683a      	ldr	r2, [r7, #0]
 801127c:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 801127e:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8011282:	490a      	ldr	r1, [pc, #40]	; (80112ac <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8011284:	2004      	movs	r0, #4
 8011286:	f7f5 f911 	bl	80064ac <_ZnwjPKci>
 801128a:	4604      	mov	r4, r0
 801128c:	4620      	mov	r0, r4
 801128e:	f7f5 fd07 	bl	8006ca0 <_ZN11SimpleMutexC1Ev>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011298:	330c      	adds	r3, #12
 801129a:	601c      	str	r4, [r3, #0]
}
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4618      	mov	r0, r3
 80112a0:	370c      	adds	r7, #12
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd90      	pop	{r4, r7, pc}
 80112a6:	bf00      	nop
 80112a8:	08018620 	.word	0x08018620
 80112ac:	08017704 	.word	0x08017704

080112b0 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 80112b0:	b590      	push	{r4, r7, lr}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	4a0e      	ldr	r2, [pc, #56]	; (80112f4 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80112c4:	330c      	adds	r3, #12
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d00d      	beq.n	80112e8 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80112d2:	330c      	adds	r3, #12
 80112d4:	681c      	ldr	r4, [r3, #0]
 80112d6:	2c00      	cmp	r4, #0
 80112d8:	d006      	beq.n	80112e8 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 80112da:	4620      	mov	r0, r4
 80112dc:	f7f5 fcf2 	bl	8006cc4 <_ZN11SimpleMutexD1Ev>
 80112e0:	2104      	movs	r1, #4
 80112e2:	4620      	mov	r0, r4
 80112e4:	f7f5 f8f6 	bl	80064d4 <_ZdlPvj>
    }
}
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	4618      	mov	r0, r3
 80112ec:	370c      	adds	r7, #12
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd90      	pop	{r4, r7, pc}
 80112f2:	bf00      	nop
 80112f4:	08018620 	.word	0x08018620

080112f8 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
}
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7ff ffd5 	bl	80112b0 <_ZN18MemoryLeakDetectorD1Ev>
 8011306:	f241 1150 	movw	r1, #4432	; 0x1150
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f7f5 f8e2 	bl	80064d4 <_ZdlPvj>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	4618      	mov	r0, r3
 8011314:	3708      	adds	r7, #8
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}

0801131a <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 801131a:	b580      	push	{r7, lr}
 801131c:	b082      	sub	sp, #8
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	330c      	adds	r3, #12
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff fd72 	bl	8010e10 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2203      	movs	r2, #3
 8011330:	721a      	strb	r2, [r3, #8]
}
 8011332:	bf00      	nop
 8011334:	3708      	adds	r7, #8
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}

0801133a <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 801133a:	b480      	push	{r7}
 801133c:	b083      	sub	sp, #12
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2202      	movs	r2, #2
 8011346:	721a      	strb	r2, [r3, #8]
}
 8011348:	bf00      	nop
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr

08011354 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2202      	movs	r2, #2
 8011360:	721a      	strb	r2, [r3, #8]
}
 8011362:	bf00      	nop
 8011364:	370c      	adds	r7, #12
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr

0801136e <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 801136e:	b480      	push	{r7}
 8011370:	b083      	sub	sp, #12
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
    return mutex_;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801137c:	330c      	adds	r3, #12
 801137e:	681b      	ldr	r3, [r3, #0]
}
 8011380:	4618      	mov	r0, r3
 8011382:	370c      	adds	r7, #12
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr

0801138c <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 801138c:	b480      	push	{r7}
 801138e:	b083      	sub	sp, #12
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f023 0303 	bic.w	r3, r3, #3
 801139a:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 801139c:	4618      	mov	r0, r3
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	3303      	adds	r3, #3
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ff ffe8 	bl	801138c <_ZL31calculateVoidPointerAlignedSizej>
 80113bc:	4603      	mov	r3, r0
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3708      	adds	r7, #8
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}

080113c6 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 80113c6:	b580      	push	{r7, lr}
 80113c8:	b084      	sub	sp, #16
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	60f8      	str	r0, [r7, #12]
 80113ce:	60b9      	str	r1, [r7, #8]
 80113d0:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 80113d2:	6879      	ldr	r1, [r7, #4]
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f7ff ffe7 	bl	80113a8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80113da:	4602      	mov	r2, r0
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	4413      	add	r3, r2
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3710      	adds	r7, #16
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b08a      	sub	sp, #40	; 0x28
 80113ec:	af06      	add	r7, sp, #24
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
 80113f4:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80113fc:	3304      	adds	r3, #4
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	1c51      	adds	r1, r2, #1
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011408:	3304      	adds	r3, #4
 801140a:	6019      	str	r1, [r3, #0]
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	7a19      	ldrb	r1, [r3, #8]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8011416:	3308      	adds	r3, #8
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	6a38      	ldr	r0, [r7, #32]
 801141c:	9004      	str	r0, [sp, #16]
 801141e:	69f8      	ldr	r0, [r7, #28]
 8011420:	9003      	str	r0, [sp, #12]
 8011422:	9302      	str	r3, [sp, #8]
 8011424:	9101      	str	r1, [sp, #4]
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	6879      	ldr	r1, [r7, #4]
 801142e:	68b8      	ldr	r0, [r7, #8]
 8011430:	f7ff fcfb 	bl	8010e2a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	689a      	ldr	r2, [r3, #8]
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	4413      	add	r3, r2
 801143e:	4619      	mov	r1, r3
 8011440:	68f8      	ldr	r0, [r7, #12]
 8011442:	f000 f861 	bl	8011508 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801144c:	331c      	adds	r3, #28
 801144e:	68b9      	ldr	r1, [r7, #8]
 8011450:	4618      	mov	r0, r3
 8011452:	f7ff fe11 	bl	8011078 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8011456:	bf00      	nop
 8011458:	3710      	adds	r7, #16
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}

0801145e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801145e:	b580      	push	{r7, lr}
 8011460:	b08a      	sub	sp, #40	; 0x28
 8011462:	af04      	add	r7, sp, #16
 8011464:	60f8      	str	r0, [r7, #12]
 8011466:	60b9      	str	r1, [r7, #8]
 8011468:	607a      	str	r2, [r7, #4]
 801146a:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 801146c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011470:	9302      	str	r3, [sp, #8]
 8011472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011474:	9301      	str	r3, [sp, #4]
 8011476:	6a3b      	ldr	r3, [r7, #32]
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	687a      	ldr	r2, [r7, #4]
 801147e:	68b9      	ldr	r1, [r7, #8]
 8011480:	68f8      	ldr	r0, [r7, #12]
 8011482:	f000 f96f 	bl	8011764 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8011486:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d101      	bne.n	8011492 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 801148e:	2300      	movs	r3, #0
 8011490:	e017      	b.n	80114c2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8011492:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011496:	9300      	str	r3, [sp, #0]
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	683a      	ldr	r2, [r7, #0]
 801149c:	68b9      	ldr	r1, [r7, #8]
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f000 f98a 	bl	80117b8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80114a4:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80114a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a8:	9302      	str	r3, [sp, #8]
 80114aa:	6a3b      	ldr	r3, [r7, #32]
 80114ac:	9301      	str	r3, [sp, #4]
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	6939      	ldr	r1, [r7, #16]
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f7ff ff95 	bl	80113e8 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	689b      	ldr	r3, [r3, #8]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3718      	adds	r7, #24
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
	...

080114cc <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b084      	sub	sp, #16
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80114dc:	331c      	adds	r3, #28
 80114de:	6839      	ldr	r1, [r7, #0]
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7ff fdf6 	bl	80110d2 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 80114e6:	60f8      	str	r0, [r7, #12]
  if (node)
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d006      	beq.n	80114fc <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 80114ee:	4b05      	ldr	r3, [pc, #20]	; (8011504 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	68fa      	ldr	r2, [r7, #12]
 80114f4:	6812      	ldr	r2, [r2, #0]
 80114f6:	21cd      	movs	r1, #205	; 0xcd
 80114f8:	6838      	ldr	r0, [r7, #0]
 80114fa:	4798      	blx	r3
#endif
}
 80114fc:	bf00      	nop
 80114fe:	3710      	adds	r7, #16
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	200000d0 	.word	0x200000d0

08011508 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8011508:	b480      	push	{r7}
 801150a:	b085      	sub	sp, #20
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011512:	2300      	movs	r3, #0
 8011514:	60fb      	str	r3, [r7, #12]
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2b02      	cmp	r3, #2
 801151a:	d812      	bhi.n	8011542 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 801151c:	68f9      	ldr	r1, [r7, #12]
 801151e:	4b0c      	ldr	r3, [pc, #48]	; (8011550 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8011520:	fba3 2301 	umull	r2, r3, r3, r1
 8011524:	085a      	lsrs	r2, r3, #1
 8011526:	4613      	mov	r3, r2
 8011528:	005b      	lsls	r3, r3, #1
 801152a:	4413      	add	r3, r2
 801152c:	1aca      	subs	r2, r1, r3
 801152e:	6839      	ldr	r1, [r7, #0]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	440b      	add	r3, r1
 8011534:	4907      	ldr	r1, [pc, #28]	; (8011554 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8011536:	5c8a      	ldrb	r2, [r1, r2]
 8011538:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	3301      	adds	r3, #1
 801153e:	60fb      	str	r3, [r7, #12]
 8011540:	e7e9      	b.n	8011516 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8011542:	bf00      	nop
 8011544:	3714      	adds	r7, #20
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop
 8011550:	aaaaaaab 	.word	0xaaaaaaab
 8011554:	08018614 	.word	0x08018614

08011558 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011562:	2300      	movs	r3, #0
 8011564:	60fb      	str	r3, [r7, #12]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2b02      	cmp	r3, #2
 801156a:	d816      	bhi.n	801159a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 801156c:	683a      	ldr	r2, [r7, #0]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	4413      	add	r3, r2
 8011572:	7818      	ldrb	r0, [r3, #0]
 8011574:	68f9      	ldr	r1, [r7, #12]
 8011576:	4b0c      	ldr	r3, [pc, #48]	; (80115a8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8011578:	fba3 2301 	umull	r2, r3, r3, r1
 801157c:	085a      	lsrs	r2, r3, #1
 801157e:	4613      	mov	r3, r2
 8011580:	005b      	lsls	r3, r3, #1
 8011582:	4413      	add	r3, r2
 8011584:	1aca      	subs	r2, r1, r3
 8011586:	4b09      	ldr	r3, [pc, #36]	; (80115ac <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8011588:	5c9b      	ldrb	r3, [r3, r2]
 801158a:	4298      	cmp	r0, r3
 801158c:	d001      	beq.n	8011592 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 801158e:	2300      	movs	r3, #0
 8011590:	e004      	b.n	801159c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	3301      	adds	r3, #1
 8011596:	60fb      	str	r3, [r7, #12]
 8011598:	e7e5      	b.n	8011566 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 801159a:	2301      	movs	r3, #1
}
 801159c:	4618      	mov	r0, r3
 801159e:	3714      	adds	r7, #20
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr
 80115a8:	aaaaaaab 	.word	0xaaaaaaab
 80115ac:	08018614 	.word	0x08018614

080115b0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	60f8      	str	r0, [r7, #12]
 80115b8:	60b9      	str	r1, [r7, #8]
 80115ba:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 80115bc:	68ba      	ldr	r2, [r7, #8]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d101      	bne.n	80115c8 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 80115c4:	2301      	movs	r3, #1
 80115c6:	e013      	b.n	80115f0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	f083 0301 	eor.w	r3, r3, #1
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d001      	beq.n	80115de <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 80115da:	2301      	movs	r3, #1
 80115dc:	e008      	b.n	80115f0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	331c      	adds	r3, #28
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	68b9      	ldr	r1, [r7, #8]
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	4798      	blx	r3
 80115ec:	4603      	mov	r3, r0
 80115ee:	bf00      	nop
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 80115f8:	b590      	push	{r4, r7, lr}
 80115fa:	b087      	sub	sp, #28
 80115fc:	af02      	add	r7, sp, #8
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	695a      	ldr	r2, [r3, #20]
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	695b      	ldr	r3, [r3, #20]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	3328      	adds	r3, #40	; 0x28
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4610      	mov	r0, r2
 8011616:	4798      	blx	r3
 8011618:	4604      	mov	r4, r0
 801161a:	6a3b      	ldr	r3, [r7, #32]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3328      	adds	r3, #40	; 0x28
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	6a38      	ldr	r0, [r7, #32]
 8011624:	4798      	blx	r3
 8011626:	4603      	mov	r3, r0
 8011628:	461a      	mov	r2, r3
 801162a:	4621      	mov	r1, r4
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f7ff ffbf 	bl	80115b0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8011632:	4603      	mov	r3, r0
 8011634:	f083 0301 	eor.w	r3, r3, #1
 8011638:	b2db      	uxtb	r3, r3
 801163a:	2b00      	cmp	r3, #0
 801163c:	d014      	beq.n	8011668 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f103 040c 	add.w	r4, r3, #12
 8011644:	6a3b      	ldr	r3, [r7, #32]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	3328      	adds	r3, #40	; 0x28
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	6a38      	ldr	r0, [r7, #32]
 801164e:	4798      	blx	r3
 8011650:	4602      	mov	r2, r0
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	9301      	str	r3, [sp, #4]
 8011658:	9200      	str	r2, [sp, #0]
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	68b9      	ldr	r1, [r7, #8]
 8011660:	4620      	mov	r0, r4
 8011662:	f7ff fb4d 	bl	8010d00 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8011666:	e02e      	b.n	80116c6 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	689a      	ldr	r2, [r3, #8]
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4413      	add	r3, r2
 8011672:	4619      	mov	r1, r3
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f7ff ff6f 	bl	8011558 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 801167a:	4603      	mov	r3, r0
 801167c:	f083 0301 	eor.w	r3, r3, #1
 8011680:	b2db      	uxtb	r3, r3
 8011682:	2b00      	cmp	r3, #0
 8011684:	d014      	beq.n	80116b0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f103 040c 	add.w	r4, r3, #12
 801168c:	6a3b      	ldr	r3, [r7, #32]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	3328      	adds	r3, #40	; 0x28
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	6a38      	ldr	r0, [r7, #32]
 8011696:	4798      	blx	r3
 8011698:	4602      	mov	r2, r0
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	9301      	str	r3, [sp, #4]
 80116a0:	9200      	str	r2, [sp, #0]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	68b9      	ldr	r1, [r7, #8]
 80116a8:	4620      	mov	r0, r4
 80116aa:	f7ff fb4f 	bl	8010d4c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 80116ae:	e00a      	b.n	80116c6 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 80116b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d006      	beq.n	80116c6 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 80116b8:	6a3b      	ldr	r3, [r7, #32]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	3324      	adds	r3, #36	; 0x24
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	68b9      	ldr	r1, [r7, #8]
 80116c2:	6a38      	ldr	r0, [r7, #32]
 80116c4:	4798      	blx	r3
}
 80116c6:	bf00      	nop
 80116c8:	3714      	adds	r7, #20
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd90      	pop	{r4, r7, pc}
	...

080116d0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b086      	sub	sp, #24
 80116d4:	af02      	add	r7, sp, #8
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
 80116dc:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 80116de:	4b08      	ldr	r3, [pc, #32]	; (8011700 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	78fb      	ldrb	r3, [r7, #3]
 80116e4:	9301      	str	r3, [sp, #4]
 80116e6:	2300      	movs	r3, #0
 80116e8:	9300      	str	r3, [sp, #0]
 80116ea:	4613      	mov	r3, r2
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	68b9      	ldr	r1, [r7, #8]
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	f000 f87f 	bl	80117f4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80116f6:	4603      	mov	r3, r0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3710      	adds	r7, #16
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	200000f8 	.word	0x200000f8

08011704 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011704:	b590      	push	{r4, r7, lr}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	60f8      	str	r0, [r7, #12]
 801170c:	60b9      	str	r1, [r7, #8]
 801170e:	607a      	str	r2, [r7, #4]
 8011710:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8011712:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00e      	beq.n	8011738 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	3308      	adds	r3, #8
 8011720:	681c      	ldr	r4, [r3, #0]
 8011722:	6879      	ldr	r1, [r7, #4]
 8011724:	68f8      	ldr	r0, [r7, #12]
 8011726:	f7ff fe3f 	bl	80113a8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801172a:	4601      	mov	r1, r0
 801172c:	6a3b      	ldr	r3, [r7, #32]
 801172e:	683a      	ldr	r2, [r7, #0]
 8011730:	68b8      	ldr	r0, [r7, #8]
 8011732:	47a0      	blx	r4
 8011734:	4603      	mov	r3, r0
 8011736:	e010      	b.n	801175a <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	3308      	adds	r3, #8
 801173e:	681c      	ldr	r4, [r3, #0]
 8011740:	6879      	ldr	r1, [r7, #4]
 8011742:	68f8      	ldr	r0, [r7, #12]
 8011744:	f7ff fe30 	bl	80113a8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011748:	4603      	mov	r3, r0
 801174a:	f103 0120 	add.w	r1, r3, #32
 801174e:	6a3b      	ldr	r3, [r7, #32]
 8011750:	683a      	ldr	r2, [r7, #0]
 8011752:	68b8      	ldr	r0, [r7, #8]
 8011754:	47a0      	blx	r4
 8011756:	4603      	mov	r3, r0
 8011758:	bf00      	nop
}
 801175a:	4618      	mov	r0, r3
 801175c:	3714      	adds	r7, #20
 801175e:	46bd      	mov	sp, r7
 8011760:	bd90      	pop	{r4, r7, pc}
	...

08011764 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8011764:	b590      	push	{r4, r7, lr}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
 8011770:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8011772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011776:	2b00      	cmp	r3, #0
 8011778:	d00b      	beq.n	8011792 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 801177a:	4b0e      	ldr	r3, [pc, #56]	; (80117b4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 801177c:	681c      	ldr	r4, [r3, #0]
 801177e:	6839      	ldr	r1, [r7, #0]
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f7ff fe11 	bl	80113a8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8011786:	4603      	mov	r3, r0
 8011788:	4619      	mov	r1, r3
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	47a0      	blx	r4
 801178e:	4603      	mov	r3, r0
 8011790:	e00c      	b.n	80117ac <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8011792:	4b08      	ldr	r3, [pc, #32]	; (80117b4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8011794:	681c      	ldr	r4, [r3, #0]
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f7ff fe05 	bl	80113a8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801179e:	4603      	mov	r3, r0
 80117a0:	3320      	adds	r3, #32
 80117a2:	4619      	mov	r1, r3
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	47a0      	blx	r4
 80117a8:	4603      	mov	r3, r0
 80117aa:	bf00      	nop
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3714      	adds	r7, #20
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd90      	pop	{r4, r7, pc}
 80117b4:	200000c8 	.word	0x200000c8

080117b8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	607a      	str	r2, [r7, #4]
 80117c4:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 80117c6:	7e3b      	ldrb	r3, [r7, #24]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d008      	beq.n	80117de <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	3320      	adds	r3, #32
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2120      	movs	r1, #32
 80117d6:	68b8      	ldr	r0, [r7, #8]
 80117d8:	4798      	blx	r3
 80117da:	4603      	mov	r3, r0
 80117dc:	e006      	b.n	80117ec <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	6839      	ldr	r1, [r7, #0]
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f7ff fdef 	bl	80113c6 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 80117e8:	4603      	mov	r3, r0
 80117ea:	bf00      	nop
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3710      	adds	r7, #16
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b08a      	sub	sp, #40	; 0x28
 80117f8:	af04      	add	r7, sp, #16
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8011802:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011806:	9301      	str	r3, [sp, #4]
 8011808:	6a3b      	ldr	r3, [r7, #32]
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	68b9      	ldr	r1, [r7, #8]
 8011812:	68f8      	ldr	r0, [r7, #12]
 8011814:	f7ff ff76 	bl	8011704 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8011818:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d101      	bne.n	8011824 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8011820:	2300      	movs	r3, #0
 8011822:	e017      	b.n	8011854 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8011824:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011828:	9300      	str	r3, [sp, #0]
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	68b9      	ldr	r1, [r7, #8]
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f7ff ffc1 	bl	80117b8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8011836:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8011838:	6a3b      	ldr	r3, [r7, #32]
 801183a:	9302      	str	r3, [sp, #8]
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	9301      	str	r3, [sp, #4]
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	697a      	ldr	r2, [r7, #20]
 8011848:	6939      	ldr	r1, [r7, #16]
 801184a:	68f8      	ldr	r0, [r7, #12]
 801184c:	f7ff fdcc 	bl	80113e8 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	689b      	ldr	r3, [r3, #8]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3718      	adds	r7, #24
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 801185c:	b590      	push	{r4, r7, lr}
 801185e:	b089      	sub	sp, #36	; 0x24
 8011860:	af02      	add	r7, sp, #8
 8011862:	60f8      	str	r0, [r7, #12]
 8011864:	60b9      	str	r1, [r7, #8]
 8011866:	607a      	str	r2, [r7, #4]
 8011868:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d03a      	beq.n	80118e6 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011876:	331c      	adds	r3, #28
 8011878:	6879      	ldr	r1, [r7, #4]
 801187a:	4618      	mov	r0, r3
 801187c:	f7ff fc13 	bl	80110a6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8011880:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d10b      	bne.n	80118a0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f103 000c 	add.w	r0, r3, #12
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	9300      	str	r3, [sp, #0]
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011898:	6839      	ldr	r1, [r7, #0]
 801189a:	f7ff fa0d 	bl	8010cb8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 801189e:	e023      	b.n	80118e8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 80118a0:	68b8      	ldr	r0, [r7, #8]
 80118a2:	f7f8 ffa7 	bl	800a7f4 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 80118a6:	4603      	mov	r3, r0
 80118a8:	f083 0301 	eor.w	r3, r3, #1
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d01a      	beq.n	80118e8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80118b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80118bc:	9301      	str	r3, [sp, #4]
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	9300      	str	r3, [sp, #0]
 80118c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c4:	683a      	ldr	r2, [r7, #0]
 80118c6:	6979      	ldr	r1, [r7, #20]
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f7ff fe95 	bl	80115f8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	330c      	adds	r3, #12
 80118d4:	681c      	ldr	r4, [r3, #0]
 80118d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d8:	9300      	str	r3, [sp, #0]
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	693a      	ldr	r2, [r7, #16]
 80118de:	6879      	ldr	r1, [r7, #4]
 80118e0:	68b8      	ldr	r0, [r7, #8]
 80118e2:	47a0      	blx	r4
 80118e4:	e000      	b.n	80118e8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 80118e6:	bf00      	nop
    }
}
 80118e8:	371c      	adds	r7, #28
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd90      	pop	{r4, r7, pc}
	...

080118f0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b086      	sub	sp, #24
 80118f4:	af02      	add	r7, sp, #8
 80118f6:	60f8      	str	r0, [r7, #12]
 80118f8:	60b9      	str	r1, [r7, #8]
 80118fa:	607a      	str	r2, [r7, #4]
 80118fc:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 80118fe:	4b08      	ldr	r3, [pc, #32]	; (8011920 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	78fb      	ldrb	r3, [r7, #3]
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	2300      	movs	r3, #0
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	4613      	mov	r3, r2
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	68b9      	ldr	r1, [r7, #8]
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f7ff ffa3 	bl	801185c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8011916:	bf00      	nop
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	200000f8 	.word	0x200000f8

08011924 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08a      	sub	sp, #40	; 0x28
 8011928:	af04      	add	r7, sp, #16
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
 8011930:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d023      	beq.n	8011980 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801193e:	331c      	adds	r3, #28
 8011940:	6879      	ldr	r1, [r7, #4]
 8011942:	4618      	mov	r0, r3
 8011944:	f7ff fbaf 	bl	80110a6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8011948:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d10c      	bne.n	801196a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f103 000c 	add.w	r0, r3, #12
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	9300      	str	r3, [sp, #0]
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011960:	6a39      	ldr	r1, [r7, #32]
 8011962:	f7ff f9a9 	bl	8010cb8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8011966:	2300      	movs	r3, #0
 8011968:	e019      	b.n	801199e <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 801196a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801196e:	9301      	str	r3, [sp, #4]
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	9300      	str	r3, [sp, #0]
 8011974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011976:	6a3a      	ldr	r2, [r7, #32]
 8011978:	6979      	ldr	r1, [r7, #20]
 801197a:	68f8      	ldr	r0, [r7, #12]
 801197c:	f7ff fe3c 	bl	80115f8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8011980:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011984:	9302      	str	r3, [sp, #8]
 8011986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011988:	9301      	str	r3, [sp, #4]
 801198a:	6a3b      	ldr	r3, [r7, #32]
 801198c:	9300      	str	r3, [sp, #0]
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	68b9      	ldr	r1, [r7, #8]
 8011994:	68f8      	ldr	r0, [r7, #12]
 8011996:	f7ff fd62 	bl	801145e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 801199a:	4603      	mov	r3, r0
 801199c:	bf00      	nop
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3718      	adds	r7, #24
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b084      	sub	sp, #16
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
 80119ae:	460b      	mov	r3, r1
 80119b0:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119b8:	331c      	adds	r3, #28
 80119ba:	78fa      	ldrb	r2, [r7, #3]
 80119bc:	4611      	mov	r1, r2
 80119be:	4618      	mov	r0, r3
 80119c0:	f7ff fbc0 	bl	8011144 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80119c4:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	330c      	adds	r3, #12
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7ff f882 	bl	8010ad4 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d010      	beq.n	80119f8 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	330c      	adds	r3, #12
 80119da:	68f9      	ldr	r1, [r7, #12]
 80119dc:	4618      	mov	r0, r3
 80119de:	f7ff f897 	bl	8010b10 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80119e8:	331c      	adds	r3, #28
 80119ea:	78fa      	ldrb	r2, [r7, #3]
 80119ec:	68f9      	ldr	r1, [r7, #12]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7ff fbcb 	bl	801118a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80119f4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80119f6:	e7eb      	b.n	80119d0 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	330c      	adds	r3, #12
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7ff f8e7 	bl	8010bd0 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8011a02:	bf00      	nop
 8011a04:	3710      	adds	r7, #16
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}

08011a0a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8011a0a:	b580      	push	{r7, lr}
 8011a0c:	b082      	sub	sp, #8
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
 8011a12:	460b      	mov	r3, r1
 8011a14:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8011a16:	78fb      	ldrb	r3, [r7, #3]
 8011a18:	4619      	mov	r1, r3
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f7ff ffc3 	bl	80119a6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	330c      	adds	r3, #12
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7ff f9e5 	bl	8010df4 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8011a2a:	4603      	mov	r3, r0
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a42:	331c      	adds	r3, #28
 8011a44:	2103      	movs	r1, #3
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7ff fb7c 	bl	8011144 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8011a4c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d011      	beq.n	8011a78 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	7e1b      	ldrb	r3, [r3, #24]
 8011a58:	2b03      	cmp	r3, #3
 8011a5a:	d102      	bne.n	8011a62 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2202      	movs	r2, #2
 8011a60:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a68:	331c      	adds	r3, #28
 8011a6a:	2203      	movs	r2, #3
 8011a6c:	68f9      	ldr	r1, [r7, #12]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7ff fb8b 	bl	801118a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8011a74:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8011a76:	e7ea      	b.n	8011a4e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8011a78:	bf00      	nop
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	460b      	mov	r3, r1
 8011a8a:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011a92:	331c      	adds	r3, #28
 8011a94:	78fa      	ldrb	r2, [r7, #3]
 8011a96:	4611      	mov	r1, r2
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7ff fb30 	bl	80110fe <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8011a9e:	4603      	mov	r3, r0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3708      	adds	r7, #8
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	490b      	ldr	r1, [pc, #44]	; (8011ae4 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7f5 fbe1 	bl	800727e <_ZN12SimpleStringC1EPKc>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	721a      	strb	r2, [r3, #8]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	725a      	strb	r2, [r3, #9]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6839      	ldr	r1, [r7, #0]
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7f5 fc3f 	bl	8007356 <_ZN12SimpleStringaSERKS_>
}
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	4618      	mov	r0, r3
 8011adc:	3708      	adds	r7, #8
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	08017724 	.word	0x08017724

08011ae8 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	683a      	ldr	r2, [r7, #0]
 8011af6:	60da      	str	r2, [r3, #12]
    return this;
 8011af8:	687b      	ldr	r3, [r7, #4]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 8011b06:	b480      	push	{r7}
 8011b08:	b083      	sub	sp, #12
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
    return next_;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	68db      	ldr	r3, [r3, #12]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	370c      	adds	r7, #12
 8011b16:	46bd      	mov	sp, r7
 8011b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1c:	4770      	bx	lr

08011b1e <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8011b1e:	b480      	push	{r7}
 8011b20:	b083      	sub	sp, #12
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2201      	movs	r2, #1
 8011b2a:	721a      	strb	r2, [r3, #8]
}
 8011b2c:	bf00      	nop
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2201      	movs	r2, #1
 8011b44:	725a      	strb	r2, [r3, #9]
}
 8011b46:	bf00      	nop
 8011b48:	370c      	adds	r7, #12
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b50:	4770      	bx	lr

08011b52 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b084      	sub	sp, #16
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
 8011b5a:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	7a1b      	ldrb	r3, [r3, #8]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d007      	beq.n	8011b78 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	6838      	ldr	r0, [r7, #0]
 8011b6e:	f7f5 ff4a 	bl	8007a06 <_ZeqRK12SimpleStringS1_>
 8011b72:	4603      	mov	r3, r0
 8011b74:	73fb      	strb	r3, [r7, #15]
 8011b76:	e006      	b.n	8011b86 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	6838      	ldr	r0, [r7, #0]
 8011b7e:	f7f5 fbfc 	bl	800737a <_ZNK12SimpleString8containsERKS_>
 8011b82:	4603      	mov	r3, r0
 8011b84:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	7a5b      	ldrb	r3, [r3, #9]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d004      	beq.n	8011b98 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	f083 0301 	eor.w	r3, r3, #1
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	e005      	b.n	8011ba4 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8011b98:	7bfb      	ldrb	r3, [r7, #15]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	bf14      	ite	ne
 8011b9e:	2301      	movne	r3, #1
 8011ba0:	2300      	moveq	r3, #0
 8011ba2:	b2db      	uxtb	r3, r3
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3710      	adds	r7, #16
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <__cxa_guard_acquire>:
 8011bac:	6803      	ldr	r3, [r0, #0]
 8011bae:	07db      	lsls	r3, r3, #31
 8011bb0:	d406      	bmi.n	8011bc0 <__cxa_guard_acquire+0x14>
 8011bb2:	7843      	ldrb	r3, [r0, #1]
 8011bb4:	b103      	cbz	r3, 8011bb8 <__cxa_guard_acquire+0xc>
 8011bb6:	deff      	udf	#255	; 0xff
 8011bb8:	2301      	movs	r3, #1
 8011bba:	7043      	strb	r3, [r0, #1]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	4770      	bx	lr
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	4770      	bx	lr

08011bc4 <__cxa_guard_release>:
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	6003      	str	r3, [r0, #0]
 8011bc8:	4770      	bx	lr

08011bca <__cxa_pure_virtual>:
 8011bca:	b508      	push	{r3, lr}
 8011bcc:	f000 f80c 	bl	8011be8 <_ZSt9terminatev>

08011bd0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011bd0:	b508      	push	{r3, lr}
 8011bd2:	4780      	blx	r0
 8011bd4:	f000 f816 	bl	8011c04 <abort>

08011bd8 <_ZSt13get_terminatev>:
 8011bd8:	4b02      	ldr	r3, [pc, #8]	; (8011be4 <_ZSt13get_terminatev+0xc>)
 8011bda:	6818      	ldr	r0, [r3, #0]
 8011bdc:	f3bf 8f5b 	dmb	ish
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	200000fc 	.word	0x200000fc

08011be8 <_ZSt9terminatev>:
 8011be8:	b508      	push	{r3, lr}
 8011bea:	f7ff fff5 	bl	8011bd8 <_ZSt13get_terminatev>
 8011bee:	f7ff ffef 	bl	8011bd0 <_ZN10__cxxabiv111__terminateEPFvvE>

08011bf2 <fabs>:
 8011bf2:	ec51 0b10 	vmov	r0, r1, d0
 8011bf6:	ee10 2a10 	vmov	r2, s0
 8011bfa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011bfe:	ec43 2b10 	vmov	d0, r2, r3
 8011c02:	4770      	bx	lr

08011c04 <abort>:
 8011c04:	b508      	push	{r3, lr}
 8011c06:	2006      	movs	r0, #6
 8011c08:	f000 ff88 	bl	8012b1c <raise>
 8011c0c:	2001      	movs	r0, #1
 8011c0e:	f7ef f8b8 	bl	8000d82 <_exit>

08011c12 <atexit>:
 8011c12:	2300      	movs	r3, #0
 8011c14:	4601      	mov	r1, r0
 8011c16:	461a      	mov	r2, r3
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f002 b921 	b.w	8013e60 <__register_exitproc>
	...

08011c20 <calloc>:
 8011c20:	4b02      	ldr	r3, [pc, #8]	; (8011c2c <calloc+0xc>)
 8011c22:	460a      	mov	r2, r1
 8011c24:	4601      	mov	r1, r0
 8011c26:	6818      	ldr	r0, [r3, #0]
 8011c28:	f000 bde8 	b.w	80127fc <_calloc_r>
 8011c2c:	20000100 	.word	0x20000100

08011c30 <__errno>:
 8011c30:	4b01      	ldr	r3, [pc, #4]	; (8011c38 <__errno+0x8>)
 8011c32:	6818      	ldr	r0, [r3, #0]
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	20000100 	.word	0x20000100

08011c3c <_fclose_r>:
 8011c3c:	b570      	push	{r4, r5, r6, lr}
 8011c3e:	4605      	mov	r5, r0
 8011c40:	460c      	mov	r4, r1
 8011c42:	b911      	cbnz	r1, 8011c4a <_fclose_r+0xe>
 8011c44:	2600      	movs	r6, #0
 8011c46:	4630      	mov	r0, r6
 8011c48:	bd70      	pop	{r4, r5, r6, pc}
 8011c4a:	b118      	cbz	r0, 8011c54 <_fclose_r+0x18>
 8011c4c:	6983      	ldr	r3, [r0, #24]
 8011c4e:	b90b      	cbnz	r3, 8011c54 <_fclose_r+0x18>
 8011c50:	f000 f994 	bl	8011f7c <__sinit>
 8011c54:	4b2c      	ldr	r3, [pc, #176]	; (8011d08 <_fclose_r+0xcc>)
 8011c56:	429c      	cmp	r4, r3
 8011c58:	d114      	bne.n	8011c84 <_fclose_r+0x48>
 8011c5a:	686c      	ldr	r4, [r5, #4]
 8011c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c5e:	07d8      	lsls	r0, r3, #31
 8011c60:	d405      	bmi.n	8011c6e <_fclose_r+0x32>
 8011c62:	89a3      	ldrh	r3, [r4, #12]
 8011c64:	0599      	lsls	r1, r3, #22
 8011c66:	d402      	bmi.n	8011c6e <_fclose_r+0x32>
 8011c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c6a:	f000 fd3a 	bl	80126e2 <__retarget_lock_acquire_recursive>
 8011c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c72:	b98b      	cbnz	r3, 8011c98 <_fclose_r+0x5c>
 8011c74:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8011c76:	f016 0601 	ands.w	r6, r6, #1
 8011c7a:	d1e3      	bne.n	8011c44 <_fclose_r+0x8>
 8011c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c7e:	f000 fd32 	bl	80126e6 <__retarget_lock_release_recursive>
 8011c82:	e7e0      	b.n	8011c46 <_fclose_r+0xa>
 8011c84:	4b21      	ldr	r3, [pc, #132]	; (8011d0c <_fclose_r+0xd0>)
 8011c86:	429c      	cmp	r4, r3
 8011c88:	d101      	bne.n	8011c8e <_fclose_r+0x52>
 8011c8a:	68ac      	ldr	r4, [r5, #8]
 8011c8c:	e7e6      	b.n	8011c5c <_fclose_r+0x20>
 8011c8e:	4b20      	ldr	r3, [pc, #128]	; (8011d10 <_fclose_r+0xd4>)
 8011c90:	429c      	cmp	r4, r3
 8011c92:	bf08      	it	eq
 8011c94:	68ec      	ldreq	r4, [r5, #12]
 8011c96:	e7e1      	b.n	8011c5c <_fclose_r+0x20>
 8011c98:	4621      	mov	r1, r4
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	f000 f842 	bl	8011d24 <__sflush_r>
 8011ca0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ca2:	4606      	mov	r6, r0
 8011ca4:	b133      	cbz	r3, 8011cb4 <_fclose_r+0x78>
 8011ca6:	6a21      	ldr	r1, [r4, #32]
 8011ca8:	4628      	mov	r0, r5
 8011caa:	4798      	blx	r3
 8011cac:	2800      	cmp	r0, #0
 8011cae:	bfb8      	it	lt
 8011cb0:	f04f 36ff 	movlt.w	r6, #4294967295
 8011cb4:	89a3      	ldrh	r3, [r4, #12]
 8011cb6:	061a      	lsls	r2, r3, #24
 8011cb8:	d503      	bpl.n	8011cc2 <_fclose_r+0x86>
 8011cba:	6921      	ldr	r1, [r4, #16]
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	f000 fdad 	bl	801281c <_free_r>
 8011cc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cc4:	b141      	cbz	r1, 8011cd8 <_fclose_r+0x9c>
 8011cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cca:	4299      	cmp	r1, r3
 8011ccc:	d002      	beq.n	8011cd4 <_fclose_r+0x98>
 8011cce:	4628      	mov	r0, r5
 8011cd0:	f000 fda4 	bl	801281c <_free_r>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	6363      	str	r3, [r4, #52]	; 0x34
 8011cd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011cda:	b121      	cbz	r1, 8011ce6 <_fclose_r+0xaa>
 8011cdc:	4628      	mov	r0, r5
 8011cde:	f000 fd9d 	bl	801281c <_free_r>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	64a3      	str	r3, [r4, #72]	; 0x48
 8011ce6:	f000 f931 	bl	8011f4c <__sfp_lock_acquire>
 8011cea:	2300      	movs	r3, #0
 8011cec:	81a3      	strh	r3, [r4, #12]
 8011cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cf0:	07db      	lsls	r3, r3, #31
 8011cf2:	d402      	bmi.n	8011cfa <_fclose_r+0xbe>
 8011cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cf6:	f000 fcf6 	bl	80126e6 <__retarget_lock_release_recursive>
 8011cfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cfc:	f000 fcef 	bl	80126de <__retarget_lock_close_recursive>
 8011d00:	f000 f92a 	bl	8011f58 <__sfp_lock_release>
 8011d04:	e79f      	b.n	8011c46 <_fclose_r+0xa>
 8011d06:	bf00      	nop
 8011d08:	08018648 	.word	0x08018648
 8011d0c:	08018668 	.word	0x08018668
 8011d10:	08018628 	.word	0x08018628

08011d14 <fclose>:
 8011d14:	4b02      	ldr	r3, [pc, #8]	; (8011d20 <fclose+0xc>)
 8011d16:	4601      	mov	r1, r0
 8011d18:	6818      	ldr	r0, [r3, #0]
 8011d1a:	f7ff bf8f 	b.w	8011c3c <_fclose_r>
 8011d1e:	bf00      	nop
 8011d20:	20000100 	.word	0x20000100

08011d24 <__sflush_r>:
 8011d24:	898a      	ldrh	r2, [r1, #12]
 8011d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d2a:	4605      	mov	r5, r0
 8011d2c:	0710      	lsls	r0, r2, #28
 8011d2e:	460c      	mov	r4, r1
 8011d30:	d458      	bmi.n	8011de4 <__sflush_r+0xc0>
 8011d32:	684b      	ldr	r3, [r1, #4]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dc05      	bgt.n	8011d44 <__sflush_r+0x20>
 8011d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	dc02      	bgt.n	8011d44 <__sflush_r+0x20>
 8011d3e:	2000      	movs	r0, #0
 8011d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d46:	2e00      	cmp	r6, #0
 8011d48:	d0f9      	beq.n	8011d3e <__sflush_r+0x1a>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d50:	682f      	ldr	r7, [r5, #0]
 8011d52:	602b      	str	r3, [r5, #0]
 8011d54:	d032      	beq.n	8011dbc <__sflush_r+0x98>
 8011d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d58:	89a3      	ldrh	r3, [r4, #12]
 8011d5a:	075a      	lsls	r2, r3, #29
 8011d5c:	d505      	bpl.n	8011d6a <__sflush_r+0x46>
 8011d5e:	6863      	ldr	r3, [r4, #4]
 8011d60:	1ac0      	subs	r0, r0, r3
 8011d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d64:	b10b      	cbz	r3, 8011d6a <__sflush_r+0x46>
 8011d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d68:	1ac0      	subs	r0, r0, r3
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d70:	6a21      	ldr	r1, [r4, #32]
 8011d72:	4628      	mov	r0, r5
 8011d74:	47b0      	blx	r6
 8011d76:	1c43      	adds	r3, r0, #1
 8011d78:	89a3      	ldrh	r3, [r4, #12]
 8011d7a:	d106      	bne.n	8011d8a <__sflush_r+0x66>
 8011d7c:	6829      	ldr	r1, [r5, #0]
 8011d7e:	291d      	cmp	r1, #29
 8011d80:	d82c      	bhi.n	8011ddc <__sflush_r+0xb8>
 8011d82:	4a2a      	ldr	r2, [pc, #168]	; (8011e2c <__sflush_r+0x108>)
 8011d84:	40ca      	lsrs	r2, r1
 8011d86:	07d6      	lsls	r6, r2, #31
 8011d88:	d528      	bpl.n	8011ddc <__sflush_r+0xb8>
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	6062      	str	r2, [r4, #4]
 8011d8e:	04d9      	lsls	r1, r3, #19
 8011d90:	6922      	ldr	r2, [r4, #16]
 8011d92:	6022      	str	r2, [r4, #0]
 8011d94:	d504      	bpl.n	8011da0 <__sflush_r+0x7c>
 8011d96:	1c42      	adds	r2, r0, #1
 8011d98:	d101      	bne.n	8011d9e <__sflush_r+0x7a>
 8011d9a:	682b      	ldr	r3, [r5, #0]
 8011d9c:	b903      	cbnz	r3, 8011da0 <__sflush_r+0x7c>
 8011d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8011da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011da2:	602f      	str	r7, [r5, #0]
 8011da4:	2900      	cmp	r1, #0
 8011da6:	d0ca      	beq.n	8011d3e <__sflush_r+0x1a>
 8011da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dac:	4299      	cmp	r1, r3
 8011dae:	d002      	beq.n	8011db6 <__sflush_r+0x92>
 8011db0:	4628      	mov	r0, r5
 8011db2:	f000 fd33 	bl	801281c <_free_r>
 8011db6:	2000      	movs	r0, #0
 8011db8:	6360      	str	r0, [r4, #52]	; 0x34
 8011dba:	e7c1      	b.n	8011d40 <__sflush_r+0x1c>
 8011dbc:	6a21      	ldr	r1, [r4, #32]
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	47b0      	blx	r6
 8011dc4:	1c41      	adds	r1, r0, #1
 8011dc6:	d1c7      	bne.n	8011d58 <__sflush_r+0x34>
 8011dc8:	682b      	ldr	r3, [r5, #0]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d0c4      	beq.n	8011d58 <__sflush_r+0x34>
 8011dce:	2b1d      	cmp	r3, #29
 8011dd0:	d001      	beq.n	8011dd6 <__sflush_r+0xb2>
 8011dd2:	2b16      	cmp	r3, #22
 8011dd4:	d101      	bne.n	8011dda <__sflush_r+0xb6>
 8011dd6:	602f      	str	r7, [r5, #0]
 8011dd8:	e7b1      	b.n	8011d3e <__sflush_r+0x1a>
 8011dda:	89a3      	ldrh	r3, [r4, #12]
 8011ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011de0:	81a3      	strh	r3, [r4, #12]
 8011de2:	e7ad      	b.n	8011d40 <__sflush_r+0x1c>
 8011de4:	690f      	ldr	r7, [r1, #16]
 8011de6:	2f00      	cmp	r7, #0
 8011de8:	d0a9      	beq.n	8011d3e <__sflush_r+0x1a>
 8011dea:	0793      	lsls	r3, r2, #30
 8011dec:	680e      	ldr	r6, [r1, #0]
 8011dee:	bf08      	it	eq
 8011df0:	694b      	ldreq	r3, [r1, #20]
 8011df2:	600f      	str	r7, [r1, #0]
 8011df4:	bf18      	it	ne
 8011df6:	2300      	movne	r3, #0
 8011df8:	eba6 0807 	sub.w	r8, r6, r7
 8011dfc:	608b      	str	r3, [r1, #8]
 8011dfe:	f1b8 0f00 	cmp.w	r8, #0
 8011e02:	dd9c      	ble.n	8011d3e <__sflush_r+0x1a>
 8011e04:	6a21      	ldr	r1, [r4, #32]
 8011e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e08:	4643      	mov	r3, r8
 8011e0a:	463a      	mov	r2, r7
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	47b0      	blx	r6
 8011e10:	2800      	cmp	r0, #0
 8011e12:	dc06      	bgt.n	8011e22 <__sflush_r+0xfe>
 8011e14:	89a3      	ldrh	r3, [r4, #12]
 8011e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e1a:	81a3      	strh	r3, [r4, #12]
 8011e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e20:	e78e      	b.n	8011d40 <__sflush_r+0x1c>
 8011e22:	4407      	add	r7, r0
 8011e24:	eba8 0800 	sub.w	r8, r8, r0
 8011e28:	e7e9      	b.n	8011dfe <__sflush_r+0xda>
 8011e2a:	bf00      	nop
 8011e2c:	20400001 	.word	0x20400001

08011e30 <_fflush_r>:
 8011e30:	b538      	push	{r3, r4, r5, lr}
 8011e32:	690b      	ldr	r3, [r1, #16]
 8011e34:	4605      	mov	r5, r0
 8011e36:	460c      	mov	r4, r1
 8011e38:	b913      	cbnz	r3, 8011e40 <_fflush_r+0x10>
 8011e3a:	2500      	movs	r5, #0
 8011e3c:	4628      	mov	r0, r5
 8011e3e:	bd38      	pop	{r3, r4, r5, pc}
 8011e40:	b118      	cbz	r0, 8011e4a <_fflush_r+0x1a>
 8011e42:	6983      	ldr	r3, [r0, #24]
 8011e44:	b90b      	cbnz	r3, 8011e4a <_fflush_r+0x1a>
 8011e46:	f000 f899 	bl	8011f7c <__sinit>
 8011e4a:	4b14      	ldr	r3, [pc, #80]	; (8011e9c <_fflush_r+0x6c>)
 8011e4c:	429c      	cmp	r4, r3
 8011e4e:	d11b      	bne.n	8011e88 <_fflush_r+0x58>
 8011e50:	686c      	ldr	r4, [r5, #4]
 8011e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d0ef      	beq.n	8011e3a <_fflush_r+0xa>
 8011e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e5c:	07d0      	lsls	r0, r2, #31
 8011e5e:	d404      	bmi.n	8011e6a <_fflush_r+0x3a>
 8011e60:	0599      	lsls	r1, r3, #22
 8011e62:	d402      	bmi.n	8011e6a <_fflush_r+0x3a>
 8011e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e66:	f000 fc3c 	bl	80126e2 <__retarget_lock_acquire_recursive>
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	4621      	mov	r1, r4
 8011e6e:	f7ff ff59 	bl	8011d24 <__sflush_r>
 8011e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e74:	07da      	lsls	r2, r3, #31
 8011e76:	4605      	mov	r5, r0
 8011e78:	d4e0      	bmi.n	8011e3c <_fflush_r+0xc>
 8011e7a:	89a3      	ldrh	r3, [r4, #12]
 8011e7c:	059b      	lsls	r3, r3, #22
 8011e7e:	d4dd      	bmi.n	8011e3c <_fflush_r+0xc>
 8011e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e82:	f000 fc30 	bl	80126e6 <__retarget_lock_release_recursive>
 8011e86:	e7d9      	b.n	8011e3c <_fflush_r+0xc>
 8011e88:	4b05      	ldr	r3, [pc, #20]	; (8011ea0 <_fflush_r+0x70>)
 8011e8a:	429c      	cmp	r4, r3
 8011e8c:	d101      	bne.n	8011e92 <_fflush_r+0x62>
 8011e8e:	68ac      	ldr	r4, [r5, #8]
 8011e90:	e7df      	b.n	8011e52 <_fflush_r+0x22>
 8011e92:	4b04      	ldr	r3, [pc, #16]	; (8011ea4 <_fflush_r+0x74>)
 8011e94:	429c      	cmp	r4, r3
 8011e96:	bf08      	it	eq
 8011e98:	68ec      	ldreq	r4, [r5, #12]
 8011e9a:	e7da      	b.n	8011e52 <_fflush_r+0x22>
 8011e9c:	08018648 	.word	0x08018648
 8011ea0:	08018668 	.word	0x08018668
 8011ea4:	08018628 	.word	0x08018628

08011ea8 <fflush>:
 8011ea8:	4601      	mov	r1, r0
 8011eaa:	b920      	cbnz	r0, 8011eb6 <fflush+0xe>
 8011eac:	4b04      	ldr	r3, [pc, #16]	; (8011ec0 <fflush+0x18>)
 8011eae:	4905      	ldr	r1, [pc, #20]	; (8011ec4 <fflush+0x1c>)
 8011eb0:	6818      	ldr	r0, [r3, #0]
 8011eb2:	f000 babb 	b.w	801242c <_fwalk_reent>
 8011eb6:	4b04      	ldr	r3, [pc, #16]	; (8011ec8 <fflush+0x20>)
 8011eb8:	6818      	ldr	r0, [r3, #0]
 8011eba:	f7ff bfb9 	b.w	8011e30 <_fflush_r>
 8011ebe:	bf00      	nop
 8011ec0:	08018688 	.word	0x08018688
 8011ec4:	08011e31 	.word	0x08011e31
 8011ec8:	20000100 	.word	0x20000100

08011ecc <std>:
 8011ecc:	2300      	movs	r3, #0
 8011ece:	b510      	push	{r4, lr}
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8011ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011eda:	6083      	str	r3, [r0, #8]
 8011edc:	8181      	strh	r1, [r0, #12]
 8011ede:	6643      	str	r3, [r0, #100]	; 0x64
 8011ee0:	81c2      	strh	r2, [r0, #14]
 8011ee2:	6183      	str	r3, [r0, #24]
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	2208      	movs	r2, #8
 8011ee8:	305c      	adds	r0, #92	; 0x5c
 8011eea:	f000 fc7f 	bl	80127ec <memset>
 8011eee:	4b05      	ldr	r3, [pc, #20]	; (8011f04 <std+0x38>)
 8011ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8011ef2:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <std+0x3c>)
 8011ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ef6:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <std+0x40>)
 8011ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011efa:	4b05      	ldr	r3, [pc, #20]	; (8011f10 <std+0x44>)
 8011efc:	6224      	str	r4, [r4, #32]
 8011efe:	6323      	str	r3, [r4, #48]	; 0x30
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	bf00      	nop
 8011f04:	08012b55 	.word	0x08012b55
 8011f08:	08012b7b 	.word	0x08012b7b
 8011f0c:	08012bb3 	.word	0x08012bb3
 8011f10:	08012bd7 	.word	0x08012bd7

08011f14 <_cleanup_r>:
 8011f14:	4901      	ldr	r1, [pc, #4]	; (8011f1c <_cleanup_r+0x8>)
 8011f16:	f000 ba89 	b.w	801242c <_fwalk_reent>
 8011f1a:	bf00      	nop
 8011f1c:	08011e31 	.word	0x08011e31

08011f20 <__sfmoreglue>:
 8011f20:	b570      	push	{r4, r5, r6, lr}
 8011f22:	1e4a      	subs	r2, r1, #1
 8011f24:	2568      	movs	r5, #104	; 0x68
 8011f26:	4355      	muls	r5, r2
 8011f28:	460e      	mov	r6, r1
 8011f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f2e:	f000 fcc5 	bl	80128bc <_malloc_r>
 8011f32:	4604      	mov	r4, r0
 8011f34:	b140      	cbz	r0, 8011f48 <__sfmoreglue+0x28>
 8011f36:	2100      	movs	r1, #0
 8011f38:	e9c0 1600 	strd	r1, r6, [r0]
 8011f3c:	300c      	adds	r0, #12
 8011f3e:	60a0      	str	r0, [r4, #8]
 8011f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f44:	f000 fc52 	bl	80127ec <memset>
 8011f48:	4620      	mov	r0, r4
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}

08011f4c <__sfp_lock_acquire>:
 8011f4c:	4801      	ldr	r0, [pc, #4]	; (8011f54 <__sfp_lock_acquire+0x8>)
 8011f4e:	f000 bbc8 	b.w	80126e2 <__retarget_lock_acquire_recursive>
 8011f52:	bf00      	nop
 8011f54:	20000c20 	.word	0x20000c20

08011f58 <__sfp_lock_release>:
 8011f58:	4801      	ldr	r0, [pc, #4]	; (8011f60 <__sfp_lock_release+0x8>)
 8011f5a:	f000 bbc4 	b.w	80126e6 <__retarget_lock_release_recursive>
 8011f5e:	bf00      	nop
 8011f60:	20000c20 	.word	0x20000c20

08011f64 <__sinit_lock_acquire>:
 8011f64:	4801      	ldr	r0, [pc, #4]	; (8011f6c <__sinit_lock_acquire+0x8>)
 8011f66:	f000 bbbc 	b.w	80126e2 <__retarget_lock_acquire_recursive>
 8011f6a:	bf00      	nop
 8011f6c:	20000c1b 	.word	0x20000c1b

08011f70 <__sinit_lock_release>:
 8011f70:	4801      	ldr	r0, [pc, #4]	; (8011f78 <__sinit_lock_release+0x8>)
 8011f72:	f000 bbb8 	b.w	80126e6 <__retarget_lock_release_recursive>
 8011f76:	bf00      	nop
 8011f78:	20000c1b 	.word	0x20000c1b

08011f7c <__sinit>:
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	4604      	mov	r4, r0
 8011f80:	f7ff fff0 	bl	8011f64 <__sinit_lock_acquire>
 8011f84:	69a3      	ldr	r3, [r4, #24]
 8011f86:	b11b      	cbz	r3, 8011f90 <__sinit+0x14>
 8011f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f8c:	f7ff bff0 	b.w	8011f70 <__sinit_lock_release>
 8011f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011f94:	6523      	str	r3, [r4, #80]	; 0x50
 8011f96:	4b13      	ldr	r3, [pc, #76]	; (8011fe4 <__sinit+0x68>)
 8011f98:	4a13      	ldr	r2, [pc, #76]	; (8011fe8 <__sinit+0x6c>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f9e:	42a3      	cmp	r3, r4
 8011fa0:	bf04      	itt	eq
 8011fa2:	2301      	moveq	r3, #1
 8011fa4:	61a3      	streq	r3, [r4, #24]
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 f820 	bl	8011fec <__sfp>
 8011fac:	6060      	str	r0, [r4, #4]
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f000 f81c 	bl	8011fec <__sfp>
 8011fb4:	60a0      	str	r0, [r4, #8]
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f000 f818 	bl	8011fec <__sfp>
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	60e0      	str	r0, [r4, #12]
 8011fc0:	2104      	movs	r1, #4
 8011fc2:	6860      	ldr	r0, [r4, #4]
 8011fc4:	f7ff ff82 	bl	8011ecc <std>
 8011fc8:	68a0      	ldr	r0, [r4, #8]
 8011fca:	2201      	movs	r2, #1
 8011fcc:	2109      	movs	r1, #9
 8011fce:	f7ff ff7d 	bl	8011ecc <std>
 8011fd2:	68e0      	ldr	r0, [r4, #12]
 8011fd4:	2202      	movs	r2, #2
 8011fd6:	2112      	movs	r1, #18
 8011fd8:	f7ff ff78 	bl	8011ecc <std>
 8011fdc:	2301      	movs	r3, #1
 8011fde:	61a3      	str	r3, [r4, #24]
 8011fe0:	e7d2      	b.n	8011f88 <__sinit+0xc>
 8011fe2:	bf00      	nop
 8011fe4:	08018688 	.word	0x08018688
 8011fe8:	08011f15 	.word	0x08011f15

08011fec <__sfp>:
 8011fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fee:	4607      	mov	r7, r0
 8011ff0:	f7ff ffac 	bl	8011f4c <__sfp_lock_acquire>
 8011ff4:	4b1e      	ldr	r3, [pc, #120]	; (8012070 <__sfp+0x84>)
 8011ff6:	681e      	ldr	r6, [r3, #0]
 8011ff8:	69b3      	ldr	r3, [r6, #24]
 8011ffa:	b913      	cbnz	r3, 8012002 <__sfp+0x16>
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f7ff ffbd 	bl	8011f7c <__sinit>
 8012002:	3648      	adds	r6, #72	; 0x48
 8012004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012008:	3b01      	subs	r3, #1
 801200a:	d503      	bpl.n	8012014 <__sfp+0x28>
 801200c:	6833      	ldr	r3, [r6, #0]
 801200e:	b30b      	cbz	r3, 8012054 <__sfp+0x68>
 8012010:	6836      	ldr	r6, [r6, #0]
 8012012:	e7f7      	b.n	8012004 <__sfp+0x18>
 8012014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012018:	b9d5      	cbnz	r5, 8012050 <__sfp+0x64>
 801201a:	4b16      	ldr	r3, [pc, #88]	; (8012074 <__sfp+0x88>)
 801201c:	60e3      	str	r3, [r4, #12]
 801201e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012022:	6665      	str	r5, [r4, #100]	; 0x64
 8012024:	f000 fb5a 	bl	80126dc <__retarget_lock_init_recursive>
 8012028:	f7ff ff96 	bl	8011f58 <__sfp_lock_release>
 801202c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012034:	6025      	str	r5, [r4, #0]
 8012036:	61a5      	str	r5, [r4, #24]
 8012038:	2208      	movs	r2, #8
 801203a:	4629      	mov	r1, r5
 801203c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012040:	f000 fbd4 	bl	80127ec <memset>
 8012044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801204c:	4620      	mov	r0, r4
 801204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012050:	3468      	adds	r4, #104	; 0x68
 8012052:	e7d9      	b.n	8012008 <__sfp+0x1c>
 8012054:	2104      	movs	r1, #4
 8012056:	4638      	mov	r0, r7
 8012058:	f7ff ff62 	bl	8011f20 <__sfmoreglue>
 801205c:	4604      	mov	r4, r0
 801205e:	6030      	str	r0, [r6, #0]
 8012060:	2800      	cmp	r0, #0
 8012062:	d1d5      	bne.n	8012010 <__sfp+0x24>
 8012064:	f7ff ff78 	bl	8011f58 <__sfp_lock_release>
 8012068:	230c      	movs	r3, #12
 801206a:	603b      	str	r3, [r7, #0]
 801206c:	e7ee      	b.n	801204c <__sfp+0x60>
 801206e:	bf00      	nop
 8012070:	08018688 	.word	0x08018688
 8012074:	ffff0001 	.word	0xffff0001

08012078 <_fopen_r>:
 8012078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801207a:	460f      	mov	r7, r1
 801207c:	4611      	mov	r1, r2
 801207e:	aa01      	add	r2, sp, #4
 8012080:	4605      	mov	r5, r0
 8012082:	f001 ff81 	bl	8013f88 <__sflags>
 8012086:	4606      	mov	r6, r0
 8012088:	b918      	cbnz	r0, 8012092 <_fopen_r+0x1a>
 801208a:	2400      	movs	r4, #0
 801208c:	4620      	mov	r0, r4
 801208e:	b003      	add	sp, #12
 8012090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012092:	4628      	mov	r0, r5
 8012094:	f7ff ffaa 	bl	8011fec <__sfp>
 8012098:	4604      	mov	r4, r0
 801209a:	2800      	cmp	r0, #0
 801209c:	d0f5      	beq.n	801208a <_fopen_r+0x12>
 801209e:	4639      	mov	r1, r7
 80120a0:	9a01      	ldr	r2, [sp, #4]
 80120a2:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80120a6:	4628      	mov	r0, r5
 80120a8:	f000 fc62 	bl	8012970 <_open_r>
 80120ac:	1e07      	subs	r7, r0, #0
 80120ae:	da09      	bge.n	80120c4 <_fopen_r+0x4c>
 80120b0:	2500      	movs	r5, #0
 80120b2:	f7ff ff4b 	bl	8011f4c <__sfp_lock_acquire>
 80120b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80120b8:	81a5      	strh	r5, [r4, #12]
 80120ba:	f000 fb10 	bl	80126de <__retarget_lock_close_recursive>
 80120be:	f7ff ff4b 	bl	8011f58 <__sfp_lock_release>
 80120c2:	e7e2      	b.n	801208a <_fopen_r+0x12>
 80120c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80120c6:	07db      	lsls	r3, r3, #31
 80120c8:	d405      	bmi.n	80120d6 <_fopen_r+0x5e>
 80120ca:	89a3      	ldrh	r3, [r4, #12]
 80120cc:	0598      	lsls	r0, r3, #22
 80120ce:	d402      	bmi.n	80120d6 <_fopen_r+0x5e>
 80120d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80120d2:	f000 fb06 	bl	80126e2 <__retarget_lock_acquire_recursive>
 80120d6:	4b0e      	ldr	r3, [pc, #56]	; (8012110 <_fopen_r+0x98>)
 80120d8:	6263      	str	r3, [r4, #36]	; 0x24
 80120da:	4b0e      	ldr	r3, [pc, #56]	; (8012114 <_fopen_r+0x9c>)
 80120dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80120de:	4b0e      	ldr	r3, [pc, #56]	; (8012118 <_fopen_r+0xa0>)
 80120e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120e2:	05f1      	lsls	r1, r6, #23
 80120e4:	4b0d      	ldr	r3, [pc, #52]	; (801211c <_fopen_r+0xa4>)
 80120e6:	81e7      	strh	r7, [r4, #14]
 80120e8:	81a6      	strh	r6, [r4, #12]
 80120ea:	6224      	str	r4, [r4, #32]
 80120ec:	6323      	str	r3, [r4, #48]	; 0x30
 80120ee:	d505      	bpl.n	80120fc <_fopen_r+0x84>
 80120f0:	2302      	movs	r3, #2
 80120f2:	2200      	movs	r2, #0
 80120f4:	4621      	mov	r1, r4
 80120f6:	4628      	mov	r0, r5
 80120f8:	f000 f888 	bl	801220c <_fseek_r>
 80120fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80120fe:	07da      	lsls	r2, r3, #31
 8012100:	d4c4      	bmi.n	801208c <_fopen_r+0x14>
 8012102:	89a3      	ldrh	r3, [r4, #12]
 8012104:	059b      	lsls	r3, r3, #22
 8012106:	d4c1      	bmi.n	801208c <_fopen_r+0x14>
 8012108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801210a:	f000 faec 	bl	80126e6 <__retarget_lock_release_recursive>
 801210e:	e7bd      	b.n	801208c <_fopen_r+0x14>
 8012110:	08012b55 	.word	0x08012b55
 8012114:	08012b7b 	.word	0x08012b7b
 8012118:	08012bb3 	.word	0x08012bb3
 801211c:	08012bd7 	.word	0x08012bd7

08012120 <fopen>:
 8012120:	4b02      	ldr	r3, [pc, #8]	; (801212c <fopen+0xc>)
 8012122:	460a      	mov	r2, r1
 8012124:	4601      	mov	r1, r0
 8012126:	6818      	ldr	r0, [r3, #0]
 8012128:	f7ff bfa6 	b.w	8012078 <_fopen_r>
 801212c:	20000100 	.word	0x20000100

08012130 <_fputs_r>:
 8012130:	b570      	push	{r4, r5, r6, lr}
 8012132:	460e      	mov	r6, r1
 8012134:	4614      	mov	r4, r2
 8012136:	4605      	mov	r5, r0
 8012138:	b118      	cbz	r0, 8012142 <_fputs_r+0x12>
 801213a:	6983      	ldr	r3, [r0, #24]
 801213c:	b90b      	cbnz	r3, 8012142 <_fputs_r+0x12>
 801213e:	f7ff ff1d 	bl	8011f7c <__sinit>
 8012142:	4b2b      	ldr	r3, [pc, #172]	; (80121f0 <_fputs_r+0xc0>)
 8012144:	429c      	cmp	r4, r3
 8012146:	d11e      	bne.n	8012186 <_fputs_r+0x56>
 8012148:	686c      	ldr	r4, [r5, #4]
 801214a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801214c:	07da      	lsls	r2, r3, #31
 801214e:	d405      	bmi.n	801215c <_fputs_r+0x2c>
 8012150:	89a3      	ldrh	r3, [r4, #12]
 8012152:	059b      	lsls	r3, r3, #22
 8012154:	d402      	bmi.n	801215c <_fputs_r+0x2c>
 8012156:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012158:	f000 fac3 	bl	80126e2 <__retarget_lock_acquire_recursive>
 801215c:	89a3      	ldrh	r3, [r4, #12]
 801215e:	0718      	lsls	r0, r3, #28
 8012160:	d51b      	bpl.n	801219a <_fputs_r+0x6a>
 8012162:	6923      	ldr	r3, [r4, #16]
 8012164:	b1cb      	cbz	r3, 801219a <_fputs_r+0x6a>
 8012166:	3e01      	subs	r6, #1
 8012168:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801216c:	bb39      	cbnz	r1, 80121be <_fputs_r+0x8e>
 801216e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8012170:	f015 0501 	ands.w	r5, r5, #1
 8012174:	d139      	bne.n	80121ea <_fputs_r+0xba>
 8012176:	89a3      	ldrh	r3, [r4, #12]
 8012178:	0599      	lsls	r1, r3, #22
 801217a:	d402      	bmi.n	8012182 <_fputs_r+0x52>
 801217c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801217e:	f000 fab2 	bl	80126e6 <__retarget_lock_release_recursive>
 8012182:	4628      	mov	r0, r5
 8012184:	bd70      	pop	{r4, r5, r6, pc}
 8012186:	4b1b      	ldr	r3, [pc, #108]	; (80121f4 <_fputs_r+0xc4>)
 8012188:	429c      	cmp	r4, r3
 801218a:	d101      	bne.n	8012190 <_fputs_r+0x60>
 801218c:	68ac      	ldr	r4, [r5, #8]
 801218e:	e7dc      	b.n	801214a <_fputs_r+0x1a>
 8012190:	4b19      	ldr	r3, [pc, #100]	; (80121f8 <_fputs_r+0xc8>)
 8012192:	429c      	cmp	r4, r3
 8012194:	bf08      	it	eq
 8012196:	68ec      	ldreq	r4, [r5, #12]
 8012198:	e7d7      	b.n	801214a <_fputs_r+0x1a>
 801219a:	4621      	mov	r1, r4
 801219c:	4628      	mov	r0, r5
 801219e:	f001 fdf1 	bl	8013d84 <__swsetup_r>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d0df      	beq.n	8012166 <_fputs_r+0x36>
 80121a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121a8:	07da      	lsls	r2, r3, #31
 80121aa:	d405      	bmi.n	80121b8 <_fputs_r+0x88>
 80121ac:	89a3      	ldrh	r3, [r4, #12]
 80121ae:	059b      	lsls	r3, r3, #22
 80121b0:	d402      	bmi.n	80121b8 <_fputs_r+0x88>
 80121b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121b4:	f000 fa97 	bl	80126e6 <__retarget_lock_release_recursive>
 80121b8:	f04f 35ff 	mov.w	r5, #4294967295
 80121bc:	e7e1      	b.n	8012182 <_fputs_r+0x52>
 80121be:	68a3      	ldr	r3, [r4, #8]
 80121c0:	3b01      	subs	r3, #1
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	60a3      	str	r3, [r4, #8]
 80121c6:	da04      	bge.n	80121d2 <_fputs_r+0xa2>
 80121c8:	69a2      	ldr	r2, [r4, #24]
 80121ca:	4293      	cmp	r3, r2
 80121cc:	db06      	blt.n	80121dc <_fputs_r+0xac>
 80121ce:	290a      	cmp	r1, #10
 80121d0:	d004      	beq.n	80121dc <_fputs_r+0xac>
 80121d2:	6823      	ldr	r3, [r4, #0]
 80121d4:	1c5a      	adds	r2, r3, #1
 80121d6:	6022      	str	r2, [r4, #0]
 80121d8:	7019      	strb	r1, [r3, #0]
 80121da:	e7c5      	b.n	8012168 <_fputs_r+0x38>
 80121dc:	4622      	mov	r2, r4
 80121de:	4628      	mov	r0, r5
 80121e0:	f001 fd6c 	bl	8013cbc <__swbuf_r>
 80121e4:	3001      	adds	r0, #1
 80121e6:	d1bf      	bne.n	8012168 <_fputs_r+0x38>
 80121e8:	e7dd      	b.n	80121a6 <_fputs_r+0x76>
 80121ea:	460d      	mov	r5, r1
 80121ec:	e7c9      	b.n	8012182 <_fputs_r+0x52>
 80121ee:	bf00      	nop
 80121f0:	08018648 	.word	0x08018648
 80121f4:	08018668 	.word	0x08018668
 80121f8:	08018628 	.word	0x08018628

080121fc <fputs>:
 80121fc:	4b02      	ldr	r3, [pc, #8]	; (8012208 <fputs+0xc>)
 80121fe:	460a      	mov	r2, r1
 8012200:	4601      	mov	r1, r0
 8012202:	6818      	ldr	r0, [r3, #0]
 8012204:	f7ff bf94 	b.w	8012130 <_fputs_r>
 8012208:	20000100 	.word	0x20000100

0801220c <_fseek_r>:
 801220c:	f000 b800 	b.w	8012210 <_fseeko_r>

08012210 <_fseeko_r>:
 8012210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012214:	460c      	mov	r4, r1
 8012216:	4617      	mov	r7, r2
 8012218:	461e      	mov	r6, r3
 801221a:	4605      	mov	r5, r0
 801221c:	b118      	cbz	r0, 8012226 <_fseeko_r+0x16>
 801221e:	6983      	ldr	r3, [r0, #24]
 8012220:	b90b      	cbnz	r3, 8012226 <_fseeko_r+0x16>
 8012222:	f7ff feab 	bl	8011f7c <__sinit>
 8012226:	4b44      	ldr	r3, [pc, #272]	; (8012338 <_fseeko_r+0x128>)
 8012228:	429c      	cmp	r4, r3
 801222a:	d122      	bne.n	8012272 <_fseeko_r+0x62>
 801222c:	686c      	ldr	r4, [r5, #4]
 801222e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012230:	07d9      	lsls	r1, r3, #31
 8012232:	d405      	bmi.n	8012240 <_fseeko_r+0x30>
 8012234:	89a3      	ldrh	r3, [r4, #12]
 8012236:	059a      	lsls	r2, r3, #22
 8012238:	d402      	bmi.n	8012240 <_fseeko_r+0x30>
 801223a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801223c:	f000 fa51 	bl	80126e2 <__retarget_lock_acquire_recursive>
 8012240:	89a3      	ldrh	r3, [r4, #12]
 8012242:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8012246:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801224a:	d103      	bne.n	8012254 <_fseeko_r+0x44>
 801224c:	4621      	mov	r1, r4
 801224e:	4628      	mov	r0, r5
 8012250:	f7ff fdee 	bl	8011e30 <_fflush_r>
 8012254:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8012258:	f1b8 0f00 	cmp.w	r8, #0
 801225c:	d113      	bne.n	8012286 <_fseeko_r+0x76>
 801225e:	231d      	movs	r3, #29
 8012260:	602b      	str	r3, [r5, #0]
 8012262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012264:	07d9      	lsls	r1, r3, #31
 8012266:	d55d      	bpl.n	8012324 <_fseeko_r+0x114>
 8012268:	f04f 36ff 	mov.w	r6, #4294967295
 801226c:	4630      	mov	r0, r6
 801226e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012272:	4b32      	ldr	r3, [pc, #200]	; (801233c <_fseeko_r+0x12c>)
 8012274:	429c      	cmp	r4, r3
 8012276:	d101      	bne.n	801227c <_fseeko_r+0x6c>
 8012278:	68ac      	ldr	r4, [r5, #8]
 801227a:	e7d8      	b.n	801222e <_fseeko_r+0x1e>
 801227c:	4b30      	ldr	r3, [pc, #192]	; (8012340 <_fseeko_r+0x130>)
 801227e:	429c      	cmp	r4, r3
 8012280:	bf08      	it	eq
 8012282:	68ec      	ldreq	r4, [r5, #12]
 8012284:	e7d3      	b.n	801222e <_fseeko_r+0x1e>
 8012286:	2e01      	cmp	r6, #1
 8012288:	d036      	beq.n	80122f8 <_fseeko_r+0xe8>
 801228a:	f036 0302 	bics.w	r3, r6, #2
 801228e:	d147      	bne.n	8012320 <_fseeko_r+0x110>
 8012290:	6923      	ldr	r3, [r4, #16]
 8012292:	b91b      	cbnz	r3, 801229c <_fseeko_r+0x8c>
 8012294:	4621      	mov	r1, r4
 8012296:	4628      	mov	r0, r5
 8012298:	f000 fa4a 	bl	8012730 <__smakebuf_r>
 801229c:	4621      	mov	r1, r4
 801229e:	4628      	mov	r0, r5
 80122a0:	f7ff fdc6 	bl	8011e30 <_fflush_r>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d1dc      	bne.n	8012262 <_fseeko_r+0x52>
 80122a8:	6a21      	ldr	r1, [r4, #32]
 80122aa:	4633      	mov	r3, r6
 80122ac:	463a      	mov	r2, r7
 80122ae:	4628      	mov	r0, r5
 80122b0:	47c0      	blx	r8
 80122b2:	3001      	adds	r0, #1
 80122b4:	d0d5      	beq.n	8012262 <_fseeko_r+0x52>
 80122b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122b8:	b141      	cbz	r1, 80122cc <_fseeko_r+0xbc>
 80122ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122be:	4299      	cmp	r1, r3
 80122c0:	d002      	beq.n	80122c8 <_fseeko_r+0xb8>
 80122c2:	4628      	mov	r0, r5
 80122c4:	f000 faaa 	bl	801281c <_free_r>
 80122c8:	2300      	movs	r3, #0
 80122ca:	6363      	str	r3, [r4, #52]	; 0x34
 80122cc:	6923      	ldr	r3, [r4, #16]
 80122ce:	6023      	str	r3, [r4, #0]
 80122d0:	89a3      	ldrh	r3, [r4, #12]
 80122d2:	2500      	movs	r5, #0
 80122d4:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80122d8:	6065      	str	r5, [r4, #4]
 80122da:	81a3      	strh	r3, [r4, #12]
 80122dc:	2208      	movs	r2, #8
 80122de:	4629      	mov	r1, r5
 80122e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80122e4:	f000 fa82 	bl	80127ec <memset>
 80122e8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80122ea:	f016 0601 	ands.w	r6, r6, #1
 80122ee:	d120      	bne.n	8012332 <_fseeko_r+0x122>
 80122f0:	89a3      	ldrh	r3, [r4, #12]
 80122f2:	059b      	lsls	r3, r3, #22
 80122f4:	d4ba      	bmi.n	801226c <_fseeko_r+0x5c>
 80122f6:	e00c      	b.n	8012312 <_fseeko_r+0x102>
 80122f8:	4621      	mov	r1, r4
 80122fa:	4628      	mov	r0, r5
 80122fc:	f000 f822 	bl	8012344 <_ftello_r>
 8012300:	1c43      	adds	r3, r0, #1
 8012302:	4606      	mov	r6, r0
 8012304:	d109      	bne.n	801231a <_fseeko_r+0x10a>
 8012306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012308:	07dd      	lsls	r5, r3, #31
 801230a:	d4ad      	bmi.n	8012268 <_fseeko_r+0x58>
 801230c:	89a3      	ldrh	r3, [r4, #12]
 801230e:	0598      	lsls	r0, r3, #22
 8012310:	d4aa      	bmi.n	8012268 <_fseeko_r+0x58>
 8012312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012314:	f000 f9e7 	bl	80126e6 <__retarget_lock_release_recursive>
 8012318:	e7a8      	b.n	801226c <_fseeko_r+0x5c>
 801231a:	4407      	add	r7, r0
 801231c:	2600      	movs	r6, #0
 801231e:	e7b7      	b.n	8012290 <_fseeko_r+0x80>
 8012320:	2316      	movs	r3, #22
 8012322:	e79d      	b.n	8012260 <_fseeko_r+0x50>
 8012324:	89a3      	ldrh	r3, [r4, #12]
 8012326:	059a      	lsls	r2, r3, #22
 8012328:	d49e      	bmi.n	8012268 <_fseeko_r+0x58>
 801232a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801232c:	f000 f9db 	bl	80126e6 <__retarget_lock_release_recursive>
 8012330:	e79a      	b.n	8012268 <_fseeko_r+0x58>
 8012332:	462e      	mov	r6, r5
 8012334:	e79a      	b.n	801226c <_fseeko_r+0x5c>
 8012336:	bf00      	nop
 8012338:	08018648 	.word	0x08018648
 801233c:	08018668 	.word	0x08018668
 8012340:	08018628 	.word	0x08018628

08012344 <_ftello_r>:
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	460c      	mov	r4, r1
 8012348:	4605      	mov	r5, r0
 801234a:	b118      	cbz	r0, 8012354 <_ftello_r+0x10>
 801234c:	6983      	ldr	r3, [r0, #24]
 801234e:	b90b      	cbnz	r3, 8012354 <_ftello_r+0x10>
 8012350:	f7ff fe14 	bl	8011f7c <__sinit>
 8012354:	4b32      	ldr	r3, [pc, #200]	; (8012420 <_ftello_r+0xdc>)
 8012356:	429c      	cmp	r4, r3
 8012358:	d114      	bne.n	8012384 <_ftello_r+0x40>
 801235a:	686c      	ldr	r4, [r5, #4]
 801235c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801235e:	07da      	lsls	r2, r3, #31
 8012360:	d405      	bmi.n	801236e <_ftello_r+0x2a>
 8012362:	89a3      	ldrh	r3, [r4, #12]
 8012364:	059b      	lsls	r3, r3, #22
 8012366:	d402      	bmi.n	801236e <_ftello_r+0x2a>
 8012368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801236a:	f000 f9ba 	bl	80126e2 <__retarget_lock_acquire_recursive>
 801236e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012370:	b9ce      	cbnz	r6, 80123a6 <_ftello_r+0x62>
 8012372:	231d      	movs	r3, #29
 8012374:	602b      	str	r3, [r5, #0]
 8012376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012378:	07de      	lsls	r6, r3, #31
 801237a:	d50d      	bpl.n	8012398 <_ftello_r+0x54>
 801237c:	f04f 35ff 	mov.w	r5, #4294967295
 8012380:	4628      	mov	r0, r5
 8012382:	bd70      	pop	{r4, r5, r6, pc}
 8012384:	4b27      	ldr	r3, [pc, #156]	; (8012424 <_ftello_r+0xe0>)
 8012386:	429c      	cmp	r4, r3
 8012388:	d101      	bne.n	801238e <_ftello_r+0x4a>
 801238a:	68ac      	ldr	r4, [r5, #8]
 801238c:	e7e6      	b.n	801235c <_ftello_r+0x18>
 801238e:	4b26      	ldr	r3, [pc, #152]	; (8012428 <_ftello_r+0xe4>)
 8012390:	429c      	cmp	r4, r3
 8012392:	bf08      	it	eq
 8012394:	68ec      	ldreq	r4, [r5, #12]
 8012396:	e7e1      	b.n	801235c <_ftello_r+0x18>
 8012398:	89a3      	ldrh	r3, [r4, #12]
 801239a:	059d      	lsls	r5, r3, #22
 801239c:	d4ee      	bmi.n	801237c <_ftello_r+0x38>
 801239e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123a0:	f000 f9a1 	bl	80126e6 <__retarget_lock_release_recursive>
 80123a4:	e7ea      	b.n	801237c <_ftello_r+0x38>
 80123a6:	89a2      	ldrh	r2, [r4, #12]
 80123a8:	f002 030c 	and.w	r3, r2, #12
 80123ac:	2b08      	cmp	r3, #8
 80123ae:	d119      	bne.n	80123e4 <_ftello_r+0xa0>
 80123b0:	6823      	ldr	r3, [r4, #0]
 80123b2:	b1bb      	cbz	r3, 80123e4 <_ftello_r+0xa0>
 80123b4:	6921      	ldr	r1, [r4, #16]
 80123b6:	1a5b      	subs	r3, r3, r1
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	dd13      	ble.n	80123e4 <_ftello_r+0xa0>
 80123bc:	05d0      	lsls	r0, r2, #23
 80123be:	d511      	bpl.n	80123e4 <_ftello_r+0xa0>
 80123c0:	2302      	movs	r3, #2
 80123c2:	2200      	movs	r2, #0
 80123c4:	6a21      	ldr	r1, [r4, #32]
 80123c6:	4628      	mov	r0, r5
 80123c8:	47b0      	blx	r6
 80123ca:	1c41      	adds	r1, r0, #1
 80123cc:	4605      	mov	r5, r0
 80123ce:	d10d      	bne.n	80123ec <_ftello_r+0xa8>
 80123d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123d2:	07da      	lsls	r2, r3, #31
 80123d4:	d4d2      	bmi.n	801237c <_ftello_r+0x38>
 80123d6:	89a3      	ldrh	r3, [r4, #12]
 80123d8:	059b      	lsls	r3, r3, #22
 80123da:	d4cf      	bmi.n	801237c <_ftello_r+0x38>
 80123dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123de:	f000 f982 	bl	80126e6 <__retarget_lock_release_recursive>
 80123e2:	e7cd      	b.n	8012380 <_ftello_r+0x3c>
 80123e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123e8:	d00f      	beq.n	801240a <_ftello_r+0xc6>
 80123ea:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80123ec:	89a2      	ldrh	r2, [r4, #12]
 80123ee:	0756      	lsls	r6, r2, #29
 80123f0:	d50d      	bpl.n	801240e <_ftello_r+0xca>
 80123f2:	6863      	ldr	r3, [r4, #4]
 80123f4:	1aed      	subs	r5, r5, r3
 80123f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123f8:	b10b      	cbz	r3, 80123fe <_ftello_r+0xba>
 80123fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123fc:	1aed      	subs	r5, r5, r3
 80123fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012400:	07d9      	lsls	r1, r3, #31
 8012402:	d4bd      	bmi.n	8012380 <_ftello_r+0x3c>
 8012404:	0593      	lsls	r3, r2, #22
 8012406:	d4bb      	bmi.n	8012380 <_ftello_r+0x3c>
 8012408:	e7e8      	b.n	80123dc <_ftello_r+0x98>
 801240a:	2301      	movs	r3, #1
 801240c:	e7da      	b.n	80123c4 <_ftello_r+0x80>
 801240e:	0710      	lsls	r0, r2, #28
 8012410:	d5f5      	bpl.n	80123fe <_ftello_r+0xba>
 8012412:	6823      	ldr	r3, [r4, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d0f2      	beq.n	80123fe <_ftello_r+0xba>
 8012418:	6921      	ldr	r1, [r4, #16]
 801241a:	1a5b      	subs	r3, r3, r1
 801241c:	441d      	add	r5, r3
 801241e:	e7ee      	b.n	80123fe <_ftello_r+0xba>
 8012420:	08018648 	.word	0x08018648
 8012424:	08018668 	.word	0x08018668
 8012428:	08018628 	.word	0x08018628

0801242c <_fwalk_reent>:
 801242c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012430:	4606      	mov	r6, r0
 8012432:	4688      	mov	r8, r1
 8012434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012438:	2700      	movs	r7, #0
 801243a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801243e:	f1b9 0901 	subs.w	r9, r9, #1
 8012442:	d505      	bpl.n	8012450 <_fwalk_reent+0x24>
 8012444:	6824      	ldr	r4, [r4, #0]
 8012446:	2c00      	cmp	r4, #0
 8012448:	d1f7      	bne.n	801243a <_fwalk_reent+0xe>
 801244a:	4638      	mov	r0, r7
 801244c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012450:	89ab      	ldrh	r3, [r5, #12]
 8012452:	2b01      	cmp	r3, #1
 8012454:	d907      	bls.n	8012466 <_fwalk_reent+0x3a>
 8012456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801245a:	3301      	adds	r3, #1
 801245c:	d003      	beq.n	8012466 <_fwalk_reent+0x3a>
 801245e:	4629      	mov	r1, r5
 8012460:	4630      	mov	r0, r6
 8012462:	47c0      	blx	r8
 8012464:	4307      	orrs	r7, r0
 8012466:	3568      	adds	r5, #104	; 0x68
 8012468:	e7e9      	b.n	801243e <_fwalk_reent+0x12>
	...

0801246c <__libc_init_array>:
 801246c:	b570      	push	{r4, r5, r6, lr}
 801246e:	4d0d      	ldr	r5, [pc, #52]	; (80124a4 <__libc_init_array+0x38>)
 8012470:	4c0d      	ldr	r4, [pc, #52]	; (80124a8 <__libc_init_array+0x3c>)
 8012472:	1b64      	subs	r4, r4, r5
 8012474:	10a4      	asrs	r4, r4, #2
 8012476:	2600      	movs	r6, #0
 8012478:	42a6      	cmp	r6, r4
 801247a:	d109      	bne.n	8012490 <__libc_init_array+0x24>
 801247c:	4d0b      	ldr	r5, [pc, #44]	; (80124ac <__libc_init_array+0x40>)
 801247e:	4c0c      	ldr	r4, [pc, #48]	; (80124b0 <__libc_init_array+0x44>)
 8012480:	f003 f8c8 	bl	8015614 <_init>
 8012484:	1b64      	subs	r4, r4, r5
 8012486:	10a4      	asrs	r4, r4, #2
 8012488:	2600      	movs	r6, #0
 801248a:	42a6      	cmp	r6, r4
 801248c:	d105      	bne.n	801249a <__libc_init_array+0x2e>
 801248e:	bd70      	pop	{r4, r5, r6, pc}
 8012490:	f855 3b04 	ldr.w	r3, [r5], #4
 8012494:	4798      	blx	r3
 8012496:	3601      	adds	r6, #1
 8012498:	e7ee      	b.n	8012478 <__libc_init_array+0xc>
 801249a:	f855 3b04 	ldr.w	r3, [r5], #4
 801249e:	4798      	blx	r3
 80124a0:	3601      	adds	r6, #1
 80124a2:	e7f2      	b.n	801248a <__libc_init_array+0x1e>
 80124a4:	08018c20 	.word	0x08018c20
 80124a8:	08018c20 	.word	0x08018c20
 80124ac:	08018c20 	.word	0x08018c20
 80124b0:	08018c2c 	.word	0x08018c2c

080124b4 <localtime>:
 80124b4:	b538      	push	{r3, r4, r5, lr}
 80124b6:	4b0b      	ldr	r3, [pc, #44]	; (80124e4 <localtime+0x30>)
 80124b8:	681d      	ldr	r5, [r3, #0]
 80124ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80124bc:	4604      	mov	r4, r0
 80124be:	b953      	cbnz	r3, 80124d6 <localtime+0x22>
 80124c0:	2024      	movs	r0, #36	; 0x24
 80124c2:	f000 f975 	bl	80127b0 <malloc>
 80124c6:	4602      	mov	r2, r0
 80124c8:	63e8      	str	r0, [r5, #60]	; 0x3c
 80124ca:	b920      	cbnz	r0, 80124d6 <localtime+0x22>
 80124cc:	4b06      	ldr	r3, [pc, #24]	; (80124e8 <localtime+0x34>)
 80124ce:	4807      	ldr	r0, [pc, #28]	; (80124ec <localtime+0x38>)
 80124d0:	2132      	movs	r1, #50	; 0x32
 80124d2:	f001 fd2b 	bl	8013f2c <__assert_func>
 80124d6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80124d8:	4620      	mov	r0, r4
 80124da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124de:	f000 b807 	b.w	80124f0 <localtime_r>
 80124e2:	bf00      	nop
 80124e4:	20000100 	.word	0x20000100
 80124e8:	0801868c 	.word	0x0801868c
 80124ec:	080186a3 	.word	0x080186a3

080124f0 <localtime_r>:
 80124f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80124f4:	4607      	mov	r7, r0
 80124f6:	9101      	str	r1, [sp, #4]
 80124f8:	f001 fdf4 	bl	80140e4 <__gettzinfo>
 80124fc:	9901      	ldr	r1, [sp, #4]
 80124fe:	4680      	mov	r8, r0
 8012500:	4638      	mov	r0, r7
 8012502:	f001 fdf3 	bl	80140ec <gmtime_r>
 8012506:	6943      	ldr	r3, [r0, #20]
 8012508:	079a      	lsls	r2, r3, #30
 801250a:	4604      	mov	r4, r0
 801250c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8012510:	d105      	bne.n	801251e <localtime_r+0x2e>
 8012512:	2264      	movs	r2, #100	; 0x64
 8012514:	fb96 f3f2 	sdiv	r3, r6, r2
 8012518:	fb02 6313 	mls	r3, r2, r3, r6
 801251c:	bb7b      	cbnz	r3, 801257e <localtime_r+0x8e>
 801251e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012522:	fb96 f5f3 	sdiv	r5, r6, r3
 8012526:	fb03 6515 	mls	r5, r3, r5, r6
 801252a:	fab5 f585 	clz	r5, r5
 801252e:	096d      	lsrs	r5, r5, #5
 8012530:	4b68      	ldr	r3, [pc, #416]	; (80126d4 <localtime_r+0x1e4>)
 8012532:	2230      	movs	r2, #48	; 0x30
 8012534:	fb02 3505 	mla	r5, r2, r5, r3
 8012538:	f001 f9f8 	bl	801392c <__tz_lock>
 801253c:	f001 fa02 	bl	8013944 <_tzset_unlocked>
 8012540:	4b65      	ldr	r3, [pc, #404]	; (80126d8 <localtime_r+0x1e8>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	b353      	cbz	r3, 801259c <localtime_r+0xac>
 8012546:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801254a:	42b3      	cmp	r3, r6
 801254c:	d119      	bne.n	8012582 <localtime_r+0x92>
 801254e:	f8d8 1000 	ldr.w	r1, [r8]
 8012552:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012556:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801255a:	b9d1      	cbnz	r1, 8012592 <localtime_r+0xa2>
 801255c:	4296      	cmp	r6, r2
 801255e:	eb77 0303 	sbcs.w	r3, r7, r3
 8012562:	da23      	bge.n	80125ac <localtime_r+0xbc>
 8012564:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8012568:	4296      	cmp	r6, r2
 801256a:	eb77 0303 	sbcs.w	r3, r7, r3
 801256e:	bfb4      	ite	lt
 8012570:	2301      	movlt	r3, #1
 8012572:	2300      	movge	r3, #0
 8012574:	6223      	str	r3, [r4, #32]
 8012576:	db1b      	blt.n	80125b0 <localtime_r+0xc0>
 8012578:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801257c:	e01a      	b.n	80125b4 <localtime_r+0xc4>
 801257e:	2501      	movs	r5, #1
 8012580:	e7d6      	b.n	8012530 <localtime_r+0x40>
 8012582:	4630      	mov	r0, r6
 8012584:	f001 f92a 	bl	80137dc <__tzcalc_limits>
 8012588:	2800      	cmp	r0, #0
 801258a:	d1e0      	bne.n	801254e <localtime_r+0x5e>
 801258c:	f04f 33ff 	mov.w	r3, #4294967295
 8012590:	e004      	b.n	801259c <localtime_r+0xac>
 8012592:	4296      	cmp	r6, r2
 8012594:	eb77 0303 	sbcs.w	r3, r7, r3
 8012598:	da02      	bge.n	80125a0 <localtime_r+0xb0>
 801259a:	2300      	movs	r3, #0
 801259c:	6223      	str	r3, [r4, #32]
 801259e:	e7eb      	b.n	8012578 <localtime_r+0x88>
 80125a0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80125a4:	4296      	cmp	r6, r2
 80125a6:	eb77 0303 	sbcs.w	r3, r7, r3
 80125aa:	daf6      	bge.n	801259a <localtime_r+0xaa>
 80125ac:	2301      	movs	r3, #1
 80125ae:	6223      	str	r3, [r4, #32]
 80125b0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80125b4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80125b8:	203c      	movs	r0, #60	; 0x3c
 80125ba:	fb91 f6f3 	sdiv	r6, r1, r3
 80125be:	fb03 1316 	mls	r3, r3, r6, r1
 80125c2:	6861      	ldr	r1, [r4, #4]
 80125c4:	fb93 f2f0 	sdiv	r2, r3, r0
 80125c8:	fb00 3012 	mls	r0, r0, r2, r3
 80125cc:	6823      	ldr	r3, [r4, #0]
 80125ce:	1a89      	subs	r1, r1, r2
 80125d0:	68a2      	ldr	r2, [r4, #8]
 80125d2:	6061      	str	r1, [r4, #4]
 80125d4:	1a1b      	subs	r3, r3, r0
 80125d6:	1b92      	subs	r2, r2, r6
 80125d8:	2b3b      	cmp	r3, #59	; 0x3b
 80125da:	6023      	str	r3, [r4, #0]
 80125dc:	60a2      	str	r2, [r4, #8]
 80125de:	dd35      	ble.n	801264c <localtime_r+0x15c>
 80125e0:	3101      	adds	r1, #1
 80125e2:	6061      	str	r1, [r4, #4]
 80125e4:	3b3c      	subs	r3, #60	; 0x3c
 80125e6:	6023      	str	r3, [r4, #0]
 80125e8:	6863      	ldr	r3, [r4, #4]
 80125ea:	2b3b      	cmp	r3, #59	; 0x3b
 80125ec:	dd34      	ble.n	8012658 <localtime_r+0x168>
 80125ee:	3201      	adds	r2, #1
 80125f0:	60a2      	str	r2, [r4, #8]
 80125f2:	3b3c      	subs	r3, #60	; 0x3c
 80125f4:	6063      	str	r3, [r4, #4]
 80125f6:	68a3      	ldr	r3, [r4, #8]
 80125f8:	2b17      	cmp	r3, #23
 80125fa:	dd33      	ble.n	8012664 <localtime_r+0x174>
 80125fc:	69e2      	ldr	r2, [r4, #28]
 80125fe:	3201      	adds	r2, #1
 8012600:	61e2      	str	r2, [r4, #28]
 8012602:	69a2      	ldr	r2, [r4, #24]
 8012604:	3201      	adds	r2, #1
 8012606:	2a06      	cmp	r2, #6
 8012608:	bfc8      	it	gt
 801260a:	2200      	movgt	r2, #0
 801260c:	61a2      	str	r2, [r4, #24]
 801260e:	68e2      	ldr	r2, [r4, #12]
 8012610:	3b18      	subs	r3, #24
 8012612:	3201      	adds	r2, #1
 8012614:	60a3      	str	r3, [r4, #8]
 8012616:	6923      	ldr	r3, [r4, #16]
 8012618:	60e2      	str	r2, [r4, #12]
 801261a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801261e:	428a      	cmp	r2, r1
 8012620:	dd0e      	ble.n	8012640 <localtime_r+0x150>
 8012622:	2b0b      	cmp	r3, #11
 8012624:	eba2 0201 	sub.w	r2, r2, r1
 8012628:	60e2      	str	r2, [r4, #12]
 801262a:	f103 0201 	add.w	r2, r3, #1
 801262e:	bf09      	itett	eq
 8012630:	6963      	ldreq	r3, [r4, #20]
 8012632:	6122      	strne	r2, [r4, #16]
 8012634:	2200      	moveq	r2, #0
 8012636:	3301      	addeq	r3, #1
 8012638:	bf02      	ittt	eq
 801263a:	6122      	streq	r2, [r4, #16]
 801263c:	6163      	streq	r3, [r4, #20]
 801263e:	61e2      	streq	r2, [r4, #28]
 8012640:	f001 f97a 	bl	8013938 <__tz_unlock>
 8012644:	4620      	mov	r0, r4
 8012646:	b002      	add	sp, #8
 8012648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801264c:	2b00      	cmp	r3, #0
 801264e:	dacb      	bge.n	80125e8 <localtime_r+0xf8>
 8012650:	3901      	subs	r1, #1
 8012652:	6061      	str	r1, [r4, #4]
 8012654:	333c      	adds	r3, #60	; 0x3c
 8012656:	e7c6      	b.n	80125e6 <localtime_r+0xf6>
 8012658:	2b00      	cmp	r3, #0
 801265a:	dacc      	bge.n	80125f6 <localtime_r+0x106>
 801265c:	3a01      	subs	r2, #1
 801265e:	60a2      	str	r2, [r4, #8]
 8012660:	333c      	adds	r3, #60	; 0x3c
 8012662:	e7c7      	b.n	80125f4 <localtime_r+0x104>
 8012664:	2b00      	cmp	r3, #0
 8012666:	daeb      	bge.n	8012640 <localtime_r+0x150>
 8012668:	69e2      	ldr	r2, [r4, #28]
 801266a:	3a01      	subs	r2, #1
 801266c:	61e2      	str	r2, [r4, #28]
 801266e:	69a2      	ldr	r2, [r4, #24]
 8012670:	3a01      	subs	r2, #1
 8012672:	bf48      	it	mi
 8012674:	2206      	movmi	r2, #6
 8012676:	61a2      	str	r2, [r4, #24]
 8012678:	68e2      	ldr	r2, [r4, #12]
 801267a:	3318      	adds	r3, #24
 801267c:	3a01      	subs	r2, #1
 801267e:	60e2      	str	r2, [r4, #12]
 8012680:	60a3      	str	r3, [r4, #8]
 8012682:	2a00      	cmp	r2, #0
 8012684:	d1dc      	bne.n	8012640 <localtime_r+0x150>
 8012686:	6923      	ldr	r3, [r4, #16]
 8012688:	3b01      	subs	r3, #1
 801268a:	d405      	bmi.n	8012698 <localtime_r+0x1a8>
 801268c:	6123      	str	r3, [r4, #16]
 801268e:	6923      	ldr	r3, [r4, #16]
 8012690:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8012694:	60e3      	str	r3, [r4, #12]
 8012696:	e7d3      	b.n	8012640 <localtime_r+0x150>
 8012698:	230b      	movs	r3, #11
 801269a:	6123      	str	r3, [r4, #16]
 801269c:	6963      	ldr	r3, [r4, #20]
 801269e:	1e5a      	subs	r2, r3, #1
 80126a0:	6162      	str	r2, [r4, #20]
 80126a2:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80126a6:	0793      	lsls	r3, r2, #30
 80126a8:	d105      	bne.n	80126b6 <localtime_r+0x1c6>
 80126aa:	2164      	movs	r1, #100	; 0x64
 80126ac:	fb92 f3f1 	sdiv	r3, r2, r1
 80126b0:	fb01 2313 	mls	r3, r1, r3, r2
 80126b4:	b963      	cbnz	r3, 80126d0 <localtime_r+0x1e0>
 80126b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80126ba:	fb92 f3f1 	sdiv	r3, r2, r1
 80126be:	fb01 2313 	mls	r3, r1, r3, r2
 80126c2:	fab3 f383 	clz	r3, r3
 80126c6:	095b      	lsrs	r3, r3, #5
 80126c8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80126cc:	61e3      	str	r3, [r4, #28]
 80126ce:	e7de      	b.n	801268e <localtime_r+0x19e>
 80126d0:	2301      	movs	r3, #1
 80126d2:	e7f9      	b.n	80126c8 <localtime_r+0x1d8>
 80126d4:	08018704 	.word	0x08018704
 80126d8:	20000b7c 	.word	0x20000b7c

080126dc <__retarget_lock_init_recursive>:
 80126dc:	4770      	bx	lr

080126de <__retarget_lock_close_recursive>:
 80126de:	4770      	bx	lr

080126e0 <__retarget_lock_acquire>:
 80126e0:	4770      	bx	lr

080126e2 <__retarget_lock_acquire_recursive>:
 80126e2:	4770      	bx	lr

080126e4 <__retarget_lock_release>:
 80126e4:	4770      	bx	lr

080126e6 <__retarget_lock_release_recursive>:
 80126e6:	4770      	bx	lr

080126e8 <__swhatbuf_r>:
 80126e8:	b570      	push	{r4, r5, r6, lr}
 80126ea:	460e      	mov	r6, r1
 80126ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126f0:	2900      	cmp	r1, #0
 80126f2:	b096      	sub	sp, #88	; 0x58
 80126f4:	4614      	mov	r4, r2
 80126f6:	461d      	mov	r5, r3
 80126f8:	da07      	bge.n	801270a <__swhatbuf_r+0x22>
 80126fa:	2300      	movs	r3, #0
 80126fc:	602b      	str	r3, [r5, #0]
 80126fe:	89b3      	ldrh	r3, [r6, #12]
 8012700:	061a      	lsls	r2, r3, #24
 8012702:	d410      	bmi.n	8012726 <__swhatbuf_r+0x3e>
 8012704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012708:	e00e      	b.n	8012728 <__swhatbuf_r+0x40>
 801270a:	466a      	mov	r2, sp
 801270c:	f001 fc84 	bl	8014018 <_fstat_r>
 8012710:	2800      	cmp	r0, #0
 8012712:	dbf2      	blt.n	80126fa <__swhatbuf_r+0x12>
 8012714:	9a01      	ldr	r2, [sp, #4]
 8012716:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801271a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801271e:	425a      	negs	r2, r3
 8012720:	415a      	adcs	r2, r3
 8012722:	602a      	str	r2, [r5, #0]
 8012724:	e7ee      	b.n	8012704 <__swhatbuf_r+0x1c>
 8012726:	2340      	movs	r3, #64	; 0x40
 8012728:	2000      	movs	r0, #0
 801272a:	6023      	str	r3, [r4, #0]
 801272c:	b016      	add	sp, #88	; 0x58
 801272e:	bd70      	pop	{r4, r5, r6, pc}

08012730 <__smakebuf_r>:
 8012730:	898b      	ldrh	r3, [r1, #12]
 8012732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012734:	079d      	lsls	r5, r3, #30
 8012736:	4606      	mov	r6, r0
 8012738:	460c      	mov	r4, r1
 801273a:	d507      	bpl.n	801274c <__smakebuf_r+0x1c>
 801273c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012740:	6023      	str	r3, [r4, #0]
 8012742:	6123      	str	r3, [r4, #16]
 8012744:	2301      	movs	r3, #1
 8012746:	6163      	str	r3, [r4, #20]
 8012748:	b002      	add	sp, #8
 801274a:	bd70      	pop	{r4, r5, r6, pc}
 801274c:	ab01      	add	r3, sp, #4
 801274e:	466a      	mov	r2, sp
 8012750:	f7ff ffca 	bl	80126e8 <__swhatbuf_r>
 8012754:	9900      	ldr	r1, [sp, #0]
 8012756:	4605      	mov	r5, r0
 8012758:	4630      	mov	r0, r6
 801275a:	f000 f8af 	bl	80128bc <_malloc_r>
 801275e:	b948      	cbnz	r0, 8012774 <__smakebuf_r+0x44>
 8012760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012764:	059a      	lsls	r2, r3, #22
 8012766:	d4ef      	bmi.n	8012748 <__smakebuf_r+0x18>
 8012768:	f023 0303 	bic.w	r3, r3, #3
 801276c:	f043 0302 	orr.w	r3, r3, #2
 8012770:	81a3      	strh	r3, [r4, #12]
 8012772:	e7e3      	b.n	801273c <__smakebuf_r+0xc>
 8012774:	4b0d      	ldr	r3, [pc, #52]	; (80127ac <__smakebuf_r+0x7c>)
 8012776:	62b3      	str	r3, [r6, #40]	; 0x28
 8012778:	89a3      	ldrh	r3, [r4, #12]
 801277a:	6020      	str	r0, [r4, #0]
 801277c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012780:	81a3      	strh	r3, [r4, #12]
 8012782:	9b00      	ldr	r3, [sp, #0]
 8012784:	6163      	str	r3, [r4, #20]
 8012786:	9b01      	ldr	r3, [sp, #4]
 8012788:	6120      	str	r0, [r4, #16]
 801278a:	b15b      	cbz	r3, 80127a4 <__smakebuf_r+0x74>
 801278c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012790:	4630      	mov	r0, r6
 8012792:	f001 fd5b 	bl	801424c <_isatty_r>
 8012796:	b128      	cbz	r0, 80127a4 <__smakebuf_r+0x74>
 8012798:	89a3      	ldrh	r3, [r4, #12]
 801279a:	f023 0303 	bic.w	r3, r3, #3
 801279e:	f043 0301 	orr.w	r3, r3, #1
 80127a2:	81a3      	strh	r3, [r4, #12]
 80127a4:	89a0      	ldrh	r0, [r4, #12]
 80127a6:	4305      	orrs	r5, r0
 80127a8:	81a5      	strh	r5, [r4, #12]
 80127aa:	e7cd      	b.n	8012748 <__smakebuf_r+0x18>
 80127ac:	08011f15 	.word	0x08011f15

080127b0 <malloc>:
 80127b0:	4b02      	ldr	r3, [pc, #8]	; (80127bc <malloc+0xc>)
 80127b2:	4601      	mov	r1, r0
 80127b4:	6818      	ldr	r0, [r3, #0]
 80127b6:	f000 b881 	b.w	80128bc <_malloc_r>
 80127ba:	bf00      	nop
 80127bc:	20000100 	.word	0x20000100

080127c0 <free>:
 80127c0:	4b02      	ldr	r3, [pc, #8]	; (80127cc <free+0xc>)
 80127c2:	4601      	mov	r1, r0
 80127c4:	6818      	ldr	r0, [r3, #0]
 80127c6:	f000 b829 	b.w	801281c <_free_r>
 80127ca:	bf00      	nop
 80127cc:	20000100 	.word	0x20000100

080127d0 <memcpy>:
 80127d0:	440a      	add	r2, r1
 80127d2:	4291      	cmp	r1, r2
 80127d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80127d8:	d100      	bne.n	80127dc <memcpy+0xc>
 80127da:	4770      	bx	lr
 80127dc:	b510      	push	{r4, lr}
 80127de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127e6:	4291      	cmp	r1, r2
 80127e8:	d1f9      	bne.n	80127de <memcpy+0xe>
 80127ea:	bd10      	pop	{r4, pc}

080127ec <memset>:
 80127ec:	4402      	add	r2, r0
 80127ee:	4603      	mov	r3, r0
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d100      	bne.n	80127f6 <memset+0xa>
 80127f4:	4770      	bx	lr
 80127f6:	f803 1b01 	strb.w	r1, [r3], #1
 80127fa:	e7f9      	b.n	80127f0 <memset+0x4>

080127fc <_calloc_r>:
 80127fc:	b513      	push	{r0, r1, r4, lr}
 80127fe:	434a      	muls	r2, r1
 8012800:	4611      	mov	r1, r2
 8012802:	9201      	str	r2, [sp, #4]
 8012804:	f000 f85a 	bl	80128bc <_malloc_r>
 8012808:	4604      	mov	r4, r0
 801280a:	b118      	cbz	r0, 8012814 <_calloc_r+0x18>
 801280c:	9a01      	ldr	r2, [sp, #4]
 801280e:	2100      	movs	r1, #0
 8012810:	f7ff ffec 	bl	80127ec <memset>
 8012814:	4620      	mov	r0, r4
 8012816:	b002      	add	sp, #8
 8012818:	bd10      	pop	{r4, pc}
	...

0801281c <_free_r>:
 801281c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801281e:	2900      	cmp	r1, #0
 8012820:	d048      	beq.n	80128b4 <_free_r+0x98>
 8012822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012826:	9001      	str	r0, [sp, #4]
 8012828:	2b00      	cmp	r3, #0
 801282a:	f1a1 0404 	sub.w	r4, r1, #4
 801282e:	bfb8      	it	lt
 8012830:	18e4      	addlt	r4, r4, r3
 8012832:	f001 fd43 	bl	80142bc <__malloc_lock>
 8012836:	4a20      	ldr	r2, [pc, #128]	; (80128b8 <_free_r+0x9c>)
 8012838:	9801      	ldr	r0, [sp, #4]
 801283a:	6813      	ldr	r3, [r2, #0]
 801283c:	4615      	mov	r5, r2
 801283e:	b933      	cbnz	r3, 801284e <_free_r+0x32>
 8012840:	6063      	str	r3, [r4, #4]
 8012842:	6014      	str	r4, [r2, #0]
 8012844:	b003      	add	sp, #12
 8012846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801284a:	f001 bd3d 	b.w	80142c8 <__malloc_unlock>
 801284e:	42a3      	cmp	r3, r4
 8012850:	d90b      	bls.n	801286a <_free_r+0x4e>
 8012852:	6821      	ldr	r1, [r4, #0]
 8012854:	1862      	adds	r2, r4, r1
 8012856:	4293      	cmp	r3, r2
 8012858:	bf04      	itt	eq
 801285a:	681a      	ldreq	r2, [r3, #0]
 801285c:	685b      	ldreq	r3, [r3, #4]
 801285e:	6063      	str	r3, [r4, #4]
 8012860:	bf04      	itt	eq
 8012862:	1852      	addeq	r2, r2, r1
 8012864:	6022      	streq	r2, [r4, #0]
 8012866:	602c      	str	r4, [r5, #0]
 8012868:	e7ec      	b.n	8012844 <_free_r+0x28>
 801286a:	461a      	mov	r2, r3
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	b10b      	cbz	r3, 8012874 <_free_r+0x58>
 8012870:	42a3      	cmp	r3, r4
 8012872:	d9fa      	bls.n	801286a <_free_r+0x4e>
 8012874:	6811      	ldr	r1, [r2, #0]
 8012876:	1855      	adds	r5, r2, r1
 8012878:	42a5      	cmp	r5, r4
 801287a:	d10b      	bne.n	8012894 <_free_r+0x78>
 801287c:	6824      	ldr	r4, [r4, #0]
 801287e:	4421      	add	r1, r4
 8012880:	1854      	adds	r4, r2, r1
 8012882:	42a3      	cmp	r3, r4
 8012884:	6011      	str	r1, [r2, #0]
 8012886:	d1dd      	bne.n	8012844 <_free_r+0x28>
 8012888:	681c      	ldr	r4, [r3, #0]
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	6053      	str	r3, [r2, #4]
 801288e:	4421      	add	r1, r4
 8012890:	6011      	str	r1, [r2, #0]
 8012892:	e7d7      	b.n	8012844 <_free_r+0x28>
 8012894:	d902      	bls.n	801289c <_free_r+0x80>
 8012896:	230c      	movs	r3, #12
 8012898:	6003      	str	r3, [r0, #0]
 801289a:	e7d3      	b.n	8012844 <_free_r+0x28>
 801289c:	6825      	ldr	r5, [r4, #0]
 801289e:	1961      	adds	r1, r4, r5
 80128a0:	428b      	cmp	r3, r1
 80128a2:	bf04      	itt	eq
 80128a4:	6819      	ldreq	r1, [r3, #0]
 80128a6:	685b      	ldreq	r3, [r3, #4]
 80128a8:	6063      	str	r3, [r4, #4]
 80128aa:	bf04      	itt	eq
 80128ac:	1949      	addeq	r1, r1, r5
 80128ae:	6021      	streq	r1, [r4, #0]
 80128b0:	6054      	str	r4, [r2, #4]
 80128b2:	e7c7      	b.n	8012844 <_free_r+0x28>
 80128b4:	b003      	add	sp, #12
 80128b6:	bd30      	pop	{r4, r5, pc}
 80128b8:	20000b58 	.word	0x20000b58

080128bc <_malloc_r>:
 80128bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128be:	1ccd      	adds	r5, r1, #3
 80128c0:	f025 0503 	bic.w	r5, r5, #3
 80128c4:	3508      	adds	r5, #8
 80128c6:	2d0c      	cmp	r5, #12
 80128c8:	bf38      	it	cc
 80128ca:	250c      	movcc	r5, #12
 80128cc:	2d00      	cmp	r5, #0
 80128ce:	4606      	mov	r6, r0
 80128d0:	db01      	blt.n	80128d6 <_malloc_r+0x1a>
 80128d2:	42a9      	cmp	r1, r5
 80128d4:	d903      	bls.n	80128de <_malloc_r+0x22>
 80128d6:	230c      	movs	r3, #12
 80128d8:	6033      	str	r3, [r6, #0]
 80128da:	2000      	movs	r0, #0
 80128dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128de:	f001 fced 	bl	80142bc <__malloc_lock>
 80128e2:	4921      	ldr	r1, [pc, #132]	; (8012968 <_malloc_r+0xac>)
 80128e4:	680a      	ldr	r2, [r1, #0]
 80128e6:	4614      	mov	r4, r2
 80128e8:	b99c      	cbnz	r4, 8012912 <_malloc_r+0x56>
 80128ea:	4f20      	ldr	r7, [pc, #128]	; (801296c <_malloc_r+0xb0>)
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	b923      	cbnz	r3, 80128fa <_malloc_r+0x3e>
 80128f0:	4621      	mov	r1, r4
 80128f2:	4630      	mov	r0, r6
 80128f4:	f000 f8da 	bl	8012aac <_sbrk_r>
 80128f8:	6038      	str	r0, [r7, #0]
 80128fa:	4629      	mov	r1, r5
 80128fc:	4630      	mov	r0, r6
 80128fe:	f000 f8d5 	bl	8012aac <_sbrk_r>
 8012902:	1c43      	adds	r3, r0, #1
 8012904:	d123      	bne.n	801294e <_malloc_r+0x92>
 8012906:	230c      	movs	r3, #12
 8012908:	6033      	str	r3, [r6, #0]
 801290a:	4630      	mov	r0, r6
 801290c:	f001 fcdc 	bl	80142c8 <__malloc_unlock>
 8012910:	e7e3      	b.n	80128da <_malloc_r+0x1e>
 8012912:	6823      	ldr	r3, [r4, #0]
 8012914:	1b5b      	subs	r3, r3, r5
 8012916:	d417      	bmi.n	8012948 <_malloc_r+0x8c>
 8012918:	2b0b      	cmp	r3, #11
 801291a:	d903      	bls.n	8012924 <_malloc_r+0x68>
 801291c:	6023      	str	r3, [r4, #0]
 801291e:	441c      	add	r4, r3
 8012920:	6025      	str	r5, [r4, #0]
 8012922:	e004      	b.n	801292e <_malloc_r+0x72>
 8012924:	6863      	ldr	r3, [r4, #4]
 8012926:	42a2      	cmp	r2, r4
 8012928:	bf0c      	ite	eq
 801292a:	600b      	streq	r3, [r1, #0]
 801292c:	6053      	strne	r3, [r2, #4]
 801292e:	4630      	mov	r0, r6
 8012930:	f001 fcca 	bl	80142c8 <__malloc_unlock>
 8012934:	f104 000b 	add.w	r0, r4, #11
 8012938:	1d23      	adds	r3, r4, #4
 801293a:	f020 0007 	bic.w	r0, r0, #7
 801293e:	1ac2      	subs	r2, r0, r3
 8012940:	d0cc      	beq.n	80128dc <_malloc_r+0x20>
 8012942:	1a1b      	subs	r3, r3, r0
 8012944:	50a3      	str	r3, [r4, r2]
 8012946:	e7c9      	b.n	80128dc <_malloc_r+0x20>
 8012948:	4622      	mov	r2, r4
 801294a:	6864      	ldr	r4, [r4, #4]
 801294c:	e7cc      	b.n	80128e8 <_malloc_r+0x2c>
 801294e:	1cc4      	adds	r4, r0, #3
 8012950:	f024 0403 	bic.w	r4, r4, #3
 8012954:	42a0      	cmp	r0, r4
 8012956:	d0e3      	beq.n	8012920 <_malloc_r+0x64>
 8012958:	1a21      	subs	r1, r4, r0
 801295a:	4630      	mov	r0, r6
 801295c:	f000 f8a6 	bl	8012aac <_sbrk_r>
 8012960:	3001      	adds	r0, #1
 8012962:	d1dd      	bne.n	8012920 <_malloc_r+0x64>
 8012964:	e7cf      	b.n	8012906 <_malloc_r+0x4a>
 8012966:	bf00      	nop
 8012968:	20000b58 	.word	0x20000b58
 801296c:	20000b5c 	.word	0x20000b5c

08012970 <_open_r>:
 8012970:	b538      	push	{r3, r4, r5, lr}
 8012972:	4d07      	ldr	r5, [pc, #28]	; (8012990 <_open_r+0x20>)
 8012974:	4604      	mov	r4, r0
 8012976:	4608      	mov	r0, r1
 8012978:	4611      	mov	r1, r2
 801297a:	2200      	movs	r2, #0
 801297c:	602a      	str	r2, [r5, #0]
 801297e:	461a      	mov	r2, r3
 8012980:	f7ee fa76 	bl	8000e70 <_open>
 8012984:	1c43      	adds	r3, r0, #1
 8012986:	d102      	bne.n	801298e <_open_r+0x1e>
 8012988:	682b      	ldr	r3, [r5, #0]
 801298a:	b103      	cbz	r3, 801298e <_open_r+0x1e>
 801298c:	6023      	str	r3, [r4, #0]
 801298e:	bd38      	pop	{r3, r4, r5, pc}
 8012990:	20000c24 	.word	0x20000c24

08012994 <putchar>:
 8012994:	4b09      	ldr	r3, [pc, #36]	; (80129bc <putchar+0x28>)
 8012996:	b513      	push	{r0, r1, r4, lr}
 8012998:	681c      	ldr	r4, [r3, #0]
 801299a:	4601      	mov	r1, r0
 801299c:	b134      	cbz	r4, 80129ac <putchar+0x18>
 801299e:	69a3      	ldr	r3, [r4, #24]
 80129a0:	b923      	cbnz	r3, 80129ac <putchar+0x18>
 80129a2:	9001      	str	r0, [sp, #4]
 80129a4:	4620      	mov	r0, r4
 80129a6:	f7ff fae9 	bl	8011f7c <__sinit>
 80129aa:	9901      	ldr	r1, [sp, #4]
 80129ac:	68a2      	ldr	r2, [r4, #8]
 80129ae:	4620      	mov	r0, r4
 80129b0:	b002      	add	sp, #8
 80129b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129b6:	f002 b8fd 	b.w	8014bb4 <_putc_r>
 80129ba:	bf00      	nop
 80129bc:	20000100 	.word	0x20000100

080129c0 <srand>:
 80129c0:	b538      	push	{r3, r4, r5, lr}
 80129c2:	4b10      	ldr	r3, [pc, #64]	; (8012a04 <srand+0x44>)
 80129c4:	681d      	ldr	r5, [r3, #0]
 80129c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80129c8:	4604      	mov	r4, r0
 80129ca:	b9b3      	cbnz	r3, 80129fa <srand+0x3a>
 80129cc:	2018      	movs	r0, #24
 80129ce:	f7ff feef 	bl	80127b0 <malloc>
 80129d2:	4602      	mov	r2, r0
 80129d4:	63a8      	str	r0, [r5, #56]	; 0x38
 80129d6:	b920      	cbnz	r0, 80129e2 <srand+0x22>
 80129d8:	4b0b      	ldr	r3, [pc, #44]	; (8012a08 <srand+0x48>)
 80129da:	480c      	ldr	r0, [pc, #48]	; (8012a0c <srand+0x4c>)
 80129dc:	2142      	movs	r1, #66	; 0x42
 80129de:	f001 faa5 	bl	8013f2c <__assert_func>
 80129e2:	490b      	ldr	r1, [pc, #44]	; (8012a10 <srand+0x50>)
 80129e4:	4b0b      	ldr	r3, [pc, #44]	; (8012a14 <srand+0x54>)
 80129e6:	e9c0 1300 	strd	r1, r3, [r0]
 80129ea:	4b0b      	ldr	r3, [pc, #44]	; (8012a18 <srand+0x58>)
 80129ec:	6083      	str	r3, [r0, #8]
 80129ee:	230b      	movs	r3, #11
 80129f0:	8183      	strh	r3, [r0, #12]
 80129f2:	2100      	movs	r1, #0
 80129f4:	2001      	movs	r0, #1
 80129f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80129fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80129fc:	2200      	movs	r2, #0
 80129fe:	611c      	str	r4, [r3, #16]
 8012a00:	615a      	str	r2, [r3, #20]
 8012a02:	bd38      	pop	{r3, r4, r5, pc}
 8012a04:	20000100 	.word	0x20000100
 8012a08:	0801868c 	.word	0x0801868c
 8012a0c:	08018764 	.word	0x08018764
 8012a10:	abcd330e 	.word	0xabcd330e
 8012a14:	e66d1234 	.word	0xe66d1234
 8012a18:	0005deec 	.word	0x0005deec

08012a1c <rand>:
 8012a1c:	4b17      	ldr	r3, [pc, #92]	; (8012a7c <rand+0x60>)
 8012a1e:	b510      	push	{r4, lr}
 8012a20:	681c      	ldr	r4, [r3, #0]
 8012a22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012a24:	b9b3      	cbnz	r3, 8012a54 <rand+0x38>
 8012a26:	2018      	movs	r0, #24
 8012a28:	f7ff fec2 	bl	80127b0 <malloc>
 8012a2c:	63a0      	str	r0, [r4, #56]	; 0x38
 8012a2e:	b928      	cbnz	r0, 8012a3c <rand+0x20>
 8012a30:	4602      	mov	r2, r0
 8012a32:	4b13      	ldr	r3, [pc, #76]	; (8012a80 <rand+0x64>)
 8012a34:	4813      	ldr	r0, [pc, #76]	; (8012a84 <rand+0x68>)
 8012a36:	214e      	movs	r1, #78	; 0x4e
 8012a38:	f001 fa78 	bl	8013f2c <__assert_func>
 8012a3c:	4a12      	ldr	r2, [pc, #72]	; (8012a88 <rand+0x6c>)
 8012a3e:	4b13      	ldr	r3, [pc, #76]	; (8012a8c <rand+0x70>)
 8012a40:	e9c0 2300 	strd	r2, r3, [r0]
 8012a44:	4b12      	ldr	r3, [pc, #72]	; (8012a90 <rand+0x74>)
 8012a46:	6083      	str	r3, [r0, #8]
 8012a48:	230b      	movs	r3, #11
 8012a4a:	8183      	strh	r3, [r0, #12]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	2300      	movs	r3, #0
 8012a50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012a54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012a56:	480f      	ldr	r0, [pc, #60]	; (8012a94 <rand+0x78>)
 8012a58:	690a      	ldr	r2, [r1, #16]
 8012a5a:	694b      	ldr	r3, [r1, #20]
 8012a5c:	4c0e      	ldr	r4, [pc, #56]	; (8012a98 <rand+0x7c>)
 8012a5e:	4350      	muls	r0, r2
 8012a60:	fb04 0003 	mla	r0, r4, r3, r0
 8012a64:	fba2 3404 	umull	r3, r4, r2, r4
 8012a68:	1c5a      	adds	r2, r3, #1
 8012a6a:	4404      	add	r4, r0
 8012a6c:	f144 0000 	adc.w	r0, r4, #0
 8012a70:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8012a74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012a78:	bd10      	pop	{r4, pc}
 8012a7a:	bf00      	nop
 8012a7c:	20000100 	.word	0x20000100
 8012a80:	0801868c 	.word	0x0801868c
 8012a84:	08018764 	.word	0x08018764
 8012a88:	abcd330e 	.word	0xabcd330e
 8012a8c:	e66d1234 	.word	0xe66d1234
 8012a90:	0005deec 	.word	0x0005deec
 8012a94:	5851f42d 	.word	0x5851f42d
 8012a98:	4c957f2d 	.word	0x4c957f2d

08012a9c <realloc>:
 8012a9c:	4b02      	ldr	r3, [pc, #8]	; (8012aa8 <realloc+0xc>)
 8012a9e:	460a      	mov	r2, r1
 8012aa0:	4601      	mov	r1, r0
 8012aa2:	6818      	ldr	r0, [r3, #0]
 8012aa4:	f001 bc16 	b.w	80142d4 <_realloc_r>
 8012aa8:	20000100 	.word	0x20000100

08012aac <_sbrk_r>:
 8012aac:	b538      	push	{r3, r4, r5, lr}
 8012aae:	4d06      	ldr	r5, [pc, #24]	; (8012ac8 <_sbrk_r+0x1c>)
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	4608      	mov	r0, r1
 8012ab6:	602b      	str	r3, [r5, #0]
 8012ab8:	f7ee f9e8 	bl	8000e8c <_sbrk>
 8012abc:	1c43      	adds	r3, r0, #1
 8012abe:	d102      	bne.n	8012ac6 <_sbrk_r+0x1a>
 8012ac0:	682b      	ldr	r3, [r5, #0]
 8012ac2:	b103      	cbz	r3, 8012ac6 <_sbrk_r+0x1a>
 8012ac4:	6023      	str	r3, [r4, #0]
 8012ac6:	bd38      	pop	{r3, r4, r5, pc}
 8012ac8:	20000c24 	.word	0x20000c24

08012acc <_raise_r>:
 8012acc:	291f      	cmp	r1, #31
 8012ace:	b538      	push	{r3, r4, r5, lr}
 8012ad0:	4604      	mov	r4, r0
 8012ad2:	460d      	mov	r5, r1
 8012ad4:	d904      	bls.n	8012ae0 <_raise_r+0x14>
 8012ad6:	2316      	movs	r3, #22
 8012ad8:	6003      	str	r3, [r0, #0]
 8012ada:	f04f 30ff 	mov.w	r0, #4294967295
 8012ade:	bd38      	pop	{r3, r4, r5, pc}
 8012ae0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012ae2:	b112      	cbz	r2, 8012aea <_raise_r+0x1e>
 8012ae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ae8:	b94b      	cbnz	r3, 8012afe <_raise_r+0x32>
 8012aea:	4620      	mov	r0, r4
 8012aec:	f000 f830 	bl	8012b50 <_getpid_r>
 8012af0:	462a      	mov	r2, r5
 8012af2:	4601      	mov	r1, r0
 8012af4:	4620      	mov	r0, r4
 8012af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012afa:	f000 b817 	b.w	8012b2c <_kill_r>
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d00a      	beq.n	8012b18 <_raise_r+0x4c>
 8012b02:	1c59      	adds	r1, r3, #1
 8012b04:	d103      	bne.n	8012b0e <_raise_r+0x42>
 8012b06:	2316      	movs	r3, #22
 8012b08:	6003      	str	r3, [r0, #0]
 8012b0a:	2001      	movs	r0, #1
 8012b0c:	e7e7      	b.n	8012ade <_raise_r+0x12>
 8012b0e:	2400      	movs	r4, #0
 8012b10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b14:	4628      	mov	r0, r5
 8012b16:	4798      	blx	r3
 8012b18:	2000      	movs	r0, #0
 8012b1a:	e7e0      	b.n	8012ade <_raise_r+0x12>

08012b1c <raise>:
 8012b1c:	4b02      	ldr	r3, [pc, #8]	; (8012b28 <raise+0xc>)
 8012b1e:	4601      	mov	r1, r0
 8012b20:	6818      	ldr	r0, [r3, #0]
 8012b22:	f7ff bfd3 	b.w	8012acc <_raise_r>
 8012b26:	bf00      	nop
 8012b28:	20000100 	.word	0x20000100

08012b2c <_kill_r>:
 8012b2c:	b538      	push	{r3, r4, r5, lr}
 8012b2e:	4d07      	ldr	r5, [pc, #28]	; (8012b4c <_kill_r+0x20>)
 8012b30:	2300      	movs	r3, #0
 8012b32:	4604      	mov	r4, r0
 8012b34:	4608      	mov	r0, r1
 8012b36:	4611      	mov	r1, r2
 8012b38:	602b      	str	r3, [r5, #0]
 8012b3a:	f7ee f912 	bl	8000d62 <_kill>
 8012b3e:	1c43      	adds	r3, r0, #1
 8012b40:	d102      	bne.n	8012b48 <_kill_r+0x1c>
 8012b42:	682b      	ldr	r3, [r5, #0]
 8012b44:	b103      	cbz	r3, 8012b48 <_kill_r+0x1c>
 8012b46:	6023      	str	r3, [r4, #0]
 8012b48:	bd38      	pop	{r3, r4, r5, pc}
 8012b4a:	bf00      	nop
 8012b4c:	20000c24 	.word	0x20000c24

08012b50 <_getpid_r>:
 8012b50:	f7ee b8ff 	b.w	8000d52 <_getpid>

08012b54 <__sread>:
 8012b54:	b510      	push	{r4, lr}
 8012b56:	460c      	mov	r4, r1
 8012b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b5c:	f002 f872 	bl	8014c44 <_read_r>
 8012b60:	2800      	cmp	r0, #0
 8012b62:	bfab      	itete	ge
 8012b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b66:	89a3      	ldrhlt	r3, [r4, #12]
 8012b68:	181b      	addge	r3, r3, r0
 8012b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b6e:	bfac      	ite	ge
 8012b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b72:	81a3      	strhlt	r3, [r4, #12]
 8012b74:	bd10      	pop	{r4, pc}

08012b76 <__seofread>:
 8012b76:	2000      	movs	r0, #0
 8012b78:	4770      	bx	lr

08012b7a <__swrite>:
 8012b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b7e:	461f      	mov	r7, r3
 8012b80:	898b      	ldrh	r3, [r1, #12]
 8012b82:	05db      	lsls	r3, r3, #23
 8012b84:	4605      	mov	r5, r0
 8012b86:	460c      	mov	r4, r1
 8012b88:	4616      	mov	r6, r2
 8012b8a:	d505      	bpl.n	8012b98 <__swrite+0x1e>
 8012b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b90:	2302      	movs	r3, #2
 8012b92:	2200      	movs	r2, #0
 8012b94:	f001 fb6e 	bl	8014274 <_lseek_r>
 8012b98:	89a3      	ldrh	r3, [r4, #12]
 8012b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ba2:	81a3      	strh	r3, [r4, #12]
 8012ba4:	4632      	mov	r2, r6
 8012ba6:	463b      	mov	r3, r7
 8012ba8:	4628      	mov	r0, r5
 8012baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bae:	f001 b8d7 	b.w	8013d60 <_write_r>

08012bb2 <__sseek>:
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	460c      	mov	r4, r1
 8012bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bba:	f001 fb5b 	bl	8014274 <_lseek_r>
 8012bbe:	1c43      	adds	r3, r0, #1
 8012bc0:	89a3      	ldrh	r3, [r4, #12]
 8012bc2:	bf15      	itete	ne
 8012bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012bce:	81a3      	strheq	r3, [r4, #12]
 8012bd0:	bf18      	it	ne
 8012bd2:	81a3      	strhne	r3, [r4, #12]
 8012bd4:	bd10      	pop	{r4, pc}

08012bd6 <__sclose>:
 8012bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bda:	f001 b9c5 	b.w	8013f68 <_close_r>
	...

08012be0 <iso_year_adjust>:
 8012be0:	6941      	ldr	r1, [r0, #20]
 8012be2:	2900      	cmp	r1, #0
 8012be4:	f240 736c 	movw	r3, #1900	; 0x76c
 8012be8:	bfa8      	it	ge
 8012bea:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8012bee:	18ca      	adds	r2, r1, r3
 8012bf0:	078b      	lsls	r3, r1, #30
 8012bf2:	d105      	bne.n	8012c00 <iso_year_adjust+0x20>
 8012bf4:	2164      	movs	r1, #100	; 0x64
 8012bf6:	fb92 f3f1 	sdiv	r3, r2, r1
 8012bfa:	fb01 2313 	mls	r3, r1, r3, r2
 8012bfe:	b9db      	cbnz	r3, 8012c38 <iso_year_adjust+0x58>
 8012c00:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012c04:	fb92 f3f1 	sdiv	r3, r2, r1
 8012c08:	fb01 2313 	mls	r3, r1, r3, r2
 8012c0c:	fab3 f383 	clz	r3, r3
 8012c10:	095b      	lsrs	r3, r3, #5
 8012c12:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8012c16:	0040      	lsls	r0, r0, #1
 8012c18:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8012c1c:	4418      	add	r0, r3
 8012c1e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8012c22:	4298      	cmp	r0, r3
 8012c24:	d03a      	beq.n	8012c9c <iso_year_adjust+0xbc>
 8012c26:	dc21      	bgt.n	8012c6c <iso_year_adjust+0x8c>
 8012c28:	2801      	cmp	r0, #1
 8012c2a:	dc1a      	bgt.n	8012c62 <iso_year_adjust+0x82>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	bfb4      	ite	lt
 8012c30:	2000      	movlt	r0, #0
 8012c32:	f04f 30ff 	movge.w	r0, #4294967295
 8012c36:	4770      	bx	lr
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e7ea      	b.n	8012c12 <iso_year_adjust+0x32>
 8012c3c:	2817      	cmp	r0, #23
 8012c3e:	d813      	bhi.n	8012c68 <iso_year_adjust+0x88>
 8012c40:	e8df f000 	tbb	[pc, r0]
 8012c44:	0c0c0c0c 	.word	0x0c0c0c0c
 8012c48:	0c0c1212 	.word	0x0c0c1212
 8012c4c:	12121212 	.word	0x12121212
 8012c50:	12121212 	.word	0x12121212
 8012c54:	0c0c1212 	.word	0x0c0c1212
 8012c58:	0c0c1212 	.word	0x0c0c1212
 8012c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c60:	4770      	bx	lr
 8012c62:	380a      	subs	r0, #10
 8012c64:	2817      	cmp	r0, #23
 8012c66:	d9e9      	bls.n	8012c3c <iso_year_adjust+0x5c>
 8012c68:	2000      	movs	r0, #0
 8012c6a:	4770      	bx	lr
 8012c6c:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8012c70:	4298      	cmp	r0, r3
 8012c72:	dc06      	bgt.n	8012c82 <iso_year_adjust+0xa2>
 8012c74:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8012c78:	4298      	cmp	r0, r3
 8012c7a:	bfd4      	ite	le
 8012c7c:	2000      	movle	r0, #0
 8012c7e:	2001      	movgt	r0, #1
 8012c80:	4770      	bx	lr
 8012c82:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8012c86:	3802      	subs	r0, #2
 8012c88:	2815      	cmp	r0, #21
 8012c8a:	d8ed      	bhi.n	8012c68 <iso_year_adjust+0x88>
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	4083      	lsls	r3, r0
 8012c90:	4803      	ldr	r0, [pc, #12]	; (8012ca0 <iso_year_adjust+0xc0>)
 8012c92:	4018      	ands	r0, r3
 8012c94:	3800      	subs	r0, #0
 8012c96:	bf18      	it	ne
 8012c98:	2001      	movne	r0, #1
 8012c9a:	4770      	bx	lr
 8012c9c:	2001      	movs	r0, #1
 8012c9e:	4770      	bx	lr
 8012ca0:	002a001f 	.word	0x002a001f

08012ca4 <__strftime>:
 8012ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca8:	b091      	sub	sp, #68	; 0x44
 8012caa:	461d      	mov	r5, r3
 8012cac:	2300      	movs	r3, #0
 8012cae:	4681      	mov	r9, r0
 8012cb0:	4688      	mov	r8, r1
 8012cb2:	9304      	str	r3, [sp, #16]
 8012cb4:	461c      	mov	r4, r3
 8012cb6:	7813      	ldrb	r3, [r2, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	f000 84d1 	beq.w	8013660 <__strftime+0x9bc>
 8012cbe:	2b25      	cmp	r3, #37	; 0x25
 8012cc0:	d11b      	bne.n	8012cfa <__strftime+0x56>
 8012cc2:	7857      	ldrb	r7, [r2, #1]
 8012cc4:	2f30      	cmp	r7, #48	; 0x30
 8012cc6:	d024      	beq.n	8012d12 <__strftime+0x6e>
 8012cc8:	2f2b      	cmp	r7, #43	; 0x2b
 8012cca:	d022      	beq.n	8012d12 <__strftime+0x6e>
 8012ccc:	f102 0b01 	add.w	fp, r2, #1
 8012cd0:	2700      	movs	r7, #0
 8012cd2:	f89b 3000 	ldrb.w	r3, [fp]
 8012cd6:	3b31      	subs	r3, #49	; 0x31
 8012cd8:	2b08      	cmp	r3, #8
 8012cda:	d81d      	bhi.n	8012d18 <__strftime+0x74>
 8012cdc:	4658      	mov	r0, fp
 8012cde:	220a      	movs	r2, #10
 8012ce0:	a908      	add	r1, sp, #32
 8012ce2:	f000 fd57 	bl	8013794 <strtoul>
 8012ce6:	f8dd b020 	ldr.w	fp, [sp, #32]
 8012cea:	4606      	mov	r6, r0
 8012cec:	f89b 3000 	ldrb.w	r3, [fp]
 8012cf0:	2b45      	cmp	r3, #69	; 0x45
 8012cf2:	d113      	bne.n	8012d1c <__strftime+0x78>
 8012cf4:	f10b 0b01 	add.w	fp, fp, #1
 8012cf8:	e012      	b.n	8012d20 <__strftime+0x7c>
 8012cfa:	f108 31ff 	add.w	r1, r8, #4294967295
 8012cfe:	42a1      	cmp	r1, r4
 8012d00:	d802      	bhi.n	8012d08 <__strftime+0x64>
 8012d02:	2400      	movs	r4, #0
 8012d04:	f000 bcb2 	b.w	801366c <__strftime+0x9c8>
 8012d08:	f809 3004 	strb.w	r3, [r9, r4]
 8012d0c:	3201      	adds	r2, #1
 8012d0e:	3401      	adds	r4, #1
 8012d10:	e7d1      	b.n	8012cb6 <__strftime+0x12>
 8012d12:	f102 0b02 	add.w	fp, r2, #2
 8012d16:	e7dc      	b.n	8012cd2 <__strftime+0x2e>
 8012d18:	2600      	movs	r6, #0
 8012d1a:	e7e7      	b.n	8012cec <__strftime+0x48>
 8012d1c:	2b4f      	cmp	r3, #79	; 0x4f
 8012d1e:	d0e9      	beq.n	8012cf4 <__strftime+0x50>
 8012d20:	f89b 0000 	ldrb.w	r0, [fp]
 8012d24:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8012d28:	2b55      	cmp	r3, #85	; 0x55
 8012d2a:	d8ea      	bhi.n	8012d02 <__strftime+0x5e>
 8012d2c:	a201      	add	r2, pc, #4	; (adr r2, 8012d34 <__strftime+0x90>)
 8012d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d32:	bf00      	nop
 8012d34:	08013653 	.word	0x08013653
 8012d38:	08012d03 	.word	0x08012d03
 8012d3c:	08012d03 	.word	0x08012d03
 8012d40:	08012d03 	.word	0x08012d03
 8012d44:	08012d03 	.word	0x08012d03
 8012d48:	08012d03 	.word	0x08012d03
 8012d4c:	08012d03 	.word	0x08012d03
 8012d50:	08012d03 	.word	0x08012d03
 8012d54:	08012d03 	.word	0x08012d03
 8012d58:	08012d03 	.word	0x08012d03
 8012d5c:	08012d03 	.word	0x08012d03
 8012d60:	08012d03 	.word	0x08012d03
 8012d64:	08012d03 	.word	0x08012d03
 8012d68:	08012d03 	.word	0x08012d03
 8012d6c:	08012d03 	.word	0x08012d03
 8012d70:	08012d03 	.word	0x08012d03
 8012d74:	08012d03 	.word	0x08012d03
 8012d78:	08012d03 	.word	0x08012d03
 8012d7c:	08012d03 	.word	0x08012d03
 8012d80:	08012d03 	.word	0x08012d03
 8012d84:	08012d03 	.word	0x08012d03
 8012d88:	08012d03 	.word	0x08012d03
 8012d8c:	08012d03 	.word	0x08012d03
 8012d90:	08012d03 	.word	0x08012d03
 8012d94:	08012d03 	.word	0x08012d03
 8012d98:	08012d03 	.word	0x08012d03
 8012d9c:	08012d03 	.word	0x08012d03
 8012da0:	08012d03 	.word	0x08012d03
 8012da4:	08012ecb 	.word	0x08012ecb
 8012da8:	08012f25 	.word	0x08012f25
 8012dac:	08012f9b 	.word	0x08012f9b
 8012db0:	08013035 	.word	0x08013035
 8012db4:	08012d03 	.word	0x08012d03
 8012db8:	08013081 	.word	0x08013081
 8012dbc:	08013161 	.word	0x08013161
 8012dc0:	08013263 	.word	0x08013263
 8012dc4:	08013271 	.word	0x08013271
 8012dc8:	08012d03 	.word	0x08012d03
 8012dcc:	08012d03 	.word	0x08012d03
 8012dd0:	08012d03 	.word	0x08012d03
 8012dd4:	080132a1 	.word	0x080132a1
 8012dd8:	08012d03 	.word	0x08012d03
 8012ddc:	08012d03 	.word	0x08012d03
 8012de0:	080132b9 	.word	0x080132b9
 8012de4:	08012d03 	.word	0x08012d03
 8012de8:	08013307 	.word	0x08013307
 8012dec:	0801341d 	.word	0x0801341d
 8012df0:	0801342f 	.word	0x0801342f
 8012df4:	08013487 	.word	0x08013487
 8012df8:	08013497 	.word	0x08013497
 8012dfc:	0801350d 	.word	0x0801350d
 8012e00:	08012f93 	.word	0x08012f93
 8012e04:	08013541 	.word	0x08013541
 8012e08:	080135ff 	.word	0x080135ff
 8012e0c:	08012d03 	.word	0x08012d03
 8012e10:	08012d03 	.word	0x08012d03
 8012e14:	08012d03 	.word	0x08012d03
 8012e18:	08012d03 	.word	0x08012d03
 8012e1c:	08012d03 	.word	0x08012d03
 8012e20:	08012d03 	.word	0x08012d03
 8012e24:	08012e8d 	.word	0x08012e8d
 8012e28:	08012ef9 	.word	0x08012ef9
 8012e2c:	08012f53 	.word	0x08012f53
 8012e30:	0801300d 	.word	0x0801300d
 8012e34:	0801300d 	.word	0x0801300d
 8012e38:	08012d03 	.word	0x08012d03
 8012e3c:	080130c9 	.word	0x080130c9
 8012e40:	08012ef9 	.word	0x08012ef9
 8012e44:	08012d03 	.word	0x08012d03
 8012e48:	08013293 	.word	0x08013293
 8012e4c:	08013263 	.word	0x08013263
 8012e50:	08013271 	.word	0x08013271
 8012e54:	0801329b 	.word	0x0801329b
 8012e58:	080132a5 	.word	0x080132a5
 8012e5c:	08012d03 	.word	0x08012d03
 8012e60:	080132b9 	.word	0x080132b9
 8012e64:	08012d03 	.word	0x08012d03
 8012e68:	08012f83 	.word	0x08012f83
 8012e6c:	0801331d 	.word	0x0801331d
 8012e70:	08013421 	.word	0x08013421
 8012e74:	08013469 	.word	0x08013469
 8012e78:	08012d03 	.word	0x08012d03
 8012e7c:	080134fd 	.word	0x080134fd
 8012e80:	08012f8b 	.word	0x08012f8b
 8012e84:	08013525 	.word	0x08013525
 8012e88:	08013591 	.word	0x08013591
 8012e8c:	69ab      	ldr	r3, [r5, #24]
 8012e8e:	4aa7      	ldr	r2, [pc, #668]	; (801312c <__strftime+0x488>)
 8012e90:	3318      	adds	r3, #24
 8012e92:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8012e96:	4630      	mov	r0, r6
 8012e98:	f7ed f9d0 	bl	800023c <strlen>
 8012e9c:	3e01      	subs	r6, #1
 8012e9e:	4420      	add	r0, r4
 8012ea0:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ea4:	42a0      	cmp	r0, r4
 8012ea6:	d107      	bne.n	8012eb8 <__strftime+0x214>
 8012ea8:	f89b 3000 	ldrb.w	r3, [fp]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	f000 83d7 	beq.w	8013660 <__strftime+0x9bc>
 8012eb2:	f10b 0201 	add.w	r2, fp, #1
 8012eb6:	e6fe      	b.n	8012cb6 <__strftime+0x12>
 8012eb8:	42a3      	cmp	r3, r4
 8012eba:	f67f af22 	bls.w	8012d02 <__strftime+0x5e>
 8012ebe:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012ec2:	f809 2004 	strb.w	r2, [r9, r4]
 8012ec6:	3401      	adds	r4, #1
 8012ec8:	e7ec      	b.n	8012ea4 <__strftime+0x200>
 8012eca:	69aa      	ldr	r2, [r5, #24]
 8012ecc:	4b97      	ldr	r3, [pc, #604]	; (801312c <__strftime+0x488>)
 8012ece:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012ed2:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8012ed4:	4630      	mov	r0, r6
 8012ed6:	f7ed f9b1 	bl	800023c <strlen>
 8012eda:	3e01      	subs	r6, #1
 8012edc:	4420      	add	r0, r4
 8012ede:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ee2:	42a0      	cmp	r0, r4
 8012ee4:	d0e0      	beq.n	8012ea8 <__strftime+0x204>
 8012ee6:	42a3      	cmp	r3, r4
 8012ee8:	f67f af0b 	bls.w	8012d02 <__strftime+0x5e>
 8012eec:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012ef0:	f809 2004 	strb.w	r2, [r9, r4]
 8012ef4:	3401      	adds	r4, #1
 8012ef6:	e7f4      	b.n	8012ee2 <__strftime+0x23e>
 8012ef8:	4b8c      	ldr	r3, [pc, #560]	; (801312c <__strftime+0x488>)
 8012efa:	692a      	ldr	r2, [r5, #16]
 8012efc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012f00:	4630      	mov	r0, r6
 8012f02:	f7ed f99b 	bl	800023c <strlen>
 8012f06:	3e01      	subs	r6, #1
 8012f08:	4420      	add	r0, r4
 8012f0a:	f108 33ff 	add.w	r3, r8, #4294967295
 8012f0e:	42a0      	cmp	r0, r4
 8012f10:	d0ca      	beq.n	8012ea8 <__strftime+0x204>
 8012f12:	42a3      	cmp	r3, r4
 8012f14:	f67f aef5 	bls.w	8012d02 <__strftime+0x5e>
 8012f18:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012f1c:	f809 2004 	strb.w	r2, [r9, r4]
 8012f20:	3401      	adds	r4, #1
 8012f22:	e7f4      	b.n	8012f0e <__strftime+0x26a>
 8012f24:	692b      	ldr	r3, [r5, #16]
 8012f26:	4a81      	ldr	r2, [pc, #516]	; (801312c <__strftime+0x488>)
 8012f28:	330c      	adds	r3, #12
 8012f2a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8012f2e:	4630      	mov	r0, r6
 8012f30:	f7ed f984 	bl	800023c <strlen>
 8012f34:	3e01      	subs	r6, #1
 8012f36:	4420      	add	r0, r4
 8012f38:	f108 33ff 	add.w	r3, r8, #4294967295
 8012f3c:	42a0      	cmp	r0, r4
 8012f3e:	d0b3      	beq.n	8012ea8 <__strftime+0x204>
 8012f40:	42a3      	cmp	r3, r4
 8012f42:	f67f aede 	bls.w	8012d02 <__strftime+0x5e>
 8012f46:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8012f4a:	f809 2004 	strb.w	r2, [r9, r4]
 8012f4e:	3401      	adds	r4, #1
 8012f50:	e7f4      	b.n	8012f3c <__strftime+0x298>
 8012f52:	4b76      	ldr	r3, [pc, #472]	; (801312c <__strftime+0x488>)
 8012f54:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8012f58:	4630      	mov	r0, r6
 8012f5a:	f7ed f96f 	bl	800023c <strlen>
 8012f5e:	7833      	ldrb	r3, [r6, #0]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d0a1      	beq.n	8012ea8 <__strftime+0x204>
 8012f64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	4632      	mov	r2, r6
 8012f6a:	462b      	mov	r3, r5
 8012f6c:	eba8 0104 	sub.w	r1, r8, r4
 8012f70:	eb09 0004 	add.w	r0, r9, r4
 8012f74:	f7ff fe96 	bl	8012ca4 <__strftime>
 8012f78:	2800      	cmp	r0, #0
 8012f7a:	f77f aec2 	ble.w	8012d02 <__strftime+0x5e>
 8012f7e:	4404      	add	r4, r0
 8012f80:	e792      	b.n	8012ea8 <__strftime+0x204>
 8012f82:	4b6a      	ldr	r3, [pc, #424]	; (801312c <__strftime+0x488>)
 8012f84:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8012f88:	e7e6      	b.n	8012f58 <__strftime+0x2b4>
 8012f8a:	4b68      	ldr	r3, [pc, #416]	; (801312c <__strftime+0x488>)
 8012f8c:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8012f90:	e7e2      	b.n	8012f58 <__strftime+0x2b4>
 8012f92:	4b66      	ldr	r3, [pc, #408]	; (801312c <__strftime+0x488>)
 8012f94:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8012f98:	e7de      	b.n	8012f58 <__strftime+0x2b4>
 8012f9a:	4965      	ldr	r1, [pc, #404]	; (8013130 <__strftime+0x48c>)
 8012f9c:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8012fa0:	458a      	cmp	sl, r1
 8012fa2:	bfac      	ite	ge
 8012fa4:	2100      	movge	r1, #0
 8012fa6:	2101      	movlt	r1, #1
 8012fa8:	f1ba 0f00 	cmp.w	sl, #0
 8012fac:	db0e      	blt.n	8012fcc <__strftime+0x328>
 8012fae:	2064      	movs	r0, #100	; 0x64
 8012fb0:	fb9a f0f0 	sdiv	r0, sl, r0
 8012fb4:	3013      	adds	r0, #19
 8012fb6:	b19f      	cbz	r7, 8012fe0 <__strftime+0x33c>
 8012fb8:	2863      	cmp	r0, #99	; 0x63
 8012fba:	dd25      	ble.n	8013008 <__strftime+0x364>
 8012fbc:	4a5d      	ldr	r2, [pc, #372]	; (8013134 <__strftime+0x490>)
 8012fbe:	4b5e      	ldr	r3, [pc, #376]	; (8013138 <__strftime+0x494>)
 8012fc0:	2f2b      	cmp	r7, #43	; 0x2b
 8012fc2:	bf14      	ite	ne
 8012fc4:	4617      	movne	r7, r2
 8012fc6:	461f      	moveq	r7, r3
 8012fc8:	4a5c      	ldr	r2, [pc, #368]	; (801313c <__strftime+0x498>)
 8012fca:	e00b      	b.n	8012fe4 <__strftime+0x340>
 8012fcc:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8012fd0:	9105      	str	r1, [sp, #20]
 8012fd2:	f000 ffa7 	bl	8013f24 <abs>
 8012fd6:	2364      	movs	r3, #100	; 0x64
 8012fd8:	9905      	ldr	r1, [sp, #20]
 8012fda:	fb90 f0f3 	sdiv	r0, r0, r3
 8012fde:	e7ea      	b.n	8012fb6 <__strftime+0x312>
 8012fe0:	4f54      	ldr	r7, [pc, #336]	; (8013134 <__strftime+0x490>)
 8012fe2:	4a57      	ldr	r2, [pc, #348]	; (8013140 <__strftime+0x49c>)
 8012fe4:	4b57      	ldr	r3, [pc, #348]	; (8013144 <__strftime+0x4a0>)
 8012fe6:	9001      	str	r0, [sp, #4]
 8012fe8:	2e02      	cmp	r6, #2
 8012fea:	bf2c      	ite	cs
 8012fec:	ebc1 0606 	rsbcs	r6, r1, r6
 8012ff0:	f1c1 0602 	rsbcc	r6, r1, #2
 8012ff4:	494e      	ldr	r1, [pc, #312]	; (8013130 <__strftime+0x48c>)
 8012ff6:	9600      	str	r6, [sp, #0]
 8012ff8:	458a      	cmp	sl, r1
 8012ffa:	bfa8      	it	ge
 8012ffc:	463b      	movge	r3, r7
 8012ffe:	eba8 0104 	sub.w	r1, r8, r4
 8013002:	eb09 0004 	add.w	r0, r9, r4
 8013006:	e02a      	b.n	801305e <__strftime+0x3ba>
 8013008:	4f4a      	ldr	r7, [pc, #296]	; (8013134 <__strftime+0x490>)
 801300a:	e7dd      	b.n	8012fc8 <__strftime+0x324>
 801300c:	494e      	ldr	r1, [pc, #312]	; (8013148 <__strftime+0x4a4>)
 801300e:	4a4f      	ldr	r2, [pc, #316]	; (801314c <__strftime+0x4a8>)
 8013010:	68eb      	ldr	r3, [r5, #12]
 8013012:	2864      	cmp	r0, #100	; 0x64
 8013014:	bf08      	it	eq
 8013016:	460a      	moveq	r2, r1
 8013018:	eba8 0104 	sub.w	r1, r8, r4
 801301c:	eb09 0004 	add.w	r0, r9, r4
 8013020:	f001 fe22 	bl	8014c68 <sniprintf>
 8013024:	2800      	cmp	r0, #0
 8013026:	f6ff ae6c 	blt.w	8012d02 <__strftime+0x5e>
 801302a:	4404      	add	r4, r0
 801302c:	45a0      	cmp	r8, r4
 801302e:	f63f af3b 	bhi.w	8012ea8 <__strftime+0x204>
 8013032:	e666      	b.n	8012d02 <__strftime+0x5e>
 8013034:	6968      	ldr	r0, [r5, #20]
 8013036:	692b      	ldr	r3, [r5, #16]
 8013038:	68ef      	ldr	r7, [r5, #12]
 801303a:	2800      	cmp	r0, #0
 801303c:	eb09 0604 	add.w	r6, r9, r4
 8013040:	eba8 0104 	sub.w	r1, r8, r4
 8013044:	f103 0301 	add.w	r3, r3, #1
 8013048:	db0c      	blt.n	8013064 <__strftime+0x3c0>
 801304a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801304e:	fb90 f2fc 	sdiv	r2, r0, ip
 8013052:	fb0c 0212 	mls	r2, ip, r2, r0
 8013056:	e9cd 7200 	strd	r7, r2, [sp]
 801305a:	4a3d      	ldr	r2, [pc, #244]	; (8013150 <__strftime+0x4ac>)
 801305c:	4630      	mov	r0, r6
 801305e:	f001 fe03 	bl	8014c68 <sniprintf>
 8013062:	e7df      	b.n	8013024 <__strftime+0x380>
 8013064:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013068:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801306c:	f000 ff5a 	bl	8013f24 <abs>
 8013070:	2264      	movs	r2, #100	; 0x64
 8013072:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8013076:	fb90 fcf2 	sdiv	ip, r0, r2
 801307a:	fb0c 0212 	mls	r2, ip, r2, r0
 801307e:	e7ea      	b.n	8013056 <__strftime+0x3b2>
 8013080:	2325      	movs	r3, #37	; 0x25
 8013082:	f88d 3020 	strb.w	r3, [sp, #32]
 8013086:	b187      	cbz	r7, 80130aa <__strftime+0x406>
 8013088:	2e06      	cmp	r6, #6
 801308a:	bf38      	it	cc
 801308c:	2606      	movcc	r6, #6
 801308e:	1fb3      	subs	r3, r6, #6
 8013090:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8013094:	d10c      	bne.n	80130b0 <__strftime+0x40c>
 8013096:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801309a:	492e      	ldr	r1, [pc, #184]	; (8013154 <__strftime+0x4b0>)
 801309c:	f001 fe44 	bl	8014d28 <strcpy>
 80130a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80130a2:	9300      	str	r3, [sp, #0]
 80130a4:	aa08      	add	r2, sp, #32
 80130a6:	462b      	mov	r3, r5
 80130a8:	e760      	b.n	8012f6c <__strftime+0x2c8>
 80130aa:	272b      	movs	r7, #43	; 0x2b
 80130ac:	260a      	movs	r6, #10
 80130ae:	e7ee      	b.n	801308e <__strftime+0x3ea>
 80130b0:	4a29      	ldr	r2, [pc, #164]	; (8013158 <__strftime+0x4b4>)
 80130b2:	211e      	movs	r1, #30
 80130b4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80130b8:	f001 fdd6 	bl	8014c68 <sniprintf>
 80130bc:	2800      	cmp	r0, #0
 80130be:	ddea      	ble.n	8013096 <__strftime+0x3f2>
 80130c0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80130c4:	4418      	add	r0, r3
 80130c6:	e7e8      	b.n	801309a <__strftime+0x3f6>
 80130c8:	4628      	mov	r0, r5
 80130ca:	f7ff fd89 	bl	8012be0 <iso_year_adjust>
 80130ce:	4606      	mov	r6, r0
 80130d0:	6968      	ldr	r0, [r5, #20]
 80130d2:	2800      	cmp	r0, #0
 80130d4:	db11      	blt.n	80130fa <__strftime+0x456>
 80130d6:	2264      	movs	r2, #100	; 0x64
 80130d8:	fb90 f3f2 	sdiv	r3, r0, r2
 80130dc:	fb02 0313 	mls	r3, r2, r3, r0
 80130e0:	441e      	add	r6, r3
 80130e2:	2364      	movs	r3, #100	; 0x64
 80130e4:	fb96 f0f3 	sdiv	r0, r6, r3
 80130e8:	fb03 6610 	mls	r6, r3, r0, r6
 80130ec:	441e      	add	r6, r3
 80130ee:	fbb6 f2f3 	udiv	r2, r6, r3
 80130f2:	fb03 6312 	mls	r3, r3, r2, r6
 80130f6:	4a14      	ldr	r2, [pc, #80]	; (8013148 <__strftime+0x4a4>)
 80130f8:	e78e      	b.n	8013018 <__strftime+0x374>
 80130fa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80130fe:	f000 ff11 	bl	8013f24 <abs>
 8013102:	2364      	movs	r3, #100	; 0x64
 8013104:	2e00      	cmp	r6, #0
 8013106:	fb90 f2f3 	sdiv	r2, r0, r3
 801310a:	fb02 0313 	mls	r3, r2, r3, r0
 801310e:	da05      	bge.n	801311c <__strftime+0x478>
 8013110:	6969      	ldr	r1, [r5, #20]
 8013112:	4a12      	ldr	r2, [pc, #72]	; (801315c <__strftime+0x4b8>)
 8013114:	4291      	cmp	r1, r2
 8013116:	bfb8      	it	lt
 8013118:	2601      	movlt	r6, #1
 801311a:	e7e1      	b.n	80130e0 <__strftime+0x43c>
 801311c:	d0e0      	beq.n	80130e0 <__strftime+0x43c>
 801311e:	6969      	ldr	r1, [r5, #20]
 8013120:	4a03      	ldr	r2, [pc, #12]	; (8013130 <__strftime+0x48c>)
 8013122:	4291      	cmp	r1, r2
 8013124:	bfb8      	it	lt
 8013126:	f04f 36ff 	movlt.w	r6, #4294967295
 801312a:	e7d9      	b.n	80130e0 <__strftime+0x43c>
 801312c:	08018948 	.word	0x08018948
 8013130:	fffff894 	.word	0xfffff894
 8013134:	08018abb 	.word	0x08018abb
 8013138:	080187d2 	.word	0x080187d2
 801313c:	080187ca 	.word	0x080187ca
 8013140:	080187c3 	.word	0x080187c3
 8013144:	08018bfb 	.word	0x08018bfb
 8013148:	080187e2 	.word	0x080187e2
 801314c:	080187d4 	.word	0x080187d4
 8013150:	080187d8 	.word	0x080187d8
 8013154:	080187eb 	.word	0x080187eb
 8013158:	080187e7 	.word	0x080187e7
 801315c:	fffff895 	.word	0xfffff895
 8013160:	4bb6      	ldr	r3, [pc, #728]	; (801343c <__strftime+0x798>)
 8013162:	6969      	ldr	r1, [r5, #20]
 8013164:	4299      	cmp	r1, r3
 8013166:	bfac      	ite	ge
 8013168:	2300      	movge	r3, #0
 801316a:	2301      	movlt	r3, #1
 801316c:	4628      	mov	r0, r5
 801316e:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8013172:	f7ff fd35 	bl	8012be0 <iso_year_adjust>
 8013176:	9906      	ldr	r1, [sp, #24]
 8013178:	2900      	cmp	r1, #0
 801317a:	4682      	mov	sl, r0
 801317c:	db27      	blt.n	80131ce <__strftime+0x52a>
 801317e:	2264      	movs	r2, #100	; 0x64
 8013180:	fb91 f2f2 	sdiv	r2, r1, r2
 8013184:	3213      	adds	r2, #19
 8013186:	6968      	ldr	r0, [r5, #20]
 8013188:	2800      	cmp	r0, #0
 801318a:	db2b      	blt.n	80131e4 <__strftime+0x540>
 801318c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8013190:	fb90 fefc 	sdiv	lr, r0, ip
 8013194:	fb0c 001e 	mls	r0, ip, lr, r0
 8013198:	f1ba 0f00 	cmp.w	sl, #0
 801319c:	da31      	bge.n	8013202 <__strftime+0x55e>
 801319e:	6969      	ldr	r1, [r5, #20]
 80131a0:	4ba7      	ldr	r3, [pc, #668]	; (8013440 <__strftime+0x79c>)
 80131a2:	4299      	cmp	r1, r3
 80131a4:	db38      	blt.n	8013218 <__strftime+0x574>
 80131a6:	eb0a 0300 	add.w	r3, sl, r0
 80131aa:	1c59      	adds	r1, r3, #1
 80131ac:	d139      	bne.n	8013222 <__strftime+0x57e>
 80131ae:	3a01      	subs	r2, #1
 80131b0:	2363      	movs	r3, #99	; 0x63
 80131b2:	2064      	movs	r0, #100	; 0x64
 80131b4:	fb00 3202 	mla	r2, r0, r2, r3
 80131b8:	9b05      	ldr	r3, [sp, #20]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d036      	beq.n	801322c <__strftime+0x588>
 80131be:	232d      	movs	r3, #45	; 0x2d
 80131c0:	f88d 3020 	strb.w	r3, [sp, #32]
 80131c4:	b106      	cbz	r6, 80131c8 <__strftime+0x524>
 80131c6:	3e01      	subs	r6, #1
 80131c8:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80131cc:	e038      	b.n	8013240 <__strftime+0x59c>
 80131ce:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80131d2:	9106      	str	r1, [sp, #24]
 80131d4:	f000 fea6 	bl	8013f24 <abs>
 80131d8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80131dc:	9906      	ldr	r1, [sp, #24]
 80131de:	fb90 f2fc 	sdiv	r2, r0, ip
 80131e2:	e7d0      	b.n	8013186 <__strftime+0x4e2>
 80131e4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80131e8:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80131ec:	f000 fe9a 	bl	8013f24 <abs>
 80131f0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80131f4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80131f8:	fb90 fefc 	sdiv	lr, r0, ip
 80131fc:	fb0e 001c 	mls	r0, lr, ip, r0
 8013200:	e7ca      	b.n	8013198 <__strftime+0x4f4>
 8013202:	d0d0      	beq.n	80131a6 <__strftime+0x502>
 8013204:	4b8d      	ldr	r3, [pc, #564]	; (801343c <__strftime+0x798>)
 8013206:	4299      	cmp	r1, r3
 8013208:	bfb4      	ite	lt
 801320a:	2301      	movlt	r3, #1
 801320c:	2300      	movge	r3, #0
 801320e:	9305      	str	r3, [sp, #20]
 8013210:	bfb8      	it	lt
 8013212:	f04f 3aff 	movlt.w	sl, #4294967295
 8013216:	e7c6      	b.n	80131a6 <__strftime+0x502>
 8013218:	f04f 0a01 	mov.w	sl, #1
 801321c:	f8cd a014 	str.w	sl, [sp, #20]
 8013220:	e7c1      	b.n	80131a6 <__strftime+0x502>
 8013222:	2b64      	cmp	r3, #100	; 0x64
 8013224:	bf04      	itt	eq
 8013226:	3201      	addeq	r2, #1
 8013228:	2300      	moveq	r3, #0
 801322a:	e7c2      	b.n	80131b2 <__strftime+0x50e>
 801322c:	2f2b      	cmp	r7, #43	; 0x2b
 801322e:	d106      	bne.n	801323e <__strftime+0x59a>
 8013230:	f242 730f 	movw	r3, #9999	; 0x270f
 8013234:	429a      	cmp	r2, r3
 8013236:	d902      	bls.n	801323e <__strftime+0x59a>
 8013238:	f88d 7020 	strb.w	r7, [sp, #32]
 801323c:	e7c2      	b.n	80131c4 <__strftime+0x520>
 801323e:	ab08      	add	r3, sp, #32
 8013240:	2125      	movs	r1, #37	; 0x25
 8013242:	7019      	strb	r1, [r3, #0]
 8013244:	b94f      	cbnz	r7, 801325a <__strftime+0x5b6>
 8013246:	1c58      	adds	r0, r3, #1
 8013248:	497e      	ldr	r1, [pc, #504]	; (8013444 <__strftime+0x7a0>)
 801324a:	9205      	str	r2, [sp, #20]
 801324c:	f001 fd6c 	bl	8014d28 <strcpy>
 8013250:	9a05      	ldr	r2, [sp, #20]
 8013252:	9200      	str	r2, [sp, #0]
 8013254:	4633      	mov	r3, r6
 8013256:	aa08      	add	r2, sp, #32
 8013258:	e059      	b.n	801330e <__strftime+0x66a>
 801325a:	2130      	movs	r1, #48	; 0x30
 801325c:	1c98      	adds	r0, r3, #2
 801325e:	7059      	strb	r1, [r3, #1]
 8013260:	e7f2      	b.n	8013248 <__strftime+0x5a4>
 8013262:	4979      	ldr	r1, [pc, #484]	; (8013448 <__strftime+0x7a4>)
 8013264:	4a79      	ldr	r2, [pc, #484]	; (801344c <__strftime+0x7a8>)
 8013266:	68ab      	ldr	r3, [r5, #8]
 8013268:	286b      	cmp	r0, #107	; 0x6b
 801326a:	bf08      	it	eq
 801326c:	460a      	moveq	r2, r1
 801326e:	e6d3      	b.n	8013018 <__strftime+0x374>
 8013270:	68ab      	ldr	r3, [r5, #8]
 8013272:	b163      	cbz	r3, 801328e <__strftime+0x5ea>
 8013274:	2b0c      	cmp	r3, #12
 8013276:	d004      	beq.n	8013282 <__strftime+0x5de>
 8013278:	210c      	movs	r1, #12
 801327a:	fb93 f2f1 	sdiv	r2, r3, r1
 801327e:	fb01 3312 	mls	r3, r1, r2, r3
 8013282:	4972      	ldr	r1, [pc, #456]	; (801344c <__strftime+0x7a8>)
 8013284:	4a70      	ldr	r2, [pc, #448]	; (8013448 <__strftime+0x7a4>)
 8013286:	2849      	cmp	r0, #73	; 0x49
 8013288:	bf08      	it	eq
 801328a:	460a      	moveq	r2, r1
 801328c:	e6c4      	b.n	8013018 <__strftime+0x374>
 801328e:	230c      	movs	r3, #12
 8013290:	e7f7      	b.n	8013282 <__strftime+0x5de>
 8013292:	69eb      	ldr	r3, [r5, #28]
 8013294:	4a6e      	ldr	r2, [pc, #440]	; (8013450 <__strftime+0x7ac>)
 8013296:	3301      	adds	r3, #1
 8013298:	e6be      	b.n	8013018 <__strftime+0x374>
 801329a:	692b      	ldr	r3, [r5, #16]
 801329c:	3301      	adds	r3, #1
 801329e:	e72a      	b.n	80130f6 <__strftime+0x452>
 80132a0:	686b      	ldr	r3, [r5, #4]
 80132a2:	e728      	b.n	80130f6 <__strftime+0x452>
 80132a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80132a8:	42a3      	cmp	r3, r4
 80132aa:	f67f ad2a 	bls.w	8012d02 <__strftime+0x5e>
 80132ae:	230a      	movs	r3, #10
 80132b0:	f809 3004 	strb.w	r3, [r9, r4]
 80132b4:	3401      	adds	r4, #1
 80132b6:	e5f7      	b.n	8012ea8 <__strftime+0x204>
 80132b8:	68ab      	ldr	r3, [r5, #8]
 80132ba:	2b0b      	cmp	r3, #11
 80132bc:	bfcc      	ite	gt
 80132be:	22a4      	movgt	r2, #164	; 0xa4
 80132c0:	22a0      	movle	r2, #160	; 0xa0
 80132c2:	4b64      	ldr	r3, [pc, #400]	; (8013454 <__strftime+0x7b0>)
 80132c4:	4413      	add	r3, r2
 80132c6:	685e      	ldr	r6, [r3, #4]
 80132c8:	4630      	mov	r0, r6
 80132ca:	f7ec ffb7 	bl	800023c <strlen>
 80132ce:	1e72      	subs	r2, r6, #1
 80132d0:	4420      	add	r0, r4
 80132d2:	f108 36ff 	add.w	r6, r8, #4294967295
 80132d6:	42a0      	cmp	r0, r4
 80132d8:	f43f ade6 	beq.w	8012ea8 <__strftime+0x204>
 80132dc:	42a6      	cmp	r6, r4
 80132de:	f67f ad10 	bls.w	8012d02 <__strftime+0x5e>
 80132e2:	f89b 1000 	ldrb.w	r1, [fp]
 80132e6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80132ea:	2950      	cmp	r1, #80	; 0x50
 80132ec:	d107      	bne.n	80132fe <__strftime+0x65a>
 80132ee:	495a      	ldr	r1, [pc, #360]	; (8013458 <__strftime+0x7b4>)
 80132f0:	5cc9      	ldrb	r1, [r1, r3]
 80132f2:	f001 0103 	and.w	r1, r1, #3
 80132f6:	2901      	cmp	r1, #1
 80132f8:	bf08      	it	eq
 80132fa:	3320      	addeq	r3, #32
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	f809 3004 	strb.w	r3, [r9, r4]
 8013302:	3401      	adds	r4, #1
 8013304:	e7e7      	b.n	80132d6 <__strftime+0x632>
 8013306:	686b      	ldr	r3, [r5, #4]
 8013308:	9300      	str	r3, [sp, #0]
 801330a:	4a54      	ldr	r2, [pc, #336]	; (801345c <__strftime+0x7b8>)
 801330c:	68ab      	ldr	r3, [r5, #8]
 801330e:	eba8 0104 	sub.w	r1, r8, r4
 8013312:	eb09 0004 	add.w	r0, r9, r4
 8013316:	f001 fca7 	bl	8014c68 <sniprintf>
 801331a:	e683      	b.n	8013024 <__strftime+0x380>
 801331c:	6a2b      	ldr	r3, [r5, #32]
 801331e:	2b00      	cmp	r3, #0
 8013320:	db79      	blt.n	8013416 <__strftime+0x772>
 8013322:	f000 fb03 	bl	801392c <__tz_lock>
 8013326:	9b04      	ldr	r3, [sp, #16]
 8013328:	b90b      	cbnz	r3, 801332e <__strftime+0x68a>
 801332a:	f000 fb0b 	bl	8013944 <_tzset_unlocked>
 801332e:	f000 fed9 	bl	80140e4 <__gettzinfo>
 8013332:	6a2b      	ldr	r3, [r5, #32]
 8013334:	2b00      	cmp	r3, #0
 8013336:	bfcc      	ite	gt
 8013338:	2350      	movgt	r3, #80	; 0x50
 801333a:	2328      	movle	r3, #40	; 0x28
 801333c:	58c3      	ldr	r3, [r0, r3]
 801333e:	f1c3 0a00 	rsb	sl, r3, #0
 8013342:	f000 faf9 	bl	8013938 <__tz_unlock>
 8013346:	2301      	movs	r3, #1
 8013348:	9304      	str	r3, [sp, #16]
 801334a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801334e:	4662      	mov	r2, ip
 8013350:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8013354:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013358:	9602      	str	r6, [sp, #8]
 801335a:	f143 36ff 	adc.w	r6, r3, #4294967295
 801335e:	9603      	str	r6, [sp, #12]
 8013360:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013364:	2e00      	cmp	r6, #0
 8013366:	f177 0600 	sbcs.w	r6, r7, #0
 801336a:	eba8 0104 	sub.w	r1, r8, r4
 801336e:	eb09 0004 	add.w	r0, r9, r4
 8013372:	da05      	bge.n	8013380 <__strftime+0x6dc>
 8013374:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8013378:	f143 33ff 	adc.w	r3, r3, #4294967295
 801337c:	9602      	str	r6, [sp, #8]
 801337e:	9303      	str	r3, [sp, #12]
 8013380:	9b02      	ldr	r3, [sp, #8]
 8013382:	089e      	lsrs	r6, r3, #2
 8013384:	9b03      	ldr	r3, [sp, #12]
 8013386:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801338a:	f10c 32ff 	add.w	r2, ip, #4294967295
 801338e:	109f      	asrs	r7, r3, #2
 8013390:	2364      	movs	r3, #100	; 0x64
 8013392:	fb92 f3f3 	sdiv	r3, r2, r3
 8013396:	1af6      	subs	r6, r6, r3
 8013398:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801339c:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80133a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80133a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80133a8:	18f6      	adds	r6, r6, r3
 80133aa:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80133ae:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80133b2:	f240 136d 	movw	r3, #365	; 0x16d
 80133b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80133ba:	69eb      	ldr	r3, [r5, #28]
 80133bc:	eb16 060c 	adds.w	r6, r6, ip
 80133c0:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 80133c4:	18f6      	adds	r6, r6, r3
 80133c6:	f04f 0c18 	mov.w	ip, #24
 80133ca:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80133ce:	fba6 230c 	umull	r2, r3, r6, ip
 80133d2:	68ae      	ldr	r6, [r5, #8]
 80133d4:	fb0c 3307 	mla	r3, ip, r7, r3
 80133d8:	1992      	adds	r2, r2, r6
 80133da:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80133de:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80133e2:	fba2 670c 	umull	r6, r7, r2, ip
 80133e6:	fb0c 7703 	mla	r7, ip, r3, r7
 80133ea:	686b      	ldr	r3, [r5, #4]
 80133ec:	18f6      	adds	r6, r6, r3
 80133ee:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80133f2:	fba6 230c 	umull	r2, r3, r6, ip
 80133f6:	682e      	ldr	r6, [r5, #0]
 80133f8:	fb0c 3307 	mla	r3, ip, r7, r3
 80133fc:	1992      	adds	r2, r2, r6
 80133fe:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8013402:	ebb2 020a 	subs.w	r2, r2, sl
 8013406:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801340a:	e9cd 2300 	strd	r2, r3, [sp]
 801340e:	4a14      	ldr	r2, [pc, #80]	; (8013460 <__strftime+0x7bc>)
 8013410:	f001 fc2a 	bl	8014c68 <sniprintf>
 8013414:	e606      	b.n	8013024 <__strftime+0x380>
 8013416:	f04f 0a00 	mov.w	sl, #0
 801341a:	e796      	b.n	801334a <__strftime+0x6a6>
 801341c:	682b      	ldr	r3, [r5, #0]
 801341e:	e66a      	b.n	80130f6 <__strftime+0x452>
 8013420:	f108 33ff 	add.w	r3, r8, #4294967295
 8013424:	42a3      	cmp	r3, r4
 8013426:	f67f ac6c 	bls.w	8012d02 <__strftime+0x5e>
 801342a:	2309      	movs	r3, #9
 801342c:	e740      	b.n	80132b0 <__strftime+0x60c>
 801342e:	682b      	ldr	r3, [r5, #0]
 8013430:	9301      	str	r3, [sp, #4]
 8013432:	686b      	ldr	r3, [r5, #4]
 8013434:	9300      	str	r3, [sp, #0]
 8013436:	4a0b      	ldr	r2, [pc, #44]	; (8013464 <__strftime+0x7c0>)
 8013438:	68ab      	ldr	r3, [r5, #8]
 801343a:	e5e0      	b.n	8012ffe <__strftime+0x35a>
 801343c:	fffff894 	.word	0xfffff894
 8013440:	fffff895 	.word	0xfffff895
 8013444:	080187f3 	.word	0x080187f3
 8013448:	080187d4 	.word	0x080187d4
 801344c:	080187e2 	.word	0x080187e2
 8013450:	080187f7 	.word	0x080187f7
 8013454:	08018948 	.word	0x08018948
 8013458:	08018abd 	.word	0x08018abd
 801345c:	08018806 	.word	0x08018806
 8013460:	080187fc 	.word	0x080187fc
 8013464:	08018801 	.word	0x08018801
 8013468:	f108 33ff 	add.w	r3, r8, #4294967295
 801346c:	42a3      	cmp	r3, r4
 801346e:	f67f ac48 	bls.w	8012d02 <__strftime+0x5e>
 8013472:	69ab      	ldr	r3, [r5, #24]
 8013474:	eb09 0204 	add.w	r2, r9, r4
 8013478:	3401      	adds	r4, #1
 801347a:	b913      	cbnz	r3, 8013482 <__strftime+0x7de>
 801347c:	2337      	movs	r3, #55	; 0x37
 801347e:	7013      	strb	r3, [r2, #0]
 8013480:	e512      	b.n	8012ea8 <__strftime+0x204>
 8013482:	3330      	adds	r3, #48	; 0x30
 8013484:	e7fb      	b.n	801347e <__strftime+0x7da>
 8013486:	69eb      	ldr	r3, [r5, #28]
 8013488:	69aa      	ldr	r2, [r5, #24]
 801348a:	3307      	adds	r3, #7
 801348c:	1a9b      	subs	r3, r3, r2
 801348e:	2207      	movs	r2, #7
 8013490:	fb93 f3f2 	sdiv	r3, r3, r2
 8013494:	e62f      	b.n	80130f6 <__strftime+0x452>
 8013496:	4628      	mov	r0, r5
 8013498:	f7ff fba2 	bl	8012be0 <iso_year_adjust>
 801349c:	69aa      	ldr	r2, [r5, #24]
 801349e:	b132      	cbz	r2, 80134ae <__strftime+0x80a>
 80134a0:	3a01      	subs	r2, #1
 80134a2:	2800      	cmp	r0, #0
 80134a4:	dc28      	bgt.n	80134f8 <__strftime+0x854>
 80134a6:	69eb      	ldr	r3, [r5, #28]
 80134a8:	d103      	bne.n	80134b2 <__strftime+0x80e>
 80134aa:	330a      	adds	r3, #10
 80134ac:	e7ee      	b.n	801348c <__strftime+0x7e8>
 80134ae:	2206      	movs	r2, #6
 80134b0:	e7f7      	b.n	80134a2 <__strftime+0x7fe>
 80134b2:	6968      	ldr	r0, [r5, #20]
 80134b4:	2800      	cmp	r0, #0
 80134b6:	eba2 0303 	sub.w	r3, r2, r3
 80134ba:	f240 726b 	movw	r2, #1899	; 0x76b
 80134be:	bfa8      	it	ge
 80134c0:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80134c4:	4410      	add	r0, r2
 80134c6:	0782      	lsls	r2, r0, #30
 80134c8:	d105      	bne.n	80134d6 <__strftime+0x832>
 80134ca:	2264      	movs	r2, #100	; 0x64
 80134cc:	fb90 f1f2 	sdiv	r1, r0, r2
 80134d0:	fb02 0111 	mls	r1, r2, r1, r0
 80134d4:	b971      	cbnz	r1, 80134f4 <__strftime+0x850>
 80134d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80134da:	fb90 f2f1 	sdiv	r2, r0, r1
 80134de:	fb01 0212 	mls	r2, r1, r2, r0
 80134e2:	fab2 f282 	clz	r2, r2
 80134e6:	0952      	lsrs	r2, r2, #5
 80134e8:	1a9a      	subs	r2, r3, r2
 80134ea:	2a05      	cmp	r2, #5
 80134ec:	bfb4      	ite	lt
 80134ee:	2335      	movlt	r3, #53	; 0x35
 80134f0:	2334      	movge	r3, #52	; 0x34
 80134f2:	e600      	b.n	80130f6 <__strftime+0x452>
 80134f4:	2201      	movs	r2, #1
 80134f6:	e7f7      	b.n	80134e8 <__strftime+0x844>
 80134f8:	2301      	movs	r3, #1
 80134fa:	e5fc      	b.n	80130f6 <__strftime+0x452>
 80134fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8013500:	42a3      	cmp	r3, r4
 8013502:	f67f abfe 	bls.w	8012d02 <__strftime+0x5e>
 8013506:	69ab      	ldr	r3, [r5, #24]
 8013508:	3330      	adds	r3, #48	; 0x30
 801350a:	e6d1      	b.n	80132b0 <__strftime+0x60c>
 801350c:	69ab      	ldr	r3, [r5, #24]
 801350e:	b13b      	cbz	r3, 8013520 <__strftime+0x87c>
 8013510:	3b01      	subs	r3, #1
 8013512:	69ea      	ldr	r2, [r5, #28]
 8013514:	3207      	adds	r2, #7
 8013516:	1ad2      	subs	r2, r2, r3
 8013518:	2307      	movs	r3, #7
 801351a:	fb92 f3f3 	sdiv	r3, r2, r3
 801351e:	e5ea      	b.n	80130f6 <__strftime+0x452>
 8013520:	2306      	movs	r3, #6
 8013522:	e7f6      	b.n	8013512 <__strftime+0x86e>
 8013524:	6968      	ldr	r0, [r5, #20]
 8013526:	2800      	cmp	r0, #0
 8013528:	db05      	blt.n	8013536 <__strftime+0x892>
 801352a:	2264      	movs	r2, #100	; 0x64
 801352c:	fb90 f3f2 	sdiv	r3, r0, r2
 8013530:	fb03 0312 	mls	r3, r3, r2, r0
 8013534:	e5df      	b.n	80130f6 <__strftime+0x452>
 8013536:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801353a:	f000 fcf3 	bl	8013f24 <abs>
 801353e:	e7f4      	b.n	801352a <__strftime+0x886>
 8013540:	696b      	ldr	r3, [r5, #20]
 8013542:	4a4c      	ldr	r2, [pc, #304]	; (8013674 <__strftime+0x9d0>)
 8013544:	4293      	cmp	r3, r2
 8013546:	da09      	bge.n	801355c <__strftime+0x8b8>
 8013548:	212d      	movs	r1, #45	; 0x2d
 801354a:	f88d 1020 	strb.w	r1, [sp, #32]
 801354e:	eba2 0a03 	sub.w	sl, r2, r3
 8013552:	b106      	cbz	r6, 8013556 <__strftime+0x8b2>
 8013554:	3e01      	subs	r6, #1
 8013556:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801355a:	e00b      	b.n	8013574 <__strftime+0x8d0>
 801355c:	2f2b      	cmp	r7, #43	; 0x2b
 801355e:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8013562:	d106      	bne.n	8013572 <__strftime+0x8ce>
 8013564:	f242 730f 	movw	r3, #9999	; 0x270f
 8013568:	459a      	cmp	sl, r3
 801356a:	d902      	bls.n	8013572 <__strftime+0x8ce>
 801356c:	f88d 7020 	strb.w	r7, [sp, #32]
 8013570:	e7ef      	b.n	8013552 <__strftime+0x8ae>
 8013572:	ab08      	add	r3, sp, #32
 8013574:	2225      	movs	r2, #37	; 0x25
 8013576:	701a      	strb	r2, [r3, #0]
 8013578:	b937      	cbnz	r7, 8013588 <__strftime+0x8e4>
 801357a:	1c58      	adds	r0, r3, #1
 801357c:	493e      	ldr	r1, [pc, #248]	; (8013678 <__strftime+0x9d4>)
 801357e:	f001 fbd3 	bl	8014d28 <strcpy>
 8013582:	f8cd a000 	str.w	sl, [sp]
 8013586:	e665      	b.n	8013254 <__strftime+0x5b0>
 8013588:	2230      	movs	r2, #48	; 0x30
 801358a:	1c98      	adds	r0, r3, #2
 801358c:	705a      	strb	r2, [r3, #1]
 801358e:	e7f5      	b.n	801357c <__strftime+0x8d8>
 8013590:	6a2b      	ldr	r3, [r5, #32]
 8013592:	2b00      	cmp	r3, #0
 8013594:	f6ff ac88 	blt.w	8012ea8 <__strftime+0x204>
 8013598:	f000 f9c8 	bl	801392c <__tz_lock>
 801359c:	9b04      	ldr	r3, [sp, #16]
 801359e:	b90b      	cbnz	r3, 80135a4 <__strftime+0x900>
 80135a0:	f000 f9d0 	bl	8013944 <_tzset_unlocked>
 80135a4:	f000 fd9e 	bl	80140e4 <__gettzinfo>
 80135a8:	6a2b      	ldr	r3, [r5, #32]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	bfcc      	ite	gt
 80135ae:	2350      	movgt	r3, #80	; 0x50
 80135b0:	2328      	movle	r3, #40	; 0x28
 80135b2:	eb09 0704 	add.w	r7, r9, r4
 80135b6:	58c6      	ldr	r6, [r0, r3]
 80135b8:	f000 f9be 	bl	8013938 <__tz_unlock>
 80135bc:	4276      	negs	r6, r6
 80135be:	233c      	movs	r3, #60	; 0x3c
 80135c0:	fb96 f0f3 	sdiv	r0, r6, r3
 80135c4:	f000 fe52 	bl	801426c <labs>
 80135c8:	233c      	movs	r3, #60	; 0x3c
 80135ca:	eba8 0a04 	sub.w	sl, r8, r4
 80135ce:	fb90 f2f3 	sdiv	r2, r0, r3
 80135d2:	fb02 0013 	mls	r0, r2, r3, r0
 80135d6:	9000      	str	r0, [sp, #0]
 80135d8:	4a28      	ldr	r2, [pc, #160]	; (801367c <__strftime+0x9d8>)
 80135da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80135de:	4651      	mov	r1, sl
 80135e0:	4638      	mov	r0, r7
 80135e2:	fb96 f3f3 	sdiv	r3, r6, r3
 80135e6:	f001 fb3f 	bl	8014c68 <sniprintf>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	f6ff ab89 	blt.w	8012d02 <__strftime+0x5e>
 80135f0:	4404      	add	r4, r0
 80135f2:	45a0      	cmp	r8, r4
 80135f4:	f67f ab85 	bls.w	8012d02 <__strftime+0x5e>
 80135f8:	2301      	movs	r3, #1
 80135fa:	9304      	str	r3, [sp, #16]
 80135fc:	e454      	b.n	8012ea8 <__strftime+0x204>
 80135fe:	6a2b      	ldr	r3, [r5, #32]
 8013600:	2b00      	cmp	r3, #0
 8013602:	f6ff ac51 	blt.w	8012ea8 <__strftime+0x204>
 8013606:	f000 f991 	bl	801392c <__tz_lock>
 801360a:	9b04      	ldr	r3, [sp, #16]
 801360c:	b90b      	cbnz	r3, 8013612 <__strftime+0x96e>
 801360e:	f000 f999 	bl	8013944 <_tzset_unlocked>
 8013612:	6a2b      	ldr	r3, [r5, #32]
 8013614:	4a1a      	ldr	r2, [pc, #104]	; (8013680 <__strftime+0x9dc>)
 8013616:	2b00      	cmp	r3, #0
 8013618:	bfd4      	ite	le
 801361a:	2300      	movle	r3, #0
 801361c:	2301      	movgt	r3, #1
 801361e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8013622:	4630      	mov	r0, r6
 8013624:	f7ec fe0a 	bl	800023c <strlen>
 8013628:	3e01      	subs	r6, #1
 801362a:	4420      	add	r0, r4
 801362c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013630:	42a0      	cmp	r0, r4
 8013632:	d102      	bne.n	801363a <__strftime+0x996>
 8013634:	f000 f980 	bl	8013938 <__tz_unlock>
 8013638:	e7de      	b.n	80135f8 <__strftime+0x954>
 801363a:	42a3      	cmp	r3, r4
 801363c:	d905      	bls.n	801364a <__strftime+0x9a6>
 801363e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8013642:	f809 2004 	strb.w	r2, [r9, r4]
 8013646:	3401      	adds	r4, #1
 8013648:	e7f2      	b.n	8013630 <__strftime+0x98c>
 801364a:	f000 f975 	bl	8013938 <__tz_unlock>
 801364e:	f7ff bb58 	b.w	8012d02 <__strftime+0x5e>
 8013652:	f108 33ff 	add.w	r3, r8, #4294967295
 8013656:	42a3      	cmp	r3, r4
 8013658:	f67f ab53 	bls.w	8012d02 <__strftime+0x5e>
 801365c:	2325      	movs	r3, #37	; 0x25
 801365e:	e627      	b.n	80132b0 <__strftime+0x60c>
 8013660:	f1b8 0f00 	cmp.w	r8, #0
 8013664:	d002      	beq.n	801366c <__strftime+0x9c8>
 8013666:	2300      	movs	r3, #0
 8013668:	f809 3004 	strb.w	r3, [r9, r4]
 801366c:	4620      	mov	r0, r4
 801366e:	b011      	add	sp, #68	; 0x44
 8013670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013674:	fffff894 	.word	0xfffff894
 8013678:	080187f3 	.word	0x080187f3
 801367c:	08018810 	.word	0x08018810
 8013680:	20000164 	.word	0x20000164

08013684 <strftime>:
 8013684:	b513      	push	{r0, r1, r4, lr}
 8013686:	4c03      	ldr	r4, [pc, #12]	; (8013694 <strftime+0x10>)
 8013688:	9400      	str	r4, [sp, #0]
 801368a:	f7ff fb0b 	bl	8012ca4 <__strftime>
 801368e:	b002      	add	sp, #8
 8013690:	bd10      	pop	{r4, pc}
 8013692:	bf00      	nop
 8013694:	200001c8 	.word	0x200001c8

08013698 <_strtoul_l.isra.0>:
 8013698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801369c:	4e3b      	ldr	r6, [pc, #236]	; (801378c <_strtoul_l.isra.0+0xf4>)
 801369e:	4686      	mov	lr, r0
 80136a0:	468c      	mov	ip, r1
 80136a2:	4660      	mov	r0, ip
 80136a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80136a8:	5da5      	ldrb	r5, [r4, r6]
 80136aa:	f015 0508 	ands.w	r5, r5, #8
 80136ae:	d1f8      	bne.n	80136a2 <_strtoul_l.isra.0+0xa>
 80136b0:	2c2d      	cmp	r4, #45	; 0x2d
 80136b2:	d134      	bne.n	801371e <_strtoul_l.isra.0+0x86>
 80136b4:	f89c 4000 	ldrb.w	r4, [ip]
 80136b8:	f04f 0801 	mov.w	r8, #1
 80136bc:	f100 0c02 	add.w	ip, r0, #2
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d05e      	beq.n	8013782 <_strtoul_l.isra.0+0xea>
 80136c4:	2b10      	cmp	r3, #16
 80136c6:	d10c      	bne.n	80136e2 <_strtoul_l.isra.0+0x4a>
 80136c8:	2c30      	cmp	r4, #48	; 0x30
 80136ca:	d10a      	bne.n	80136e2 <_strtoul_l.isra.0+0x4a>
 80136cc:	f89c 0000 	ldrb.w	r0, [ip]
 80136d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80136d4:	2858      	cmp	r0, #88	; 0x58
 80136d6:	d14f      	bne.n	8013778 <_strtoul_l.isra.0+0xe0>
 80136d8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80136dc:	2310      	movs	r3, #16
 80136de:	f10c 0c02 	add.w	ip, ip, #2
 80136e2:	f04f 37ff 	mov.w	r7, #4294967295
 80136e6:	2500      	movs	r5, #0
 80136e8:	fbb7 f7f3 	udiv	r7, r7, r3
 80136ec:	fb03 f907 	mul.w	r9, r3, r7
 80136f0:	ea6f 0909 	mvn.w	r9, r9
 80136f4:	4628      	mov	r0, r5
 80136f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80136fa:	2e09      	cmp	r6, #9
 80136fc:	d818      	bhi.n	8013730 <_strtoul_l.isra.0+0x98>
 80136fe:	4634      	mov	r4, r6
 8013700:	42a3      	cmp	r3, r4
 8013702:	dd24      	ble.n	801374e <_strtoul_l.isra.0+0xb6>
 8013704:	2d00      	cmp	r5, #0
 8013706:	db1f      	blt.n	8013748 <_strtoul_l.isra.0+0xb0>
 8013708:	4287      	cmp	r7, r0
 801370a:	d31d      	bcc.n	8013748 <_strtoul_l.isra.0+0xb0>
 801370c:	d101      	bne.n	8013712 <_strtoul_l.isra.0+0x7a>
 801370e:	45a1      	cmp	r9, r4
 8013710:	db1a      	blt.n	8013748 <_strtoul_l.isra.0+0xb0>
 8013712:	fb00 4003 	mla	r0, r0, r3, r4
 8013716:	2501      	movs	r5, #1
 8013718:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801371c:	e7eb      	b.n	80136f6 <_strtoul_l.isra.0+0x5e>
 801371e:	2c2b      	cmp	r4, #43	; 0x2b
 8013720:	bf08      	it	eq
 8013722:	f89c 4000 	ldrbeq.w	r4, [ip]
 8013726:	46a8      	mov	r8, r5
 8013728:	bf08      	it	eq
 801372a:	f100 0c02 	addeq.w	ip, r0, #2
 801372e:	e7c7      	b.n	80136c0 <_strtoul_l.isra.0+0x28>
 8013730:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013734:	2e19      	cmp	r6, #25
 8013736:	d801      	bhi.n	801373c <_strtoul_l.isra.0+0xa4>
 8013738:	3c37      	subs	r4, #55	; 0x37
 801373a:	e7e1      	b.n	8013700 <_strtoul_l.isra.0+0x68>
 801373c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013740:	2e19      	cmp	r6, #25
 8013742:	d804      	bhi.n	801374e <_strtoul_l.isra.0+0xb6>
 8013744:	3c57      	subs	r4, #87	; 0x57
 8013746:	e7db      	b.n	8013700 <_strtoul_l.isra.0+0x68>
 8013748:	f04f 35ff 	mov.w	r5, #4294967295
 801374c:	e7e4      	b.n	8013718 <_strtoul_l.isra.0+0x80>
 801374e:	2d00      	cmp	r5, #0
 8013750:	da07      	bge.n	8013762 <_strtoul_l.isra.0+0xca>
 8013752:	2322      	movs	r3, #34	; 0x22
 8013754:	f8ce 3000 	str.w	r3, [lr]
 8013758:	f04f 30ff 	mov.w	r0, #4294967295
 801375c:	b942      	cbnz	r2, 8013770 <_strtoul_l.isra.0+0xd8>
 801375e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013762:	f1b8 0f00 	cmp.w	r8, #0
 8013766:	d000      	beq.n	801376a <_strtoul_l.isra.0+0xd2>
 8013768:	4240      	negs	r0, r0
 801376a:	2a00      	cmp	r2, #0
 801376c:	d0f7      	beq.n	801375e <_strtoul_l.isra.0+0xc6>
 801376e:	b10d      	cbz	r5, 8013774 <_strtoul_l.isra.0+0xdc>
 8013770:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013774:	6011      	str	r1, [r2, #0]
 8013776:	e7f2      	b.n	801375e <_strtoul_l.isra.0+0xc6>
 8013778:	2430      	movs	r4, #48	; 0x30
 801377a:	2b00      	cmp	r3, #0
 801377c:	d1b1      	bne.n	80136e2 <_strtoul_l.isra.0+0x4a>
 801377e:	2308      	movs	r3, #8
 8013780:	e7af      	b.n	80136e2 <_strtoul_l.isra.0+0x4a>
 8013782:	2c30      	cmp	r4, #48	; 0x30
 8013784:	d0a2      	beq.n	80136cc <_strtoul_l.isra.0+0x34>
 8013786:	230a      	movs	r3, #10
 8013788:	e7ab      	b.n	80136e2 <_strtoul_l.isra.0+0x4a>
 801378a:	bf00      	nop
 801378c:	08018abd 	.word	0x08018abd

08013790 <_strtoul_r>:
 8013790:	f7ff bf82 	b.w	8013698 <_strtoul_l.isra.0>

08013794 <strtoul>:
 8013794:	4613      	mov	r3, r2
 8013796:	460a      	mov	r2, r1
 8013798:	4601      	mov	r1, r0
 801379a:	4802      	ldr	r0, [pc, #8]	; (80137a4 <strtoul+0x10>)
 801379c:	6800      	ldr	r0, [r0, #0]
 801379e:	f7ff bf7b 	b.w	8013698 <_strtoul_l.isra.0>
 80137a2:	bf00      	nop
 80137a4:	20000100 	.word	0x20000100

080137a8 <time>:
 80137a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80137aa:	4b0b      	ldr	r3, [pc, #44]	; (80137d8 <time+0x30>)
 80137ac:	2200      	movs	r2, #0
 80137ae:	4669      	mov	r1, sp
 80137b0:	4604      	mov	r4, r0
 80137b2:	6818      	ldr	r0, [r3, #0]
 80137b4:	f000 fc84 	bl	80140c0 <_gettimeofday_r>
 80137b8:	2800      	cmp	r0, #0
 80137ba:	bfbe      	ittt	lt
 80137bc:	f04f 32ff 	movlt.w	r2, #4294967295
 80137c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80137c4:	e9cd 2300 	strdlt	r2, r3, [sp]
 80137c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80137cc:	b10c      	cbz	r4, 80137d2 <time+0x2a>
 80137ce:	e9c4 0100 	strd	r0, r1, [r4]
 80137d2:	b004      	add	sp, #16
 80137d4:	bd10      	pop	{r4, pc}
 80137d6:	bf00      	nop
 80137d8:	20000100 	.word	0x20000100

080137dc <__tzcalc_limits>:
 80137dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e0:	4680      	mov	r8, r0
 80137e2:	f000 fc7f 	bl	80140e4 <__gettzinfo>
 80137e6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80137ea:	4598      	cmp	r8, r3
 80137ec:	f340 8098 	ble.w	8013920 <__tzcalc_limits+0x144>
 80137f0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80137f4:	4443      	add	r3, r8
 80137f6:	109b      	asrs	r3, r3, #2
 80137f8:	f240 126d 	movw	r2, #365	; 0x16d
 80137fc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8013800:	fb02 3505 	mla	r5, r2, r5, r3
 8013804:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8013808:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801380c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013810:	441d      	add	r5, r3
 8013812:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013816:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801381a:	fb98 f7f3 	sdiv	r7, r8, r3
 801381e:	fb03 8717 	mls	r7, r3, r7, r8
 8013822:	4442      	add	r2, r8
 8013824:	fab7 fc87 	clz	ip, r7
 8013828:	fbb2 f2f3 	udiv	r2, r2, r3
 801382c:	f008 0303 	and.w	r3, r8, #3
 8013830:	4415      	add	r5, r2
 8013832:	2264      	movs	r2, #100	; 0x64
 8013834:	f8c0 8004 	str.w	r8, [r0, #4]
 8013838:	fb98 f6f2 	sdiv	r6, r8, r2
 801383c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8013840:	fb02 8616 	mls	r6, r2, r6, r8
 8013844:	4604      	mov	r4, r0
 8013846:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	f04f 0e07 	mov.w	lr, #7
 8013850:	7a22      	ldrb	r2, [r4, #8]
 8013852:	6963      	ldr	r3, [r4, #20]
 8013854:	2a4a      	cmp	r2, #74	; 0x4a
 8013856:	d128      	bne.n	80138aa <__tzcalc_limits+0xce>
 8013858:	9900      	ldr	r1, [sp, #0]
 801385a:	18ea      	adds	r2, r5, r3
 801385c:	b901      	cbnz	r1, 8013860 <__tzcalc_limits+0x84>
 801385e:	b906      	cbnz	r6, 8013862 <__tzcalc_limits+0x86>
 8013860:	bb0f      	cbnz	r7, 80138a6 <__tzcalc_limits+0xca>
 8013862:	2b3b      	cmp	r3, #59	; 0x3b
 8013864:	bfd4      	ite	le
 8013866:	2300      	movle	r3, #0
 8013868:	2301      	movgt	r3, #1
 801386a:	4413      	add	r3, r2
 801386c:	1e5a      	subs	r2, r3, #1
 801386e:	69a3      	ldr	r3, [r4, #24]
 8013870:	492c      	ldr	r1, [pc, #176]	; (8013924 <__tzcalc_limits+0x148>)
 8013872:	fb01 3202 	mla	r2, r1, r2, r3
 8013876:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013878:	4413      	add	r3, r2
 801387a:	461a      	mov	r2, r3
 801387c:	17db      	asrs	r3, r3, #31
 801387e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013882:	3428      	adds	r4, #40	; 0x28
 8013884:	45a3      	cmp	fp, r4
 8013886:	d1e3      	bne.n	8013850 <__tzcalc_limits+0x74>
 8013888:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801388c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8013890:	4294      	cmp	r4, r2
 8013892:	eb75 0303 	sbcs.w	r3, r5, r3
 8013896:	bfb4      	ite	lt
 8013898:	2301      	movlt	r3, #1
 801389a:	2300      	movge	r3, #0
 801389c:	6003      	str	r3, [r0, #0]
 801389e:	2001      	movs	r0, #1
 80138a0:	b003      	add	sp, #12
 80138a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a6:	2300      	movs	r3, #0
 80138a8:	e7df      	b.n	801386a <__tzcalc_limits+0x8e>
 80138aa:	2a44      	cmp	r2, #68	; 0x44
 80138ac:	d101      	bne.n	80138b2 <__tzcalc_limits+0xd6>
 80138ae:	18ea      	adds	r2, r5, r3
 80138b0:	e7dd      	b.n	801386e <__tzcalc_limits+0x92>
 80138b2:	9a00      	ldr	r2, [sp, #0]
 80138b4:	bb72      	cbnz	r2, 8013914 <__tzcalc_limits+0x138>
 80138b6:	2e00      	cmp	r6, #0
 80138b8:	bf0c      	ite	eq
 80138ba:	46e0      	moveq	r8, ip
 80138bc:	f04f 0801 	movne.w	r8, #1
 80138c0:	4919      	ldr	r1, [pc, #100]	; (8013928 <__tzcalc_limits+0x14c>)
 80138c2:	68e2      	ldr	r2, [r4, #12]
 80138c4:	9201      	str	r2, [sp, #4]
 80138c6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80138ca:	fb0a 1808 	mla	r8, sl, r8, r1
 80138ce:	462a      	mov	r2, r5
 80138d0:	f04f 0900 	mov.w	r9, #0
 80138d4:	f1a8 0804 	sub.w	r8, r8, #4
 80138d8:	9901      	ldr	r1, [sp, #4]
 80138da:	f109 0901 	add.w	r9, r9, #1
 80138de:	4549      	cmp	r1, r9
 80138e0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80138e4:	dc18      	bgt.n	8013918 <__tzcalc_limits+0x13c>
 80138e6:	f102 0804 	add.w	r8, r2, #4
 80138ea:	fb98 f9fe 	sdiv	r9, r8, lr
 80138ee:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80138f2:	eba8 0909 	sub.w	r9, r8, r9
 80138f6:	ebb3 0909 	subs.w	r9, r3, r9
 80138fa:	6923      	ldr	r3, [r4, #16]
 80138fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8013900:	bf48      	it	mi
 8013902:	f109 0907 	addmi.w	r9, r9, #7
 8013906:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801390a:	444b      	add	r3, r9
 801390c:	4553      	cmp	r3, sl
 801390e:	da05      	bge.n	801391c <__tzcalc_limits+0x140>
 8013910:	441a      	add	r2, r3
 8013912:	e7ac      	b.n	801386e <__tzcalc_limits+0x92>
 8013914:	46e0      	mov	r8, ip
 8013916:	e7d3      	b.n	80138c0 <__tzcalc_limits+0xe4>
 8013918:	4452      	add	r2, sl
 801391a:	e7dd      	b.n	80138d8 <__tzcalc_limits+0xfc>
 801391c:	3b07      	subs	r3, #7
 801391e:	e7f5      	b.n	801390c <__tzcalc_limits+0x130>
 8013920:	2000      	movs	r0, #0
 8013922:	e7bd      	b.n	80138a0 <__tzcalc_limits+0xc4>
 8013924:	00015180 	.word	0x00015180
 8013928:	08018704 	.word	0x08018704

0801392c <__tz_lock>:
 801392c:	4801      	ldr	r0, [pc, #4]	; (8013934 <__tz_lock+0x8>)
 801392e:	f7fe bed7 	b.w	80126e0 <__retarget_lock_acquire>
 8013932:	bf00      	nop
 8013934:	20000c1f 	.word	0x20000c1f

08013938 <__tz_unlock>:
 8013938:	4801      	ldr	r0, [pc, #4]	; (8013940 <__tz_unlock+0x8>)
 801393a:	f7fe bed3 	b.w	80126e4 <__retarget_lock_release>
 801393e:	bf00      	nop
 8013940:	20000c1f 	.word	0x20000c1f

08013944 <_tzset_unlocked>:
 8013944:	4b01      	ldr	r3, [pc, #4]	; (801394c <_tzset_unlocked+0x8>)
 8013946:	6818      	ldr	r0, [r3, #0]
 8013948:	f000 b802 	b.w	8013950 <_tzset_unlocked_r>
 801394c:	20000100 	.word	0x20000100

08013950 <_tzset_unlocked_r>:
 8013950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013954:	b08d      	sub	sp, #52	; 0x34
 8013956:	4607      	mov	r7, r0
 8013958:	f000 fbc4 	bl	80140e4 <__gettzinfo>
 801395c:	49ae      	ldr	r1, [pc, #696]	; (8013c18 <_tzset_unlocked_r+0x2c8>)
 801395e:	4eaf      	ldr	r6, [pc, #700]	; (8013c1c <_tzset_unlocked_r+0x2cc>)
 8013960:	4605      	mov	r5, r0
 8013962:	4638      	mov	r0, r7
 8013964:	f000 fba4 	bl	80140b0 <_getenv_r>
 8013968:	4604      	mov	r4, r0
 801396a:	b970      	cbnz	r0, 801398a <_tzset_unlocked_r+0x3a>
 801396c:	4bac      	ldr	r3, [pc, #688]	; (8013c20 <_tzset_unlocked_r+0x2d0>)
 801396e:	4aad      	ldr	r2, [pc, #692]	; (8013c24 <_tzset_unlocked_r+0x2d4>)
 8013970:	6018      	str	r0, [r3, #0]
 8013972:	4bad      	ldr	r3, [pc, #692]	; (8013c28 <_tzset_unlocked_r+0x2d8>)
 8013974:	6018      	str	r0, [r3, #0]
 8013976:	4bad      	ldr	r3, [pc, #692]	; (8013c2c <_tzset_unlocked_r+0x2dc>)
 8013978:	6830      	ldr	r0, [r6, #0]
 801397a:	e9c3 2200 	strd	r2, r2, [r3]
 801397e:	f7fe ff1f 	bl	80127c0 <free>
 8013982:	6034      	str	r4, [r6, #0]
 8013984:	b00d      	add	sp, #52	; 0x34
 8013986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801398a:	6831      	ldr	r1, [r6, #0]
 801398c:	2900      	cmp	r1, #0
 801398e:	d15f      	bne.n	8013a50 <_tzset_unlocked_r+0x100>
 8013990:	6830      	ldr	r0, [r6, #0]
 8013992:	f7fe ff15 	bl	80127c0 <free>
 8013996:	4620      	mov	r0, r4
 8013998:	f7ec fc50 	bl	800023c <strlen>
 801399c:	1c41      	adds	r1, r0, #1
 801399e:	4638      	mov	r0, r7
 80139a0:	f7fe ff8c 	bl	80128bc <_malloc_r>
 80139a4:	6030      	str	r0, [r6, #0]
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d157      	bne.n	8013a5a <_tzset_unlocked_r+0x10a>
 80139aa:	7823      	ldrb	r3, [r4, #0]
 80139ac:	4aa0      	ldr	r2, [pc, #640]	; (8013c30 <_tzset_unlocked_r+0x2e0>)
 80139ae:	49a1      	ldr	r1, [pc, #644]	; (8013c34 <_tzset_unlocked_r+0x2e4>)
 80139b0:	2b3a      	cmp	r3, #58	; 0x3a
 80139b2:	bf08      	it	eq
 80139b4:	3401      	addeq	r4, #1
 80139b6:	ae0a      	add	r6, sp, #40	; 0x28
 80139b8:	4633      	mov	r3, r6
 80139ba:	4620      	mov	r0, r4
 80139bc:	f001 f988 	bl	8014cd0 <siscanf>
 80139c0:	2800      	cmp	r0, #0
 80139c2:	dddf      	ble.n	8013984 <_tzset_unlocked_r+0x34>
 80139c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139c6:	18e7      	adds	r7, r4, r3
 80139c8:	5ce3      	ldrb	r3, [r4, r3]
 80139ca:	2b2d      	cmp	r3, #45	; 0x2d
 80139cc:	d149      	bne.n	8013a62 <_tzset_unlocked_r+0x112>
 80139ce:	3701      	adds	r7, #1
 80139d0:	f04f 34ff 	mov.w	r4, #4294967295
 80139d4:	f10d 0a20 	add.w	sl, sp, #32
 80139d8:	f10d 0b1e 	add.w	fp, sp, #30
 80139dc:	f04f 0800 	mov.w	r8, #0
 80139e0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80139e4:	4994      	ldr	r1, [pc, #592]	; (8013c38 <_tzset_unlocked_r+0x2e8>)
 80139e6:	9603      	str	r6, [sp, #12]
 80139e8:	f8cd b000 	str.w	fp, [sp]
 80139ec:	4633      	mov	r3, r6
 80139ee:	aa07      	add	r2, sp, #28
 80139f0:	4638      	mov	r0, r7
 80139f2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80139f6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80139fa:	f001 f969 	bl	8014cd0 <siscanf>
 80139fe:	4540      	cmp	r0, r8
 8013a00:	ddc0      	ble.n	8013984 <_tzset_unlocked_r+0x34>
 8013a02:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013a06:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013a0a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8013c44 <_tzset_unlocked_r+0x2f4>
 8013a0e:	213c      	movs	r1, #60	; 0x3c
 8013a10:	fb01 2203 	mla	r2, r1, r3, r2
 8013a14:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013a18:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013a1c:	fb01 2303 	mla	r3, r1, r3, r2
 8013a20:	435c      	muls	r4, r3
 8013a22:	62ac      	str	r4, [r5, #40]	; 0x28
 8013a24:	4c81      	ldr	r4, [pc, #516]	; (8013c2c <_tzset_unlocked_r+0x2dc>)
 8013a26:	4b82      	ldr	r3, [pc, #520]	; (8013c30 <_tzset_unlocked_r+0x2e0>)
 8013a28:	6023      	str	r3, [r4, #0]
 8013a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a2c:	4981      	ldr	r1, [pc, #516]	; (8013c34 <_tzset_unlocked_r+0x2e4>)
 8013a2e:	441f      	add	r7, r3
 8013a30:	464a      	mov	r2, r9
 8013a32:	4633      	mov	r3, r6
 8013a34:	4638      	mov	r0, r7
 8013a36:	f001 f94b 	bl	8014cd0 <siscanf>
 8013a3a:	4540      	cmp	r0, r8
 8013a3c:	dc16      	bgt.n	8013a6c <_tzset_unlocked_r+0x11c>
 8013a3e:	6823      	ldr	r3, [r4, #0]
 8013a40:	6063      	str	r3, [r4, #4]
 8013a42:	4b77      	ldr	r3, [pc, #476]	; (8013c20 <_tzset_unlocked_r+0x2d0>)
 8013a44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8013a46:	601a      	str	r2, [r3, #0]
 8013a48:	4b77      	ldr	r3, [pc, #476]	; (8013c28 <_tzset_unlocked_r+0x2d8>)
 8013a4a:	f8c3 8000 	str.w	r8, [r3]
 8013a4e:	e799      	b.n	8013984 <_tzset_unlocked_r+0x34>
 8013a50:	f7ec fbfc 	bl	800024c <strcmp>
 8013a54:	2800      	cmp	r0, #0
 8013a56:	d19b      	bne.n	8013990 <_tzset_unlocked_r+0x40>
 8013a58:	e794      	b.n	8013984 <_tzset_unlocked_r+0x34>
 8013a5a:	4621      	mov	r1, r4
 8013a5c:	f001 f964 	bl	8014d28 <strcpy>
 8013a60:	e7a3      	b.n	80139aa <_tzset_unlocked_r+0x5a>
 8013a62:	2b2b      	cmp	r3, #43	; 0x2b
 8013a64:	bf08      	it	eq
 8013a66:	3701      	addeq	r7, #1
 8013a68:	2401      	movs	r4, #1
 8013a6a:	e7b3      	b.n	80139d4 <_tzset_unlocked_r+0x84>
 8013a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a6e:	f8c4 9004 	str.w	r9, [r4, #4]
 8013a72:	18fc      	adds	r4, r7, r3
 8013a74:	5cfb      	ldrb	r3, [r7, r3]
 8013a76:	2b2d      	cmp	r3, #45	; 0x2d
 8013a78:	f040 808b 	bne.w	8013b92 <_tzset_unlocked_r+0x242>
 8013a7c:	3401      	adds	r4, #1
 8013a7e:	f04f 37ff 	mov.w	r7, #4294967295
 8013a82:	2300      	movs	r3, #0
 8013a84:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013a88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013a8c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013a90:	930a      	str	r3, [sp, #40]	; 0x28
 8013a92:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013a96:	e9cd b600 	strd	fp, r6, [sp]
 8013a9a:	4967      	ldr	r1, [pc, #412]	; (8013c38 <_tzset_unlocked_r+0x2e8>)
 8013a9c:	4633      	mov	r3, r6
 8013a9e:	aa07      	add	r2, sp, #28
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	f001 f915 	bl	8014cd0 <siscanf>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	dc78      	bgt.n	8013b9c <_tzset_unlocked_r+0x24c>
 8013aaa:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8013aac:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8013ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ab2:	652f      	str	r7, [r5, #80]	; 0x50
 8013ab4:	441c      	add	r4, r3
 8013ab6:	462f      	mov	r7, r5
 8013ab8:	f04f 0900 	mov.w	r9, #0
 8013abc:	7823      	ldrb	r3, [r4, #0]
 8013abe:	2b2c      	cmp	r3, #44	; 0x2c
 8013ac0:	bf08      	it	eq
 8013ac2:	3401      	addeq	r4, #1
 8013ac4:	f894 8000 	ldrb.w	r8, [r4]
 8013ac8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8013acc:	d178      	bne.n	8013bc0 <_tzset_unlocked_r+0x270>
 8013ace:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8013ad2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013ad6:	ab09      	add	r3, sp, #36	; 0x24
 8013ad8:	9300      	str	r3, [sp, #0]
 8013ada:	4958      	ldr	r1, [pc, #352]	; (8013c3c <_tzset_unlocked_r+0x2ec>)
 8013adc:	9603      	str	r6, [sp, #12]
 8013ade:	4633      	mov	r3, r6
 8013ae0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f001 f8f3 	bl	8014cd0 <siscanf>
 8013aea:	2803      	cmp	r0, #3
 8013aec:	f47f af4a 	bne.w	8013984 <_tzset_unlocked_r+0x34>
 8013af0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013af4:	1e4b      	subs	r3, r1, #1
 8013af6:	2b0b      	cmp	r3, #11
 8013af8:	f63f af44 	bhi.w	8013984 <_tzset_unlocked_r+0x34>
 8013afc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013b00:	1e53      	subs	r3, r2, #1
 8013b02:	2b04      	cmp	r3, #4
 8013b04:	f63f af3e 	bhi.w	8013984 <_tzset_unlocked_r+0x34>
 8013b08:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013b0c:	2b06      	cmp	r3, #6
 8013b0e:	f63f af39 	bhi.w	8013984 <_tzset_unlocked_r+0x34>
 8013b12:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8013b16:	f887 8008 	strb.w	r8, [r7, #8]
 8013b1a:	617b      	str	r3, [r7, #20]
 8013b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b1e:	eb04 0803 	add.w	r8, r4, r3
 8013b22:	2302      	movs	r3, #2
 8013b24:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013b28:	2300      	movs	r3, #0
 8013b2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013b2e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013b32:	930a      	str	r3, [sp, #40]	; 0x28
 8013b34:	f898 3000 	ldrb.w	r3, [r8]
 8013b38:	2b2f      	cmp	r3, #47	; 0x2f
 8013b3a:	d109      	bne.n	8013b50 <_tzset_unlocked_r+0x200>
 8013b3c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013b40:	e9cd b600 	strd	fp, r6, [sp]
 8013b44:	493e      	ldr	r1, [pc, #248]	; (8013c40 <_tzset_unlocked_r+0x2f0>)
 8013b46:	4633      	mov	r3, r6
 8013b48:	aa07      	add	r2, sp, #28
 8013b4a:	4640      	mov	r0, r8
 8013b4c:	f001 f8c0 	bl	8014cd0 <siscanf>
 8013b50:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013b54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013b58:	213c      	movs	r1, #60	; 0x3c
 8013b5a:	fb01 2203 	mla	r2, r1, r3, r2
 8013b5e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013b62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013b66:	fb01 2303 	mla	r3, r1, r3, r2
 8013b6a:	61bb      	str	r3, [r7, #24]
 8013b6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013b6e:	3728      	adds	r7, #40	; 0x28
 8013b70:	4444      	add	r4, r8
 8013b72:	f1b9 0f00 	cmp.w	r9, #0
 8013b76:	d020      	beq.n	8013bba <_tzset_unlocked_r+0x26a>
 8013b78:	6868      	ldr	r0, [r5, #4]
 8013b7a:	f7ff fe2f 	bl	80137dc <__tzcalc_limits>
 8013b7e:	4b28      	ldr	r3, [pc, #160]	; (8013c20 <_tzset_unlocked_r+0x2d0>)
 8013b80:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8013b82:	601a      	str	r2, [r3, #0]
 8013b84:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8013b86:	1a9b      	subs	r3, r3, r2
 8013b88:	4a27      	ldr	r2, [pc, #156]	; (8013c28 <_tzset_unlocked_r+0x2d8>)
 8013b8a:	bf18      	it	ne
 8013b8c:	2301      	movne	r3, #1
 8013b8e:	6013      	str	r3, [r2, #0]
 8013b90:	e6f8      	b.n	8013984 <_tzset_unlocked_r+0x34>
 8013b92:	2b2b      	cmp	r3, #43	; 0x2b
 8013b94:	bf08      	it	eq
 8013b96:	3401      	addeq	r4, #1
 8013b98:	2701      	movs	r7, #1
 8013b9a:	e772      	b.n	8013a82 <_tzset_unlocked_r+0x132>
 8013b9c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013ba0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8013ba4:	213c      	movs	r1, #60	; 0x3c
 8013ba6:	fb01 2203 	mla	r2, r1, r3, r2
 8013baa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013bae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013bb2:	fb01 2303 	mla	r3, r1, r3, r2
 8013bb6:	435f      	muls	r7, r3
 8013bb8:	e77a      	b.n	8013ab0 <_tzset_unlocked_r+0x160>
 8013bba:	f04f 0901 	mov.w	r9, #1
 8013bbe:	e77d      	b.n	8013abc <_tzset_unlocked_r+0x16c>
 8013bc0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8013bc4:	bf06      	itte	eq
 8013bc6:	3401      	addeq	r4, #1
 8013bc8:	4643      	moveq	r3, r8
 8013bca:	2344      	movne	r3, #68	; 0x44
 8013bcc:	220a      	movs	r2, #10
 8013bce:	a90b      	add	r1, sp, #44	; 0x2c
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	9305      	str	r3, [sp, #20]
 8013bd4:	f7ff fdde 	bl	8013794 <strtoul>
 8013bd8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8013bdc:	9b05      	ldr	r3, [sp, #20]
 8013bde:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8013be2:	45a0      	cmp	r8, r4
 8013be4:	d114      	bne.n	8013c10 <_tzset_unlocked_r+0x2c0>
 8013be6:	234d      	movs	r3, #77	; 0x4d
 8013be8:	f1b9 0f00 	cmp.w	r9, #0
 8013bec:	d107      	bne.n	8013bfe <_tzset_unlocked_r+0x2ae>
 8013bee:	722b      	strb	r3, [r5, #8]
 8013bf0:	2103      	movs	r1, #3
 8013bf2:	2302      	movs	r3, #2
 8013bf4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8013bf8:	f8c5 9014 	str.w	r9, [r5, #20]
 8013bfc:	e791      	b.n	8013b22 <_tzset_unlocked_r+0x1d2>
 8013bfe:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8013c02:	220b      	movs	r2, #11
 8013c04:	2301      	movs	r3, #1
 8013c06:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	63eb      	str	r3, [r5, #60]	; 0x3c
 8013c0e:	e788      	b.n	8013b22 <_tzset_unlocked_r+0x1d2>
 8013c10:	b280      	uxth	r0, r0
 8013c12:	723b      	strb	r3, [r7, #8]
 8013c14:	6178      	str	r0, [r7, #20]
 8013c16:	e784      	b.n	8013b22 <_tzset_unlocked_r+0x1d2>
 8013c18:	08018a44 	.word	0x08018a44
 8013c1c:	20000b78 	.word	0x20000b78
 8013c20:	20000b80 	.word	0x20000b80
 8013c24:	08018a47 	.word	0x08018a47
 8013c28:	20000b7c 	.word	0x20000b7c
 8013c2c:	20000164 	.word	0x20000164
 8013c30:	20000b6b 	.word	0x20000b6b
 8013c34:	08018a4b 	.word	0x08018a4b
 8013c38:	08018a6e 	.word	0x08018a6e
 8013c3c:	08018a5a 	.word	0x08018a5a
 8013c40:	08018a6d 	.word	0x08018a6d
 8013c44:	20000b60 	.word	0x20000b60

08013c48 <_vsniprintf_r>:
 8013c48:	b530      	push	{r4, r5, lr}
 8013c4a:	1e14      	subs	r4, r2, #0
 8013c4c:	4605      	mov	r5, r0
 8013c4e:	b09b      	sub	sp, #108	; 0x6c
 8013c50:	4618      	mov	r0, r3
 8013c52:	da05      	bge.n	8013c60 <_vsniprintf_r+0x18>
 8013c54:	238b      	movs	r3, #139	; 0x8b
 8013c56:	602b      	str	r3, [r5, #0]
 8013c58:	f04f 30ff 	mov.w	r0, #4294967295
 8013c5c:	b01b      	add	sp, #108	; 0x6c
 8013c5e:	bd30      	pop	{r4, r5, pc}
 8013c60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013c64:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013c68:	bf14      	ite	ne
 8013c6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013c6e:	4623      	moveq	r3, r4
 8013c70:	9302      	str	r3, [sp, #8]
 8013c72:	9305      	str	r3, [sp, #20]
 8013c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c78:	9100      	str	r1, [sp, #0]
 8013c7a:	9104      	str	r1, [sp, #16]
 8013c7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013c80:	4602      	mov	r2, r0
 8013c82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013c84:	4669      	mov	r1, sp
 8013c86:	4628      	mov	r0, r5
 8013c88:	f000 fba6 	bl	80143d8 <_svfiprintf_r>
 8013c8c:	1c43      	adds	r3, r0, #1
 8013c8e:	bfbc      	itt	lt
 8013c90:	238b      	movlt	r3, #139	; 0x8b
 8013c92:	602b      	strlt	r3, [r5, #0]
 8013c94:	2c00      	cmp	r4, #0
 8013c96:	d0e1      	beq.n	8013c5c <_vsniprintf_r+0x14>
 8013c98:	9b00      	ldr	r3, [sp, #0]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	701a      	strb	r2, [r3, #0]
 8013c9e:	e7dd      	b.n	8013c5c <_vsniprintf_r+0x14>

08013ca0 <vsniprintf>:
 8013ca0:	b507      	push	{r0, r1, r2, lr}
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	4613      	mov	r3, r2
 8013ca6:	460a      	mov	r2, r1
 8013ca8:	4601      	mov	r1, r0
 8013caa:	4803      	ldr	r0, [pc, #12]	; (8013cb8 <vsniprintf+0x18>)
 8013cac:	6800      	ldr	r0, [r0, #0]
 8013cae:	f7ff ffcb 	bl	8013c48 <_vsniprintf_r>
 8013cb2:	b003      	add	sp, #12
 8013cb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8013cb8:	20000100 	.word	0x20000100

08013cbc <__swbuf_r>:
 8013cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cbe:	460e      	mov	r6, r1
 8013cc0:	4614      	mov	r4, r2
 8013cc2:	4605      	mov	r5, r0
 8013cc4:	b118      	cbz	r0, 8013cce <__swbuf_r+0x12>
 8013cc6:	6983      	ldr	r3, [r0, #24]
 8013cc8:	b90b      	cbnz	r3, 8013cce <__swbuf_r+0x12>
 8013cca:	f7fe f957 	bl	8011f7c <__sinit>
 8013cce:	4b21      	ldr	r3, [pc, #132]	; (8013d54 <__swbuf_r+0x98>)
 8013cd0:	429c      	cmp	r4, r3
 8013cd2:	d12b      	bne.n	8013d2c <__swbuf_r+0x70>
 8013cd4:	686c      	ldr	r4, [r5, #4]
 8013cd6:	69a3      	ldr	r3, [r4, #24]
 8013cd8:	60a3      	str	r3, [r4, #8]
 8013cda:	89a3      	ldrh	r3, [r4, #12]
 8013cdc:	071a      	lsls	r2, r3, #28
 8013cde:	d52f      	bpl.n	8013d40 <__swbuf_r+0x84>
 8013ce0:	6923      	ldr	r3, [r4, #16]
 8013ce2:	b36b      	cbz	r3, 8013d40 <__swbuf_r+0x84>
 8013ce4:	6923      	ldr	r3, [r4, #16]
 8013ce6:	6820      	ldr	r0, [r4, #0]
 8013ce8:	1ac0      	subs	r0, r0, r3
 8013cea:	6963      	ldr	r3, [r4, #20]
 8013cec:	b2f6      	uxtb	r6, r6
 8013cee:	4283      	cmp	r3, r0
 8013cf0:	4637      	mov	r7, r6
 8013cf2:	dc04      	bgt.n	8013cfe <__swbuf_r+0x42>
 8013cf4:	4621      	mov	r1, r4
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	f7fe f89a 	bl	8011e30 <_fflush_r>
 8013cfc:	bb30      	cbnz	r0, 8013d4c <__swbuf_r+0x90>
 8013cfe:	68a3      	ldr	r3, [r4, #8]
 8013d00:	3b01      	subs	r3, #1
 8013d02:	60a3      	str	r3, [r4, #8]
 8013d04:	6823      	ldr	r3, [r4, #0]
 8013d06:	1c5a      	adds	r2, r3, #1
 8013d08:	6022      	str	r2, [r4, #0]
 8013d0a:	701e      	strb	r6, [r3, #0]
 8013d0c:	6963      	ldr	r3, [r4, #20]
 8013d0e:	3001      	adds	r0, #1
 8013d10:	4283      	cmp	r3, r0
 8013d12:	d004      	beq.n	8013d1e <__swbuf_r+0x62>
 8013d14:	89a3      	ldrh	r3, [r4, #12]
 8013d16:	07db      	lsls	r3, r3, #31
 8013d18:	d506      	bpl.n	8013d28 <__swbuf_r+0x6c>
 8013d1a:	2e0a      	cmp	r6, #10
 8013d1c:	d104      	bne.n	8013d28 <__swbuf_r+0x6c>
 8013d1e:	4621      	mov	r1, r4
 8013d20:	4628      	mov	r0, r5
 8013d22:	f7fe f885 	bl	8011e30 <_fflush_r>
 8013d26:	b988      	cbnz	r0, 8013d4c <__swbuf_r+0x90>
 8013d28:	4638      	mov	r0, r7
 8013d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d2c:	4b0a      	ldr	r3, [pc, #40]	; (8013d58 <__swbuf_r+0x9c>)
 8013d2e:	429c      	cmp	r4, r3
 8013d30:	d101      	bne.n	8013d36 <__swbuf_r+0x7a>
 8013d32:	68ac      	ldr	r4, [r5, #8]
 8013d34:	e7cf      	b.n	8013cd6 <__swbuf_r+0x1a>
 8013d36:	4b09      	ldr	r3, [pc, #36]	; (8013d5c <__swbuf_r+0xa0>)
 8013d38:	429c      	cmp	r4, r3
 8013d3a:	bf08      	it	eq
 8013d3c:	68ec      	ldreq	r4, [r5, #12]
 8013d3e:	e7ca      	b.n	8013cd6 <__swbuf_r+0x1a>
 8013d40:	4621      	mov	r1, r4
 8013d42:	4628      	mov	r0, r5
 8013d44:	f000 f81e 	bl	8013d84 <__swsetup_r>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	d0cb      	beq.n	8013ce4 <__swbuf_r+0x28>
 8013d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8013d50:	e7ea      	b.n	8013d28 <__swbuf_r+0x6c>
 8013d52:	bf00      	nop
 8013d54:	08018648 	.word	0x08018648
 8013d58:	08018668 	.word	0x08018668
 8013d5c:	08018628 	.word	0x08018628

08013d60 <_write_r>:
 8013d60:	b538      	push	{r3, r4, r5, lr}
 8013d62:	4d07      	ldr	r5, [pc, #28]	; (8013d80 <_write_r+0x20>)
 8013d64:	4604      	mov	r4, r0
 8013d66:	4608      	mov	r0, r1
 8013d68:	4611      	mov	r1, r2
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	602a      	str	r2, [r5, #0]
 8013d6e:	461a      	mov	r2, r3
 8013d70:	f7ed f82e 	bl	8000dd0 <_write>
 8013d74:	1c43      	adds	r3, r0, #1
 8013d76:	d102      	bne.n	8013d7e <_write_r+0x1e>
 8013d78:	682b      	ldr	r3, [r5, #0]
 8013d7a:	b103      	cbz	r3, 8013d7e <_write_r+0x1e>
 8013d7c:	6023      	str	r3, [r4, #0]
 8013d7e:	bd38      	pop	{r3, r4, r5, pc}
 8013d80:	20000c24 	.word	0x20000c24

08013d84 <__swsetup_r>:
 8013d84:	4b32      	ldr	r3, [pc, #200]	; (8013e50 <__swsetup_r+0xcc>)
 8013d86:	b570      	push	{r4, r5, r6, lr}
 8013d88:	681d      	ldr	r5, [r3, #0]
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	460c      	mov	r4, r1
 8013d8e:	b125      	cbz	r5, 8013d9a <__swsetup_r+0x16>
 8013d90:	69ab      	ldr	r3, [r5, #24]
 8013d92:	b913      	cbnz	r3, 8013d9a <__swsetup_r+0x16>
 8013d94:	4628      	mov	r0, r5
 8013d96:	f7fe f8f1 	bl	8011f7c <__sinit>
 8013d9a:	4b2e      	ldr	r3, [pc, #184]	; (8013e54 <__swsetup_r+0xd0>)
 8013d9c:	429c      	cmp	r4, r3
 8013d9e:	d10f      	bne.n	8013dc0 <__swsetup_r+0x3c>
 8013da0:	686c      	ldr	r4, [r5, #4]
 8013da2:	89a3      	ldrh	r3, [r4, #12]
 8013da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013da8:	0719      	lsls	r1, r3, #28
 8013daa:	d42c      	bmi.n	8013e06 <__swsetup_r+0x82>
 8013dac:	06dd      	lsls	r5, r3, #27
 8013dae:	d411      	bmi.n	8013dd4 <__swsetup_r+0x50>
 8013db0:	2309      	movs	r3, #9
 8013db2:	6033      	str	r3, [r6, #0]
 8013db4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013db8:	81a3      	strh	r3, [r4, #12]
 8013dba:	f04f 30ff 	mov.w	r0, #4294967295
 8013dbe:	e03e      	b.n	8013e3e <__swsetup_r+0xba>
 8013dc0:	4b25      	ldr	r3, [pc, #148]	; (8013e58 <__swsetup_r+0xd4>)
 8013dc2:	429c      	cmp	r4, r3
 8013dc4:	d101      	bne.n	8013dca <__swsetup_r+0x46>
 8013dc6:	68ac      	ldr	r4, [r5, #8]
 8013dc8:	e7eb      	b.n	8013da2 <__swsetup_r+0x1e>
 8013dca:	4b24      	ldr	r3, [pc, #144]	; (8013e5c <__swsetup_r+0xd8>)
 8013dcc:	429c      	cmp	r4, r3
 8013dce:	bf08      	it	eq
 8013dd0:	68ec      	ldreq	r4, [r5, #12]
 8013dd2:	e7e6      	b.n	8013da2 <__swsetup_r+0x1e>
 8013dd4:	0758      	lsls	r0, r3, #29
 8013dd6:	d512      	bpl.n	8013dfe <__swsetup_r+0x7a>
 8013dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013dda:	b141      	cbz	r1, 8013dee <__swsetup_r+0x6a>
 8013ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013de0:	4299      	cmp	r1, r3
 8013de2:	d002      	beq.n	8013dea <__swsetup_r+0x66>
 8013de4:	4630      	mov	r0, r6
 8013de6:	f7fe fd19 	bl	801281c <_free_r>
 8013dea:	2300      	movs	r3, #0
 8013dec:	6363      	str	r3, [r4, #52]	; 0x34
 8013dee:	89a3      	ldrh	r3, [r4, #12]
 8013df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013df4:	81a3      	strh	r3, [r4, #12]
 8013df6:	2300      	movs	r3, #0
 8013df8:	6063      	str	r3, [r4, #4]
 8013dfa:	6923      	ldr	r3, [r4, #16]
 8013dfc:	6023      	str	r3, [r4, #0]
 8013dfe:	89a3      	ldrh	r3, [r4, #12]
 8013e00:	f043 0308 	orr.w	r3, r3, #8
 8013e04:	81a3      	strh	r3, [r4, #12]
 8013e06:	6923      	ldr	r3, [r4, #16]
 8013e08:	b94b      	cbnz	r3, 8013e1e <__swsetup_r+0x9a>
 8013e0a:	89a3      	ldrh	r3, [r4, #12]
 8013e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e14:	d003      	beq.n	8013e1e <__swsetup_r+0x9a>
 8013e16:	4621      	mov	r1, r4
 8013e18:	4630      	mov	r0, r6
 8013e1a:	f7fe fc89 	bl	8012730 <__smakebuf_r>
 8013e1e:	89a0      	ldrh	r0, [r4, #12]
 8013e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e24:	f010 0301 	ands.w	r3, r0, #1
 8013e28:	d00a      	beq.n	8013e40 <__swsetup_r+0xbc>
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	60a3      	str	r3, [r4, #8]
 8013e2e:	6963      	ldr	r3, [r4, #20]
 8013e30:	425b      	negs	r3, r3
 8013e32:	61a3      	str	r3, [r4, #24]
 8013e34:	6923      	ldr	r3, [r4, #16]
 8013e36:	b943      	cbnz	r3, 8013e4a <__swsetup_r+0xc6>
 8013e38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013e3c:	d1ba      	bne.n	8013db4 <__swsetup_r+0x30>
 8013e3e:	bd70      	pop	{r4, r5, r6, pc}
 8013e40:	0781      	lsls	r1, r0, #30
 8013e42:	bf58      	it	pl
 8013e44:	6963      	ldrpl	r3, [r4, #20]
 8013e46:	60a3      	str	r3, [r4, #8]
 8013e48:	e7f4      	b.n	8013e34 <__swsetup_r+0xb0>
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	e7f7      	b.n	8013e3e <__swsetup_r+0xba>
 8013e4e:	bf00      	nop
 8013e50:	20000100 	.word	0x20000100
 8013e54:	08018648 	.word	0x08018648
 8013e58:	08018668 	.word	0x08018668
 8013e5c:	08018628 	.word	0x08018628

08013e60 <__register_exitproc>:
 8013e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e64:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8013f20 <__register_exitproc+0xc0>
 8013e68:	4606      	mov	r6, r0
 8013e6a:	f8d8 0000 	ldr.w	r0, [r8]
 8013e6e:	461f      	mov	r7, r3
 8013e70:	460d      	mov	r5, r1
 8013e72:	4691      	mov	r9, r2
 8013e74:	f7fe fc35 	bl	80126e2 <__retarget_lock_acquire_recursive>
 8013e78:	4b25      	ldr	r3, [pc, #148]	; (8013f10 <__register_exitproc+0xb0>)
 8013e7a:	681c      	ldr	r4, [r3, #0]
 8013e7c:	b934      	cbnz	r4, 8013e8c <__register_exitproc+0x2c>
 8013e7e:	4c25      	ldr	r4, [pc, #148]	; (8013f14 <__register_exitproc+0xb4>)
 8013e80:	601c      	str	r4, [r3, #0]
 8013e82:	4b25      	ldr	r3, [pc, #148]	; (8013f18 <__register_exitproc+0xb8>)
 8013e84:	b113      	cbz	r3, 8013e8c <__register_exitproc+0x2c>
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8013e8c:	6863      	ldr	r3, [r4, #4]
 8013e8e:	2b1f      	cmp	r3, #31
 8013e90:	dd07      	ble.n	8013ea2 <__register_exitproc+0x42>
 8013e92:	f8d8 0000 	ldr.w	r0, [r8]
 8013e96:	f7fe fc26 	bl	80126e6 <__retarget_lock_release_recursive>
 8013e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8013e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ea2:	b34e      	cbz	r6, 8013ef8 <__register_exitproc+0x98>
 8013ea4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013ea8:	b988      	cbnz	r0, 8013ece <__register_exitproc+0x6e>
 8013eaa:	4b1c      	ldr	r3, [pc, #112]	; (8013f1c <__register_exitproc+0xbc>)
 8013eac:	b923      	cbnz	r3, 8013eb8 <__register_exitproc+0x58>
 8013eae:	f8d8 0000 	ldr.w	r0, [r8]
 8013eb2:	f7fe fc17 	bl	80126e4 <__retarget_lock_release>
 8013eb6:	e7f0      	b.n	8013e9a <__register_exitproc+0x3a>
 8013eb8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8013ebc:	f7fe fc78 	bl	80127b0 <malloc>
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	d0f4      	beq.n	8013eae <__register_exitproc+0x4e>
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8013eca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8013ece:	6863      	ldr	r3, [r4, #4]
 8013ed0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	409a      	lsls	r2, r3
 8013ed8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8013edc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8013ee0:	4313      	orrs	r3, r2
 8013ee2:	2e02      	cmp	r6, #2
 8013ee4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8013ee8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8013eec:	bf02      	ittt	eq
 8013eee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8013ef2:	431a      	orreq	r2, r3
 8013ef4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8013ef8:	6863      	ldr	r3, [r4, #4]
 8013efa:	f8d8 0000 	ldr.w	r0, [r8]
 8013efe:	1c5a      	adds	r2, r3, #1
 8013f00:	3302      	adds	r3, #2
 8013f02:	6062      	str	r2, [r4, #4]
 8013f04:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8013f08:	f7fe fbed 	bl	80126e6 <__retarget_lock_release_recursive>
 8013f0c:	2000      	movs	r0, #0
 8013f0e:	e7c6      	b.n	8013e9e <__register_exitproc+0x3e>
 8013f10:	20000c10 	.word	0x20000c10
 8013f14:	20000b84 	.word	0x20000b84
 8013f18:	00000000 	.word	0x00000000
 8013f1c:	080127b1 	.word	0x080127b1
 8013f20:	2000016c 	.word	0x2000016c

08013f24 <abs>:
 8013f24:	2800      	cmp	r0, #0
 8013f26:	bfb8      	it	lt
 8013f28:	4240      	neglt	r0, r0
 8013f2a:	4770      	bx	lr

08013f2c <__assert_func>:
 8013f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f2e:	4614      	mov	r4, r2
 8013f30:	461a      	mov	r2, r3
 8013f32:	4b09      	ldr	r3, [pc, #36]	; (8013f58 <__assert_func+0x2c>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	4605      	mov	r5, r0
 8013f38:	68d8      	ldr	r0, [r3, #12]
 8013f3a:	b14c      	cbz	r4, 8013f50 <__assert_func+0x24>
 8013f3c:	4b07      	ldr	r3, [pc, #28]	; (8013f5c <__assert_func+0x30>)
 8013f3e:	9100      	str	r1, [sp, #0]
 8013f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f44:	4906      	ldr	r1, [pc, #24]	; (8013f60 <__assert_func+0x34>)
 8013f46:	462b      	mov	r3, r5
 8013f48:	f000 f854 	bl	8013ff4 <fiprintf>
 8013f4c:	f7fd fe5a 	bl	8011c04 <abort>
 8013f50:	4b04      	ldr	r3, [pc, #16]	; (8013f64 <__assert_func+0x38>)
 8013f52:	461c      	mov	r4, r3
 8013f54:	e7f3      	b.n	8013f3e <__assert_func+0x12>
 8013f56:	bf00      	nop
 8013f58:	20000100 	.word	0x20000100
 8013f5c:	08018a80 	.word	0x08018a80
 8013f60:	08018a8d 	.word	0x08018a8d
 8013f64:	08018abb 	.word	0x08018abb

08013f68 <_close_r>:
 8013f68:	b538      	push	{r3, r4, r5, lr}
 8013f6a:	4d06      	ldr	r5, [pc, #24]	; (8013f84 <_close_r+0x1c>)
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	4604      	mov	r4, r0
 8013f70:	4608      	mov	r0, r1
 8013f72:	602b      	str	r3, [r5, #0]
 8013f74:	f7ec ff48 	bl	8000e08 <_close>
 8013f78:	1c43      	adds	r3, r0, #1
 8013f7a:	d102      	bne.n	8013f82 <_close_r+0x1a>
 8013f7c:	682b      	ldr	r3, [r5, #0]
 8013f7e:	b103      	cbz	r3, 8013f82 <_close_r+0x1a>
 8013f80:	6023      	str	r3, [r4, #0]
 8013f82:	bd38      	pop	{r3, r4, r5, pc}
 8013f84:	20000c24 	.word	0x20000c24

08013f88 <__sflags>:
 8013f88:	780b      	ldrb	r3, [r1, #0]
 8013f8a:	2b72      	cmp	r3, #114	; 0x72
 8013f8c:	b530      	push	{r4, r5, lr}
 8013f8e:	d022      	beq.n	8013fd6 <__sflags+0x4e>
 8013f90:	2b77      	cmp	r3, #119	; 0x77
 8013f92:	d024      	beq.n	8013fde <__sflags+0x56>
 8013f94:	2b61      	cmp	r3, #97	; 0x61
 8013f96:	d027      	beq.n	8013fe8 <__sflags+0x60>
 8013f98:	2316      	movs	r3, #22
 8013f9a:	6003      	str	r3, [r0, #0]
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	bd30      	pop	{r4, r5, pc}
 8013fa0:	2d62      	cmp	r5, #98	; 0x62
 8013fa2:	d012      	beq.n	8013fca <__sflags+0x42>
 8013fa4:	2d78      	cmp	r5, #120	; 0x78
 8013fa6:	d013      	beq.n	8013fd0 <__sflags+0x48>
 8013fa8:	2d2b      	cmp	r5, #43	; 0x2b
 8013faa:	d107      	bne.n	8013fbc <__sflags+0x34>
 8013fac:	f020 001c 	bic.w	r0, r0, #28
 8013fb0:	f023 0303 	bic.w	r3, r3, #3
 8013fb4:	f040 0010 	orr.w	r0, r0, #16
 8013fb8:	f043 0302 	orr.w	r3, r3, #2
 8013fbc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013fc0:	2d00      	cmp	r5, #0
 8013fc2:	d1ed      	bne.n	8013fa0 <__sflags+0x18>
 8013fc4:	4323      	orrs	r3, r4
 8013fc6:	6013      	str	r3, [r2, #0]
 8013fc8:	e7e9      	b.n	8013f9e <__sflags+0x16>
 8013fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013fce:	e7f5      	b.n	8013fbc <__sflags+0x34>
 8013fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013fd4:	e7f2      	b.n	8013fbc <__sflags+0x34>
 8013fd6:	2400      	movs	r4, #0
 8013fd8:	4623      	mov	r3, r4
 8013fda:	2004      	movs	r0, #4
 8013fdc:	e7ee      	b.n	8013fbc <__sflags+0x34>
 8013fde:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	2008      	movs	r0, #8
 8013fe6:	e7e9      	b.n	8013fbc <__sflags+0x34>
 8013fe8:	f44f 7402 	mov.w	r4, #520	; 0x208
 8013fec:	2301      	movs	r3, #1
 8013fee:	f44f 7084 	mov.w	r0, #264	; 0x108
 8013ff2:	e7e3      	b.n	8013fbc <__sflags+0x34>

08013ff4 <fiprintf>:
 8013ff4:	b40e      	push	{r1, r2, r3}
 8013ff6:	b503      	push	{r0, r1, lr}
 8013ff8:	4601      	mov	r1, r0
 8013ffa:	ab03      	add	r3, sp, #12
 8013ffc:	4805      	ldr	r0, [pc, #20]	; (8014014 <fiprintf+0x20>)
 8013ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014002:	6800      	ldr	r0, [r0, #0]
 8014004:	9301      	str	r3, [sp, #4]
 8014006:	f000 fb11 	bl	801462c <_vfiprintf_r>
 801400a:	b002      	add	sp, #8
 801400c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014010:	b003      	add	sp, #12
 8014012:	4770      	bx	lr
 8014014:	20000100 	.word	0x20000100

08014018 <_fstat_r>:
 8014018:	b538      	push	{r3, r4, r5, lr}
 801401a:	4d07      	ldr	r5, [pc, #28]	; (8014038 <_fstat_r+0x20>)
 801401c:	2300      	movs	r3, #0
 801401e:	4604      	mov	r4, r0
 8014020:	4608      	mov	r0, r1
 8014022:	4611      	mov	r1, r2
 8014024:	602b      	str	r3, [r5, #0]
 8014026:	f7ec fefb 	bl	8000e20 <_fstat>
 801402a:	1c43      	adds	r3, r0, #1
 801402c:	d102      	bne.n	8014034 <_fstat_r+0x1c>
 801402e:	682b      	ldr	r3, [r5, #0]
 8014030:	b103      	cbz	r3, 8014034 <_fstat_r+0x1c>
 8014032:	6023      	str	r3, [r4, #0]
 8014034:	bd38      	pop	{r3, r4, r5, pc}
 8014036:	bf00      	nop
 8014038:	20000c24 	.word	0x20000c24

0801403c <_findenv_r>:
 801403c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014040:	4607      	mov	r7, r0
 8014042:	4689      	mov	r9, r1
 8014044:	4616      	mov	r6, r2
 8014046:	f000 fe97 	bl	8014d78 <__env_lock>
 801404a:	4b18      	ldr	r3, [pc, #96]	; (80140ac <_findenv_r+0x70>)
 801404c:	681c      	ldr	r4, [r3, #0]
 801404e:	469a      	mov	sl, r3
 8014050:	b134      	cbz	r4, 8014060 <_findenv_r+0x24>
 8014052:	464b      	mov	r3, r9
 8014054:	4698      	mov	r8, r3
 8014056:	f813 1b01 	ldrb.w	r1, [r3], #1
 801405a:	b139      	cbz	r1, 801406c <_findenv_r+0x30>
 801405c:	293d      	cmp	r1, #61	; 0x3d
 801405e:	d1f9      	bne.n	8014054 <_findenv_r+0x18>
 8014060:	4638      	mov	r0, r7
 8014062:	f000 fe8f 	bl	8014d84 <__env_unlock>
 8014066:	2000      	movs	r0, #0
 8014068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801406c:	eba8 0809 	sub.w	r8, r8, r9
 8014070:	46a3      	mov	fp, r4
 8014072:	f854 0b04 	ldr.w	r0, [r4], #4
 8014076:	2800      	cmp	r0, #0
 8014078:	d0f2      	beq.n	8014060 <_findenv_r+0x24>
 801407a:	4642      	mov	r2, r8
 801407c:	4649      	mov	r1, r9
 801407e:	f000 fe5b 	bl	8014d38 <strncmp>
 8014082:	2800      	cmp	r0, #0
 8014084:	d1f4      	bne.n	8014070 <_findenv_r+0x34>
 8014086:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801408a:	eb03 0508 	add.w	r5, r3, r8
 801408e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014092:	2b3d      	cmp	r3, #61	; 0x3d
 8014094:	d1ec      	bne.n	8014070 <_findenv_r+0x34>
 8014096:	f8da 3000 	ldr.w	r3, [sl]
 801409a:	ebab 0303 	sub.w	r3, fp, r3
 801409e:	109b      	asrs	r3, r3, #2
 80140a0:	4638      	mov	r0, r7
 80140a2:	6033      	str	r3, [r6, #0]
 80140a4:	f000 fe6e 	bl	8014d84 <__env_unlock>
 80140a8:	1c68      	adds	r0, r5, #1
 80140aa:	e7dd      	b.n	8014068 <_findenv_r+0x2c>
 80140ac:	20000000 	.word	0x20000000

080140b0 <_getenv_r>:
 80140b0:	b507      	push	{r0, r1, r2, lr}
 80140b2:	aa01      	add	r2, sp, #4
 80140b4:	f7ff ffc2 	bl	801403c <_findenv_r>
 80140b8:	b003      	add	sp, #12
 80140ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080140c0 <_gettimeofday_r>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4d07      	ldr	r5, [pc, #28]	; (80140e0 <_gettimeofday_r+0x20>)
 80140c4:	2300      	movs	r3, #0
 80140c6:	4604      	mov	r4, r0
 80140c8:	4608      	mov	r0, r1
 80140ca:	4611      	mov	r1, r2
 80140cc:	602b      	str	r3, [r5, #0]
 80140ce:	f001 fa99 	bl	8015604 <_gettimeofday>
 80140d2:	1c43      	adds	r3, r0, #1
 80140d4:	d102      	bne.n	80140dc <_gettimeofday_r+0x1c>
 80140d6:	682b      	ldr	r3, [r5, #0]
 80140d8:	b103      	cbz	r3, 80140dc <_gettimeofday_r+0x1c>
 80140da:	6023      	str	r3, [r4, #0]
 80140dc:	bd38      	pop	{r3, r4, r5, pc}
 80140de:	bf00      	nop
 80140e0:	20000c24 	.word	0x20000c24

080140e4 <__gettzinfo>:
 80140e4:	4800      	ldr	r0, [pc, #0]	; (80140e8 <__gettzinfo+0x4>)
 80140e6:	4770      	bx	lr
 80140e8:	20000170 	.word	0x20000170

080140ec <gmtime_r>:
 80140ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140f0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80140f4:	460c      	mov	r4, r1
 80140f6:	4a51      	ldr	r2, [pc, #324]	; (801423c <gmtime_r+0x150>)
 80140f8:	2300      	movs	r3, #0
 80140fa:	4630      	mov	r0, r6
 80140fc:	4639      	mov	r1, r7
 80140fe:	f7ec fb59 	bl	80007b4 <__aeabi_ldivmod>
 8014102:	4639      	mov	r1, r7
 8014104:	4605      	mov	r5, r0
 8014106:	4a4d      	ldr	r2, [pc, #308]	; (801423c <gmtime_r+0x150>)
 8014108:	4630      	mov	r0, r6
 801410a:	2300      	movs	r3, #0
 801410c:	f7ec fb52 	bl	80007b4 <__aeabi_ldivmod>
 8014110:	2a00      	cmp	r2, #0
 8014112:	bfbc      	itt	lt
 8014114:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8014118:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801411c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014120:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8014124:	fbb2 f3f1 	udiv	r3, r2, r1
 8014128:	fb01 2213 	mls	r2, r1, r3, r2
 801412c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8014130:	bfac      	ite	ge
 8014132:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8014136:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801413a:	60a3      	str	r3, [r4, #8]
 801413c:	fbb2 f3f1 	udiv	r3, r2, r1
 8014140:	fb01 2213 	mls	r2, r1, r3, r2
 8014144:	6063      	str	r3, [r4, #4]
 8014146:	6022      	str	r2, [r4, #0]
 8014148:	1cc3      	adds	r3, r0, #3
 801414a:	2207      	movs	r2, #7
 801414c:	fb93 f2f2 	sdiv	r2, r3, r2
 8014150:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8014154:	1a9b      	subs	r3, r3, r2
 8014156:	bf48      	it	mi
 8014158:	3307      	addmi	r3, #7
 801415a:	2800      	cmp	r0, #0
 801415c:	61a3      	str	r3, [r4, #24]
 801415e:	bfb8      	it	lt
 8014160:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8014164:	4936      	ldr	r1, [pc, #216]	; (8014240 <gmtime_r+0x154>)
 8014166:	bfae      	itee	ge
 8014168:	fb90 f1f1 	sdivge	r1, r0, r1
 801416c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8014170:	fb93 f1f1 	sdivlt	r1, r3, r1
 8014174:	4b33      	ldr	r3, [pc, #204]	; (8014244 <gmtime_r+0x158>)
 8014176:	fb03 0001 	mla	r0, r3, r1, r0
 801417a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801417e:	fbb0 f2f2 	udiv	r2, r0, r2
 8014182:	4402      	add	r2, r0
 8014184:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8014188:	fbb0 f3fc 	udiv	r3, r0, ip
 801418c:	1ad2      	subs	r2, r2, r3
 801418e:	f240 176d 	movw	r7, #365	; 0x16d
 8014192:	4b2d      	ldr	r3, [pc, #180]	; (8014248 <gmtime_r+0x15c>)
 8014194:	fbb0 f3f3 	udiv	r3, r0, r3
 8014198:	2664      	movs	r6, #100	; 0x64
 801419a:	1ad3      	subs	r3, r2, r3
 801419c:	fbb3 f5f7 	udiv	r5, r3, r7
 80141a0:	fbb3 f3fc 	udiv	r3, r3, ip
 80141a4:	fbb5 f2f6 	udiv	r2, r5, r6
 80141a8:	1ad3      	subs	r3, r2, r3
 80141aa:	4403      	add	r3, r0
 80141ac:	fb07 3315 	mls	r3, r7, r5, r3
 80141b0:	2099      	movs	r0, #153	; 0x99
 80141b2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80141b6:	f10c 0c02 	add.w	ip, ip, #2
 80141ba:	f103 0e01 	add.w	lr, r3, #1
 80141be:	fbbc f7f0 	udiv	r7, ip, r0
 80141c2:	4378      	muls	r0, r7
 80141c4:	3002      	adds	r0, #2
 80141c6:	f04f 0805 	mov.w	r8, #5
 80141ca:	fbb0 f0f8 	udiv	r0, r0, r8
 80141ce:	ebae 0000 	sub.w	r0, lr, r0
 80141d2:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80141d6:	45f4      	cmp	ip, lr
 80141d8:	bf94      	ite	ls
 80141da:	f04f 0c02 	movls.w	ip, #2
 80141de:	f06f 0c09 	mvnhi.w	ip, #9
 80141e2:	4467      	add	r7, ip
 80141e4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80141e8:	fb0c 5101 	mla	r1, ip, r1, r5
 80141ec:	2f01      	cmp	r7, #1
 80141ee:	bf98      	it	ls
 80141f0:	3101      	addls	r1, #1
 80141f2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80141f6:	d30c      	bcc.n	8014212 <gmtime_r+0x126>
 80141f8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80141fc:	61e3      	str	r3, [r4, #28]
 80141fe:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8014202:	2300      	movs	r3, #0
 8014204:	60e0      	str	r0, [r4, #12]
 8014206:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801420a:	6223      	str	r3, [r4, #32]
 801420c:	4620      	mov	r0, r4
 801420e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014212:	f015 0f03 	tst.w	r5, #3
 8014216:	d102      	bne.n	801421e <gmtime_r+0x132>
 8014218:	fb06 5212 	mls	r2, r6, r2, r5
 801421c:	b95a      	cbnz	r2, 8014236 <gmtime_r+0x14a>
 801421e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8014222:	fbb5 f2f6 	udiv	r2, r5, r6
 8014226:	fb06 5212 	mls	r2, r6, r2, r5
 801422a:	fab2 f282 	clz	r2, r2
 801422e:	0952      	lsrs	r2, r2, #5
 8014230:	333b      	adds	r3, #59	; 0x3b
 8014232:	4413      	add	r3, r2
 8014234:	e7e2      	b.n	80141fc <gmtime_r+0x110>
 8014236:	2201      	movs	r2, #1
 8014238:	e7fa      	b.n	8014230 <gmtime_r+0x144>
 801423a:	bf00      	nop
 801423c:	00015180 	.word	0x00015180
 8014240:	00023ab1 	.word	0x00023ab1
 8014244:	fffdc54f 	.word	0xfffdc54f
 8014248:	00023ab0 	.word	0x00023ab0

0801424c <_isatty_r>:
 801424c:	b538      	push	{r3, r4, r5, lr}
 801424e:	4d06      	ldr	r5, [pc, #24]	; (8014268 <_isatty_r+0x1c>)
 8014250:	2300      	movs	r3, #0
 8014252:	4604      	mov	r4, r0
 8014254:	4608      	mov	r0, r1
 8014256:	602b      	str	r3, [r5, #0]
 8014258:	f7ec fdf2 	bl	8000e40 <_isatty>
 801425c:	1c43      	adds	r3, r0, #1
 801425e:	d102      	bne.n	8014266 <_isatty_r+0x1a>
 8014260:	682b      	ldr	r3, [r5, #0]
 8014262:	b103      	cbz	r3, 8014266 <_isatty_r+0x1a>
 8014264:	6023      	str	r3, [r4, #0]
 8014266:	bd38      	pop	{r3, r4, r5, pc}
 8014268:	20000c24 	.word	0x20000c24

0801426c <labs>:
 801426c:	2800      	cmp	r0, #0
 801426e:	bfb8      	it	lt
 8014270:	4240      	neglt	r0, r0
 8014272:	4770      	bx	lr

08014274 <_lseek_r>:
 8014274:	b538      	push	{r3, r4, r5, lr}
 8014276:	4d07      	ldr	r5, [pc, #28]	; (8014294 <_lseek_r+0x20>)
 8014278:	4604      	mov	r4, r0
 801427a:	4608      	mov	r0, r1
 801427c:	4611      	mov	r1, r2
 801427e:	2200      	movs	r2, #0
 8014280:	602a      	str	r2, [r5, #0]
 8014282:	461a      	mov	r2, r3
 8014284:	f7ec fde7 	bl	8000e56 <_lseek>
 8014288:	1c43      	adds	r3, r0, #1
 801428a:	d102      	bne.n	8014292 <_lseek_r+0x1e>
 801428c:	682b      	ldr	r3, [r5, #0]
 801428e:	b103      	cbz	r3, 8014292 <_lseek_r+0x1e>
 8014290:	6023      	str	r3, [r4, #0]
 8014292:	bd38      	pop	{r3, r4, r5, pc}
 8014294:	20000c24 	.word	0x20000c24

08014298 <__ascii_mbtowc>:
 8014298:	b082      	sub	sp, #8
 801429a:	b901      	cbnz	r1, 801429e <__ascii_mbtowc+0x6>
 801429c:	a901      	add	r1, sp, #4
 801429e:	b142      	cbz	r2, 80142b2 <__ascii_mbtowc+0x1a>
 80142a0:	b14b      	cbz	r3, 80142b6 <__ascii_mbtowc+0x1e>
 80142a2:	7813      	ldrb	r3, [r2, #0]
 80142a4:	600b      	str	r3, [r1, #0]
 80142a6:	7812      	ldrb	r2, [r2, #0]
 80142a8:	1e10      	subs	r0, r2, #0
 80142aa:	bf18      	it	ne
 80142ac:	2001      	movne	r0, #1
 80142ae:	b002      	add	sp, #8
 80142b0:	4770      	bx	lr
 80142b2:	4610      	mov	r0, r2
 80142b4:	e7fb      	b.n	80142ae <__ascii_mbtowc+0x16>
 80142b6:	f06f 0001 	mvn.w	r0, #1
 80142ba:	e7f8      	b.n	80142ae <__ascii_mbtowc+0x16>

080142bc <__malloc_lock>:
 80142bc:	4801      	ldr	r0, [pc, #4]	; (80142c4 <__malloc_lock+0x8>)
 80142be:	f7fe ba10 	b.w	80126e2 <__retarget_lock_acquire_recursive>
 80142c2:	bf00      	nop
 80142c4:	20000c1c 	.word	0x20000c1c

080142c8 <__malloc_unlock>:
 80142c8:	4801      	ldr	r0, [pc, #4]	; (80142d0 <__malloc_unlock+0x8>)
 80142ca:	f7fe ba0c 	b.w	80126e6 <__retarget_lock_release_recursive>
 80142ce:	bf00      	nop
 80142d0:	20000c1c 	.word	0x20000c1c

080142d4 <_realloc_r>:
 80142d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142d6:	4607      	mov	r7, r0
 80142d8:	4614      	mov	r4, r2
 80142da:	460e      	mov	r6, r1
 80142dc:	b921      	cbnz	r1, 80142e8 <_realloc_r+0x14>
 80142de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80142e2:	4611      	mov	r1, r2
 80142e4:	f7fe baea 	b.w	80128bc <_malloc_r>
 80142e8:	b922      	cbnz	r2, 80142f4 <_realloc_r+0x20>
 80142ea:	f7fe fa97 	bl	801281c <_free_r>
 80142ee:	4625      	mov	r5, r4
 80142f0:	4628      	mov	r0, r5
 80142f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142f4:	f000 fd66 	bl	8014dc4 <_malloc_usable_size_r>
 80142f8:	42a0      	cmp	r0, r4
 80142fa:	d20f      	bcs.n	801431c <_realloc_r+0x48>
 80142fc:	4621      	mov	r1, r4
 80142fe:	4638      	mov	r0, r7
 8014300:	f7fe fadc 	bl	80128bc <_malloc_r>
 8014304:	4605      	mov	r5, r0
 8014306:	2800      	cmp	r0, #0
 8014308:	d0f2      	beq.n	80142f0 <_realloc_r+0x1c>
 801430a:	4631      	mov	r1, r6
 801430c:	4622      	mov	r2, r4
 801430e:	f7fe fa5f 	bl	80127d0 <memcpy>
 8014312:	4631      	mov	r1, r6
 8014314:	4638      	mov	r0, r7
 8014316:	f7fe fa81 	bl	801281c <_free_r>
 801431a:	e7e9      	b.n	80142f0 <_realloc_r+0x1c>
 801431c:	4635      	mov	r5, r6
 801431e:	e7e7      	b.n	80142f0 <_realloc_r+0x1c>

08014320 <__ssputs_r>:
 8014320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014324:	688e      	ldr	r6, [r1, #8]
 8014326:	429e      	cmp	r6, r3
 8014328:	4682      	mov	sl, r0
 801432a:	460c      	mov	r4, r1
 801432c:	4690      	mov	r8, r2
 801432e:	461f      	mov	r7, r3
 8014330:	d838      	bhi.n	80143a4 <__ssputs_r+0x84>
 8014332:	898a      	ldrh	r2, [r1, #12]
 8014334:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014338:	d032      	beq.n	80143a0 <__ssputs_r+0x80>
 801433a:	6825      	ldr	r5, [r4, #0]
 801433c:	6909      	ldr	r1, [r1, #16]
 801433e:	eba5 0901 	sub.w	r9, r5, r1
 8014342:	6965      	ldr	r5, [r4, #20]
 8014344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801434c:	3301      	adds	r3, #1
 801434e:	444b      	add	r3, r9
 8014350:	106d      	asrs	r5, r5, #1
 8014352:	429d      	cmp	r5, r3
 8014354:	bf38      	it	cc
 8014356:	461d      	movcc	r5, r3
 8014358:	0553      	lsls	r3, r2, #21
 801435a:	d531      	bpl.n	80143c0 <__ssputs_r+0xa0>
 801435c:	4629      	mov	r1, r5
 801435e:	f7fe faad 	bl	80128bc <_malloc_r>
 8014362:	4606      	mov	r6, r0
 8014364:	b950      	cbnz	r0, 801437c <__ssputs_r+0x5c>
 8014366:	230c      	movs	r3, #12
 8014368:	f8ca 3000 	str.w	r3, [sl]
 801436c:	89a3      	ldrh	r3, [r4, #12]
 801436e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014372:	81a3      	strh	r3, [r4, #12]
 8014374:	f04f 30ff 	mov.w	r0, #4294967295
 8014378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801437c:	6921      	ldr	r1, [r4, #16]
 801437e:	464a      	mov	r2, r9
 8014380:	f7fe fa26 	bl	80127d0 <memcpy>
 8014384:	89a3      	ldrh	r3, [r4, #12]
 8014386:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801438a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801438e:	81a3      	strh	r3, [r4, #12]
 8014390:	6126      	str	r6, [r4, #16]
 8014392:	6165      	str	r5, [r4, #20]
 8014394:	444e      	add	r6, r9
 8014396:	eba5 0509 	sub.w	r5, r5, r9
 801439a:	6026      	str	r6, [r4, #0]
 801439c:	60a5      	str	r5, [r4, #8]
 801439e:	463e      	mov	r6, r7
 80143a0:	42be      	cmp	r6, r7
 80143a2:	d900      	bls.n	80143a6 <__ssputs_r+0x86>
 80143a4:	463e      	mov	r6, r7
 80143a6:	4632      	mov	r2, r6
 80143a8:	6820      	ldr	r0, [r4, #0]
 80143aa:	4641      	mov	r1, r8
 80143ac:	f000 fcf0 	bl	8014d90 <memmove>
 80143b0:	68a3      	ldr	r3, [r4, #8]
 80143b2:	6822      	ldr	r2, [r4, #0]
 80143b4:	1b9b      	subs	r3, r3, r6
 80143b6:	4432      	add	r2, r6
 80143b8:	60a3      	str	r3, [r4, #8]
 80143ba:	6022      	str	r2, [r4, #0]
 80143bc:	2000      	movs	r0, #0
 80143be:	e7db      	b.n	8014378 <__ssputs_r+0x58>
 80143c0:	462a      	mov	r2, r5
 80143c2:	f7ff ff87 	bl	80142d4 <_realloc_r>
 80143c6:	4606      	mov	r6, r0
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d1e1      	bne.n	8014390 <__ssputs_r+0x70>
 80143cc:	6921      	ldr	r1, [r4, #16]
 80143ce:	4650      	mov	r0, sl
 80143d0:	f7fe fa24 	bl	801281c <_free_r>
 80143d4:	e7c7      	b.n	8014366 <__ssputs_r+0x46>
	...

080143d8 <_svfiprintf_r>:
 80143d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143dc:	4698      	mov	r8, r3
 80143de:	898b      	ldrh	r3, [r1, #12]
 80143e0:	061b      	lsls	r3, r3, #24
 80143e2:	b09d      	sub	sp, #116	; 0x74
 80143e4:	4607      	mov	r7, r0
 80143e6:	460d      	mov	r5, r1
 80143e8:	4614      	mov	r4, r2
 80143ea:	d50e      	bpl.n	801440a <_svfiprintf_r+0x32>
 80143ec:	690b      	ldr	r3, [r1, #16]
 80143ee:	b963      	cbnz	r3, 801440a <_svfiprintf_r+0x32>
 80143f0:	2140      	movs	r1, #64	; 0x40
 80143f2:	f7fe fa63 	bl	80128bc <_malloc_r>
 80143f6:	6028      	str	r0, [r5, #0]
 80143f8:	6128      	str	r0, [r5, #16]
 80143fa:	b920      	cbnz	r0, 8014406 <_svfiprintf_r+0x2e>
 80143fc:	230c      	movs	r3, #12
 80143fe:	603b      	str	r3, [r7, #0]
 8014400:	f04f 30ff 	mov.w	r0, #4294967295
 8014404:	e0d1      	b.n	80145aa <_svfiprintf_r+0x1d2>
 8014406:	2340      	movs	r3, #64	; 0x40
 8014408:	616b      	str	r3, [r5, #20]
 801440a:	2300      	movs	r3, #0
 801440c:	9309      	str	r3, [sp, #36]	; 0x24
 801440e:	2320      	movs	r3, #32
 8014410:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014414:	f8cd 800c 	str.w	r8, [sp, #12]
 8014418:	2330      	movs	r3, #48	; 0x30
 801441a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80145c4 <_svfiprintf_r+0x1ec>
 801441e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014422:	f04f 0901 	mov.w	r9, #1
 8014426:	4623      	mov	r3, r4
 8014428:	469a      	mov	sl, r3
 801442a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801442e:	b10a      	cbz	r2, 8014434 <_svfiprintf_r+0x5c>
 8014430:	2a25      	cmp	r2, #37	; 0x25
 8014432:	d1f9      	bne.n	8014428 <_svfiprintf_r+0x50>
 8014434:	ebba 0b04 	subs.w	fp, sl, r4
 8014438:	d00b      	beq.n	8014452 <_svfiprintf_r+0x7a>
 801443a:	465b      	mov	r3, fp
 801443c:	4622      	mov	r2, r4
 801443e:	4629      	mov	r1, r5
 8014440:	4638      	mov	r0, r7
 8014442:	f7ff ff6d 	bl	8014320 <__ssputs_r>
 8014446:	3001      	adds	r0, #1
 8014448:	f000 80aa 	beq.w	80145a0 <_svfiprintf_r+0x1c8>
 801444c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801444e:	445a      	add	r2, fp
 8014450:	9209      	str	r2, [sp, #36]	; 0x24
 8014452:	f89a 3000 	ldrb.w	r3, [sl]
 8014456:	2b00      	cmp	r3, #0
 8014458:	f000 80a2 	beq.w	80145a0 <_svfiprintf_r+0x1c8>
 801445c:	2300      	movs	r3, #0
 801445e:	f04f 32ff 	mov.w	r2, #4294967295
 8014462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014466:	f10a 0a01 	add.w	sl, sl, #1
 801446a:	9304      	str	r3, [sp, #16]
 801446c:	9307      	str	r3, [sp, #28]
 801446e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014472:	931a      	str	r3, [sp, #104]	; 0x68
 8014474:	4654      	mov	r4, sl
 8014476:	2205      	movs	r2, #5
 8014478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801447c:	4851      	ldr	r0, [pc, #324]	; (80145c4 <_svfiprintf_r+0x1ec>)
 801447e:	f7eb feef 	bl	8000260 <memchr>
 8014482:	9a04      	ldr	r2, [sp, #16]
 8014484:	b9d8      	cbnz	r0, 80144be <_svfiprintf_r+0xe6>
 8014486:	06d0      	lsls	r0, r2, #27
 8014488:	bf44      	itt	mi
 801448a:	2320      	movmi	r3, #32
 801448c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014490:	0711      	lsls	r1, r2, #28
 8014492:	bf44      	itt	mi
 8014494:	232b      	movmi	r3, #43	; 0x2b
 8014496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801449a:	f89a 3000 	ldrb.w	r3, [sl]
 801449e:	2b2a      	cmp	r3, #42	; 0x2a
 80144a0:	d015      	beq.n	80144ce <_svfiprintf_r+0xf6>
 80144a2:	9a07      	ldr	r2, [sp, #28]
 80144a4:	4654      	mov	r4, sl
 80144a6:	2000      	movs	r0, #0
 80144a8:	f04f 0c0a 	mov.w	ip, #10
 80144ac:	4621      	mov	r1, r4
 80144ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144b2:	3b30      	subs	r3, #48	; 0x30
 80144b4:	2b09      	cmp	r3, #9
 80144b6:	d94e      	bls.n	8014556 <_svfiprintf_r+0x17e>
 80144b8:	b1b0      	cbz	r0, 80144e8 <_svfiprintf_r+0x110>
 80144ba:	9207      	str	r2, [sp, #28]
 80144bc:	e014      	b.n	80144e8 <_svfiprintf_r+0x110>
 80144be:	eba0 0308 	sub.w	r3, r0, r8
 80144c2:	fa09 f303 	lsl.w	r3, r9, r3
 80144c6:	4313      	orrs	r3, r2
 80144c8:	9304      	str	r3, [sp, #16]
 80144ca:	46a2      	mov	sl, r4
 80144cc:	e7d2      	b.n	8014474 <_svfiprintf_r+0x9c>
 80144ce:	9b03      	ldr	r3, [sp, #12]
 80144d0:	1d19      	adds	r1, r3, #4
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	9103      	str	r1, [sp, #12]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	bfbb      	ittet	lt
 80144da:	425b      	neglt	r3, r3
 80144dc:	f042 0202 	orrlt.w	r2, r2, #2
 80144e0:	9307      	strge	r3, [sp, #28]
 80144e2:	9307      	strlt	r3, [sp, #28]
 80144e4:	bfb8      	it	lt
 80144e6:	9204      	strlt	r2, [sp, #16]
 80144e8:	7823      	ldrb	r3, [r4, #0]
 80144ea:	2b2e      	cmp	r3, #46	; 0x2e
 80144ec:	d10c      	bne.n	8014508 <_svfiprintf_r+0x130>
 80144ee:	7863      	ldrb	r3, [r4, #1]
 80144f0:	2b2a      	cmp	r3, #42	; 0x2a
 80144f2:	d135      	bne.n	8014560 <_svfiprintf_r+0x188>
 80144f4:	9b03      	ldr	r3, [sp, #12]
 80144f6:	1d1a      	adds	r2, r3, #4
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	9203      	str	r2, [sp, #12]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	bfb8      	it	lt
 8014500:	f04f 33ff 	movlt.w	r3, #4294967295
 8014504:	3402      	adds	r4, #2
 8014506:	9305      	str	r3, [sp, #20]
 8014508:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80145d4 <_svfiprintf_r+0x1fc>
 801450c:	7821      	ldrb	r1, [r4, #0]
 801450e:	2203      	movs	r2, #3
 8014510:	4650      	mov	r0, sl
 8014512:	f7eb fea5 	bl	8000260 <memchr>
 8014516:	b140      	cbz	r0, 801452a <_svfiprintf_r+0x152>
 8014518:	2340      	movs	r3, #64	; 0x40
 801451a:	eba0 000a 	sub.w	r0, r0, sl
 801451e:	fa03 f000 	lsl.w	r0, r3, r0
 8014522:	9b04      	ldr	r3, [sp, #16]
 8014524:	4303      	orrs	r3, r0
 8014526:	3401      	adds	r4, #1
 8014528:	9304      	str	r3, [sp, #16]
 801452a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801452e:	4826      	ldr	r0, [pc, #152]	; (80145c8 <_svfiprintf_r+0x1f0>)
 8014530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014534:	2206      	movs	r2, #6
 8014536:	f7eb fe93 	bl	8000260 <memchr>
 801453a:	2800      	cmp	r0, #0
 801453c:	d038      	beq.n	80145b0 <_svfiprintf_r+0x1d8>
 801453e:	4b23      	ldr	r3, [pc, #140]	; (80145cc <_svfiprintf_r+0x1f4>)
 8014540:	bb1b      	cbnz	r3, 801458a <_svfiprintf_r+0x1b2>
 8014542:	9b03      	ldr	r3, [sp, #12]
 8014544:	3307      	adds	r3, #7
 8014546:	f023 0307 	bic.w	r3, r3, #7
 801454a:	3308      	adds	r3, #8
 801454c:	9303      	str	r3, [sp, #12]
 801454e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014550:	4433      	add	r3, r6
 8014552:	9309      	str	r3, [sp, #36]	; 0x24
 8014554:	e767      	b.n	8014426 <_svfiprintf_r+0x4e>
 8014556:	fb0c 3202 	mla	r2, ip, r2, r3
 801455a:	460c      	mov	r4, r1
 801455c:	2001      	movs	r0, #1
 801455e:	e7a5      	b.n	80144ac <_svfiprintf_r+0xd4>
 8014560:	2300      	movs	r3, #0
 8014562:	3401      	adds	r4, #1
 8014564:	9305      	str	r3, [sp, #20]
 8014566:	4619      	mov	r1, r3
 8014568:	f04f 0c0a 	mov.w	ip, #10
 801456c:	4620      	mov	r0, r4
 801456e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014572:	3a30      	subs	r2, #48	; 0x30
 8014574:	2a09      	cmp	r2, #9
 8014576:	d903      	bls.n	8014580 <_svfiprintf_r+0x1a8>
 8014578:	2b00      	cmp	r3, #0
 801457a:	d0c5      	beq.n	8014508 <_svfiprintf_r+0x130>
 801457c:	9105      	str	r1, [sp, #20]
 801457e:	e7c3      	b.n	8014508 <_svfiprintf_r+0x130>
 8014580:	fb0c 2101 	mla	r1, ip, r1, r2
 8014584:	4604      	mov	r4, r0
 8014586:	2301      	movs	r3, #1
 8014588:	e7f0      	b.n	801456c <_svfiprintf_r+0x194>
 801458a:	ab03      	add	r3, sp, #12
 801458c:	9300      	str	r3, [sp, #0]
 801458e:	462a      	mov	r2, r5
 8014590:	4b0f      	ldr	r3, [pc, #60]	; (80145d0 <_svfiprintf_r+0x1f8>)
 8014592:	a904      	add	r1, sp, #16
 8014594:	4638      	mov	r0, r7
 8014596:	f3af 8000 	nop.w
 801459a:	1c42      	adds	r2, r0, #1
 801459c:	4606      	mov	r6, r0
 801459e:	d1d6      	bne.n	801454e <_svfiprintf_r+0x176>
 80145a0:	89ab      	ldrh	r3, [r5, #12]
 80145a2:	065b      	lsls	r3, r3, #25
 80145a4:	f53f af2c 	bmi.w	8014400 <_svfiprintf_r+0x28>
 80145a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145aa:	b01d      	add	sp, #116	; 0x74
 80145ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145b0:	ab03      	add	r3, sp, #12
 80145b2:	9300      	str	r3, [sp, #0]
 80145b4:	462a      	mov	r2, r5
 80145b6:	4b06      	ldr	r3, [pc, #24]	; (80145d0 <_svfiprintf_r+0x1f8>)
 80145b8:	a904      	add	r1, sp, #16
 80145ba:	4638      	mov	r0, r7
 80145bc:	f000 f9d4 	bl	8014968 <_printf_i>
 80145c0:	e7eb      	b.n	801459a <_svfiprintf_r+0x1c2>
 80145c2:	bf00      	nop
 80145c4:	08018bc7 	.word	0x08018bc7
 80145c8:	08018bd1 	.word	0x08018bd1
 80145cc:	00000000 	.word	0x00000000
 80145d0:	08014321 	.word	0x08014321
 80145d4:	08018bcd 	.word	0x08018bcd

080145d8 <__sfputc_r>:
 80145d8:	6893      	ldr	r3, [r2, #8]
 80145da:	3b01      	subs	r3, #1
 80145dc:	2b00      	cmp	r3, #0
 80145de:	b410      	push	{r4}
 80145e0:	6093      	str	r3, [r2, #8]
 80145e2:	da08      	bge.n	80145f6 <__sfputc_r+0x1e>
 80145e4:	6994      	ldr	r4, [r2, #24]
 80145e6:	42a3      	cmp	r3, r4
 80145e8:	db01      	blt.n	80145ee <__sfputc_r+0x16>
 80145ea:	290a      	cmp	r1, #10
 80145ec:	d103      	bne.n	80145f6 <__sfputc_r+0x1e>
 80145ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145f2:	f7ff bb63 	b.w	8013cbc <__swbuf_r>
 80145f6:	6813      	ldr	r3, [r2, #0]
 80145f8:	1c58      	adds	r0, r3, #1
 80145fa:	6010      	str	r0, [r2, #0]
 80145fc:	7019      	strb	r1, [r3, #0]
 80145fe:	4608      	mov	r0, r1
 8014600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014604:	4770      	bx	lr

08014606 <__sfputs_r>:
 8014606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014608:	4606      	mov	r6, r0
 801460a:	460f      	mov	r7, r1
 801460c:	4614      	mov	r4, r2
 801460e:	18d5      	adds	r5, r2, r3
 8014610:	42ac      	cmp	r4, r5
 8014612:	d101      	bne.n	8014618 <__sfputs_r+0x12>
 8014614:	2000      	movs	r0, #0
 8014616:	e007      	b.n	8014628 <__sfputs_r+0x22>
 8014618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801461c:	463a      	mov	r2, r7
 801461e:	4630      	mov	r0, r6
 8014620:	f7ff ffda 	bl	80145d8 <__sfputc_r>
 8014624:	1c43      	adds	r3, r0, #1
 8014626:	d1f3      	bne.n	8014610 <__sfputs_r+0xa>
 8014628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801462c <_vfiprintf_r>:
 801462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014630:	460d      	mov	r5, r1
 8014632:	b09d      	sub	sp, #116	; 0x74
 8014634:	4614      	mov	r4, r2
 8014636:	4698      	mov	r8, r3
 8014638:	4606      	mov	r6, r0
 801463a:	b118      	cbz	r0, 8014644 <_vfiprintf_r+0x18>
 801463c:	6983      	ldr	r3, [r0, #24]
 801463e:	b90b      	cbnz	r3, 8014644 <_vfiprintf_r+0x18>
 8014640:	f7fd fc9c 	bl	8011f7c <__sinit>
 8014644:	4b89      	ldr	r3, [pc, #548]	; (801486c <_vfiprintf_r+0x240>)
 8014646:	429d      	cmp	r5, r3
 8014648:	d11b      	bne.n	8014682 <_vfiprintf_r+0x56>
 801464a:	6875      	ldr	r5, [r6, #4]
 801464c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801464e:	07d9      	lsls	r1, r3, #31
 8014650:	d405      	bmi.n	801465e <_vfiprintf_r+0x32>
 8014652:	89ab      	ldrh	r3, [r5, #12]
 8014654:	059a      	lsls	r2, r3, #22
 8014656:	d402      	bmi.n	801465e <_vfiprintf_r+0x32>
 8014658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801465a:	f7fe f842 	bl	80126e2 <__retarget_lock_acquire_recursive>
 801465e:	89ab      	ldrh	r3, [r5, #12]
 8014660:	071b      	lsls	r3, r3, #28
 8014662:	d501      	bpl.n	8014668 <_vfiprintf_r+0x3c>
 8014664:	692b      	ldr	r3, [r5, #16]
 8014666:	b9eb      	cbnz	r3, 80146a4 <_vfiprintf_r+0x78>
 8014668:	4629      	mov	r1, r5
 801466a:	4630      	mov	r0, r6
 801466c:	f7ff fb8a 	bl	8013d84 <__swsetup_r>
 8014670:	b1c0      	cbz	r0, 80146a4 <_vfiprintf_r+0x78>
 8014672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014674:	07dc      	lsls	r4, r3, #31
 8014676:	d50e      	bpl.n	8014696 <_vfiprintf_r+0x6a>
 8014678:	f04f 30ff 	mov.w	r0, #4294967295
 801467c:	b01d      	add	sp, #116	; 0x74
 801467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014682:	4b7b      	ldr	r3, [pc, #492]	; (8014870 <_vfiprintf_r+0x244>)
 8014684:	429d      	cmp	r5, r3
 8014686:	d101      	bne.n	801468c <_vfiprintf_r+0x60>
 8014688:	68b5      	ldr	r5, [r6, #8]
 801468a:	e7df      	b.n	801464c <_vfiprintf_r+0x20>
 801468c:	4b79      	ldr	r3, [pc, #484]	; (8014874 <_vfiprintf_r+0x248>)
 801468e:	429d      	cmp	r5, r3
 8014690:	bf08      	it	eq
 8014692:	68f5      	ldreq	r5, [r6, #12]
 8014694:	e7da      	b.n	801464c <_vfiprintf_r+0x20>
 8014696:	89ab      	ldrh	r3, [r5, #12]
 8014698:	0598      	lsls	r0, r3, #22
 801469a:	d4ed      	bmi.n	8014678 <_vfiprintf_r+0x4c>
 801469c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801469e:	f7fe f822 	bl	80126e6 <__retarget_lock_release_recursive>
 80146a2:	e7e9      	b.n	8014678 <_vfiprintf_r+0x4c>
 80146a4:	2300      	movs	r3, #0
 80146a6:	9309      	str	r3, [sp, #36]	; 0x24
 80146a8:	2320      	movs	r3, #32
 80146aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80146b2:	2330      	movs	r3, #48	; 0x30
 80146b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014878 <_vfiprintf_r+0x24c>
 80146b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146bc:	f04f 0901 	mov.w	r9, #1
 80146c0:	4623      	mov	r3, r4
 80146c2:	469a      	mov	sl, r3
 80146c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146c8:	b10a      	cbz	r2, 80146ce <_vfiprintf_r+0xa2>
 80146ca:	2a25      	cmp	r2, #37	; 0x25
 80146cc:	d1f9      	bne.n	80146c2 <_vfiprintf_r+0x96>
 80146ce:	ebba 0b04 	subs.w	fp, sl, r4
 80146d2:	d00b      	beq.n	80146ec <_vfiprintf_r+0xc0>
 80146d4:	465b      	mov	r3, fp
 80146d6:	4622      	mov	r2, r4
 80146d8:	4629      	mov	r1, r5
 80146da:	4630      	mov	r0, r6
 80146dc:	f7ff ff93 	bl	8014606 <__sfputs_r>
 80146e0:	3001      	adds	r0, #1
 80146e2:	f000 80aa 	beq.w	801483a <_vfiprintf_r+0x20e>
 80146e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146e8:	445a      	add	r2, fp
 80146ea:	9209      	str	r2, [sp, #36]	; 0x24
 80146ec:	f89a 3000 	ldrb.w	r3, [sl]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	f000 80a2 	beq.w	801483a <_vfiprintf_r+0x20e>
 80146f6:	2300      	movs	r3, #0
 80146f8:	f04f 32ff 	mov.w	r2, #4294967295
 80146fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014700:	f10a 0a01 	add.w	sl, sl, #1
 8014704:	9304      	str	r3, [sp, #16]
 8014706:	9307      	str	r3, [sp, #28]
 8014708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801470c:	931a      	str	r3, [sp, #104]	; 0x68
 801470e:	4654      	mov	r4, sl
 8014710:	2205      	movs	r2, #5
 8014712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014716:	4858      	ldr	r0, [pc, #352]	; (8014878 <_vfiprintf_r+0x24c>)
 8014718:	f7eb fda2 	bl	8000260 <memchr>
 801471c:	9a04      	ldr	r2, [sp, #16]
 801471e:	b9d8      	cbnz	r0, 8014758 <_vfiprintf_r+0x12c>
 8014720:	06d1      	lsls	r1, r2, #27
 8014722:	bf44      	itt	mi
 8014724:	2320      	movmi	r3, #32
 8014726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801472a:	0713      	lsls	r3, r2, #28
 801472c:	bf44      	itt	mi
 801472e:	232b      	movmi	r3, #43	; 0x2b
 8014730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014734:	f89a 3000 	ldrb.w	r3, [sl]
 8014738:	2b2a      	cmp	r3, #42	; 0x2a
 801473a:	d015      	beq.n	8014768 <_vfiprintf_r+0x13c>
 801473c:	9a07      	ldr	r2, [sp, #28]
 801473e:	4654      	mov	r4, sl
 8014740:	2000      	movs	r0, #0
 8014742:	f04f 0c0a 	mov.w	ip, #10
 8014746:	4621      	mov	r1, r4
 8014748:	f811 3b01 	ldrb.w	r3, [r1], #1
 801474c:	3b30      	subs	r3, #48	; 0x30
 801474e:	2b09      	cmp	r3, #9
 8014750:	d94e      	bls.n	80147f0 <_vfiprintf_r+0x1c4>
 8014752:	b1b0      	cbz	r0, 8014782 <_vfiprintf_r+0x156>
 8014754:	9207      	str	r2, [sp, #28]
 8014756:	e014      	b.n	8014782 <_vfiprintf_r+0x156>
 8014758:	eba0 0308 	sub.w	r3, r0, r8
 801475c:	fa09 f303 	lsl.w	r3, r9, r3
 8014760:	4313      	orrs	r3, r2
 8014762:	9304      	str	r3, [sp, #16]
 8014764:	46a2      	mov	sl, r4
 8014766:	e7d2      	b.n	801470e <_vfiprintf_r+0xe2>
 8014768:	9b03      	ldr	r3, [sp, #12]
 801476a:	1d19      	adds	r1, r3, #4
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	9103      	str	r1, [sp, #12]
 8014770:	2b00      	cmp	r3, #0
 8014772:	bfbb      	ittet	lt
 8014774:	425b      	neglt	r3, r3
 8014776:	f042 0202 	orrlt.w	r2, r2, #2
 801477a:	9307      	strge	r3, [sp, #28]
 801477c:	9307      	strlt	r3, [sp, #28]
 801477e:	bfb8      	it	lt
 8014780:	9204      	strlt	r2, [sp, #16]
 8014782:	7823      	ldrb	r3, [r4, #0]
 8014784:	2b2e      	cmp	r3, #46	; 0x2e
 8014786:	d10c      	bne.n	80147a2 <_vfiprintf_r+0x176>
 8014788:	7863      	ldrb	r3, [r4, #1]
 801478a:	2b2a      	cmp	r3, #42	; 0x2a
 801478c:	d135      	bne.n	80147fa <_vfiprintf_r+0x1ce>
 801478e:	9b03      	ldr	r3, [sp, #12]
 8014790:	1d1a      	adds	r2, r3, #4
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	9203      	str	r2, [sp, #12]
 8014796:	2b00      	cmp	r3, #0
 8014798:	bfb8      	it	lt
 801479a:	f04f 33ff 	movlt.w	r3, #4294967295
 801479e:	3402      	adds	r4, #2
 80147a0:	9305      	str	r3, [sp, #20]
 80147a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014888 <_vfiprintf_r+0x25c>
 80147a6:	7821      	ldrb	r1, [r4, #0]
 80147a8:	2203      	movs	r2, #3
 80147aa:	4650      	mov	r0, sl
 80147ac:	f7eb fd58 	bl	8000260 <memchr>
 80147b0:	b140      	cbz	r0, 80147c4 <_vfiprintf_r+0x198>
 80147b2:	2340      	movs	r3, #64	; 0x40
 80147b4:	eba0 000a 	sub.w	r0, r0, sl
 80147b8:	fa03 f000 	lsl.w	r0, r3, r0
 80147bc:	9b04      	ldr	r3, [sp, #16]
 80147be:	4303      	orrs	r3, r0
 80147c0:	3401      	adds	r4, #1
 80147c2:	9304      	str	r3, [sp, #16]
 80147c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147c8:	482c      	ldr	r0, [pc, #176]	; (801487c <_vfiprintf_r+0x250>)
 80147ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147ce:	2206      	movs	r2, #6
 80147d0:	f7eb fd46 	bl	8000260 <memchr>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	d03f      	beq.n	8014858 <_vfiprintf_r+0x22c>
 80147d8:	4b29      	ldr	r3, [pc, #164]	; (8014880 <_vfiprintf_r+0x254>)
 80147da:	bb1b      	cbnz	r3, 8014824 <_vfiprintf_r+0x1f8>
 80147dc:	9b03      	ldr	r3, [sp, #12]
 80147de:	3307      	adds	r3, #7
 80147e0:	f023 0307 	bic.w	r3, r3, #7
 80147e4:	3308      	adds	r3, #8
 80147e6:	9303      	str	r3, [sp, #12]
 80147e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147ea:	443b      	add	r3, r7
 80147ec:	9309      	str	r3, [sp, #36]	; 0x24
 80147ee:	e767      	b.n	80146c0 <_vfiprintf_r+0x94>
 80147f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80147f4:	460c      	mov	r4, r1
 80147f6:	2001      	movs	r0, #1
 80147f8:	e7a5      	b.n	8014746 <_vfiprintf_r+0x11a>
 80147fa:	2300      	movs	r3, #0
 80147fc:	3401      	adds	r4, #1
 80147fe:	9305      	str	r3, [sp, #20]
 8014800:	4619      	mov	r1, r3
 8014802:	f04f 0c0a 	mov.w	ip, #10
 8014806:	4620      	mov	r0, r4
 8014808:	f810 2b01 	ldrb.w	r2, [r0], #1
 801480c:	3a30      	subs	r2, #48	; 0x30
 801480e:	2a09      	cmp	r2, #9
 8014810:	d903      	bls.n	801481a <_vfiprintf_r+0x1ee>
 8014812:	2b00      	cmp	r3, #0
 8014814:	d0c5      	beq.n	80147a2 <_vfiprintf_r+0x176>
 8014816:	9105      	str	r1, [sp, #20]
 8014818:	e7c3      	b.n	80147a2 <_vfiprintf_r+0x176>
 801481a:	fb0c 2101 	mla	r1, ip, r1, r2
 801481e:	4604      	mov	r4, r0
 8014820:	2301      	movs	r3, #1
 8014822:	e7f0      	b.n	8014806 <_vfiprintf_r+0x1da>
 8014824:	ab03      	add	r3, sp, #12
 8014826:	9300      	str	r3, [sp, #0]
 8014828:	462a      	mov	r2, r5
 801482a:	4b16      	ldr	r3, [pc, #88]	; (8014884 <_vfiprintf_r+0x258>)
 801482c:	a904      	add	r1, sp, #16
 801482e:	4630      	mov	r0, r6
 8014830:	f3af 8000 	nop.w
 8014834:	4607      	mov	r7, r0
 8014836:	1c78      	adds	r0, r7, #1
 8014838:	d1d6      	bne.n	80147e8 <_vfiprintf_r+0x1bc>
 801483a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801483c:	07d9      	lsls	r1, r3, #31
 801483e:	d405      	bmi.n	801484c <_vfiprintf_r+0x220>
 8014840:	89ab      	ldrh	r3, [r5, #12]
 8014842:	059a      	lsls	r2, r3, #22
 8014844:	d402      	bmi.n	801484c <_vfiprintf_r+0x220>
 8014846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014848:	f7fd ff4d 	bl	80126e6 <__retarget_lock_release_recursive>
 801484c:	89ab      	ldrh	r3, [r5, #12]
 801484e:	065b      	lsls	r3, r3, #25
 8014850:	f53f af12 	bmi.w	8014678 <_vfiprintf_r+0x4c>
 8014854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014856:	e711      	b.n	801467c <_vfiprintf_r+0x50>
 8014858:	ab03      	add	r3, sp, #12
 801485a:	9300      	str	r3, [sp, #0]
 801485c:	462a      	mov	r2, r5
 801485e:	4b09      	ldr	r3, [pc, #36]	; (8014884 <_vfiprintf_r+0x258>)
 8014860:	a904      	add	r1, sp, #16
 8014862:	4630      	mov	r0, r6
 8014864:	f000 f880 	bl	8014968 <_printf_i>
 8014868:	e7e4      	b.n	8014834 <_vfiprintf_r+0x208>
 801486a:	bf00      	nop
 801486c:	08018648 	.word	0x08018648
 8014870:	08018668 	.word	0x08018668
 8014874:	08018628 	.word	0x08018628
 8014878:	08018bc7 	.word	0x08018bc7
 801487c:	08018bd1 	.word	0x08018bd1
 8014880:	00000000 	.word	0x00000000
 8014884:	08014607 	.word	0x08014607
 8014888:	08018bcd 	.word	0x08018bcd

0801488c <_printf_common>:
 801488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014890:	4616      	mov	r6, r2
 8014892:	4699      	mov	r9, r3
 8014894:	688a      	ldr	r2, [r1, #8]
 8014896:	690b      	ldr	r3, [r1, #16]
 8014898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801489c:	4293      	cmp	r3, r2
 801489e:	bfb8      	it	lt
 80148a0:	4613      	movlt	r3, r2
 80148a2:	6033      	str	r3, [r6, #0]
 80148a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80148a8:	4607      	mov	r7, r0
 80148aa:	460c      	mov	r4, r1
 80148ac:	b10a      	cbz	r2, 80148b2 <_printf_common+0x26>
 80148ae:	3301      	adds	r3, #1
 80148b0:	6033      	str	r3, [r6, #0]
 80148b2:	6823      	ldr	r3, [r4, #0]
 80148b4:	0699      	lsls	r1, r3, #26
 80148b6:	bf42      	ittt	mi
 80148b8:	6833      	ldrmi	r3, [r6, #0]
 80148ba:	3302      	addmi	r3, #2
 80148bc:	6033      	strmi	r3, [r6, #0]
 80148be:	6825      	ldr	r5, [r4, #0]
 80148c0:	f015 0506 	ands.w	r5, r5, #6
 80148c4:	d106      	bne.n	80148d4 <_printf_common+0x48>
 80148c6:	f104 0a19 	add.w	sl, r4, #25
 80148ca:	68e3      	ldr	r3, [r4, #12]
 80148cc:	6832      	ldr	r2, [r6, #0]
 80148ce:	1a9b      	subs	r3, r3, r2
 80148d0:	42ab      	cmp	r3, r5
 80148d2:	dc26      	bgt.n	8014922 <_printf_common+0x96>
 80148d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80148d8:	1e13      	subs	r3, r2, #0
 80148da:	6822      	ldr	r2, [r4, #0]
 80148dc:	bf18      	it	ne
 80148de:	2301      	movne	r3, #1
 80148e0:	0692      	lsls	r2, r2, #26
 80148e2:	d42b      	bmi.n	801493c <_printf_common+0xb0>
 80148e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148e8:	4649      	mov	r1, r9
 80148ea:	4638      	mov	r0, r7
 80148ec:	47c0      	blx	r8
 80148ee:	3001      	adds	r0, #1
 80148f0:	d01e      	beq.n	8014930 <_printf_common+0xa4>
 80148f2:	6823      	ldr	r3, [r4, #0]
 80148f4:	68e5      	ldr	r5, [r4, #12]
 80148f6:	6832      	ldr	r2, [r6, #0]
 80148f8:	f003 0306 	and.w	r3, r3, #6
 80148fc:	2b04      	cmp	r3, #4
 80148fe:	bf08      	it	eq
 8014900:	1aad      	subeq	r5, r5, r2
 8014902:	68a3      	ldr	r3, [r4, #8]
 8014904:	6922      	ldr	r2, [r4, #16]
 8014906:	bf0c      	ite	eq
 8014908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801490c:	2500      	movne	r5, #0
 801490e:	4293      	cmp	r3, r2
 8014910:	bfc4      	itt	gt
 8014912:	1a9b      	subgt	r3, r3, r2
 8014914:	18ed      	addgt	r5, r5, r3
 8014916:	2600      	movs	r6, #0
 8014918:	341a      	adds	r4, #26
 801491a:	42b5      	cmp	r5, r6
 801491c:	d11a      	bne.n	8014954 <_printf_common+0xc8>
 801491e:	2000      	movs	r0, #0
 8014920:	e008      	b.n	8014934 <_printf_common+0xa8>
 8014922:	2301      	movs	r3, #1
 8014924:	4652      	mov	r2, sl
 8014926:	4649      	mov	r1, r9
 8014928:	4638      	mov	r0, r7
 801492a:	47c0      	blx	r8
 801492c:	3001      	adds	r0, #1
 801492e:	d103      	bne.n	8014938 <_printf_common+0xac>
 8014930:	f04f 30ff 	mov.w	r0, #4294967295
 8014934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014938:	3501      	adds	r5, #1
 801493a:	e7c6      	b.n	80148ca <_printf_common+0x3e>
 801493c:	18e1      	adds	r1, r4, r3
 801493e:	1c5a      	adds	r2, r3, #1
 8014940:	2030      	movs	r0, #48	; 0x30
 8014942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014946:	4422      	add	r2, r4
 8014948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801494c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014950:	3302      	adds	r3, #2
 8014952:	e7c7      	b.n	80148e4 <_printf_common+0x58>
 8014954:	2301      	movs	r3, #1
 8014956:	4622      	mov	r2, r4
 8014958:	4649      	mov	r1, r9
 801495a:	4638      	mov	r0, r7
 801495c:	47c0      	blx	r8
 801495e:	3001      	adds	r0, #1
 8014960:	d0e6      	beq.n	8014930 <_printf_common+0xa4>
 8014962:	3601      	adds	r6, #1
 8014964:	e7d9      	b.n	801491a <_printf_common+0x8e>
	...

08014968 <_printf_i>:
 8014968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801496c:	460c      	mov	r4, r1
 801496e:	4691      	mov	r9, r2
 8014970:	7e27      	ldrb	r7, [r4, #24]
 8014972:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014974:	2f78      	cmp	r7, #120	; 0x78
 8014976:	4680      	mov	r8, r0
 8014978:	469a      	mov	sl, r3
 801497a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801497e:	d807      	bhi.n	8014990 <_printf_i+0x28>
 8014980:	2f62      	cmp	r7, #98	; 0x62
 8014982:	d80a      	bhi.n	801499a <_printf_i+0x32>
 8014984:	2f00      	cmp	r7, #0
 8014986:	f000 80d8 	beq.w	8014b3a <_printf_i+0x1d2>
 801498a:	2f58      	cmp	r7, #88	; 0x58
 801498c:	f000 80a3 	beq.w	8014ad6 <_printf_i+0x16e>
 8014990:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014998:	e03a      	b.n	8014a10 <_printf_i+0xa8>
 801499a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801499e:	2b15      	cmp	r3, #21
 80149a0:	d8f6      	bhi.n	8014990 <_printf_i+0x28>
 80149a2:	a001      	add	r0, pc, #4	; (adr r0, 80149a8 <_printf_i+0x40>)
 80149a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80149a8:	08014a01 	.word	0x08014a01
 80149ac:	08014a15 	.word	0x08014a15
 80149b0:	08014991 	.word	0x08014991
 80149b4:	08014991 	.word	0x08014991
 80149b8:	08014991 	.word	0x08014991
 80149bc:	08014991 	.word	0x08014991
 80149c0:	08014a15 	.word	0x08014a15
 80149c4:	08014991 	.word	0x08014991
 80149c8:	08014991 	.word	0x08014991
 80149cc:	08014991 	.word	0x08014991
 80149d0:	08014991 	.word	0x08014991
 80149d4:	08014b21 	.word	0x08014b21
 80149d8:	08014a45 	.word	0x08014a45
 80149dc:	08014b03 	.word	0x08014b03
 80149e0:	08014991 	.word	0x08014991
 80149e4:	08014991 	.word	0x08014991
 80149e8:	08014b43 	.word	0x08014b43
 80149ec:	08014991 	.word	0x08014991
 80149f0:	08014a45 	.word	0x08014a45
 80149f4:	08014991 	.word	0x08014991
 80149f8:	08014991 	.word	0x08014991
 80149fc:	08014b0b 	.word	0x08014b0b
 8014a00:	680b      	ldr	r3, [r1, #0]
 8014a02:	1d1a      	adds	r2, r3, #4
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	600a      	str	r2, [r1, #0]
 8014a08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a10:	2301      	movs	r3, #1
 8014a12:	e0a3      	b.n	8014b5c <_printf_i+0x1f4>
 8014a14:	6825      	ldr	r5, [r4, #0]
 8014a16:	6808      	ldr	r0, [r1, #0]
 8014a18:	062e      	lsls	r6, r5, #24
 8014a1a:	f100 0304 	add.w	r3, r0, #4
 8014a1e:	d50a      	bpl.n	8014a36 <_printf_i+0xce>
 8014a20:	6805      	ldr	r5, [r0, #0]
 8014a22:	600b      	str	r3, [r1, #0]
 8014a24:	2d00      	cmp	r5, #0
 8014a26:	da03      	bge.n	8014a30 <_printf_i+0xc8>
 8014a28:	232d      	movs	r3, #45	; 0x2d
 8014a2a:	426d      	negs	r5, r5
 8014a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a30:	485e      	ldr	r0, [pc, #376]	; (8014bac <_printf_i+0x244>)
 8014a32:	230a      	movs	r3, #10
 8014a34:	e019      	b.n	8014a6a <_printf_i+0x102>
 8014a36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014a3a:	6805      	ldr	r5, [r0, #0]
 8014a3c:	600b      	str	r3, [r1, #0]
 8014a3e:	bf18      	it	ne
 8014a40:	b22d      	sxthne	r5, r5
 8014a42:	e7ef      	b.n	8014a24 <_printf_i+0xbc>
 8014a44:	680b      	ldr	r3, [r1, #0]
 8014a46:	6825      	ldr	r5, [r4, #0]
 8014a48:	1d18      	adds	r0, r3, #4
 8014a4a:	6008      	str	r0, [r1, #0]
 8014a4c:	0628      	lsls	r0, r5, #24
 8014a4e:	d501      	bpl.n	8014a54 <_printf_i+0xec>
 8014a50:	681d      	ldr	r5, [r3, #0]
 8014a52:	e002      	b.n	8014a5a <_printf_i+0xf2>
 8014a54:	0669      	lsls	r1, r5, #25
 8014a56:	d5fb      	bpl.n	8014a50 <_printf_i+0xe8>
 8014a58:	881d      	ldrh	r5, [r3, #0]
 8014a5a:	4854      	ldr	r0, [pc, #336]	; (8014bac <_printf_i+0x244>)
 8014a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8014a5e:	bf0c      	ite	eq
 8014a60:	2308      	moveq	r3, #8
 8014a62:	230a      	movne	r3, #10
 8014a64:	2100      	movs	r1, #0
 8014a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a6a:	6866      	ldr	r6, [r4, #4]
 8014a6c:	60a6      	str	r6, [r4, #8]
 8014a6e:	2e00      	cmp	r6, #0
 8014a70:	bfa2      	ittt	ge
 8014a72:	6821      	ldrge	r1, [r4, #0]
 8014a74:	f021 0104 	bicge.w	r1, r1, #4
 8014a78:	6021      	strge	r1, [r4, #0]
 8014a7a:	b90d      	cbnz	r5, 8014a80 <_printf_i+0x118>
 8014a7c:	2e00      	cmp	r6, #0
 8014a7e:	d04d      	beq.n	8014b1c <_printf_i+0x1b4>
 8014a80:	4616      	mov	r6, r2
 8014a82:	fbb5 f1f3 	udiv	r1, r5, r3
 8014a86:	fb03 5711 	mls	r7, r3, r1, r5
 8014a8a:	5dc7      	ldrb	r7, [r0, r7]
 8014a8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014a90:	462f      	mov	r7, r5
 8014a92:	42bb      	cmp	r3, r7
 8014a94:	460d      	mov	r5, r1
 8014a96:	d9f4      	bls.n	8014a82 <_printf_i+0x11a>
 8014a98:	2b08      	cmp	r3, #8
 8014a9a:	d10b      	bne.n	8014ab4 <_printf_i+0x14c>
 8014a9c:	6823      	ldr	r3, [r4, #0]
 8014a9e:	07df      	lsls	r7, r3, #31
 8014aa0:	d508      	bpl.n	8014ab4 <_printf_i+0x14c>
 8014aa2:	6923      	ldr	r3, [r4, #16]
 8014aa4:	6861      	ldr	r1, [r4, #4]
 8014aa6:	4299      	cmp	r1, r3
 8014aa8:	bfde      	ittt	le
 8014aaa:	2330      	movle	r3, #48	; 0x30
 8014aac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014ab0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014ab4:	1b92      	subs	r2, r2, r6
 8014ab6:	6122      	str	r2, [r4, #16]
 8014ab8:	f8cd a000 	str.w	sl, [sp]
 8014abc:	464b      	mov	r3, r9
 8014abe:	aa03      	add	r2, sp, #12
 8014ac0:	4621      	mov	r1, r4
 8014ac2:	4640      	mov	r0, r8
 8014ac4:	f7ff fee2 	bl	801488c <_printf_common>
 8014ac8:	3001      	adds	r0, #1
 8014aca:	d14c      	bne.n	8014b66 <_printf_i+0x1fe>
 8014acc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ad0:	b004      	add	sp, #16
 8014ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ad6:	4835      	ldr	r0, [pc, #212]	; (8014bac <_printf_i+0x244>)
 8014ad8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014adc:	6823      	ldr	r3, [r4, #0]
 8014ade:	680e      	ldr	r6, [r1, #0]
 8014ae0:	061f      	lsls	r7, r3, #24
 8014ae2:	f856 5b04 	ldr.w	r5, [r6], #4
 8014ae6:	600e      	str	r6, [r1, #0]
 8014ae8:	d514      	bpl.n	8014b14 <_printf_i+0x1ac>
 8014aea:	07d9      	lsls	r1, r3, #31
 8014aec:	bf44      	itt	mi
 8014aee:	f043 0320 	orrmi.w	r3, r3, #32
 8014af2:	6023      	strmi	r3, [r4, #0]
 8014af4:	b91d      	cbnz	r5, 8014afe <_printf_i+0x196>
 8014af6:	6823      	ldr	r3, [r4, #0]
 8014af8:	f023 0320 	bic.w	r3, r3, #32
 8014afc:	6023      	str	r3, [r4, #0]
 8014afe:	2310      	movs	r3, #16
 8014b00:	e7b0      	b.n	8014a64 <_printf_i+0xfc>
 8014b02:	6823      	ldr	r3, [r4, #0]
 8014b04:	f043 0320 	orr.w	r3, r3, #32
 8014b08:	6023      	str	r3, [r4, #0]
 8014b0a:	2378      	movs	r3, #120	; 0x78
 8014b0c:	4828      	ldr	r0, [pc, #160]	; (8014bb0 <_printf_i+0x248>)
 8014b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014b12:	e7e3      	b.n	8014adc <_printf_i+0x174>
 8014b14:	065e      	lsls	r6, r3, #25
 8014b16:	bf48      	it	mi
 8014b18:	b2ad      	uxthmi	r5, r5
 8014b1a:	e7e6      	b.n	8014aea <_printf_i+0x182>
 8014b1c:	4616      	mov	r6, r2
 8014b1e:	e7bb      	b.n	8014a98 <_printf_i+0x130>
 8014b20:	680b      	ldr	r3, [r1, #0]
 8014b22:	6826      	ldr	r6, [r4, #0]
 8014b24:	6960      	ldr	r0, [r4, #20]
 8014b26:	1d1d      	adds	r5, r3, #4
 8014b28:	600d      	str	r5, [r1, #0]
 8014b2a:	0635      	lsls	r5, r6, #24
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	d501      	bpl.n	8014b34 <_printf_i+0x1cc>
 8014b30:	6018      	str	r0, [r3, #0]
 8014b32:	e002      	b.n	8014b3a <_printf_i+0x1d2>
 8014b34:	0671      	lsls	r1, r6, #25
 8014b36:	d5fb      	bpl.n	8014b30 <_printf_i+0x1c8>
 8014b38:	8018      	strh	r0, [r3, #0]
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	6123      	str	r3, [r4, #16]
 8014b3e:	4616      	mov	r6, r2
 8014b40:	e7ba      	b.n	8014ab8 <_printf_i+0x150>
 8014b42:	680b      	ldr	r3, [r1, #0]
 8014b44:	1d1a      	adds	r2, r3, #4
 8014b46:	600a      	str	r2, [r1, #0]
 8014b48:	681e      	ldr	r6, [r3, #0]
 8014b4a:	6862      	ldr	r2, [r4, #4]
 8014b4c:	2100      	movs	r1, #0
 8014b4e:	4630      	mov	r0, r6
 8014b50:	f7eb fb86 	bl	8000260 <memchr>
 8014b54:	b108      	cbz	r0, 8014b5a <_printf_i+0x1f2>
 8014b56:	1b80      	subs	r0, r0, r6
 8014b58:	6060      	str	r0, [r4, #4]
 8014b5a:	6863      	ldr	r3, [r4, #4]
 8014b5c:	6123      	str	r3, [r4, #16]
 8014b5e:	2300      	movs	r3, #0
 8014b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b64:	e7a8      	b.n	8014ab8 <_printf_i+0x150>
 8014b66:	6923      	ldr	r3, [r4, #16]
 8014b68:	4632      	mov	r2, r6
 8014b6a:	4649      	mov	r1, r9
 8014b6c:	4640      	mov	r0, r8
 8014b6e:	47d0      	blx	sl
 8014b70:	3001      	adds	r0, #1
 8014b72:	d0ab      	beq.n	8014acc <_printf_i+0x164>
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	079b      	lsls	r3, r3, #30
 8014b78:	d413      	bmi.n	8014ba2 <_printf_i+0x23a>
 8014b7a:	68e0      	ldr	r0, [r4, #12]
 8014b7c:	9b03      	ldr	r3, [sp, #12]
 8014b7e:	4298      	cmp	r0, r3
 8014b80:	bfb8      	it	lt
 8014b82:	4618      	movlt	r0, r3
 8014b84:	e7a4      	b.n	8014ad0 <_printf_i+0x168>
 8014b86:	2301      	movs	r3, #1
 8014b88:	4632      	mov	r2, r6
 8014b8a:	4649      	mov	r1, r9
 8014b8c:	4640      	mov	r0, r8
 8014b8e:	47d0      	blx	sl
 8014b90:	3001      	adds	r0, #1
 8014b92:	d09b      	beq.n	8014acc <_printf_i+0x164>
 8014b94:	3501      	adds	r5, #1
 8014b96:	68e3      	ldr	r3, [r4, #12]
 8014b98:	9903      	ldr	r1, [sp, #12]
 8014b9a:	1a5b      	subs	r3, r3, r1
 8014b9c:	42ab      	cmp	r3, r5
 8014b9e:	dcf2      	bgt.n	8014b86 <_printf_i+0x21e>
 8014ba0:	e7eb      	b.n	8014b7a <_printf_i+0x212>
 8014ba2:	2500      	movs	r5, #0
 8014ba4:	f104 0619 	add.w	r6, r4, #25
 8014ba8:	e7f5      	b.n	8014b96 <_printf_i+0x22e>
 8014baa:	bf00      	nop
 8014bac:	08018bd8 	.word	0x08018bd8
 8014bb0:	08018be9 	.word	0x08018be9

08014bb4 <_putc_r>:
 8014bb4:	b570      	push	{r4, r5, r6, lr}
 8014bb6:	460d      	mov	r5, r1
 8014bb8:	4614      	mov	r4, r2
 8014bba:	4606      	mov	r6, r0
 8014bbc:	b118      	cbz	r0, 8014bc6 <_putc_r+0x12>
 8014bbe:	6983      	ldr	r3, [r0, #24]
 8014bc0:	b90b      	cbnz	r3, 8014bc6 <_putc_r+0x12>
 8014bc2:	f7fd f9db 	bl	8011f7c <__sinit>
 8014bc6:	4b1c      	ldr	r3, [pc, #112]	; (8014c38 <_putc_r+0x84>)
 8014bc8:	429c      	cmp	r4, r3
 8014bca:	d124      	bne.n	8014c16 <_putc_r+0x62>
 8014bcc:	6874      	ldr	r4, [r6, #4]
 8014bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014bd0:	07d8      	lsls	r0, r3, #31
 8014bd2:	d405      	bmi.n	8014be0 <_putc_r+0x2c>
 8014bd4:	89a3      	ldrh	r3, [r4, #12]
 8014bd6:	0599      	lsls	r1, r3, #22
 8014bd8:	d402      	bmi.n	8014be0 <_putc_r+0x2c>
 8014bda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014bdc:	f7fd fd81 	bl	80126e2 <__retarget_lock_acquire_recursive>
 8014be0:	68a3      	ldr	r3, [r4, #8]
 8014be2:	3b01      	subs	r3, #1
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	60a3      	str	r3, [r4, #8]
 8014be8:	da05      	bge.n	8014bf6 <_putc_r+0x42>
 8014bea:	69a2      	ldr	r2, [r4, #24]
 8014bec:	4293      	cmp	r3, r2
 8014bee:	db1c      	blt.n	8014c2a <_putc_r+0x76>
 8014bf0:	b2eb      	uxtb	r3, r5
 8014bf2:	2b0a      	cmp	r3, #10
 8014bf4:	d019      	beq.n	8014c2a <_putc_r+0x76>
 8014bf6:	6823      	ldr	r3, [r4, #0]
 8014bf8:	1c5a      	adds	r2, r3, #1
 8014bfa:	6022      	str	r2, [r4, #0]
 8014bfc:	701d      	strb	r5, [r3, #0]
 8014bfe:	b2ed      	uxtb	r5, r5
 8014c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c02:	07da      	lsls	r2, r3, #31
 8014c04:	d405      	bmi.n	8014c12 <_putc_r+0x5e>
 8014c06:	89a3      	ldrh	r3, [r4, #12]
 8014c08:	059b      	lsls	r3, r3, #22
 8014c0a:	d402      	bmi.n	8014c12 <_putc_r+0x5e>
 8014c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c0e:	f7fd fd6a 	bl	80126e6 <__retarget_lock_release_recursive>
 8014c12:	4628      	mov	r0, r5
 8014c14:	bd70      	pop	{r4, r5, r6, pc}
 8014c16:	4b09      	ldr	r3, [pc, #36]	; (8014c3c <_putc_r+0x88>)
 8014c18:	429c      	cmp	r4, r3
 8014c1a:	d101      	bne.n	8014c20 <_putc_r+0x6c>
 8014c1c:	68b4      	ldr	r4, [r6, #8]
 8014c1e:	e7d6      	b.n	8014bce <_putc_r+0x1a>
 8014c20:	4b07      	ldr	r3, [pc, #28]	; (8014c40 <_putc_r+0x8c>)
 8014c22:	429c      	cmp	r4, r3
 8014c24:	bf08      	it	eq
 8014c26:	68f4      	ldreq	r4, [r6, #12]
 8014c28:	e7d1      	b.n	8014bce <_putc_r+0x1a>
 8014c2a:	4629      	mov	r1, r5
 8014c2c:	4622      	mov	r2, r4
 8014c2e:	4630      	mov	r0, r6
 8014c30:	f7ff f844 	bl	8013cbc <__swbuf_r>
 8014c34:	4605      	mov	r5, r0
 8014c36:	e7e3      	b.n	8014c00 <_putc_r+0x4c>
 8014c38:	08018648 	.word	0x08018648
 8014c3c:	08018668 	.word	0x08018668
 8014c40:	08018628 	.word	0x08018628

08014c44 <_read_r>:
 8014c44:	b538      	push	{r3, r4, r5, lr}
 8014c46:	4d07      	ldr	r5, [pc, #28]	; (8014c64 <_read_r+0x20>)
 8014c48:	4604      	mov	r4, r0
 8014c4a:	4608      	mov	r0, r1
 8014c4c:	4611      	mov	r1, r2
 8014c4e:	2200      	movs	r2, #0
 8014c50:	602a      	str	r2, [r5, #0]
 8014c52:	461a      	mov	r2, r3
 8014c54:	f7ec f89f 	bl	8000d96 <_read>
 8014c58:	1c43      	adds	r3, r0, #1
 8014c5a:	d102      	bne.n	8014c62 <_read_r+0x1e>
 8014c5c:	682b      	ldr	r3, [r5, #0]
 8014c5e:	b103      	cbz	r3, 8014c62 <_read_r+0x1e>
 8014c60:	6023      	str	r3, [r4, #0]
 8014c62:	bd38      	pop	{r3, r4, r5, pc}
 8014c64:	20000c24 	.word	0x20000c24

08014c68 <sniprintf>:
 8014c68:	b40c      	push	{r2, r3}
 8014c6a:	b530      	push	{r4, r5, lr}
 8014c6c:	4b17      	ldr	r3, [pc, #92]	; (8014ccc <sniprintf+0x64>)
 8014c6e:	1e0c      	subs	r4, r1, #0
 8014c70:	681d      	ldr	r5, [r3, #0]
 8014c72:	b09d      	sub	sp, #116	; 0x74
 8014c74:	da08      	bge.n	8014c88 <sniprintf+0x20>
 8014c76:	238b      	movs	r3, #139	; 0x8b
 8014c78:	602b      	str	r3, [r5, #0]
 8014c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c7e:	b01d      	add	sp, #116	; 0x74
 8014c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c84:	b002      	add	sp, #8
 8014c86:	4770      	bx	lr
 8014c88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014c8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014c90:	bf14      	ite	ne
 8014c92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014c96:	4623      	moveq	r3, r4
 8014c98:	9304      	str	r3, [sp, #16]
 8014c9a:	9307      	str	r3, [sp, #28]
 8014c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ca0:	9002      	str	r0, [sp, #8]
 8014ca2:	9006      	str	r0, [sp, #24]
 8014ca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ca8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014caa:	ab21      	add	r3, sp, #132	; 0x84
 8014cac:	a902      	add	r1, sp, #8
 8014cae:	4628      	mov	r0, r5
 8014cb0:	9301      	str	r3, [sp, #4]
 8014cb2:	f7ff fb91 	bl	80143d8 <_svfiprintf_r>
 8014cb6:	1c43      	adds	r3, r0, #1
 8014cb8:	bfbc      	itt	lt
 8014cba:	238b      	movlt	r3, #139	; 0x8b
 8014cbc:	602b      	strlt	r3, [r5, #0]
 8014cbe:	2c00      	cmp	r4, #0
 8014cc0:	d0dd      	beq.n	8014c7e <sniprintf+0x16>
 8014cc2:	9b02      	ldr	r3, [sp, #8]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	701a      	strb	r2, [r3, #0]
 8014cc8:	e7d9      	b.n	8014c7e <sniprintf+0x16>
 8014cca:	bf00      	nop
 8014ccc:	20000100 	.word	0x20000100

08014cd0 <siscanf>:
 8014cd0:	b40e      	push	{r1, r2, r3}
 8014cd2:	b510      	push	{r4, lr}
 8014cd4:	b09f      	sub	sp, #124	; 0x7c
 8014cd6:	ac21      	add	r4, sp, #132	; 0x84
 8014cd8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014cdc:	f854 2b04 	ldr.w	r2, [r4], #4
 8014ce0:	9201      	str	r2, [sp, #4]
 8014ce2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014ce6:	9004      	str	r0, [sp, #16]
 8014ce8:	9008      	str	r0, [sp, #32]
 8014cea:	f7eb faa7 	bl	800023c <strlen>
 8014cee:	4b0c      	ldr	r3, [pc, #48]	; (8014d20 <siscanf+0x50>)
 8014cf0:	9005      	str	r0, [sp, #20]
 8014cf2:	9009      	str	r0, [sp, #36]	; 0x24
 8014cf4:	930d      	str	r3, [sp, #52]	; 0x34
 8014cf6:	480b      	ldr	r0, [pc, #44]	; (8014d24 <siscanf+0x54>)
 8014cf8:	9a01      	ldr	r2, [sp, #4]
 8014cfa:	6800      	ldr	r0, [r0, #0]
 8014cfc:	9403      	str	r4, [sp, #12]
 8014cfe:	2300      	movs	r3, #0
 8014d00:	9311      	str	r3, [sp, #68]	; 0x44
 8014d02:	9316      	str	r3, [sp, #88]	; 0x58
 8014d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d08:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014d0c:	a904      	add	r1, sp, #16
 8014d0e:	4623      	mov	r3, r4
 8014d10:	f000 f8ba 	bl	8014e88 <__ssvfiscanf_r>
 8014d14:	b01f      	add	sp, #124	; 0x7c
 8014d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d1a:	b003      	add	sp, #12
 8014d1c:	4770      	bx	lr
 8014d1e:	bf00      	nop
 8014d20:	08012b77 	.word	0x08012b77
 8014d24:	20000100 	.word	0x20000100

08014d28 <strcpy>:
 8014d28:	4603      	mov	r3, r0
 8014d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d2e:	f803 2b01 	strb.w	r2, [r3], #1
 8014d32:	2a00      	cmp	r2, #0
 8014d34:	d1f9      	bne.n	8014d2a <strcpy+0x2>
 8014d36:	4770      	bx	lr

08014d38 <strncmp>:
 8014d38:	b510      	push	{r4, lr}
 8014d3a:	b16a      	cbz	r2, 8014d58 <strncmp+0x20>
 8014d3c:	3901      	subs	r1, #1
 8014d3e:	1884      	adds	r4, r0, r2
 8014d40:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014d44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d103      	bne.n	8014d54 <strncmp+0x1c>
 8014d4c:	42a0      	cmp	r0, r4
 8014d4e:	d001      	beq.n	8014d54 <strncmp+0x1c>
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d1f5      	bne.n	8014d40 <strncmp+0x8>
 8014d54:	1a98      	subs	r0, r3, r2
 8014d56:	bd10      	pop	{r4, pc}
 8014d58:	4610      	mov	r0, r2
 8014d5a:	e7fc      	b.n	8014d56 <strncmp+0x1e>

08014d5c <__ascii_wctomb>:
 8014d5c:	b149      	cbz	r1, 8014d72 <__ascii_wctomb+0x16>
 8014d5e:	2aff      	cmp	r2, #255	; 0xff
 8014d60:	bf85      	ittet	hi
 8014d62:	238a      	movhi	r3, #138	; 0x8a
 8014d64:	6003      	strhi	r3, [r0, #0]
 8014d66:	700a      	strbls	r2, [r1, #0]
 8014d68:	f04f 30ff 	movhi.w	r0, #4294967295
 8014d6c:	bf98      	it	ls
 8014d6e:	2001      	movls	r0, #1
 8014d70:	4770      	bx	lr
 8014d72:	4608      	mov	r0, r1
 8014d74:	4770      	bx	lr
	...

08014d78 <__env_lock>:
 8014d78:	4801      	ldr	r0, [pc, #4]	; (8014d80 <__env_lock+0x8>)
 8014d7a:	f7fd bcb2 	b.w	80126e2 <__retarget_lock_acquire_recursive>
 8014d7e:	bf00      	nop
 8014d80:	20000c1a 	.word	0x20000c1a

08014d84 <__env_unlock>:
 8014d84:	4801      	ldr	r0, [pc, #4]	; (8014d8c <__env_unlock+0x8>)
 8014d86:	f7fd bcae 	b.w	80126e6 <__retarget_lock_release_recursive>
 8014d8a:	bf00      	nop
 8014d8c:	20000c1a 	.word	0x20000c1a

08014d90 <memmove>:
 8014d90:	4288      	cmp	r0, r1
 8014d92:	b510      	push	{r4, lr}
 8014d94:	eb01 0402 	add.w	r4, r1, r2
 8014d98:	d902      	bls.n	8014da0 <memmove+0x10>
 8014d9a:	4284      	cmp	r4, r0
 8014d9c:	4623      	mov	r3, r4
 8014d9e:	d807      	bhi.n	8014db0 <memmove+0x20>
 8014da0:	1e43      	subs	r3, r0, #1
 8014da2:	42a1      	cmp	r1, r4
 8014da4:	d008      	beq.n	8014db8 <memmove+0x28>
 8014da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014dae:	e7f8      	b.n	8014da2 <memmove+0x12>
 8014db0:	4402      	add	r2, r0
 8014db2:	4601      	mov	r1, r0
 8014db4:	428a      	cmp	r2, r1
 8014db6:	d100      	bne.n	8014dba <memmove+0x2a>
 8014db8:	bd10      	pop	{r4, pc}
 8014dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014dc2:	e7f7      	b.n	8014db4 <memmove+0x24>

08014dc4 <_malloc_usable_size_r>:
 8014dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014dc8:	1f18      	subs	r0, r3, #4
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	bfbc      	itt	lt
 8014dce:	580b      	ldrlt	r3, [r1, r0]
 8014dd0:	18c0      	addlt	r0, r0, r3
 8014dd2:	4770      	bx	lr

08014dd4 <_sungetc_r>:
 8014dd4:	b538      	push	{r3, r4, r5, lr}
 8014dd6:	1c4b      	adds	r3, r1, #1
 8014dd8:	4614      	mov	r4, r2
 8014dda:	d103      	bne.n	8014de4 <_sungetc_r+0x10>
 8014ddc:	f04f 35ff 	mov.w	r5, #4294967295
 8014de0:	4628      	mov	r0, r5
 8014de2:	bd38      	pop	{r3, r4, r5, pc}
 8014de4:	8993      	ldrh	r3, [r2, #12]
 8014de6:	f023 0320 	bic.w	r3, r3, #32
 8014dea:	8193      	strh	r3, [r2, #12]
 8014dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014dee:	6852      	ldr	r2, [r2, #4]
 8014df0:	b2cd      	uxtb	r5, r1
 8014df2:	b18b      	cbz	r3, 8014e18 <_sungetc_r+0x44>
 8014df4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014df6:	4293      	cmp	r3, r2
 8014df8:	dd08      	ble.n	8014e0c <_sungetc_r+0x38>
 8014dfa:	6823      	ldr	r3, [r4, #0]
 8014dfc:	1e5a      	subs	r2, r3, #1
 8014dfe:	6022      	str	r2, [r4, #0]
 8014e00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014e04:	6863      	ldr	r3, [r4, #4]
 8014e06:	3301      	adds	r3, #1
 8014e08:	6063      	str	r3, [r4, #4]
 8014e0a:	e7e9      	b.n	8014de0 <_sungetc_r+0xc>
 8014e0c:	4621      	mov	r1, r4
 8014e0e:	f000 fbbf 	bl	8015590 <__submore>
 8014e12:	2800      	cmp	r0, #0
 8014e14:	d0f1      	beq.n	8014dfa <_sungetc_r+0x26>
 8014e16:	e7e1      	b.n	8014ddc <_sungetc_r+0x8>
 8014e18:	6921      	ldr	r1, [r4, #16]
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	b151      	cbz	r1, 8014e34 <_sungetc_r+0x60>
 8014e1e:	4299      	cmp	r1, r3
 8014e20:	d208      	bcs.n	8014e34 <_sungetc_r+0x60>
 8014e22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014e26:	42a9      	cmp	r1, r5
 8014e28:	d104      	bne.n	8014e34 <_sungetc_r+0x60>
 8014e2a:	3b01      	subs	r3, #1
 8014e2c:	3201      	adds	r2, #1
 8014e2e:	6023      	str	r3, [r4, #0]
 8014e30:	6062      	str	r2, [r4, #4]
 8014e32:	e7d5      	b.n	8014de0 <_sungetc_r+0xc>
 8014e34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e3c:	6363      	str	r3, [r4, #52]	; 0x34
 8014e3e:	2303      	movs	r3, #3
 8014e40:	63a3      	str	r3, [r4, #56]	; 0x38
 8014e42:	4623      	mov	r3, r4
 8014e44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014e48:	6023      	str	r3, [r4, #0]
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	e7dc      	b.n	8014e08 <_sungetc_r+0x34>

08014e4e <__ssrefill_r>:
 8014e4e:	b510      	push	{r4, lr}
 8014e50:	460c      	mov	r4, r1
 8014e52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014e54:	b169      	cbz	r1, 8014e72 <__ssrefill_r+0x24>
 8014e56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e5a:	4299      	cmp	r1, r3
 8014e5c:	d001      	beq.n	8014e62 <__ssrefill_r+0x14>
 8014e5e:	f7fd fcdd 	bl	801281c <_free_r>
 8014e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e64:	6063      	str	r3, [r4, #4]
 8014e66:	2000      	movs	r0, #0
 8014e68:	6360      	str	r0, [r4, #52]	; 0x34
 8014e6a:	b113      	cbz	r3, 8014e72 <__ssrefill_r+0x24>
 8014e6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014e6e:	6023      	str	r3, [r4, #0]
 8014e70:	bd10      	pop	{r4, pc}
 8014e72:	6923      	ldr	r3, [r4, #16]
 8014e74:	6023      	str	r3, [r4, #0]
 8014e76:	2300      	movs	r3, #0
 8014e78:	6063      	str	r3, [r4, #4]
 8014e7a:	89a3      	ldrh	r3, [r4, #12]
 8014e7c:	f043 0320 	orr.w	r3, r3, #32
 8014e80:	81a3      	strh	r3, [r4, #12]
 8014e82:	f04f 30ff 	mov.w	r0, #4294967295
 8014e86:	e7f3      	b.n	8014e70 <__ssrefill_r+0x22>

08014e88 <__ssvfiscanf_r>:
 8014e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e8c:	460c      	mov	r4, r1
 8014e8e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8014e92:	2100      	movs	r1, #0
 8014e94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014e98:	49b2      	ldr	r1, [pc, #712]	; (8015164 <__ssvfiscanf_r+0x2dc>)
 8014e9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8014e9c:	f10d 0804 	add.w	r8, sp, #4
 8014ea0:	49b1      	ldr	r1, [pc, #708]	; (8015168 <__ssvfiscanf_r+0x2e0>)
 8014ea2:	4fb2      	ldr	r7, [pc, #712]	; (801516c <__ssvfiscanf_r+0x2e4>)
 8014ea4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8015170 <__ssvfiscanf_r+0x2e8>
 8014ea8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8014eac:	4606      	mov	r6, r0
 8014eae:	91a1      	str	r1, [sp, #644]	; 0x284
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	f892 a000 	ldrb.w	sl, [r2]
 8014eb6:	f1ba 0f00 	cmp.w	sl, #0
 8014eba:	f000 8151 	beq.w	8015160 <__ssvfiscanf_r+0x2d8>
 8014ebe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8014ec2:	f013 0308 	ands.w	r3, r3, #8
 8014ec6:	f102 0501 	add.w	r5, r2, #1
 8014eca:	d019      	beq.n	8014f00 <__ssvfiscanf_r+0x78>
 8014ecc:	6863      	ldr	r3, [r4, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	dd0f      	ble.n	8014ef2 <__ssvfiscanf_r+0x6a>
 8014ed2:	6823      	ldr	r3, [r4, #0]
 8014ed4:	781a      	ldrb	r2, [r3, #0]
 8014ed6:	5cba      	ldrb	r2, [r7, r2]
 8014ed8:	0712      	lsls	r2, r2, #28
 8014eda:	d401      	bmi.n	8014ee0 <__ssvfiscanf_r+0x58>
 8014edc:	462a      	mov	r2, r5
 8014ede:	e7e8      	b.n	8014eb2 <__ssvfiscanf_r+0x2a>
 8014ee0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014ee2:	3201      	adds	r2, #1
 8014ee4:	9245      	str	r2, [sp, #276]	; 0x114
 8014ee6:	6862      	ldr	r2, [r4, #4]
 8014ee8:	3301      	adds	r3, #1
 8014eea:	3a01      	subs	r2, #1
 8014eec:	6062      	str	r2, [r4, #4]
 8014eee:	6023      	str	r3, [r4, #0]
 8014ef0:	e7ec      	b.n	8014ecc <__ssvfiscanf_r+0x44>
 8014ef2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014ef4:	4621      	mov	r1, r4
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	4798      	blx	r3
 8014efa:	2800      	cmp	r0, #0
 8014efc:	d0e9      	beq.n	8014ed2 <__ssvfiscanf_r+0x4a>
 8014efe:	e7ed      	b.n	8014edc <__ssvfiscanf_r+0x54>
 8014f00:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8014f04:	f040 8083 	bne.w	801500e <__ssvfiscanf_r+0x186>
 8014f08:	9341      	str	r3, [sp, #260]	; 0x104
 8014f0a:	9343      	str	r3, [sp, #268]	; 0x10c
 8014f0c:	7853      	ldrb	r3, [r2, #1]
 8014f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8014f10:	bf02      	ittt	eq
 8014f12:	2310      	moveq	r3, #16
 8014f14:	1c95      	addeq	r5, r2, #2
 8014f16:	9341      	streq	r3, [sp, #260]	; 0x104
 8014f18:	220a      	movs	r2, #10
 8014f1a:	46ab      	mov	fp, r5
 8014f1c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8014f20:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014f24:	2b09      	cmp	r3, #9
 8014f26:	d91d      	bls.n	8014f64 <__ssvfiscanf_r+0xdc>
 8014f28:	4891      	ldr	r0, [pc, #580]	; (8015170 <__ssvfiscanf_r+0x2e8>)
 8014f2a:	2203      	movs	r2, #3
 8014f2c:	f7eb f998 	bl	8000260 <memchr>
 8014f30:	b140      	cbz	r0, 8014f44 <__ssvfiscanf_r+0xbc>
 8014f32:	2301      	movs	r3, #1
 8014f34:	eba0 0009 	sub.w	r0, r0, r9
 8014f38:	fa03 f000 	lsl.w	r0, r3, r0
 8014f3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014f3e:	4318      	orrs	r0, r3
 8014f40:	9041      	str	r0, [sp, #260]	; 0x104
 8014f42:	465d      	mov	r5, fp
 8014f44:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014f48:	2b78      	cmp	r3, #120	; 0x78
 8014f4a:	d806      	bhi.n	8014f5a <__ssvfiscanf_r+0xd2>
 8014f4c:	2b57      	cmp	r3, #87	; 0x57
 8014f4e:	d810      	bhi.n	8014f72 <__ssvfiscanf_r+0xea>
 8014f50:	2b25      	cmp	r3, #37	; 0x25
 8014f52:	d05c      	beq.n	801500e <__ssvfiscanf_r+0x186>
 8014f54:	d856      	bhi.n	8015004 <__ssvfiscanf_r+0x17c>
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d074      	beq.n	8015044 <__ssvfiscanf_r+0x1bc>
 8014f5a:	2303      	movs	r3, #3
 8014f5c:	9347      	str	r3, [sp, #284]	; 0x11c
 8014f5e:	230a      	movs	r3, #10
 8014f60:	9342      	str	r3, [sp, #264]	; 0x108
 8014f62:	e081      	b.n	8015068 <__ssvfiscanf_r+0x1e0>
 8014f64:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014f66:	fb02 1303 	mla	r3, r2, r3, r1
 8014f6a:	3b30      	subs	r3, #48	; 0x30
 8014f6c:	9343      	str	r3, [sp, #268]	; 0x10c
 8014f6e:	465d      	mov	r5, fp
 8014f70:	e7d3      	b.n	8014f1a <__ssvfiscanf_r+0x92>
 8014f72:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014f76:	2a20      	cmp	r2, #32
 8014f78:	d8ef      	bhi.n	8014f5a <__ssvfiscanf_r+0xd2>
 8014f7a:	a101      	add	r1, pc, #4	; (adr r1, 8014f80 <__ssvfiscanf_r+0xf8>)
 8014f7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014f80:	08015053 	.word	0x08015053
 8014f84:	08014f5b 	.word	0x08014f5b
 8014f88:	08014f5b 	.word	0x08014f5b
 8014f8c:	080150b1 	.word	0x080150b1
 8014f90:	08014f5b 	.word	0x08014f5b
 8014f94:	08014f5b 	.word	0x08014f5b
 8014f98:	08014f5b 	.word	0x08014f5b
 8014f9c:	08014f5b 	.word	0x08014f5b
 8014fa0:	08014f5b 	.word	0x08014f5b
 8014fa4:	08014f5b 	.word	0x08014f5b
 8014fa8:	08014f5b 	.word	0x08014f5b
 8014fac:	080150c7 	.word	0x080150c7
 8014fb0:	0801509d 	.word	0x0801509d
 8014fb4:	0801500b 	.word	0x0801500b
 8014fb8:	0801500b 	.word	0x0801500b
 8014fbc:	0801500b 	.word	0x0801500b
 8014fc0:	08014f5b 	.word	0x08014f5b
 8014fc4:	080150a1 	.word	0x080150a1
 8014fc8:	08014f5b 	.word	0x08014f5b
 8014fcc:	08014f5b 	.word	0x08014f5b
 8014fd0:	08014f5b 	.word	0x08014f5b
 8014fd4:	08014f5b 	.word	0x08014f5b
 8014fd8:	080150d7 	.word	0x080150d7
 8014fdc:	080150a9 	.word	0x080150a9
 8014fe0:	0801504b 	.word	0x0801504b
 8014fe4:	08014f5b 	.word	0x08014f5b
 8014fe8:	08014f5b 	.word	0x08014f5b
 8014fec:	080150d3 	.word	0x080150d3
 8014ff0:	08014f5b 	.word	0x08014f5b
 8014ff4:	0801509d 	.word	0x0801509d
 8014ff8:	08014f5b 	.word	0x08014f5b
 8014ffc:	08014f5b 	.word	0x08014f5b
 8015000:	08015053 	.word	0x08015053
 8015004:	3b45      	subs	r3, #69	; 0x45
 8015006:	2b02      	cmp	r3, #2
 8015008:	d8a7      	bhi.n	8014f5a <__ssvfiscanf_r+0xd2>
 801500a:	2305      	movs	r3, #5
 801500c:	e02b      	b.n	8015066 <__ssvfiscanf_r+0x1de>
 801500e:	6863      	ldr	r3, [r4, #4]
 8015010:	2b00      	cmp	r3, #0
 8015012:	dd0d      	ble.n	8015030 <__ssvfiscanf_r+0x1a8>
 8015014:	6823      	ldr	r3, [r4, #0]
 8015016:	781a      	ldrb	r2, [r3, #0]
 8015018:	4552      	cmp	r2, sl
 801501a:	f040 80a1 	bne.w	8015160 <__ssvfiscanf_r+0x2d8>
 801501e:	3301      	adds	r3, #1
 8015020:	6862      	ldr	r2, [r4, #4]
 8015022:	6023      	str	r3, [r4, #0]
 8015024:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015026:	3a01      	subs	r2, #1
 8015028:	3301      	adds	r3, #1
 801502a:	6062      	str	r2, [r4, #4]
 801502c:	9345      	str	r3, [sp, #276]	; 0x114
 801502e:	e755      	b.n	8014edc <__ssvfiscanf_r+0x54>
 8015030:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015032:	4621      	mov	r1, r4
 8015034:	4630      	mov	r0, r6
 8015036:	4798      	blx	r3
 8015038:	2800      	cmp	r0, #0
 801503a:	d0eb      	beq.n	8015014 <__ssvfiscanf_r+0x18c>
 801503c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801503e:	2800      	cmp	r0, #0
 8015040:	f040 8084 	bne.w	801514c <__ssvfiscanf_r+0x2c4>
 8015044:	f04f 30ff 	mov.w	r0, #4294967295
 8015048:	e086      	b.n	8015158 <__ssvfiscanf_r+0x2d0>
 801504a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801504c:	f042 0220 	orr.w	r2, r2, #32
 8015050:	9241      	str	r2, [sp, #260]	; 0x104
 8015052:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015058:	9241      	str	r2, [sp, #260]	; 0x104
 801505a:	2210      	movs	r2, #16
 801505c:	2b6f      	cmp	r3, #111	; 0x6f
 801505e:	9242      	str	r2, [sp, #264]	; 0x108
 8015060:	bf34      	ite	cc
 8015062:	2303      	movcc	r3, #3
 8015064:	2304      	movcs	r3, #4
 8015066:	9347      	str	r3, [sp, #284]	; 0x11c
 8015068:	6863      	ldr	r3, [r4, #4]
 801506a:	2b00      	cmp	r3, #0
 801506c:	dd41      	ble.n	80150f2 <__ssvfiscanf_r+0x26a>
 801506e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015070:	0659      	lsls	r1, r3, #25
 8015072:	d404      	bmi.n	801507e <__ssvfiscanf_r+0x1f6>
 8015074:	6823      	ldr	r3, [r4, #0]
 8015076:	781a      	ldrb	r2, [r3, #0]
 8015078:	5cba      	ldrb	r2, [r7, r2]
 801507a:	0712      	lsls	r2, r2, #28
 801507c:	d440      	bmi.n	8015100 <__ssvfiscanf_r+0x278>
 801507e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015080:	2b02      	cmp	r3, #2
 8015082:	dc4f      	bgt.n	8015124 <__ssvfiscanf_r+0x29c>
 8015084:	466b      	mov	r3, sp
 8015086:	4622      	mov	r2, r4
 8015088:	a941      	add	r1, sp, #260	; 0x104
 801508a:	4630      	mov	r0, r6
 801508c:	f000 f874 	bl	8015178 <_scanf_chars>
 8015090:	2801      	cmp	r0, #1
 8015092:	d065      	beq.n	8015160 <__ssvfiscanf_r+0x2d8>
 8015094:	2802      	cmp	r0, #2
 8015096:	f47f af21 	bne.w	8014edc <__ssvfiscanf_r+0x54>
 801509a:	e7cf      	b.n	801503c <__ssvfiscanf_r+0x1b4>
 801509c:	220a      	movs	r2, #10
 801509e:	e7dd      	b.n	801505c <__ssvfiscanf_r+0x1d4>
 80150a0:	2300      	movs	r3, #0
 80150a2:	9342      	str	r3, [sp, #264]	; 0x108
 80150a4:	2303      	movs	r3, #3
 80150a6:	e7de      	b.n	8015066 <__ssvfiscanf_r+0x1de>
 80150a8:	2308      	movs	r3, #8
 80150aa:	9342      	str	r3, [sp, #264]	; 0x108
 80150ac:	2304      	movs	r3, #4
 80150ae:	e7da      	b.n	8015066 <__ssvfiscanf_r+0x1de>
 80150b0:	4629      	mov	r1, r5
 80150b2:	4640      	mov	r0, r8
 80150b4:	f000 f9ac 	bl	8015410 <__sccl>
 80150b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80150ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150be:	9341      	str	r3, [sp, #260]	; 0x104
 80150c0:	4605      	mov	r5, r0
 80150c2:	2301      	movs	r3, #1
 80150c4:	e7cf      	b.n	8015066 <__ssvfiscanf_r+0x1de>
 80150c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80150c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150cc:	9341      	str	r3, [sp, #260]	; 0x104
 80150ce:	2300      	movs	r3, #0
 80150d0:	e7c9      	b.n	8015066 <__ssvfiscanf_r+0x1de>
 80150d2:	2302      	movs	r3, #2
 80150d4:	e7c7      	b.n	8015066 <__ssvfiscanf_r+0x1de>
 80150d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80150d8:	06c3      	lsls	r3, r0, #27
 80150da:	f53f aeff 	bmi.w	8014edc <__ssvfiscanf_r+0x54>
 80150de:	9b00      	ldr	r3, [sp, #0]
 80150e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80150e2:	1d19      	adds	r1, r3, #4
 80150e4:	9100      	str	r1, [sp, #0]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	07c0      	lsls	r0, r0, #31
 80150ea:	bf4c      	ite	mi
 80150ec:	801a      	strhmi	r2, [r3, #0]
 80150ee:	601a      	strpl	r2, [r3, #0]
 80150f0:	e6f4      	b.n	8014edc <__ssvfiscanf_r+0x54>
 80150f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80150f4:	4621      	mov	r1, r4
 80150f6:	4630      	mov	r0, r6
 80150f8:	4798      	blx	r3
 80150fa:	2800      	cmp	r0, #0
 80150fc:	d0b7      	beq.n	801506e <__ssvfiscanf_r+0x1e6>
 80150fe:	e79d      	b.n	801503c <__ssvfiscanf_r+0x1b4>
 8015100:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015102:	3201      	adds	r2, #1
 8015104:	9245      	str	r2, [sp, #276]	; 0x114
 8015106:	6862      	ldr	r2, [r4, #4]
 8015108:	3a01      	subs	r2, #1
 801510a:	2a00      	cmp	r2, #0
 801510c:	6062      	str	r2, [r4, #4]
 801510e:	dd02      	ble.n	8015116 <__ssvfiscanf_r+0x28e>
 8015110:	3301      	adds	r3, #1
 8015112:	6023      	str	r3, [r4, #0]
 8015114:	e7ae      	b.n	8015074 <__ssvfiscanf_r+0x1ec>
 8015116:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015118:	4621      	mov	r1, r4
 801511a:	4630      	mov	r0, r6
 801511c:	4798      	blx	r3
 801511e:	2800      	cmp	r0, #0
 8015120:	d0a8      	beq.n	8015074 <__ssvfiscanf_r+0x1ec>
 8015122:	e78b      	b.n	801503c <__ssvfiscanf_r+0x1b4>
 8015124:	2b04      	cmp	r3, #4
 8015126:	dc06      	bgt.n	8015136 <__ssvfiscanf_r+0x2ae>
 8015128:	466b      	mov	r3, sp
 801512a:	4622      	mov	r2, r4
 801512c:	a941      	add	r1, sp, #260	; 0x104
 801512e:	4630      	mov	r0, r6
 8015130:	f000 f87a 	bl	8015228 <_scanf_i>
 8015134:	e7ac      	b.n	8015090 <__ssvfiscanf_r+0x208>
 8015136:	4b0f      	ldr	r3, [pc, #60]	; (8015174 <__ssvfiscanf_r+0x2ec>)
 8015138:	2b00      	cmp	r3, #0
 801513a:	f43f aecf 	beq.w	8014edc <__ssvfiscanf_r+0x54>
 801513e:	466b      	mov	r3, sp
 8015140:	4622      	mov	r2, r4
 8015142:	a941      	add	r1, sp, #260	; 0x104
 8015144:	4630      	mov	r0, r6
 8015146:	f3af 8000 	nop.w
 801514a:	e7a1      	b.n	8015090 <__ssvfiscanf_r+0x208>
 801514c:	89a3      	ldrh	r3, [r4, #12]
 801514e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015152:	bf18      	it	ne
 8015154:	f04f 30ff 	movne.w	r0, #4294967295
 8015158:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015160:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015162:	e7f9      	b.n	8015158 <__ssvfiscanf_r+0x2d0>
 8015164:	08014dd5 	.word	0x08014dd5
 8015168:	08014e4f 	.word	0x08014e4f
 801516c:	08018abd 	.word	0x08018abd
 8015170:	08018bcd 	.word	0x08018bcd
 8015174:	00000000 	.word	0x00000000

08015178 <_scanf_chars>:
 8015178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801517c:	4615      	mov	r5, r2
 801517e:	688a      	ldr	r2, [r1, #8]
 8015180:	4680      	mov	r8, r0
 8015182:	460c      	mov	r4, r1
 8015184:	b932      	cbnz	r2, 8015194 <_scanf_chars+0x1c>
 8015186:	698a      	ldr	r2, [r1, #24]
 8015188:	2a00      	cmp	r2, #0
 801518a:	bf0c      	ite	eq
 801518c:	2201      	moveq	r2, #1
 801518e:	f04f 32ff 	movne.w	r2, #4294967295
 8015192:	608a      	str	r2, [r1, #8]
 8015194:	6822      	ldr	r2, [r4, #0]
 8015196:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8015224 <_scanf_chars+0xac>
 801519a:	06d1      	lsls	r1, r2, #27
 801519c:	bf5f      	itttt	pl
 801519e:	681a      	ldrpl	r2, [r3, #0]
 80151a0:	1d11      	addpl	r1, r2, #4
 80151a2:	6019      	strpl	r1, [r3, #0]
 80151a4:	6816      	ldrpl	r6, [r2, #0]
 80151a6:	2700      	movs	r7, #0
 80151a8:	69a0      	ldr	r0, [r4, #24]
 80151aa:	b188      	cbz	r0, 80151d0 <_scanf_chars+0x58>
 80151ac:	2801      	cmp	r0, #1
 80151ae:	d107      	bne.n	80151c0 <_scanf_chars+0x48>
 80151b0:	682b      	ldr	r3, [r5, #0]
 80151b2:	781a      	ldrb	r2, [r3, #0]
 80151b4:	6963      	ldr	r3, [r4, #20]
 80151b6:	5c9b      	ldrb	r3, [r3, r2]
 80151b8:	b953      	cbnz	r3, 80151d0 <_scanf_chars+0x58>
 80151ba:	bb27      	cbnz	r7, 8015206 <_scanf_chars+0x8e>
 80151bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151c0:	2802      	cmp	r0, #2
 80151c2:	d120      	bne.n	8015206 <_scanf_chars+0x8e>
 80151c4:	682b      	ldr	r3, [r5, #0]
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80151cc:	071b      	lsls	r3, r3, #28
 80151ce:	d41a      	bmi.n	8015206 <_scanf_chars+0x8e>
 80151d0:	6823      	ldr	r3, [r4, #0]
 80151d2:	06da      	lsls	r2, r3, #27
 80151d4:	bf5e      	ittt	pl
 80151d6:	682b      	ldrpl	r3, [r5, #0]
 80151d8:	781b      	ldrbpl	r3, [r3, #0]
 80151da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80151de:	682a      	ldr	r2, [r5, #0]
 80151e0:	686b      	ldr	r3, [r5, #4]
 80151e2:	3201      	adds	r2, #1
 80151e4:	602a      	str	r2, [r5, #0]
 80151e6:	68a2      	ldr	r2, [r4, #8]
 80151e8:	3b01      	subs	r3, #1
 80151ea:	3a01      	subs	r2, #1
 80151ec:	606b      	str	r3, [r5, #4]
 80151ee:	3701      	adds	r7, #1
 80151f0:	60a2      	str	r2, [r4, #8]
 80151f2:	b142      	cbz	r2, 8015206 <_scanf_chars+0x8e>
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	dcd7      	bgt.n	80151a8 <_scanf_chars+0x30>
 80151f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80151fc:	4629      	mov	r1, r5
 80151fe:	4640      	mov	r0, r8
 8015200:	4798      	blx	r3
 8015202:	2800      	cmp	r0, #0
 8015204:	d0d0      	beq.n	80151a8 <_scanf_chars+0x30>
 8015206:	6823      	ldr	r3, [r4, #0]
 8015208:	f013 0310 	ands.w	r3, r3, #16
 801520c:	d105      	bne.n	801521a <_scanf_chars+0xa2>
 801520e:	68e2      	ldr	r2, [r4, #12]
 8015210:	3201      	adds	r2, #1
 8015212:	60e2      	str	r2, [r4, #12]
 8015214:	69a2      	ldr	r2, [r4, #24]
 8015216:	b102      	cbz	r2, 801521a <_scanf_chars+0xa2>
 8015218:	7033      	strb	r3, [r6, #0]
 801521a:	6923      	ldr	r3, [r4, #16]
 801521c:	441f      	add	r7, r3
 801521e:	6127      	str	r7, [r4, #16]
 8015220:	2000      	movs	r0, #0
 8015222:	e7cb      	b.n	80151bc <_scanf_chars+0x44>
 8015224:	08018abd 	.word	0x08018abd

08015228 <_scanf_i>:
 8015228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522c:	4698      	mov	r8, r3
 801522e:	4b74      	ldr	r3, [pc, #464]	; (8015400 <_scanf_i+0x1d8>)
 8015230:	460c      	mov	r4, r1
 8015232:	4682      	mov	sl, r0
 8015234:	4616      	mov	r6, r2
 8015236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801523a:	b087      	sub	sp, #28
 801523c:	ab03      	add	r3, sp, #12
 801523e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015242:	4b70      	ldr	r3, [pc, #448]	; (8015404 <_scanf_i+0x1dc>)
 8015244:	69a1      	ldr	r1, [r4, #24]
 8015246:	4a70      	ldr	r2, [pc, #448]	; (8015408 <_scanf_i+0x1e0>)
 8015248:	2903      	cmp	r1, #3
 801524a:	bf18      	it	ne
 801524c:	461a      	movne	r2, r3
 801524e:	68a3      	ldr	r3, [r4, #8]
 8015250:	9201      	str	r2, [sp, #4]
 8015252:	1e5a      	subs	r2, r3, #1
 8015254:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015258:	bf88      	it	hi
 801525a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801525e:	4627      	mov	r7, r4
 8015260:	bf82      	ittt	hi
 8015262:	eb03 0905 	addhi.w	r9, r3, r5
 8015266:	f240 135d 	movwhi	r3, #349	; 0x15d
 801526a:	60a3      	strhi	r3, [r4, #8]
 801526c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015270:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015274:	bf98      	it	ls
 8015276:	f04f 0900 	movls.w	r9, #0
 801527a:	6023      	str	r3, [r4, #0]
 801527c:	463d      	mov	r5, r7
 801527e:	f04f 0b00 	mov.w	fp, #0
 8015282:	6831      	ldr	r1, [r6, #0]
 8015284:	ab03      	add	r3, sp, #12
 8015286:	7809      	ldrb	r1, [r1, #0]
 8015288:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801528c:	2202      	movs	r2, #2
 801528e:	f7ea ffe7 	bl	8000260 <memchr>
 8015292:	b328      	cbz	r0, 80152e0 <_scanf_i+0xb8>
 8015294:	f1bb 0f01 	cmp.w	fp, #1
 8015298:	d159      	bne.n	801534e <_scanf_i+0x126>
 801529a:	6862      	ldr	r2, [r4, #4]
 801529c:	b92a      	cbnz	r2, 80152aa <_scanf_i+0x82>
 801529e:	6822      	ldr	r2, [r4, #0]
 80152a0:	2308      	movs	r3, #8
 80152a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80152a6:	6063      	str	r3, [r4, #4]
 80152a8:	6022      	str	r2, [r4, #0]
 80152aa:	6822      	ldr	r2, [r4, #0]
 80152ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80152b0:	6022      	str	r2, [r4, #0]
 80152b2:	68a2      	ldr	r2, [r4, #8]
 80152b4:	1e51      	subs	r1, r2, #1
 80152b6:	60a1      	str	r1, [r4, #8]
 80152b8:	b192      	cbz	r2, 80152e0 <_scanf_i+0xb8>
 80152ba:	6832      	ldr	r2, [r6, #0]
 80152bc:	1c51      	adds	r1, r2, #1
 80152be:	6031      	str	r1, [r6, #0]
 80152c0:	7812      	ldrb	r2, [r2, #0]
 80152c2:	f805 2b01 	strb.w	r2, [r5], #1
 80152c6:	6872      	ldr	r2, [r6, #4]
 80152c8:	3a01      	subs	r2, #1
 80152ca:	2a00      	cmp	r2, #0
 80152cc:	6072      	str	r2, [r6, #4]
 80152ce:	dc07      	bgt.n	80152e0 <_scanf_i+0xb8>
 80152d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80152d4:	4631      	mov	r1, r6
 80152d6:	4650      	mov	r0, sl
 80152d8:	4790      	blx	r2
 80152da:	2800      	cmp	r0, #0
 80152dc:	f040 8085 	bne.w	80153ea <_scanf_i+0x1c2>
 80152e0:	f10b 0b01 	add.w	fp, fp, #1
 80152e4:	f1bb 0f03 	cmp.w	fp, #3
 80152e8:	d1cb      	bne.n	8015282 <_scanf_i+0x5a>
 80152ea:	6863      	ldr	r3, [r4, #4]
 80152ec:	b90b      	cbnz	r3, 80152f2 <_scanf_i+0xca>
 80152ee:	230a      	movs	r3, #10
 80152f0:	6063      	str	r3, [r4, #4]
 80152f2:	6863      	ldr	r3, [r4, #4]
 80152f4:	4945      	ldr	r1, [pc, #276]	; (801540c <_scanf_i+0x1e4>)
 80152f6:	6960      	ldr	r0, [r4, #20]
 80152f8:	1ac9      	subs	r1, r1, r3
 80152fa:	f000 f889 	bl	8015410 <__sccl>
 80152fe:	f04f 0b00 	mov.w	fp, #0
 8015302:	68a3      	ldr	r3, [r4, #8]
 8015304:	6822      	ldr	r2, [r4, #0]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d03d      	beq.n	8015386 <_scanf_i+0x15e>
 801530a:	6831      	ldr	r1, [r6, #0]
 801530c:	6960      	ldr	r0, [r4, #20]
 801530e:	f891 c000 	ldrb.w	ip, [r1]
 8015312:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015316:	2800      	cmp	r0, #0
 8015318:	d035      	beq.n	8015386 <_scanf_i+0x15e>
 801531a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801531e:	d124      	bne.n	801536a <_scanf_i+0x142>
 8015320:	0510      	lsls	r0, r2, #20
 8015322:	d522      	bpl.n	801536a <_scanf_i+0x142>
 8015324:	f10b 0b01 	add.w	fp, fp, #1
 8015328:	f1b9 0f00 	cmp.w	r9, #0
 801532c:	d003      	beq.n	8015336 <_scanf_i+0x10e>
 801532e:	3301      	adds	r3, #1
 8015330:	f109 39ff 	add.w	r9, r9, #4294967295
 8015334:	60a3      	str	r3, [r4, #8]
 8015336:	6873      	ldr	r3, [r6, #4]
 8015338:	3b01      	subs	r3, #1
 801533a:	2b00      	cmp	r3, #0
 801533c:	6073      	str	r3, [r6, #4]
 801533e:	dd1b      	ble.n	8015378 <_scanf_i+0x150>
 8015340:	6833      	ldr	r3, [r6, #0]
 8015342:	3301      	adds	r3, #1
 8015344:	6033      	str	r3, [r6, #0]
 8015346:	68a3      	ldr	r3, [r4, #8]
 8015348:	3b01      	subs	r3, #1
 801534a:	60a3      	str	r3, [r4, #8]
 801534c:	e7d9      	b.n	8015302 <_scanf_i+0xda>
 801534e:	f1bb 0f02 	cmp.w	fp, #2
 8015352:	d1ae      	bne.n	80152b2 <_scanf_i+0x8a>
 8015354:	6822      	ldr	r2, [r4, #0]
 8015356:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801535a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801535e:	d1bf      	bne.n	80152e0 <_scanf_i+0xb8>
 8015360:	2310      	movs	r3, #16
 8015362:	6063      	str	r3, [r4, #4]
 8015364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015368:	e7a2      	b.n	80152b0 <_scanf_i+0x88>
 801536a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801536e:	6022      	str	r2, [r4, #0]
 8015370:	780b      	ldrb	r3, [r1, #0]
 8015372:	f805 3b01 	strb.w	r3, [r5], #1
 8015376:	e7de      	b.n	8015336 <_scanf_i+0x10e>
 8015378:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801537c:	4631      	mov	r1, r6
 801537e:	4650      	mov	r0, sl
 8015380:	4798      	blx	r3
 8015382:	2800      	cmp	r0, #0
 8015384:	d0df      	beq.n	8015346 <_scanf_i+0x11e>
 8015386:	6823      	ldr	r3, [r4, #0]
 8015388:	05d9      	lsls	r1, r3, #23
 801538a:	d50d      	bpl.n	80153a8 <_scanf_i+0x180>
 801538c:	42bd      	cmp	r5, r7
 801538e:	d909      	bls.n	80153a4 <_scanf_i+0x17c>
 8015390:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015394:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015398:	4632      	mov	r2, r6
 801539a:	4650      	mov	r0, sl
 801539c:	4798      	blx	r3
 801539e:	f105 39ff 	add.w	r9, r5, #4294967295
 80153a2:	464d      	mov	r5, r9
 80153a4:	42bd      	cmp	r5, r7
 80153a6:	d028      	beq.n	80153fa <_scanf_i+0x1d2>
 80153a8:	6822      	ldr	r2, [r4, #0]
 80153aa:	f012 0210 	ands.w	r2, r2, #16
 80153ae:	d113      	bne.n	80153d8 <_scanf_i+0x1b0>
 80153b0:	702a      	strb	r2, [r5, #0]
 80153b2:	6863      	ldr	r3, [r4, #4]
 80153b4:	9e01      	ldr	r6, [sp, #4]
 80153b6:	4639      	mov	r1, r7
 80153b8:	4650      	mov	r0, sl
 80153ba:	47b0      	blx	r6
 80153bc:	f8d8 3000 	ldr.w	r3, [r8]
 80153c0:	6821      	ldr	r1, [r4, #0]
 80153c2:	1d1a      	adds	r2, r3, #4
 80153c4:	f8c8 2000 	str.w	r2, [r8]
 80153c8:	f011 0f20 	tst.w	r1, #32
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	d00f      	beq.n	80153f0 <_scanf_i+0x1c8>
 80153d0:	6018      	str	r0, [r3, #0]
 80153d2:	68e3      	ldr	r3, [r4, #12]
 80153d4:	3301      	adds	r3, #1
 80153d6:	60e3      	str	r3, [r4, #12]
 80153d8:	1bed      	subs	r5, r5, r7
 80153da:	44ab      	add	fp, r5
 80153dc:	6925      	ldr	r5, [r4, #16]
 80153de:	445d      	add	r5, fp
 80153e0:	6125      	str	r5, [r4, #16]
 80153e2:	2000      	movs	r0, #0
 80153e4:	b007      	add	sp, #28
 80153e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153ea:	f04f 0b00 	mov.w	fp, #0
 80153ee:	e7ca      	b.n	8015386 <_scanf_i+0x15e>
 80153f0:	07ca      	lsls	r2, r1, #31
 80153f2:	bf4c      	ite	mi
 80153f4:	8018      	strhmi	r0, [r3, #0]
 80153f6:	6018      	strpl	r0, [r3, #0]
 80153f8:	e7eb      	b.n	80153d2 <_scanf_i+0x1aa>
 80153fa:	2001      	movs	r0, #1
 80153fc:	e7f2      	b.n	80153e4 <_scanf_i+0x1bc>
 80153fe:	bf00      	nop
 8015400:	0801778c 	.word	0x0801778c
 8015404:	08013791 	.word	0x08013791
 8015408:	0801558d 	.word	0x0801558d
 801540c:	08018c13 	.word	0x08018c13

08015410 <__sccl>:
 8015410:	b570      	push	{r4, r5, r6, lr}
 8015412:	780b      	ldrb	r3, [r1, #0]
 8015414:	4604      	mov	r4, r0
 8015416:	2b5e      	cmp	r3, #94	; 0x5e
 8015418:	bf0b      	itete	eq
 801541a:	784b      	ldrbeq	r3, [r1, #1]
 801541c:	1c48      	addne	r0, r1, #1
 801541e:	1c88      	addeq	r0, r1, #2
 8015420:	2200      	movne	r2, #0
 8015422:	bf08      	it	eq
 8015424:	2201      	moveq	r2, #1
 8015426:	1e61      	subs	r1, r4, #1
 8015428:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801542c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8015430:	42a9      	cmp	r1, r5
 8015432:	d1fb      	bne.n	801542c <__sccl+0x1c>
 8015434:	b90b      	cbnz	r3, 801543a <__sccl+0x2a>
 8015436:	3801      	subs	r0, #1
 8015438:	bd70      	pop	{r4, r5, r6, pc}
 801543a:	f082 0101 	eor.w	r1, r2, #1
 801543e:	54e1      	strb	r1, [r4, r3]
 8015440:	1c42      	adds	r2, r0, #1
 8015442:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8015446:	2d2d      	cmp	r5, #45	; 0x2d
 8015448:	f102 36ff 	add.w	r6, r2, #4294967295
 801544c:	4610      	mov	r0, r2
 801544e:	d006      	beq.n	801545e <__sccl+0x4e>
 8015450:	2d5d      	cmp	r5, #93	; 0x5d
 8015452:	d0f1      	beq.n	8015438 <__sccl+0x28>
 8015454:	b90d      	cbnz	r5, 801545a <__sccl+0x4a>
 8015456:	4630      	mov	r0, r6
 8015458:	e7ee      	b.n	8015438 <__sccl+0x28>
 801545a:	462b      	mov	r3, r5
 801545c:	e7ef      	b.n	801543e <__sccl+0x2e>
 801545e:	7816      	ldrb	r6, [r2, #0]
 8015460:	2e5d      	cmp	r6, #93	; 0x5d
 8015462:	d0fa      	beq.n	801545a <__sccl+0x4a>
 8015464:	42b3      	cmp	r3, r6
 8015466:	dcf8      	bgt.n	801545a <__sccl+0x4a>
 8015468:	4618      	mov	r0, r3
 801546a:	3001      	adds	r0, #1
 801546c:	4286      	cmp	r6, r0
 801546e:	5421      	strb	r1, [r4, r0]
 8015470:	dcfb      	bgt.n	801546a <__sccl+0x5a>
 8015472:	43d8      	mvns	r0, r3
 8015474:	4430      	add	r0, r6
 8015476:	1c5d      	adds	r5, r3, #1
 8015478:	42b3      	cmp	r3, r6
 801547a:	bfa8      	it	ge
 801547c:	2000      	movge	r0, #0
 801547e:	182b      	adds	r3, r5, r0
 8015480:	3202      	adds	r2, #2
 8015482:	e7de      	b.n	8015442 <__sccl+0x32>

08015484 <_strtol_l.isra.0>:
 8015484:	2b01      	cmp	r3, #1
 8015486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801548a:	d001      	beq.n	8015490 <_strtol_l.isra.0+0xc>
 801548c:	2b24      	cmp	r3, #36	; 0x24
 801548e:	d906      	bls.n	801549e <_strtol_l.isra.0+0x1a>
 8015490:	f7fc fbce 	bl	8011c30 <__errno>
 8015494:	2316      	movs	r3, #22
 8015496:	6003      	str	r3, [r0, #0]
 8015498:	2000      	movs	r0, #0
 801549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801549e:	4f3a      	ldr	r7, [pc, #232]	; (8015588 <_strtol_l.isra.0+0x104>)
 80154a0:	468e      	mov	lr, r1
 80154a2:	4676      	mov	r6, lr
 80154a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80154a8:	5de5      	ldrb	r5, [r4, r7]
 80154aa:	f015 0508 	ands.w	r5, r5, #8
 80154ae:	d1f8      	bne.n	80154a2 <_strtol_l.isra.0+0x1e>
 80154b0:	2c2d      	cmp	r4, #45	; 0x2d
 80154b2:	d134      	bne.n	801551e <_strtol_l.isra.0+0x9a>
 80154b4:	f89e 4000 	ldrb.w	r4, [lr]
 80154b8:	f04f 0801 	mov.w	r8, #1
 80154bc:	f106 0e02 	add.w	lr, r6, #2
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d05c      	beq.n	801557e <_strtol_l.isra.0+0xfa>
 80154c4:	2b10      	cmp	r3, #16
 80154c6:	d10c      	bne.n	80154e2 <_strtol_l.isra.0+0x5e>
 80154c8:	2c30      	cmp	r4, #48	; 0x30
 80154ca:	d10a      	bne.n	80154e2 <_strtol_l.isra.0+0x5e>
 80154cc:	f89e 4000 	ldrb.w	r4, [lr]
 80154d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80154d4:	2c58      	cmp	r4, #88	; 0x58
 80154d6:	d14d      	bne.n	8015574 <_strtol_l.isra.0+0xf0>
 80154d8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80154dc:	2310      	movs	r3, #16
 80154de:	f10e 0e02 	add.w	lr, lr, #2
 80154e2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80154e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80154ea:	2600      	movs	r6, #0
 80154ec:	fbbc f9f3 	udiv	r9, ip, r3
 80154f0:	4635      	mov	r5, r6
 80154f2:	fb03 ca19 	mls	sl, r3, r9, ip
 80154f6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80154fa:	2f09      	cmp	r7, #9
 80154fc:	d818      	bhi.n	8015530 <_strtol_l.isra.0+0xac>
 80154fe:	463c      	mov	r4, r7
 8015500:	42a3      	cmp	r3, r4
 8015502:	dd24      	ble.n	801554e <_strtol_l.isra.0+0xca>
 8015504:	2e00      	cmp	r6, #0
 8015506:	db1f      	blt.n	8015548 <_strtol_l.isra.0+0xc4>
 8015508:	45a9      	cmp	r9, r5
 801550a:	d31d      	bcc.n	8015548 <_strtol_l.isra.0+0xc4>
 801550c:	d101      	bne.n	8015512 <_strtol_l.isra.0+0x8e>
 801550e:	45a2      	cmp	sl, r4
 8015510:	db1a      	blt.n	8015548 <_strtol_l.isra.0+0xc4>
 8015512:	fb05 4503 	mla	r5, r5, r3, r4
 8015516:	2601      	movs	r6, #1
 8015518:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801551c:	e7eb      	b.n	80154f6 <_strtol_l.isra.0+0x72>
 801551e:	2c2b      	cmp	r4, #43	; 0x2b
 8015520:	bf08      	it	eq
 8015522:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015526:	46a8      	mov	r8, r5
 8015528:	bf08      	it	eq
 801552a:	f106 0e02 	addeq.w	lr, r6, #2
 801552e:	e7c7      	b.n	80154c0 <_strtol_l.isra.0+0x3c>
 8015530:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015534:	2f19      	cmp	r7, #25
 8015536:	d801      	bhi.n	801553c <_strtol_l.isra.0+0xb8>
 8015538:	3c37      	subs	r4, #55	; 0x37
 801553a:	e7e1      	b.n	8015500 <_strtol_l.isra.0+0x7c>
 801553c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015540:	2f19      	cmp	r7, #25
 8015542:	d804      	bhi.n	801554e <_strtol_l.isra.0+0xca>
 8015544:	3c57      	subs	r4, #87	; 0x57
 8015546:	e7db      	b.n	8015500 <_strtol_l.isra.0+0x7c>
 8015548:	f04f 36ff 	mov.w	r6, #4294967295
 801554c:	e7e4      	b.n	8015518 <_strtol_l.isra.0+0x94>
 801554e:	2e00      	cmp	r6, #0
 8015550:	da05      	bge.n	801555e <_strtol_l.isra.0+0xda>
 8015552:	2322      	movs	r3, #34	; 0x22
 8015554:	6003      	str	r3, [r0, #0]
 8015556:	4665      	mov	r5, ip
 8015558:	b942      	cbnz	r2, 801556c <_strtol_l.isra.0+0xe8>
 801555a:	4628      	mov	r0, r5
 801555c:	e79d      	b.n	801549a <_strtol_l.isra.0+0x16>
 801555e:	f1b8 0f00 	cmp.w	r8, #0
 8015562:	d000      	beq.n	8015566 <_strtol_l.isra.0+0xe2>
 8015564:	426d      	negs	r5, r5
 8015566:	2a00      	cmp	r2, #0
 8015568:	d0f7      	beq.n	801555a <_strtol_l.isra.0+0xd6>
 801556a:	b10e      	cbz	r6, 8015570 <_strtol_l.isra.0+0xec>
 801556c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015570:	6011      	str	r1, [r2, #0]
 8015572:	e7f2      	b.n	801555a <_strtol_l.isra.0+0xd6>
 8015574:	2430      	movs	r4, #48	; 0x30
 8015576:	2b00      	cmp	r3, #0
 8015578:	d1b3      	bne.n	80154e2 <_strtol_l.isra.0+0x5e>
 801557a:	2308      	movs	r3, #8
 801557c:	e7b1      	b.n	80154e2 <_strtol_l.isra.0+0x5e>
 801557e:	2c30      	cmp	r4, #48	; 0x30
 8015580:	d0a4      	beq.n	80154cc <_strtol_l.isra.0+0x48>
 8015582:	230a      	movs	r3, #10
 8015584:	e7ad      	b.n	80154e2 <_strtol_l.isra.0+0x5e>
 8015586:	bf00      	nop
 8015588:	08018abd 	.word	0x08018abd

0801558c <_strtol_r>:
 801558c:	f7ff bf7a 	b.w	8015484 <_strtol_l.isra.0>

08015590 <__submore>:
 8015590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015594:	460c      	mov	r4, r1
 8015596:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801559c:	4299      	cmp	r1, r3
 801559e:	d11d      	bne.n	80155dc <__submore+0x4c>
 80155a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80155a4:	f7fd f98a 	bl	80128bc <_malloc_r>
 80155a8:	b918      	cbnz	r0, 80155b2 <__submore+0x22>
 80155aa:	f04f 30ff 	mov.w	r0, #4294967295
 80155ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80155b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80155b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80155bc:	6360      	str	r0, [r4, #52]	; 0x34
 80155be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80155c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80155c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80155ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80155ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80155d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80155d6:	6020      	str	r0, [r4, #0]
 80155d8:	2000      	movs	r0, #0
 80155da:	e7e8      	b.n	80155ae <__submore+0x1e>
 80155dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80155de:	0077      	lsls	r7, r6, #1
 80155e0:	463a      	mov	r2, r7
 80155e2:	f7fe fe77 	bl	80142d4 <_realloc_r>
 80155e6:	4605      	mov	r5, r0
 80155e8:	2800      	cmp	r0, #0
 80155ea:	d0de      	beq.n	80155aa <__submore+0x1a>
 80155ec:	eb00 0806 	add.w	r8, r0, r6
 80155f0:	4601      	mov	r1, r0
 80155f2:	4632      	mov	r2, r6
 80155f4:	4640      	mov	r0, r8
 80155f6:	f7fd f8eb 	bl	80127d0 <memcpy>
 80155fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80155fe:	f8c4 8000 	str.w	r8, [r4]
 8015602:	e7e9      	b.n	80155d8 <__submore+0x48>

08015604 <_gettimeofday>:
 8015604:	4b02      	ldr	r3, [pc, #8]	; (8015610 <_gettimeofday+0xc>)
 8015606:	2258      	movs	r2, #88	; 0x58
 8015608:	601a      	str	r2, [r3, #0]
 801560a:	f04f 30ff 	mov.w	r0, #4294967295
 801560e:	4770      	bx	lr
 8015610:	20000c24 	.word	0x20000c24

08015614 <_init>:
 8015614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015616:	bf00      	nop
 8015618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801561a:	bc08      	pop	{r3}
 801561c:	469e      	mov	lr, r3
 801561e:	4770      	bx	lr

08015620 <_fini>:
 8015620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015622:	bf00      	nop
 8015624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015626:	bc08      	pop	{r3}
 8015628:	469e      	mov	lr, r3
 801562a:	4770      	bx	lr
